repository,file_type,id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason,manual_label
deluge-torrent/deluge,comments,1004610739,331,"looks great, thanks. if you can, please add a job to the ci for automatic creating the installer. it will need to have the ability to compile everything it needs (gtk3, openssl, etc.).",1,1,1,0.986011266708374,0.990459680557251,0.9891676902770996,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1004613096,331,i'm working on that atm. the hardest part kind of is compiling gtk. others have public windows builds. could use a build host for this but artifacts don't last forever. and gtk takes quite a bit of time to compile.,0,0,0,0.5127416849136353,0.6178328394889832,0.8297540545463562,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1004642179,331,"the best option would probably be to have a build of gtk hosted somewhere then use that plus the already available builds of others eg. just pip install libtorrent and use prebuilt openssl from the ci host, as most things are available or easy to get like with pip, gtk is the only thing really hard to get.",0,0,0,0.969015896320343,0.9561033844947816,0.9892277717590332,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1004646414,331,"i agree if we can start simple with dependencies the better, where needed we can modify it later to suit. for gtk we could fork the gvsbuild repo and create releases or store them on deluge ftp, either way we want a simple reproducible process.",0,0,0,0.9814063310623168,0.957869589328766,0.9766156673431396,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1004650915,331,"-- yes i plan on on making an cd github actions, since that seems to be what we are using for other things, that will making an installer using prebuilts from github actions image, which the only thing i see needed out side of that is gtk ill make the script to use from appveyor since thats where im currently setting up a build, should be a easy change in url to a different host depending on where you would like to get it from.",0,0,0,0.9641998410224916,0.9574549198150636,0.9666959047317504,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1004690840,331,-- it seems that github actions uses powershell to run so i added a sample cd.yml based on that which should only need a correction for the url where we want to get gtk from. the deluge spec file already has path setup to be able to find openssl and such so unless the wheel of libtorrent from pip requires something else should be able to find all the deps deluge needs. edit: also the path to gtk may need editing all depends on how we get gtk and how the zip for it looks and is extracted and so on. again though should be a fairly easy edit of the spec file to make any correction for how the build environment is setup. appveyor and github actions (maybe others) seem to put openssl and such in the same location so should be pretty easy to make work any where really. also i made the sample only build on pushed tags so any time you want to make a release should be as simple as adding a tag. we could maybe build for prs too or something but you guys can decide that.,0,0,0,0.966737687587738,0.917019248008728,0.838731050491333,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005092640,331,"btw, great work :1st_place_medal:",1,1,1,0.9874130487442015,0.9845286011695862,0.9968444108963012,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005310000,331,"-- i think i have addressed the points you guys have brought up, still uncertain about nsis use again i'm not very familiar but i think other than it being cleaner its at least close to proper syntax?",0,0,0,0.9437540769577026,0.8096249103546143,0.8587866425514221,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005380653,331,"-- so im really stuck its apparently not able to load a dll for gtk, which i have no clue. i have the spec file setup to add gtk\lib folder and the vc redist to path but its still missing a dll from somewhere idk.",-1,-1,-1,0.9382352232933044,0.9669752717018129,0.9787287712097168,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005426388,331,"- don't worry, we will help you with that. seem like there are several dlls missing: 1. python - `no such file or directory: 'c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64\\dlls\\'`. maybe it's on another location or name? 2. make sure that the gtk lib and bin paths are in the path environment variable so the the python libs will find them.",1,0,1,0.5938372015953064,0.9210382103919984,0.774849534034729,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005450228,331,"1. i did a print of the dir and that dir does exist not sure why it says it doesn't. (side note: do wish we could have rdp to the vm like with appveyor.) 2.i am using pathex in pyinstaller to add the gtk lib and bin paths. i could try and add it in the build script vs pyinstaller adding it but should work from pyinstaller. `12734 info: extending pythonpath with paths ['c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64\\scripts', 'c:\\gtk-build\\gtk\\x86\\release\\bin', 'c:\\gtk-build\\gtk\\x86\\release\\lib', 'c:\\gtk-build\\gtk\\x86\\release\\share', 'c:\\gtk\\release\\bin', 'c:\\gtk\\release\\lib', 'c:\\gtk\\release\\share', 'c:\\openssl-win64\\bin', 'c:\\program files (x86)\\microsoft visual ' 'studio\\2019\\enterprise\\vc\\redist\\msvc\\14.29.30133', 'c:\\windows\\system32', 'c:\\windows\\syswow64', 'c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64', 'c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64\\dlls']`",0,0,0,0.9718047380447388,0.9850986003875732,0.9778198599815368,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005455759,331,i tried adding the gtk dir to path from the github actions and still no go. i wish i knew what dll it can't find would be probabbly really easy to find if i knew what i was looking for lol.,1,1,1,0.509921133518219,0.9878389835357666,0.9700680375099182,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005530462,331,"really stupid question, but doesn't help using x64 gtk(for x64 build) ? it's seemingly through bindepend.py/pefile.py trying check a file related to gi(hook) , which links to gtk dlls, running matchdllarch on them, or something. strange error regardless. as said on forum, the pathhex is irrelevant, atleast on real system, with that spec(mine atleast), when in path as djlegolas said, just to not waste time on adding there this and that. anyway, really impressed, looking great, thanks a bunch for all the nice work :) edit: i'm sorry, just looked more at the commit, and see the gvsbuild zip states x64 in name, but i just thought it was x86 because added panthex's lists e.g the standard gvsbuild paths for x86 builds, not standard x64 ones. i apologize for noise, and please disregard, as if having the x64 paths in path env-var, then fine(i'd change them regardless, spec pathex's i mean, if not completelly ditching them all). edit2: before that issue, then cannot even import gi module, making breakage later on presumably, so should look into that and not the missing dir/dll(s) later reported, as byproduct of that presumably. cannot import _gi module from gi - have you checked pygeoip installed correctly in python i.e can you import it / _gi* file in site-packages/gi? edit3: pygobject, not pygeoip lol :) the gtk3 python bindings wheel produced by gvsbuild.",-1,1,-1,0.9600568413734436,0.9380849599838256,0.9893288016319276,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005838989,331,"the script installs pycairo and pygobject from wheel from gtk build folder and is ""successful"" so i see no reason why it would not be available. i could be wrong but i think the missing dll isn't a product of missing gi but other way around it tries to import gi which tries to load the dll which fails ending in the importing failing.",0,0,0,0.9321362376213074,0.9830164313316344,0.989875078201294,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005840354,331,[a link] [a link] i believe [a link] shows us that at least partially gi is installed. and that it fails to import because of missing dll. edit: again maybe i am wrong but if gi module was not installed it would be a name error or something like that not a dll error?,-1,0,0,0.7773560285568237,0.9859362840652466,0.9843855500221252,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005863790,331,"sorry doadin, thanks for explaining, and sounds like you're right. anyway, i remember during looking through cmd output during mine builds, that it stated sometimes, probably unrelated, looking for ctypes in dlls, though not specially for gi, but saw there where a ctypes pyd in that dlls folder, so maybe check if there, if possible, though strange mentions dir not found in error, when there. sorry for noise and i'll butt out now - best of luck you guys :)",-1,1,1,0.8628585338592529,0.8878803253173828,0.5919946432113647,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005874174,331,i never turn down help/ideas. :),1,1,1,0.9396321177482604,0.9956504702568054,0.9952307343482972,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005882953,331,"thanks mate :) just very quick, seemingly is issue of gdkpixbuff hook tries to find path to gi library dir it gets the wrong one and fails colecting any pixbuff-loaders - it tries to do a dll check i think, but cannot on a folder, as the error just mentions folder not file. anyway, i got this from looking closer at the output and googling it, where issue with little other, but slight related, very slight but regardless - it was stated that e.g. the user having issues had poisened his build environment by having gtk3/gdk dll's in current folder or next to script or something, messing that part up. a suggestion was to check if can see the path correct by adding in spec file, just for troubleshooting... well, you can see yourself what to add, a single line printing it to cmd during freeze - i didn't yet read it through, so possibly better hints later, and again sorry if way off: [a link] edit: no need add in spec, sorry, just states to check in python from where running pyinstaller normally. here gets the correct: c:\\gtk-build\\gtk\\x64\\release\\bin",1,1,1,0.9933034777641296,0.9931382536888124,0.9958555102348328,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005895701,331,i have a theory i am testing now. normally i believe when you install gtk python bindings you end up with a struckture something like python/lib/site-packages/gnome/gi-repository i just made a build attempt and made it print out the site-packages folder and the gi-repository which i believe normally has libs in it only had like 1 file and was a __init__.py or something like that. im thinking maybe for some reason the wheel is incomplete. im currently running a build on my test vm to see the folder structure.,0,0,0,0.5055787563323975,0.6228294968605042,0.8356614708900452,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005898284,331,"when installing pygobject, then always makes gi dir under site_packages and bunch other gi dirs there. indeed if only a __init__.py, then the issue as per error, as the _gi*.pyd not there, which tries imported - so the install of wheel went wrong, or incomplete as you state. good catch, sorry for my ramblings before.",-1,-1,-1,0.959037184715271,0.937358856201172,0.9712058305740356,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005901327,331,i'm trying to run a test suggested in that github issue and see where it is looking for the lib then we can check that folder to confirm if the files needed are there or not.,0,0,0,0.9793835282325744,0.9824874997138976,0.9897340536117554,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005902679,331,"the gi regardless is f'ed up - you need a _gi*.pyd there for import, and i'm pretty sure that's the root cause(if you say there only is a init.py under site_packages/gi). but sure, test that out. edit: c:\python37\lib\site-packages\gi>dir volume in drive c has no label. volume serial number is aab9-32ce directory of c:\python37\lib\site-packages\gi 01/02/2022 07:19 pm . 01/02/2022 07:19 pm .. 08/25/2019 05:33 pm 6,688 docstring.py 05/06/2020 04:48 pm 5,241 importer.py 05/06/2020 04:48 pm 9,549 module.py 01/02/2022 07:19 pm overrides 05/06/2020 04:48 pm 727 pygtkcompat.py 01/02/2022 07:19 pm repository 05/06/2020 04:48 pm 13,543 types.py 12/30/2019 11:13 am 1,969 _constants.py 11/06/2020 03:06 pm 2,082 _error.py 01/02/2022 12:19 am 327,168 _gi.cp37-win_amd64.pyd 01/02/2022 12:19 am 19,456 _gi_cairo.cp37-win_amd64.pyd 03/30/2021 06:42 am 10,172 _gtktemplate.py 11/06/2020 03:06 pm 13,140 _option.py 05/06/2020 04:48 pm 7,615 _ossighelper.py 05/06/2020 04:48 pm 14,163 _propertyhelper.py 12/30/2019 11:13 am 9,303 _signalhelper.py 01/02/2022 12:19 am 6,246 __init__.py 01/02/2022 07:19 pm __pycache__ 15 file(s) 447,062 bytes 5 dir(s) 8,373,551,104 bytes free",0,0,0,0.8955699801445007,0.977960169315338,0.9865787625312804,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005907479,331,"we have that same struckture [a link] it is the other folder i'm uncertain about. [a link] [a link] . shows ""directory: c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\gi\repository"" with only a pycache dir and a ""__init__.py"" file im fairly sure there is supposed to be more. again waiting for my vm to finish building to confirm. however if this is the case then we either have to build gtk in the build process or wait for gvsbuild to fix the wheel creation? idk.",0,0,0,0.9656193852424622,0.727114737033844,0.9715909957885742,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005914978,331,"sorry doadin, i get myself confused, and forgot what yopu said initially about the import failing because missing file of that gdkpixbuff or whatever, doh :) there should only be a __init__.py there. edit: ...and pycache, though unimportant.",-1,-1,1,0.9556702971458436,0.8525204062461853,0.979767084121704,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005917331,331,"with a test python script with `from pyinstaller.utils.hooks.gi import get_gi_libdir get_gi_libdir('gdkpixbuf', '2.0') ` we get ` traceback (most recent call last): file ""c:\test.py"", line 2, in get_gi_libdir('gdkpixbuf', '2.0') file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\utils\hooks\gi.py"", line 35, in get_gi_libdir path = findsystemlibrary(lib.strip()) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\depend\bindepend.py"", line 942, in findsystemlibrary return getfullnameof(name) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\depend\bindepend.py"", line 71, in getfullnameof if os.path.exists(npth) and matchdllarch(npth): file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\depend\bindepend.py"", line 178, in matchdllarch pe = pefile.pe(filename, fast_load=true) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pefile.py"", line 2743, in __init__ self.__parse__(name, data, fast_load) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pefile.py"", line 2808, in __parse__ ""unable to access file '{0}'{1}"".format(fname, exception_msg) exception: unable to access file 'c:\': [errno 2] no such file or directory: 'c:\\' ` which is interesting it seems to just search the dir the script is ran from?",0,0,0,0.9683010578155518,0.994539201259613,0.9915658235549928,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005922843,331,"hmm, that dir is not present at all? i don't get where gets that part from? sorry over my head, please let me know if can do something to help test in a vm, but else hope you good people can figure it out :) edit: well, besides hacking the hook of pyinstaller to hardcode correct path... edit2: sorry, other places too, as importing gi fails precedingly, and not same hook there presumably. again, over my head :(",-1,-1,-1,0.9908331036567688,0.9667474627494812,0.974864661693573,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005928585,331,"yea i think this is way over my head looking at [a link] it searches sys.path for dll's to which in our spec file we extend to include the gtk build folder, so how is it not finding them? again unless its not actually the gtk libs we are missing and it is looking for msvc dll's or something to which again it would be helpful if it told us which dll it is looking for and not finding so we could add that dll's dir to our path.... but that would make this too easy i guess...",0,0,-1,0.7666855454444885,0.4945503175258636,0.9030137062072754,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005932331,331,"yeah indeed puzzling. i have no input, but would personally try without any pathex's, as maybe trips something up, like that pyinstaller thread i posted before about poisening his own environment - in my many testings of this, i needed zero pathex's, but just all in paths. i just tested a spec today actually without such, and posted it in my edit to forum-thread. hope you succede, or get help from qualified people, thanks again!",1,1,1,0.9728155732154846,0.8131095170974731,0.9915382862091064,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005932485,331,im starting to actually thinking maybe this is a issue of github actions running some command as cmd and some with powershell and therefore we have different path environment variables? im not sure thats a thing? edit apparently the default shell is powershell and we are setting path through powershell way so idk.,0,-1,0,0.4997764527797699,0.8924914002418518,0.8901811838150024,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005935166,331,well the test script doesn't use the spec file and also fails so unfortunatly i don't think thats an issue. at least not yet.,-1,0,0,0.9076088070869446,0.764101505279541,0.9747740030288696,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005940163,331,doh! are you setting paths like so: [a link],-1,-1,-1,0.7281880378723145,0.9712975025177002,0.9786914587020874,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005942064,331,you might be on to somethinig i was setting them using the normal windows method but in the install dependencies step not the freeze deluge step which that post seems to suggest that they don't carry over between runs. maybe thats it.,0,0,0,0.983169972896576,0.9360881447792052,0.9794031977653505,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005944857,331,i think i also kind of just confirmed this in my last test we get [code block] which i added print(sys.path) to the test python script and what do you know no gtk folder. i would think that the spec file extending path to include the gtk folder would by pass this but idk.,0,0,0,0.9792503118515016,0.9375799298286438,0.9833886623382568,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005950013,331,"glad you hopefully figured it out, and thanks for conversation - again, if fails still, please let me know if can do something to help test. take care.",1,1,1,0.9744167923927308,0.962328851222992,0.9934161901474,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005953430,331,"-- it seems to be working now, the only issue is the icon file location its not finding but that worst case scenario could be hard coded to the deluge source path. however the gi imports working now. so we have made progress.",0,0,1,0.957230508327484,0.6875005960464478,0.7610854506492615,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1005990595,331,"nice work, much appreciated :tada:",1,1,1,0.9864323735237122,0.9956620335578918,0.995662271976471,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005993344,331,"since this is really close now a few things to note going forward 1. depends on gtk artifact from appveyor/zip file that has the structure like so: gvsbuild-vs16-x64.zip/release/bin gvsbuild-vs16-x64.zip/release/lib etc etc 2. the pyinstaller spec file is coded to a set deluge.ico path specific to github actions checkout 3. i don't know how to use nsis command line args to make nsis produce different installers for x86 vs x64 why was this needed? i had two nsis scripts to change the installer file name so we can provide x86 and x64 installers without confusion of which a user downloaded. and it changes the default install location to ""program files"" for x64 or ""program files (x86)"" for x86 4. currently the gtk build artifacts are built using vs 2019 and python 3.7 so i used python 3.7 in the cd action and the cd action has hard coded locations for python which idk if actions/setup-python provides a variable to get pythons path so we can use that instead to make the builds less python specific or what?",0,0,0,0.9263976812362672,0.9532662034034728,0.9132330417633056,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1006001076,331,-- something i can change now is do we want the cd to run on pull requests so we can verify changes easier? or just on tags? do we want to make github releases?,0,0,0,0.977494180202484,0.9936434030532836,0.9926409125328064,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1006067051,331,"very quickly while you're messing with it anyway, then as per my last edit on forum-thread, using 'pip install .' like deluge official instructions states, followed by 'python setup.py install_scripts', fixes deluge-console working again(freezed i mean), and is more proper installed anyway, without double deluge package folders(one egg one normal, mixing up). i noticed you don't include hidden_imports for gi and cairo, but i guess you've tested that this isn't needed - was previously, but maybe not now with added spec-additions. btw, i tested spec also runs fine in packaging/win32 folder(if shipped there in feature), also icons support relative path in spec btw. you don't have to answer, i know you're busy, but just so you don't need read through my way to long edits on forum about this :) thanks again. edit: yes, hidden_imports for gi/cairo not needed, and sorry realized it was pretty dumb thing to state anyway, after previous long conversation about gi importing issues, doh, but i didn't knew if that option did more than just extra impports, sorry. edit2: last thing, instead of in deluge instructions having user add '--distpath xxxx' additional option to pyinstaller, then can add it to spec, e.g. like i just did in mine, i just set to 'freeze' of cwd(packaging/win) like instructions. i btw changed the analyze code to avoid need import sys when os already imported and does job fine, though not important: [a link] (emulate --clean would need delete build folder i guess, i don't really see why, but regardless) anyway, disregard and concentrate on the important stuff of-course :) edit3: very last, promise - just wanted to end with uploading my final spec, where i added the ""--clean"" code, the ""--noconfirm/-y"" code, and ~50mb savings from unneeded icons(gi hook copies all from share), i didn't touch locales as didn't neither in unofficial installer i see. [a link]",0,0,0,0.950203001499176,0.8047560453414917,0.974087655544281,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007058338,331,adwaita icons are being used.,0,0,0,0.9873979091644288,0.9688374400138856,0.9883440732955932,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007069619,331,"sure doadin, and obviously your call, but i just did this to unofficial installer for 1+ years now, without errors reported, well not my builds atleast. i left the 'scalable' folder there, and index file, which has all the symbolic deluge icons as far as i know, or there would be errors in deluge-debug.exe which i checked. honestly don't know if this is particular correct, but however does work i know. as said gi hook copies much of share over needlessly, just in case. thanks for reply, and again, ping me if can help somehow.",1,1,1,0.874087393283844,0.8812543153762817,0.9762593507766724,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007104661,331,"sorry didn't see you left scale and the index, working on nsis atm then i'll test that in a min.",-1,-1,-1,0.98723965883255,0.986718475818634,0.9894673228263856,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007348293,331,"i would not want this to run on every pr (fine here for testing), tags might be useful (those without `-dev0`), if we also have a manual option to run it that is good. oh the pr runs could be gated as we did for the security tests so would need to include a pr comment value to run it.",0,0,0,0.8127484917640686,0.8310058116912842,0.7439369559288025,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007353845,331,"/off-topic greetings *sorry in advance for this off-topic, but i couldn't find any other way to ask your opinion directly.* i'm so glad for the ongoing development of deluge, and i've been constantly wondering: why not enabling issues and discussions in this repo? and, also why not migrate issue tracker from trac to github? i believe it would help in getting more attention to the project and more people to actively contribute in deluge's development. i made this thread in the forum [a link] 2.5 years ago, but never got a response from a dev. how do you find this idea? /off-topic",-1,-1,1,0.9680026173591614,0.6899374127388,0.757193922996521,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1007359659,331,-- it should now have this not sure about this. also i don't know how to make the nsis change its providing a def but idk how to process it in the nsis script.,0,0,0,0.8931297659873962,0.7024712562561035,0.929746389389038,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007362687,331,-- also is there a version of python we want to target for builds? i currently have a github action for gtk setup to target 3.8 which should be ready to copy over if you want to. and it should be easy to change the deluge cd action as well now. i think you have test run on 3.8? looks like python supports each new version for +1 year from the last and 3.8 is supported till 2024 so that could be a decent target. i see deluge code was updated to work with 3.10 though so we could go for newer.,0,0,0,0.6523473858833313,0.8610321283340454,0.8299015164375305,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007366997,331,very offtopic.. i have considered it but also don't want to be at the whim of github... for the windows build i am happy with almost latest python version e.g. 3.9. we want something that is stable and not outdated as you mentioned. if it's easier to stick with 3.8 then that is perfect with me :+1: obviously deluge needs to support much older versions so it's python 3.6+ now,1,1,1,0.8891929388046265,0.954001009464264,0.9867686629295348,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007379350,331,"-- 3.9 sounds like a good target its not latest but has had a year to get stable and get improvements, and also only a year old so not too dated. i'm starting a gtk build with 3.9 now to test make sure it goes ok, with how its setup now its just change the number in three places for each job in the action file and off it goes. and for the deluge action only in one spot per job.",1,0,1,0.927046239376068,0.7623153328895569,0.9257403016090392,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1007388942,331,-- as of now as long as the gtk build with python 3.9 goes ok all i need to do is adjust the url of where to get the gtk.zip build from.,0,0,0,0.9850175976753236,0.9807780981063844,0.9791628122329712,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007498572,331,-- sorry not sure why [a link] is'nt showing as the current changes.,-1,-1,-1,0.9875242710113524,0.9806621074676514,0.9822167158126832,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007538687,331,"-- they use github actions but don't release builds. i was building on appveyor but switched to github actions so really if you fork the repo you can go with either. appveyor build process doesn't make github releases only appveyor artifacts. the github actions i updated recently so it will make a release on tag, downloading that release i'm not sure of a better way other than just downloading from a url. nothing custom to it really just skip a few thing we don't need to build, could also be more things we don't need to build but that i'm not sure of.",0,0,0,0.7617701888084412,0.7175207138061523,0.939778447151184,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007603473,331,-- the github action i have for gtk currently build on any tag and now has two strategy matrix. ` - platform: x64 vs_ver: 16 pythonversion: 3.9 - platform: x86 vs_ver: 16 pythonversion: 3.9 ` and the end result is a github release with two zip files in the format: gvsbuild-pypythonversion-vsvs_ver-arch.zip the deluge build will download w.e. url and name the file gtk.zip so only the url has to change there when we want to use a new build(unless we wana rename the zip to something more generic and upload to deluge ftp or something). i also updated the script to scan for gtk python wheels so we no longer have a static pycairo and pygobject wheel which includes version and things now it will just find them and install what/if it finds any in the gtkbuild/python folder.,0,0,0,0.9751508235931396,0.9837353229522704,0.9823306798934937,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007696999,331,so it appears if you re-run a build the release with delete the old and upload the new so the url doesn't have to change with using github releases for gtk. alternatively could use something like [a link] to just download the latest release.,0,0,0,0.98918354511261,0.992942988872528,0.9940226674079896,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007900819,331,"-- i think we can build everything for py3.6-3.9 (don't know if py3.10 will work, not to mention 3.11), and libtorrent 1.2 and 2.0. it all depends on gtk to be built for all of the python versions (and it look like is already compiling it to 3.7-3.9). as a result, we will have every supported python version with every supported libtorrent (still a wip :sweat_smile:) the difference is only in the `matrix` section in the `cd.yml` file: [code block] and the gtk zip download link was moved to the `install dependencies` section (the only place it is needed) as follows: [code block] in addition, need to change the artifact zip file name like so: [code block] the end result: [a link]",1,0,1,0.7132695913314819,0.7738012075424194,0.9797479510307312,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1007953321,331,"as a stand-alone install we don't need to build other python versions, we pick one that is stable and is compatible with deluge dependencies. it might be worthwhile having a libtorrent 2.0 for testing but not sure as a wide release :thinking:",0,0,1,0.9293872117996216,0.7819539308547974,0.9108298420906068,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1007965087,331,"it's a valid point, and it is you decision at the end :1st_place_medal:. some think points: - create a libtorrent2.0 variant which will be always marked as testing release, up until we finish with the fixes for it. - add the matrix for the ci phase, and test on all supported python versions (>= 3.6), also on lt1.2/2.0. - - change your `cd.yml` file for gvsbuild, for better and shorter file, to: [code block]",1,0,1,0.5202317237854004,0.9308404922485352,0.9281684160232544,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008198514,331,"-- the build process seems to work with anything python 3.7-3.9, except for with 3.7 & 3.9 the end exe's give this issue: ` traceback (most recent call last): file ""deluge-script.pyw"", line 33, in file ""deluge-script.pyw"", line 22, in importlib_load_entry_point file ""importlib\metadata.py"", line 524, in distribution file ""importlib\metadata.py"", line 187, in from_name importlib.metadata.packagenotfounderror: deluge ` from what i read this was due to a change early on in 3.9 which now seems maybe backported to 3.8.(googleing gives a lot of results from people saying 3.9 issue, went to 3.8 and its fine) i changed the build back to 3.7, after trying 3.8 and 3.9, and its working fine.",0,0,0,0.9847538471221924,0.9875828623771667,0.9933472871780396,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008203779,331,"i am getting [a link] when adding datas += [ ('deluge', 'deluge-2.0.5-py3.7.egg/deluge') ]",0,0,0,0.9586084485054016,0.9920601844787598,0.994573175907135,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008206983,331,"yeah, sorry, that was from pretty old edit, and at the time i didn't really know it was supposed to build from packages/win, and so just changed to build from deluge-source dir, as you did at time, instead of my previous testing direct from scripts dir. anyway, that's old as said, and i posted better solution later, so unneeded. also as said, for fixing deluge-console, and to follow general best practise guide-lines, imho consider installing through 'pip install .' or alternatively, if must use setup.py, then i checked works through adding install command '--old-and-unmanageable', or alternatively what pip does, and use '--single-version-externally-managed --record record.txt' to setup.py. last, the excludes you added won't work, and will need e.g what i did i.e folders not supported there. took me a bunch of tests to get working, though never claimed being the brightest neither :) edit: sorry for being vague, i meant this won't work: 'excludes=excludes,' - the excludes list itself is fine, but needs used in other way, e.g like the for loop and list comprehension or whatever called.",-1,-1,-1,0.8985430002212524,0.9589786529541016,0.976090669631958,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008208822,331,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008211896,331,"sorry if you saw my comment about gtk build i figured it out, so nvm. :)",-1,-1,1,0.976052701473236,0.9289000034332277,0.9302834868431092,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008216090,331,"doadin, i'm going to bed now, pretty late/early here in my side of the woods, but just wanted to say that in my spec/setup i have crypto dlls auto-picked up and used e.g. added a https tracker manually and checked ""announce ok"", which won't happen without. just noticed you messed with the pathex/datas additions. again, amazing work all around!",1,1,1,0.9909096360206604,0.9803377389907836,0.9961238503456116,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008222380,331,unfortunately in github action environ its not picking up the x64 dll for openssl even though its in the os path environment variable.,-1,0,0,0.7767741084098816,0.826312243938446,0.5632928013801575,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008293597,331,"doadin, quick note just, hope okay. i wanted to look into the stuff you mentioned regarding newer python's making issues, so just started doing little testings. i always thought probably being issues when going to py3.8 and above(but wanted wait to if you maybe asked for help regarding it), tbecause in unofficial installer i had to specifically code into __init__.py os.add_dll_directory(dir),well used *.pth initially but regardless, because of changes in how python worked in those versions, to avoid dll mismatch i also was plauged with initially with bug-reports by forum-users before py3.8. i wasen't sure if would work anyway for you, without mods, because the gvsbuild devs included os.add_dll_directory into __init__.py's of pycairo and pygobject after i raised that there where newly introduced issues, and one of the devs explained me the pitfall, and made/comitted fix still there i.e. checks path for needed gtk dll's and add the dirs found into os.add_dll_directory. there can still then be mismatches, because some have dirs in path from other apps, with said dll's, or in system32 with incompatible versions, completelly breaking deluge(system32 takes precedense always, before this os.add_dll_directory change introduced, saving me from lotta trouble at the time), so i in my scripts/builds(unofficial installer) patch that out of __init__.py of pycairo/pygobject and in deluge's __init__.py i hardcode the bin dir of gtk , which i included in app dir, as only call to os.add_dll_directory happening, as if keeping the pycairo/pygobject's __init__.py's and add mine infront or some other place, then the docs state it cannot promise load order of multiple os_add_dll_directories, hence i did it that way just in case. anyway, i suspect you need openssl location in os_add_dll_dir, but if having it next to the libtorrent.pyd under site-packages, then works regardless, so i just had my scripts(unofficial installer) copy the two built openssl dlls to there, but could also be copied to gtk bin dir as included in os.add_dll_dir if not patching out the mods by pycairo/gobject, or if override and doing it yourself like i did. forgive me for having a problem explaining stuff shortly :) so, initially deluge couldn't import libtorrent, even unfreezed with python 3.9.9, but after copying dll's in place next to libtorrent.pyd, works, and gets picked up through freeze because is next to the libtorrent pyd, most likely would also have worked if copied to gtk bin dir, but whatever. i'm thinking this possibly is your github-actions openssl freezing issue also, because maybe messed with newer python's when happened, sorry if wrong, but regardless, wanted to say that works for me atleast with my first test of py3.9.9, just waiting for freeze to finish(so path for openssl not enough for even unfreezed, is my point, on py3.8 and up - also with deluged not even loading the __init__.py's of pycairo/pygobject as not gtk app). okay finished freezing, and fails loading deluge because error stated in gi's __init__.py as paramter incorrect for add_dll_directory it states - as said it by default enumerates path for cairo/gi libs(cairo.dll) and adds those found to os.add_dll_directory, which on clean system is bin dir of gtk, but that is failing now - maybe pyinstaller sets up a fake environment, where such isn't allowed i.e. parsing through path, or using other dll's outside freezed dir, and regardless shouldn't work like that freezed obviously anyway. regardless might work if patching that out and using e.g. my deluge __init__.py, or some other trick, but i'll check it out and post back when progress. this must also have been brought up with pyinstaller in general before i'm sure, but didn't look it up yet. sorry again for wordyness. last, why it's not breaking before(under py3.8) with wrong parameter error, is that it check if os.add_dll_dir attribute available, and if not skips, in __init__.py of pycairo/pygobject, so first time using that section from there now, as upped python version, so attribute available. i'll make some testing and will make edits when hopefully finding something that works, and try to keep short, unless you beat me to it with solution of-course - and sorry haven't looked at your latest commits, so hope you haven't already fixed, and i'm speaking redundantly here. thank you. edit: okay some progress atleast - my first handfull tests failed for some reason, but for now atleast, then i just kept the default pycairo/pygobject __init__.py contents under site-packages gi/cairo of unfreezed deluge-install, and added two lines to each of them, i found by googling it, by one of the gvsbuild devs on pyinstaller bug-tracker, not the one i talked too initially which added the patching, but anyway, and he had issues with a frozen gtk app, because of the gi __init__.py gvsbuild patches, and he posted a few lines as workaround in end, which worked and i used here. in short there's added ';' after your path, can only be seen in cmd(echo %path%, and not in advanced system settings/env-vars), and this makes the path parsing trip up(in pygobject/pycairo), so the added code removes that semicolon at end, if there, and so i now finished a py3.9.9 freezed build semingly working, only checked deluge.exe but still, without errors shown. if finding more later, when time, i'll add. i don't like the path parsing still, as point of breakage, though i'm not sure how much pyinstaller bootloader/strapper allows interference from outside regardless, or if maybe first the freezed dir takes precedense anyway, so no concern - i did rename the gtk and openssl dirs on system, so wasen't working from path anymore, and then still worked, so not sure that even is used, and anyways as said, freezed dir probably takes precedense anyways, so maybe ok in end here. i added: if os.environ['path'][-1] == ';': os.environ['path'] = os.environ['path'][:-1] just over 'added_dirs []' in both __init.py's of pycairo/pygobject, as only change, and had installed deluge through 'pip install .' and 'python setup.py install_scripts', before 'pyinstaller deluge.spec', with my spec, and openssl's there also.. edit2: i reported it to gvsbuild here: [a link] - didn't make pr as maybe they want to do it differently, i dunno. i'll do some tests later when have time, to see if the current pygobject/pycairo contents(the old one) is a point of failure in freezed app i.e. i add non-compatible cairo.dll or whatever else referenced into system32 or alike, and see if used and breaks or not, and if not, then can just use as is, and apply patch untill upstream fixes it i think. your choise of-course. i haven't tested all exe's yet, so do that also, later when have time, and then will report back, for last time in this :)",1,1,1,0.8894292116165161,0.8068583607673645,0.920871913433075,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008305875,331,i just created a deluge repo for storing the builds: [a link] it's just run manually for now for a single python version but if you are having issues can extend it to build other python versions...,0,0,0,0.9575394988059998,0.9579209089279176,0.9909118413925172,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008316345,331,"-- yes i still have not had the time to figure out the issue with newer python versions so would be nice to at least extend that to include python 3.7 so we can get builds out sooner rather than later? it's been a long time since we have seen a new windows build. i also updated to address all but 2 of your comments, if i missed any let me know, and let me know what you thing about those two.",0,0,0,0.810675859451294,0.8548979759216309,0.9563668966293336,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008328612,331,"3.8+ gives: ` traceback (most recent call last): file ""deluge-gtk-script.pyw"", line 33, in file ""deluge-gtk-script.pyw"", line 22, in importlib_load_entry_point file ""importlib\metadata.py"", line 524, in distribution file ""importlib\metadata.py"", line 187, in from_name importlib.metadata.packagenotfounderror: deluge ` which from some googleing suggests using pyinstaller copy_metadata would fix but unfortunatly does not.",0,0,0,0.9813794493675232,0.982065975666046,0.9869332313537598,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008336269,331,"doadin, it doesn't here, so either is a gtk-actions issue, or which i much expect, that you don't install deluge like me. honestly don't understand why you insist on installing through setup.py and not through pip, or add flags to setup.py that don't need you to delete requirements.txt as workaround for it installs as an incomplete egg which needs extra files imported which results in two deluge packages confusing everything etc, not to mention breaking deluge-console, not the most important on windows i'd speculate, but nonetheess. your call of-course, and i'll go ahead and make the pr gvsbuild asked me to, upstream, in mean time. edit: i mean freezes incomplete, not installs - sorry bad wording. edit2: i could reproduce your error when installing deluge from straight 'python setup.py install' and freezing(and i remembered to rename/delete requires.txt also.",0,-1,-1,0.7588561773300171,0.8795842528343201,0.6917005181312561,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008342279,331,"thanks for reply, and i sincerly apologize my ton in last post, didn't mean it in any way negative honestly, and for the record am not in doubt about you being much ahead of me regarding development, to say in the slightest :) i have only tested stable deluge, and will make edits if finding something, to use for you or not of-course at your discretion - thank you :)",1,1,1,0.9915947318077089,0.9947651624679564,0.9962316155433656,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008342651,331,ill be the first to admit i don't know very much i am just trying to help the community.,-1,0,-1,0.8255286812782288,0.5566884875297546,0.5512266159057617,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008343868,331,"-- in addition to the changes i mention earlier from your review, i have added changes has provided and we can use python 3.8+ now. also the build process is cleaner and simpler. the only adjustment left is the spec file libssl-x64 include. which i'm not sure why exactly it is needed. github actions has the x64 lib in its $env:path so why pyinstaller is only getting the 32-bit bin and not the x64 i'm not sure, maybe pyinstaller searches system32 first and it finds a libssl and uses that and moves on? i'm not sure.",0,0,0,0.9142394065856934,0.9628567099571228,0.4958173632621765,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008344019,331,the only change i have not pulled in is for removeing the share folders and honestly i an not sure what you have it doing and why it needs to run on every script.,-1,-1,0,0.9487069249153136,0.8216583728790283,0.8852419257164001,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008345160,331,"indeed, bothered me too :) of-course your call. as said, i think ran 50 runs to even get that working, though probably an issue with me more than anything else. but it doesn't help filtering a.datas, when we have b-h.datas with those icons anyway, getting merged at end - maybe could do something with toc(), but i just got tired of it when having found something working. it goes through all collected files for each step, x.datas, and ""rewrites"" it through checking if matches with the excludes filter, and if not, then adds, and if matches, then strips/avoids - reverse filtering of sorts. no biggie of course, and i'm sure could be done better, e.g. the straight datas, like on top, but couldn't make work. also, maybe cas/you think it's too agressive i dunno, only found it worked as far as could see myself, and has svg decoder in gdkpixbuff loader through librsvg so why include all the pngs additionally, but what do i know. thanks :) edit: just read your previous link - i had only read github homepage, with the pip direction, sorry. edit: well, probably could avoid the for-loop on the scripts not using gtk atleast, as guess no icons collected, but just didn't bother at that point. edit: i had openssl dll's as said in lib\site-packages, next to libtorrent.pyd, copied there by old habit, and so got picked up for me in freeze, but if not having that, then as not in gtk3 dir which gets added to os.add_dll_directory from pygobject/pycairo, then cannot find, as path irrelevant on py3.8=+ so instead of copy over like i do, then could add such os.xxxx call to spec, but you have added something yourself fixing it you said, i honestly haven't looked at your spec yet, but no need then, as you found solution, good job. edit: as said, i haden't yet tested all exe's, though most i.e. deluge, deluge-debug, deluge-gtk, deluged and webui. now i see deluge-console don't work, but i'm guessing it's not that hard fix, but well see. it's missing curses it states, which didn't on <py3.8, so maybe have add a line or to to spec, but i'll test and post if find something.",1,1,1,0.9711207151412964,0.9929463267326356,0.9545801877975464,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008351654,331,"well now im seeing: deluge-debug.exe: ` ps e:\program files\deluge> .\deluge-debug traceback (most recent call last): file ""deluge-debug-script.py"", line 33, in file ""deluge\ui\ui_entry.py"", line 39, in start_ui ui_entrypoints[entrypoint.name] = entrypoint.load() file ""pkg_resources\__init__.py"", line 2449, in load file ""pkg_resources\__init__.py"", line 2472, in require file ""pkg_resources\__init__.py"", line 772, in resolve pkg_resources.distributionnotfound: the 'mako' distribution was not found and is required by the application [44432] failed to execute script 'deluge-debug-script' due to unhandled exception! ` deluge.exe: ` traceback (most recent call last): file ""deluge-script.pyw"", line 33, in file ""deluge\ui\ui_entry.py"", line 39, in start_ui ui_entrypoints[entrypoint.name] = entrypoint.load() file ""pkg_resources\__init__.py"", line 2449, in load file ""pkg_resources\__init__.py"", line 2472, in require file ""pkg_resources\__init__.py"", line 772, in resolve pkg_resources.distributionnotfound: the 'certifi; sys_platform == "" ` all the other exes work. maybe i missed something. edit: also using ""working"" there isn't exactly true deluge-console loads but freezes and becomes unusable. leave [a link] here as last working build so i can keep track.",0,0,0,0.9530425667762756,0.9771042466163636,0.988944411277771,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008353776,331,"doadin, i'm sorry, when i said ""working"" i meant in the previous py-versions - i did say that i haden't tested all exe's yet in py3.8=+, but sorry if formulated badly - probably - sorry. . there are some strange issues - first deluge-console seemingly works if after installing deluge unfreezed, then also installing windows-curses - that didn't need happen on <py3.8. then when that is installed, then works, i think, need test more, but shows some initial error about libintl and referenced before assignment, also deluge-debug states such - though seemingly works - i just think need intl dll and whatnot other dll in main dir, that i used to copy there with unofficial installer, but will take a look. last, atleast unfreezed, then now have deluged showing window open all time, like the debug.exe should - i remember having this issue along time ago, and got patches by tobbez fixing this, so maybe needed here again, i dunno - hmm, no i didn't use such in last unofficial build - now i'm getting confused, will write back later, and sorry if making issues for you doadin, didn't mean to. edit: the issue with window staying open, is a bug in deluge i believe, and need fixed, i have the patch-""method"" by tobbez, i didn't see it because use alternative exe loader and not stock, and edits shebang to pyw version, so think that will need changed, and should be reported, just hate making prs as no programmer, just slight tinker, and no issues section on deluge well bug-tracker on trac. anyway, i'll test some more, and sorry again, i didn't remember these issues. edit: i'm sure you know, but deluge-console only work non-interactive on windows, or atleast used too - so i always tested cli args.",-1,-1,-1,0.987491488456726,0.9930785298347472,0.990661919116974,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008357929,331,"i'm sorry i'm finding it very hard to keep track of these conversations so helping out is tricky. can we try and keep a track of exactly what is working and what is not and be very specific about each issue and what the potential fixes are. also when making commit updates it would be useful to actually see what and why changes are being made rather than rebase to single commit. it might also be useful for workarounds in the code to have terse comments about what is being fixed. would you mind updating the list of tasks remaining in the pr description and tick them off as done. we can then decide if they are a priority or not. we want a minimum viable stable installer for windows therefore don't need to chase latest versions: * if there are too many issues with python 3.9 then don't work on it, use python 3.7. * we only need to verify that the `x86` installer works since it's compatible with `x64` thus concentrate on that. * i would also prefer if we used libtorrent 1.2 rather than 2.0 again for stability * i don't think reducing the installer size is a priority and can come later please provide a bit more information on error and fixes by providing traces, code snippets and links to files. avoid sharing links to issues that are not github.com since those are sham sites making money via ad revenue e.g. giters.com and also the linking between github issues fails. the deluge-console should work on windows using windows-curses now",-1,-1,-1,0.9861702919006348,0.98711895942688,0.9906348586082458,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008360760,331,"-- i'm just going to do one last rebase to go back to what we had/what you reviewed if we find a way to improve on that, that doesn't break things then we can go from there. this new way broke two things in an attempt to just use a newer python version. just going to scrap that and go with 3.7.",0,0,0,0.8498818874359131,0.8365335464477539,0.9643113613128662,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008361614,331,-- ok from here everything is how you last reviewed. with the changes you requested.,0,0,0,0.9724604487419128,0.8709441423416138,0.9901754260063172,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008361765,331,"i apologize cas. py3.9.9 with my spec and install, has no issues in freezed version as far as i see now. in unfreezed is having issue of reporting intl dl translation issuel, but works, though as kinda off-topic here i guess, when not in freezed, then i didn't post output, can on request. only thing is that the freezed deluged works because i defined console=false in spec - bit it ends in py, not pyw, so default windows exe loader/wrapper loads through python.exe not pythonw.exe making cmd window open in unfreezed- again i guess of-topic as not in freezed. all 8 exe's tested working. deluge-console only works non-interactive, for me, in all my tests, both here and in unofficial, and in ""real install"". spec used: [a link] i add unfreezed errors just in case, but again, no issue in freezed version. [code block]` [code block]`",-1,-1,-1,0.9015986323356628,0.4172379672527313,0.9583547115325928,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008361953,331,"i'm sorry, didn't see doadin/your reply, sorry guys, i'll but out and stop derailing, and only comment upon request. thanks and sorry.",-1,-1,-1,0.9885786771774292,0.993675410747528,0.995105504989624,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008362901,331,i don't think anyone really minds help but i had a build that worked only thing not tested was deluge-console which didn't work in deluge 1.3.x anyways so imo not a huge lose(hard to lose something you didn't really have as far as most users are concerned). the only thing really needed is deleting the requires.txt not really a big deal imo. nothing done here has to hack/slash gtk or exe loaders or anything. -- updated to use libtorrent 1.2.15,0,0,1,0.7085791826248169,0.5240891575813293,0.6819763779640198,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1008363687,331,"i think the only reason why the openssl dll addition is needed in spec is because of the mass amounts of programs in path that have a version of those dll's. so we can leave it as is, or i can reduce the path env in script to only include dirs we need. either way i think a change is needed and the one we have isn't that bad. not my call though i'll do what ever. edit: imo trying to edit the path env could be more trouble then its worth.",0,0,0,0.8761777281761169,0.6586414575576782,0.8817265629768372,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008517170,331,-- something i have found out. which i updated the tasks. 3.9(maybe 3.8 as well?) delete deluge\deluge-2.1.0.dev15.dist-info\metadata: requires-dist lines to work 3.7 delete deluge\deluge-2.1.0.dev15.egg\requires.txt to work.,0,0,0,0.9841071367263794,0.9828662276268004,0.9852493405342102,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008526430,331,"good job finding what works for you :) the errors i posted in unfreezed was fixed in freezed because intl.dll was in the gtk-dir added through os.add_dll_directory() and gets included in freezed main-dir. btw, in your gvsbuild-scripts, could use something like: [code block]` untill added in gvsbuild or upstream. powershell translated. thanks.",1,1,1,0.99291729927063,0.9957802295684814,0.9966340661048888,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008531262,331,"i havn't had any issues with the build scripts, however if we wanted we could use that first patch idea applied to the .spec file to add the openssl-x64 dll's to build and remove the 32-bit ones maybe. and that could maybe be a less peticular system dependent change unlike my check for if running on github actions.",0,0,0,0.9619614481925964,0.9866096377372742,0.9888631105422974,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008534575,331,"yes, try that - i thought i would need an os.add_dll_directory addition in spec for including openssl, but didn't need it for some reason. i don't understand why you don't need patch the pycairo/pygobject, as is the thing that breaks deluge on py3.8+, unless you have no semicolon in path ending(echo %path%) - and from the error you posted yesterday, i believe you have. regardless whatever you can make it work with :)",1,1,1,0.7832481265068054,0.9896444082260132,0.9812538623809814,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008535804,331,i think you hit the nail on the head there i think its a os path setup issue not a gtk issue.,0,0,0,0.9793297052383424,0.9640711545944214,0.5986679196357727,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008539434,331,"i have also openssl dlls without 64 in name in my freezed dir, didn't think you where talking about that. this means that pyopenssl from python got seen and imported with deps, and not the x64 we build ourself only for libtorrent's usage - we need both, or else e.g. yarss will break. edits: good idea about that trick could be used, sorry for being dense. * bundles the extra missing vcredist file during freezing i.e. msvcp140.dll, so runtimes should be okay/ticked-off. * for me, the specifically thing solelly that controls if x64 dll's pulled in, is: [code block]` short spec example, just to see dll's(for me): [a link] (deleted too much talking before...) * i think you use that already above, but also i use homemade openssl x64, but if you use premades, then maybe those you use are not linked to/importable - e.g. built different like with/without asm or something? dunno... can check with premades later when time e.g. shinning. * yes, i can reproduce your issue, from installing openssl-x64 from shinning, and selecting yes to the default install prompt of copying the x64 dlls to system32. then fails pull in x64 dlls from spec. when manually deleting the two x64 dll's from system32, then works again, despite there also being x32 versions there still, which i didn't delete. if not deleting them(x64), then even breaks my own home-built openssl from pulling in. light shinning package(as used in github-actions vm's) or full, doesn't make a difference. as is temporary vm(github actions), then just delete the system32 x64 files before firering up pyinstaller in your setup, i'm thinking.",-1,-1,-1,0.8836609721183777,0.4832641184329986,0.973962128162384,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009597871,331,-- the opensll dll's it is picking up is in fact a x64 bin it is just not named as such. how we want to deal with this im not sure. however if we just name them as libtorrent expects we don't need that line in spec file.,0,0,0,0.9615873098373412,0.770339846611023,0.9725855588912964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009611929,331,from my testing i believe pyinstaller is picking up the dll from c:\hostedtoolcache\windows\python\3.7.9\x64\dlls which despite being x64 does not include that in the name. from testing i see that in that folder for x86 and x64 the name remains the same simply libssl-1_1.dll. it also appears openssl 1.1 is used from python 2.7-3.9 newer versions may use a different openssl version i'm not sure.,0,0,0,0.964767575263977,0.9783080220222472,0.981082320213318,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009655516,331,using a dependency walker it shows only x64 dll needed yet if lib(ssl/crypto)-1_1.dll is removed it fails to import libtorrent. this must be a pyinstaller issue i guess?,0,0,0,0.9869120121002196,0.9804691672325134,0.9905988574028016,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009782011,331,"thanks for looking into this, i like that fix. we should let libtorrent know about this too but might be tricky to resolve without breaking it for someone... as long as we document it, we can revisit the issue",1,1,1,0.9853602051734924,0.9839896559715272,0.9908857345581056,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009785135,331,-- yea a dependency walker shows the libtorrent.pyd as only needing the x64 so it might actually be a pyinstaller hook maybe? i'm not sure. edit: what i think is the build process is picking up a 64bit dll on its own. and i'm guessing whatever process makes the libtorrent wheel links against an x64 named one and if it didn't we would likely be fine.,0,0,0,0.9250420928001404,0.8614199161529541,0.979742467403412,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009917154,331,"if we change: cd.yml: - under install deluge: change the two lines to: pip install . python setup.py install_scripts - under freeze deluge: remove get-childitem $env:github_workspace\packaging\win\freeze\* -include requires.txt -recurse | remove-item delugewin.spec: change lines 20 to: datas += [ ('../../deluge/ui', 'deluge/ui'), ('../../deluge/plugins', 'deluge/plugins') ] edit: long story short python 3.7 and 3.9 both need metadata file edited and both have issue running deluge-console. removing metadata will not work it needs to be edited, this makes the process a little more complicated but 100% doable if we want. also just figuring out why this is would obviously be very helpful. this is what we get: python 3.9: deluge.exe & deluge-debug.exe: [code block] unless you remove dist lines from deluge-(build version number).dist-info metadata if you remove just pyopenssl it will just fail stating another was not found all other exe's are fine as far as starting. deluge-console: starts but seems to freeze with this error seen: [code block] python 3.7: all exe's fail with: [code block] unless you remove dist lines from deluge-(build version number).dist-info metadata if you remove just pyopenssl it will just fail stating another was not found deluge-console: starts but seems to freeze with this error seen: [code block]",0,0,0,0.9837090969085692,0.9682227969169616,0.9928901195526124,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1009920801,331,i know that was really long but we can get a wider compatibility with those changes + what we have now. i think some of the other issues where due to going back and forth with pyinstaller changes. i really should keep the changes simpler and test more. i should not have rushed this. sorry. if the above is hard to follow the changes can be seen here: 7603605c5b0ed3d87381e668df3b782598477bed,-1,-1,-1,0.9901683330535888,0.9910148978233336,0.993548572063446,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1010123805,331,"still running tests to double check my work but i think 1066eb69340bc386a57950a502585245d2267ac2 is a solution to getting 3.8 and 3.9 builds. i don't have gtk 3.8 builds to test but i've been testing with 3.7 and 3.9. edit: ok i am confiming i have tested a few times 1066eb69340bc386a57950a502585245d2267ac2 combined with what we have makes working builds, with just that deluge-console bug remaining.",0,0,0,0.7348647713661194,0.7263894081115723,0.9076871871948242,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1010176805,331,updated first post/task list with more info.,0,0,0,0.980255126953125,0.9903529286384584,0.990139365196228,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1010958373,331,"forgive me for speaking uninvited, but really hard continuing holding in helpful info honestly. i'll be short/consize from now on(if invited), promize. * metadata needs patched only because missing metadata, both in ""requires.txt"" issue of py3.7, and ""metadata"" of py3.8+, and avoided entirely by in spec adding said metadata back through: [code block]` * i made prs at gvsbuild + upstream, but untill merged, then can add yourself, if deemed neccesary. it breaks deluge starting if in same dir as deluge and having trailing semicolon in path(only seen from 'echo %path%'), as some installers add - test e.g. from freezed dir: [code block]` [a link] * deluge-console works only non-interactive on windows, just like deluge 1.3.x, sorry if thinking i ment all worked(though cas says it should now though). * unimportant, but the openssl without x64 comes from python itself/pyopenssl(and needed for yarss2 etc to resolve https), and the x64 named is for libtorrent, so no pyinstaller/libtorrent issue(should report to python to fix there unusual naming). good job fixing by copying over! as said, deleting the x64 from system32(or whereever interferring at your end), plus full collect_all line in spec, also fixing this, but better way from doadin imho. * if ever finding more files missing/issues, then use the collect_all for deluge line from docs i always did, though currently doadin's way is better, as saves 1mb install size. hope ok, but will stop post uninvited again now. thanks doadin, awesome job as usual! :)",-1,-1,-1,0.9376530647277832,0.6038450002670288,0.9901986122131348,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1010973810,331,"thanks, i will test this. i have been trying to get on irc more, if you would like we could work on this more there. though honestly seems pretty close to a good change imo.",1,1,1,0.9491018056869508,0.9697362184524536,0.9920124411582948,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1010977740,331,"thanks alot doadin, appreciate your post alot! i don't really have more to add honestly, never used irc honeslty neither, so please just ping me if you think i might now/test something, or feel free to always email me, or deluge-forum pm. i'll let you finish your awesome job in peace. take care :)",1,1,1,0.994458556175232,0.9958106279373168,0.9971332550048828,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011178729,331,"i tested 8 builds python 3.7-3.10 both x86 and x64 and found only the same issue which exists with old and new method. plugins execute & extractor: [code block] all other plugins start fine.(including one external, didn't not test more than that) stats plugin causes: ` (deluge:18800): glib-gio-warning **: 10:51:08.582: win32 session dbus binary not found: e:\program files\deluge\\gdbus.exe ` to print in console but seems to work. enableing or disabling plugins cause: ` traceback (most recent call last): file ""deluge\ui\gtk3\preferences.py"", line 1140, in on_plugin_selection_changed self.builder.get_object('label_plugin_details').set_text( typeerror: argument 1 does not allow none as a value unhandled error in deferred: `",0,0,0,0.8576012849807739,0.9827178120613098,0.9831730127334596,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011260064,331,"i apologize doadin, i tested many of the plugins finally worked, including some 3'rd party ones, and was so happy that forgot test each and every one doh! the last error is not important and also unfreezed, i reported some time ago here with own fix: [a link]",-1,1,-1,0.9786726236343384,0.9771119952201844,0.8571040630340576,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1011271338,331,"all good, i did the same thing :) . in changing so many things i saw the plugins i use enabled and didn't test though enough. thats why i went ahead and made builds and tested python 3.7-3.10 x86 and 64, i don't want leave anything untested. appreciate the link to the ticket.",1,1,1,0.9885835647583008,0.9959891438484192,0.9971420168876648,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011278815,331,[a link] look like a good change to address this?,0,0,0,0.9613916277885436,0.9878546595573424,0.892771303653717,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011301134,331,"i'll narrow it down and make short edit, but just posting quick to not waste your time if you're also running testings. all plugins work with these added, and as said some is redundant obviously: [code block]` about your fix, thanks mate, and for asking me, and check it out in a bit, though i'm not the one to ask as not ""good"" like you guys, but much appreciate you asked me :) edit(s): quick testing shows your python-setuptools fix working great, thanks mate!. * you can narrow further down if wanted, but i just use same for deluge('collect_all' from docs), and same here for twisted fixing the two failing plugins: [code block]` * just in case, don't begin using my icon-cleaning code unmodded/without-addition(s), as noticed one ""media-playback-pause"" adwaita-icon reported missing when enabling ""toggle"" plugin.",1,1,1,0.9921557903289796,0.9959290623664856,0.996713638305664,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011311953,331,i'll test in a bit if that works the task list is getting pretty small :grinning_face:,1,0,1,0.6076970100402832,0.9449999928474426,0.9763081073760986,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1011373888,331,"i think as far as icons goes the biggest, safest one to remove i think is cursors. we will have to look into or just leave em. its part of the theme and who knows what random plugin or something might use an icon from the theme so idk.",0,0,0,0.9794667959213256,0.9486850500106812,0.944471001625061,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011403842,331,really just down to one more item needing fixed. thanks so much for your help!,1,1,1,0.991442859172821,0.9910003542900084,0.9935867190361024,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011424939,331,i have just fixed the plugin description issue [a link] so no longer need bd3502bb447 i have also fixed the `libintl` error that was reported by d2390cd24729 however that would only occur if dll was missing... :slightly_smiling_face:,-1,0,1,0.5711049437522888,0.8741294145584106,0.9865084886550904,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,1011428856,331,"-- i just noticed, ill update this. things are looking pretty complete still need to do some cleanup. mostly being the plugin fix adding data hopefully can at least slim it down. and still waiting for that twisted issue to get fixed i really droped the ball there, but we can just use a fixed build of our own for now not a huge deal.",-1,0,1,0.8622663021087646,0.5267966985702515,0.7446220517158508,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,1011481266,331,"-- as long as everything is fine your ok with how its all done, other than cleaning the commits up i think this is ready.",0,1,1,0.7453729510307312,0.7234190702438354,0.5746871829032898,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1011489879,331,i'll review it tomorrow but a quick skim seems good to merge! i've setup my windows vm again to check how it looks thanks for all the effort in resolving this and the details provided for each problem has been really useful :thumbs_up:,1,1,1,0.9853407740592957,0.9942501783370972,0.9965798258781432,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011491387,331,", thanks! :) i'm running vanilla here, no mods, and since py3.8+ then without me adding os.add_dll_directory() then not finding the dll from gtk, same with openssl for libtorrent(i.e path irrelevant) - the gtk py-bindings runs that call(as patched in by gvsbuild as workaround) , but libintl requested in deluge before that, or so i'm theorizing atleast, as sure have dll. thanks again. edit: above is unfreezed, like initially reported.",1,1,1,0.9929187893867492,0.9953078627586364,0.9970036149024964,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011497786,331,cool. i'm not gonna make any more changes other than cleaning up the number of commits.,1,1,1,0.9250640273094176,0.9554880261421204,0.9533178806304932,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011790062,331,"-- i combined some of the commits that aimed to do the same thing so its done in 5 commits now vs 12 so its still seperate to see the process that happened to implement fixes, idk if you like this better or not or want it reduced even more? or maybe this is worse? i saved a copy of how it was in a branch on my fork if you don't like it like this.",0,0,0,0.8465571999549866,0.5726467370986938,0.9519081711769104,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1011795238,331,"the only thing not separate is the process we went through to be able to go from py3.7 to newer other than that its still all separate so the process can be seen, just in fewer steps instead of going back and forth and having commits just changing libtorrent versions.(things i think didn't need to be separate got squished) again i have a copy of how it was before though if this is not better.",0,0,0,0.8486388921737671,0.9245436191558838,0.9821098446846008,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012199005,331,"first of all, great work guys. the long waited installer is an important milestone for deluge 2.0 :1st_place_medal: :hundred_points: regarding only the commits, i would suggest to add to the reason for the patched `twisted` to the commit message because without it, one would never know why it was needed. and again, thanks for this (>130 comments :rolling_on_the_floor_laughing:) mr!",1,1,1,0.993141233921051,0.993633508682251,0.996647298336029,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012311605,331,"i have not checked the version that adds `hiddenimports` from `twisted`, however can we be reasonable sure that plugins such as yarss2 will work? for example, yarss2 for v2 depends on `http.cookies` via `requests` and `email.mime.*`. both of these are part of stdlib for python and are presumed to be always available, however pyinstaller does not treat them as such and produced binaries might not have necessary modules available. this was an issue with v1 too, back then yarss2 had its own custom code for `email.mime.*` part for windows users, however since release of v2 it started to depend on various 3rd-party modules such as `requests`, which bring their own dependencies that plugin does not necessarily control. to my knowledge they've done best job they could trying to package these external dependencies into egg they provide, however of course python's stdlib is out of their control. --- the other issue that remains is how broken gtk3 is on windows. seeing some weird issues where clicking deluge icon on taskbar does bring window to front but doing so again does not minimize it as one would expect. using `gtk_csd=0` is a solution to this (and many more). we should of course never modify user's environment globally when installing deluge, so the question remains whether there is some way we can have deluge disable decorations when running on windows without relying on environment variables. --- in addition, do we want to also rebase this pr for 2.0.5 so that windows users can have a stable release? 2.1 introduces some breaking python2 related changes that will again require attention from some plugin developers so we might want to port back some of the fixes that -- pushed to 2.0.5, make it a 2.0.6 release and push a windows installer with it, while work on 2.1 continues. for reference, even without these fixes 2.0.5 is very much usable using this pr, however i only tested it as thin-client so ymmv.",0,0,0,0.9739276170730592,0.9945347309112548,0.990346133708954,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012331086,331,", i specified e.g gtk_csd=0 other place before, but my understanding was that it wasent global and only enherented for running proces, and not transferred. wrong? edit: always been somewhat leery though, as stated to possibly have a performance penalty, didnt notice any though, but hard to judge, when only quick testing.",-1,0,0,0.6616385579109192,0.6784461736679077,0.8076258897781372,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1012373567,331,thanks for suggestions :+1: i know that for the dependency issues (e.g. email.mime) were manual fixed in bbfreeze and py2app: [a link] [a link] --- can you more specific about python2 breaking changes? i probably will have to create a 2.0.x release branch anyway so certainly possible to release 2.0.5/6 for windows. --- did you mean `gtk_csd=0`? this is only a env var. perhaps could be done in [a link]?,1,1,1,0.9768514037132264,0.9394877552986144,0.99394953250885,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012392680,331,"yes. if its possible to set environment variable for executable via `runtime-hook` in pyinstaller than that would be solution. less performance on drawing items is in my opinion preferable to broken interaction with windows dwm. i am not sure where you set it. environment variables are usually either set when running process or globally for user/computer (in which case it would apply to everything). if as mentioned above `runtime-hook` can do it for pyinstaller then it would indeed be isolated. some plugins (in this example yarss2) still retain some level of compatibility for python 2, even on releases that are meant for deluge 2. see [a link] for details. the common offenders will most likely be `py2` (from `deluge.common`) and `six` (if plugin decided to use it, but unlikely). perhaps we could keep py2 as a dumb stub (`py2 = false`) to make plugins happy?",0,0,0,0.9486205577850342,0.9806692004203796,0.971071183681488,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012410500,331,"ideally we would package all standard modules, so that there is no difference between available environment for windows and linux. python 3.10 would make it easy with `sys.stdlib_module_names`, however as we need to target lower versions, we'd need to come up with some small hook for pyinstaller that enumerates available modules (some options are on [a link] we could also produce a static list for versions below 3.10 (and use `sys.stdlib_module_names` from 3.10 onwards) and provide that as hidden imports directly. for reference, here is full list of available modules for python versions between 3.7 and 3.9 (note that some of them will not exist depending on version used, for example `'graphlib', 'zoneinfo'` were introduced in 3.9 while `'macpath'` was removed in 3.8): [code block] providing it as-is to hidden imports in pyinstaller should be fine, it silently skips over imports it can't enumerate.",0,0,0,0.9834344983100892,0.9901264905929564,0.9915598034858704,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012442615,331,"very quick, as not liking intrude on your important things, but just remembered that i otherplace added requests(not stdlib) and pygame, from pip, when installing deluge from pip, so springjools's autoremoveplus fork can even be enabled/used(don't know if relevant to you), and notifications default plugin works for playing sound. don't need to respond. thanks for everything you good people do :)",1,1,1,0.992125689983368,0.995528280735016,0.9963332414627076,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012446233,331,"appreciated to know, however non-stdlib requirements are something plugin developers must solve themselves, otherwise users are forced to take manual steps (like you did), so this is not something we can accommodate when packaging windows version. for example, yarss2 depends on `requests` too but they do vendor it themselves.",0,0,1,0.9289519786834716,0.9798303842544556,0.822154700756073,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1012542264,331,"wanted to let doadin answer, but as i had tested it anyways, then maybe save him some time... with cirnot hiddenimports list added to spec, and [code block]` then yarss2 still fails because of that python2 support removed, so as not sure how add py2 dumb stub as suggested, then just tested deluge master branch, and worked with above, sorry for not cutting down propperly the collect_all. edit: sorry, don't use yarss2, and just saw it was possible to enable yarss2 now and the plugin sub-menu came through in gtkui propperly.",-1,-1,-1,0.9856157302856444,0.9889097809791564,0.993251383304596,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012546353,331,done via [a link],0,0,0,0.9887127876281738,0.9879003763198853,0.9956108927726746,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012571241,331,so i am happy to merge this just now and we can work on cleaning it up further in new prs thank you again for all the work in getting to this stage! these are some the issues that have come up in and still need addressed: - [ ] cleanup comments by - [ ] `email.mime` deps - [ ] include all stdlib - [ ] include pygame for notification plugin - [ ] set gtk_csd=0 in runtime hook - [ ] host patched twisted binary under deluge,1,1,1,0.9876515865325928,0.9932646751403807,0.995280146598816,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012578648,331,btw the job will not run by default on prs but i added a condition if labelled with 'windows' so can try that out to see if it works...,0,0,0,0.98455011844635,0.988722801208496,0.9812297821044922,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012578952,331,"about the stdlib, why not use the `windows embeddable package` available from python? it exists exactly for this purpose.",0,0,0,0.9880269765853882,0.994404435157776,0.9927663803100586,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012579519,331,"-- sorry, i just woke up was going to make a commit with some of the requested changes, was just commenting and saw you merged.",-1,-1,-1,0.9875611662864684,0.9894919395446776,0.9860433340072632,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012596882,331,"that is not compatible with pyinstaller, or are you suggesting that we should abandon pyinstaller and create our own stub executables using embeddable package?",0,0,0,0.9509189128875732,0.989250898361206,0.992492377758026,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1018515190,338,-- i think it would be nice to get this & f89f28f81624c8eabcc612a3acff4a7606bd2235 merged if possible for the windows release.,0,0,0,0.7208251357078552,0.9737437963485718,0.9216825366020204,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019504962,338,"-- i think this is ready except this would bring the min python version to 3.4. idk if we want to continue to work with older versions, 3.4 went eol march 18, 2019.",0,0,0,0.9254907965660096,0.594307541847229,0.9342809915542604,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020502540,338,"-- i expanded the interface check to use regex to match in case ifaddr is not available but regex only works on windows so, im not sure about a failback for linux/mac.",0,0,0,0.7954447269439697,0.7264237403869629,0.9876768589019777,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020619738,338,"btw, i think it will be best to also add tests for the changes.",0,0,0,0.9735783338546752,0.973074436187744,0.9902048110961914,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020654057,338,maybe for now i will leave out multi-homing support just add support for interfaces. i wanted to do both so we don't have to edit the ip checks multiple times but at least at the moment i can't see how to get it done.,0,0,0,0.9479293823242188,0.9767956733703612,0.902523159980774,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020663677,338,the interface check using ifaddr works cross-platform however i don't have nor do i know a way to do a failback for linux/mac.,0,0,0,0.9812326431274414,0.944152057170868,0.9857274889945984,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020664253,338,"no problem. let's focus on verifying the linux interfaces w/o `ifaddr`. one way i found is getting a list of [a link] like so `os.listdir('/sys/class/net/')`. need to check if available on other systems as well. or maybe, relay on `ifaddr` being always available as it is a dependency.",0,0,0,0.9559050798416138,0.9875596165657043,0.9583246111869812,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020691181,338,turns out with python >=3.3 we can use socket.if_nameindex() this is not available till 3.8 for windows. and apparently the min version for deluge is 3.6 edit: i guess not for windows because it doesn't return a guid.,0,0,0,0.981777548789978,0.9883074164390564,0.991862654685974,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021518666,338,"i agree let's do just one thing at a time in the pr (just the interface/adapter checks). i would also suggest that we optionally include `ifaddr` instead of trying to hack the problem ourselves, fallback to `true` and assume user is correct. remember that libtorrent will fail if the interface doesn't exist",0,0,0,0.9780380725860596,0.9837021827697754,0.9762962460517884,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021546976,338,-- by hack do you mean the regex? would you like me to remove that and just return true if importing ifaddr fails?,0,0,0,0.982835054397583,0.9710129499435424,0.9903010129928588,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1022559468,338,-- i think i have merged all the requested changes.,0,0,0,0.9807909727096558,0.9273962378501892,0.9763819575309752,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1022590618,338,-- not sure about wording for [a link],-1,0,0,0.5915576219558716,0.7058117389678955,0.9033394455909728,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1023643902,338,-- i think i have addressed all the changes you have requested.,0,0,0,0.9609928131103516,0.907652735710144,0.9769623279571532,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024977876,338,"-- i'm not sure how to improve the tests since windows is currently the only one that will return false, also we can't really test for true on wndows since we don't know what the guid will be on the vm its run on. do we want ifaddr for other platforms too in requirements?",0,-1,0,0.678697407245636,0.5692840218544006,0.7192434668540955,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1025000466,338,"about the tests, you can have something like this: [code block]",0,0,0,0.9845219254493712,0.9894389510154724,0.9926217794418336,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025009118,338,that would only work if we use ifaddr on linux as well for tests.,0,0,0,0.9875091910362244,0.9939572811126708,0.9924944639205932,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025181076,338,thanks for your work on this,1,0,1,0.8064456582069397,0.5516282916069031,0.9158205986022948,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1025327952,338,"hmm, so a couple tests added to the suite are failing for me (on windows 10.) when ifaddr is installed, these two tests fail: [code block] when ifaddr is not installed, these two fail: [code block]",0,0,0,0.9427273869514464,0.8059489727020264,0.941467821598053,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025330531,338,for that first one i wonder what the output of [a link] is. maybe [a link] is a problem with using the first adpater maybe its a loopback or something that ifaddr does not consider. when ifaddr is not installed it should fail to regex which those are formated correctly. so actually they should be true.,0,0,0,0.9539977312088012,0.9641491770744324,0.977115035057068,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025332108,338,did you test with ifaddr from requirments.txt?,0,0,0,0.9883235692977904,0.9950469732284546,0.9951300621032716,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025332781,338,i actually just saw that and reinstalled with the same issue.,0,0,0,0.9855096936225892,0.9667746424674988,0.9832385778427124,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025333967,338,"ifaddr is giving a list of 5 adapter strings, but the one retrieved from the registry via test isn't in it",0,0,0,0.9894557595252992,0.9898287653923036,0.9877247214317322,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025335688,338,"here's what interface_name is successfully reading as ![a link] and here's the list of adapters returned by ifaddr ![a link] intel(r) ethernet controller (2) i225-v is my actual addapter, and shows up in both, just different ids.",0,0,0,0.9577239155769348,0.9888962507247924,0.9900964498519896,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025336187,338,"the function at [a link] on my windows 11 machine returns a valid interface for me, that if addr lists.",0,0,0,0.9892632365226746,0.9845893979072572,0.994834303855896,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025336550,338,"oh wait, the `(2)` is pertinent in that name. my real adapter is `intel(r) ethernet controller (2) i225-v`, the one read from the registry doesn't have that `(2)`, but the second item in my registry is the real one without the 2, and has the matching address.",0,0,0,0.947080671787262,0.9780296087265016,0.987447202205658,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025337255,338,"so, i think the actual code is working properly, but the tests are just fragile. i guess maybe the one read from the registry is an interface that was deleted or something.",0,0,0,0.8605725169181824,0.5495176315307617,0.9543331861495972,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025338303,338,"speaking of that line you linked, `for i in range(1):` is just the same as `for i in [0]:`, and isn't much of a loop at all.",0,0,0,0.9721254706382751,0.9847033619880676,0.961200475692749,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025338946,338,yea it was originally as had for i in range(5) but would error if there where less then 5.,0,0,0,0.9800946712493896,0.976976990699768,0.990616500377655,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025340220,338,"yea, maybe one of the adapaters didn't clean uninstall after a driver update or something so a registry entry is still lingering.",0,0,0,0.9743208289146424,0.9184523224830629,0.9537551999092102,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025345842,338,"it'd be nice to have the tests be more stable, but i'm just going to delete that key from my registry for now.",0,0,0,0.9513599872589112,0.9708495140075684,0.9396551847457886,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025613276,338,"i agree, i only quickly checked the tests before merging. i am not sure how much we need to test here tbh as it's somewhat outside deluge domain to verify adapter lookup and perhaps ifaddr should be mocked out.",0,0,0,0.955657958984375,0.9525009393692015,0.9456127285957336,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1026022290,338,"that code was only a poc, and needs improvement... :grinning_face_with_sweat:",-1,0,1,0.7529805898666382,0.9822400212287904,0.9660932421684264,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,433116013,221,i think everything is fixed.,0,0,1,0.9592477083206176,0.8297759294509888,0.606236457824707,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,434543958,221,"this pull request looks good to me. it would be nice to have some better tests for alert manager, as we don't cover much of what has changed. feel free to follow-up with some expanded tests if you're interested :)",1,1,1,0.9872992634773254,0.99241840839386,0.9962342381477356,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,434787507,221,"hmm, ok, i'll give it a try. correct me if i'm wrong, but to fully test `alertmanager`, i'll need to make `libtorrent` post some alerts and to handle them correctly. one way is to mock it, and the other is to somehow force is to set an alert. which is the better way?",0,0,0,0.9293597936630248,0.7587584853172302,0.8643627762794495,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,434797426,221,"considering the time it takes alerts to be posted, sometimes ~0.5s, mocking libtorrent is a better route. although a lot of tests rely on libtorrent, it's not the best way of unit testing... :)",1,1,1,0.5148481726646423,0.9553207159042358,0.9811875224113464,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,434810202,221,"yea, you'll want to mock out session.pop_alerts() and session.wait_for_alerts(). you can check out how we did it in spritzle for an idea: [a link]",0,0,0,0.9580243825912476,0.9790279269218444,0.9892009496688844,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,435696624,221,so i wrote some test units... what do you guys think --?,0,0,0,0.9455029368400574,0.9240916967391968,0.7697205543518066,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,436007336,221,"any thoughts why this change cases `tox -e py3` to fail? i tested it with python 3.5, 3.6, 3.7 and only with 3.7 all tests pass.",0,0,0,0.9776689410209656,0.9928649663925172,0.9851478934288024,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1022754772,221,rebased and fixed last 2 changes requested by,0,0,0,0.9876950979232788,0.9886758327484132,0.9903854131698608,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1022982853,221,i imagine that the segfault in tests is due to [a link],0,0,0,0.986229658126831,0.986000955104828,0.983937680721283,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1023582901,221,saving the segfault [a link] for later use. -- how do you want to handle this? we could try to perform a deep-copy of the alerts,0,0,0,0.9807537198066713,0.9881591796875,0.992548406124115,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1040568615,221,"i am not sure this is stable, i just had it crash on me as soon as i tested the branch out i am not willing to merge this while there is the potential for segfaults in alert handling.",-1,-1,-1,0.8880797624588013,0.8401319980621338,0.8033691048622131,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1457123320,221,i have merged the changes for component 0745c0eff85ea4e4a3646c454098503ed08c56ff and 25a2b113e290600043338e22b4f116cd2dbf2886 but i am finding that the alertmanager thread changes is increasing the propagation of segfaults due to the alert pointer going out of scope... i will investigate further on how we can workaround the issue.,0,0,0,0.9481267929077148,0.96875,0.9840515851974488,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1828111011,221,thanks i applied a refactor to remove the alert copy and avoid segfaults: [a link] i'm not sure what effect this will have for alert handling so might need to keep an eye on it and revisit if needed.,1,0,1,0.9098768830299376,0.5107311010360718,0.902315616607666,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,192954651,57,"there are a lot of console commits, seems to have strayed a bit from ui options...",0,0,0,0.5518907904624939,0.8791525363922119,0.9844441413879396,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,193005104,57,"yes, i will remove those and merge with the other console changes for a separate pr",0,0,0,0.9850871562957764,0.9913586378097534,0.9946876764297484,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,193435997,57,all the console specific commits have now been removed.,0,0,0,0.9871922731399536,0.9922356009483336,0.9945038557052612,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211017092,57,"with reference to the new `ui/entry.py`, perhaps create a `core/entry.py` for the daemon start code?",0,0,0,0.9899800419807434,0.9953418970108032,0.9938651919364928,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211098805,57,"doesn't the daemon actually fit in the ui category? while it's not a deluge client, it's still an interface to controlling deluge?",0,0,0,0.9813550114631652,0.9897565245628356,0.9884058237075806,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,390387958,181,the existing environments don't work as is in windows. this is a large part due to the toxenv not being set which i was having some issue with appveyor and i didn't try adding it to the existing environments because i have been busy trying to get the tests running and so forth and didnt want to break them for travis.ci as im using both to compare to see proper output. now that its working i can clean it up a bit more and make some adjustments. however in at least the one case if you look you have a instance of the environment variable pwd this variable is not available in windows so that one is not going to work even with a appveyor setup adjustment.,0,0,0,0.6468382477760315,0.7408672571182251,0.9131245613098145,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,390521801,181,i think we still need a few different environments for windows because windows has a few extra deps then linux does. edit: so we can get away with just mocking curses and win32api to get docs to pass. so now flake8 and docs pass.,0,0,0,0.9402438998222352,0.978158175945282,0.979140281677246,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,390583866,181,for different env platforms see: [a link] remember to raise minimum tox version in tox.ini,0,0,0,0.9878553748130798,0.9940245747566224,0.9945099353790284,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,392451303,181,reason for closing?,0,0,0,0.929996371269226,0.9593650102615356,0.9899154901504515,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,392596121,181,"its a ways away from being ready, unless you want to take just the appveyor config or take it + skipping ~40 tests. i think about half those 40 are the console tests which will never run so its not too bad. other than that the 2 plugin tests still don't run.(toxenv: plugins)",0,0,0,0.9133260846138,0.5085800886154175,0.5718991160392761,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,392603306,181,"i am happy with skipping the tests is fine for now, config needs a bit of a polish but it seems to be working and getting windows tests and builds from appveyor would be great.",1,1,1,0.9789770841598512,0.9829067587852478,0.990450084209442,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,392603468,181,well it also needs some tox changes for multi os like we talked about before which for some reason i cant figure out i had it run on my computer pushed the change to github and it failed..not sure how to address that.,-1,-1,0,0.9449706077575684,0.8330908417701721,0.8275969624519348,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,392605854,181,"as you may have noticed to i was using a libtorrent build from my own we need to find a good reliable source to install that from as the last python build from the libtorrent repo is not good. i was gonna try and make a appveyor build and just have it set to build on tags only(low resource use, and only happenes on releases) but i didnt get that setup either but that would be a good reliable trusted source.",0,0,0,0.6299986839294434,0.9236426949501038,0.8300623297691345,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,392612747,181,ok i tried to clean it up a bit more i will leave it be for now let me know any adjustments or w.e. you would like to make.,0,0,0,0.9607458114624025,0.971832811832428,0.9579595923423768,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,393022202,181,"ok so after that gotta clean up the commits and stuff but all the tests run and pass we get passed (skips=69, successes=116) which is alot of skips of which about 40 actually need addressing at a later point the others are never gonna pass because of the console ui dependent on python curses. other than cleaning the commits and stuff make the tox multi os compatible i think i pretty well cleaned the appveyor config but let me know.",0,0,1,0.9643215537071228,0.7670584321022034,0.533489465713501,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,393284827,181,i guess maybe we should use appveyor-retry? to try and download the deps in case for whatever reason it fails to download. they should be cached so it should be rare to even need to download but if it does.,0,0,0,0.9855103492736816,0.9885011911392212,0.975078582763672,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,393720130,181,yea..i definitely messed up there hopefully i got it right this time? edit: apparently not.,-1,0,-1,0.9400280117988586,0.6011248230934143,0.5142576098442078,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,393997848,181,im not sure where ive gone wrong with this @ unittest change.,-1,-1,-1,0.792748749256134,0.8282695412635803,0.9017402529716492,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394015684,181,"apologies that is my bad, i forgot that twisted has it's own `unittest` so just revert to your original code. it's much nicer using the python unitest decorator but sometimes you can't have nice things ;)",-1,-1,1,0.962780773639679,0.717614471912384,0.9550874829292296,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,394080499,181,ok so i finally worked out that the platform support for tox relies on running `tox` without any env vars or using `tox -e` so adding `pywin32` to tox is not possible currently. i have created another pr #185 with the fixes and changes i wished to make.,0,0,0,0.9708135724067688,0.9833736419677734,0.984283685684204,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,271547455,138,can this handle pasting an ipv6 address?,0,0,0,0.9877480268478394,0.9909213185310364,0.995187520980835,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,272212023,138,"not really, the last part of the address (after the right-most "":"") would get interpreted as a port number.",0,0,0,0.983723521232605,0.9883408546447754,0.9662480354309082,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,272228747,138,so it is an issue if you paste an ipv6 address without a port...,0,0,0,0.9333071112632751,0.9622411727905272,0.9915125966072084,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,277687554,138,"ok, it now correctly handles ipv6 addresses, and parses the port from the [2001:0:3238:dfe1:63::fefb]:3188 style.",0,0,0,0.9892648458480836,0.9881475567817688,0.9834563136100768,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,278101535,138,ok can you fix the errors and rebase into a single commit,0,0,0,0.9889785647392272,0.989153265953064,0.9933484196662904,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,278440230,138,"done. just so you know, the pydef check of travis-ci failed twice with different results, after i had fixed my errors, which is why i needed to re-open this pull request. so, i think there's something wonky with it.",0,0,0,0.9415763020515442,0.5373678803443909,0.94779634475708,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279788432,138,"ok, i've done that now. i noticed that there is also a host, port duo in connection manager > edit. would you like this to be implemented there, as well? if so, should i make a separate commit about it? and where would you like the newly-created parse_host_port utility, in that case?",0,0,0,0.9622300267219543,0.9776903986930848,0.9363468885421752,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279796877,138,have you rebased from latest develop because there is no separate `i2p` anymore,0,0,0,0.986967146396637,0.9889849424362184,0.993938684463501,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280020444,138,"i added the functionality to the connection manager window, as well.",0,0,0,0.988185167312622,0.9886860847473145,0.9909766912460328,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280162412,138,"ok looking better. the `split_host_port` function needs improvement and simplified. - use `host` not `ip` as variable name in the function to keep consistency. - start by setting the two variable to `none` and then the last step of the function is `return host, port` - the tuple is implicit for returning multiple values so can drop the brackets. - if you can't extract a port then at least pass back the `host` value with `port` set `none`. - use int not float for port. - docstring should be google style. - use `str.partition` to get ipv6 host and port. - a better descriptive name than `paste` for the string parameter.",1,0,0,0.6927567720413208,0.989640772342682,0.6125447154045105,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,280167545,138,"maybe using the stdlib would be more clear for that split function? [code block] edit: in fact, that's so easy, you could probably cut out that utility function altogether. you could also fill username and password from the parse_result to support strings like `user:pass:123` if desired.",0,0,0,0.9859461188316344,0.9928411245346068,0.9910330176353456,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280855216,138,"yeah i changed it to use urlparse. thanks for the tip! it now supports pasting username and password, as well. it would also be possible to have `[a link] type scheme identifiers change the proxy type automatically, what do you think? i believe this version should work, but i'm suddenly unable to test the preferences, because the window won't open, and i get now, this seems to be because `hasattr(lt, 'generate_fingerprint')` is false. why? i'm on the latest develop head and libtorrent 1.1.1.0. edit: with regard to travis-ci's flake8 test, where am i supposed to place these imports?",1,1,1,0.9703288078308104,0.9756147861480712,0.9880887866020204,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280860284,138,[code block] run `isort` on the file and it will update the changes required automatically.,0,0,0,0.9889940619468688,0.9922311902046204,0.9955639839172364,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280866792,138,just thought you should strip whitespace from the clipboard text. i also wonder if it should automatically paste those values from the clipboard. a good example is for urls in add_torrent_dialog.,0,0,0,0.9436366558074952,0.9831178188323976,0.987410843372345,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280918680,138,"whitespace is now stripped. do you mean like, if, on inspection, the clipboard is found to contain suitable values, these would be pasted automatically? i think that's a separate feature that we could look into implementing. meanwhile, what should i do to get deluged working again? i got this completely out of the blue.",0,0,0,0.9277967214584352,0.9119146466255188,0.9583858847618104,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280921123,138,that is because the latest develop code requires the latest libtorrent git branch code (what is going to be 1.1.2 release). so you would need to checkout rc_1_1 and build that code or use the ubuntu ppa if you can.,0,0,0,0.989694118499756,0.9935091137886048,0.994664430618286,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280922411,138,"yeah, i have the libtorrent code from github. i've tried with the latest master, as well as the libtorrent-1_1_1 release tag. or do you mean some other version?",0,0,0,0.986841082572937,0.9801011085510254,0.9853515625,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,280922594,138,i have repeated many times: git branch `rc_1_1` not master and not tag 1.1.1. git checkout rc_1_1,0,0,0,0.9863834381103516,0.9790796041488647,0.9934171438217164,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,282083643,138,thanks d75afc007dcc5b,1,1,1,0.5564073920249939,0.6948422193527222,0.9414607286453248,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56566920,12,tested and works,0,0,0,0.9790158271789552,0.969186782836914,0.8159229159355164,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56570700,12,corrections made based on your notes. nothing else.,0,0,0,0.9612550139427184,0.9580403566360474,0.9846962690353394,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56576681,12,does this fail elegantly when these keys don't exist in the registry?,0,0,0,0.918797492980957,0.9536424279212952,0.9854179620742798,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56577149,12,i dont think so. id have to try.,0,-1,0,0.5722585320472717,0.8086379766464233,0.8669053912162781,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,56577314,12,"it doesnt, it says cannot find the file.",0,0,0,0.5784822702407837,0.796210765838623,0.9529938101768494,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56580495,12,now it will try the registry and if there is no key will go back to using static values.,0,0,0,0.9886179566383362,0.9895747303962708,0.9925986528396606,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56580607,12,i might have messed up on the formating though.,-1,0,0,0.8290603756904602,0.670769989490509,0.5502310395240784,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,56581623,12,"i dont think it should keep the hardcoded 'c:\program files\7-zip\7z.exe', options though because if its in the program files then mostlikely the user used the installer and therefore the registry should pick it up.",0,0,0,0.9573481678962708,0.9903615713119508,0.982754409313202,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56583115,12,other than that though i think im about done. unless theres more issues with it not being up to codeing standards. it works exactly like it was but improved to work in more cases. let me know.,0,0,0,0.93755441904068,0.866315484046936,0.6582881212234497,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56716332,12,i thought the like 5 line commit was pretty simple but i suppose its easier. and yea sure there we go we can keep them doesnt hurt.,0,1,0,0.6686494946479797,0.8091302514076233,0.5713950395584106,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,56721831,12,"almost there, just need to remove the code in lines 67-71 and replace with `pass`",0,0,0,0.9882121682167052,0.9917300343513488,0.9932308197021484,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56744674,12,"thanks i have merged this now. it still needed a few minor changes, the exception type was missing, needed a couple of spaces and the branch rebasing into a single commit.",1,1,1,0.885161280632019,0.9337568283081056,0.96362042427063,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,385868002,180,i believe i have fixed it? and thanks for the review.,1,1,1,0.9147859215736388,0.8074714541435242,0.9667051434516908,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,388275311,180,this should be ready for merge now. unless theres something missing im not aware of it runs and sets the proper setting in gtkui and webui.(confirmed in core.conf and ltconf),0,0,0,0.9835235476493835,0.9711177945137024,0.9819617867469788,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,390390713,180,"i think i have addressed all the issues now? i should probably just remove the flake8 commit, it doesn't fully make the test pass anyways. yea?",0,0,0,0.9256032705307008,0.9076145887374878,0.9196444153785706,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,390437714,180,"yeah i am trying to fix those failing tests and you can rebase when it's pushed, see #182",0,0,0,0.7859221696853638,0.9632035493850708,0.9770359396934508,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,390448793,180,"yea, so far i can see the changes so far does affect travis.ci test but should be some kinda of solution to make them more broadly compatible. gl. :)",1,1,1,0.9803348779678344,0.9952515363693236,0.9941211342811584,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,392613008,180,is this ready to go now?,0,0,0,0.9787196516990662,0.97214937210083,0.994528353214264,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394018001,180,was this runtime tested? i don't think so ... [code block] after this got merged deluged won't download or seed.,0,0,0,0.9752801656723022,0.9838311672210692,0.9897084832191468,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394018877,180,it was runtime tested i use this build and it runs just fine. question look at the error...it says invalid interface what did you use for a interface? currently only a ip is supported. as deluge runs the is_ip check on the input.,0,0,0,0.9644224047660828,0.9693918228149414,0.9488290548324584,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394019611,180,"i ve tried no ip at all (blank field). tried local ip of the server. same result. the error itself comes from libtorrent (i'm using 1.1.7). the peer list is empty for all the torrents, reverting this pr makes everything work again. currently i'm trying to figure out what's wrong, will submit a fix if i find one. and i'm not the only one [a link]",-1,0,0,0.5352708697319031,0.8230757117271423,0.8160674571990967,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,394021082,180,"i just tested on windows and it runs just fine with no option selected or with a interface ip selected, maybe this is a linux issue? deluge does have a restore previous setting with this options so i would verify with ltconfig(shows ""actual"" value) what the outgoing_interface setting is. on windows default is 0.0.0.0 which is any and works fine.",0,0,0,0.965103566646576,0.988596737384796,0.937767744064331,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394021597,180,"not sure yet, yes, i'm running on linux (ubuntu 18.04 server), trying to dig through libtorrent api , c++ is not my favorite language ...",-1,-1,-1,0.9519358277320862,0.9578969478607178,0.5789518356323242,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394022249,180,"[a link] name | type | default -- | -- | -- outgoing_interfaces | string | """" sets the network interface this session will use when it opens outgoing connections. by default, it binds outgoing connections to inaddr_any and port 0 (i.e. let the os decide). **ths parameter must be a string containing one or more, comma separated, adapter names. adapter names on unix systems are of the form ""eth0"", ""eth1"", ""tun0"", etc. when specifying multiple interfaces, they will be assigned in round-robin order. this may be useful for clients that are multi-homed**. binding an outgoing connection to a local ip does not necessarily make the connection via the associated nic/adapter. setting this to an empty string will disable binding of outgoing connections. it should be interface name not ip address, may be windows resolves it somehow ...",0,0,0,0.9842177629470824,0.9933561086654664,0.989334523677826,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394023892,180,dirty (not proper) fix: [a link] change '0.0.0.0' to '' outgoing_interfaces is handled different to listen_interface in libtorrent itself.,-1,0,0,0.5332627296447754,0.9883320927619934,0.8283501267433167,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,394025468,180,on windows there isn't really interface names so libtorrent on windows uses ip. sorry i didn't see 0.0.0.0 wasn't default parameter but at least on windows which you can see through ltconfig not setting a value results in 0.0.0.0 being used. sorry.,-1,-1,-1,0.9902350902557372,0.9904987215995787,0.992468535900116,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028864430,359,"unless we are going to include a type checker, i am not sure the value here? also the type is included in the docstring and there should be only one source of truth",0,0,0,0.9712899923324584,0.9770182371139526,0.9775172472000122,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029047587,359,"hmm, that's a good point and i hadn't fully thought it out. here were my goals: 1. have the ide know what stuff was when i'm refactoring. (i have several branches where i'm trying different stuff, and the ide rarely has good type info at the moment.) 2. define the contract a bit better for exported methods, so it's more apparent if they get changed. (once again, i was thinking more how pycharm automatically highlights wrong usage/returns more than running an explicit type checker.) 3. i don't think it would be terrible to enable mypy checking in the loosest mode, where it only cares about the things we have already documented, such that type hints could be added bits at a time. that being said, point 1 is probably not so applicable to the exported methods, because they normally get used via client, or via component.get(), both of which the ide loses track of the type hints. and 2 is probably better served by the docstrings, so it gets exported to the rpc docs. i do like the expressiveness of the type hints compared to just a simple type in the docstring, (e.g. list[tuple[int, str]]) but in cases where the requirement is more complex it needs to be spelled out in words for the generated documentation anyway. if we did want to move to this style type hints, we could make it the single source of truth, and just make the docstrings for people [a link] (this would be my vote.) i still think the type hints are quite useful in the ide for autocompletion, and i'd be inclined to add them to any bits i touch when doing any fixing/refactoring, unless you are against them completely. for more internal methods the disadvantages above are moot.",0,0,1,0.6171123385429382,0.4353559911251068,0.8950928449630737,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1029056574,359,"i had forgotten about ide usefulness so happy to try to accommodate there, just didn't want to have the types to become outdated or spend a lot of effort for little gain. personally i find type hints can reduce code readability and unless constantly encountering type issues not worth the added overhead, especially if never fully verified by mypy. since we already have a form of typing in the code, i am happy if we experiment with moving types from docstrings. as you suggest starting with core exported methods and use [a link].",1,1,1,0.9314485788345336,0.9575015902519226,0.9686042666435242,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029152733,359,"i think that we should also start converting the docstrings to googles's format, probably in another pr.",0,0,0,0.9857711791992188,0.9806133508682252,0.9842398166656494,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029157643,359,can use [a link] to convert them,0,0,0,0.9878405928611756,0.9906272888183594,0.995969295501709,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029615308,359,"i did some work in core.py standardizing the docstrings, removing the types, and enabling sphinx generating them from the function signatures. seems to be working pretty well. ![a link] the docstring updates were sorta tedious. i tried pyment, couldn't get it to work very well. i'd be more inclined to fix stuff as it gets touched going forward rather than do a big dump.",-1,-1,1,0.6494778394699097,0.9328932762145996,0.7345225811004639,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1029635408,359,can we add a mypy check as a github action? we really should have typing everywhere that's feasible.,0,0,0,0.9823890328407288,0.980662763118744,0.9907773733139038,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029638231,359,"yeah, i was just experimenting with mypy. trying to figure the easiest way to introduce it without a shitload of comments on stuff to ignore before we get it all in.",-1,-1,-1,0.965617299079895,0.9746665358543396,0.949910581111908,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030114829,359,can we leave the mypy to another pr and get this one merged,0,0,0,0.985857367515564,0.9923032522201538,0.9928613305091858,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030134818,359,"sure can. i'll back that stuff out, was just doing some experiments.",0,0,0,0.7905823588371277,0.9656018614768982,0.9725338220596312,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030154920,359,restored this to just the doc changes and type hints.,0,0,0,0.9852533936500548,0.986929416656494,0.9920112490653992,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030669623,359,"there are breaking compatibility changes with both older twisted and python versions in the pr, i have reverted the code from develop: 1089adb8442 perhaps we concentrate on fixing other areas of the code and windows release as i don't see the expenditure just now worth it?",0,0,0,0.8984911441802979,0.9451985955238342,0.988569676876068,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030672157,359,"ahh. didn't consider older versions of twisted not having type hinting capability. shouldn't be any issues with older python though, i didn't use the stdlib types as generics, so that should be fine. the twisted issue would also be resolved if we drop python 3.6 support, was questioning that in my mypy pr. [a link] yeah, that's fine. i just prefer adding the type hints as i go fixing other stuff, so it's a real bummer.",-1,1,-1,0.9816978573799132,0.8746575713157654,0.9891394972801208,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1030688143,359,i thought i saw usage but seems i was mistaken certainly can consider dropping it for 2.1.x since it would simplify our support :thinking: if you can see a quick way to get typing in without too much overhead certainly update this pr. i just have limited time to investigate any resulting errors i should also see about running a ci that has our minimum requirements and current requirements,0,1,1,0.7364525198936462,0.5475721955299377,0.8945115804672241,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1030696780,359,"we could do comment type hints, or, probably nicer, just type deferreds as deferreds without typing their return value. if we do maybe_coroutine branch that won't be bad, since we don't return a deferred if the function is wrapped in that.",0,0,0,0.9822613000869752,0.9771167635917664,0.9835219383239746,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030697949,359,"i think there shouldn't be problems without the use of generic deferred return types... yeah, that would be useful.",0,0,0,0.9380616545677184,0.7336716055870056,0.9648299813270568,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030702977,359,"totally forgot type hints could just be strings. made that change, it's a much better option.",0,0,1,0.7555795907974243,0.9090046882629396,0.549477756023407,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1032094666,359,"rebased to resolve the conflicts, should be good again.",0,1,0,0.5629026293754578,0.5027486681938171,0.71043461561203,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,405116021,200,for reference: install debug symbols [code block] to fail on first warning and get backtrace: [code block] the backtrace should give just a bit more info on where to look to fix warning. resources: [a link] [a link] [a link] [a link],0,0,0,0.9859057664871216,0.9917592406272888,0.9926837086677552,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405116899,200,also useful for debugging the ui [code block] based upon [a link] which does support gtk3 too.,0,0,0,0.9866663813591005,0.9930734038352966,0.9415995478630066,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405117119,200,two tracebacks to investigate: [code block],0,0,0,0.9862529635429382,0.9894751310348512,0.9955938458442688,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,424794482,200,"for future ui design: - [ ] added support for hi-dpi displays (use svg system and app icons); - [ ] changed pieces bar; - [ ] added session pause/resume support from main window; - [x] use gicon to files_tab to show icons according to system mime-types; - [ ] сonnection manager became more friendly to user; - [ ] updated country flag tooltip; - [x] adapted to gtk3 and tested scheduler, notifications, itconfig plugins. solved ui bugs: - [ ] sorting in torrent view; - [x] renaming files in files_tab problem; - [ ] сonnection manager bugs; - [x] restore mainwindow vpaned, hpaned position at startup; - [x] right click on torrentview header opens two context menus. [a link] [a link]",0,0,1,0.8514102697372437,0.980905532836914,0.5446630120277405,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,424975216,200,"do you have a git branch with these changes? it would make collaboration easier also code cannot be removed without providing a replacement, e.g. caching is there for a reason",0,0,0,0.9843398332595824,0.9914020895957948,0.9931893348693848,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,425096247,200,"caching is enabled on all cells so this can't be isolated to the speed cell. the point of the caching is when dealing with thousands of torrents. could you provide more information, e.g. video, on the bug as i don't see the issue you are reporting. it would be more useful as git commits contain this important information. also i cannot simply merge all your changes as there are parts that i don't think are corrent. many self-contained commits each with a related fix is much better.",0,0,0,0.8962861895561218,0.9618880152702332,0.970244526863098,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,425157223,200,"thanks for the video, i can replicate now. so the issue is that with both torrentview and peerstabview values are appearing in blank cells because they are sharing the same cell renderer func. would this not be solved by not reusing the `cell_data_speed_down` func in peers tab so create a `cell_data_peer_speed_down` func? however the cache is only useful for relatively static content which speed usually isn't so maybe removing the cache here is fine...",1,1,1,0.7014037370681763,0.9202743172645568,0.9697771072387696,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,429535317,200,"calum, solution for unicodewarning problem in torrentview.py. the reason is in eta int type in liststore. [a link]",0,0,0,0.983675181865692,0.980636179447174,0.9918596148490906,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,429994889,200,"is this the blocker for the next release? ""watching"" the deluge reposity makes me really impatient",-1,-1,-1,0.984791100025177,0.8721911311149597,0.9905810952186584,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,430027968,200,"according to my observations, calum is not interested in a quick release. he makes a lot of important changes, but when the release will come is not clear.",-1,-1,0,0.6887611746788025,0.5123546123504639,0.941356360912323,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,430035976,200,the problem is that there is no development team and release time-line.,0,0,0,0.8370487689971924,0.9853554964065552,0.6239650249481201,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431380914,200,it is not said that a watched branch never releases ;) for python 3 and other reasons gtk3 is important. can we avoid non-relevant discussion in a pull request though. i don't see how `long` has any effect on unicode and in python `int` and `long` were unified.,1,1,1,0.5857322812080383,0.9816069602966307,0.9809862971305848,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431391903,200,"i assumed that your comment # fixme: seeing unicodewarning ?? was associated with this warning: [failure instance: traceback: : 3072227291 not in range -2147483648 to 2147483647 /home/kbdserver/sources/deluge/deluge/core/torrentmanager.py:1441:on_alert_state_update /home/kbdserver/sources/deluge/deluge/core/torrentmanager.py:1499:handle_torrents_status_callback /usr/lib64/python2.7/site-packages/twisted/internet/defer.py:459:callback /usr/lib64/python2.7/site-packages/twisted/internet/defer.py:567:_startruncallbacks --- --- /usr/lib64/python2.7/site-packages/twisted/internet/defer.py:653:_runcallbacks /home/kbdserver/sources/deluge/deluge/ui/gtk3/torrentview.py:611:_on_get_torrents_status /home/kbdserver/sources/deluge/deluge/ui/gtk3/torrentview.py:589:update_view /usr/lib64/python2.7/site-packages/gi/overrides/gtk.py:1052:set /usr/lib64/python2.7/site-packages/gi/overrides/gtk.py:1046:_set_lists /usr/lib64/python2.7/site-packages/gi/overrides/gtk.py:915:_convert_value /usr/lib64/python2.7/site-packages/gi/overrides/gobject.py:218:__init__ /usr/lib64/python2.7/site-packages/gi/overrides/gobject.py:249:set_value ] if so, warning is related to the type of the variable in the liststore.",0,0,0,0.9765639305114746,0.98233300447464,0.9898833632469176,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431405321,200,"ah well yes that is a different issue and the solution is to limit the maximum size of eta returned by torrent status. perhaps put a max value of `31557600`, which is a year.",0,0,0,0.9735797047615052,0.9531410932540894,0.9833742380142212,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431410079,200,"you're right, it's better: [a link]",0,0,0,0.9431679248809814,0.7831818461418152,0.6832670569419861,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431459136,200,"for future ui design part2: - changed the trackers tab - edit tracker in tab or remove, move in multi-selection mode directly. button bar can be activated if needed; - added flags information in peer tab to understand how this peer is connected; - others design improvements. video and source code attached. [a link] [a link]",0,0,0,0.9550408720970154,0.9914996027946472,0.7223241329193115,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431584154,200,"please provide this as a pull request, patches or link to a branch. it is too much time and effort to do this with a source code zip file. [a link]",0,0,0,0.5482948422431946,0.9611909985542296,0.9932199716567992,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431586551,200,"you do not understand, calum. i want to help the project survive. your problem is not in a zip file",-1,-1,-1,0.9082010388374328,0.86745685338974,0.9509901404380798,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431587968,200,maybe you're trying to get more money from [a link] but also think about the users who like the program.,0,0,0,0.941674828529358,0.936126708984375,0.9575391411781312,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431594857,200,"if you want to do that, then submitting pull requests is how you help me. code needs reviewed before it can be merged and providing a zip is not how software development works these days. it is how the develop branch got into this mess in the first place. disparaging comments are not welcome here.",-1,1,-1,0.9715209007263184,0.7890528440475464,0.9009801149368286,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,431601138,200,can i help you to create a pull request?,0,0,0,0.9873884916305542,0.9930478930473328,0.9951812624931335,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431611256,200,"i will be grateful, thanks!",1,1,1,0.9833009243011476,0.9905775785446168,0.9908945560455322,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431652105,200,"this path is very slow, deluge lost the advantage.",-1,-1,-1,0.6218578815460205,0.950745701789856,0.9609163999557496,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431652703,200,for me it is not right to ask for money and not to give anything in return,-1,-1,-1,0.717099666595459,0.6008225679397583,0.9140674471855164,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431654281,200,"calum, you are a professional programmer, i do not even doubt that you have invested in the project. perhaps a reboot is necessary - deluge 3.0.0",1,0,1,0.8680651187896729,0.938584566116333,0.6593725085258484,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,431656965,200,"this is the way that all large project works and to do otherwise wastes the project development time. there are many article on the internet as to why this is the case and i should not need to explain myself. i have been working for [a link] on deluge so i have given plenty with deluge a stable 1.3 because of my efforts. patreon was never solely about next major release of deluge, it was about me running the project as a whole, including work on libtorrent. those who donate have got updates as to what is going on with myself. please do not post any further off-topic comments here.",-1,1,-1,0.4960415363311767,0.775202751159668,0.7156920433044434,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,431696516,200,"i'm not quite sure i understand what you're trying to say, or if you understand what you're saying yourself. running a project like this is a huge amount of work, and if there is one thing you can do to help, it is to contribute in a manner than helps the developers the most. dumping a zip archive with your changes has never been the way to contribute to a software project ever since patches become the standard. the fact that you even bother to quarrel about this suggest you don't know enough about software development to be in a position to suggest anything at all about how any developer should accept any help at all. if you need help with creating a pr, you should be clear about that, and maybe someone will help you. saying that cas won't accept zip archives due to wanting money is ridiculous. suggesting shit like you did is not the way to behave, and deserves am apology imo. if you tried something like this e.g. on the linux dev email list you'd be told to fuck off.",-1,-1,-1,0.923291563987732,0.8103769421577454,0.9751004576683044,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431700604,200,good luck in the project.,1,1,1,0.930984377861023,0.987441062927246,0.8506410717964172,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431704944,200,many want to stop the project. fuck off yourself bendikro,-1,-1,-1,0.9867590069770812,0.9889563918113708,0.99174702167511,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,433972184,200,blocklist plugin gtk3 fixes [a link] ![a link] updated svg icons for scheduler and blocklist plugins: [a link],0,0,1,0.970394492149353,0.989087700843811,0.9212023615837096,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,435583602,200,"dear calum, what is the release date?",0,0,0,0.9557775259017944,0.9853579998016356,0.9907307028770448,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019161190,343,"can we try to have separate prs for distinct changes e.g. lt deprecated vs other deprecated so the easy changes can be merged, also provide some context for the change in the commit message. e.g. explain why are were replacing linux_distribution and perhaps a link to documentation also for deluge 2.1.x we can bump the lt min version to 1.2. this means just replacing the deprecated code rather than trying to support lt 1.1",0,0,0,0.9821120500564576,0.9929406642913818,0.9934648871421814,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019212705,343,"good points. new pr for the `linux_distribution` drop: [a link] i have added a commit for min version and removed version validation check in `torrent.py`. btw, -- ypu should add your gpg public key to github, as currently it cannot verify your commit.",1,1,1,0.983993113040924,0.9269237518310548,0.9805147647857666,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020626145,343,"`resume_data` in `alertmanager` is being accessed when coping the `save_resume_data_alert` alert. it will keep warn us until we stop using a python binding with deprecation support. nevertheless, i have replaced the usage of the deprecated `alert.resume_data` in the alert handler in `torrentmanager.py`.",0,0,0,0.9844693541526794,0.9934420585632324,0.9935059547424316,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021460920,343,"ok, managed to fix the `url` and `name()` issues as well. 2 points i think i should bring up: * `resume_data` can be fixed even further by skipping it when coping the `alert`, just like all of the `__x__` methods. * when fixing the `url`, i learned that there is a function to parse magnet uris - [a link]. the return value is an `add_torrent_params` object which can be manipulated just before passing it to the `lt.add_torrent()` method. i think we should consider using it at also in [a link] lastly, i need your input, --, about upgrading to lt1.2.14 as the minimum version as suggested.",0,0,0,0.8528527617454529,0.9507980942726136,0.8550633192062378,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021497017,343,"i'm not sure what you mean here, can you elaborate? we should not use any libtorrent method outside of core since we should not require it to be installed if using a thin client. as i said we should not put a high hard limit on the lt version so leave it as 1.2.0 unless there is a critical issue we know deluge is not compatible with. it would be up to package managers to ensure using latest stable versions of libtorrent",0,0,0,0.7173051834106445,0.9083635210990906,0.93563312292099,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021519885,343,could you also add to the commit message a few details about the changes,0,0,0,0.9884918928146362,0.980434000492096,0.9943875670433044,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021521347,343,"sure. in [a link], we are coping the content of each alert as it arrives as it will be deleted by the caller. when we receive an alert of type `save_resume_data_alert`, one of it's members is the deprecated `resume_data`. as part of the copy, we access `resume_data` as well, which triggers the `deprecatedwarning`. a possible solution, it treat it as `__x__` (just an example): [code block] the ""correct"" way, according to libtorrent [a link] (last line), is stop compiling lt with deprecated functions enabled, but it's not part of this pr. i agree. also, passing it from the core to the thin client is not that important and efficient. dropping the suggestion. keeping `1.2.0` it is. thinking of a splitting it into 2 commits exactly for that. give me a couple of minutes.",0,0,0,0.9504315853118896,0.9938458800315856,0.970536470413208,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021963226,343,everything is fixed.,0,0,0,0.96687114238739,0.931845486164093,0.7706303000450134,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025211734,343,"i am also seeing. ` 13:59:22.436 [debug ][deluge.core.core :64 ] deprecated session status key num_peers, please use peer.num_peers_connected 13:59:22.436 [debug ][deluge.core.core :64 ] deprecated session status key dht_nodes, please use dht.dht_nodes 13:59:22.436 [debug ][deluge.core.core :64 ] deprecated session status key has_incoming_connections, please use net.has_incoming_connections 13:59:22.437 [debug ][deluge.core.core :64 ] deprecated session status key num_peers, please use peer.num_peers_connected 13:59:22.437 [debug ][deluge.core.core :64 ] deprecated session status key dht_nodes, please use dht.dht_nodes 13:59:22.437 [debug ][deluge.core.core :64 ] deprecated session status key has_incoming_connections, please use net.has_incoming_connections `",1,0,0,0.5577080249786377,0.9928064346313475,0.9800823330879213,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1025262130,343,with which version of lt?,0,0,0,0.9848614931106568,0.9911432266235352,0.993355393409729,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025265529,343,"sorry, with 2.0.5. so idk if you want to cover that here or not.",-1,-1,-1,0.9859378933906556,0.9907853603363036,0.992270827293396,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025266016,343,googleing part of it like please use net.has_incoming_connections you can see people getting that with lt 1.1.5 [a link] so id imagine at least that one is old when for each version im not sure.,0,0,0,0.9083231091499328,0.9468315839767456,0.961093544960022,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025266204,343,seems they are all as old as 1.1.11 edit: at least as far as users have reported on the deluge forums.,0,0,0,0.9835349321365356,0.9741453528404236,0.9406479597091676,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025269200,343,i guess this list should be looked at [a link] [a link],0,0,0,0.9831589460372924,0.972272515296936,0.9868007898330688,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025269469,343,"it's not a list, but a dict for deprecated session status keys, but seem we only use it when the key is not available at all: [code block] i'll try to fix it also, thanks. and also for lt2.0",1,1,1,0.9339784979820251,0.5422083735466003,0.970535933971405,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025269958,343,"yea, sorry dict, but yea i just mean look over it see if theres anything that is'nt needed etc if we are going to require lt 1.2+. anyways you got this :) thanks!",1,1,1,0.9920698404312134,0.922660231590271,0.99524188041687,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025270583,343,the real issue is finding the caller that uses old keys... it might be even a plugin (like ltconfig),0,0,0,0.9601866006851196,0.9862614274024964,0.975196123123169,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025271757,343,num_peers dht_nodes has_incoming_connections show up with no plugins enabled.(maybe the other too just did a quick run to check) is is still possible that its a plugin?,0,0,0,0.9872774481773376,0.9842108488082886,0.9948546886444092,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025272125,343,my understanding is ltconfig only loads its settings if enable and doesn't modify settings else where.,0,0,0,0.9871047735214232,0.967764377593994,0.9885184168815612,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1026287415,343,so the deprecated error was being just printed by `deluge` itself in the `core`... the source was in all of the uis' status bar update code. thanks for the catch.,1,1,1,0.9339170455932616,0.9415862560272216,0.934926450252533,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1026408243,343,"cool, now we have modern ui code and up-to-date libtorrent api usage, nice work!",1,1,1,0.9924994111061096,0.9955517649650574,0.99638569355011,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1027320002,343,unfortunatly i am not sure this is all set. currently i am seeing the status bar in gtkui say download 1 g/s but down speed in the torrent list treeview shows 3.6m/s. edit: same is true for upload speed as well. edit2: happens in webui too. i think its not converting bytes vs bites or something. as it seems to be mostly ~100x the value it should be. the status bar does include more then just the torrents transfer speed to some difference is expected but i don't have a gig connection and it went up to 2g/s at one point some definitely off some how.,-1,0,-1,0.9490077495574952,0.5841519832611084,0.5358844995498657,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1028335062,343,so it seem that i was using the total uploaded/downloaded bytes in the session... should be fix. - can you verify? thanks,1,1,1,0.9305363297462464,0.7890055775642395,0.7740364074707031,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028401107,343,"looks like its fixed, thanks!",1,1,1,0.9760802984237672,0.9893753528594972,0.9529748558998108,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029498174,343,sorry ignore my last comment. still working fine.,-1,-1,-1,0.9884181618690492,0.9921619296073914,0.989956557750702,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030156069,343,"found some places that needed to be fixed also. in addition, now i have removed all new known deprecated functions that were introduced in `lt 2.0`.",0,0,0,0.9885995388031006,0.9934098124504088,0.9905810952186584,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1038131736,343,closed via 2bd095e5bfc49cbe178fc0ba9df38b88afc238aa (mix up put wrong pr number in commit!),0,0,0,0.952208697795868,0.9356679916381836,0.9920136332511902,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59654514,14,all issues have been addressed as far as i know.,0,0,0,0.9794283509254456,0.9778032302856444,0.9873459935188292,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,61801530,14,there are still two outstanding notes,0,0,0,0.9561575055122375,0.9730312824249268,0.9588794112205504,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,65208592,14,"for the docstrings: could the first line not be empty i.e. `""""""add torrent`... add fullstops after args, etc as when reviewing you can be more certain that it it's not an incomplete description :)",0,1,1,0.4879181087017059,0.9217891693115234,0.9018741250038148,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,65229534,14,comments on docs noted!,0,0,0,0.9276747107505798,0.7664141654968262,0.962677240371704,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,65401615,14,i was about to merge this but realised that the other uis need to be updated to use this new function. there were the small docstring changes i was going to add... [code block],0,0,0,0.9579716324806212,0.9693037867546082,0.9900099635124208,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,65444975,14,thanks! added to develop: [08363f28dd308],1,1,1,0.980042576789856,0.965526819229126,0.977777361869812,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012608979,337,hmm seems the pr label condition did not work :thinking:,0,-1,1,0.5379625558853149,0.960701584815979,0.7720874547958374,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,1012717504,337,"sorry just quickly wanted to add that i'd recommend rebuild gvsbuild before releasing installers to public, sorry if always was the plan regardless - reason can be read in my issues thread and pr at gvsbuild, both closed now and pr merged. just to add what's missing there, then i just found out nsis adds ""start in"" for it's generated shortcuts into target dir, effectively making people hit the pyinstaller and trailing semicolon bug i previously posted about(on py3.8 and up only), but i didn't knew before today that it is windows adding trailing semicolon to path(more info on gvsbuild post), so pretty much most(all) should be affected(unless maybe if having old install before change introduced), and that the generated shortcut from deluge installers uses said ""start-in"" - i tested building installer, install, and couldn't start from desktop shortcut, with error message posted about wrong parameter. if not wanna rebuild, could also just use something like this in mean time(change paths accordingly), before firing off pyinstaller: [code block]` alternatively could instead change that ""start-in"" from nsis(easilly goggled), though less good solution imho. more info if interrested: [a link] don't have to respond, and sorry for intrusion again, carry on :) thanks. edit: actually no such code should be in these py-wrapper init's on freezed imho, and i elsewhere patched it out a long time ago and added my own to deluge init for finding gtk-subdir on py38+, as otherwise point-of-failure(incompatible dll found), but not here where all dll's in main dir, though still takes useless time, though neglible. could check if frozen etc. anyway, maybe irrelevant to you and just adding in case.",-1,-1,-1,0.9875361323356628,0.989738404750824,0.98914635181427,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1012742544,337,"-- i think this might conclude what i have for now, if it looks ok and you want to merge.",0,0,0,0.9519476294517516,0.959360420703888,0.8432667851448059,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1013071428,337,"we're still missing `gtk_csd=0`, though we could ship without it and observe reports from users to decide if it should be added or not.",0,0,0,0.9829933643341064,0.9907978773117064,0.9899864792823792,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1013102393,337,"sorry i meant specifically _**i**_ am done. if you want take these changes as is or what ever ill leave this open let you merge as you see fit -- , but i'm not going to be adding more for a while. i would suggest someone else start a pr for further changes. thanks guys! edit: i did make a few adjustments to this from what you guys have commented.",-1,-1,-1,0.8704878091812134,0.7820845246315002,0.5363453030586243,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1013112569,337,"that's perfectly understandable, i can make tweaks and hopefully others will contribute once i've created a release",1,0,0,0.7972229719161987,0.7390742897987366,0.8669750690460205,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1013125812,337,"thanks, i do plan on making a few changes/helping with a few things, i'd like to see added, but just gonna take a break for a while and while i would like to see people get an official release soon, i also don't want to hold up progress by just leaving this pr open and not helping/responding.",0,1,1,0.5106897950172424,0.8409801721572876,0.470695823431015,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1018484327,337,i have refactored the dependencies: 9d4ca77ef7ebf1b3e39b837a0f31cec3da110760 i created a simplified csd runtime hook: 4f17fc41a506aeba6c595ef7ee2e53fbbd4aeeca i merged your copyright update: ad27a278fd2b246c9c8aa30ca1887c11ca5bb712 and pygame: 2cad0f46f,0,0,0,0.9568829536437988,0.9670741558074952,0.9842878580093384,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1018509748,337,that covers the commits i had for here so closing. thanks!,1,1,1,0.9770371913909912,0.994830310344696,0.9842653274536132,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1032989694,369,"nice catch, i have been meaning to investigate that one properly",1,1,1,0.977165937423706,0.9403933882713318,0.9853259325027466,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1033050786,369,"i'm looking at all the other bits that call the live handle.status(), and having trouble deciding whether they really need a fresh status or the cached one is good now that it's guaranteed to be relatively recent. if we do want to pull guaranteed fresh status, maybe we should add something like `torrent.get_status(update=false)` that way we are guaranteed to update the cache every time `handle.status()` is called, rather than calling it sometimes and not storing it to the cache.",0,0,0,0.9682562351226808,0.9836973547935486,0.5756187438964844,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1033101423,369,"i had a go at answering my own questions raised in the op, and implemented them as such. happy to reconsider if anyone has any better plans.",1,1,1,0.9760200381278992,0.9842536449432372,0.9855077862739564,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1033819158,369,"another thing that could be done to fix this, potentially alongside this change, is to call get_torrents_status on all of the torrents we need to check rather than looping over them one by one. presumably the bulk call to libtorrent is more efficient that getting the status on each torrent individually. maybe leave the current cache expiry changes in as backup, but also add the get_torrents_status call to do the bulk update for the stop ratio check?",0,0,0,0.9845904111862184,0.9924901127815248,0.9913177490234376,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1039871460,369,hmm. how did i mess up the docs building?,0,-1,0,0.6573901772499084,0.8262108564376831,0.9580581784248352,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1040069380,369,my quick testing suggests it's related to typing added in commit [a link] i'm testing locally to see what is causing it,0,0,0,0.9806516766548156,0.9770194888114928,0.9873095154762268,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,213848098,78,a few notes: - english is not an option in the drop-down. - need to hit `apply` then `ok` but this is probably a pre-existing issue - change `height: 22` to `height: 17` to gain some height in interface.js,0,0,0,0.9691634774208068,0.9944425225257874,0.9894784092903136,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,213848593,78,with the extra height i would like `language` label to be a `xtype: fieldset`,0,0,0,0.9839504957199096,0.992576539516449,0.994561731815338,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,213924317,78,"haven't looked at the apply issue, but the language option should now be working 100%.",0,0,0,0.985101044178009,0.9386323690414428,0.9824990034103394,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214039210,78,should we perhaps either prompt 'refresh browser' or actually refresh the page after clicking apply?,0,0,0,0.9875457882881165,0.9922412633895874,0.9921471476554872,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214039875,78,probably a good idea. auto refresh may be a bit intrusive?,0,0,1,0.7228971123695374,0.6409507393836975,0.8095362186431885,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,214048990,78,you might be right that auto-refresh could be intrusive so popup box perhaps?,0,0,0,0.9838331341743468,0.9771884679794312,0.9808305501937866,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214051668,78,"yeah, if that's a simple fix?",0,0,0,0.976489245891571,0.980776071548462,0.9897770285606384,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214053654,78,it should be with: [a link] just need to catch the language change,0,0,0,0.983369529247284,0.988469421863556,0.9956472516059875,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214214294,78,i think adding this to onapply should suffice: [code block],0,0,0,0.9867650270462036,0.9839223623275756,0.9932284951210022,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2310964316,454,"i'm afraid there are too many changes here and not enough details in the commits about why the change is required. if possible, can you split these up into more concise prs it will help reviewing and merging",-1,-1,-1,0.9443895220756532,0.8168598413467407,0.9554972052574158,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2324924199,454,"i hadn't seen this comment, sorry for not answering before. i'd rather not split it (although it is true that there are some not-strictly related things here) because then we'll never get it merged. however, i'm more than happy to amend commit messages and/or explain why i've made each change.",-1,-1,-1,0.9655988216400146,0.9743061065673828,0.9757914543151855,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2329862059,454,-- using `libtorrent==2.0.8`fails because for some reason that version is missing from pip. i think that's why i had done `<2.0.9`,0,0,0,0.9529882669448853,0.9825710654258728,0.7917178273200989,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2333314599,454,"the publishing to pip seems to be intermittent, i've made an issue on libtorrent a little over a week ago about pip builds, but i haven't seen any update. there is a open pr that seems to address some of the builds/ci for libtorrent, but i'm not sure if this directly address this concern. you can see my issue and the linked pr [a link]",0,0,0,0.8809369802474976,0.8749509453773499,0.9367591738700868,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2333355143,454,"there were several issues with the `pypi` publish process for `libtorrent`... i hope the fixes will work on the next release, as py3.13 is about to be released -kamina please revert the change to `install gtk` step as it will always fail until we have a newer release for it.",0,0,0,0.9736637473106384,0.9625107049942015,0.9438129663467408,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2333358050,454,"as i've found out recently heh. a user on the forums was asking about 3.13 support, and i told him to make an issue or pr, and he made [a link] for it - it's failing some tests though it seems.",0,0,1,0.8045870661735535,0.5261635184288025,0.539660632610321,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,2333849136,454,"the change to gvsbuild-release was already commited, all that's missing is for the workflow to run, which is only on a manual trigger. however, that would break the current ci. the idea would be to run it just before this pr is ready to be merged.",0,0,0,0.9858649969100952,0.987089455127716,0.9926415085792542,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2333857570,454,"i know and i was inquiring about it as well a while ago. thing is, even if that's fixed, i doubt we'll get retroactive releases for an old version, so the point stands in that we need to be able to 1) update libtorrent and 2) have at least some ci workflow that fails anf alerts us when newer versions break, because else we're putting ourselves in the same position the folks at twisted did, which is essentially forgetting it's an issue. of course, i'm willing to help however i can but i have essentially no experience working with libtorrent so i'm not sure that really amounts to much. what do you think ?",0,1,0,0.5576894283294678,0.4793815314769745,0.7538313269615173,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,2336497552,454,i don't think that's at all related? what was merged (and still is not really reflecting anywhere) is a change in the way gvsbuild is built for newer releases to be used in deluge.,0,0,0,0.9276976585388184,0.9432490468025208,0.975212037563324,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2336498123,454,"i wasn't saying it was related necessarily, but you mentioned 3.13, so i informed you of a relevant pr to the version, that's all.",0,0,0,0.9827200174331664,0.9746658802032472,0.9910123944282532,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2358520475,454,closing this as per #466,0,0,0,0.9878045320510864,0.9896934628486632,0.9946367144584656,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,218823874,90,"just revert/delete my commit removing of unicode_argv until we can test it on windows and be sure it's working without it. can be a python 3 milestone... i think a few extra details in the commit message just to quicky explain the changes would be handy. also detailing the original issue i.e. `~/delugedev/deluge -u web -a ""-h""` not displaying help. this was the original help output for ui group: [code block] currently seeing this: [code block] i know that using subparsers means we cannot add them to the ui parser group so may need to do something similar as described here: [a link] so if `positional arguments` can be renamed to something more meaningful, moved closer to ui options and include in the description that ui args can be passed as well...",0,0,0,0.9355794191360474,0.8977684378623962,0.921209990978241,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,218908142,90,rebased/squashed and removed the unicode_argv commit. current output of `deluge -h` [code block],0,0,0,0.9882348775863647,0.9935263395309448,0.994081437587738,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219013504,90,ok so i had added a few text tweaks and rebased them and was about to merge when i realised that the ui_entry tests should not be passing... i have pushed those changes back to your branch in the meantime. what should we be doing with unrecognised args? e.g. old `--ui`,0,0,0,0.9690806269645692,0.9783600568771362,0.9857895970344543,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219326257,90,"i think i got a working solution now that correctly handles the following key cases: 1. console command with no extra argument will connect in interactive mode: `./deluge console` 2. console help: `./deluge console -h` 3. console sub command: `./deluge console info` 4. console sub command help: `./deluge console info -h` i've added tests to verify this to work, but more tests cases could probably be added. `--ui` will now give `unrecognized arguments: --ui`. is this not desirable?",0,0,0,0.951556921005249,0.9756499528884888,0.7247918844223022,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,401407557,196,"i'm trying to add tests, as you suggested, with no luck. it seem as the server is up but when trying to connect to it with ssl\tls, it does not respond to the protocol, and handle the negotiation process. and this cause the test process to halt and wait to results. my initial try is in [a link] pastebin -- any ideas how to fix it?",0,0,0,0.674261748790741,0.5151219964027405,0.7705845236778259,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,401458963,196,i didn't realise the tests were so slow. perhaps leave it for now then. the issues you are facing with running a subprocess command in tests is likely related to the twisted reactor. i had success with the following instead: [code block] i did see potential python tests here: [a link],0,0,0,0.9111330509185792,0.934606671333313,0.969971239566803,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,401489689,196,"i think i didn't explain the problem correctly. the script will take time to run, but it's not the problem we have. when the test run, it starts the webui with `self.deluge_web.start()`. the expected behavior is the ability to connect to the server itself by connecting to it's ip and port - `127.0.0.1:8999` and being able to use it. unfortunately, this is not the case. when connecting to it with a web browser, firefox and chrome, there is no response from the webui at all. all you get is a message that the server is down. connecting with `openssl -s_client -connect ip:port` only shows `connected(*some-code*)` and the handshake process being stuck after the 1st phase, `client hello`. a good connection will show the important info about the secured connection, like public cert, protocol version and agreed cipher. btw, this testing library looks cool.. i'll check it out. **edit**: now i understood what you meant... i'll create a test with both `testssl.sh` and `tlsfuzzer` and verify which is faster.",0,0,-1,0.7749738097190857,0.935397446155548,0.7471023797988892,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,402473793,196,"ok, i've implemented the tests using `testssl.sh`. this effects the duration of `pydef` and `trial` to be completed. in addition, not all tests currently passes as a further configuration is needed for `twisted`: * `client-initiated renegotiation` needs to be canceled. * there is no `server cipher order` for the daemon. finally, some of the tests are for `http\s` servers, so whey are being skipped. i didn't use `tlsfuzzer` because it's still under development, has no documentation and doesn't compatible with an automated test-run.",0,0,0,0.96017587184906,0.9924392700195312,0.9854332804679872,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,403974929,196,"yeah, i know. as a fix for `pytest`, i've added a new `toxenv` only for the security tests and set the main test run to ignore it. the problem is going to be with `trial` run, as currently it tests everything with no option to split the tests... please write if you know of any way to do it.",0,0,0,0.9670562148094176,0.9800212979316713,0.890197217464447,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,404093153,196,you could set an env var and skip the tests if not set [code block],0,0,0,0.9889827370643616,0.9932271838188172,0.9951968789100648,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,408443867,196,"it can be done, but this will extend the running time of the test as we need to download 2 files, `testssl.sh` and `etc.tar.gz`, and extract the later (or download everything from its [a link] and then extract). to do so, i'll need to add to `commands = ` the commands to download and extract the files, right?",0,0,0,0.9846101999282836,0.9937212467193604,0.9940958023071288,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,410463247,196,"actually, i just realised that the code should be downloaded by travis instead in `install` section. tox is for setting up a python test env so we should specify in the documentation that testssl.sh is a requirement. use whatever is the simplest way to install the files, using the releases seems like a good idea. to deal with the time penalty i intend to only run these security tests either manually or with commits on the `develop` or `master` branch. so not prs or other branches. another idea so you can run them in a pr is to include something like the word `security_test` in the commit message.",0,0,0,0.7078107595443726,0.9521469473838806,0.9567418098449708,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,412133089,196,this is looking great and i think nearly ready for merging? did you want to squash the commits and also test out the travis keyword in commit message?,1,1,1,0.8980040550231934,0.6513491868972778,0.5324319005012512,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,419192709,196,thanks! merged,1,1,1,0.9706741571426392,0.9784954190254213,0.985089123249054,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211376089,67,are there any unresolved issue left?,0,0,0,0.9653770327568054,0.9888062477111816,0.988094925880432,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211434266,67,merged in develop: 47f14845ca,0,0,0,0.9845653176307678,0.9915488958358764,0.9932934045791626,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025081351,354,"so, i guess i'd better ask, because this turned in to a much bigger thing than i thought. are we in to this? -- ? i think it's probably worth it in the long run if i can get things cleaned up a bit more. right now it's a mix of manually redone tests that are nice, some things that i change only just enough to work, and some in between. i have found multiple cases of tests that were broken, (passing, but not testing the thing they thought they were,) and even some where the thing they thought they were testing was broken. i think getting closer to pure pytest (with pytest-twisted) is much nicer, and converting some of the convoluted test subclasses into composable fixtures would be pretty nice.",0,0,0,0.7462050914764404,0.7046078443527222,0.4759345948696136,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1025082447,354,i don't have much of an opinion on this besides that i like pytest and moving to using it makes sense to me.,-1,-1,0,0.8745033740997314,0.645404040813446,0.7165656685829163,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1025193177,354,looks like many of the pytest features don't work well with unittest test classes either. some of the broken tests were because inlinecallbacks methods eat exceptions if used in a unittests.testcase class. working on ripping that out completely.,0,0,0,0.5004523396492004,0.6197932362556458,0.9625672698020936,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1026261440,354,i've skimmed through most of this (it's too large to review too deeply) and it looks fine to me. using pytest and removing some dependency on twisted seem like good things to me. i'll defer to -- if he has any issues with this. lgtm,1,1,1,0.8276020288467407,0.5969313979148865,0.947431206703186,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1027523993,354,"my commits were not in meaningful chunks, and mostly had bad messages, so i squashed this down.",-1,-1,0,0.704913318157196,0.7588019967079163,0.5063455700874329,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1029063441,354,"you know i recently watched a [a link] where he described a new python core developer arriving and refactoring the entire test suite, causing unintended headaches... i'm not saying this is not a good idea, it's just a notable coincidence :stuck_out_tongue_closed_eyes:",-1,-1,-1,0.9819964170455932,0.8946285247802734,0.8480886220932007,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029120409,354,"i'm happy to step back on any of these things if i'm stepping on toes or it's likely to break stuff. i'm exactly that guy that's exited to contribute that hettinger was talking about, and i do think i'm making improvements, but let me know when i'm trampling on your flower garden. :beaming_face_with_smiling_eyes: i have noticed several bits where the test/docstring doesn't do what it says on the tin, but that are delicate because there might be places depending on them working the way they do, even if the current way is 'wrong.' specifically on these test rewrites... there is stuff that doesn't work right when mixing unittest and twisted.trial into pytest. i think it's worth it to excise those tools in favor of pure pytest.",1,1,1,0.9619654417037964,0.6935883164405823,0.9832028150558472,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029466121,354,"this is fantastic work, thanks. i included a modified version of your pr description in the commit message, it's really useful!",1,1,1,0.9930921792984008,0.9960489869117736,0.9974642992019652,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1040843284,376,-- this might help/be related to [a link] . either way it is an improvement since ipv6 was not supported before. if you guys could review thanks!,1,1,1,0.9350481629371644,0.9707463979721068,0.9910805821418762,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1040893174,376,"ah, ok i thought maybe it had to do with ipv6 having letters possibly or something like that. i'm not very good with naming but updated for part of the change you and suggested. thanks guys!",1,1,1,0.9848848581314088,0.9932215213775636,0.9942557215690612,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1041403701,376,-- honestly i don't follow half of what you said in reviews.,-1,-1,-1,0.8972258567810059,0.9272042512893676,0.9026448726654052,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1041406329,376,it was a quick review but i can clarify where you need,0,0,0,0.9324966073036194,0.9052165150642396,0.95375257730484,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1045329134,376,-- thanks!,1,1,1,0.9447779655456544,0.9469540119171144,0.9845787286758424,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405041974,204,"i have a dilemma as to whether to include the credits and/or license or not because they contain relatively a lot of information that i am not sure if it is necessary to include. of curse, it's still under develop, but mostly because of this dilemma. the main `about` window is finished and only needs a toolbar icon.",-1,-1,-1,0.9138319492340088,0.8097870945930481,0.9714847803115844,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405082674,204,"the about should contain a short amount of information as it is a pain to maintain otherwise. we have all the detailed information in the source code, which is sufficient for now. therefore i would credit writing the application to the deluge team and leave out the translation authors (it's pretty outdated anyway). the licence can be something like `gpl v3.0 or later`. properly including it all in documentation might be useful in future as a central resource to point to.",-1,0,0,0.5316009521484375,0.7113569974899292,0.943004548549652,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,405082695,204,could you include a screenshot?,0,0,0,0.9873199462890624,0.991454005241394,0.9939420819282532,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405090220,204,"connected | not connected -|- ![a link] | ![a link] as you can see, i tried to make is as close to the one in the gtk. this is why i wanted to know about the credits and license.",0,0,0,0.8560691475868225,0.9744648933410645,0.9697534441947936,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405722542,204,any ideas why the tests are failing?,0,0,0,0.924763798713684,0.9135512709617616,0.9398663640022278,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405733846,204,"seems the new javascript has broken slimit: [a link] on 17 july 2018 at 21:48, djlegolas wrote:",0,0,0,0.7984123229980469,0.8433516621589661,0.9925661087036132,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427274129,204,"ok, i want to finish this feature... --, is it fine if i'll remove the credits window, and set the license to [a link] file?",0,0,0,0.977143406867981,0.7849147319793701,0.9124159216880798,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427281084,204,yes removing credits is fine and i don't think we need the license one either. i don't see it being of use for end-users.,0,0,0,0.9636738896369934,0.9436144828796388,0.9825596809387208,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427375876,204,"fyi: if you rebase on develop, install [a link] and use: pre-commit run --all-files that will format the python with black and js with prettier. to have it run on the git commit files everytime using git hooks, use the install command: pre-commit install i am writing some docs to better explain the setup ;)",0,1,1,0.6264910697937012,0.9909653663635254,0.9776212573051452,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,427425086,204,"hmm, --, looks like something is missing... when i tried running it, i got an error: [code block]",-1,-1,-1,0.8037956953048706,0.6456248760223389,0.8033337593078613,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427445953,204,yeah i only just added today: 0548bdb6 :stuck_out_tongue_closed_eyes:,-1,0,0,0.9795281887054444,0.9795204401016236,0.9813913106918336,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,427613735,204,"lol, ok. :face_with_tears_of_joy: 2 things... 1. is there any quick way to get the connected server hash id? i want to get its version number, but can do so only with `deluge.client.web.get_host_status`, which requires the server id... 2. do you know who controls the bots of github and trac on irc? they are both out of the main room and, therefor, no info is shown when publishing stuff.",1,1,1,0.967409372329712,0.9916029572486876,0.9934428930282592,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427680511,204,1. the `host_id` is not readily available other than parsing the `web.get_hosts` for `host_id` with `connected` status. if you are looking for the version then using the rather obscure rpc method `client.daemon.info` returns the version of the currently connected daemon. 2. if you mean drizzle bot that's a deluge service that i maintain... i haven't been on irc recently so didn't notice that need to be registered to join the channel now. the bot is now registered and hopefully will spam the channel once more ;) i think the github one was gazpachoking's but that's just a guess.,0,1,1,0.7342323660850525,0.9870336055755616,0.9226534366607666,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,427685901,204,"ok, interesting, but i didn't find a way to get this method to execute through the webui. am i missing something? is there another way to send rpc commands? currently, i'm doing something similar to what the connectionmanager is doing (get the list of all configured servers and for each on of them, check if the client is connected to it and get its version).",0,0,0,0.9294357895851136,0.6669002175331116,0.9616100192070008,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427692017,204,ah it looks like some extra methods won't be allowed by the `json_api` because they are not actually in the rpcserver registered methods list. it probably would make sense to export a version method in daemon: [code block],0,0,0,0.9708096385002136,0.98740953207016,0.9903828501701356,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,427732498,204,"yep, this will do the trick. btw, do you have an idea for an icon to add to the `about` button itself?",0,0,0,0.9681683778762816,0.9615626335144044,0.9701626896858216,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,430182874,204,what do you think about using the deluge icon and text on the left-hand side as the button to show about?,0,0,0,0.9834169149398804,0.9897721409797668,0.9851018190383912,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,430225581,204,like this? ![a link],-1,0,1,0.5480209589004517,0.9214733839035034,0.5030695199966431,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,430249215,204,actually mean making deluge clickable and popping up the about dialog,0,0,0,0.979171097278595,0.8539940714836121,0.9717196822166444,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,430309003,204,"ok, i think all of the work is done.",0,0,0,0.976975440979004,0.8953427076339722,0.9260877966880798,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431675849,204,"thanks, merged",1,1,1,0.775201141834259,0.8506512641906738,0.800144374370575,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1023694782,352,this would probably break plugins?,0,0,0,0.9099736213684082,0.9288125038146972,0.9554340839385986,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1023704726,352,"by the way, here is some history when i went down a somewhat similar path in the past: [a link]",0,0,0,0.971601903438568,0.982205331325531,0.966396987438202,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1023711809,352,"hmm, probably right, i'll look closer at that. they can access more stuff than just the ``ed methods, right? i'll take a peek at that. i'm thinking given these issues, maybe the nicest compromise is to make a decorator that calls ensuredeferred, and wrap any converted functions in it, just like we would with inlinecallbacks. it wouldn't give us all the advantages of async/await, but it would ensure full compatibility with everything existing, while letting us use that syntax within the wrapped functions. i don't think that method has any disadvantages compared with inlinecallbacks either.",0,0,0,0.8937913179397583,0.8942416310310364,0.8511279225349426,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1023818698,352,"okay, i added the ensure_deferred decorator, which will let us keep using the wrapped async functions as normal functions returning deferred. i'm investigating whether there's something clever to do that will dynamically remove the wrapping if called directly from another async function, but it might be a bit too magicy, (or not work at all,) we'll see.",0,0,0,0.9399965405464172,0.9472997188568116,0.9655736088752748,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1023903263,352,"i may have just created a best of both worlds situation. i modified the `ensure_deferred` decorator to only call `ensuredeferred` in situations where the function was not being used like a coroutine function. this means in works exactly like an `inlinecallbacks` function, _unless_ it is called from within another async function, in which case it acts like a plain coroutine. this means in areas where we've converted the whole chain to async functions we'll get nice tracebacks, without breaking compatibility with places still using legacy twisted deferred syntax. i'm really quite excited with this solution, but it probably needs a bit more testing before i can tell if there are any weird idiosyncrasies that make it sub-optimal. -- how do you feel? example: [code block]",0,1,1,0.9305802583694458,0.9916056394577026,0.9893006682395936,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1023906260,352,"hmm. might be some issues still. gtkui doesn't seem to be working. edit: oh, that might just be from importing reactor too early and having the default one installed instead of the gtk one. edit2: yep, that was the issue.",0,0,0,0.8827126622200012,0.4999444484710693,0.8581920862197876,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024323283,352,"i 'm pretty excited about this method, i'm hoping there are no caveats i'm failing to see at the moment. a couple questions though: - location: is decorators the right spot to put it? i guess so.. - naming: it isn't really ensuring the result is a deferred anymore, i'm not sure if there is a better name.",1,1,1,0.6493055820465088,0.9593244194984436,0.9897756576538086,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024437407,352,"this pr kind of scares me. i feel like it's warping the definitions of both coroutines and deferreds into a bit of a mess that might not be easy to reason about. being able to call a ""coroutine"" without await seems weird to me. there is also no async loop created, so how would a regular coroutine even work? are you planning to install the asyncreactor?",-1,-1,-1,0.9835488200187684,0.983098328113556,0.9827191829681396,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024483689,352,"async/await is just a language feature separate from asyncio. i'm not involving asyncio at all in this pr, this is all still pure twisted. twisted allows using the async/await syntax, which under the hood works almost exactly the same as using inlinecallbacks on a generator function. [a link] once an async function is wrapped in ensuredeferred, it can feel free to call other coroutines that aren't wrapped in ensuredeferred, as the outer most wrapping will handle the whole thing. this is desirable, because wrapping every level of coroutines in ensuredeferred mangles tracebacks, (not any more than they are now, but that is one of the nice benefits of async/await vs inlinecallbacks.) for us though, since we have a lot of places calling in to our functions, including plugins we might not control, leaving unwrapped coroutines would break any place that called it without the await keyword. the magic i've added here allows coroutines to be left unwrapped by ensuredeferred _only_ in the case where it's being called from another function that already has that wrapping. when used outside of an `await` statement, the ensuredeferrred wrapper is automatically added, making the coroutine into the excact same thing as an `inlinecallbacks` wrapped generator. i'm still not 100% sure there aren't side effects, i'm trying to trace down the ci failures now to see what's going on with them, but at the moment i suspect it's because i've subtly changed the logic of component.start, and nothing to do with the new syntax.",0,0,0,0.8881962895393372,0.91912180185318,0.9712608456611632,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024492113,352,"in this case, it turns into the same thing as running a function that returns a deferred. ```python def a(): yield defer.succeed(1) print('doing something') a() async def b(): await defer.succeed(1) print('doing something') b() # acts exactly the same as a()",0,0,0,0.9831557273864746,0.9768298268318176,0.9882348775863647,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024617769,352,thanks for the clarification. i guess i don't understand why the example with b() is preferable to a()?,1,1,1,0.7784780859947205,0.8247620463371277,0.9493208527565002,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024626240,352,"a couple things i was shooting for: 1. get closer to a syntax where we could one day switch from twisted to asyncio 2. await is a bit nicer than yield for a few things, for example you can't: [code block] or [code block], but you can with await 2. improve tracebacks. with inlinecallbacks, (or regular callbacks,) the traceback doesn't show you the line that called `yield a_deferred` as the caller. when chaining awaits, it does. of these, 1 and 2 can be achieved by just creating a decorator that calls twisted's ensuredeferred which we wrap any functions we convert to async in. 3 is only achievable when the chained awaits only have the outermost coroutine wrapped. for this, we either need to convert everything at once, including plugins, or use something like the corodeferred that i made.",0,0,0,0.6963256597518921,0.7396623492240906,0.6595166921615601,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024642018,352,"man, i'm really struggling to figure out what's up with the ci failures. it looks like something happens to the daemon where it doesn't write the localclient account to the auth file. it doesn't happen every time though, and i can't figure why. also can't figure how my current changes could cause this.",-1,-1,-1,0.9606778025627136,0.9484780430793762,0.9535436034202576,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024655648,352,perhaps you could write some tests for corodeferred and the wrapper?,0,0,0,0.9880650639533995,0.9942041039466858,0.991483747959137,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024815648,352,"[a link] i should probably stop making new branches. :squinting_face_with_tongue: perhaps the usage in those tests makes it more clear what i'm going for, and how it works? i'm sure there is other stuff to be tested, but can't figure it right now.",-1,0,-1,0.8046230673789978,0.9414539337158204,0.6583240628242493,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1024817640,352,"yeah, i was just suggesting it as a way to hunt down any edge cases that may be causing the ci failures.",0,0,0,0.967348575592041,0.881396472454071,0.98413348197937,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024835976,352,"man, the converting componentregistry.start is really stumping me. i tried just regular inlinecallbacks and it has the same issue of sometimes not working.",-1,-1,-1,0.9705257415771484,0.977329432964325,0.92644464969635,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024844177,352,"i finally figured it out. the components need to be loaded in a certain order which isn't encoded fully in their 'depends'. i don't know exactly which order breaks things, but when i forced them to go in the same order as before i made any changes to the start function (by making each one depend on the next) it works every time.",0,0,0,0.9658907055854796,0.955653965473175,0.813469409942627,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024926487,352,"and now i think i actually understand _why_ the order is important. the tests wait for the message 'finished loading' to consider the daemon started. this means only that the torrentmanager component has loaded. it doesn't guarantee that the authmanager and rpcserver has started, so if the client tries to connect before they have started there are issues. edit: upon further investigation, it's just the authmanager not being started before the tests continue that messes things up. the rpcserver actually starts on init, and never needs the component to actually be 'started' to work.",0,0,0,0.7142147421836853,0.9676216244697572,0.8617969155311584,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1027599507,352,"closing this. i'll do similar refactoring, but on top of maybe_coroutine pr if/when that goes in.",0,0,0,0.988688051700592,0.9849348068237304,0.9908103942871094,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,403991746,201,"the default behavior is a browser-like https handler, so this should be covered by default. but to be sure, do you know of any site that uses cloudflare so we could test?",0,0,0,0.987173318862915,0.9906219244003296,0.9938296675682068,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,404098153,201,"from that ticket, i think [a link] is still a usable test case",0,0,0,0.9799706935882568,0.9789757132530212,0.9773685932159424,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,404160727,201,"oh, ok. `seo.com`'s works only with browsers with sni support. so i added it to the icon tests as it will show us the code ability to use it and download a file from it. as you can see, the test passes.",0,0,0,0.9463077783584596,0.8968237638473511,0.8675305247306824,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405085695,201,thanks! merged with some minor changes applied: c7e61f8c3461d59b5,1,1,1,0.966843843460083,0.9857001304626464,0.9842516183853148,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030711888,364,seem as there is no way to test on python3.6 because there is no libtorrent binding to 3.6 for windows or linux...,0,0,0,0.8445917963981628,0.9093843698501588,0.9894941449165344,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030714505,364,"imo 3.10 has been working nicely, i think we could change this from 3.7-3.10.",0,0,0,0.8036783337593079,0.9534627199172974,0.6999777555465698,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030882530,364,"i'm thinking about upgrading the minimum python version, again, to 3.7 and run the ci on all the supported versions (3.7-3.10)... -- what do you guys think?",0,0,0,0.9557801485061646,0.7299695014953613,0.9783459305763244,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030898094,364,"i'm :thumbs_up: on dropping 3.7 support. not sure when we'd want to fit that in in terms of versioning and releases. in terms of this pr, i'd say testing more than one version is an improvement, regardless of whether it hits every currently supported version. i'm also :thumbs_up: on adding in other versions up to 3.10",-1,0,1,0.517510175704956,0.7550749778747559,0.5433883666992188,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,1030925363,364,should also maybe add [code block],0,0,0,0.9870091080665588,0.9932528138160706,0.9948688745498656,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030926702,364,"while testing, it helps having everything fail fast. but will add that flag later, thanks",1,1,1,0.9773984551429749,0.9561022520065308,0.9783811569213868,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030928157,364,3.10 needs pytest >= 6.2.5 i think.,0,0,0,0.9813806414604188,0.9924243688583374,0.9893656969070436,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030929311,364,"[a link] pytest == 6.2.5 ; python_version >= '3.10' pytest != 5.2.3, < 5.4 maybe",0,0,0,0.9833022952079772,0.9894098043441772,0.9943696856498718,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030930034,364,"no, i'll just drop the limits from `pytest`... it worked on my local windows and ubuntu, both with python 3.8.",0,0,0,0.987616002559662,0.9857725501060486,0.9933626651763916,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030932760,364,"to sum this up: * testing python versions 3.7-3.10 * switched `libtorrent`'s installation source to `pypi` * dropped `pytest` version limits, current version is `7.0.0` for python 3.10 (thanks for the heads up)",0,1,1,0.499199777841568,0.7446804642677307,0.9152470231056212,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1033068452,364,"i am noticing a few things we use like twisted in a coming version is droping python3.6 and pyinstaller, pillow already has, could probabbly drop 3.6 our selves as well. if it was only pyinstaller then id say no but deps are starting to drop as well. at least on the windows side requiring 3.7+ only excluded windows xp i think which nobody should still be using so not really a big deal imo.",-1,0,0,0.7761405110359192,0.8447036147117615,0.5627719163894653,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,216035118,83,note to self: this fix should be backported to 1.3,0,0,0,0.982028603553772,0.9892790913581848,0.9879128336906432,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,217576929,83,could you please rebase with latest `develop` branch and fixup into a single commit. see [a link],0,0,0,0.9838797450065612,0.9931469559669496,0.99584299325943,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,217677485,83,"i looked at that link you sent me, but it doesn't talk about commit messages at all.",0,0,0,0.9478089809417723,0.9694342017173768,0.9833433628082277,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,217704453,83,that's because i moved the text yesterday to [a link],0,0,0,0.9838677644729614,0.993882656097412,0.9938092827796936,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,218065421,83,alright. commit rebased and commit message cleaned up. let me know if anything needs to be improved.,0,0,0,0.932025909423828,0.9605810046195984,0.967307984828949,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,218090873,83,"i'm afraid the commit title is not correct, it shouldn't start with a dash `-`. it also doesn't follow the same convention of existing [a link]. i did leave a hint when i renamed the title of this pr as to the wording so something like this would be more appropriate: `[autoadd] fix watch directory accepting torrent files with uppercase extension` as mentioned in gittips, you don't need to mention the log line addition as it's self-evident.",-1,0,-1,0.7876550555229187,0.8237767219543457,0.8281055092811584,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,218661538,83,reworded again.,0,0,0,0.980311393737793,0.9437070488929749,0.9835736751556396,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,218815746,83,merged 50d504a38f57684e,0,0,0,0.9830480813980104,0.9794791340827942,0.9897454380989076,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,164834865,50,fixed a new issue that (for some odd reason) appeared in sessionproxy tests due to time.sleep calls. starting to look mergable i think.,0,0,0,0.9359565377235411,0.8578987121582031,0.7900518774986267,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,446122590,228,"can you fix the failed test (regarding coding style)? in addition, please try to add a test for this.",0,0,0,0.987868070602417,0.9897470474243164,0.9954480528831482,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,446626530,228,"thanks for the feedback . a few minor questions: 1. unit test. i didn't find anything related to console commands. based on the naming ""test_ui_console_fields.py"" should cover something, but it's almost empty. did i miss something or i just need to write it from scratch? 2. coding style. based on travis log i see that black formatter failed. is it the right one? should i run it with default config? for example, in their [a link]. i didn't find anything about this formatter at [a link] thanks",1,1,1,0.9113994240760804,0.966666579246521,0.9784210324287416,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,446678831,228,"i'll start with the failed test: the current coding style is new and is being validated with a dedicated test. it is something -- added some time ago. the best way to check this, is to install `tox` and run `tox -e lint`. it will run the same test and, iirc, modify the file as needed (note: don't run only once, but after each fix). about adding new test, you are correct.. there are no tests for the console ui... so just start one from scratch, and test only what you added for now. you can ask here for help. and look at the [a link] docs. finally, you closed this pr :grinning_squinting_face:",0,0,0,0.9234515428543092,0.8697856664657593,0.9218774437904358,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,449819698,228,"a little update, there are tests for the console. look at the `test_ui_entry.py` file. in it there are most of the ui entry tests, including `consoleuibasetestcase` class, which tests some the console's functionality.",0,0,0,0.987064242362976,0.9880898594856262,0.9730530977249146,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,449869359,228,"thanks for the hint and sorry for the delay with this pull request. i was busy with some personal stuff. i've pushed the tests to make sure the parser works correctly. but i'm still struggled with the entire flow test. i want to write a test which ""simulates"" torrent download and checks that the file was moved in the specified folder. once i find a way to do it, i suppose it should be ""enough coverage"".",-1,-1,-1,0.9879278540611268,0.9912832975387572,0.9808597564697266,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,452417917,228,"hi , i've fixed inheritance and naming. but it looks like i can't find a proper way to make an end to end test. things i have tried: 1. directly call `handle` method of `add` command. in this case i'm getting _""consoleui component is not registered""_ error. event if i register it (mock?) i can't do anything since `add` command requires daemon. 2. in `test_ui_entry.py` we have `test_console_command_status` which works with daemon. i was able to make a similar one to test 'add' command but this command returns only ""torrent added"" without any id/hash. due to this fact i can't validate the file in the way it validated in `test_add_torrent_file` from `test_core`. 3. in addition to point 2 i've tried to run `status` command right after `add` in one method. (i was hoping to grep hash from there). it also caused errors. (am i correct that current test structure supports 1 console call per method?) could you please advise how to test it? thanks",0,0,0,0.8697460889816284,0.9440526962280272,0.6693057417869568,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,452420910,228,build failed but i didn't change plugin configurations...,-1,0,0,0.5889846682548523,0.7545835375785828,0.9816222190856934,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,452908155,228,"i was trying to implement this myself, and as you wrote - there is some kind of problem. i'll start with your 3rd point: there is a way to concatenate commands, and it's done by using a semicolon, `;`, between the commands and wrapping the entire phrase with apostrophes. as for the 1st issue, i agree with you, as it will be best to use the daemon itself. and now for the final part, the 2nd: as i stated in the first line, i tried to solve it too. for now, i wasn't able to solve this yet. during my many tries, i tried sending only one command. the structure of this command is: `deluge-console ""add --completed /tmp /some/path/to/torrent/file.torrent ; manage torrent-hash-id move_completed move_completed_path""` this should have added the torrent and report back the values configured via `--completed` arg. but i received only the `torrent added!` message without the info i requested. i suspect the problem is that the `manage` command being processed before the torrent was added, so i tried to split the command into two parts, the add part and the testing-values part. but this gave me some other errors which i wasn't able to solve, yet. currently, when running this test, it throws a `componentalreadyregistered` exception about `consoleui` when reaching the second `yield self.exec_command()` call. --, , - do you guys have any recommendations, ideas or suggestions? this is what i have done until now: [code block]",0,0,0,0.8654811978340149,0.6569728851318359,0.8473783135414124,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,453530362,228,"ok, i managed to run the test by adding a call to `status` command between `add` and `manage` commands. in addition, i added a test for the `add` command itself. changes pushed it to fork. i'm sure it's not the best way to handle this, but for now it will do. i hope :rolling_on_the_floor_laughing:",1,-1,1,0.4711871445178985,0.5616304874420166,0.9773338437080384,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,453855070,228,thanks ! i've checked the tests locally - all green. i'm only getting a warning: `common.py:270: pendingdeprecationwarning: dist() and linux_distribution() functions are deprecated in python 3.5` my local env is on python 3.6.7,1,1,1,0.9761981964111328,0.9939709901809692,0.9927198886871338,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,453856012,228,"build error, again. `internalerror> pluginvalidationerror: unknown hook 'pytest_namespace' in plugin ` is it because of my changes?",0,0,0,0.950990915298462,0.9765057563781738,0.9889802932739258,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,454109175,228,"1. yeah, `platform.dist()` and `platform.linux_distribution()` were marked as depricated in version 3.5 and are will be removed on 3.8. 2. it is an issue with `pytest-twisted` version `1.8.0` with `pytest 4.1` . we will have to wait till the next release to run the tests here.",0,0,0,0.9699885845184326,0.9938061237335204,0.9892348647117616,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,454123510,228,"ok, let's wait. thanks!",1,1,1,0.9706820249557496,0.9949276447296144,0.9929850697517396,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,481831520,228,-- what do you say? want to merge this?,0,0,0,0.9641280174255372,0.9857618808746338,0.9830762147903442,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,483328519,228,"it looks good, i will get around to reviewing and merging :+1:",1,1,1,0.9826415181159972,0.9879569411277772,0.9965356588363647,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,491545712,228,thanks for this and the test :+1: i have made some changes (-m instead of -c) and merged it: f885edd7fc85f,1,1,1,0.9820305705070496,0.9904578924179076,0.9951120018959044,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219020900,93,"perhaps i should simply update core attribute in tm.on_alert_external_ip: `component.get(""core"").external_ip = external_ip` rather than register event in core...?",0,0,0,0.9892100691795348,0.9954622387886048,0.9867851138114928,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219092510,93,"i think that you're currently doing it the right way. directly updating the core attribute would feel like it breaks encapsulation. on fri, may 13, 2016 at 4:43 am, calum lind notifications.com wrote:",0,0,0,0.9328368306159972,0.9666120409965516,0.9427580237388612,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219305167,93,would it not be wise to maybe add a prefference for showing this? what if someone has other plugins that use status bar and now they have to make the window bigger to see them or default ones they do want get pushed away. just a thought. you also might be thinking well then just make it bigger but what about the users on small screens like the change to the add torrent dialog was for.,0,0,0,0.9625621438026428,0.8679201602935791,0.9797547459602356,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219307035,93,"at one point i thought that including a preferences page for the statusbar would be a good idea. the user could toggle on/off the various indicators/items. maybe that is what we need? on sun, may 15, 2016 at 12:23 pm, doadin notifications.com wrote:",0,0,0,0.7410167455673218,0.9455676078796388,0.8938882946968079,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219307893,93,there is certainly an issue with the statusbar items setting the minimum width of the main window so a toggle for statusbar items or something similar would be nice. there should be an existing ticket that covers this issue.,0,0,0,0.9771959781646729,0.9896525740623474,0.9890223741531372,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219310062,93,this is the existing ticket: [a link],0,0,0,0.983095109462738,0.984592854976654,0.9959425330162048,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,219327489,93,"ah ok. yea i think like a prefferences page for status bar to add/remove items would be nice. maybe something simple like if checks to the gtk config around the statsbar create item or something more complex like status bar items registering like plugins. idk. glade to know its being thought about, though that ticket has been open for quite some time now lol.",1,1,1,0.9802432656288148,0.9926242232322692,0.9824624061584472,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214394493,62,a different question instead... could it perhaps be confusing using `argparse` and `optionsparser` is the class in console?,0,0,0,0.9533706307411194,0.9805552363395692,0.9752177000045776,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214450845,62,"yeah, can fix that",0,0,0,0.981836199760437,0.9790334105491638,0.9787595868110656,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214475652,62,added markup to help strings,0,0,0,0.9855255484580994,0.9853019714355468,0.9949883818626404,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,215887139,62,there are the two tickets in 1.3.13 milestone that could also be addressed in this pr. here is a query of outstanding [a link] oh and a pylint [a link] :d,1,1,1,0.5516037344932556,0.8165193796157837,0.9859289526939392,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,256928213,62,still not working with my [a link] and it looks like it because `sidebar_width` is a missed key in my config. [code block] if i delete `console.conf` i get this: [code block],0,0,0,0.892428457736969,0.9807575941085817,0.9714648723602296,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257090182,62,the is a bug when switching filters in sidebar the topmost torrent gets hidden by the column header so you need to scroll up one.,0,0,0,0.8321166634559631,0.7042422294616699,0.9214643836021424,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257093512,62,"i think it would be an improvement to change the selection and popup menu keyshortcuts. - use `enter` to activate filter in sidebar - use `spacebar` to mark selections e.g. torrents a few other notes: - the deluge version in topbar is unnecessary, creating an 'about' popup would be useful. - the 'current filter' text in topbar is not well placed currently and a bit superfluous. it would be better placed in the area aboved the sidebar. in fact even better is if the sidebar is hidden and revealed when pressing `left-arrow`. something like this: ![a link] - need an option to automatically connect to daemon. - need a way to start console in commandline mode. help dialog issues: - pressing `h` in certain areas does nothing. e.g. connection manager, sidebar - there is no mention of use `spacebar` in help. - the help guide is overly verbose. (i can rewrite it if needed) - while in `help` you cannot open other dialogs straightaway. e.g. preferences bugs: - [x] pressing `o` on a torrent resulted in this error: [code block] there are other ui layout changes needing porting over from gtkui but they can wait.",0,0,0,0.928986430168152,0.98458069562912,0.7536462545394897,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257094677,62,other than the bugs and anything trivial the above changes can be detailed in a new ticket for future work so this pr can be merged sooner rather than later. i simply thought i'd record my train of thought while it was fresh :),1,1,1,0.972662389278412,0.9896695017814636,0.9854324460029602,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257119423,62,"i don't object to any such changes, however, simply changing to enter in the if test doesn't work, so i didn't look any further at how to solve that. however, it's worth to note that my idea is that, with pr6, it will be possible to have multiple states selected in the filter, which makes sense to use the space key for? maybe enter key would select currently marked and deselect any other currently selected? no, i've fixed and reworked some the help text, but there is probably much left to be fixed. yeah, i've reduced it somewhat, but it can certainly be refined some more. the help text does say ""these daemon connect options will be used for commands, or if console ui autoconnect is enabled."" but i haven't seen any _autoconnect_ functionality implemented for this. true good idea. wouldn't call it bugs. more like non-implemented features :-) also fixed bug when switching filter",0,0,0,0.8674470782279968,0.8339476585388184,0.9427806735038756,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257148933,62,created new tickets: help dialog improvements: [a link] sidebar: [a link] startup options: [a link],0,0,0,0.953231930732727,0.9857136011123656,0.972342848777771,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,436420308,224,"i would like to do more to improve the protocol, but it would require a bit more work that i'd like to wait to do until after the conversion to asyncio. i wanted to get these minor changes in before a 2.0 release though due to compatibility concerns of doing it post-release. i think it's reasonable to expect a break between beta releases. the one major change i wanted to make was to introduce a handshake to the protocol on connection where we could exchange protocol version support between server and client, which would be used to negotiate the highest supportable version. i'll fix up the remaining comments tonight.",0,0,0,0.8601009249687195,0.9421798586845398,0.9018977880477904,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,437821591,224,shall i merge this?,0,0,0,0.9825333952903748,0.9888712763786316,0.994688868522644,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,437934865,224,"yea, sure.",1,0,0,0.5835376977920532,0.7919725179672241,0.9515849947929382,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,438122943,224,pushed in 043344b986013212a2ad5f51bc967810c5200c0c,0,0,0,0.9866135716438292,0.9848089814186096,0.9931309819221495,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,557839558,224,i am a bit late for some feedback however please note that there is an important difference between this protocol and the one originally used ([a link] * it is not possible anymore to encode and compress in a stream-fashion because the encoded length must be transmitted first (and thus known in advance) this means clients will be less efficient with transmission of large requests as they will use more memory. it can be a sensible problem for embedded devices and similar use cases (single-board-computers etc). also i observe that specifying the size is redundant as it is already guaranteed by zlib and rencode.,0,0,0,0.796156108379364,0.9698842167854308,0.9450677037239076,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,557899309,224,"when did deluge ever support stream-fashioned transmission of messages? and how does the current protocol increase memory usage? the entire message is required before it can be successfully decoded, isn't it? the problem observed with the old protocol was that decompression would succeed even if the couple of last bytes of the message was missing. the result was that the last bytes were assumed to be the beginning of the subsequent message, resulting in failure to decode the message for ever.",0,0,0,0.9458978176116944,0.9873921275138856,0.9848327040672302,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,557903472,224,"the old version i provided url for did support a **client** streaming the messages, regardless of what the server is doing. no, you can start decoding rencoded-objects as soon as one rencode valid ""sequence"" has been decoded, and that does not require the full zlib buffer to be decompressed nor the full rencode message to be parsed. do you have a github issue for reference of this problem? zlib has an adler32 checksum support ([a link] you could have used that.",0,0,0,0.9868566393852234,0.9817829728126526,0.9928532242774964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,558276693,224,"yes. but the new protocol only affects a client transmitting to the server, right? when receiving, the prefixed message length doesn't prevent the client from decoding on the fly, if that is desirable? what exactly do you refer to as a valid rencode sequence? i assumed that referred to a serialized python object (`tuple(message_type, request_id, python_data)`). in that case, you can't deserialize (decode) only parts of it? and how would that be useful anyways? say you're receiving the entire list of torrents (which is the largest message transmitted by deluge server). `rencode.loads` will not succeed until you have all the data transferred for that list. or am i misunderstanding what you're saying? how does that help you to know the length of the transmitted message? you would still need to know when you have the complete message with the checksum at the end? p.s. i don't think we used github at that time. there might be some track-ticket.",0,0,0,0.9806028008461,0.986543595790863,0.9798672199249268,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,558279945,224,reference for the protocol changes in deluge 2.0: [a link] [a link],0,0,0,0.9888463616371156,0.9931989312171936,0.994820237159729,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,558381470,224,"yes. the server has always buffered the message before sending, so nothing changed in its implementation (but now even if one would want to rewrite it, it is constrained by the protocol). please note that this was my whole point (with the new protocol client must allocate a buffer for the whole message and cannot stream it down without such buffers), i mentioned it in case it was missed during the design of the new protocol. my tone should not be intended as a report of a major flaw, but as a report of what specifically is no more possible :relaxed: i was trying to say that at [a link] (`zlib.decompress()`) a checksum verification could have already happened e.g. `rencode.loads` could only be called **after** the adler32 checksum verification happened; however it turns out that python ignores the header that signals the presence of a checksum (those checksum bytes, if enabled during compression, most likely end up in the ""unconsumed input""). but even without a checksum, look at the python code: * zlib decompression ends when a `z_stream_end` is found: [a link] a standard-compliant zlib decompressor would return an error (either when using a buffer mode or streaming), give even stronger guarantees with a checksum, and still allow stream-fashioned i/o. so from what i understood the main problem in [a link] was calling `zlib.decompress()` on a tcp received buffer which could be incomplete; the new protocol makes a **blocking** read for the whole amount so it will solve this. however an alternative solution would have been to: * use buffered i/o * use a `zlib` decompressor which is strict about truncated input and honours the adler32 checksum (the python zlib decompressor does not seem to do so, as it is not checking the header bits for it - please correct me if i am wrong) would buffered i/o bring back the problem of a ""hanging"" reader? in fact problem is always there if one does not set i/o deadlines, regardless of the approach used for reading. you can probably test for this problem by inserting a random long delay within the first few bytes of the header: without a deadline the receiving end will still hang on the header receipt (note that i have not checked the current behaviour). when using buffered i/o one would practically set a deadline on how much to wait idle for a `z_stream_end` (relatively to last byte received) before giving up. i am not saying that it is - now or back then - worth pursuing this approach but i was wondering if it had been considered, as i am generally in favour of more efficient ways of performing network i/o. -- thanks for the urls, really interesting to read about the original discussion - and thanks guys for all the hard work!",0,0,0,0.6636399626731873,0.7976336479187012,0.3702391386032104,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024814775,353,"okay, once more with feeling. starting out at the very basics, with tests, and justifications, in hopes of getting something cleaner going here.",0,0,0,0.8674593567848206,0.6764922142028809,0.9121277332305908,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024815923,353,"man, what is going on with the tests. i didn't touch any deluge code yet in this branch. maybe those need to be refactored before any other work.",0,0,0,0.9277337193489076,0.605435848236084,0.9545037150382996,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1024933820,353,"i think maybe the problem is that my understanding of how the reactor works when used in the test suite is incomplete? something my added test file does messes up subsequent tests, but i'm not really sure what i need to do differently.",-1,-1,0,0.8352801203727722,0.5831800103187561,0.8191699981689453,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1026433220,353,rebased this on top of the new test rewrites and everything it working fine now. was some test weirdness with the mixed twisted.trial and unittests that must have been messing it up.,-1,0,0,0.7242617011070251,0.6863389611244202,0.7512122392654419,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1027598337,353,"i don't want to put too much in to this, because some of the refactoring i want to do with it should probably be in their own prs, so it's easier to review stuff. this one i've just added the decorator, tests and converted over a few existing inlinecallbacks. since this is on top of my test changes branch, here's the real diff for this branch: [a link]",0,0,0,0.9535955190658568,0.9150023460388184,0.9308225512504578,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1027870623,353,thanks a lot for this and the tests pr! i'll try to have a look by the weekend,1,1,1,0.9892548322677612,0.9928905963897704,0.9941142201423644,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030854718,353,"oops, found an issue. wrapping those logging functions was a bad idea, because they get called before gtkui installs the gtkreactor.",-1,-1,-1,0.9375786185264589,0.9874589443206788,0.9743050932884216,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030855213,353,does anyone know why these are wrapped in inlinecallbacks to start with? my inclination is to just make them synchronous. [a link],0,0,0,0.9705169796943665,0.9909576177597046,0.9934173822402954,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030859121,353,there are some odd decisions in old code :shrug: i agree though,0,-1,1,0.8612592220306396,0.9867838621139526,0.6650009155273438,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,1030861089,353,"i made them synchronous. doesn't seem to have any ill effects, and fixed the issue at hand.",0,0,0,0.9484857320785522,0.9166558980941772,0.9770399332046508,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030914980,353,excellent work this should lay a good foundation for the async code!,1,1,1,0.9907733201980592,0.9959041476249696,0.9958016276359558,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,782799103,306,thanks for the feedback. i changed quotes into single quotes and changed the import order; not sure if it's still the way you'd like?,1,1,1,0.8762906789779663,0.9042107462882996,0.9676936268806458,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,927121329,306,"ok, so i changed the code to use these premade functions. it is a bit neater, now.",0,0,0,0.9276259541511536,0.8567425608634949,0.9798913598060608,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,927324895,306,i have made the requested modifications and added the preferences setting for this feature.,0,0,0,0.985792338848114,0.9824073314666748,0.9940464496612548,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,927333881,306,"excellent, thanks! just need to fix the failing linting issues ![a link] if you install [pre-commit](pre-commit.com) then your commits are linted automatically",1,1,1,0.993239164352417,0.99565190076828,0.996977686882019,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,927345745,306,"uh, so, i did install pre-commit, and on my machine, with `pre-commit run --all-files`, i get all passed, but the ci test on github still fails. if i knew why, i could fix it?",0,0,0,0.954301416873932,0.7351760268211365,0.9312793016433716,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,927348900,306,"that is strange, i see this: ![a link] don't worry i'll can resolve it when merging it :+1:",1,-1,1,0.591948926448822,0.9853934645652772,0.9871521592140198,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,933005844,306,thanks for this useful feature!,1,1,1,0.9637950658798218,0.942999541759491,0.9452301859855652,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1001217476,325,thanks for getting this work started. maybe look at using this: [a link] with `--py36-plus` since with can bump to >=3.6 (i know 3.6 eol),1,1,1,0.9158945083618164,0.8718743324279785,0.9766023755073548,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1001222682,325,+1 for using [a link] with `--py36-plus` ; also suggest using [a link] with `--py36-plus` to fix up a few more things.,0,0,1,0.89962238073349,0.9861478805541992,0.9538400173187256,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1001358894,325,do you want to add it permanently to the linting process?,0,0,0,0.9871746301651,0.9929683804512024,0.9909405708312988,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1001633764,325,"what i would suggest is that this pr is wrapped up as is and we merge it. so things to finalise for this pr: * remove urllib imports in preferencesmanager to pass the linting * any tests or reference to python 2 use `git grep -ei ""python.?2|py2[ 0-9]""` then create a second pr that uses pyupgrade since that will be another huge changeset. adding pyupgrade to pre-commit is helpful since if added as a pre-commit `[manual]` stage we can run it quickly with `pre-commit run pyupgrade -a `",0,0,0,0.7726172208786011,0.9780285954475404,0.9862838983535768,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50262731,5,"a quick glance at the diff, i notice the code has a few minor formatting issues that need cleaned up. for the translation text, check `blocklist_pref.glade` file for any strings with `:` at the end and then in the js also add that char so the strings match and set `labelseparator : '',`.",0,0,0,0.9772756695747375,0.9843143224716188,0.9808228611946106,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50277688,5,done! what are the formatting issues? i can correct them and commit the changes.,0,0,1,0.9549164772033693,0.9498835802078248,0.9351855516433716,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,50279659,5,"we use flake8 for the python code, i am not sure the best equivalent for js (try jslint) but these are a few obvious corrections needing made to at least keep the code consistent: indentations should be spaces not tabs and ensure the indentation is correct. there is quite a bit of commented out code, if it's not needed should just remove it. spacing between blocks should be consistent. oh and it makes it easier for yourself if you create a branch for a pull request and rebase it to clean up the commit history.",0,0,0,0.8502717614173889,0.8857011198997498,0.958645224571228,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50279743,5,"ok, i'll fix everything i can and try jslint.",0,0,0,0.9763755798339844,0.9790083765983582,0.9799719452857972,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50287152,5,"ok, i think i have fixed the formatting issues. i ran it through jslint and jshint. there are errors, but related to them not understanding extjs i think. edit: next time i will rebase instead of committing this way.",0,0,0,0.9746538400650024,0.9802866578102112,0.6669533252716064,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50764443,5,"i'm going to nitpick but you still have a couple of indent issues and trailing spaces. your code editor should be able to strip the latter when saving. you've done a good job matching the gtk page, are you able to get rid of the horizontal scrollbar?",0,0,0,0.8367456197738647,0.7560883164405823,0.8994604349136353,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50772526,5,"i can see there are a few issues with jslint as it's a bit over-jealous with changes possibly and jshint doesn't deal with whitespace so i did a bit of investigating and found a handy tool that i think will help you out with consistent whitespace: [a link] if you run codepaint using the style `hautelook` it should produce the results we need: `codepaint xform -p hautelook ""blocklist.js""` i will probably look to update our style guide to use `codepainter`, although a little annoying have to install nodejs.",-1,0,0,0.6483848690986633,0.860190749168396,0.5469622015953064,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,50798837,5,"first of all, thanks a lot for codepainter, great tool! i was going crazy because of the formatting errors. installing node.js it's pretty straightforward, no hassle. removed the horizontal scrollbar and changed a couple of things, so everything was nicer.",1,1,1,0.9927178621292114,0.9942651391029358,0.9961124062538148,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50806108,5,"i think there might be a bug, i had the plugin disabled with a url set and upon re-enabling the url entry field was empty, the info section is filled in properly though.",0,0,0,0.9816324710845948,0.9835702180862428,0.9753345847129822,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50808478,5,"yeah, the same thing happens to me, let me investigate further.",0,0,0,0.96399188041687,0.8355997204780579,0.9752203226089478,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50859586,5,"the bug is fixed, i don't know why, the event `show` is not called when the plugin is deactivated and activated again. i made a little function, to update the config on start even if the `show` event is not called.",0,0,0,0.9581992626190186,0.9080355167388916,0.9738575220108032,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50881725,5,"as the preferences dialog is already open when the plugin is enabled, the show event has been and gone. i can't see any issue with just changing it to `this.on('show'...)` which would then catch the show event for displaying that plugin page. i think that makes a bit more sense and the other plugins probably could do with updating to use that.",0,0,0,0.9569024443626404,0.9687336087226868,0.9836263060569764,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50923497,5,"yes, you are probably right. as soon as i can i'll try it.",0,0,0,0.7591100335121155,0.7692737579345703,0.7938183546066284,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,50976165,5,"you were right, got rid of the new function and changed object that is responsible for the event. i just did not think it through much since i saw that almost every plugin did it that way.",0,0,0,0.9278260469436646,0.9352876543998718,0.9817334413528442,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,51092826,5,"thanks, added to develop.",1,1,1,0.7217800617218018,0.845964252948761,0.7063968777656555,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59012459,19,"is this due to a user not running with administrator privileges? it may not apply here to this case but have you tried to change `magnet_key` to: [code block] it probably is the case we do need to use `hkcu` but we should try first with `hkcr` and then fallback to `hkcu`, using a `try..except` around `magnet_key`. also there is no need to alter the `openkey` line.",0,0,0,0.988643765449524,0.9948877692222596,0.9946944117546082,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59013272,19,yes it is. have not but i could try this. and yes we could also do that as well. and ill change the openkey back then.,0,0,0,0.9697726368904114,0.9534754157066344,0.9863595366477966,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59345146,19,can you rebase to a single commit please.,0,0,0,0.9882918000221252,0.9925014972686768,0.988749623298645,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59345459,19,sure!,1,0,0,0.7571635842323303,0.8522761464118958,0.972205400466919,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,59347569,19,"and sorry i cant get the rebase to work, not sure why.",-1,-1,-1,0.9876143932342528,0.9923239946365356,0.989968717098236,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59353427,19,it should be as simple as `git rebase --interactive develop` and then `fixup` all the commits.,0,0,0,0.9881026148796082,0.9916737675666808,0.9933205842971802,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59396345,19,did that work right? still looks like a mess but the one commit is combined now.,-1,-1,0,0.6236073970794678,0.7988613247871399,0.5703315138816833,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,59399320,19,"no that is not right, if there was one commit, there would be only one commit... i forgot you are probably using your develop branch for your own purposes. in that case you want to rebase off of `origin` (our repo) so: `git rebase --interactive origin develop`. use `fixup` to put all those commits into one: [a link]",0,0,0,0.8941107392311096,0.9549397230148317,0.9499751925468444,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59404763,19,yea i was referring to it making one commit reflecting all the changes made during this pull. and yea that is not working.,-1,-1,0,0.6053531765937805,0.8231945633888245,0.9826663732528688,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,60383631,19,is there anything else i should do?,0,0,0,0.9684336185455322,0.9856625199317932,0.9832383394241332,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,61802052,19,there is a ticket [a link] that means it might require a change to how we set not just the magnet registry entry. i may well merge this for next release but if you could at least attempt to rebase the branch properly so it is one commit.,0,0,0,0.9885059595108032,0.9913260340690612,0.9945313334465028,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,61802649,19,"they say its related but they also say something about the installer and it says ""file association"". just wana make sure its clear we are all talking about the same thing. if it is it might beeasyer to just make the changes here first then make one commit. however its up to you. in order to make this one commit i think id have to remake the pull request. just let me know what you want to do.",0,0,0,0.970416784286499,0.9502273797988892,0.9786142706871032,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,61934199,19,never mind i got the branch to reset its all clean now. ready to be merged.,0,0,0,0.6381887197494507,0.5629653930664062,0.7353190779685974,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,64452544,19,merged: dd8d2c85576a,0,0,0,0.984924852848053,0.9871201515197754,0.9920406937599182,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,233988057,103,pushed working fixes,0,0,0,0.9848082065582277,0.9803680181503296,0.9906724095344543,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254631246,103,applied: c8a3fd72d411,0,0,0,0.9812448024749756,0.9908974766731262,0.9898707270622252,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,642932788,296,the build failure is a lint issue. i'm confident i didn't caused it ;),1,1,1,0.9255829453468324,0.9838204383850098,0.986580729484558,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,643653303,296,did you install and run pre-commit to lint code: [a link],0,0,0,0.9879250526428224,0.9904156923294068,0.996347725391388,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,643789245,296,thanks for your feedback. let me know if there are more issues.,1,0,1,0.7782493233680725,0.5986359715461731,0.944561243057251,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,991947704,296,"thanks for providing changes and sorry took so long to get around to merging, i actually wanted to make a few other changes and not hard link individual forum posts.",1,-1,-1,0.540507972240448,0.9835193753242492,0.9683475494384766,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1028867959,355,-- if it runs into an error replacing that line yes.,0,0,0,0.973940372467041,0.9359198212623596,0.9849479794502258,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028870516,355,"-- if it works then the output looks like ` setting key ""hosts"" to: ('da57dedsrijvgbh38475ty78303c58', '127.0.0.1', 58846, 'localclient', '**********') (of type: ) `",0,0,0,0.9829010367393494,0.9919196367263794,0.9935665726661682,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028871388,355,i am also seeing on line 434 we also print passwords. just noticed so that should be changed too.,0,0,0,0.9824860095977784,0.9872058629989624,0.9915134310722352,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028917028,355,-- would you like it to do something different in the case of fail to replace?,0,0,0,0.9578829407691956,0.9879288077354432,0.981947898864746,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028919005,355,okay i see. so the problem is that the code is not clear enough that we are working around each host being a tuple. however it also doesn't account for multiple hosts so would need to loop the hosts list.,0,0,0,0.9427199959754944,0.9066755175590516,0.9711390733718872,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028922019,355,-- 179 in standalone or thinclient i am only seeing one host. line 434 though yes thats a whole another beast its a dict with lists of host in it i think? that one idk trying to loop and replace not sure i can do that one.,0,0,0,0.5327007174491882,0.5693097114562988,0.9565711617469788,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028926066,355,"the config key `hosts` is a list of hosts, your current change will overwrite them with a single host",0,0,0,0.9883429408073424,0.9929306507110596,0.995154619216919,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028931430,355,"-- um interesting, i am currently seeing: ` 07:08:49.315 [debug ][deluge.config :179 ] setting key ""hosts"" to: ('7b7ecb1276sdgkjvhn342571ee189f6cb1e533', '127.0.0.1', 58846, 'localclient', '**********') (of type: ) 07:08:49.315 [debug ][deluge.config :434 ] config c:\users\bob\appdata\roaming\deluge\hostlist.conf version: 1.3 loaded: {'hosts': [['18ebad274d29540sgjkn234758td20e8ffd0', '127.0.0.1', 58846, 'localclient', 'secret'], ['bf2c65eebb269a7sdklgjbns3473478c7a5dae8144a5', '127.0.0.1', 58845, 'localclient', 'secret'], ['b1e348c24sdjkfvgszjnkb34785387bb65c0b', '10.0.0.4', 58846, 'localclient', 'secret']]} ` with my change and without: ` 07:12:48.900 [debug ][deluge.config :174 ] setting key ""hosts"" to: [('1c09de15asjfvkasnjdk2345782345784111e6ef693e', '127.0.0.1', 58846, 'localclient', 'secret')] (of type: ) 07:12:48.901 [debug ][deluge.config :429 ] config c:\users\bob\appdata\roaming\deluge\hostlist.conf version: 1.3 loaded: {'hosts': [['18ebad274d295sjksfndvnjkl347834587940e8ffd0', '127.0.0.1', 58846, 'localclient', 'secret'], ['bf2c65eebsdjksdffjkn4784334782c7a5dae8144a5', '127.0.0.1', 58845, 'localclient', 'secret'], ['b1e348c2sdjsdjksd3453478478bb65c0b', '10.0.0.4', 58846, 'localclient', 'secret']]} ` so idk it appears to only log one host at that line, if thats intended or not idk.",0,0,0,0.7807300090789795,0.8704667687416077,0.9294097423553468,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1028940769,355,"if key == ""hosts"": print(self.__config[key]) [('c6a33585sdjhkvfdjk3478437886d4f5e1a8', '127.0.0.1', 58846, 'localclient', 'secret')] its only one host as far as i can tell. idk maybe i am just doing something wrong. sorry.",-1,-1,-1,0.9821585416793824,0.991741418838501,0.9902706146240234,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029040044,355,"it's not about what you are seeing just now, it is about what the code is capable of doing. currently deluge starts by setting only one host however there is no restriction to set multiple hosts in the config for this key and therefore the code changes are not correct since it doesn't account for a list of hosts. add to the fact that the log.debug output for the `hosts` key should be a list of tuples not a tuple. therefore this would result in a misleading debug log for the `hosts` key. likely want to do something like this: [code block]",-1,0,0,0.9549428820610046,0.9755921959877014,0.9758862853050232,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1029041672,355,if this is needed in multiple places within config code then might want to consider creating a scrub password function for the hosts list.,0,0,0,0.9848915338516236,0.9934393763542176,0.9935290217399596,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1029471550,355,-- current version of this pr is the best i got.,0,0,0,0.535655677318573,0.9677903056144714,0.9615328907966614,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030603351,355,"i would suggest the following changes. * use a scrab method to do all the work. * can handle both an item and the entire config * changed the default host list structure (from a list of tuples, to list of lists) [code block]",0,0,0,0.9852301478385924,0.9928900003433228,0.9945883750915528,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1030612159,355,"i was just working on this myself including adding tests, i'll incorporate a few of your suggestions, thanks!",1,1,1,0.969782292842865,0.9829880595207214,0.9819451570510864,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2320226411,462,thank you for review. i think i've reflected your comments.,1,1,1,0.8934333324432373,0.9378894567489624,0.962988257408142,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2323165402,462,"so: `test_httpdownloader.py::testdownloadfile::test_download_with_rename_sanitised` is failing.. i did some investigation on python3.12/email, and accoding to: [a link] [code block] and [a link] : [code block] so python `email.message.emailmessage()` assumes `filename=/etc/passwd` as invalid and rejects this to parameter. as rfc2045 says quoted value is valid, and actually if i change [code block] then test_download_with_rename_sanitised test passes. is this okay?",0,0,0,0.7958981394767761,0.9887517094612122,0.9836837649345398,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2327204618,462,ah good to find the test is exercising that code. yeah i agree that the quotes are optional unless using special characters so that change makes sense,1,1,1,0.9558907747268676,0.979796826839447,0.9780184626579284,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2329254738,462,"okay, thank you for confirmation. i've updated the testcase.",1,1,1,0.8739708065986633,0.776532769203186,0.8716062903404236,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2330630015,462,oops... i've modified the last commit a bit (quoting the filename should be in 2 places),-1,-1,-1,0.9660944938659668,0.9335646629333496,0.7609270215034485,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2331387831,462,"now ci seems good, except that ci for windows with python3.7 is failing, but looking at the log, i don't think the failure is related to this pr.",0,0,0,0.842889666557312,0.9361340403556824,0.8123927712440491,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,65401868,16,"same of #14, needs other uis updated too.",0,0,0,0.988334059715271,0.989930272102356,0.9933723211288452,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,65429579,16,added to develop: [2aaae7c6a1bec],0,0,0,0.9852812886238098,0.9921274185180664,0.9945176243782043,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405008582,202,"i would prefer to know why console is sending float and fix it there, it's notorious for buggy code. the function accepts int so lets leave it as that.",-1,0,0,0.7189300656318665,0.6009325385093689,0.5371356010437012,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,405035954,202,probably should add some more cases in the test: [a link],0,0,0,0.9851224422454834,0.989566445350647,0.9915886521339417,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405134329,202,"hmm, i can't get it to crash again, not exactly sure where the problem was coming from. it was totally unusable while it was happening, with the crash traceback being uncaught, and printing out everywhere all over the screen. i agree it'd be nice to know why it was getting a float, but i'm not exactly sure why we wouldn't want the time formatter to also handle floats. (though i also agree the docstring and tests need updated if we do go that route.) btw: this works with floats in the 1.3 branch. `'%d' % a_float` is valid, so i suspect this started happening when switching to `'{:d}'.format(a_float)` style string formatting.",0,0,0,0.8921903967857361,0.7970560789108276,0.6107358932495117,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405262950,202,i suspect you are right on the eta being the thing. i'll defer to you on how you want to fix.,0,0,0,0.9530118703842164,0.9258633255958556,0.979472517967224,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405286995,202,"you wanna scrap this then, in light of 1e6c02a?",0,0,0,0.9862371683120728,0.979627251625061,0.9792528748512268,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405288116,202,i'm still not sure about the idea of supporting both int and float but let's go with your addition of float support too :),1,1,0,0.8216167092323303,0.9103106260299684,0.952279567718506,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,408324554,202,merged,0,0,0,0.972292959690094,0.981477439403534,0.951876938343048,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,496286111,240,"ok, no problem. for now the code will look a little silly as it will check in the relevant places with which version of `libtorrent` we currently run. the only test i still didn't managed to resolve with 1.2 is `test_torrent_error_resume_data_unaltered()`. the `state` of the torrent is `downloading` while the test expects `error`.",0,-1,0,0.8239008188247681,0.6598916053771973,0.6376226544380188,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,496311984,240,that could be a problem where the test is leaving files behind that are being found on next run. i have a branch with a fix for that. could be a file in `~/downloads'?,0,0,0,0.97649085521698,0.9803372025489808,0.9923498034477234,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,497720004,240,"-- can you add lt-1.2 binding to deluge's develop ppa? in addition, there are no files in ~/downloads no ~/downloads.",0,0,0,0.9895560145378112,0.9956094622612,0.9954434633255004,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,499105789,240,"merged with commit details in [a link] yeah it needs a bit of investigation, could be changes to the way resume_data is handled and may not produce the expected error any more. i have skipped the test for now. if you need 1.2 there is a ppa: [a link]",0,0,0,0.9766046404838562,0.984511137008667,0.9908798933029176,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019542832,347,"doh, looks like i did! didn't intend that. i'll recreate i didn't have the tools to compile libtorrent set up, and didn't find anything precompiled for windows. i'll get it set up eventually, just got impatient at the time it was taking to test a one line change. :face_with_tongue: that callback is nested inside get_torrents_status, so i'm not sure how adding that kwarg makes any difference, it should still have access to the args passed in to get_torrents_status. (my kwarg suggestion was to add a kwarg directly to get_torrents_status, but i'm not sure how nice that is, since it could end up conflicting depending on what pas passed in 'keys' argument.) if it isn't a performance concern, i think my initial method is still valid.",-1,-1,-1,0.9523743987083436,0.9450564384460448,0.9887828230857848,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019551013,347,"annnd i figured it out. the answer was in the github action, i forgot to handle libcrypto and libssl dlls. i'll do some testing later tonight.",0,0,0,0.9611735939979552,0.9843130111694336,0.8547589778900146,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019583543,347,there is an official release at [a link]. so just use `pip`.,0,0,0,0.988813817501068,0.9883409142494202,0.995973527431488,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019585676,347,"yep, that's what i ended up doing, but needed the libcrypto and libssl dlls manually copied in.",0,0,0,0.988878071308136,0.9741617441177368,0.9880725145339966,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019649334,347,"okay, actually tested this now, and it works as expected.",0,0,0,0.9740488529205322,0.9306616187095642,0.9138653874397278,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019908563,347,i understand there isn't a scope issue here but it better to be explicit and using `all_keys` denotes that,0,0,0,0.9831209182739258,0.9872699975967408,0.988378882408142,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019911160,347,"hmm that it interesting, i assume just having openssl installed wasn't enough. what steps did you take to resolve it?",0,0,0,0.966316819190979,0.6423852443695068,0.8474345207214355,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019977302,347,"cas, gazpachoking - sorry for butting in, but with py3.8 and up, ""everything"" is about os.add_dll_directory(), as path not used for dll searching anymore, atleast through normal calls. the py-gtk wrappers adds the gtk-containing dirs to that call, from searching your path, without that it wouldn't even load the gtk-ui(and that is added in through gvsbuild patches, so not available in other methods obtained, manual builds and whatnot), but we still have the issue of the ""core-components""(non-gtk) like libcrypto and intl.dll etc(later tried loaded, before dir added from the py-wrappers(in gtk-dir), hence error's in log - still issue btw). either need copy it into ../site-packages dir, so next to the libtorrent pyd looking for it, or add e.g this into ""..\site-packages\deluge\\__init__.py"" or foo.pth file in site-packages(and i use direct path here, just for example): `import os; os.add_dll_directory(""c:/openssl-win64/bin"")` edit: sorry, system32 still used(as only thing from old path lookup-behavior retained) as cas pointed out underneath - so still works for finding ssl if specifically using shinning installer and specifically selecting yes to the additional prompt of if wanting dlls copied also to system32 additionally. bundled/freezed is a non-issue as pyds/dlls all placed into same folder(though my unfreezed bundling needed change from session path addition to said os.add_dll_directory addition at py3.8+).",-1,-1,-1,0.9882436990737916,0.9764397740364076,0.8686886429786682,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020001164,347,thanks for details. so what i can see it that for development as long as openssl libs are in the system it should work (different when bundling the app): a quick search to gather details about dlls changes in 3.8+: [a link] [a link] [a link] the concern here is that the libtorrent wheel has a hard-requirement on openssl that is tricky to install correctly on windows. should it be bundled by libtorrent then? i would consider raising an upstream issue for this :thinking:,1,1,1,0.789639949798584,0.9726775884628296,0.9637109041213988,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020162069,347,how do you feel about inline callbacks? feels cleaner to me to just eliminate the callback all together. i also explicitly added all_keys for the check so it's clear what's happening.,0,0,0,0.963286280632019,0.969203233718872,0.983282506465912,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1020760745,347,"this certainly isn't the right place to discuss, but, is irc active anymore? do we have a discord or something? (and do we perhaps [a link] if there is still activity in irc we can bridge it to discord.",0,0,0,0.6096198558807373,0.978460729122162,0.6852599382400513,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1021254959,347,"i'll squash it and fix up the commit message. not sure if i still have access to git, been a long time. i made it, we can try it out. i don't know how much action there is in irc, i can enable a bridge for now while we are testing. i did the same for flexget, and it seems like over 99% of our action moved over to discord now.",0,0,0,0.5828642249107361,0.772368311882019,0.9628512859344482,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1022450158,347,"okay, squashed and updated message. looks like i don't have access to the git repo anymore. or i lost my ssh key.",0,0,0,0.8347632884979248,0.8611620664596558,0.962346374988556,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1043379326,377,thanks for your contribution but i think you might have missed other places where j and k need swapping since my testing didn't show it fixed on torrent view,1,1,1,0.9254636764526368,0.8431703448295593,0.9281845688819884,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1050566167,377,"-- thank you and sorry. i was hasty initially, not quite properly testing the changes. i'll make sure to test correctly next time (including this pr). the code base is quite overwhelming so i decided to read it and try to make a sense of it. it looks a bit like spaghetti code with different methods can be called from anywhere with anything, i am surprised how you make sense of it. i also am new to concept of rpc and how ncurses work, so that also took me as a surprise when i started reading about them. i'll make sure to ask relevant questions about the project.",-1,-1,-1,0.9507770538330078,0.9923741221427916,0.979319393634796,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1153196539,386,"thanks for hints, appreciated :) sorry i don't really understand much ci yet, so always run local, though same as your yaml, except newest python and few less gtk3 packages etc, but have tested py3.9.12/13 and your gtk3 build instead of mine, before making this pr. i just did again now too. i am thinking that the new gvsbuild setup(not running build.py directly anymore), broke that test-run and hence gtk3 and more specifically gi.repository not built, hence pyinstaller couldn't fail with that error. i checked a few jobs at your own repo and in one the deluge exe's was half'ish size, ""tell-tailing"" this(just scanned the log quick and when saw exe sizes, then didn't check more though, yet atleast), and in another run then it stated no log for freeze, though could be retention-rules was stated. anyway, i'll look more into it later, and if find i have messed up then will correct of-course, but just was preliminary thinking out loud :) edit: hmm, maybe i'm completely wrong, sorry, as said will investigate this later.",1,1,1,0.9895251989364624,0.9945038557052612,0.996331751346588,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1153276453,386,"i'm pretty sure this is correct, and i just got confused in my last post/edit as forgot gvsbuild was used from prebuilt etc - the logs showing pyinstaller 5.1 are producing too small exe artifacts and the runs producing propper size are having no logs though are from a date before pyinstaller 5.0 released, plus i can consistently reproduce here, done countless times in testing e.g. in what to do/exclude etc. let me know if need clarification on something, and please change my wording where needed thanks, or ask me to do it, whatever is easiest for you, and same with if you want readme fix splitted off, e.g. if unsure about the other part, blahblah you know what i mean :) thanks!",0,0,1,0.5966561436653137,0.5705556869506836,0.9680772423744202,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1153312804,386,"i enabled the ci run for this pr and the package size is still lower, likely due to differences between pyinstaller 4 vs 5. in meantime i would suggest we pin pyinstaller to latest 4 version until issues can be properly investigated and resolved.",0,0,0,0.9851129055023192,0.991564154624939,0.9912444353103638,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1153761206,386,"gotcha. i'm very surpiced by that ci run, and will post back if finding something, but i don't really know how troubleshhot ci unfortunetly, so is like doing it in ""blind"" for me, but will post back if finding something. i'll amend-commit/force-push later to trigger ci-rerun and hopefully resolve those errors currently showing - ussually helps but not this time, so will wait some more time. thanks again, appreciated you looking into this as said :) edit: doh, i can run ci-runs myself on a fork! you learn something rew everyday! :) edit2: still smaller-exes(missing gtk3 pickup) using this pr(pyinstaller 4.10). edit3: okay i believe figured it out - i locally use another line to install pygobject/pycairo(getting filename with for-loop), though when using that '--find-links' mechanism as your yaml, then gets pycairo right, but not pygobject and tries build from source, which fails here locally, so probably also on your end, so producing smaller freezes because omiting gtk3 because missing py-bindings, and hence neither hitting original issue i raised here, as gi.repository not picked up because of it. i can fix that('--find-links') here later when have time, but then do you still prefer pinning to last pyinstaller v4.x to fix original raised issue, or the ""excludes"" fix for pyinstaller 5.1 i initially suggested?",1,1,-1,0.9922987818717957,0.99573415517807,0.5735114812850952,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1153828389,386,"for the record something external changed between [a link] and [a link] and pyinstaller 4.10 was released on 5th mar so let's trying going back to 4.9 and see if that works in the meantime. we should really have all deps pinned in ci to avoid these unexpected problems anyway, i will look to resolve that later. thanks for investigating and trying to fix it :+1: the other ci errors are due to github outage: [a link]",1,1,1,0.9730134606361388,0.9116159677505492,0.995154857635498,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1154019245,386,"thanks alot for your post, hints and all! :) the part in edit3 i got fixed, so unless you still want pyinstaller v4.9 specifically, then this is latest v4.x and you can see the gst-missing-typelibs i talked about, which continues here in v4.x, but aborts hard in v5.x, hence previous suggested excludes ""workaround"". edit: sorry here: [a link]",1,1,1,0.9890212416648864,0.9924452900886536,0.9968820810317992,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1154115374,386,"ah gotcha, excellent :+1: we'll go with 4.10 and look to resolve for 5 in future. for reference try to detail the precise error so it easier to understand and search for [code block] [a link]",1,1,1,0.9912174940109252,0.9945336580276488,0.9961973428726196,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1154126567,386,idk if it will matter but you can see the branch i use for the builds i post to the forums which the latest got good feedback here: [a link] and you can see here: [a link] it ran with pyinstaller 5.1.,0,0,0,0.9403553009033204,0.927073299884796,0.870334804058075,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1154186239,386,"not cas, but thanks mate :) i was actually gonna ask cas if we shouldn't ask you how you proceded, though in end didn't need anyway - i did look at a point earlier though, but didn't found your branch :) puzzling me that you can run without --no-index for the py-bindings, as here, both locally and ci, tries to use tar.gz for pyobject and build from source and then failing. i haden't catched that before(as used other command locally, so didn't knew was issue) or else would have posted also that in your thread on forum previously, but for some reason you're not hitting it. anyway, thanks for the help, and cas can ask you further if need more info.",1,1,1,0.989672064781189,0.9945390820503236,0.9951390027999878,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1154199534,386,"cas, forgive me for being complete moron here, but should i just reference `gi.repository.glib.gerror: g-irepository-error-quark: typelib file for namespace 'gst', version '1.0' not found (0)` and/or `36870 error: gi repository 'girepository 2.0' not found. please make sure corresponding package is installed.` and/or `valueerror: namespace gst not available` or full message like you quoted, for one of the modules. edit: took full-message, if is okay then please disregard above.",0,-1,-1,0.5012224316596985,0.713821291923523,0.9793319702148438,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,220827648,99,"just a few points on docstrings: - every line should be finished with a full-stop as they are sentences and makes it clear there is no continuation of the text. - the first line summary of a method should be on the same line as the triple-quote e.g. `""""""this is a module that...` - i was discussing this before that unfortunately sphinx complains about indented lines in the `returns` sections. i don't know if we should comply with it though... so the following is invalid according to sphinx: [code block] and sphinx wants it to be: [code block] to me it seems like a bug that needs reporting but may never be fixed ;) [a link]",0,-1,0,0.6965416669845581,0.5747772455215454,0.8062516450881958,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,220828837,99,"so based on that sphinx example you shared, i realised that for the `returns` section issue we can use `::` to enable the use of indents.",0,0,0,0.9806426167488098,0.988816499710083,0.9930071830749512,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254070668,115,i think until we have made all the other changes that require 1.1 we should wait to do this,0,0,0,0.982126772403717,0.9769657254219056,0.96862530708313,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254073743,115,"i guess we could do it in a way that is backwards compatible, ie, check for **version** and if not available use version.",0,0,0,0.9874160885810852,0.9917268753051758,0.9861093163490297,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254074509,115,it's not worth it as it's only deprecated currently. it can be included in a wider change for develop to support 1.1 with no deprecated methods.,0,0,0,0.8136721849441528,0.9690272212028505,0.968489110469818,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254075400,115,"are we not targeting >lt-1.1 for develop now? the reason i want this patch in, is because i run with a non-deprecated functions libtorrent build and without this the thin client will not start on my desktop.",0,0,0,0.9504491090774536,0.9752330183982848,0.9886621832847596,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254075782,115,"yes but 1.1 is still backward compatible so we don't need to do anything and this pr would force a change for no real reason, meaning everyone else requires updating libtorrent. it makes sense for this change to be part of a larger branch that fixes all the deprecated methods.",0,0,0,0.9803100228309632,0.9881891012191772,0.9885448813438416,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254076367,115,ok i think i understand now that you mean it's a client side issue?,0,0,0,0.9729554653167723,0.9875611662864684,0.9813655614852904,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254077202,115,is it an attributeerror so we can do this? [code block],0,0,0,0.9889744520187378,0.99458509683609,0.9937117099761964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254078413,115,this is a result of the overhaul of ui and i think better fixed in baseargparser: [a link] [code block],0,0,0,0.9771819710731506,0.9842242002487184,0.988931119441986,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254080689,115,it needs to be fixed in 2 places. the other place being _libtorrent.py where we read the libtorrent version to ensure we meet the minimum required version.,0,0,0,0.9874988198280334,0.9929516911506652,0.9929919242858888,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254081175,115,i just installed libtorrent 1.0.10 to see if **version** exists there and it does. it looks like this change should work fine with older versions of libtorrent. [code block],0,0,0,0.97437185049057,0.9859550595283508,0.9294149875640868,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254173151,115,ah it was added in 1.0.7 so the minimum version will need bumped to that.,0,0,0,0.9858623147010804,0.9907022714614868,0.990997314453125,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254173577,115,it will also need changing in these places: [code block],0,0,0,0.9873917698860168,0.992760419845581,0.995402455329895,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254184672,115,i decided to tidy up _libtorrent.py so have opened a new pr #116 with all the relevant changes.,0,0,0,0.9353777766227722,0.9889100790023804,0.9875348806381226,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,356195651,175,"i thought of a bad case that happens when alertmanager is paused. see the comments. if there's a better way to handle this in twisted, please let me know.",0,-1,0,0.7200141549110413,0.8828972578048706,0.8085730075836182,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,356245986,175,"please use the develop or master code, 1.3-stable will not see any new features or changes only bugfixes.",0,0,0,0.979561686515808,0.991208553314209,0.9889016151428224,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,357148249,175,"thanks for your time. unfortunately as i mentioned before, the project driving these prs is tied to private trackers, so i won't be able to meaningfully test this code against a development branch for some time.",1,1,1,0.9242634773254396,0.9063839316368104,0.9381611347198486,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,435009457,175,closing in favour of #221,0,0,0,0.9756717085838318,0.9913641214370728,0.9849380254745485,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,490640598,234,"thanks, merged: 2296906",1,1,1,0.9223100543022156,0.8932555913925171,0.8555205464363098,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1141252464,385,-- with pleasure!,1,1,1,0.9822568297386168,0.9950034022331238,0.9859429597854614,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1153228067,385,thanks --,1,1,0,0.8690392374992371,0.8237021565437317,0.7097707986831665,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1787239495,430,sorry for taking so long. was overwhelmed by a couple of more urgent tasks.,-1,-1,-1,0.9870219826698304,0.993331015110016,0.9935198426246644,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1860737542,430,"-- , would it be possible to create a release ? (could be an -dev or an -alpha release). it would be very useful to be able to use this new features by just installing deluge from pip.",0,0,0,0.9452139139175416,0.9812391996383668,0.9274656772613524,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,56818926,10,merged in 66f2739be7cda3d610,0,0,0,0.9871140718460084,0.9881625771522522,0.9907311797142028,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,121777576,34,"have these been translated with an automated translation tool, such as google translate?",0,0,0,0.9841725826263428,0.9933740496635436,0.994127869606018,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,121778085,34,something like that. with poedit which uses a mix of machine and human translation and already tanslated words from the translation file.,0,0,0,0.9512608051300048,0.9922730326652528,0.9896256327629088,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,121778729,34,i was just testing probably don't want to accept this at least not some of it. some of the translations are basically non-existent and imo should just be removed. 3% or less translated is not good.anyways probably not the best translations but idk how you guys feel about it but something is better than nothing imo if youre gonna keep the translation as an option. translatiing like 4 words is not really supporting a language. and for those we should auto translate so its at least somewhat usful or just remove support for it till we get better.,-1,-1,-1,0.7704050540924072,0.5360396504402161,0.8370150327682495,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,121783192,34,"there is no point is having a translation for a language that doesn't cover larger (most) parts of the text. also, i don't think it's a good idea to use automated translation without manually being able to verify that the result is correct. it's better to have a proper english fallback text on phrases that aren't translated than to have a badly translated phrases. also, you keep pissing off cas every time you create a pull requests for branches that aren't ready for merging. it's better to create a ticket ([a link] and link to your github branch if you have questions :-)",-1,-1,-1,0.9749348759651184,0.9678189754486084,0.6625763177871704,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,121785826,34,"yea i meant to publish this one not push i instantly was like ut oh...he gonna hate me even more. the other one though i dont see any reason its not ready, other than it not being something hes wants to add.",-1,-1,-1,0.9853129982948304,0.9917832612991332,0.980465054512024,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,133364106,34,all translation is done through launchpad: [a link] i have just uploaded the latest template for develop here: [a link],0,0,0,0.9764297008514404,0.9744892120361328,0.993848979473114,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,513501175,34,"hi -- , sorry for hijacking this thread, there is no information in the readme and the link [0] in the documentation [1] is broken. i would like to contribute to the catalan translation. is launchpad still used for translations? the translation file is very outdated, for example, ""files"" is not translated in [a link] but the translation exists in launchpad since 2007: [a link] [0] [a link] [1] [a link]",-1,-1,-1,0.9904147386550904,0.9910730719566344,0.9886265397071838,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,514131825,34,yes. the deluge 2.0 translation files are rather outdated and should be updated using 1.3 as a basis. i have not had the time to sort it out but you can update catalan i have updated the documentation link.,0,0,0,0.8364432454109192,0.9716922044754028,0.9882696866989136,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,514176097,34,"great! should i work in launchpad then? it's a bit confusing because current launchpad data does not match these files. i'm also not familiarized with the workflow followed in launchpad, but ideally, i would like to compile and open deluge with the current and updated translation and start improving the translation from there.",1,1,1,0.9777011871337892,0.9805530905723572,0.9677323698997498,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,514203599,34,which file? the git repository is always behind launchpad as we need to wait for translations: [a link] the launchpad files can be exported: [a link],0,0,0,0.9869056344032288,0.986256182193756,0.9959371089935304,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,514271831,34,"nevermind, i see that you just updated some translations in launchpad. i'll work there, thanks!",1,1,1,0.9819216728210448,0.9927599430084229,0.9887253642082214,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,534478171,34,"i just completed the catalan translation: [a link] -- please, let me know if anything else is needed.",0,0,0,0.945742666721344,0.8816433548927307,0.8441644906997681,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,210412069,65,would it be better to detect if the plugin has been enabled rather than use `standalone` attribute? it may help solve the issue of attempting to start both deluge-web and web plugin.,0,0,0,0.9876367449760436,0.9954351782798768,0.992819607257843,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,210557405,65,what is the problem with both webui plugin and deluge-web?,0,0,0,0.9390698671340942,0.9855088591575624,0.9394145011901855,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211003095,65,in gtk `standalone` mode the webui plugin generates the following errors: [code block],0,0,0,0.9437520503997804,0.9916526675224304,0.9907884001731871,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211092064,65,the `couldn't listen on 0.0.0.0:8112: [errno 98] address already in use.` indicates the port is taken.,0,0,0,0.9841668605804444,0.9908863306045532,0.9939711093902588,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211093007,65,"if running deluge-web and gtkui, and then trying to enable webui plugin i get that error, which is expected, no? [a link] includes improvements to handle this better.",0,0,0,0.9632047414779664,0.9619665741920472,0.9929541945457458,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211120839,65,i know that the error indicates that but nothing else is running and the issue doesn't occur in thinclient mode...,0,0,0,0.9730899930000304,0.9338439106941224,0.9913721084594728,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211122183,65,"ahh, yeah, that is due to the webui plugin creating two delugeweb instances, where the second one causes this trace because the first one is already listening on that port. this is not a problem introduced in this commit, but has existed for a long time. the other pr fixes this. this commit is not supposed to fix all webui bugs, but simply restore the old behavior (before the latest json/webui changes)",0,0,0,0.9593549966812134,0.741370439529419,0.9604654312133788,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211329966,65,merged 64c67a0,0,0,0,0.986592710018158,0.9751595258712769,0.9914583563804626,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214396051,79,was this a planned change? is it possible that it's disk i/o blocking that's causing #2814?,0,0,0,0.9801720976829528,0.9875358939170836,0.9883036613464355,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214504461,79,"i think it's reasonable to assume it's the blocking calls on the main thread causing the issue. if disk i/o blocking in general was the problem, i think that you would be seeing more frequent pauses and much lower throughput in the normal case (non resume saving time).",0,0,0,0.9768681526184082,0.987697422504425,0.9824366569519044,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,214554923,79,"well, i have not tested that disk i/o is the problem in [a link], so i'm simply assuming that based on the ticket reporter's description only. if it's correct that it has to do with saving fastresume data, it is either due to libtorrent workload + handling alerts in deluge, or it's the disk i/o. libtorrent workload is threaded anyways, so the only thing we can address is the disk i/o.",0,0,0,0.9775398969650269,0.986748993396759,0.9893023371696472,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,215419098,79,now only queue the last call on shutdown,0,0,0,0.9828500151634216,0.9877938628196716,0.9939302206039428,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,231753058,105,"since libtorrent v1.1 is backwards incompatible, we should aim for support without any deprecated functions in develop. have you tried compiling without deprecated functions?",0,0,0,0.9869303703308104,0.9815386533737184,0.9919396042823792,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,231812409,105,"i didn't compile lt without backwards compatibility, i just used the version provided on archlinux. doing away with deprecated apis sounds like a good idea though.",1,0,0,0.6568785309791565,0.942487359046936,0.7443982362747192,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,233004644,105,"i'd suggest to merge this, so that lt 1.1 at least works with develop since lt with disabled deprecated apis seems like a bigger change",0,0,0,0.9753098487854004,0.9843581914901732,0.9853390455245972,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,233921087,105,"after a discussion on irc lt 1.1.1 release should fix these compatibility issues, if not raise a libtorrent issue.",0,0,0,0.9869278073310852,0.9882110953330994,0.9926291704177856,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,249574838,105,apparently there's some more incomatibilities with lt 1.1.1: [code block] and [code block],0,0,0,0.9709072709083556,0.9857498407363892,0.9816933274269104,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,249895074,105,please report to libtorrent issue tracker,0,0,0,0.9876964688301086,0.9900590777397156,0.988286793231964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,258037049,133,"fixed docstrings and added extra tests using proper documentation ips: [a link], [a link]",0,0,0,0.9867390394210817,0.9891506433486938,0.9934476017951964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,258090984,133,excellent!,1,1,1,0.9872193336486816,0.9947659969329834,0.995139479637146,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,258107994,133,still need a decision on the return type...,0,0,0,0.9563186168670654,0.9748898148536682,0.9772937893867492,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,258372114,133,i have rebased and pushed a modified is_ipv6,0,0,0,0.9868699908256532,0.985706627368927,0.9948023557662964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,258576525,133,need to add python-interface as optional dependency to depends and perhaps add to pip install for tests,0,0,0,0.9858286380767822,0.994532823562622,0.9945359230041504,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279133509,139,what was the reason for closing this?,0,0,0,0.944324791431427,0.9739162921905518,0.9905904531478882,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279133682,139,"well, since it's been tried before and the behaviour described is discouraged, i decided it wasn't worth trying to make a duplicate pr and step on established security norms. since i appear to be the only person having this difficulty, even though i plan on releasing a public firefox extension that may end up using this, a fork sounds like a better bet since it's probably a niche requirement.",0,0,0,0.8093574643135071,0.9374224543571472,0.9708778858184814,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279133851,139,"yeah fair enough, is there a way to workaround the issue though?",0,0,0,0.9626200199127196,0.8034883737564087,0.9738186001777648,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279134019,139,"running a proxy application, as someone suggested to me a while ago. something tells me a browser extension running a script or executable just to modify http requests is a bit scary to some folk, though.",-1,-1,0,0.9458271265029908,0.9677138328552246,0.8298003673553467,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,279134513,139,you could create a simple plugin to override the methods. i'm just not sure about adding this to the code. i know that some users want to enable `cors` which is another security issue and would only be added with the addition of a config option to enable it as required.,0,0,0,0.7734740376472473,0.9445961713790894,0.9849456548690796,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,279134810,139,"the problem is the session itself: this messes with the core authentication methods to ensure that a. we're told what our session id is (previously, we had to get it via cookies, which is hard if you don't have access to them) and b. that we can tell the webui provider what that session is via means other than cookies. sure, we could hack around the session login part, but what if i want to upload a torrent? i'd have to reimplement that to include a session setter. what if i want to upload a magnet? same thing. it'd basically involve reimplementing the entire webui. then it all comes back to, ""well, the webui is doing pretty much the same thing, why not just add in a tweak to the authentication system and call it a day?"" another suggestion was to implement the deluge rpc protocol, but i don't see a decent rencoding library for javascript, and i'm not smart enough to do it myself.",-1,0,0,0.7979215383529663,0.8690418601036072,0.6113570332527161,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,279135468,139,"did you try using `with_credentials`, that is the issue you are facing? [a link] [a link] for the plugin you should only need to override the methods you modified in this pr.",0,0,0,0.9896446466445924,0.9935975074768066,0.995771825313568,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1018898697,342,"-- i strongly recommend either copying the file directly or merging this via git (either as merge or squash) - it seems that you prefer to take edits from pr and apply them yourself however you've missed quite a few of smaller changes that i've requested and made (such as unused `build_version` or inlining of useless `tmp_ret`). it also seems you've missed pretty important change of [code block] which brings both build speed improvements but also decreases package size, as it stops pyinstaller from bundling tests (actually, some tests might even execute during import and break build if they're designed to throw!) used by pyinstaller",0,0,0,0.9134617447853088,0.9807965755462646,0.9540916085243224,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1018928869,342,not home to test and i can't add labels for the cd to run. i can test later but looks ok to me.,0,0,0,0.852135956287384,0.8752731084823608,0.9576503038406372,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019214269,342,"can we avoid the use of single letters for variables, better to use something descriptive to help readability. also would be nice to lint/format the file with black since it's python code [code block]",0,0,0,0.9225533604621888,0.9878743290901184,0.9924301505088806,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019322588,342,any idea what we can use instead? `e` refers to entry in `executables` while `d` refers to dictionary of that entry. we could also change it to use only `i` so the result would be `executables[i]['gtk']` done.,0,0,0,0.9899865984916688,0.9948531985282898,0.9943126440048218,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019339459,342,"hmm, you can call them `executable` and `data_dict`. in addition, maybe do everything in the `perform analysis`, `executable` and `collect` sections in one loop? just remove the last 2 for loops, and fix the indentation of the comments. [code block]",0,0,0,0.985851228237152,0.9921600222587584,0.9912868142127992,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019488945,342,"i could be wrong in all of this however, some thoughts. i don't think you are supposed to run collect before you are done with analysis/executable. maybe it will not matter in our case. also maybe instead of data_dict since we have variables data and execute maybe executables_dict would be more on the nose. also maybe script_name instead of executable since its not actually referring to a executable and rather the name of the script we are building for. edit: ok yes i think coll += can go in loop but not collect. maybe that just shows another point maybe instead of coll it could be exe_plus_data?",0,0,0,0.8197875618934631,0.9757720828056335,0.9310917854309082,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1019493443,342,"- i have no knowledge about `pyinstaller`, so you might be correct. i only commented about the code, which can be totally wrong :sweat_smile:",-1,0,1,0.7809701561927795,0.7382906675338745,0.9826291799545288,,review,no_majority_disagreement,-1
deluge-torrent/deluge,comments,1019493749,342,yea just small differences. other than the things cas forgot to merge i feel like most of this is just cleanup that could be put off not really import things happening.,0,0,0,0.7581645250320435,0.5151998400688171,0.9263205528259276,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1712587372,433,"the pillow change fixes pip trying to compile pillow from source but is missing zlib headers(maybe others), you could set these up on your system/ci/cd or 9.5.0 works. they also recommend using the wheel if you don't want setup the headers. the change to pyinstaller fixes a typelib error in freeze on windows saying freetype 2.0 is missing.",0,0,0,0.9867794513702391,0.9929471015930176,0.9717564582824708,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1712588090,433,"i don't know if you can do both greater and less then in requirements but also not sure that it matters in this case as i think the versions of the deps are old enough that versions older are not likely to be used with the versions of python deluge supports, but idk.",0,0,0,0.9491235017776488,0.6921482086181641,0.9567357301712036,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1712589166,433,"so i thought zope.interface change fixes python 3.7 but apparently not test still pass on 3.10, so i guess this is a python 3.7 issue? the other two deps changes i believe are valid.",0,0,0,0.9844539761543274,0.9630855321884156,0.9860745072364808,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1712919646,433,"it's same issue also for py3.9(zope.interface), and i just reverted pyopenssl and cryptography to earlier versions(22.0.0/37.0.4) for quick fix(trial/error) when i ran into it last week. anyway, i looked little into it now, and don't have more time now, but found seemingly for some reason an older setuptools(47.1.0) is installed for python's under 3.10(tested 3.7, 3.9 and 3.10), and when upgrading setuptools afterwards to newest, then works. probably need pin setuptools to 68.0.0, as latter two versions are py3.8 and up. also, in requirements.txt, then i believe twisted should be pinned to 22.10(or below), like in ci, as else: ""nameerror fdesc is not defined"", when newest twisted installed. thanks! :) edit: setuptools version variances because included already(as dep) with pip/python. edit2(last): in quick test here(not ci though), then pyinstaller 4.10 doesn't fail(py3.9.8), though have as always displayed a bunch missing typelib errors, originating from one of the hooks being buggy, though not important for us, as a misunderstanding those messages. pyinstaller 5 broke freezing completely(hence 4.10 pin added), as respected those errors instead of just forward/log and ignore, but they gracefully fixed it for us in next version(maybe next again, can't remember, and i made pr to update pyinstaller and drop 4.10 pin, but i closed it later, and cas thought not important to update at the time). sorry if misunderstanding and 4.10 has actual error blocking on ci now and not just cosmetic, or that you already knew these things. granted might as well update pyinstaller as well, and is confusing to end-users looking at, and just elaborating. sorry for wordyness, and butting in - please let me know if i can help with something, and i'll but out again now.",0,0,0,0.949051558971405,0.894425094127655,0.976123571395874,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1715775201,433,seems related: [a link],0,0,0,0.982068121433258,0.9839540719985962,0.9915720224380492,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1715841068,433,the pyinstaller issue is when running deluge after packaging not in the packaging process sorry i was not clear.,-1,-1,-1,0.9619370698928832,0.9870980381965636,0.9840302467346193,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1717486003,433,"good catch, yeah must've been fixed here presumably then: [a link] for setuptools 62. just strange because first thing i tried myself was mess with that(change install name), to no avail, and see requirements.txt and setup.py has the canonical name regardless, but whatever. i guess the setuptools change should be added little up too in ci file, as still old version in log. sorry didn't ment to butt in here again, unless called, but will adhere to now promise ;) thin line to walk for guessing if beeing perceived helpful vs annoying you know :) thanks as said.",1,1,1,0.8969268798828125,0.9906330108642578,0.9942626357078552,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1717778818,433,-- i think this is all the changes i am going to put forth. the team over at twisted are looking into the issue with v23 and looking to improve their ci to prevent issues in the future. for now v22.8 is latest working.,0,0,0,0.7489396333694458,0.9741990566253662,0.8865028619766235,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1723451871,433,"thanks for the work identifying the build issues, i prefer that we identify and resolve each issue separately to properly understand the issue that is being fixed, as such i referenced your changes in new commits. just to note that the versions specified in requirements are usually there as a project minimum/maximum rather than for ci/cd and shouldn't be removed without checking the commit history. there are likely some improvements to how we handle the dependencies for project, packaging and ci/cd. also until we specifically drop support for python 3.7 i still want the runners for it. the total number of python versions to test against should also be small so we don't have to wait too long for them all to finish. there could be an improvement where we run a single python version for the pr/tests and then run against all versions once merged to develop branch.",1,0,1,0.8802098631858826,0.5218856334686279,0.93996661901474,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1724151514,433,-- thank you for making the required changes. i am sorry though i might have not been clear maybe? or i just didn't notice a reference to it in your commits. however the change for pillow is not just for compatibility with python versions but there is also missing header files for compiling from source.(and part of why move to wheel) so maybe a comment in a commit mentioning zlib source headers missing from pillow source code for compiling pillow from source? idk. again sorry either way if you did or didn't. and big thanks for making the changes!,1,1,1,0.6915444135665894,0.9835094809532166,0.9865737557411194,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1724195163,433,ah yeah i did find the other pillow issue which is isolated to windows 32-bit builds which as you say is due to missing wheels and trying build from source: 6c9b058d81639,0,0,0,0.9448676705360411,0.8379586338996887,0.9830447435379028,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1574758007,427,"-- - this is going to be a dependency for some other mrs, so it will be best to merge this first. i'll link each mr that needs this one so it will be easier to manage.",0,0,0,0.9703232049942015,0.9807699918746948,0.9910652041435242,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1575208396,427,don't know why i'm responding to each message when i can just write here - all changed as suggested :),0,1,-1,0.4012913107872009,0.9639744758605956,0.5629125833511353,,review,no_majority_disagreement,0
deluge-torrent/deluge,comments,1819033816,427,"thanks for this! i did change my mind about the naming of the function and settled on `daemon_version_check_min`. i wanted it to be descriptive but not verbose, almost chose `is_daemon_version_at_least`! i did ponder creating a daemonconnection class but not sure it would have gained much more clarity here.",1,1,1,0.9834437370300292,0.9735456705093384,0.9859304428100586,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,251183413,109,the most likely reason is magnets that have not yet retrieved metadata: [a link] so this is not the correct fix and instead the code at [a link] should be altered to accommodate for this use-case.,0,0,0,0.965818166732788,0.9908918738365172,0.9885711073875428,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,251195467,109,it does not happen every time i download with a magnet link through. any ideas why that may be? i am gonna do some more testing tomorrow in case i have better luck reproducing it.,0,0,0,0.957471489906311,0.9385965466499328,0.9583751559257508,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,251216767,109,nevermind you were right. how does it look now?,0,0,0,0.9455721378326416,0.8381515741348267,0.9652644991874696,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,252226466,109,"okay this should be as you asked. however, as you brought up refactoring maybe we should also look at __draw_pieces() and __draw_pieces_completed() as they could probably be merged into one function.",0,0,0,0.9833747148513794,0.985802412033081,0.9919060468673706,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,252253330,109,"cheers. if you are happy to try refactoring it, go ahead, it does look rather copy-pasted.",1,1,1,0.932991862297058,0.975923478603363,0.84503173828125,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,252695669,109,i've merged this change to fix the issue but feel free to open a new pr with refactored code. 6b630c9,0,0,0,0.8412582278251648,0.922884464263916,0.9858161211013794,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,307647807,158,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,307726894,158,"that's great thanks. one final thing, could you update the commit message with [core] tag and move the second sentence out of the summary. [a link]",1,1,1,0.9795646667480468,0.994765043258667,0.9863362312316896,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,308006512,158,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,218720233,92,could the autogen apidoc be added to setup.py docs command,0,0,0,0.9851502776145936,0.9944576025009156,0.9952555298805236,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,163423339,47,did you investigate using the reset timer thread option?,0,0,0,0.987828016281128,0.9945468902587892,0.9947516322135924,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,164567474,47,merged: d13fca251ed57cf8,0,0,0,0.9805148839950562,0.9880933165550232,0.9913621544837952,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,207960165,55,thanks for this! merged 5d1aff157e4dac,1,1,1,0.9844126105308532,0.9786564111709596,0.9807077050209044,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254485953,117,"that is helpful, it's odd that i missed some of these from my last sweep :) i think the iteritems changes should be done with six or similar as it could have a memory performance hit on python 2. however if there are areas where is make no obvious difference then then less we rely on py2to3 shims the better. oh there are several pylint issues needing attention.",1,1,1,0.9862090945243835,0.993166983127594,0.9949523210525512,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254586887,117,"yes, there could be some performance changes due to removing iteritems, etc.. but i don't think it's going to be that big of a deal since most of our data structures don't contain that many items. i really wanted this change to not introduce any outside dependencies, plus it will give us more incentive to get the rest of things python 3 ready :) i'll try to fix the lint errors.",1,1,1,0.9799569845199584,0.9858720898628236,0.9903224110603333,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255284597,117,i have no idea why this isort run fails. on my machine i get no diffs.. [aresch deluge]$ isort -q --diff --recursive deluge docs packaging *.py [aresch deluge]$ echo $? 0,0,-1,-1,0.8340919613838196,0.7999138832092285,0.8698729276657104,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,255304705,117,what if you run `tox -e isort`?,0,0,0,0.9859312772750854,0.9924787282943726,0.9914952516555786,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255306675,117,"yea, if i run tox2 -e isort i get the same output from travis. i'll just make a change based on that diff.",0,0,0,0.9773879647254944,0.9653268456459044,0.990510642528534,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255326055,117,"those changes to `new` and `htmlparser` imports are definitely incorrect, what version of isort is installed via pip? i have 4.2.5 and it gives the same output as tox.",0,0,0,0.9759172797203064,0.9755967259407043,0.9795920252799988,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255326945,117,just noted that the `new` import should be changed for py3 as that module has been [a link]. which funnily enough if you also take into account that [a link] is renamed in py3 explains your isort issue... :p,1,1,1,0.552352786064148,0.9734421968460084,0.9797811508178712,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255608212,117,"i think this looks ok to merge now? there are plenty more fixes necessary for python 3, but we should get this merged now so we have a better base to work from for the future fixes.",0,0,0,0.9582063555717468,0.9549561738967896,0.6832572817802429,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255779054,117,i've a new pull request with the branch rebased and some extra changes #124 - rebasing the develop branch rather than merging it in is better as it creates quite a commit mess otherwise. - using `git commit --fixup/--squash` or modifiyng the commits that need fixed is much easier to rebase into a short set of commits. - for pylint we use the full name rather than the shortcode and place the disable comment inline with the offending code.,0,0,0,0.9547731280326844,0.9747636318206788,0.986405313014984,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1006862850,334,"can you provide an example magnet to replicate this issue, i think there might be a deeper problem to solve here",0,0,0,0.9700735211372375,0.9879814982414246,0.9850366711616516,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1006927666,334,"it's only issue in thinclient mode, not standalone. thanks alot djlegolas, works great, much appreciated :)",1,1,1,0.9919694066047668,0.9961090683937072,0.99714332818985,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1006995347,334,the root of the problem is the sending of mixed str and bytes metadata dict to rencode. this can be solved by pickling the metadata dict and then encoding with base64 and reversing that process in the ui. edit: i thought this might result in a breaking change between client and daemon but if it's already broken in thinclient... :smile: thanks for tip :slightly_smiling_face:,1,1,1,0.9698656797409058,0.9823869466781616,0.9897747039794922,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007008746,334,"-- actually, seem as the metadata itself is only bytes inside the dict. the info_hash is the only one that is being sent as a str/bytes, depending on standalone/thinclient.",0,0,0,0.9876039028167723,0.9911136031150818,0.9898620843887328,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1007550499,334,"sorry what i meant is it is a mix of raw bytes and encoded strs so there is no way to determine type when receiving without trying to catch the exception. it's certainly bad practice for the api calls to randomly switch types like this and we should be decoding as early as possible in the python code when receiving data. further thought is to not bdecode the metadata in _on_uri_metadata. instead send that metadata b64encoded and the client should use deluge.bencode.bdecode after b64decode. it's up to you if you want to make that change, i can do it this weekend otherwise btw really don't worry about adding the github pr close link, it's something i do from my end, just the trac issue is required for future reference.",-1,-1,-1,0.9891848564147948,0.989083468914032,0.9804086685180664,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008159935,334,"-- tested your fix, still have an issue. [code block]",0,0,0,0.9799473285675048,0.972713828086853,0.9159734845161438,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1008171328,334,"hmm okay. did you update the daemon to latest code? i tested it here without issue so would need more information about how to replicate that edit: oh i see you fix was for client side, i really don't want to have a hacky solution here though...",-1,-1,-1,0.8340932130813599,0.8460060954093933,0.6602829098701477,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1443823176,412,"a quick review that this is a good start but we need to be aware of backward compatibility, both with libtorrent version and daemon version.",1,0,1,0.5316325426101685,0.7983150482177734,0.6116123199462891,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,1445288020,412,"what requires the last version of libtorrent on git (and doesn't work with other versions) is the check on i2p_socket flag which can be eventually subsituted by a check on ip (i2p peers have 0.0.0.0:0 address) the ""pid"" i've introduced is even in older versions so it is not a problem. anyway this code is just a matter of visualization everything works fine even without it but it's ""ugly"" to see an empty peer list :-) what would be nice to add as a feature is the option to disable dht and pex (these are not yet available when using i2p in libtorrent) when selecting the i2p proxy and an option to enable mixed mode (this one is actually possible only with the ltconfig plugin).",1,1,1,0.911221444606781,0.9673333168029784,0.8560967445373535,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1567078552,412,i can see the relevant changes but the code actually needs to handle when that attribute is missing for backwards compatibility. for the same reason the ui client code needs to handle connecting to older daemons that do not have `pid` or `i2p` keys in the peer dict from get_peers. we really should have tests associated with the core changes.,0,0,0,0.9845832586288452,0.9929428696632384,0.9670002460479736,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1573302962,412,in the latest libtorrent version (2.0.9.0) there have been some changes in managing i2p: 1 - it's no more needed (but according to devs it has never) to set a proxy for i2p but it's enough to set i2p_hostname and i2p_port parameters. 2 - there's now a function to get the i2p address (destination): peer_info::i2p_destination() (which under my request has a python binding too) so using the pid can be now dropped. 3 - there are new option to fine-tune the i2p sam connection: tunnels outbound and inbound lenght and quantity. so i think that my pull request is now outdated.,0,0,0,0.9807623028755188,0.9925034046173096,0.9818944334983826,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,2311069268,460,rebased.,0,0,0,0.982489824295044,0.958116054534912,0.9845768809318542,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,216031340,84,"the problem i have with reverting that change is we don't have a ""why"" it is needed and i cannot replicate on ubuntu. also is was renamed to a `private` method suggests that we should not be using it.",0,0,0,0.8930352926254272,0.959932029247284,0.7180312275886536,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,216056877,84,"well im not 100% but it seems like connect is timing out when called the first time why exactly i don't know, and why it doesn't connect after deluge is like fully loaded since it shouldn't have a reason to time out i don't know. and that brings me to the next part yes it is happening on windows(you dont test on windows?) so maybe its a windows only bug? so unless we can figure out a better fix or get twisted to fix it i believe its out of our control and at least for now have to revert it.",-1,-1,0,0.6971238255500793,0.7469887733459473,0.5785626769065857,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,216058968,84,also did you read the log i added to the ticket?,0,0,0,0.9863889813423156,0.993519365787506,0.9952232241630554,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,216065252,84,just to like super verify this i just remade an entire system os and all and still got this issue. feel free to do the same and test windows if you like.,1,0,0,0.7493631839752197,0.6245157718658447,0.7444857358932495,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,217566900,84,"none of the current devs have windows machines, i certainly would only test it closer to release in virtualbox. thanks for the pr but i need to write a slightly modified and descriptive commit: 21789e0692d36",1,1,1,0.9467291235923768,0.7330639958381653,0.9378308653831482,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,217573601,84,"all good, i kinda figured since there was this and that one other commit that broke windows, dont remember which but any who. im thinking of adding a jenkins job to my build pc to keep a closer eye on commits so i dont have to revert and try 10 different commits or w.e. when a issue comes up. thanks for fixing.",1,1,1,0.9642750024795532,0.9798190593719482,0.989134669303894,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,221107550,101,made some minor changes and updated docscrings,0,0,0,0.9842703938484192,0.9903379678726196,0.982853353023529,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,221108333,101,close to perfection :-),1,1,1,0.9859380125999452,0.9930517673492432,0.9637898206710817,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257147394,128,"i think `openbt.png` can be deleted, i removed the test but forgot about the icon.",0,0,0,0.9859989881515504,0.9824574589729308,0.9914980530738832,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257147519,128,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257152660,128,does this look better?,0,0,0,0.9727798104286194,0.9862989783287048,0.980969786643982,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,257559301,128,"merged, thanks!",1,1,1,0.9566472172737122,0.9927594661712646,0.9624021649360656,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394121285,186,"it does take ip address on windows. there is no ""eth0"" or the like on windows. this breaks windows support. like said i think the only thing that should have changed is removing it setting 0.0.0.0 by default so you dont end up with a invalid setting on linux and then we should just either remove the is_ip check all together or only make it check if its an ip on windows. [a link] not is an invalid option. on windows the only closest equivalent is a something like 40 character guid. libtorrent does not accept that. nor does is accept the associated adapter ""name"" eg. ""local area connection"".",0,0,0,0.4983289241790771,0.8594777584075928,0.9654477834701538,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,394141757,186,"i wanted to fix the code quickly to what is written in the libtorrent docs as it was broken for linux. you can make another pr to add windows support. perhaps some tests to ensure that it is correct for windows and linux now that we have appveyor. also ask arvid to update docs on sat, 2 jun 2018, 23:23 doadin, wrote:",0,0,0,0.9422053694725036,0.9825634360313416,0.9879357814788818,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,397685376,189,"ok, so i added everything but there is something strange. it doesn't catch any errors returned.. for example look at the [code block] in the file [code block]. does the callbacks functions passed to the ajax are [code block] and [code block]? as only the [code block] callbacks are being called.",0,0,0,0.8460237383842468,0.8861983418464661,0.9444953203201294,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,397907226,189,"excellent, i shall have a look. i also noticed the multiple listings of autoadd plugin, i'm sure i encountered this before with other plugins but cannot remember the fix atm.",1,1,1,0.9625417590141296,0.9948377013206482,0.9806678295135498,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,397907989,189,currently i set the [code block] of the plugin as a static member of the [code block] class and check it's value before adding a page.,0,0,0,0.9885385632514954,0.9914650321006776,0.9944922924041748,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,404262038,189,just checked code and it should be `success` and `failure`,0,0,0,0.9872280359268188,0.9844895601272584,0.9940675497055054,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,404590187,189,"ok, now everything suppose to work, including showing errors.",0,0,0,0.9820968508720398,0.9782044887542723,0.9735406041145324,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,404604213,189,"thanks for this, merged!",1,1,1,0.961010992527008,0.9516267776489258,0.9632317423820496,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,439000212,226,"ah okay, i was testing with x64. as i said adding `gobject.threads_init` does nothing here. the change that made the difference is the removal of the `gdk` `threads_init`, which has disabled threading. i did read the following so likely solution is to disable the use of gtk/gdk theading on windows but perhaps it should removed entirely since it is deprecated in gtk3.",0,0,0,0.9740532636642456,0.9308272004127502,0.982331156730652,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,439185265,226,so far i have tested 3 vms. working on a fourth. trying to eliminate any environment issues. all builds i have tested using appveyor gtk build. 1. win7 ult x64 with x86 and x64 python windows themes enabled = threading issue(my build ive used for over a year now) 2. fresh win7 ult x86 with python x86 windows themes enabled = threading issue 3. fresh win7 ult x86 with python x86 windows themes disabled = no threading issue 4. fresh win10 enterprise x64 with python x86 windows themes enabled or disabled = no threading issue 5. fresh win7 ult x64 with python x86 = in testing perhapse with a bit more testing we can maybe just exclude win7 in threading and leave for others. im willing to test xp and 8.1 if this is a route to be considered.,0,0,0,0.7455378174781799,0.982258439064026,0.8231816291809082,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,439195866,226,"interesting results i have actually found that there windows theme influences the results. being that im testing in a vm with default drivers windows aero doesn't load. however installing the wddm driver and enabling aero deluge runs with threading. results 100% replicable by starting/stopping the ""themes"" windows service. will update this comment and previous with results. being that aero isnt the same in 8+ im guessing it works in those and vista/7 would be the only ones requiring a change.",0,0,1,0.5452069640159607,0.908373236656189,0.7806491255760193,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,439205343,226,"those are interesting results. it's really not an issue to disable threading, just need to be aware that this has been done and that in future if there are any ui lockups when running certain code then that code will need to be run in a thread.",1,0,1,0.6885743737220764,0.9177095890045166,0.6584131717681885,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,502630313,226,thanks for the suggested changes. pywin32 is the official and latest version so this is not going to be changed.,1,1,1,0.7736046314239502,0.85063236951828,0.9024055004119872,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,429245744,215,please explain how this is bad?,-1,-1,-1,0.9258235096931458,0.9351933002471924,0.9433289170265198,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,429457530,215,"on a unix-alike os -- gnu+linux, macos x, *bsd, anything that supports symbolic links -- say my deluge config file is kept under source control at $home/scm/$os/$host/$home/.config/deluge/core.conf and i have a symbolic link which points to it at the usual location $home/.config/deluge/core.conf -- currently when i save any config changes, a complete config file will replace that symlink -- *not* its target -- instead of doing the right thing, which would be to follow the symlink (using os.path.realpath) and overwrite the target file it points to. changing a file's type from symlink to text file tramples on the user's legitimate wishes and intentions, for no good reason and no benefit to anyone. the change i propose loses nobody anything and gains symlink users correct application behavior, would be my claim in support of it. (for clarity, os.path.realpath returns its argument unchanged if it is not a symlink). i hope this clarifies why the current behavior is bad.",0,0,0,0.9697598814964294,0.9828613996505736,0.9503222107887268,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,429611433,215,"thanks, i just needed to know the use-case. the badness is completely subjective.",-1,-1,1,0.6998967528343201,0.958962619304657,0.6793768405914307,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,429620357,215,"it is unacceptable for any program to change a symbolic link to a data file without confirmation, at any time, for any reason, or as in this case, for no reason at all. doing so is objectively a bug. this pr is the one-line fix you need. you lose nothing by doing the right thing; you gain nothing by doing the wrong thing. please accept the change.",-1,0,-1,0.9199257493019104,0.8618316054344177,0.6917091012001038,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,429627923,215,"please don't muddy pr discussion with unneeded hyperbole. this is a feature request, there has never been an expectation that deluge config files could be symlinks and a program overwriting it's own config files is perfectly acceptable, it is perhaps undesirable for a narrow use-case but that is all. i am willing to accept the pr however from my point of view i first need to consider what the change is, why it is needed and if/how it will impact the thousands of other users who have never required this feature before. also what happens if a user then requests that the state files or the entire config directory should be able to be symlinked, do we also make that change? how acceptable is it that the `.new` and `.bak` files will also be created in the symlinked location? rarely are changes to a project trivial. one change that will certainly be needed is the commit message to better describe why the change is being made, without any vague 'this is bad' comments.",0,0,-1,0.6657958030700684,0.6415739059448242,0.752122700214386,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,429635232,215,"i take your point about hyperbole and vagueness. i will try to keep it calm and collected. i'm with you 100% on due diligence and will be glad to help in any way i can. just to be clear though, i never advocated against the program overwriting its config files; quite the contrary! i am saying that overwriting a symlink which points to the config file is precisely *not* overwriting the config file, it's overwriting something else somewhere else. as to whether this pr is a bug or an rfe, i don't care what it's called so long as it gets in. i will simply observe that most programs exhibit the correct behavior. (deluge is definitely not the only one overwriting symlinks though.) i also wondered about the `.new` and `.bak` files. as a first pass, i would suggest the right place for `.new` is `$temp` or `%temp%`, and for `.bak` it's the target config file's enclosing directory (no change for `.bak`, in other words).",-1,1,1,0.5460131168365479,0.9868692755699158,0.9656643271446228,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,429646768,215,"i've updated the commit message. i think it still needs work, but is it at least a bit better now?",0,0,0,0.962718904018402,0.963404417037964,0.966943383216858,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,431673314,215,updated the commit and merged: c01679de1f24ea11,0,0,0,0.9878584146499634,0.991884469985962,0.9884065985679626,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1049024176,380,when adding the service file to the code i discussed that there was no need for a separate user service file since they are identical service files: [a link] i'm not seeing anything here that would change that? maybe what is missing is additional documentation for installing a user service file?,0,0,0,0.9612278938293456,0.9868974089622498,0.99088317155838,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1049102548,380,they have some differences identical: the user service includes a `slice` and depends on a different target (the user service manager and system service manager have different targets). copying one into the others location won't work.,0,0,0,0.9592813849449158,0.8661852478981018,0.9793269634246826,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1049164087,380,"ah i was unaware that user service doesn't include `multi-user.target`. would setting the service to use `default.target` be a solution as i see it is usually symlinked to multi-user anyway? i know that the `wantedby` can be overridden but could that be more complicated that a separate service file :thinking: why include `slice`, i not sure i see the benefit here for the single deluged service? and why only for the user service?",0,0,0,0.8745243549346924,0.9077825546264648,0.9467552900314332,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1049176970,380,"including the slice indicates to the service manager that this is a background service. this can be used to handle oom situations, or prioritising foreground processes. there's no equivalent for system services. i'm not sure about pulling the system service for `default.target`; i don't know how that interoperates when booting into rescue mode or other special modes. it might be fine, but i can't guarantee it. ultimately though, shipping the two distinct files makes life easier for packagers of systemd-based distros since it signals that they can just copy both of them to their respective locations. i would also like to include a `sysusers` file for the system service to automatically handle that user (mostly to de-duplicate work that being repeated downstream). i'd rather tackle that last item separately though to scope the pra better.",0,0,0,0.9099932312965392,0.958178699016571,0.979973077774048,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1049208084,380,"okay this change makes sense, thanks for details. we would need the same for web service though",1,1,1,0.7805501818656921,0.8151518702507019,0.9464144706726074,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1057088622,380,thanks for wrapping this one up. :+1:,1,1,1,0.976569414138794,0.9880107045173644,0.996034562587738,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1573980616,404,"i think i'll replace the torrent i use for the test with another one, with less inner files/dirs. in addition, probably it will be best to also add tests for single file and hybrid torrents before merging.",0,0,0,0.9847664833068848,0.9817242622375488,0.9822720289230348,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1574417165,404,"well, added both and must note that the default `filetree` parser will be according to the btv1 spec.",0,0,0,0.9894395470619202,0.9914337396621704,0.9937180280685424,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1037310929,372,nice set of tests :+1:,1,1,1,0.977661430835724,0.9839025139808656,0.996485948562622,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1037314099,372,agreed. lgtm!,1,1,1,0.5275045037269592,0.9447147846221924,0.9920828342437744,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211375833,68,updated to avoid stack trace when killing deluge-web with ctrl-c,0,0,0,0.985952615737915,0.9897458553314208,0.9937891364097596,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211393798,68,could you rebase please,0,0,0,0.9864178895950316,0.989944875240326,0.9818315505981444,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211407852,68,"oops, sorry",-1,-1,-1,0.991212785243988,0.9908984303474426,0.995080590248108,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211408683,68,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,211415644,68,merged: [70d8b65f0a499],0,0,0,0.9851383566856384,0.9926553964614868,0.9938111901283264,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254491657,112,"ah, yeah, i forgot to label the last commit with the ticket #2875. but i don't see what the web test should be a separate commit? it is added to verify that the bug is fixed. i do see that it may look cleaner, but imo, tests and implementation really goes together.",0,0,0,0.9507583975791932,0.9341199398040771,0.9593068361282348,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254515286,112,to me it looks like web test refactoring that's not directly related to the bug?,0,0,0,0.9741663932800292,0.9615500569343568,0.9856348633766174,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254527057,112,"well, `deluge/tests/test_webserver.py` contains the new test, but there were some refactoring to reduce code reuse.",0,0,0,0.9864466190338136,0.9943687319755554,0.9922704696655272,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,254573262,112,"it'd be best to have an initial 'refactor web test code' then 'fix bencode' followed by 'fix filehash (with tests)'. currently the commits are not distinct with filehash tests in bencode commit... (i think this was the original gist of my comments :) keeping issue commits clean is important for historical viewing, blame and merging especially where there is a clear defined bug and fix.",0,1,1,0.860654890537262,0.9746783375740052,0.8552660942077637,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,254750108,112,"ahh, i see the misunderstanding. the test together with `[#2900] fix error loading torrent: invalid bencoded value` was not supposed to test the filehash field, but the bencode issue, but i think i forgot that somehow, and tested the filehash twice. after creating the new torrent with the filehash field, the bencode issue cannot be reproduced on that torrent, so the test is pointless atm. i'll move the json issue into a separate pr.",-1,-1,0,0.8775201439857483,0.6978610754013062,0.8087013363838196,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,256924572,112,thanks for effort on this! merged: 41fed16d,1,1,1,0.9872305989265442,0.9898417592048644,0.9894458651542664,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255901424,124,"the changes to the commands/config.py look correct to me. the next() function will call the correct function on the object to get the next iterable, .next() for python2 or .**next**() for python3. instead of passing the 'next function' to the atom function, we just pass it the object and let it do next(obj) instead of calling .next() or .**next**() on the object directly.",0,0,0,0.9688520431518556,0.9920684099197388,0.9212451577186584,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255901906,124,"the changes to import the zip from future_builtins will require a new dependency for deluge. this is probably ok, but we need to make sure it ends up in depends at a minimum. as an aside, have we considered creating a proper requirements.txt file instead of the depends file? this would make it easier for people to do a simple pip install -r requirements.txt to fetch (most) of what's necessary.",0,0,0,0.9829517006874084,0.993635892868042,0.98982834815979,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255902238,124,"the fixes to division look good. i was a bit worried about doing this and was going to do it in a separate pr, but i think what you've done makes sense. the other option would have been to import in an old_division function from futurize but i wasn't terribly keen on that.",1,1,1,0.6930189728736877,0.6985684633255005,0.9665241241455078,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,256001866,124,"what new dependency for [a link]? it is included in python 2. i have been looking at requirements.txt for pip but i'm not sure how much it will help on linux as all the requirements are packaged and still need gtk and libtorrent from source or package. i am careful to ensure that dependencies are widely available to ensure ease of installation for end user. we will need the dependency on python-future for the next stage of changes, it's unavoidable. but that is now available as a package for distros so not an issue.",0,0,0,0.727596640586853,0.9594855904579164,0.958407998085022,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,256229825,124,so it is. i must have tried importing it with python3. this pr looks good to me.,1,1,1,0.963558554649353,0.9727977514266968,0.9244417548179626,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,256301593,124,i have had to revert the iteritems changes as it has too many issues needing resolved. namely `exceptions.runtimeerror: dictionary changed size during iteration`. either we go through each change and decide what exact operation is needed or use `future` to apply the changes with the py2 shim.,0,0,0,0.9777613878250122,0.9626206159591676,0.9542996883392334,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,256405201,124,"yup, that sound good to me. we can fix it or import something from the futurize package like you said.",1,1,0,0.9796979427337646,0.731650173664093,0.8865407109260559,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,352585895,155,"i wrote a handler in ef6ca96. on [a link] message, deluge will register itself as a shutdown-blocker. next, when receiving [a link] message, deluge should have 30 seconds to save all the data - depending on whether critical shutdown or not. but the lack of a proper tool for testing this makes me feel like the is something wrong with my work.",-1,0,-1,0.9359400868415833,0.8803707957267761,0.9080597758293152,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,428009075,155,"so, i was trying to implement what you suggested, and now the gtk crashes... the only errors i found related are `0xc0000005` (access violation) followed by `0xc000041d` (an unhandled exception was encountered during a user callback)... still not sure why.",-1,-1,0,0.8028373122215271,0.7328095436096191,0.6061103940010071,-1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,428111143,155,"oh hmm, probably some issue with setting up setwindowlong. don't worry about the pywin32 deprecation, it can wait, i posted it here as a reminder until everything is working.",0,-1,0,0.8576763272285461,0.6117103695869446,0.8514727354049683,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,336661750,170,yeah i have no idea why it was switched to a single file either and have been mulling this change to mitigate data loss and few reads/writes. i would not want to put this change into `1.3-stable` but more than welcome for it to go into `develop` for 2.0.,0,0,0,0.8616231679916382,0.806148886680603,0.9402564764022828,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,336674698,170,"sorry, i meant to reply to this when i first saw it. this was a long time ago, but i think the reason to make it a single file was the same as you have now splitting it up -- performance. i think writing a lot of small files (especially with very large sessions) could cause some slow downs, but it could have just been the way it was done at the time. i could see a slow disk causing some issues. for what it's worth, my original implementation was single files and my intention was to allow updating individual fast resume data without having to write out a large file each time. *shrug* i'm ok with changing it back to separate files, but i think cas is right that we should probably stage that for 2.0.",-1,-1,-1,0.9665313959121704,0.989997386932373,0.9789268374443054,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,354626028,170,i'm a little concerned that 2.0 is ... very far away. i found this bug of *7 years* slated to be fixed in 2.0: [a link] is there any way i could modify this change so it's more acceptable for 1.3?,-1,-1,-1,0.9789099097251892,0.8911501169204712,0.9760875701904296,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,354663964,170,i am working on this currently so will be in a 2.0 release,0,0,0,0.9572840332984924,0.9887843132019044,0.9230052828788756,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,355792641,170,"sorry -- is that to say you're currently working on state in multiple files, in 2.0? one of the reasons i'm interested in 1.3 over 2.0 is that the (fairly large) private trackers i use allow 1.3 in their client whitelists, but not 2.0. tracker administrators do not like beta clients at all.",-1,-1,-1,0.9869982004165648,0.9901579022407532,0.9873138070106506,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,356362505,170,there is nothing new going in to 1.3-stable only critical bugfixes. help with getting 2.0 to release status is always appreciated. the problem has been that too many features were added to develop and squashing all the resulting issues takes time and in that time many many bugs in 1.3 needed also fixing...,0,1,1,0.5291124582290649,0.6746745705604553,0.9634049534797668,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,357148297,170,"closing then. thanks for your time. unfortunately as i mentioned before, the project driving these prs is tied to private trackers, so i won't be able to meaningfully test this code against a development branch for some time.",1,1,1,0.9418861865997314,0.9731042385101318,0.9609071612358092,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,500986759,244,thanks merged! a34543100c5,1,1,1,0.9720359444618224,0.9952730536460876,0.9931991696357728,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,501449196,244,-- is there a disconnect with your downstream debs or does stuff from this repo not go into those ? the latest release we pulled in does not have this change but you merged and tagged it properly here. grab deb: [code block] output: [code block],0,0,0,0.9850030541419984,0.9935738444328308,0.9947593808174132,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,501457568,244,thanks!! i forgot that it needs to pull the git repo before hitting build button! i'll fix it just now,1,1,1,0.9849253296852112,0.9935359954833984,0.9965123534202576,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,501458099,244,i assume the version is still showing as 2.0.2 for `deluge-web --version`?,0,0,0,0.9876698851585388,0.99489825963974,0.9919896721839904,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,501471598,244,"the linuxserver/deluge docker container i pulled down earlier today reports: deluge-web 2.0.3-1-201906082034-ubuntu18.04.1 libtorrent: 1.1.5.0 python: 3.6.8 os: linux 4.9.125-linuxkit which aligns with ""latest"" listed at [a link]",0,0,0,0.9847604632377625,0.9914074540138244,0.9948167204856871,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,501478785,244,a new version `2.0.3-2~201906121747` has been published,0,0,0,0.977262556552887,0.9871138334274292,0.99257093667984,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,501484364,244,![a link] all good now thanks!,1,1,1,0.987324833869934,0.9957141280174256,0.9945530295372008,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,548322833,256,expander-size for gtktreeview does not appear to have been deprecated. also deprecated in 3.20 is not a big issue as we still target 3.10. [a link],0,0,0,0.9875096678733826,0.9920843839645386,0.9918400049209596,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,548346453,256,does it not work in 3.10? even though it hasn't been removed yet would it still be nice to get ahead for when we do move on/it is removed? idk i was partly going based on gtk3 docs.,0,0,0,0.982238233089447,0.9765486121177672,0.988210678100586,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,901875380,288,[a link] now deluge mobile client is also available for android and ios. it is open source fork repository give star and feel free to send pr,1,0,1,0.6408905982971191,0.706639289855957,0.52778160572052,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,997355409,288,"looks good, i'll merge it next time i'm working on the code. i thought we might need to leave core method stub for deprecation but core should not be a hard dependency for a ui component. try to include your reasoning for making changes in the commit message.",0,0,1,0.5876213908195496,0.8564532995223999,0.7773144245147705,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,997356046,288,i did actually find that the console ui is also depending on a core module: [a link],0,0,0,0.985509753227234,0.984774112701416,0.9946958422660828,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,997383042,288,"i'll look into it. in addition, i have a problem with adding the security only unittest to the ci. do you have an idea?",0,0,0,0.9686571955680848,0.9432601928710938,0.950125515460968,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,890389292,312,fyi the failing tests are due to twisted 21.7.0 release with incorrect twisted defer import in test_torrent,0,0,0,0.9286766648292542,0.8309361338615417,0.9593477845191956,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,890425484,312,"torrent_test.py `test_torrent_error_resume_data_unaltered` seems to fail with libtorrent 2.0, maybe it's the same issue as with 1.2? `test_console_command_add` in test_ui_entry.py seems to hang, currently trying to figure out why edit: ~~deluge-console seems to hang, but deluge-web and deluge-gtk work fine~~ deluge-console seems to work entirely fine outside of tests, but hangs when doing tests. edit 2: deluge-console will silently hang if connecting to localhost, username/password aren't provided, and `localclient` isn't in the auth file. (this should be unrelated to tests) edit 3: i give up, test_ui_entry refuses to work and i can't figure out why. i've got an instance running with libtorrent 2 for a day now and it's been stable",0,0,0,0.7840998768806458,0.8734804391860962,0.793689489364624,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,890446310,312,"it seems the disk cache was removed from libtorrent in favor of mmap, but i'm not sure. there's still a few places in deluge that request `disk.num_blocks_cache_hits` and `disk.read_cache_blocks`, which no longer exist.",0,0,0,0.9760037660598756,0.9369112849235536,0.986353039741516,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,896624624,312,no releases in 2 years and you're adding v2 support!,0,0,1,0.9271954298019408,0.8445136547088623,0.5887119770050049,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,924389304,312,i have merged the stats plugin commit: ea609cd3e0193c395 i'll have a look at what is needed for libtorrent 2.0 support,0,0,0,0.9752110838890076,0.958534300327301,0.9800889492034912,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,933001794,312,merged 89189adb24321c,0,0,0,0.9848029613494872,0.9836704730987548,0.9913075566291808,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,933002129,312,thanks i added a workaround for lt 2.0 file_progress issue until fixed in 2.0.5 and the tests are very slow for some reason under lt 2.0,1,1,1,0.9612233638763428,0.8390569686889648,0.932640790939331,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,52536086,7,the codepainter changes should be rebased into the original commit.,0,0,0,0.9862923622131348,0.9924957752227784,0.9940890073776244,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,52561119,7,"everything should be fixed, you were right in everything that you pointed out.",0,0,1,0.936879813671112,0.8902419209480286,0.5627893209457397,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,52614462,7,"ok it looks good, the only problem i can see is that the `port` entry box is not given enough space and entering a port number causes `hboxhost` to shift left. i think putting port on the line below would be better. the vertical space shouldn't be an issue as it's unlikely anyone is going to be putting more than a few entries in recipients box, although you could use `hideheaders` to match the gtk layout and save a little space.",1,0,1,0.6396694183349609,0.9098060131072998,0.6154671311378479,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,52614671,7,"yup, i agree, i'll make the changes as soon as i can.",0,0,0,0.786422610282898,0.8920304775238037,0.9464920163154602,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,52643135,7,everything should fixed. i also made the password not visible.,0,0,0,0.9847416281700134,0.977652907371521,0.9213240146636964,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,52652417,7,"thanks, i added a commit with a few minor changes to fix alignment.",1,1,1,0.7466564178466797,0.8354753851890564,0.8847801089286804,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59324763,20,"if deluge is compiled and run from python, deluge_exe = c:\python27\deluge.exe when it should be c:\python27\scripts\deluge.exe in order to work. there for if the file path that is made by deluge_exe doesnt exist dont set a registry key to associate magnets with a non existing program. i believe this is the only case this will happen. since its just giving the path to python.exe and then adding deluge.exe we could maybe just set deluge_exe like it is but just add ""/scripts"" to it in a try block or something but thats up to you devs.",0,0,0,0.7628918290138245,0.9917300343513488,0.982980251312256,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59330542,20,updated this to still work if run from python but still set the exe path like it was if its not. imo the check to see if the file set by deluge_exe exists should still be in place to prevent any odd cases.,0,0,0,0.9858440160751344,0.9818764925003052,0.9876018166542052,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59330983,20,fixed syntax issue should be all set now.,0,0,0,0.9863998889923096,0.9869869351387024,0.9923073649406432,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,59331179,20,opps now it should be lol,1,1,1,0.881490170955658,0.9821116924285888,0.4686813056468963,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,60383636,20,is there anything else i should do?,0,0,0,0.9684336185455322,0.9856625199317932,0.9832383394241332,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,61934843,20,this one is all clean too.,0,0,0,0.9348999857902528,0.8616768717765808,0.9843910932540894,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,250022422,108,i'm sorry this has to be fixed in libtorrent as a deprecated method. by all means provide to package managers as interim workaround.,-1,-1,-1,0.9865339994430542,0.9911383986473083,0.9870953559875488,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,250068726,108,"i'm not sure how this should be solved then. to my understanding, the method was removed at your request to be able to distinguish whether the feature is available or not: [a link]",0,0,0,0.8074262142181396,0.829436182975769,0.9566929340362548,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,250085951,108,this seems like a reasonable fix to allow deluge to work with newer versions of libtorrent. why don't we just include it? it's harmless if the function is re-added to future libtorrent versions.,0,0,0,0.9680188894271852,0.9655616879463196,0.9681100845336914,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,250112196,108,"i forgot about that change... so the actual fix is for the try block to also catch the attributeerror, at the time i think i assumed a runtimeerror would be raised. i am trying to avoid any changes to 1.3 codebase so either 1.1 is backward compatible or it is not. i know this pr is for develop but these compatibility changes would have to be made to 1.3 as well.",0,0,0,0.7648228406906128,0.8908329010009766,0.9396589398384094,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,250114444,108,looking at the [a link] it has a general exception catch so that is fine. i shall just commit the changes to develop code. thanks minus for investigating! :),1,1,1,0.992821991443634,0.9960821270942688,0.9963930249214172,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,250120412,108,fix details in [a link],0,0,0,0.9878289699554444,0.9922903180122375,0.9957798719406128,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255475693,122,i wanted to avoid doing it this way so as to not introduce any extra potential slowness.,0,0,0,0.6104015111923218,0.899501621723175,0.9399491548538208,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,255480985,122,which bit of code would be slow?,0,-1,0,0.9536200165748596,0.515157163143158,0.9611921310424804,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,256302349,122,"thanks for these changes, i made a few tweaks and is now merged: c4282f29abbd",1,1,1,0.9311597943305968,0.9641188383102416,0.9645209908485411,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,306238379,157,thanks for this but how can this be scripted? all the png images under `deluge/ui/data` and `deluge/ui/web/icons` are generated from svgs. also this is failing the tests because you compressed a comparison png.,0,1,1,0.6571567058563232,0.7851287126541138,0.9332213401794434,1.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,306244870,157,i used advpng and pngout so you could probably use that but would have to add it to the build requirements which would then make the build bigger. i have added a fix for the comparison test,0,0,0,0.9798177480697632,0.9907087087631226,0.9933962821960448,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,306249414,157,it is a dev tool not for inclusion with build. i see that `advpng` is available for ubuntu with `apt install advancecomp` so we can use that. the current scripts under `deluge/scripts` can be extended to run over the pngs and compress them.,0,0,0,0.9875686764717102,0.9928271174430848,0.9944408535957336,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,306250425,157,that sounds good to me,1,1,1,0.9726038575172424,0.8779123425483704,0.9252197742462158,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,325446289,157,advpng is not very good. pngcrush is also available in ubuntu and will probably give you much better results. see [a link] for a comparison of various tools. converting the gifs to png should also help.,0,0,0,0.8975211977958679,0.936168372631073,0.8893964886665344,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,399114868,157,pngs have been compressed with zopflipng: fe42fb2c31d87b013,0,0,0,0.9826580882072448,0.9907305836677552,0.9906826019287108,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,399701418,187,this ok now?,0,0,0,0.9838951230049132,0.9746592044830322,0.9687545299530028,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,399701962,187,"i need to test what is and isn't allowed, i asked for clarification but no definitive answer: arvidn/libtorrent#3087",0,0,0,0.9816174507141112,0.8772462010383606,0.9857819080352784,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,426956647,187,"after discussing with arvidn, i removed the checks and made the code changes: c415b097fe thanks for helping with this.",1,1,1,0.818922758102417,0.7277790904045105,0.9074809551239014,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,405284746,203,"merged, thanks.",1,1,1,0.844279408454895,0.9531146287918092,0.6970474720001221,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,626304275,289,"in the commit message, please use [core] instead of [torrentmanager], it's too specific. can you also include a link to the github discussion, thanks",1,0,0,0.92854905128479,0.9039762616157532,0.5136888027191162,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,789935024,289,hey -- can you merge it ?,0,0,0,0.965667724609375,0.9688419103622437,0.9937894940376282,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,818581343,289,why is it not being merged? why is deluge so dead?,-1,0,0,0.6373629570007324,0.8822649717330933,0.808517336845398,0.0,accept,majority_agreement,2
deluge-torrent/deluge,comments,821847878,289,"thanks , sorry took so long to merge: 8676a0d2a",-1,-1,-1,0.9838948845863342,0.9894726872444152,0.9897772669792176,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,664199440,298,"afaics both updated files are about installing as service. correct me if i am wrong but as far as i know the edit: i am wrong. deluge-web-debug version of each executable is the one to be used for installation as a service. 1. maybe the above distinction is windows only? - edit: i have just installed a focal, yes it, sorry it is confusing vs. windows deluge 2. i do find this very misleading, because in reality -l debug is the command line parameter that enables debug logging. 3. not sure if it is my place to say, but i do usually promote using -l warning by default, this will log events that point to performance bottlenecks (e.g. reaching certain buffer / list size / bandwidth limits).",-1,-1,-1,0.9861112833023072,0.967854619026184,0.8914976716041565,-1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,664387687,298,"no; you can see in the [a link] that there's no `-d` option for `deluge-web` (which as you point out is a separate executable). in the `deluged` executable, `-d` is for `--do-not-daemonize`. i think (but have not checked) this option may have once existed in `deluge-web` too, but either way, it needs to be removed from these service docs because when someone tries to build a systemd service that tells the system to run `deluge-web` with `-d`, it is going to fail: [code block]",0,0,0,0.9781384468078612,0.9949786067008972,0.9889692068099976,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,664451580,298,on [a link] you find the statement `self.parser.add_process_arg_group()` which is a call on [a link] which adds the `--do-not-daemonize` option when not on windows.,0,0,0,0.9889694452285768,0.9946784973144532,0.9943285584449768,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,664456170,298,"hmm, thanks for the correction . i encountered that ""no such option"" error on a raspberry pi running deluge-web version 1.3.13.",1,1,1,0.7573491334915161,0.90255469083786,0.9405606985092164,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,664466942,298,"yeah, the `-d` option in deluge-web is new in deluge v2",0,0,0,0.9848665595054626,0.9941059350967408,0.990323543548584,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,664472987,298,thanks!,1,1,1,0.9308210015296936,0.9051083922386168,0.8631755113601685,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005952827,332,i saw it in [a link] so i copied the behavior in case it still exists. change that too?,0,0,0,0.9870525002479552,0.991503357887268,0.9939274787902832,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005972433,332,yep change there too :+1:,1,1,1,0.5881515741348267,0.9703208208084106,0.9859246611595154,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005989667,332,"that looks fine, do you mind updating the commit message to mention the reason for change and reference commit id 9b812a4",0,0,0,0.8805557489395142,0.8949386477470398,0.8897630572319031,0.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1005996554,332,hope it is good enough :grinning_face_with_smiling_eyes:,1,1,1,0.9777838587760924,0.523951530456543,0.9961657524108888,1.0,accept,unanimous_agreement,2
deluge-torrent/deluge,comments,1006439474,332,"that was exactly what was needed :+1: remember to add a reference to the trac ticket in commit messages too, something like this: ![a link] i automatically add the pr close line to simplify workflow so don't worry about that.",1,1,1,0.9083489775657654,0.535487949848175,0.9932457804679872,1.0,accept,unanimous_agreement,2
