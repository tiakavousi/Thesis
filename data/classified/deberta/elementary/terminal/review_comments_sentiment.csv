id,pr_number,user,created_at,body,deberta_sentiment_label,deberta_confidence
1305967069,737,Marukesu,2023-08-25T17:46:29Z,this will break having the first window be created by the action when we enable dbus activation (the only thing that was stopping us of doing that was the duplicate tab). so the `active_window == null` is necessary here.,0,0.9898903369903564
1305967517,737,Marukesu,2023-08-25T17:46:50Z,"please, keep the separate callback, it makes easier to breakpoint it during debug after.",0,0.9928170442581177
1305967789,737,Marukesu,2023-08-25T17:47:07Z,"no need for the default value here, options.lookup() will always set a value.",0,0.9929163455963135
1305968505,737,Marukesu,2023-08-25T17:47:58Z,"this commentary doesn't make sense any more. before, launching with one of `-x`, `-e`, or with a command didn't restored tabs. but now the behaviour is to always restore if `-n` is not used too.",0,0.9221972823143005
1305969380,737,Marukesu,2023-08-25T17:49:01Z,"keep the options.lookup() inline here, it's not only getting the value of `new-window` option, but validating that it's a boolean value too.",0,0.9928592443466187
1305969715,737,Marukesu,2023-08-25T17:49:27Z,"if this is the first window, we aren't restoring. is that expected? i don't see a why `-n` won't restore the last session if it's the first window.",0,0.9863200783729553
1305970529,737,Marukesu,2023-08-25T17:50:23Z,"this cannot even happen, because we are always creating a tab above.",0,0.9755545258522034
1305971317,737,Marukesu,2023-08-25T17:51:21Z,i believe the agreement in the files pr was that we always save the last closed window state. not the first opened one.,0,0.9886511564254761
1305972264,737,Marukesu,2023-08-25T17:52:28Z,"this is in the wrong callback no? here we aren't creating a new window, so you are actually checking the restored tabs.",0,0.9863362312316895
1306379862,737,jeremypw,2023-08-26T08:41:39Z,i think is is cleaner and more predictable if `-n` always creates a fresh new window. if the user wants restored tabs then omit the `-n`.,0,0.97367924451828
1306380186,737,jeremypw,2023-08-26T08:44:45Z,it can happen if the `execute` option is used without any command.,0,0.989941418170929
1306386907,737,jeremypw,2023-08-26T09:16:56Z,"yes, i was checking something - not needed now.",0,0.9904811978340149
1306623175,737,jeremypw,2023-08-27T08:25:19Z,done,0,0.8682363629341125
1306624829,737,jeremypw,2023-08-27T08:36:11Z,that will not work. we need a value for `new_window` when `window` is `null`. if `window` is `null` and the lookup is inline then `new_window` will be undefined because of lazy evaluation of or expression.,0,0.9837627410888672
1306692410,737,Marukesu,2023-08-27T16:40:13Z,"you can use `window != null` in the restore_tabs argument, that has the same meaning of `new_window` being true.",0,0.9943901896476746
1306693248,737,Marukesu,2023-08-27T16:47:15Z,"keep in mind that `-n` will also mean a hard ""drop tabs"" when used in the first launch, because there's no way to not restore the tabs in any other case that isn't the first launch. if you fine with that behaviour, i won't oppose the change.",0,0.982300877571106
1306702544,737,jeremypw,2023-08-27T18:08:24Z,on reflection i have left restoring tabs to mainwindow and not dependent on options as it is simpler.,0,0.993133008480072
1306702964,737,jeremypw,2023-08-27T18:11:44Z,not sure what this means :disappointed: as i am not sure how dbus activation works. could you give more details or suggested code?,-1,0.9948128461837769
1306719337,737,Marukesu,2023-08-27T20:34:30Z,"as explained, working-directory isn't meant to be a real option, also assert here isn't right, as it will force quit the primary instance.",0,0.9880818128585815
1306719370,737,Marukesu,2023-08-27T20:34:50Z,this won't respect the current working directory as the others.,0,0.9763815999031067
1306719954,737,Marukesu,2023-08-27T20:40:24Z,[code block] then you can drop both the `window_number` and `is_first_window` properties.,0,0.9931967258453369
1306719963,737,Marukesu,2023-08-27T20:40:30Z,unnecessary comment.,0,0.8323933482170105
1306720003,737,Marukesu,2023-08-27T20:40:50Z,this doesn't need to be public.,0,0.9713937640190125
1306720458,737,Marukesu,2023-08-27T20:45:37Z,"it's better to keep any ""current directory"" concept exclusive to the application class. because of the local/primary instance logic.",0,0.9916519522666931
1306720568,737,Marukesu,2023-08-27T20:46:43Z,"this test was made to assert that we always create a new tab when requested, so this change is wrong.",0,0.8270595073699951
1306720582,737,Marukesu,2023-08-27T20:46:54Z,"now that we aren't creating the extra tab, this should be 4.",0,0.9889633655548096
1307271179,737,jeremypw,2023-08-28T10:50:54Z,i'll remove the assert before merge - that is for testing. so far i havent been able to trigger it so probably do not need a fallback?,0,0.9930476546287537
1307273991,737,jeremypw,2023-08-28T10:54:08Z,"whether or not it respects the current working directory depends on the ""follow-last-tab"" setting (that is what the *default* tab does) since it uses the action-new-tab. this is for consistency with other situations where there is no specified tab.",0,0.9933586716651917
1307274683,737,jeremypw,2023-08-28T10:55:00Z,that does not work. the number of windows in the app may change after construction of the window.,0,0.9695395231246948
1307276490,737,jeremypw,2023-08-28T10:57:12Z,debatable but i'll remove it.,0,0.9463216662406921
1307277214,737,jeremypw,2023-08-28T10:58:06Z,"oh yes, i was going to call it directly but opted for activate_action instead. will revert.",0,0.9896915555000305
1307278429,737,jeremypw,2023-08-28T10:59:27Z,so what do you suggest?,0,0.9910747408866882
1307279514,737,jeremypw,2023-08-28T11:00:43Z,it is necessary for the test to pass. if the original test is correct then the app is wrong,0,0.9886329770088196
1307281475,737,jeremypw,2023-08-28T11:02:49Z,hmm then it should be failing - will investigate.,0,0.9346413612365723
1307514692,737,jeremypw,2023-08-28T14:36:53Z,"so what i *think* is happening is that the test environment opens a window without restoring tabs *before* processing the option. so there is already a default tab in the window and the execute option creates 4 more, one for each command, giving a total of 5. however this does not seem to be the case for the `-t` option test so tbh i am not on what exactly happening in the test environment. if you manually execute multiple commands before any window is opened e.g. with a commandline `io.elementary.terminal -e ""true"" -e ""echo hi""` then no extra default tab appears.",0,0.9657121896743774
1307534896,737,jeremypw,2023-08-28T14:52:58Z,if you run `io.elementary.terminal -t` manually without a terminal window open you get one tab (as expected). if you run the same command with the primary window open (but no restored tabs) then you get 2 tabs - the original default one and the requested additional one. i am not exactly sure what happens in the test environment - does a window get created before the options are processed or not?,0,0.9859419465065002
1307552403,737,jeremypw,2023-08-28T15:06:42Z,after some investigation it seems like before processing the commandline in `option ()` there is 1 window with 1 tab. so i would have expected `-t` true to create a new tab like when used manually. but it doesn't in the test environment for some reason.,0,0.9781545996665955
1307575458,737,jeremypw,2023-08-28T15:26:30Z,"ok, so it is race - the callback is executed before the window terminal list is updated in the `on_tab_added` signal handler. need to get a more immediate count of true number of tabs in the notebook. i'll review whether the terminals list is needed or not.",0,0.9926067590713501
1307623682,737,jeremypw,2023-08-28T16:07:25Z,note: environment.get_current_dir () is already in use in terminalwidget,0,0.9941344857215881
1307632234,737,jeremypw,2023-08-28T16:12:59Z,this also replaces functionality removed from mainwindow so i want to keep the behaviour the same.,0,0.9946781396865845
1307636979,737,jeremypw,2023-08-28T16:16:01Z,apologies - i see that is now only called during construct so we can replace with a direct call now. previously it was called later (e.g. while saving tabs).,0,0.9909088015556335
1307652346,737,jeremypw,2023-08-28T16:26:19Z,further investigation indicates that 5 tabs are added during this test including one due to a restore-saved-tabs attempt that should not be happening.,0,0.9923855066299438
1307736406,737,Marukesu,2023-08-28T17:54:52Z,"so, what's happening here is that `add_tab_with_working_directory()` is matching the already existent tab (from the first launch), and `add_default_tab()` is not creating one because `window.terminals.length () == 1`.",0,0.9922961592674255
1307742059,737,Marukesu,2023-08-28T18:00:36Z,"simillary as the new-tab test, there's 1 tab from first launch, and 4 from the commands, the sixty one seems strange.",-1,0.5565195679664612
1307755647,737,Marukesu,2023-08-28T18:16:06Z,"only the application class known the real working directory for the current invocation, so either action-new-tab is updated to take a path, or we don't try to use the action in the command line context, where is the only place that a concept of working directory exists. it actually isn't, the only place that we call activate_shell() without a location is in the case that we call new_tab() with a empty location, what isn't possible.",0,0.9932667016983032
1307761902,737,Marukesu,2023-08-28T18:22:36Z,"this is already being inconsistent with the others command line options handling, where the current working directory is always respected. the code in the action-new-tab won't respect it either, it will either use the last tab directory or the current working directory of the first invocation.",0,0.9446228742599487
238356714,330,jeremypw,2018-12-03T17:09:55Z,do you mean `if (current_terminal != null) {`? otherwise this is redundant since you check for null uri later.,0,0.9932458996772766
238356767,330,jeremypw,2018-12-03T17:10:03Z,should not use underscores in action names (i know the existing ones need changing) although only affects certain functions.,0,0.9889954328536987
238357627,330,jeremypw,2018-12-03T17:12:12Z,gtk.show_uri is deprecated. use gtk.show_uri_on_window,0,0.9833816289901733
238358206,330,jeremypw,2018-12-03T17:13:41Z,"spelling: ""lunch"" -> ""launch""",0,0.9807135462760925
238359155,330,jeremypw,2018-12-03T17:16:09Z,this relies on a certain menu order. i would just disable the linked action and not hide the option.,0,0.9921746850013733
238360202,330,jeremypw,2018-12-03T17:18:53Z,why do you need this? you reset uri and the action in the following code.,0,0.9942177534103394
238364597,330,Mohelm97,2018-12-03T17:31:15Z,"yeah so this is an old not current behaviour, if you make the context menu on top of uri you will got the copy enabled, but if you close it and open it somewhere else no one changes the copy state so it will stay enabled, but it should not be enabled as there's nothing selected and we are not on top of uri",0,0.9891929030418396
238365052,330,Mohelm97,2018-12-03T17:32:38Z,"i hide it because i thought the i would be annoying to have an almost always disabled menu item, so it's just the first one if you have a link, or it won't appear",-1,0.5376588702201843
238383302,330,jeremypw,2018-12-03T18:25:57Z,"i'll flag this for /ux comment. if the item is to be hidden, is there a way of doing it that is not dependent on a particular order?",0,0.9954972267150879
238389394,330,Mohelm97,2018-12-03T18:43:45Z,i don't know they only idea i came up with is storing this menu item but it's not a good idea too :(,-1,0.9963395595550537
238672986,330,jeremypw,2018-12-04T14:02:26Z,"sorry yes, you are right. the first clause could be true and the second false (or vice versa) so both are needed.",-1,0.9345659613609314
238674483,330,jeremypw,2018-12-04T14:06:23Z,"in files this problem is solved by building the context menu on the fly each time it is required since the context varies a lot. i'd have to study the code in more detail to see whether that is appropriate here though. i note the elementary hig says that it is *usually* better to make a widget insensitive than hide it although there are exceptions (like when certain hardware conditions will never be met). another suggestion would be for the ""show in file browser"" option to change to ""show in web browser"" when the context menu relates to a web address.",0,0.9896517395973206
238699836,330,Mohelm97,2018-12-04T15:06:22Z,"i think editing the ""show in file browser"" is a better idea, i will just wait for the ux team to comment on this as i won't be able to edit anything today :d",1,0.9926509261131287
364873841,330,danirabbit,2020-01-09T17:41:56Z,"i see how this is technically just a uri, but i don't think it's clear that the location will open in files when this menuitem is triggered the majority of the time. this label feels like optimizing for the less-likely case that we're opening a web url i think this might be better off waiting for a version of granite where we can easily update this label based on the uri scheme",0,0.9679051041603088
364892430,330,jeremypw,2020-01-09T18:25:47Z,"ok, seems like a plan.",0,0.9784058332443237
370329016,330,cassidyjames,2020-01-23T20:07:14Z,"no, the ""show in file browser"" item relates to the whole view and not what's being clicked on specifically; that's why it's separated below the text items. an ""open in browser"" item should probably be grouped along with the text-related items up above. i'm not super picky about whether it's insensitive or hidden when it's irrelevant; i feel like for context menus when you're clicking on a specific item it makes sense to only show items relevant to that item, i.e. not showing the ""open in browser"" item at all unless a link is being clicked. but if it greatly simplifies things to always show it and only toggle sensitivity, i think we'd want it to be at the bottom of the text-related items, at least. thoughts?",0,0.9702099561691284
370531654,330,jeremypw,2020-01-24T09:09:10Z,"there is precedent for the same menuitem applying to either an item or the background depending on the context - e.g. the ""open in"" menuitem in files.",0,0.9928629994392395
430643621,330,danirabbit,2020-05-26T19:09:02Z,this is kind of a mess. should probably be [code block] [code block],-1,0.9864198565483093
430644156,330,danirabbit,2020-05-26T19:10:02Z,"if this is moved (which is fine, this is probably more consistent with menuitem placement elsewhere), we probably need to add a separator beneath it",0,0.9901070594787598
430644740,330,danirabbit,2020-05-26T19:11:09Z,"it doesn't seem intentional to remove this. if it is, then `update_context_menu_cb` should also be removed since it is now never used",0,0.9836670160293579
430645533,330,danirabbit,2020-05-26T19:12:40Z,should probably avoid breaking translations here [code block],0,0.9823854565620422
434014980,330,jeremypw,2020-06-02T16:32:21Z,"ok, done. it was moved to match the position of the ""open in"" item in files.",0,0.9866402745246887
436181822,330,danirabbit,2020-06-05T21:57:05Z,this is now never used right?,0,0.9929348826408386
436182314,330,danirabbit,2020-06-05T21:58:38Z,looks like an extra blank line snuck in,0,0.9699289202690125
436184687,330,danirabbit,2020-06-05T22:03:01Z,can you explain what case this covers? i'm unsure what this is intended to do,0,0.8677709102630615
436361622,330,jeremypw,2020-06-07T13:09:11Z,"this covers everything that * does not have an explicit scheme and/or * does not have a recognisable extension (i.e. the content type cannot be guessed) for example, the pwd is opened through this fallback. this is a simple, low code alternative to creating a glib.file and trying to read the file attributes (which is what files does). we use `gtk.open_uri_on_window ()` to actually open the uri and we do not specify the app to use so we have to make sure that the label matches what will actually happen. so i think we will either have to specify the app or use the longer method of getting the default app :-( also i found that, at the moment `.` and `~` are not being interpreted in the selection so there is a bit more work to be done. setting back to draft.",0,0.982879102230072
436361773,330,jeremypw,2020-06-07T13:10:50Z,removed,0,0.9591778516769409
436361797,330,jeremypw,2020-06-07T13:11:03Z,oops,0,0.6581283807754517
436361833,330,jeremypw,2020-06-07T13:11:22Z,fixed,0,0.920660674571991
436375595,330,jeremypw,2020-06-07T15:39:30Z,"after latest commits, no longer guess content. also interpret ""~"" and "".."" in path. needs testing with unusual characters in filename.",0,0.9945605397224426
637952633,584,felix-andreas,2021-05-24T13:40:21Z,"this gets called ""whenever the visible appearance of the terminal has changed"". this means it is called on every keystroke and also when a program which outputs a log messages or graphical program like htop changes the contents of the terminal. so this means it is called approximately 50-500 times per minute for normal terminal usage. so it should be made sure that this calls are not too expensive. at the moment this callback eventually calls `save_opened_terminals`, which is relatively expensive operation. for my machine the cpu usage more than doubled when using vim. on counter measure would be to check if the terminal has a running foreground process and return immediately if this is the case.",0,0.9311234951019287
637954899,584,felix-andreas,2021-05-24T13:43:29Z,maybe this should also only be run on user input and not if the contents of the terminal are changed by a program.,0,0.9815655946731567
638068546,584,felix-andreas,2021-05-24T15:49:56Z,denouncing the `contents_changed` by ~500ms could probably also help.,0,0.9910907745361328
638069791,584,felix-andreas,2021-05-24T15:51:44Z,another idea: doesn't changing the directory always require to press enter ? wouldn't be the simplest solution to schedule the name_check every time enter is pressed and no foreground process is running?,0,0.9908175468444824
638157073,584,felix-andreas,2021-05-24T17:56:50Z,[code block] could this be simplified?,0,0.9950478672981262
638161396,584,felix-andreas,2021-05-24T18:04:47Z,would it be possible to move this to `terminalwidget` and make use of `bind_property` to automatically update the tooltip?,0,0.9938726425170898
638165339,584,felix-andreas,2021-05-24T18:12:49Z,"or, just move this to the `check_cwd_changed` function.",0,0.9940144419670105
638168174,584,felix-andreas,2021-05-24T18:18:14Z,why do you have to check here? to my understanding a child process shouldn't be able to change the cwd of the parent.,0,0.9843322038650513
638168478,584,felix-andreas,2021-05-24T18:18:54Z,if you call check_cwd_changed in active_shell you can remove it here.,0,0.9952919483184814
638668900,584,jeremypw,2021-05-25T10:39:14Z,"ok, i'll move it to `check_cwd_changed` it doesn't need to be here.",0,0.9936357736587524
638684384,584,jeremypw,2021-05-25T11:03:05Z,tried `bind_property` but doesnt work because `granite.widgets.tab` resets the tooltip_text everytime the label text is reassigned - which may happen even when the cwd has not changed. so i think its better to leave it as it is tbh. we do not want to reassign it on every call to `check_cwd_changed`,0,0.9599753022193909
638691401,584,jeremypw,2021-05-25T11:14:07Z,"ok, i wasnt sure so i played safe. removing.",0,0.9442555904388428
638692053,584,jeremypw,2021-05-25T11:15:02Z,well spotted.,0,0.9860921502113342
638702226,584,jeremypw,2021-05-25T11:30:58Z,"the cwd can be changed by scripts, which are not foreground processes(? i think). if there is a way of detecting when a bash script is running (or detecting when a script inserts `enter`) then that would be more efficient",0,0.9911973476409912
638785005,584,felix-andreas,2021-05-25T13:25:49Z,[code block] is the `closing_current_terminal` variable necessary?,0,0.9956434965133667
638805352,584,felix-andreas,2021-05-25T13:48:28Z,why do you have introduced the check here? how can changing the tabs change the names?,0,0.9942877888679504
638817462,584,felix-andreas,2021-05-25T14:01:23Z,"as the loop goes over all permutations instead of all combinations, i think this can be simplified to: [code block] sorry github doesn't makes it possible to make suggestions for deleted lines, so i had to split this up in to.",-1,0.9174504280090332
638825266,584,felix-andreas,2021-05-25T14:09:58Z,"the only thing that still bother me a little bit, is that this is also triggered for foreground processes. guarding it with a `has_foreground_process` check probably doesn't make sense, because i assume they are comparatively expensive. anyway it probably doesn't matter so much, i didn't see any performance differences on my machine.",0,0.7537687420845032
638826740,584,felix-andreas,2021-05-25T14:11:34Z,"one solution would be to unregistered the callback when a foreground process is running and re-register it on `child_exited`. but this is probably a unnecessary micro optimizations, just came to my mind.",0,0.9615188837051392
638835166,584,jeremypw,2021-05-25T14:20:50Z,i thought `current_terminal` may have already changed by that point so this seemed safer. i guess the check is only needed when the current_terminal is not closed in which it will not have changed so your way may work - i'll try it.,0,0.9893397688865662
638837610,584,jeremypw,2021-05-25T14:23:24Z,because pages are switched when a tab is closed or dragged out of the window - but it would probably be better to deal with those cases directly.,0,0.9853317141532898
638842801,584,jeremypw,2021-05-25T14:29:02Z,with these changes i find that closing a tab and then re-opening it only disambiguates one of the tabs - the other keeps the basename. i don't think this is what is wanted.,0,0.979580819606781
638849947,584,jeremypw,2021-05-25T14:36:33Z,"this is because when first terminal has already been disambiguated, the basename of the second terminal no longer matches it so the second term is never disambiguated.",0,0.992408037185669
638860266,584,jeremypw,2021-05-25T14:47:46Z,"yes, that seems to work ok - thanks.",1,0.8924553990364075
638864208,584,jeremypw,2021-05-25T14:51:48Z,"yes, if foreground processes cannot change the cwd then this check is unnecessary. but i doubt whether the extra complexity of code is worth the (undetectable) performance gain.",0,0.9805678725242615
638864952,584,felix-andreas,2021-05-25T14:52:36Z,"if the script is run in a sub-process (which is in my understanding equivalent to foreground process) like this [code block] it shouldn't be able to change the cwd. but if somebody sources a script which changes the cwd script like this [code block] yes then it could the change the cwd. this is probably really rare so you have to decide if it is worth taking into acount.. also there is already some kind of precedent set with the `remember_position` which relies on the enter key being pressed. using the `contents_changed` signal introduces a second mechanism for similar issue: both want to check if a command was executed. imo, ideally both should rely on the same mechanism.",0,0.9825960397720337
638866935,584,felix-andreas,2021-05-25T14:54:41Z,ok makes sense. i don't have an opinion what is better here.,0,0.9000808596611023
638869500,584,felix-andreas,2021-05-25T14:57:24Z,"hmm ok, still i think it should be possible to somehow to get away with doing half the work as the loop runs over all the permutations. anyway this is a different issue.",0,0.9629180431365967
638895225,584,felix-andreas,2021-05-25T15:16:14Z,codestyle [code block],0,0.9943273663520813
320552595,386,felix-andreas,2019-09-04T02:49:48Z,both variables are unused,0,0.9918732047080994
325431997,386,felix-andreas,2019-09-17T23:51:44Z,could be simplified to: [code block],0,0.9946563243865967
325583649,386,jeremypw,2019-09-18T09:50:26Z,"ok, done.",0,0.9793679714202881
325609165,386,felix-andreas,2019-09-18T10:56:24Z,i think there is no reason to increment. you could simplify further: ‘‘‘ long delta_cells = clicked_col - current_col + (clicked_row - current_row) * get_column_count (); ‘‘‘,0,0.9881076216697693
326214512,386,felix-andreas,2019-09-19T14:43:19Z,`clicked_symbol` is unused now,0,0.9947090148925781
326279041,386,felix-andreas,2019-09-19T16:51:54Z,i think it should be `gdk.event_propagate`,0,0.9892661571502686
326279186,386,felix-andreas,2019-09-19T16:52:17Z,i think it should be `gdk.event_propagate`,0,0.9892661571502686
326279351,386,felix-andreas,2019-09-19T16:52:41Z,i think it should be `gdk.event_stop`,0,0.9879740476608276
329355759,386,felix-andreas,2019-09-29T14:27:39Z,"just a minor suggestion: as the functions of the `vte.terminal` also use ""absolute"" row-values, would it maybe better to return ""absolute"" values in the `get_cell_clicked_function`? [code block] or is there a reason to prefer ""relative"" values?",0,0.9882699251174927
334246315,386,jeremypw,2019-10-12T17:17:48Z,"ok, i have now used absolute values consistently.",0,0.9903013706207275
341363922,386,felix-andreas,2019-10-31T21:01:39Z,just add [code block] here to fix the scrolling problem,0,0.9948855042457581
341378759,386,felix-andreas,2019-10-31T21:44:20Z,wouldn't it be better to use the `cursor_moved` signal here? this should cover all cases. [code block],0,0.9947662353515625
341808516,386,jeremypw,2019-11-02T11:49:58Z,"i don't think so. we only want to remember the cursor position after the last key press, not when the cursor is moved for other reasons (e.g. due to output from a process).",0,0.9777717590332031
427508619,505,cassidyjames,2020-05-19T18:21:34Z,"i don't think we should add this to be honest. it's such a specific, finicky setting. we should just ensure the default behavior makes sense. :smile: [code block]",1,0.9775431752204895
427508808,505,cassidyjames,2020-05-19T18:21:53Z,see previous comment. [code block],0,0.9951267242431641
517599793,505,cassidyjames,2020-11-04T20:04:29Z,i think something like this would more closely follow our whitespace conventions and is much easier to read: [code block],0,0.9650609493255615
517600500,505,cassidyjames,2020-11-04T20:05:47Z,"similar to above, i think this more closely follows our modern conventions: [code block]",0,0.9867967367172241
518866831,505,jeremypw,2020-11-06T16:34:39Z,"hmm, that is not the intended behaviour - there is already a separate ""zoom"" setting for the fallback zoom for new tabs. i expected that to be used where a tab did not have a corresponding ""tab-zoom"" value (which cannot guaranteed as the settings could be manually sent to an empty or invalid array regardless of the default value). i'll look at this part of the code more closely.",0,0.9718409180641174
518922507,505,jeremypw,2020-11-06T18:15:01Z,"ok, recent commits should fix the problem.",0,0.9924861192703247
520840450,505,meisenzahl,2020-11-10T20:03:21Z,"what effect do these values have? i tested in terminal with 3 tabs: 25% (min), 100% (default) and 400% (max) these were the values in the settings: `['0,2', '1,0', '4,0']`",0,0.9935150146484375
521446702,505,jeremypw,2020-11-11T15:40:50Z,"these values prevent manual entering of out of range default zoom values into the settings using dconf-editor or otherwise. they are not essential as the code clamps the values it reads in from the settings anyway, but they inform the user.",0,0.9939092397689819
522243076,505,meisenzahl,2020-11-12T16:31:46Z,"yes, but do the values make sense if i can bypass them via the ui? `['0,2', '1,0', '4,0']` from my point of view it would then have to be changed as follows: [code block]",0,0.9927452206611633
1376581376,742,jeremypw,2023-10-30T17:28:27Z,this function appears redundant? it just calls another function with the same signature.,0,0.9729076027870178
1376583412,742,jeremypw,2023-10-30T17:29:50Z,i don't think this call is necessary - the function is called by the `window_title_changed` signal handler anyway.,0,0.9821001887321472
1376587598,742,jeremypw,2023-10-30T17:32:50Z,i think you need to save the zoom array as well - it will also be reordered.,0,0.991032063961029
1376598884,742,ldrahnik,2023-10-30T17:42:14Z,"i am sorry, i do not know. eventually, i would suggest removing call `check_for_tabs_with_same_name` in master branch as this should be focused only on continuous saving and this line was in master in case this branch would be reverted for example in the future or as unwanted off topic change.",-1,0.9741417169570923
1377636209,742,jeremypw,2023-10-31T13:58:56Z,"ok, it can be left for now.",0,0.9925068020820618
1377641050,742,jeremypw,2023-10-31T14:02:03Z,what is the reason for saving the tabs on `focus-in` event?,0,0.9938256740570068
1377657791,742,ldrahnik,2023-10-31T14:13:02Z,"handle the situation when is opened first terminal, then second one, second one is closed and then is laptop rebooted. without this code would be saved tabs and tab-zooms from second already closed terminal but should be saved from first one.",0,0.9947932362556458
1377684703,742,ldrahnik,2023-10-31T14:30:38Z,"but it works only when is focus passed back to previously opened terminal, do you know what i mean, it works only when the previously opened terminal is in the layer immediately under the closed one or is focused before is laptop turned off.",0,0.9940594434738159
1377793096,742,jeremypw,2023-10-31T15:37:29Z,"yes, the issue of what to do about saving settings in second and subsequent windows is not really decided. one point of view (including me) is that settings only refer to the first opened window (that is what files implements). others think that the last *closed* window is the one that should save the settings (which is what terminal implements). i think the issue you are trying to fix is also present in master because rebooting forcibly kills the process and the save on close code never runs. i would not add this line in this pr since master does not save on focus in and there is no agreed ""right"" answer.",0,0.9775261878967285
1377852489,742,ldrahnik,2023-10-31T16:17:23Z,"i am afraid that i discovered weird behavior without added resaving `tabs` and `tab-zooms` during focus in event. because when i close secondly opened terminal, then i return to previously opened terminal and i for example change cwd in any tab so then is saved broken state, because on cwd are saved only `tabs` and no `tab-zooms`, in other words saving glib.settings calls returns back attack like boomerang :d my added saving to focus in event would solve this problem, and in best way i think or this would be solved by not saving calls and call `tabs` or `tab-zooms` all time so when i return back to previously opened terminal and i start somehow interact with it broken state can not occurs. what do you think?",1,0.8768703937530518
1377915546,742,ldrahnik,2023-10-31T17:06:33Z,"i have also an idea about adding a new bool option `continuous saving` to settings or add variant to existing one `remember tabs` option in settings, change it from bool to select with variants `continuous saving`, `only on close` and `do not save` and could be even by default `only on close` variant or disabled bool settings `remember tabs`.",0,0.9918823838233948
1378712495,742,jeremypw,2023-11-01T12:04:04Z,"yes, on reconsideration i think we have to save on focus-in because the settings must always reflect the state of the current window. i think the issue of whether continuous saving should be optional should be raised separately as it needs signing off by the design team to add another setting. in general elementary tries to avoid too many settings. there would need to be two frequently used situations where different settings are required. why would users not want to continuous save?",0,0.9789851903915405
1378723903,742,ldrahnik,2023-11-01T12:16:45Z,"i can imagine disable continous saving in my script which run when is laptop charging changed to battery. from point of view of elementary apps developers i do not know whether is possible or planned change configuration of each app depending on charging mode so this argument will be probably invalid. and i do not have another argument and it might be even confusing, i mean terminal works differently on battery mode and ac mode.",0,0.8988664150238037
1378746352,742,jeremypw,2023-11-01T12:37:49Z,"yes, i think you would struggle to convince the design team that was a good idea unless the app was really draining the battery with continuous saving - in which case it would be better to throttle it (code autosaving is throttled so that it only happens after one second of inactivity).",0,0.9709394574165344
488078016,542,danirabbit,2020-09-14T16:47:26Z,"hm, it's probably better to stick with the default button look here than hardcoding white",0,0.9580615758895874
488080898,542,danirabbit,2020-09-14T16:52:07Z,we should only have one class per file so we can do [code block],0,0.9926704168319702
488082024,542,danirabbit,2020-09-14T16:53:17Z,is there a reason it's better to call these `01` etc instead of `color_button_black` etc?,0,0.9919014573097229
488082926,542,danirabbit,2020-09-14T16:54:06Z,"since this is only ever called once, we probably don't need a separate function",0,0.9844300746917725
488084499,542,danirabbit,2020-09-14T16:55:50Z,this can be simplified to: [code block],0,0.995418906211853
488089840,542,danirabbit,2020-09-14T17:05:09Z,"we have prior art for using the word ""style"" instead of ""theme"" when referring to the dark and light styles. i'm not sure if we have anything for referring to the app chrome specifically. maybe has suggestions here. these labels should be sentence case as suffixed with "":"" [code block]",0,0.9879692792892456
488090813,542,danirabbit,2020-09-14T17:06:55Z,this should be 6 to align it with the action area and bottom margin of 18 so that we have a total of 24px (double space) between the content and action areas: [code block],0,0.9952309727668762
488093049,542,danirabbit,2020-09-14T17:11:04Z,"these should all be suffixed with "":"" and the more common en_us spelling is ""gray"" [code block]",0,0.9933931231498718
488095569,542,danirabbit,2020-09-14T17:15:20Z,it seems like it would be easier to do: [code block],0,0.9881500005722046
488096506,542,danirabbit,2020-09-14T17:16:49Z,tooltips shouldn't have punctuation [code block],0,0.9317252039909363
488099440,542,danirabbit,2020-09-14T17:21:17Z,is there a reason for changing these from clicked to button press event?,0,0.994756817817688
488107799,542,danirabbit,2020-09-14T17:36:04Z,we should make sure to use the -symbolic variant here [code block],0,0.9951876401901245
492375698,542,sebastianlay,2020-09-21T22:13:11Z,"yeah, i used it since there does not seem to be a dark style for the ""list-add"" icon. but since we are switching to ""list-add-symbolic"" anyways this is not an issue anymore.",0,0.9831274747848511
492377099,542,sebastianlay,2020-09-21T22:16:29Z,"this is matching the naming in gogh. i think it makes sense since it is generally shorter and there are a number of themes where for example ""blue"" does not actually correspond to a blue color.",0,0.9741448760032654
492377220,542,sebastianlay,2020-09-21T22:16:53Z,the more you know!,0,0.9314708113670349
492379076,542,sebastianlay,2020-09-21T22:21:37Z,when deciding on grey/grey i used the same as tilix. but i changed it now to american spelling :),1,0.9463293552398682
492379242,542,sebastianlay,2020-09-21T22:22:00Z,definitely.,0,0.9467660188674927
492380961,542,sebastianlay,2020-09-21T22:26:53Z,actually yes :) i noticed that the `clicked` event for radio buttons is triggered once when the button is activated and (more surprising) once when the button is deactivated. this prevented the updating of the radio buttons from the color preferences dialog. this wasn't an issue until now since the order of the activating/deactivating of the different buttons was just right for this to work.,1,0.9930985569953918
492381467,542,sebastianlay,2020-09-21T22:28:25Z,could you elaborate on when to use which variant? is there some documentation on this somewhere?,0,0.9931649565696716
496248357,542,danirabbit,2020-09-28T21:40:48Z,"basically the `-symbolic` variant will follow the text color whereas the normal variants are full color icons. it's only kind of a historical coincidence that the normal variant for `list-add` happens to be close to the text color in the light style. this will change in a future revision of the icon set. so in this context where we want a simple shape icon that follows the ui text color, `symbolic` is the way to go",0,0.9792750477790833
496248508,542,danirabbit,2020-09-28T21:41:11Z,that makes sense to me!,0,0.9790166020393372
148354989,160,jeremypw,2017-11-01T19:07:38Z,"this needs to be a property and the setter clause needs to contain code that will change the size of the font when the factor changes (with proper checks). the increment, decrement and set_default zoom functions need to be modified accordingly (they only need change the zoom_factor).",0,0.994550883769989
148355334,160,jeremypw,2017-11-01T19:09:12Z,this function is not needed - it is better that it inside the zoom_factor setter to ensure the two remain in sync (zoom_factor should be clamped to sensible levels).,0,0.9932814836502075
148359975,160,jeremypw,2017-11-01T19:28:20Z,some sanity checking of zoom_factor would be a good idea.,0,0.9712475538253784
148360296,160,jeremypw,2017-11-01T19:29:22Z,maybe better to connect to the realize signal to set the font size at the correct time.,0,0.9797576069831848
148361632,160,Thalexander,2017-11-01T19:35:05Z,"that sounds more like another issue, as that problem would have existed before these changes.",0,0.9433252811431885
148518206,160,jeremypw,2017-11-02T12:33:33Z,"at the moment you are duplicating some code in the increment, decrement and restore_default zoom functions and these also contain some range checking. if you simplify these functions to just change the zoom factor then the range checking can be consolidated in the zoom factor setter. also, by binding this property to a setting, you are exposing it directly to the user so sanitizing is more important.",0,0.9905239939689636
148669546,160,Thalexander,2017-11-02T21:48:03Z,"i have simplified the increment, decrement and default zoom functions, i think it makes sense to only test the zoom_factor for the range when increment or decrementing as the functions exist and there is no reason to test it otherwise. what do you think a sane range would be? currently the limits are a maximum of 590% and a minimum of 10%; i think from my testing 40% and 250% seem better limits for what a user is likely to want although i am not sure about the behaviour on hidpi screens.",0,0.9664122462272644
148959881,160,jeremypw,2017-11-05T15:09:05Z,backing variables for properties should be private,0,0.9927957653999329
148960074,160,jeremypw,2017-11-05T15:15:43Z,conventionally a blank line between get and set clauses (after closing brace).,0,0.9902222156524658
148960085,160,jeremypw,2017-11-05T15:15:47Z,"because ""zoom_factor"" property is bound to a setting, it feels better to test value and assign _zoom_factor accordingly rather than assign _zoom_factor and then maybe immediately reassign it - i.e. [code block] (although no adverse effects were noticed your way)",0,0.9879429936408997
129398830,125,donadigo,2017-07-25T19:13:31Z,wouldn't `term.destroy ()` work here?,0,0.9907808899879456
129440395,125,UladRH,2017-07-25T22:18:40Z,"sorry, i don't know what you meant. if after this line add `term.destroy ()`, then all term signals will be disconnected",-1,0.9905741810798645
129440814,125,donadigo,2017-07-25T22:21:18Z,"ah yes, you're right here.",0,0.9514034390449524
133510906,125,donadigo,2017-08-16T17:13:53Z,make this `else if` on the same line as the above `}`: [code block],0,0.9954665899276733
133511010,125,donadigo,2017-08-16T17:14:15Z,add a space between the `handle_paste_event` and `()`.,0,0.9950997233390808
133511286,125,donadigo,2017-08-16T17:15:11Z,could this be called also here? [a link] this is the same code as in this method.,0,0.9953095316886902
141103412,125,jeremypw,2017-09-26T16:02:20Z,unnecessary use of ****this****. there is no ambiguity and rest of this class does not use this form for `searchbar`.,0,0.860054075717926
1650609903,760,leolost2605,2024-06-24T08:49:42Z,i think this will cause a memory leak since the lambda keeps a reference on us and the terminal widget so neither of them will be freed :( see [a link] and [a link],-1,0.9945555925369263
1664868591,760,Marukesu,2024-07-03T22:16:20Z,duplicated line.,0,0.89598149061203
1664868758,760,Marukesu,2024-07-03T22:16:40Z,wrong indentation.,-1,0.5286551713943481
979413803,687,hollyschilling,2022-09-25T14:22:52Z,what is this change?,0,0.9881572127342224
979415135,687,lenemter,2022-09-25T14:34:38Z,a blank line before return,0,0.9923130869865417
979433181,687,jeremypw,2022-09-25T17:10:00Z,as `initial_found` is only used once we can omit it: [code block],0,0.9951339364051819
254505662,265,donadigo,2019-02-07T00:17:12Z,it seems that we should stop using `glib.list` which forces us to use `` which doesn't support `return` or `break`. i would change `terminals` to use `gee.arraylist` or `gee.linkedlist` and then immedietely return here if we found an identical tab.,0,0.9882544279098511
254677099,265,jeremypw,2019-02-07T13:18:52Z,"if the `foreach (terminalwidget t in terminals {}` construction is used it is possible breakout of the loop without changing from glist and saving a local variable. this is what i have done in the latest commit. changing to a gee collection requires more extensive and unrelated changes and should be a separate pr, i think. it would also be possible to use a vala.arraylist at the expense of adding another dependency. at some point it should be possible to replace the gee dependency with a libvala dependency?",0,0.987810492515564
307932704,265,donadigo,2019-07-26T22:51:41Z,why do we need this `allow_duplicate` here? i do not see any calls to this function overriding this argument with `true`.,0,0.9891246557235718
307958997,265,jeremypw,2019-07-27T09:00:43Z,i cannot remember tbh. maybe i was just unsure whether there might be a future need to add a duplicate tab from the commandline e.g. with a new flag. i guess we can remove this parameter for now.,0,0.9709644913673401
363710366,265,jeremypw,2020-01-07T11:41:21Z,duh! how did i miss that?,-1,0.9649246335029602
914062603,662,danirabbit,2022-07-05T18:07:35Z,does this need to be public?,0,0.9898068308830261
914063787,662,danirabbit,2022-07-05T18:09:05Z,"since we have `get_string_palette` now, should this not be a constant and have `get_rgba_palette` use `get_string_palette (prefer_dark ? dark : light)` for its fallback?",0,0.9927957653999329
914108491,662,jeremypw,2022-07-05T18:46:43Z,"this is possible only if we replace the *whole* of the palette if *any* of the custom colors is invalid. is that ok? at the moment, we only replace individual colors.",0,0.9935653805732727
914174227,662,danirabbit,2022-07-05T20:24:04Z,couldn't we do this? [code block],0,0.9933005571365356
914176338,662,danirabbit,2022-07-05T20:27:14Z,i don't think this was meant to be removed. this overwrites the setting with the sanitized palette if we detect that any of the values are invalid,0,0.9824157953262329
915097228,662,jeremypw,2022-07-06T17:35:04Z,reinstated,0,0.9742533564567566
388236504,486,jeremypw,2020-03-05T11:30:56Z,"missing words: should be e.g. ""are you sure you want to kill this process?""",0,0.9481569528579712
388236970,486,jeremypw,2020-03-05T11:31:55Z,superfluous blank line,-1,0.9682365655899048
388237820,486,jeremypw,2020-03-05T11:33:57Z,no need to repeat `d.destroy ()` - move after the if clause and remove else clause.,0,0.9941093921661377
390407602,486,danirabbit,2020-03-10T15:36:40Z,"i feel like we should avoid the word ""kill"". ""terminate"" is probably better language",0,0.9515092372894287
390410427,486,danirabbit,2020-03-10T15:40:27Z,the settings menu probably isn't the right place for this. all of the other menu items here effect all of your tabs. a more appropriate location is probably either the tab menu or the context menu,0,0.9708462953567505
390503780,486,cassidyjames,2020-03-10T17:55:02Z,"even ""terminate"" seems a little... excessive. couldn't it just be “end”?",-1,0.6113908886909485
390508550,486,jeremypw,2020-03-10T18:02:23Z,"there are technical differences between ""kill"" and ""end / terminate"" although we may not need trouble the user with them. i presume the intended use of the option would be to forcibly end (kill) a process that could not be ended normally.",0,0.9891470670700073
115126836,87,danirabbit,2017-05-06T19:05:38Z,"can we not use variable names like `t`? i feel like this makes the code more difficult to read, especially if it ever gets more complex. `terminal_widget` would be more clear",-1,0.5737701654434204
115126866,87,danirabbit,2017-05-06T19:06:57Z,i don't feel like these are good variable names and it makes the code very unclear.,-1,0.9080304503440857
115126894,87,danirabbit,2017-05-06T19:08:05Z,why are you creating a new string `pth` instead of just using the existing string `path`?,0,0.99029541015625
115126902,87,danirabbit,2017-05-06T19:08:44Z,same question here. it seems like `conflict_path` is a better variable name than `pth2`,0,0.9913808703422546
115126909,87,danirabbit,2017-05-06T19:09:30Z,let's use `string_builder` instead of `sb`,0,0.9946721196174622
115126960,87,danirabbit,2017-05-06T19:13:24Z,seems like it would be more in keeping with gtk to call this `tab_label`,0,0.9869297742843628
115150547,87,jeremypw,2017-05-07T18:34:12Z,"personally, i find it easier to read (& write) complex code with short variable names otherwise i cannot see the wood for the trees. however, i can easily replace the short variables with longer names in keeping with the preferred style.",0,0.9782527089118958
115150573,87,jeremypw,2017-05-07T18:35:32Z,i meant the above to refer to short functions and local variables only.,0,0.9843133687973022
115150608,87,jeremypw,2017-05-07T18:37:37Z,"to quote ric*tz on slack: ""using a function parameter as local-variable is not a good idea and leads to such problems parameters are unowned"".",0,0.9361281394958496
115150987,87,jeremypw,2017-05-07T18:54:43Z,"when duplicates were being distinguished by numbers, the tab label was different from the tab name; but now i agree there is no need to distinguish.",0,0.9892966151237488
1827036435,798,danirabbit,2024-11-03T18:12:49Z,"maybe something like this? i don’t think we need to say “dialog”. since there’s multiple ways to enter text from somewhere else, maybe we focus on the copying instead of the pasting/dragging. and the kind of person who needs this probably doesn’t understand what “sudo” or “doas” means so try to use language they would understand. not sure if “administrative” or “advanced” or something else is better here. might need to look at language from like polkit agent or something else to see what we usually use here [code block]",0,0.9660616517066956
1827037295,798,jeremypw,2024-11-03T18:18:31Z,"agree about ""dialog"". ""copied text"" is a bit ambiguous as you can also copy *from* the terminal. again not sure what ""advanced"" means in this context (and what it might be translated to). it is difficult to be precise, unambiguous and succinct all at the same time!",-1,0.5361620187759399
1827037828,798,danirabbit,2024-11-03T18:22:02Z,"okay updated my suggestion to use ""administrative commands"" and stick to ""paste"" here",0,0.9938095211982727
1827037854,798,teamcons,2024-11-03T18:22:08Z,"""warn when pasted text contains multiple or administrative commands"" short. may be of the vague.",0,0.9853574633598328
1827038419,798,jeremypw,2024-11-03T18:25:44Z,i think that is good - short and clear!,1,0.9873381853103638
1827038829,798,danirabbit,2024-11-03T18:27:15Z,i think that's pretty good. in combination with seeing/interacting with the actual warning dialog i think folks should be able to work out what this setting refers to,1,0.9598402380943298
1827042523,798,teamcons,2024-11-03T18:44:20Z,"yes. by default it is ""on"". so if they disable it, theyll likely have already interacted with it in the past and connected the dots with the dialog and pasting ""doas"" (unrelated but does it also react to wget outputted to bash ? ive seen too ""oh heres a one liner to download and run this script that fixes your problem"")",0,0.9727948904037476
1827466681,798,jeremypw,2024-11-04T09:56:43Z,"at present it just looks for the words ""sudo"" or ""doas"" so it is pretty dumb. maybe raise an issue if you feel there is a further security threat not covered.",-1,0.9627715349197388
1451531913,743,Marukesu,2024-01-13T14:16:35Z,"instead of keeping ""working-directory"", add ""new-tab"" to the options, the working directory is sent via platform data.",0,0.9942402839660645
1451532455,743,Marukesu,2024-01-13T14:17:56Z,"i believe we still want to restore tabs if a working directory is set. also, this change is invalidating the commentary above, it should be removed if this change is to stay.",0,0.9914600849151611
1451534641,743,Marukesu,2024-01-13T14:25:16Z,"you can lookup for ""new-tab"" earlier and then do: [code block]",0,0.9955999851226807
1451534732,743,Marukesu,2024-01-13T14:25:38Z,"keep using `command_line.get_cwd()` it's already set to be the directory passed in ""working-directory"" or the directory of the current invocation.",0,0.994041383266449
1451535078,743,Marukesu,2024-01-13T14:26:43Z,"you won't need this block if you change ""woking-directory"" to be ""new-tab"" in `handle_local_options()`.",0,0.9954866766929626
1451535126,743,Marukesu,2024-01-13T14:26:50Z,"`environment.get_current_dir()` here (and amost everywhere in the code) is wrong. the only places we can be sure it's correct is in `main()`, `new application()`, `construct`, `local_command_line()`, and `handle_local_options()`.",0,0.9715771675109863
1451535343,743,Marukesu,2024-01-13T14:27:37Z,"this is wrong, `environment.get_current_dir()` is the directory of the first invocation (in most of cases, $home), not of the current invocation. for example, assuming terminal was already opened via dock or wingpanel, if the user is in `/home/user/projects/terminal/build` and run `io.elementary.terminal -t --working-directory=../src`, this will try to open `/home/src` not `/home/user/projects/terminal/src`. ps: `-tw ../src` and `--working-directory ../src` will work as expected because they are handled by the shell, so i don't think there's much value on this change.",0,0.9836320877075195
1451535372,743,Marukesu,2024-01-13T14:27:47Z,"this is wrong too, this test is ensuring that we respect the working directory of the remote invocation, `environment.get_current_dir()` isn't it.",0,0.7598694562911987
1451767785,743,jeremypw,2024-01-14T16:50:22Z,i have simplified and clarified this - tabs are always restored for first created window (subject to privacy settings);,0,0.9926901459693909
1451767901,743,jeremypw,2024-01-14T16:50:53Z,i have removed the third parameter for window construction now,0,0.9948509335517883
1451773820,743,jeremypw,2024-01-14T17:30:22Z,ok i'll revert this for now - it can be addressed later if needed.,0,0.9909274578094482
1451778291,743,jeremypw,2024-01-14T18:00:04Z,"i now add ""new-tab"" to the options if ""-w"" option is present.",0,0.9945988655090332
649735728,595,JoseExposito,2021-06-11T06:56:03Z,this 2 blocks of code (the if...else) are duplicated. i think we could refactor them since the only bit that changes is the string literal.,0,0.9912264943122864
649818071,595,jeremypw,2021-06-11T09:06:39Z,extraneous white space,0,0.9875553250312805
649820028,595,jeremypw,2021-06-11T09:09:44Z,"strictly speaking, the word ""sudo"" might be inside quotes in the pasted text (which may not be a command). maybe rethink this text?",0,0.9879044890403748
649820650,595,jeremypw,2021-06-11T09:10:36Z,blank line after if clause recommended.,0,0.992087185382843
650576150,595,cassidyjames,2021-06-13T20:53:09Z,"what's extraneous here? i removed this comment because it was self-evident from the line below, and there's no extra line here.",0,0.9895679354667664
650576279,595,cassidyjames,2021-06-13T20:54:23Z,"this copy is exactly as-is from master, but i can rephrase to `may` to match the multi-line paste text.",0,0.995790958404541
650577375,595,cassidyjames,2021-06-13T21:05:37Z,"thanks! i suspected it could be cleaned up but hadn't thought about how. i refactored it now, let me know if that makes more sense.",1,0.9924967288970947
650578146,595,Marukesu,2021-06-13T21:13:15Z,isn't the space on the end of the if clasule?,0,0.9929587841033936
650654627,595,JoseExposito,2021-06-14T05:21:03Z,"looking much better, thanks!!",1,0.9966087341308594
651146210,595,danirabbit,2021-06-14T17:37:06Z,am i missing something here? it looks like we destroy no matter what and the `return` would only stop us from calling the destroy that we call anyways before returning?,0,0.8802791833877563
651146798,595,danirabbit,2021-06-14T17:37:59Z,"nvm, i was indeed missing the rest of the function :sweat_smile:",1,0.9889072179794312
651147876,595,danirabbit,2021-06-14T17:39:43Z,"if we're changing these anyways, we should probably remove the forced space and make this a single translatable string [code block]",0,0.9908682107925415
651342705,595,cassidyjames,2021-06-14T23:28:58Z,"these strings were separated in master and i have no idea why, so i left them as-is. but i can combine them.",0,0.9880962371826172
317366039,397,Philip-Scott,2019-08-24T15:55:40Z,"you should check here that `build_cmdline` is also false, as it currently is a second -x here would not get parsed as a new tab/shell arg :)",1,0.9182630777359009
317366058,397,Philip-Scott,2019-08-24T15:56:17Z,"you should add a description of `-x, --` here as well, right? :)",1,0.9706161022186279
317392472,397,jeremypw,2019-08-25T10:52:57Z,well spotted - thanks! now fixed.,1,0.994948148727417
317392477,397,jeremypw,2019-08-25T10:53:08Z,done,0,0.8682363629341125
317455492,397,Philip-Scott,2019-08-26T05:31:11Z,"i actually meant to add another entry for -x, that way the new argument will show up when you type `--help` :)",1,0.8922144174575806
317556886,397,jeremypw,2019-08-26T11:11:48Z,"oh, i see. this causes some complications as you then have to support a long form option (i note that gnome-terminal does not document the -x or -- flag in the --help output). however, i have implemented this now.",0,0.9828059077262878
658888583,602,jeremypw,2021-06-25T16:22:26Z,"we need to show the path in as the window title, if not overridden. [code block]",0,0.9952811598777771
658889683,602,jeremypw,2021-06-25T16:24:17Z,"we need to show the path in as the window title, if not overridden. [code block]",0,0.9952811598777771
658906741,602,jeremypw,2021-06-25T16:52:51Z,this causes a regression when there *isn't* a custom prompt set in `.bashrc`. in that case the terminal label is the same as the terminal prompt (and window title) which is not what is wanted. the label should always show the terminal path (disambiguated).,0,0.9789920449256897
658907090,602,jeremypw,2021-06-25T16:53:31Z,see above comment re tab label regression.,0,0.990500271320343
658963919,602,Marukesu,2021-06-25T18:35:32Z,"that's because `.bashrc` set a title by default: [code block] elementary use a patch to set the title as `dir: last_cmd` or `actual_cmd`, see: [a link]",0,0.9949353337287903
409004740,504,jeremypw,2020-04-15T17:16:13Z,this is not elementary code style - should be: [code block],0,0.9903562068939209
409005930,504,jeremypw,2020-04-15T17:18:09Z,i think you can use a single sequence to move the cursor ` ` places. either `\033[ c` or `\033[ d`,0,0.9887153506278992
409210406,504,felix-andreas,2020-04-16T00:27:47Z,"i also thought so, but i did not have the desired effect. instead it moves only one position and deletes the last character. maybe i am doing something wrong... there is also a sequence to move the cursor to a fixed position `esc[line;columnh`. but i was also not able to make it work ...",0,0.5376428365707397
409443714,504,felix-andreas,2020-04-16T10:16:27Z,"do you understand why on [a link] the `feed_child` has a diffenerent signature (in comparison to `feed_child (string, int)`)",0,0.994012176990509
550649894,556,cassidyjames,2020-12-31T18:59:20Z,"rather than just say it was blocked, we should offer a _why_ here. this is also more consistent with the unsafepastedialog. [code block]",0,0.9918602108955383
646022309,556,jeremypw,2021-06-05T18:38:04Z,needs updating,0,0.9924386143684387
646023186,556,jeremypw,2021-06-05T18:46:49Z,"shouldn't construct translatable text like this, if possible. suggest using `printf`. also there is a grammar error. [code block]",0,0.9201337099075317
646023577,556,jeremypw,2021-06-05T18:50:43Z,"distinguish from unsafe paste alert setting. `""show multi-line paste warning""`",0,0.9827783703804016
646023976,556,jeremypw,2021-06-05T18:55:08Z,the two if statements can be merged. [code block],0,0.9956194758415222
1421499251,753,Marukesu,2023-12-09T17:55:39Z,"you can make this query the window state, that matches the behaviour of gtk.window.fullscreened in gtk4. [code block] then you can do `bind_property (""is-fullscreen"", header, ""decoration-layout-set"", invert_boolean)`.",0,0.9952566027641296
1421499285,753,Marukesu,2023-12-09T17:55:57Z,"this could be set at construction, no?",0,0.9929788708686829
1421561055,753,jeremypw,2023-12-09T19:30:19Z,"yes, that's better - thanks. i was aware that fullscreen () cannot be guaranteed to actually fullscreen the window. that is a nice solution if it works. i am not sure that `bind_property` works with a property that is not backed by a private variable though - `notify` doesn't.",1,0.9890109896659851
1421561147,753,jeremypw,2023-12-09T19:31:06Z,sure.,0,0.9824982285499573
1421571871,753,Marukesu,2023-12-09T21:15:44Z,"glib.binding uses notify underneath, so yeah, i believe you will need to call `notify_property()` in a window_state_event handler for that.",0,0.9929308891296387
1421737035,753,jeremypw,2023-12-10T12:00:18Z,i tried getting this to work but there seems to be some weird timing issues where changing `decoration_layout_set` in `configure-event` has no effect. as this is all going to have to be rewritten for gtk4 anyway i do not want to spend more time on it. is it ok to go with the current solution?,-1,0.8745908141136169
1421770935,753,Marukesu,2023-12-10T15:31:05Z,fine for me.,0,0.9543207287788391
1446503631,753,danirabbit,2024-01-09T19:18:56Z,make sure to style this the same as other title buttons [code block],0,0.9948069453239441
1446504225,753,danirabbit,2024-01-09T19:19:33Z,title buttons don't receive keyboard focus [code block],0,0.9891732931137085
642856325,590,jeremypw,2021-06-01T07:38:14Z,might as well follow current style and use `var keymap = ...` here.,0,0.9927473664283752
642856723,590,jeremypw,2021-06-01T07:38:49Z,might as well use `var geometry = .....` here.,0,0.9902452230453491
642950079,590,felix-andreas,2021-06-01T09:44:25Z,done,0,0.8682363629341125
642950181,590,felix-andreas,2021-06-01T09:44:32Z,done,0,0.8682363629341125
1829480600,794,ryonakano,2024-11-05T14:43:34Z,i think we should call `var stripped_text = text.strip ();` here instead of l529 for lesser scope.,0,0.9848611354827881
1829485791,794,ryonakano,2024-11-05T14:46:26Z,this return should be no longer necessary due to changes in this pr.,0,0.9948397278785706
1831379144,794,jeremypw,2024-11-06T16:39:31Z,removed var altogether,0,0.9779136776924133
1831379404,794,jeremypw,2024-11-06T16:39:40Z,removed,0,0.9591778516769409
331449841,390,jlnr,2019-10-04T11:06:58Z,"this color is still being referenced in `io.elementary.terminal.gschema.xml`, as part of ""palette"", and in the method `terminalwidget.restore_settings`. should these be replaced as well, or should the palette be left untouched by this pr? (not sure why there is both a palette, and default fg/bg colors.)",0,0.9814505577087402
331450102,390,jlnr,2019-10-04T11:07:50Z,"the `.color-dark radio` in application.css still uses this color (with 100% opacity), should probably be changed to the gray color as well?",0,0.9922446608543396
331566190,390,cassidyjames,2019-10-04T15:41:52Z,"good catch, addressed.",1,0.9825171828269958
331566311,390,cassidyjames,2019-10-04T15:42:10Z,"hm, i'm not sure. i believe the palette is used by the vte itself for things like curses. i'm not sure if it should be updated.",0,0.7059921026229858
331691909,390,jlnr,2019-10-04T21:25:33Z,"fair enough. if it looks odd in real-world use cases, we can open another pr to fix things.",0,0.9531382918357849
250015115,349,Philip-Scott,2019-01-23T00:30:11Z,why did you move the namespace out of the class name? i think we are using the previous method in the rest of the apps :),0,0.9918054342269897
250015891,349,Philip-Scott,2019-01-23T00:34:13Z,this will crash if the setting schema is not installed (maybe in a different os). see main review comment :),0,0.9293511509895325
250149183,349,jeremypw,2019-01-23T11:08:10Z,not sure - i guess there was a reason at the time ...,0,0.7926973104476929
250149238,349,jeremypw,2019-01-23T11:08:22Z,good point,1,0.9818260669708252
307023385,349,cassidyjames,2019-07-24T21:11:30Z,left a comment in here? [code block],0,0.9944830536842346
223489504,299,cassidyjames,2018-10-08T20:35:22Z,"if this is bound to the setting, does it need to be explicitly marked as active?",0,0.9915012121200562
223490830,299,cassidyjames,2018-10-08T20:40:35Z,"i tested locally and it appears to still properly check itself when bound to the setting, so i believe this should be removed.",0,0.9925974607467651
223497439,299,neur0manc,2018-10-08T21:06:39Z,"i added it so the dialog still has the same default behaviour: showing the dialog if the checkbutton is untouched by the user. the old phrasing requires the user to act to mute the dialog. the new phrasing should still require the user to act. i think this is required to fulfill the requirement ""and have it checked by default."" that your made in the issues description. sorry in advance if maybe i don't get what your mean.",-1,0.9876906871795654
223498149,299,cassidyjames,2018-10-08T21:09:44Z,"no worries, it's kind of confusing! but by using a binding to the setting, the check will automatically check itself if that underlying setting is active. the setting is already active by default (controlled by the default gschema), and it must be active to show the dialog in the first place, so this line is just unnecessary.",1,0.7669318914413452
223499794,299,neur0manc,2018-10-08T21:17:00Z,alright! very interesting. i remove the line and it's still working.,1,0.9518482089042664
355028020,431,tintou,2019-12-06T20:59:41Z,[code block] that way no copy of the input string (which can potentially be huge :man_shrugging:),0,0.6218427419662476
364343953,431,jeremypw,2020-01-08T17:10:54Z,why not just remove any trailing new line(s)?,0,0.9917677640914917
410965287,431,cassidyjames,2020-04-19T18:42:24Z,"leading newlines could also unintentionally execute commands, but if it feels safer to only trim newlines and only trailing ones, then this could be adapted to do that as well.",0,0.9852044582366943
415041174,431,jeremypw,2020-04-25T11:15:46Z,we really need to know if we are pasting into the commandline or not. if we are pasting into e.g. vim or an interactive interpreter (?) then we do not want to strip.,0,0.9867780208587646
415234663,431,cassidyjames,2020-04-26T06:52:01Z,"that makes sense to me, but i'm unsure if/how we can do that.",0,0.9177120923995972
416022102,431,jeremypw,2020-04-27T17:48:39Z,"i have pushed a commit that only processes the pasted text if there is no foreground process. this fixes pasting into terminal editors like nano or vim. also, i noticed that just stripping the string is insufficient to prevent command execution when pasting into the shell as it does not remove embedded newlines. if you really want to prevent this, you have to make sure you only paste one line (without the newline). my commit also does this. the unsafepastedialog (and setting) then becomes redundant as it is only triggered if there is a newline.",0,0.9574199318885803
416033338,431,cassidyjames,2020-04-27T18:04:15Z,"yeah i was wondering about embedded newlines as well... but i wonder if this would be too aggressive/different from what people expect. i wonder if we could combine the checking with `sudo` and checking for newlines under the unsafe paste protection? i'll have to think about this a bit. but my initial thought is maybe: - treat newlines similar to how we treat `sudo` for paste protection, i.e. - warn with an unsafe paste dialog (with modified copy) if a pasted command contains a newline - turning unsafe paste protection off also turns off any special handling with newlines - maybe offer a way to paste one line without newlines in the dialog, i.e. as an alternate action? if that seems useful, we could also maybe strip `sudo` out from the sudo version, but idk if that's getting too complicated now.",0,0.9071134924888611
416465946,431,jeremypw,2020-04-28T09:26:02Z,maybe better to take an incremental approach and deal with single line pastes first (probably 99% of cases?) and think about how to deal with embedded newlines at leisure.,0,0.9721269607543945
1242449869,699,jeremypw,2023-06-26T16:23:13Z,this gives two new compile warnings with valac 0.56.7 [code block] do you know if later versions of vala will support it? i tend to avoid this pattern though it is useful.,0,0.9855076670646667
1242458799,699,jeremypw,2023-06-26T16:31:09Z,"you are potentially providing a `null` or uninitialised parameter to these functions, contrary to their signature.",0,0.982891321182251
748756581,638,Marukesu,2021-11-13T19:28:24Z,should be using `gtk.get_current_event_time ()` [code block],0,0.9955139756202698
756074255,638,igordsm,2021-11-24T13:27:44Z,"does this work on your end? it doesn't for me. from what i've read, the timestamp that `present_with_time` receives must be a x11 server timestamp and the only way i was able to get it was using this gdk.x11 call. i've tried `gdk.current_time` and many types of datetime functions returning the current time as well. i'm not a fan of adding this dependency too, but it was literally the only timestamp that worked for me.",0,0.5158061385154724
1739904893,638,jeremypw,2024-08-31T18:54:58Z,"i can confirm that `current_event_time` does not work on x11 or wayland, probably because the event did not occur on the terminal window but was received over dbus. i have suggested a hack to get it work on x11 at least with that extra dependency.",0,0.9922325611114502
125173752,119,cassidyjames,2017-07-02T05:15:32Z,"is this hidpi-safe? i.e. if i have a 3200x1800 display with a scaling factor of 2, does `gdk.screen.width()` return 3200 or 1600?",0,0.9935291409492493
125173769,119,cassidyjames,2017-07-02T05:17:05Z,i'm also curious how this behaves with multiple displays.,0,0.9546229839324951
125173837,119,vjr,2017-07-02T05:20:43Z,works on my hidpi display. for multiple screen maybe it needs work but existing move x y code might already have this issue anyway.,0,0.9871978163719177
162584023,196,jeremypw,2018-01-19T10:17:42Z,missing space before bracket,0,0.9876905679702759
162584357,196,jeremypw,2018-01-19T10:19:14Z,missing space before bracket,0,0.9876905679702759
162588227,196,jeremypw,2018-01-19T10:35:04Z,"can the tab be focussed here only? i.e. tabs all created unfocussed and then `var t = notebook.get_tab_by_index (focus.clamp (0, notebook.n_tabs - 1)` etc.",0,0.9944286346435547
162589492,196,jeremypw,2018-01-19T10:40:32Z,"this is rather unclear and may not compile with older versions of valac. at least add a comment to explain the effect. consider using `focus = pantheonterminal.saved_state.focused_tab.clamp (0, tabs.length - 1)`. this is clearer and means that a negative setting focusses the first tab. as this situation is likely to be a rare corner case the exact behaviour is not that important.",0,0.9871282577514648
162780684,196,jeremypw,2018-01-20T11:39:37Z,i am not sure about this. normally if `notebook.n_tabs` is greater than 0 then terminal is being launched with a specified working directory in which case focus_restored_tabs is false and `focus` is not used anyway. is there a case when this not so? not that it does any harm.,0,0.9462673664093018
162780978,196,Thalexander,2018-01-20T11:59:37Z,"no there is no case where this happens, i have included this so if the behaviour changes it will still work.",0,0.9920171499252319
530011404,477,danirabbit,2020-11-24T23:37:28Z,i guess this was not intentional :),0,0.9758657217025757
530014649,477,danirabbit,2020-11-24T23:40:56Z,"is there a reason this isn't inside the conditional below? it seems like if `option_help` or `option_version` are true, then this wouldn't be relevant would it?",0,0.9894343018531799
535397101,477,jeremypw,2020-12-03T16:42:44Z,i usually take a comment to refer to the code following it but in this case it could be inside the conditional - i'll move it.,0,0.9934089183807373
535534870,477,danirabbit,2020-12-03T19:44:07Z,"sorry i meant the whole code block, not just the comment. it seems like we don't need to get the current working directory if the user is just printing the help or version right?",-1,0.9868499040603638
536008542,477,jeremypw,2020-12-04T10:47:47Z,i'll rethink it.,0,0.9405238032341003
739277995,633,jeremypw,2021-10-29T14:22:45Z,elementary code style is ` } else if () {`,0,0.9935744404792786
739280345,633,jeremypw,2021-10-29T14:25:34Z,double blank line,0,0.98529052734375
739286128,633,jeremypw,2021-10-29T14:32:14Z,this is a good idea but i think it will cause the switch clause [code block] in `setup_ui ()` to fail on first run because the setting will still be in rgb form. you need to do the check earlier.,1,0.7816409468650818
863104912,658,SkiF12,2022-05-02T19:02:26Z,"ok, thanks",1,0.893515944480896
1900282969,836,ryonakano,2024-12-31T22:28:07Z,is there any reason you explicitly cast to int here? the return type of `hdy.tabview.get_page_position ()` seems to be int: [a link],0,0.9950469732284546
1900283096,836,ryonakano,2024-12-31T22:28:56Z,maybe we can calculate this instead of conditions like this: [code block],0,0.9882016777992249
1900406964,836,jeremypw,2025-01-01T14:17:15Z,you're right - its not needed. removed,0,0.927587628364563
1900408638,836,jeremypw,2025-01-01T14:27:04Z,nice idea but it doesn't work for negative values of `pos` (-1 % n_pages = -1). you can use `pos = (pos + (int) n_pages ) % ((int) n_pages)` but at least the current solution is clear what is going on.,1,0.9010308384895325
1900486916,836,ryonakano,2025-01-02T00:48:25Z,"sorry, this is what i wanted to suggest. :bow: plus `n_pages` is actually typeof int because its value come from `hdy.tabview.n_pages`, so we might be able to make it simpler by removing casts: [code block] yes, i'm also a fan of readable codes. however, i don't think choosing calculation instead of the condition here decreases readability of the code because this formula is simple. also, i think it's often used elsewhere e.g. when calculating next index in ring buffers. conditions sometimes causes bugs so i think we should avoid it when it's possible and avoiding it doesn't lose readability.",-1,0.9790356159210205
1900758689,836,jeremypw,2025-01-02T10:57:36Z,"ok, i am persuaded. i noticed that the terminalview.n_pages does not need to be a `uint` anyway. i presume there was some reason in the past that was done but making it an `int` does not cause any problems and removes the need for several other casts.",0,0.9424488544464111
159240503,185,jeremypw,2018-01-02T14:54:12Z,this duplicates widget.application - is it advantageous to have a separate property as well as set_application (app) in construct {}?,0,0.9952600598335266
159240846,185,jeremypw,2018-01-02T14:55:48Z,can be made read-only with { get; private set; },0,0.9952192902565002
159240884,185,jeremypw,2018-01-02T14:56:04Z,can be made read-only with { get; private set; },0,0.9952192902565002
159240908,185,jeremypw,2018-01-02T14:56:12Z,can be made read-only with { get; private set; },0,0.9952192902565002
159240961,185,jeremypw,2018-01-02T14:56:27Z,can be made private,0,0.9925082325935364
159241844,185,jeremypw,2018-01-02T15:00:44Z,can be made private,0,0.9925082325935364
159305392,185,danirabbit,2018-01-02T20:09:18Z,"i'd like to chase this down in a follow-up pr, but there seems to be some conflict between `gtk.application` and `pantheonterminalapp`. trying to use `widget.application` is giving me errors about setting shortcut accelerators and some other issues.",0,0.911663830280304
228438701,262,tintou,2018-10-26T08:08:21Z,do not keep commented code,0,0.9924095869064331
228438777,262,tintou,2018-10-26T08:08:36Z,keep it lowercase for consistency,0,0.9887509942054749
298800364,375,donadigo,2019-06-29T14:02:49Z,"`clamp` returns you a new int here, so currently, you are clamping and then immediately discarding the result. [code block]",0,0.9950447082519531
298800538,375,donadigo,2019-06-29T14:09:50Z,you could use the already available `rect` instead of defining new window x and y. [code block],0,0.9957928657531738
298800581,375,donadigo,2019-06-29T14:11:47Z,it looks like something went wrong here. shouldn't `normal` be `0`?,0,0.5940538048744202
299210136,375,donadigo,2019-07-01T20:44:16Z,you could get the window state once here by caching it.,0,0.9933386445045471
1405197930,749,jeremypw,2023-11-25T18:39:38Z,best not use the name of a command as a variable name. cannot insert `warning ()` commands into the code when this variable is in scope.,0,0.9794292449951172
1405198093,749,jeremypw,2023-11-25T18:40:19Z,this does not work for some reason. no dialog is shown when `sudo` is included (shown in master).,0,0.9616428017616272
1405199504,749,jeremypw,2023-11-25T18:46:56Z,this alters the logic of the test compared to the original causing the warning to not show if there is no newline. was this the intention? probably best to push a separate pr for changes in the logic and keep this one purely for moving code.,0,0.990644097328186
1405201468,749,jeremypw,2023-11-25T18:54:57Z,i would remove this space.,0,0.9901206493377686
1405456885,749,Marukesu,2023-11-26T18:31:59Z,"no, it was not a intended change, thanks for catching it.",1,0.9115811586380005
1704386131,769,danirabbit,2024-08-05T16:42:01Z,can you add a comment here maybe?,0,0.9948373436927795
1705929197,769,danirabbit,2024-08-06T18:05:57Z,hm so i get a warning here about: [code block] i'm actually not sure what is the purpose of this property? it seems to only be used in a single private function,0,0.8896997570991516
1705930254,769,danirabbit,2024-08-06T18:06:56Z,"this should probably not be `gtk.popovermenu` in gtk3, but instead `gtk.menu` and we can change it to `popovermenu` in gtk4",0,0.9928871989250183
1705930841,769,danirabbit,2024-08-06T18:07:33Z,i think `show_all` and `popup` are redundant here. i'm not sure `show_all` is necessary when using a menu from a model,0,0.985550045967102
1706954925,769,jeremypw,2024-08-07T12:57:09Z,now removed.,0,0.9816632270812988
1706955123,769,jeremypw,2024-08-07T12:57:18Z,fixed,0,0.920660674571991
1706956621,769,jeremypw,2024-08-07T12:58:11Z,it does not work in gtk3 without these. revisit in gtk4,0,0.9932318925857544
1869823092,813,jeremypw,2024-12-04T15:45:37Z,adding [code block] fixes the icon issue.,0,0.9946183562278748
1869858439,813,danirabbit,2024-12-04T16:04:38Z,i already have that on line #230?,0,0.9916497468948364
1869888482,813,jeremypw,2024-12-04T16:23:27Z,"sorry, i must have got confused about which branch i was running at some point :disappointed: your pr does indeed fix that issue!",-1,0.995109498500824
159646262,190,jeremypw,2018-01-04T12:59:21Z,"i am not sure this is necessary here. it is already being called after adding, closing and restoring a tab. only need to save if tab labels are changed (see below) due to disambiguation. maybe at line 1033?",0,0.9588510394096375
160574464,190,Thalexander,2018-01-10T02:06:06Z,it will not in all cases update the saved tabs on a name change with that set up unfortunately.,0,0.7824835777282715
167077374,180,donadigo,2018-02-08T21:45:28Z,space before `{`.,0,0.9703077077865601
150336148,165,donadigo,2017-11-10T20:58:18Z,"what should happen here: the `mode_changed` signal should set `settings.prefer_dark_style`. then you connect to `settings.notify[""prefer-dark-style""]` and change the background and foreground based on that value. (you make an `update_style` or something). then you call `update_style` on the beggining of construction.",0,0.9911342859268188
150337787,165,danirabbit,2017-11-10T21:06:48Z,"in the case that we add a third style (for example a high contrast black on white style), prefering the dark stylesheet does not necessarily imply what the background and foreground colors should be. i want to make sure these are kept as separate settings and applied and loaded separately to allow for custom settings in dconf as well",0,0.9894565939903259
150659298,165,donadigo,2017-11-13T20:44:29Z,can we get those strings as constants somewhere?,0,0.9931761622428894
150659323,165,donadigo,2017-11-13T20:44:36Z,these too.,0,0.9907387495040894
150659349,165,donadigo,2017-11-13T20:44:44Z,and these also.,0,0.9943653345108032
193212730,253,danirabbit,2018-06-05T20:34:17Z,"instead of doing this, we should set `action_name` on the menuitems. this will handle sensitivity",0,0.993486225605011
193654142,253,ryonakano,2018-06-07T07:48:11Z,"i think the line 143 should be `action_accelerators[action_select_all] = "" a"";`. because after this update was installed to my environment, pressing `shift + a` selects all in the terminal and pressing `ctrl + shift + a` do nothing.",0,0.9850324392318726
193654468,253,ryonakano,2018-06-07T07:49:31Z,"i'm sorry, it fixed just now #257, please don't mind these comment",-1,0.994659960269928
476445160,533,jeremypw,2020-08-25T13:24:35Z,"shouldn't ` tab` navigate to *next* tab? and ` tab` navigate to the previous tab? problem is, vte-91 captures `tab` && ` tab` for triggering autocompletion.",0,0.9806986451148987
476485399,533,rafaelcorsi,2020-08-25T14:18:26Z,"hi there, 1. i will change to *next tab* 1. here it works nice and don't trig autocomplete ![a link]",1,0.991353452205658
476502477,533,jeremypw,2020-08-25T14:40:28Z,"hmm, you are right - cloning your branch it works - previously i just amended my own repo but i used ` tab` like the rest of the code. not sure why that should make a difference.",0,0.9554405212402344
476567119,533,rafaelcorsi,2020-08-25T16:09:31Z,fix: - [ x ] using ` ` - [ x ] ` tab` for next tab - [ x ] ` tab` for previous tab,0,0.9946434497833252
466861818,527,lainsce,2020-08-07T07:09:28Z,how about this? makes it look more uniform and less lopsided. :smile: [code block],1,0.9935738444328308
488856251,527,cassidyjames,2020-09-15T17:51:04Z,so this still has the weird scrolling problem. i think just applying to the sides for now is fine unless/until we can sort out the undershoot.,0,0.8675598502159119
488857123,527,cassidyjames,2020-09-15T17:52:27Z,"i think 0 and 12px feels too lopsided, so unless/until we can sort out some sort of undershoot or other way to handle that, how about `0 9px`? still a notable improvement over master. [code block]",1,0.6231808066368103
1102022725,701,danirabbit,2023-02-09T21:04:24Z,"i think this is less legible than having arguments separated into their own lines, personally",-1,0.67848140001297
1102024294,701,danirabbit,2023-02-09T21:06:27Z,can we keep these expanded on several lines as they were? i think this is a lot harder to read at a glance,0,0.8716941475868225
1102025255,701,danirabbit,2023-02-09T21:07:42Z,is there a good reason to have these all separated out like this? it seems like it kind of just makes it more complicated and i'm not sure we ever want to re-use these values besides `glib_version`,0,0.6470931172370911
1102026114,701,danirabbit,2023-02-09T21:08:44Z,"same as before, i think this makes things a bit harder to read at a glance. i'm not sure there's a benefit to compacting it like this",0,0.7145935297012329
1102043043,701,Marukesu,2023-02-09T21:29:41Z,"i would say it make more easy to find minimal versions of dependencies, but i can inline the not re-used ones if preferred.",0,0.9913968443870544
1752708304,788,danirabbit,2024-09-10T20:54:00Z,it seems like these are only used inside the key press handler. why are we setting these variables outside of that function at all?,0,0.9831907153129578
1755155516,788,jeremypw,2024-09-11T16:43:14Z,because they need to maintain their state between key presses when multiple keys are held down sequentially.,0,0.9793688058853149
1755208970,788,danirabbit,2024-09-11T17:25:33Z,"i'm not sure i understand what you mean. testing locally, replacing all of this with checking for control and shift mask in modifiers seems to work as expected. can you provide steps where it doesn't work?",0,0.5139880180358887
1755211537,788,danirabbit,2024-09-11T17:27:37Z,here's what i'm testing [code block],0,0.9877420663833618
1756518748,788,jeremypw,2024-09-12T09:44:12Z,this had to be done in the gtk4 version because i'll check again whether this fix is needed.,0,0.9937267303466797
1826515997,777,ryonakano,2024-11-02T07:12:06Z,this line causes the following warning on build: [code block],0,0.9926446676254272
1826517393,777,ryonakano,2024-11-02T07:24:21Z,"i'm not sure if this behavior is just about files. i'm not sure about each implementation, but this branch works as expected if i open terminal from code, gnome files, and dolphin, the file manager made for kde. (i'm concerning this comment sounds like as if this code only supports uris passed from files and does not support them passed from other apps)",0,0.9273238778114319
1826974795,777,jeremypw,2024-11-03T12:47:01Z,shellerror now handled,0,0.9789528846740723
1826975841,777,jeremypw,2024-11-03T12:52:49Z,i have amended the comment accordingly,0,0.9942417144775391
126832715,95,donadigo,2017-07-11T23:24:10Z,"now, i don't know if this would work, but i think, this could be done differently by just overriding the default `button_press_event` virtual signal here.",0,0.9852935671806335
126832740,95,donadigo,2017-07-11T23:24:19Z,the same could be done here.,0,0.9940044283866882
369514245,468,jeremypw,2020-01-22T11:46:36Z,this is `true` even if other modifiers are held down in addition to `ctrl`. not sure is that matters in this case.,0,0.9694548845291138
369955394,468,eGust,2020-01-23T06:55:40Z,"several lines below the code for scrolling is `if ((event.state & gdk.modifiertype.control_mask) > 0)` i don't mind to open links with holding ctrl + shift, as currently no matter what modifiers it still opens up.",0,0.9907665252685547
369998754,468,jeremypw,2020-01-23T09:06:13Z,"yes, i am not too concerned, although files code does check that only ` ` is held down. i guess it can be changed if an issue arises.",0,0.7713074088096619
425992395,468,jeremypw,2020-05-15T19:00:38Z,i dont think these two booleans should be linked they have different purposes.,0,0.905310332775116
1747384209,785,jeremypw,2024-09-06T16:12:41Z,do we need so complicated css class? see what i did in the gtk4 branch - one css class for each theme name. colors will be overwritten if they change?,0,0.9842910766601562
1747389098,785,jeremypw,2024-09-06T16:16:35Z,"when i did the same in the gtk4 branch, the buttons became small so is this necessary here?",0,0.9939677715301514
1747396636,785,danirabbit,2024-09-06T16:22:29Z,i just moved this to the application.css since it never changes,0,0.9919499158859253
1747397135,785,danirabbit,2024-09-06T16:22:54Z,oh yeah theme name probably works fine. i definitely overthought it :grinning_face_with_sweat:,1,0.9922741055488586
1747455593,785,jeremypw,2024-09-06T17:05:31Z,oh i see - i missed that.,0,0.9563965797424316
197534320,275,tintou,2018-06-22T18:38:48Z,don't case here,0,0.9871517419815063
197534450,275,tintou,2018-06-22T18:39:18Z,then use `this.feed_child (uris_s.data);` instead,0,0.9956333041191101
197534494,275,tintou,2018-06-22T18:39:28Z,don't case here,0,0.9871517419815063
197534536,275,tintou,2018-06-22T18:39:41Z,then use `this.feed_child (uris_s.data);` instead,0,0.9956333041191101
355078540,432,danirabbit,2019-12-07T00:05:04Z,i think you probably don't want to include the markup in the translatable string,0,0.9831510782241821
355078894,432,danirabbit,2019-12-07T00:06:52Z,i don't think this is necessary if you have the label expanding,0,0.9825652837753296
355079343,432,danirabbit,2019-12-07T00:09:28Z,instead of a regular button with style classes i think what would be better is using gtk.modelbutton and then removing its child like here: [a link] right now there's some weird focus style stuff and that would fix it. you also wouldn't need to then add any margin to the grid,0,0.963265061378479
357803063,435,danirabbit,2019-12-13T19:41:26Z,if you're only interesting in `delta_y` i think you can just do [code block],0,0.989447832107544
357925030,435,jeremypw,2019-12-14T16:00:33Z,thanks - done,1,0.892673671245575
1370685411,740,danirabbit,2023-10-24T18:55:24Z,in system settings we call this `event alerts` so probably should be consistent. this can also be a screen flash so it's not always an audible alert [code block],0,0.9934076070785522
1370692066,740,danirabbit,2023-10-24T19:00:07Z,"in the description text in system settings we say ""notify"" here. also use the same format we use in dialogs etc to describe system settings locations [code block]",0,0.9956547021865845
162784235,200,jeremypw,2018-01-20T14:46:35Z,"should be spaces around ""="". better default to ""false"".",0,0.9920977354049683
162784260,200,jeremypw,2018-01-20T14:47:31Z,parameters should not be optional.,0,0.9892655611038208
132844005,136,matzipan,2017-08-13T14:48:59Z,"is there a reason why the handler for search_changed, which is pretty 7 lines long was moved to an anonymous callback, but these ones which are 1 line long haven't been?",0,0.9848086833953857
132845248,136,danirabbit,2017-08-13T15:41:55Z,"these methods are public, the others were private and only used once",0,0.9945183396339417
132845729,136,matzipan,2017-08-13T15:59:04Z,missed that part.,-1,0.7944409251213074
141668193,146,donadigo,2017-09-28T16:24:43Z,"you can use a simpler syntax for this: `action_accelerators[action_close_tab] = "" w"";`",0,0.9939467906951904
141668656,146,donadigo,2017-09-28T16:26:33Z,this could be `private`. move construction of this multimap to the `static construct` block.,0,0.993328332901001
141669153,146,donadigo,2017-09-28T16:28:30Z,do we really need this constant here? we can just add the `win.` prefix to all those actions and do not care about adding this prefix everytime we use an action.,0,0.9581269025802612
347049157,416,alice-mkh,2019-11-15T23:19:37Z,can't you still use `app` here though?,0,0.9938691258430481
347052272,416,danirabbit,2019-11-15T23:35:06Z,no because it's another class and `app` is an instance member,0,0.9894977807998657
347052588,416,danirabbit,2019-11-15T23:36:51Z,"oops nevermind, i'm dumb. i was looking at something else. fixed",-1,0.9928296208381653
424215904,512,tintou,2020-05-13T07:05:39Z,what you want is this :slightly_smiling_face: [code block],0,0.5709962844848633
425269073,512,jeremypw,2020-05-14T16:25:19Z,done,0,0.8682363629341125
425269323,512,jeremypw,2020-05-14T16:25:34Z,much better - thanks.,1,0.978469967842102
