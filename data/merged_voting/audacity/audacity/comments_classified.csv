id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason
832098352,835,version was renamed to version-* due to issues with the xcode 12.5. the same reason stands for raising minsdkversion on macos to 10.9,0,0,0,0.983878254890442,0.9945099353790284,0.9889776110649108,0.0,accept,unanimous_agreement
832134353,835,new libs need copying files (or equivalent) to state their license. new libs need to be listed with their licenses in the top level readme.txt file.,0,0,0,0.985867202281952,0.9943159222602844,0.9947380423545836,0.0,accept,unanimous_agreement
832143383,835,"threadpool has copying, libcurl is downloaded in a similar way to the wxwidgets. both libraries are now added to reamde.txt",0,0,0,0.989329159259796,0.9902818202972412,0.9940756559371948,0.0,accept,unanimous_agreement
832164483,835,"what's the status on lib-string-utils, lib-uuid, lib-timer, lib-telemetry dmitry? e.g. if they are entirely ours, are they ""gpl2 or later"" or mit or something else? maybe that just needs a comment in readme.txt to say that /libraries is under same license as /src ? separately, now assuming these are all ours, the class files will need the /**** and \class \brief style of doxygen comments, so that doxygen [a link] will include these classes. probably the doxygen .dox.in file needs to be updated to include /libraries too.",0,0,0,0.979247510433197,0.9907106757164,0.991531252861023,0.0,accept,unanimous_agreement
832168950,835,"will do. the list of internal libraries will be further extended as part of -licameli future work. sure, no problem.",1,0,1,0.5909907221794128,0.651185929775238,0.7905973792076111,1.0,accept,majority_agreement
833458749,835,is this also pertinent to pull request #836 ? [a link],0,0,0,0.9892231225967408,0.9894301891326904,0.9957497119903564,0.0,accept,unanimous_agreement
833477828,835,"i'm trying to verify that each commit in the sequence is buildable for me, on my macbook at least. i fail at the first one: echo ""performing update step for 'curl'"" performing update step for 'curl' cd /users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl/src/curl && /applications/cmake.app/contents/bin/cmake -p /users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl/tmp/curl-gitupdate.cmake echo ""performing configure step for 'curl'"" performing configure step for 'curl' cd /users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl/src/curl-build && /applications/cmake.app/contents/bin/cmake -dcmake_install_prefix=/users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl -dhttp_only=on -dbuild_curl_exe=off -dcmake_use_sectransp=on -gxcode /users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl/src/curl -- the c compiler identification is appleclang 12.0.0.12000032 cmake error at cmakelists.txt:48 (project): no cmake_c_compiler could be found. -- configuring incomplete, errors occurred! see also ""/users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl/src/curl-build/cmakefiles/cmakeoutput.log"". make: *** [/users/paullicameli/github/audacity/build/cmake-proxies/libcurl/libcurl/src/curl-stamp/debug/curl-configure] error 1 command /bin/sh failed with exit code 2",-1,0,0,0.6561325788497925,0.9267840385437012,0.9715117812156676,0.0,accept,majority_agreement
833484481,835,"the commit dc7c7368f7bb9e40772cae271648edc8607ec254 ""fixes xcode 12.5 build"" still doesn't fix my build. i'm using xcode 12.4 and macos 10.15.6. are you increasing the minimum needed for builds? if this commit ""fixes"" the build, that suggests to me that not all of the previous commits were buildable for you even on 12.5. can you permute this list of commits so that each step is sure to build and run?",0,0,0,0.975447416305542,0.9858111143112184,0.9746505618095398,0.0,accept,unanimous_agreement
833495776,835,"only xcode 12.5 was broken, 12.4 worked fine, as obviously 12.3 does (as build succeeds on ci). 12.5, however, won't be able to build audacity master as well. i'm not sure if force push will be a great idea now, as anton has already started working from this branch. however, if you are worried about bisect in the future - we can do a squash merge. this will be less time-consuming and much safer. can you please post the full error? from the cmakeoutput.log? i'm not able to reproduce it with the clean build and everything builds fine with github actions. usually, `no cmake_c_compiler could be found` means some environmental problems.",0,0,0,0.7869092226028442,0.906965970993042,0.9617489576339722,0.0,accept,unanimous_agreement
833497370,835,"i think some interactive rebasing to simply this commit history would be useful. as i have said, don't squash everything into a big commit, rather, do leave logical steps of the project in place for easier review and possibly later bisection for debugging. but don't leave a record of mistakes and corrections made during development. squash the small corrections. what requires the macos deployment target minimum to increase from 10.7 to 10.9? if the xcode minimum to build also increases, then what is forcing that? explain these things prominently in commit comments. you introduce the libraries folder, which i also want to do in my misc-modules branch. are we agreed that: each sub-folder of libraries builds one library, which audacity depends on? each of these is (for now) shared? (though i might in future want to make certain of them static instead.) where should the compiled libraries be copied? (in my branch they simply go into the folder with the executable file.) and the code in libraries is always ""ours"", whereas anything in lib-src is only third-party code plus only small patches of ours that we must apply. yes? about white space preferences, i don't want to expend much time on those, but i do find it a little odd to see a space between a function name and the left parenthesis. i prefer to leave the space before the parenthesis only for if, for, and while.",0,0,0,0.9227256774902344,0.9709805846214294,0.9539812207221984,0.0,accept,unanimous_agreement
833517852,835,"at this point, force-pushing will break the day for another developer. rebasing into a fully compilable and runnable set of commits will be very time-consuming. so if you are concerned about bisecting the master - we can squash the request or create a merge commit. if we want to support developers running newer xcode versions and/or m1 hardware - we need to increase the target, because compiling for 10.7 and 10.8 is no longer supported. it is possible to take the xcode version and host system into account and configure it on this basis if we think that is critical to stay on 10.7, but i recall you wanted to raise min sdk version as well. yes. yes. this is system-dependent. currently, on macos, they will be placed into the frameworks directory. yes. **just to clarify the situation with xcode 12.5:** it was released last week (apr 26) and breaks the audacity build. there are two major issues: 1. looks like we cant compile for 10.7 anymore 2. we need to force cmake to use the legacy build system.",0,0,0,0.6743406057357788,0.9728221893310548,0.9163561463356018,0.0,accept,unanimous_agreement
833527183,835,"i think what i suggested is a good rule for topic branches that are the work of one person. i do this sort of interactive rebasing of my own work in progress often, and i don't find it very time consuming. but collaboration with someone else does make force pushes difficult, that is true. i'd like to use c++17. you say developing on m1 also requires it. the increase of the minimum supported version is not strictly necessary, though, to make telemetry work in the product. is that right? so it's still not strictly needed to abandon 10.7 and 10.8 for that reason. still i hope that affects only a small minority of users.",0,0,1,0.6539770364761353,0.8296567797660828,0.6488111615180969,0.0,accept,majority_agreement
833537942,835,"rebasing is quick and fun :-) but in this case, it will be more of `git reset --soft` and then checking every commit against the ci. i hope that in the future we won't have the feature branches of this size. strictly speaking - this branch should be divided into like 5 different branches merged one by one, each for a library. the problem, however, that `lib-telemetry` is the main consumer of the functionality included in the other libraries now. that's right. i can implement a set of checks in the cmake that will set the `cmake_osx_deployment_target` based on the version of xcode and the host hardware. afaik 10.7 and 10.8 stand for less than 0.5% of the macos install base, that is hard to say how many audacity users are on this versions.",1,1,1,0.9737786054611206,0.9949536919593812,0.9789050221443176,1.0,accept,unanimous_agreement
833545347,835,"think of some statistic we might want to know about the users -- and now we might write code to collect just that information! (if they opt in) (i'm not suggesting we necessarily build 3.0.3 for 10.7 still, just so collect the hard data on just how few really use it, and only then decide to abandon 10.7.)",0,0,0,0.8504581451416016,0.9348884224891664,0.9370374083518982,0.0,accept,unanimous_agreement
833562408,835,"those five little branches would add the lib-* one at a time, bottom up? that might be less overwhelming to review. the stuff in lib-* is all your work, not copied from elsewhere? i can't see yet in his fork how much work anton has done with dependency on your branch, which is why you don't want to force commit.",0,0,0,0.9230794310569764,0.8620949387550354,0.9836218953132628,0.0,accept,unanimous_agreement
833622526,835,"yep. but the most of the code is in lib-network-manager still it is mine, no 3d party code there",0,0,0,0.9424906373023988,0.8872310519218445,0.984718143939972,0.0,accept,unanimous_agreement
833778895,835,"i know me leaving a comment is not going to stop this feature being included in audacity, but i want to voice my opposition to this change anyway. feel free to ignore me if my opinion is inconvenient to you. i've never contributed to audacity, and haven't really engaged in the development of the project before. i have however used audacity for various audio editing tasks for the better part of a decade. and while i welcome the prospect of new development, and the project getting some of the updates it deserves, i am concerned about the use of analytics, from a principled stand point. we live our lives in a world where virtually every movement we make online, and many of the movements we make in the real world are subject to surveillance and tracking. it has been normalised to the point where the majority of people just put up with it, or don't question its usage. fundamentally tracking and analytics are about a power imbalance between the people doing the tracking and the people being tracked on. yes, i understand that this is opt-in, but that is how a lot of things started, and how they become normalised to the point where a lot of applications and websites _don't_ ask for permission first. worse, because a lot of users have been conditioned to think that tracking is normal, many will just press ""ok"" or ""yes"" to make an annoying dialog go away, not fully realising what they are consenting to. consent based on incomplete data is not truly consent. as i said, i am very happy to see that audacity is getting some love and attention from a design perspective. i'm excited to see how the project can be improved. but i am worried about the use of analytics, especially using large data mining companies (google & yandex) as a platform to do so. if you want to know what your users think about something, ask us. ask us directly and out in the open. don't spy on us. thank you for reading.",-1,-1,-1,0.8028476238250732,0.8513650298118591,0.9398269653320312,-1.0,accept,unanimous_agreement
833778913,835,is telemetry opt-in only or do users have to disable it manually once they update to the next release?,0,0,0,0.9819077849388124,0.994632124900818,0.9933825731277466,0.0,accept,unanimous_agreement
833785461,835,"i agree with . i don't think these kinds of data collection are actually very helpful. the mixxx website had google analytics for years and in practice it never changed a decision we made. if you're going ahead with this, i think you owe it to users to explain in specific terms (not some vague ""this will help us improve audacity"") what you are planning to do with this data and how it is going to help users. you can get the information you need to improve audacity by listening to what users already say and watching them use the software in usability tests. as a harm reduction measure, i suggest to use a service that audacity hosts. collecting data about audacity users is one thing and sending that data to google and yandex is another. i would feel deceived if i thought i was opting into sending data to the audacity developers and later found out it was also going to google and yandex. i also suggest to guard this with a cmake option that defaults to `off`. i suspect some linux distributions will want to build without this. like users, packagers should have to specifically opt into this.",0,1,0,0.5587406754493713,0.5272136330604553,0.745055079460144,0.0,accept,majority_agreement
833794008,835,"also, you may want to think about the gdpr, google isn't known for respecting it... and although it only applies to ""personal information"", the definition of it isn't really precise, and an ip may be considered ""personal info"". ps: i'm no lawyer, that's why i used conditional... [a link] down below pointed out that ip is in fact a personal information, by law.",0,0,0,0.5185860395431519,0.9550506472587584,0.9833953380584716,0.0,accept,unanimous_agreement
833801556,835,"google is a monopoly and a bad actor and i do not want their spyware in audacity. please do not include it in any form. i've spent more time than i care to account for trying to divest from google and i don't want to have to worry that audacity is funneling data about me to them when i listen to or work with music tracks. i will simply stop using it. telemetry isn't that useful anyway. it's certainly not useful enough to justify selling out users to a very large surveillance company, in my view. please remove it completely.",-1,-1,-1,0.976005792617798,0.9795895218849182,0.9814541339874268,-1.0,accept,unanimous_agreement
833802256,835,"i'm just some rando, but i've been using audacity for at least a decade at this point, for everything from school assignments to experimental art. i will find something to replace it if this is merged. getting information about users would be more ethically conducted via a survey of some sort, linked to from the startup modal, ideally with a fully-qualified url and hosted by a site without tracking. at the very least then there would be more transparency for the user about who is collecting one's information, how, and what of that information is received by audacity developers. this could even be done - albeit with less automation - by linking to a forum thread whose sole purpose is to retrieve user feedback. the first post could explain the thread and provide a template for what information the developers would most like to have.",0,0,0,0.7355154752731323,0.9410802721977234,0.7147289514541626,0.0,accept,unanimous_agreement
833808574,835,"telemetry won't tell you if users like the software or wish for a new feature. it only tells them they've been subjected to economic surveillance in an economic manner, and not even a decently useful one. let's face it: telemetry is useless. by its nature, it can't bear any context information, as the telemetry to read a user's mind is yet to be found. (a quest which hopefully never succeeds.) how comes that other successful open source software never had any use for analytics? blender, inkscape, gimp... afaik none of them utilitized google or yandex or any other corporate surveillance service and they're doing great without. some out-of-the-box thinking which innovative companies claim to be good at is probably what's required here.",-1,-1,-1,0.9444717168807985,0.9582406282424928,0.8071001768112183,-1.0,accept,unanimous_agreement
833821994,835,"in addition to all the above comments, i'd like to point out that mandating telemetry may hurt people with any issues related to connectivity. i hope you make this opt-in(and not google! google is terrible with privacy. look into ethical alternatives to data analytics!), rather than opt-out. don't spy on your users. let them tell you things.",-1,-1,-1,0.567438542842865,0.9853923916816713,0.9178457260131836,-1.0,accept,unanimous_agreement
833822556,835,"audacity is wonderful software. it is great, because it works well at what it does. sending surveillance data to third-party companies is not part of that. if you want to collect data, please save it locally, without google or other intermediaries, and ask when you want to send it, giving me the option to inspect it beforehand. even better: allow me to enable recording my actions in a typical use-case and send you exactly this data as usage scenario. that way you get self-curated data which is much more useful for improving audacity, and you avoid selling our privacy to surveillance companies.",1,1,1,0.98261296749115,0.9945419430732728,0.9781246185302734,1.0,accept,unanimous_agreement
833824787,835,"i guess we can learn from the past of where musecore did also having a backlash for implementing telemetry. since audacity now is part of mu.se group, its inevitable. ([a link] but yes... make it opt-in option and if possible, please give an option to disable to this feature in build/make parameter too.",0,0,0,0.8690265417098999,0.9188157916069032,0.9376709461212158,0.0,accept,unanimous_agreement
833838117,835,"it is quite concerning that this comes so soon after the announcement regarding muse group. i was excited to learn that audacity was getting attention on its design, but this makes me concerned about what other questionable changes are coming for audacity in the future.",-1,0,-1,0.7290569543838501,0.7248954772949219,0.9801762104034424,-1.0,accept,majority_agreement
833840159,835,"we need a community fork without telemetry and using a different branding, so, as soon as muse group implements more ~~privacy-abusing~~ people-abusing features, or decides to simply make audacity proprietary, development can continue independently.",0,0,0,0.9751784801483154,0.987664520740509,0.977753758430481,0.0,accept,unanimous_agreement
833840933,835,"there are two separate issues: 1. telemetry itself; 2. the sharing of user data with google analytics, yandex or other third-party for-profit ad-oriented companies. while telemetry itself is sometimes included in libre software (as explicit opt-in), i don't believe piping user behavior data into google analytics et al is a widespread practice in well-known free software projects yet. (i _may_ be totally wrong and other projects may already be doing this, but at least the explicit opt-in popups that i have seen as a user didn't mention google analytics). i suspect that gdpr-wise this might be an interesting legal problem not only for audacity but for linux distributions as well. please manage the telemetry data yourself instead, without using google analytics (perhaps by using self-hosted open-source tools). and make it opt-in, with clear consent (gdpr, again).",-1,0,0,0.93968403339386,0.9397109746932985,0.9697728753089904,0.0,accept,majority_agreement
833841340,835,let's not get hyperbolic here. audacity is licensed under the gplv2. nobody can make it proprietary.,-1,0,0,0.7651904821395874,0.9487018585205078,0.9128584861755372,0.0,accept,majority_agreement
833844145,835,"if muse group holds the license to all the code, they can simply not release future versions under the gpl. the existing code would exist, but the other code wouldn't be gpl licensed.",0,0,0,0.9855929017066956,0.9921093583106996,0.9892828464508056,0.0,accept,unanimous_agreement
833850896,835,"session start and end errors, including errors from the sqlite3 engine, as we need to debug corruption issues reported on the audacity forum usage of effects, sound generators, analysis tools, so we can prioritize future improvements. usage of file formats for import and export os and audacity versions please make each of these categories of information easy for the user to individually opt into with separate checkboxes. a simple ""send information to audacity developers"" option is not sufficient for informed consent or giving users meaningful choices to make about their privacy. i personally would be fine telling audacity developers what effects, os, and audacity version i am using, but i am not comfortable telling you when i am using audacity. that feels invasive and you don't need to know that. also, please explain directly in the user interface where these options are toggled how sending each of these pieces of information to the audacity developers will benefit users sending the information, for example, ""telling us what operating system you are using helps us prioritize which operating systems to keep audacity compatible with.""",0,0,0,0.7193043828010559,0.949307918548584,0.9697449207305908,0.0,accept,unanimous_agreement
833852063,835,"ip **is** a personal data [a link]: (see also this [a link], page 16.) when it comes to google analytics, it’s a no-brainer: if the user has a google account and has been connected to the account on the same ip address audacity is used, there will likely to be a match (depending on the number of users having the same ip, and/or sharing the device). that said, if audacity maintainers want to do telemetry: - you’re by law required to make it opt-in, at least for european users; - there are open source and/or self-hosted alternatives you should consider: - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - make sure your privacy policy: - receives the attention it deserves; - is explicit about what you track and what it enables; - states that the collected data are publicly accessible, because it’s open software.",0,0,0,0.914498805999756,0.9864048957824708,0.9768705368041992,0.0,accept,unanimous_agreement
833868941,835,if you audaciously add this i'm going to have to fork audacity and remove it again.,0,0,0,0.6114330291748047,0.901749074459076,0.656758189201355,0.0,accept,unanimous_agreement
833881022,835,"please post screenshots with your pull requests when you propose to change the gui to make it easier for users to give feedback on the design, especially considering you require a forked version of wxwidgets which makes it cumbersome to build audacity locally.",0,0,0,0.9613028168678284,0.9784788489341736,0.9907087087631226,0.0,accept,unanimous_agreement
833884135,835,"as a long time user, i'm really struggling to see why you'd want to add telemetry. first, it's going to google, which is kinda againsty the foss (free and open-source software) philosophy, and second, what is that going to help you with? audacity managed to be the best foss sound editing software you can get, with a lot of features, and without a bit of telemetry. if your goal is to provide a good piece of software to the foss community, then listen to the community instead of selling it to google, and ""trying to figure out what they want"" based on some numbers in a chart.",-1,-1,-1,0.9769225120544434,0.9269436001777648,0.9703923463821412,-1.0,accept,unanimous_agreement
833886274,835,are users able to see the data that is collected or is that only available to a few audacity developers?,0,0,0,0.980107307434082,0.9916139841079712,0.991789698600769,0.0,accept,unanimous_agreement
833890995,835,"i am concerned for the direction of the project if the maintainers are considering incorporating telemetry, of all things.",-1,0,-1,0.85285884141922,0.8427131772041321,0.9431743621826172,-1.0,accept,majority_agreement
833892740,835,"-ing not necessarily, it depends on whether the copyright of code and contributions is owned entirely by the developers/authors, or not. contribution agreements play an important role on whether you can take a gpl'd software proprietary or not. this article explains different cases: [a link]",0,0,0,0.9751725792884828,0.9884490370750428,0.9677056670188904,0.0,accept,unanimous_agreement
833905304,835,one suggestion: make it clear in the permission dialog that telemetry uses google analytics rather than a private service you host yourself. this may be particularly of note to users who are covered by gdpr regulations.,0,0,0,0.9794108867645264,0.9914940595626832,0.9882544279098512,0.0,accept,unanimous_agreement
833906949,835,including it in the first place (opt-in or opt-out) is the problem. changing the default down the road is just too tiny a change (and maybe too tempting not to do it). this should not be included at all.,0,0,0,0.5497236251831055,0.8143193125724792,0.6607089638710022,0.0,accept,unanimous_agreement
833911364,835,"some users are going to be upset if you merge any form of telemetry whatsoever. personally, my respect for audacity would increase if you really take the feedback here to heart, put in the work to switch to a self-hosted server, and work with us to make the gui design very specific and clear so users can easily make informed decisions about their privacy. i think you will get more complete and useful data if users feel they can trust you with it. edit: my [a link].",-1,0,1,0.5787602663040161,0.6910871267318726,0.9163881540298462,,review,no_majority_disagreement
833914225,835,is there a specific issue or request that this pr addresses? i'm not seeing any reference here to the usual discussion a major change like this would usually require.,0,0,0,0.8399276733398438,0.9544654488563538,0.9775170087814332,0.0,accept,unanimous_agreement
833914295,835,"the commit stats on this are amazing to me: 5,506 lines of code inserted to implement telemetry that should not be in there. that is a substantial amount of code that certainly contains dozens of bugs and likely several security issues. that is enough code to be a maintenance headache for someone forever. that's also enough code to implement at least one cool new feature that end users actually want to have. why telemetry, in an already excellent piece of software? whyyyyyyyyyyyy?",1,1,1,0.9777486324310304,0.9898275136947632,0.4687764346599579,1.0,accept,unanimous_agreement
833915363,835,most of that code is from vendored dependencies. the changes to the audacity code are quite small.,0,0,0,0.9590393900871276,0.9247118830680848,0.9914237856864928,0.0,accept,unanimous_agreement
833917324,835,"good point. so perhaps the ""dang, this could have been an actually useful feature"" part of my mini-rant is not as relevant. the rest is though--that's a lot of code, with potentially a lot of bugs and security holes, and you've already started documenting above! adding a bunch of new dependencies is worrisome generally speaking, too, let alone for this.",-1,1,1,0.8027979731559753,0.496510773897171,0.8679817914962769,1.0,accept,majority_agreement
833917348,835,"not going to dispute that this is a bad look, or might violate the gdpr, or even that it's a slippery slope and all that. but as a long time casual audacity user this is not the end of the world for me either: * at least it's google (motto: ""we're not evil:trade_mark:""), and not facebook (motto: ""hahah, whoops you caught us..."") * sounds like i will not be required to opt-in (and/or at least can opt-out, ...and block any initial attempts via little snitch until then ;-) and one thing that makes a big difference to me: * the telemetry agent looks to be custom code tracked in the repository itself, instead of dropping in some supply chain attack that an advertising company offers in pre-built form (and which may/may-not actually respect my tracking preferences behind the scenes!)",-1,-1,-1,0.9328494668006896,0.9372490048408508,0.4397879242897033,-1.0,accept,unanimous_agreement
833918134,835,yup. they're adding a whole network and http stack *just* for that.,0,0,0,0.5069514513015747,0.517028272151947,0.8813607096672058,0.0,accept,unanimous_agreement
833919359,835,"it seems like the pr author forgot that this is an audio editing program and not a ""stream mouse clicks to google"" program.",0,0,0,0.5896149277687073,0.9802749752998352,0.6139265298843384,0.0,accept,unanimous_agreement
833920426,835,"i strongly recommend you read up on just how evil google is. they've had multiple, multi-billion dollar fines for their various misdeeds; they spy relentlessly on anyone who gets near their platform; they are involved in multiple lawsuits in the us for violations of antitrust law; they're a revolving door for us military higher-ups; they take large amounts of money from the us military and there's good reason to believe it's helping to build weapons; etc etc etc etc. literally google ""google actually is evil"" and you'll find lots. ""as least it's google and not facebook"" doesn't make sense. that's like saying you're glad you had a major stroke instead of a heart attack.",-1,-1,-1,0.7062185406684875,0.9735528230667114,0.9639202952384948,-1.0,accept,unanimous_agreement
833923797,835,i'll add my vote against this pr. you shouldn't be sending any data to google. looking forward to the fork without the telemetry code.,0,0,0,0.8600364327430725,0.9135918617248536,0.5410342812538147,0.0,accept,unanimous_agreement
833925410,835,"your privacy policy is missing all your information how to handle collected data on your website [a link] do you even have a privacy policy for your application? you have a google searchbar, but dont list the conditions of usage (including privacy terms) which is legally worrisome at least. i want to quote your message on your website [a link] ""we are happy with our current advertising partners and are not interested in new offers of advertising or monetization schemes. we do not, and will not bundle other applications with audacity."" your website and ""the google logo is a trademark of google, inc."" ([a link] makes me think different.",-1,-1,-1,0.9561702609062196,0.6501784920692444,0.9740846157073976,-1.0,accept,unanimous_agreement
833931985,835,"itemize this down into several parts. adding libcurl, while increasing the complexity and dependency chain of audacity, may be useful in the future (e.g., networked live/streaming audio capture, linking audio files in a project from network sources) but not to implement a development nightmare like this. don't import the library wholesale, but rather, include its code in a maintainable way that is safe to upgrade by maintainers. lobbing the whole library into local scope may interfere with the speedy response to security/vulnerability reports, and looks ugly in general to maintainers. don't fork wxwidgets for one feature. try instead, to write the feature in a local scope - a lot of the wx apis are declared weak, for a reason. don't add telemetry to a third-party provider that isn't owned by a maintainer of audacity, or a leading member of the audacity team.",-1,-1,-1,0.8178070187568665,0.7114611268043518,0.6790788173675537,-1.0,accept,unanimous_agreement
833940218,835,"as far as i can see, there isn't and wasn't any sort of cla in place that specified that anyone submitting patches to the project would agree to future license changes. so if i'm not mistaken, the license of the project cannot be changed from gpl unless the new project managers obtain permission from everyone who contributed in the past and/or remove code contributed from people who refuse to change the license. therefore, while monetisation can come into the project by building additional paid cloud services or selling the telemetry data, the project cannot become closed source with respect to what is on a user's desktop.",0,0,0,0.9733938574790956,0.9577003121376038,0.9873365759849548,0.0,accept,unanimous_agreement
833940717,835,bruh,0,0,0,0.9231669902801514,0.5735108852386475,0.8966339826583862,0.0,accept,unanimous_agreement
833941987,835,"'-' \"" \- \"" 0 \=",0,0,0,0.7938953042030334,0.9197320938110352,0.9704947471618652,0.0,accept,unanimous_agreement
833942631,835,"half of that sentence is true, it can not become closed source. the other half is not related in any way. of course one can and may charge for open source software. you can tie pre-built binaries to payment, for example.",0,0,0,0.9848490357398988,0.9727307558059692,0.9907692074775696,0.0,accept,unanimous_agreement
833946994,835,"adding telemetry is a good way to instantly create 20 new forks of this project, all of which remove muse group's control over their investment. consider yourselves threatened.",-1,-1,-1,0.5217993855476379,0.6039745807647705,0.8377734422683716,-1.0,accept,unanimous_agreement
833947114,835,neat! another project i can cross off my list.,1,0,1,0.9499194025993348,0.5152994394302368,0.968874454498291,1.0,accept,majority_agreement
833948080,835,also what are you doing to keep this gdpr and local data protection laws complaint?,0,0,0,0.92947655916214,0.957371175289154,0.9651857614517212,0.0,accept,unanimous_agreement
833950999,835,"just to reassert this: making it opt-in is a __requirement__ of the gdpr. without misleading dialogs, and without manipulation like a shiny green 'accept' button vs. a tiny 'reject' button. and yes, other commenters have been correct in saying that telemetry isn't that useful, and you should just *ask* users what issues they run into with the software. you will learn a lot more actionable information, without being invasive. edit: to clarify, ask users what they dislike or what frustrates them, not what they want. learning what people *don't* want is the most actionable information for improving a piece of software - pie-in-the-sky ideas are much less useful.",0,0,0,0.5778010487556458,0.673283576965332,0.9501848220825196,0.0,accept,unanimous_agreement
833951629,835,"this nonsence, but still no bug fixes to jack support.... really? i guess the muse group money had strings attached.",0,-1,-1,0.948294460773468,0.8841537833213806,0.9323237538337708,-1.0,accept,majority_agreement
833953134,835,"i feel bad for all the people getting emails about this right now... personally, i wouldn't mind the change if it didn't add more dependencies (both locally in terms of libraries, and in terms of depending on 2 relatively large tech companies for your data). maybe if it was a matomo instance (or similar), it would be more likable.",-1,-1,-1,0.987158477306366,0.9867265224456788,0.9923967719078064,-1.0,accept,unanimous_agreement
833955655,835,how do we know he's with them?,0,0,0,0.9733204245567322,0.9725672006607056,0.9860596656799316,0.0,accept,unanimous_agreement
833957329,835,"i did some digging, the account is largely inactive until this year. first contribution to audacity was in 29 march, and was an edit to the error handling. one other pr merged yesterday was a sqlite version bump, presumably to support this change. finally the account states his location is st petersburg, and has a very small set of projects given the account's 9yr old age. generally it stinks of corporate interference, but at least they didn't sneak this in as a side entry to some other more important changes. clearly they're new to this foss thing.",-1,0,-1,0.9406355023384094,0.5276861190795898,0.961205005645752,-1.0,accept,majority_agreement
833958358,835,"the most suspicious thing here is how readily reviewers jumped to inspecting the implementation details of a pr given the complete lack of any discussion of the feature, or even a single relevant ticket.",-1,0,-1,0.5627422332763672,0.857754111289978,0.7553771138191223,-1.0,accept,majority_agreement
833963533,835,"okay, i can understand why you would be suspicious of the other things but why is being located in russia a suspicious thing? does country of origin really matter in this case?",0,0,0,0.9432604908943176,0.8413900136947632,0.8666298985481262,0.0,accept,unanimous_agreement
833964145,835,"wow so many people in this thread need to chill out. a) it's opt in b) it's anonymous c) it's only collecting basic stats about how users are using the application, ya know, helpful stuff that helps developers make decisions on how to improve the user experience? chill out folks.",-1,-1,-1,0.9623753428459167,0.5875732898712158,0.9918718934059144,-1.0,accept,unanimous_agreement
833964165,835,"its where muse group's headquarters are. no malcontent to any russians intended, i am only pointing out that makes it more likely this where that guy works.",0,0,0,0.9006805419921875,0.5430406332015991,0.9249120354652404,0.0,accept,unanimous_agreement
833969076,835,"as someone who has worked and collaborated on many open-source audio applications and plugins myself, **please do not merge** this pr. i will fork and maintain a custom audacity build myself if i have to. we do not want analytics, phone-home or other ""modern"" crap in such tools. thank you",1,1,-1,0.9001953601837158,0.978042483329773,0.9304899573326112,1.0,accept,majority_agreement
833969481,835,i don't think we need a fork if this is behind a compile option that defaults to off.,0,0,0,0.9714776873588562,0.971648633480072,0.9776416420936584,0.0,accept,unanimous_agreement
833969780,835,"for now. it's pseudonymous at best, google and yandex can likely de-pseudonymize you. there's already a tool for that, it's called asking. [a link]",0,0,0,0.9803124070167542,0.9581079483032228,0.9837453365325928,0.0,accept,unanimous_agreement
833969933,835,"yup, but it's a slippery slope to see it enabled by default some day... nope, that's ga. they will do whatever they can to add that data to the (already large) user profile they have of everybody. tracking users is not the foss way of making better software. there are tons of great foss software that has decent ux (blender, inkscape, ...) and spoiler, they're not tracking their users.",-1,-1,-1,0.8233569264411926,0.9763848781585692,0.5530405044555664,-1.0,accept,unanimous_agreement
833970698,835,100% not the point. one of the pillars of foss is maintaining decentralized systems. this pr is in direct conflict with those values.,-1,0,-1,0.579641580581665,0.8793012499809265,0.8609482645988464,-1.0,accept,majority_agreement
833971160,835,get the gdpr lawsuit threats ready just in case folks and pitchforks,0,0,0,0.9727794528007508,0.9033783674240112,0.8349530696868896,0.0,accept,unanimous_agreement
833974696,835,"i'm concerned about the use of a persistent identifier and google analytics here. google does not have much respect for user privacy, and this change provides more than enough information to allow a user to be tracked across networks.",-1,0,-1,0.9604694843292236,0.8543688058853149,0.962493360042572,-1.0,accept,majority_agreement
833975002,835,"i personally can see some value in having telemetry information, but i would politely, yet firmly, disagree with the notion of adding google-based tracking to audacity and, instead, would ask for something that wouldn't deliver information, ""anonymized"" or otherwise, to a company such as google on a silver platter... isn't opentelemetry a thing?",0,0,-1,0.8242596983909607,0.5117480158805847,0.5518176555633545,0.0,accept,majority_agreement
833977715,835,just do a survey,0,0,0,0.9814648032188416,0.9392457008361816,0.9921250939369202,0.0,accept,unanimous_agreement
833981552,835,is the author aware of submodules? why are those dependencies directly included?,0,0,0,0.9826120138168336,0.9934954643249512,0.9939059615135192,0.0,accept,unanimous_agreement
833983858,835,"i second this. it is a thing, but google is heavily involved with the project, but i am not sure if it's actually a google project: [a link] also: [a link]",0,-1,1,0.8897785544395447,0.7560586333274841,0.5617648959159851,,review,no_majority_disagreement
833983936,835,"nice, it's almost a ""real daw"" now. fork name suggestions?",1,1,1,0.7327471375465393,0.8680500388145447,0.9585632085800172,1.0,accept,unanimous_agreement
833984854,835,:bread: :dashing_away:,-1,0,1,0.8093093037605286,0.7970448136329651,0.9665659070014954,,review,no_majority_disagreement
833985343,835,please don't post one word or just an emoji in a comment. it only makes noise with notifications and clutters the discussion. use github reactions instead.,0,0,0,0.8550671339035034,0.8729742765426636,0.7605557441711426,0.0,accept,unanimous_agreement
833987550,835,"audacity already [a link] instead of using submodules. i don't know exactly why it's done like that, but one advantage is that downloading the repository as a zip file includes the libraries (which doesn't happen with submodules), and also regular `git clone` works normally instead of requiring `git clone --recurse-submodules`. imo it would be wrong to add a new dependency as a submodule without converting the existing ones to submodules, which would also be something that should happen in its own pr (if converting to submodules is actually a good idea).",0,0,0,0.9268919825553894,0.9792612195014954,0.9814194440841676,0.0,accept,unanimous_agreement
833988587,835,"as a developer who does a lot of ""proprietary-flavored"" services, stuff that has a very corporate coat of paint over it, i know the value of telemetry information to get a sense of user base topology. audacity is often prided on its high-quality forum, but it's really hard to get users to actually speak up when they find something wrong with your service. users don't report crashes or bugs; they just complain. the thing is, i want to make my software better for them! telemetry and crash reporting is *super* helpful, because it takes the effort off of the user to get information about crashes. if you have issues with a given feature, it ends up on your radar a lot quicker. as such, i totally support the decision by audacity to include telemetry in the next release of audacity. but...\ google analytics? guys, i think you need to reconsider. google analytics isn't a telemetry or analytics platform; it's the eyes and ears of a cosmic horror of a company. i shouldn't need to go into the details of why google or ga is so bad. i realize i alone won't have any power to dissuade you guys, but i seriously implore y'all to reconsider. please, guys, pick another telemetry platform.",1,-1,1,0.9106012582778932,0.5473597049713135,0.961396872997284,1.0,accept,majority_agreement
833990054,835,"i would like to point out there is in the shadow of this pr a draft pr to add breakpad support. which is a crash and error reporting tool, much more appropriate to the types of information that *should* be collected here. that said breakpad is also a google technology and i am unaware how tightly it is integrated with google infra, but it stands as a statement that even in google's wheel house analytics is a tool for making money, not actionable insites on software stability.",0,0,0,0.7743295431137085,0.9541733264923096,0.9442791938781738,0.0,accept,unanimous_agreement
833991711,835,"i understand the need for this kind of telemetry. but i think it would be better if instead of the telemetry of being opt out it would be opt in. this way people who value privacy wouldn't feel like they are using creepware and people who are willing to give their information can do so by changing a setting. also, using google analytics is a very bad move and would discourage a lot of people from keeping the setting enabled. i would be willing to send my information somewhere i trust but google is definitely not a company that is trustworthy and has a horrible privacy track record.",-1,-1,-1,0.9835011959075928,0.9759682416915894,0.9847965240478516,-1.0,accept,unanimous_agreement
833994410,835,"i will say that self-hosted telemetry services are a thing. i'm not inherently against the idea of telemetry; but while a high-dollar, professional and closed-source application may handle it with google and wide-brushed opt-out click-tracking, this particular implementation is extremely sore for a free-software project. the damage done by even *__suggesting__* this line of action, will completely undo the supposed benefits of direct feedback, knowing which features are used how, in a general user workflow. i'm aware audacity is under new management, in general, but that just makes things even more sore for the community of users and contributors on seeing this change come to light. it puts egg on the face of not the project, but its management, leadership and ownership. i strongly suggest cancelling this change set - as i mentioned before, keep the parts which do have value to the project now or in the future, like library additions and upgrades - the sqlite upgrade merge happened without issue! and this change set is at least in multiple commits, which are easier to break down and work with - those should have been separare pr's, rather than this obstructive patch of regolith with many layers to support one core function. i'd recommend that you do keep the different parts in separate itemized prs with a smaller code footprint, and do open a public request for comments on telemetry implementations, best-practices, things like gdpr/california ccpa regulatory and compliance hurdles, and get a general feel for the community that uses the software. hell, if you have legal counsel on the team, it would be a bright idea to loop them in on the telemetry changes. audacity is a global project, and legal scope matters just as much as jurisdiction. all in all, everyone commenting and :thumbs_down:'ing the pr here, are a very small minority of audacity users; most (myself included!) won't even see changes like this, until it's brought to their attention by someone, likely a contributor, who _has_ seen this. if a small cluster of us, including open-source contributors, are strongly against it, it would be remiss of you, and the management of the project here, to push through without soliciting further comment and considering changing course in the ways that matter. this change set exemplifies ""audacity"" by the word; not as in ""bold courage"", but as in ""brazen impudence"".",-1,-1,-1,0.9795435070991516,0.9545471668243408,0.9155223369598388,-1.0,accept,unanimous_agreement
833995626,835,"if there was a way to force this branch to always conflict, so that it could never successfully merge, that would be cool. others have pointed to gdpr, privacy policies, statements made previously about third parties, and whatnot. i'm here, looking at a merge that passes checks and is two affirmative reviews away from a hard fork away from here. if we, as a community, created and got approved merge requests that intentionally conflict with this branch it could slow this down. i say this as someone who has yet to contribute to the audacity project. how dare you have the audacity to put analytics into foss!?",-1,0,-1,0.9787798523902892,0.7158283591270447,0.9244149327278136,-1.0,accept,majority_agreement
833996744,835,"this kind of sabotage, and spam, and general anger in this thread isn't the right way to do this and isn't productive. the important thing is that reviewers don't approve it and the maintainers don't merge it until it gets the thorough evaluation and discussion it deserves. spam does nothing but make the people who object (who are right, of course) look bad. **don't** simply merge this pr. that's the obvious takeaway here. **do** open a full and thorough issue and discussion about whether to have any sort of analytics. if there's consensus that analytics are beneficial, then have a discussion about what platforms and providers to use, and how to safely protect that information to confirm to the relevant requirements. if there's consensus about that, then we can figure out what the best software stacks are to use. this pr is jumping *far* ahead of a reasonable process.",-1,-1,-1,0.9239655137062072,0.9450818300247192,0.9377065300941468,-1.0,accept,unanimous_agreement
833996897,835,git is not a weapon. behavior like this would be counter productive and damaging to the software as a whole.,-1,0,-1,0.9272760152816772,0.6630854606628418,0.5444788932800293,-1.0,accept,majority_agreement
833997086,835,", this pull request is definitely bad, but antagonizing the audacity developers who have put *years* of hard work into this software is unhelpful and ungrateful.",-1,-1,-1,0.9882332682609558,0.9778341054916382,0.987536609172821,-1.0,accept,unanimous_agreement
833997191,835,-ing agreed,0,0,0,0.9695396423339844,0.9595707654953004,0.9499325156211852,0.0,accept,unanimous_agreement
833998003,835,"i think we do. if this is merged i don't know that i can trust the audacity team anymore. and i don't think anyone else should either. the privacy of their users and the backlash that this is getting should be strongly considered. if this is merged i will no longer be using audacity. i will no longer be installing it on my own machines or the machines of any company whose infra i manage, now and in the future. we have enough stuff that is watching us and listening to us already. i don't need my audio editor added to the list. privacy is a human right. involving google or yandex in the use of a piece of software like this is completely uncalled for. i was legitimately excited when i heard muse group was getting involved in audacity. i see my excitement was misplaced.",0,1,-1,0.4799361526966095,0.5202611088752747,0.6750175952911377,,review,no_majority_disagreement
833998386,835,"i strongly recommend all audacity developers read this [a link] about the rust project's experience with an inside group trying to push through a controversial change, the lessons learned, and the changes in process and culture that resulted from that. the whole 3 part series of blog posts is fantastic.",1,1,1,0.984597384929657,0.9933130145072936,0.9952077269554138,1.0,accept,unanimous_agreement
833998723,835,this is the exact mindset that lead to the actix web incident.,0,0,0,0.9796234965324402,0.9757097363471984,0.9503005743026732,0.0,accept,unanimous_agreement
834000581,835,sounds to me like the outcome of that was the project rid themselves of a toxic individual.,-1,0,-1,0.6256370544433594,0.964866578578949,0.7694939970970154,-1.0,accept,majority_agreement
834002259,835,"no problem. if this is merged, a fork will emerge that will most likely take over. i certainly won't be using upstream audacity if it does. why on earth anyone thought this was a good idea is astounding. tantacrul, if you're here, this is highly suspicious. i sincerely hope this has nothing to do with musescore. --- # edit: another pr that is adding google dependencies, potentially telemetry: #836",1,1,-1,0.6398766040802002,0.7469581961631775,0.8774751424789429,1.0,accept,majority_agreement
834005951,835,"noob question, why is directly including the dependencies bad?",-1,-1,-1,0.5981465578079224,0.889872670173645,0.8715748190879822,-1.0,accept,unanimous_agreement
834005956,835,"as stated by many before me, **please** don't add telemetry to audacity. doesn't matter if it is opt-in or if it helps to improve user experience. when a user had an issue in the past, they posted to forums and got help that way. that's how it can still continue to work. analytics are __not__ needed, especially due to the decentralized aspect of free software. who will collect theses logs? this is absurd. this is an audio software, not a data collection solution. i think this pr (or any that involves telemetry) should not be merged. i believe this goes against the essence of free software. i will be using a telemetry-free fork and encouraging people to do the same if the project decides to go down that path.",-1,-1,-1,0.9735036492347716,0.9894939064979552,0.9607377052307128,-1.0,accept,unanimous_agreement
834006290,835,"- except it won't. visual studio code is a great example that bundling telemetry in a foss project can be done. adding telemetry in audacity, even opt out, will inevitably affect the privacy of the majority of people. the ones who won't bother to switch to one of the forks.",0,0,0,0.6184473633766174,0.551637589931488,0.9085850715637208,0.0,accept,unanimous_agreement
834006924,835,"a module which is included directly won't get updates or security patches, requiring developers to manually upgrade. this increases the risk that a fix for a security vulnerability or important bugfix doesn't get into the program quickly.",0,0,0,0.9589143991470336,0.9635702967643738,0.9431362152099608,0.0,accept,unanimous_agreement
834007724,835,"it puts the responsibility to update and maintain the dependency on the maintainer, it also provides an opportunity for the dependency to diverge from its upstream which has license and maintainability concerns. the unix philosophy would be to dynamically link against the library, allowing the os to manage updates and provide bugfixes when available, but that its its own can of worms. using a sub module is an in between.",0,0,0,0.9458141326904296,0.9900867342948914,0.9774262309074402,0.0,accept,unanimous_agreement
834008784,835,"whether this pr is merged or not, it's a good thing that this issue came to the community's attention. i don't really pay much attention to the developer side of most of the products i use, and i doubt vast majority of people on the consumers' end do either. good on you guys!",1,1,1,0.9900555610656738,0.9919731616973876,0.9949386119842528,1.0,accept,unanimous_agreement
834010117,835,"not a noob question imo, and a very good one, too. <3 people don't ask questions about large codebase management often enough, at all. :) there's pros and cons to including the dependencies, versus alternatives like, getting tarballs in the buildscripts, or git submodules. **include all libraries in-tree, and maintain them ourselves.** (audacity does this.) - **pro:** by homing the dependencies and libraries, you can quickly integrate your own changes to the libraries you need as you need them, without waiting for upstream developers and maintainers to review and merge them. - **con:** however, including dependencies can cause bit rot and api erosion, where new versions of the library are introduced that are incompatible with the included version, and contain important or valuable changes (such as security fixes or performance improvements), **separately download and patch a specific version of upstream libraries, at build-time, through build automation.** - **pro:** having the build scripts pull in the libraries and patching them locally is a good compromise between self-maintainership, flexibility and autonomy, while better enabling out-of-tree development to continue, and for the upstream changes to be included in the current source as needed, efficiently. many gnu-type tools do this. - **con:** getting the libraries separately as a tarball can introduce bit rot when remote maintainers (like, say, the gnu project or a sourceforge page) change url formats, remove old versions, or otherwise go dark. **use git submodules to fragment dependencies out-of-tree, and handle patches through change-request branches.** - **pro:** including the dependencies as submodules works best for a git-based workflow, and is automatic, further, this exposes changes that audacity would seek to include in a future version of a dependency, to maintainers who may wish to import and merge the changes. and, if they choose not to, the branch you made will remain available for your own use, regardless. - **con:** well, this can be quite a headache to maintain, especially to someone not strongly familiar with git and github and the like, and this method does not easily carry over into a tarball format (unless the .git tree, or at least the submodules/gitconfigs, are included alongside.) i view the first issue as the most problematic, far outweighing its pros, and would recommend against including the libraries in-tree for that reason alone. personally, i'd do a mix of the above: - host our own version of dependencies, libraries and such, under the audacity github organization or its canon git server. - have the build scripts download and patch the library dependencies, using git as needed, if they're not found (e.g., by way of tarball); - use submodules, pointing to the included versions hosted by audacity, which are forks of upstream libraries at specific versions; - and, finally, provide tarballs including a flat (`--depth=1`) git tree, plus making `git bundle` format sourceballs available alongside the tarballs, as git may compress the code better than a flat code tree in gzip.",1,1,1,0.9880421161651612,0.9957654476165771,0.9969316720962524,1.0,accept,unanimous_agreement
834011310,835,"audacity's vendoring of portaudio has already caused hassle for fedora packaging (#840), which ends up affecting developers of other applications (mixxx) that use portaudio because it is up to us to do the work to keep audacity working with the distribution package and include the updates our applications need (to be fair, the portaudio maintainers were not very responsive in the past few years which has gotten better in the past few months).",0,0,0,0.6001853942871094,0.9149338006973268,0.8249096274375916,0.0,accept,unanimous_agreement
834012936,835,while we're on the topic of problematically bundling dependencies why on earth does audacity have an sqlite server **database** in it in the first place?,0,0,-1,0.663144588470459,0.8893439769744873,0.5263211131095886,0.0,accept,majority_agreement
834013153,835,iirc sqlite doesn't require a server,0,0,0,0.9874448776245116,0.97145015001297,0.9942586421966552,0.0,accept,unanimous_agreement
834014031,835,i don't use databases much but sqlite is useful for small single user databases for standalone applications from their own page [a link],0,0,0,0.9694522023200988,0.9535070657730104,0.8698484301567078,0.0,accept,unanimous_agreement
834016199,835,"i have answered my own question, aup3 files are actually sqlite databases. seems like a strange design decision but this pr is not the place to argue about such things.",-1,-1,0,0.9083605408668518,0.9617673754692078,0.5215434432029724,-1.0,accept,majority_agreement
834017256,835,"that's interesting, but it makes sense - a lot of embedded, serialized data types use sqlite for such things - like, video game save files, working projects in some video editors, configurations for some ides and text editors, and things like mozilla firefox for storing a combination of user settings, history, bookmarks and such in a nicely bundled, easily-queried and reproducible tabular form.",0,0,0,0.600218653678894,0.4965966641902923,0.6179538369178772,0.0,accept,unanimous_agreement
834021100,835,"is there an official statement about telemetry and this pull request? trying to be respectful to all parties, but this does not seem like it is helping the user and/or the maintainers at the moment. does this coincide with the recent acquisition?",0,0,0,0.9309911131858826,0.959238052368164,0.9475969076156616,0.0,accept,unanimous_agreement
834021610,835,"while adding some form of telemetry is useful, i would absolutely recommend against using google analytics, there are plenty of good alternatives that don't require you pinging google every time you use audacity",1,0,0,0.4965771436691284,0.8788902759552002,0.9285386800765992,0.0,accept,majority_agreement
834029318,835,just no.,0,0,0,0.7163390517234802,0.8376513123512268,0.7564743757247925,0.0,accept,unanimous_agreement
834029854,835,no. remove entirely. shouldn't even be opt-in. 100% using a fork without this from now on if this malware is merged.,0,0,0,0.9160053730010986,0.9239374995231628,0.7322087287902832,0.0,accept,unanimous_agreement
834029931,835,"i'm ok with telemetry. i'm _not_ ok with google telemetry. i'll immediately stop using audacity if you put this in and i'll warn all of my colleagues to do the same. i understand the need for telemetry and analytics, but i cannot and will not condone google analytics in any open source software i use.",-1,0,-1,0.5837298631668091,0.5991901755332947,0.9650917053222656,-1.0,accept,majority_agreement
834030137,835,"there is no public statement that i am aware of yet, but i imagine there will be one tomorrow, or if not, in the next few days. i can't imagine them not making one with the amount of pushback the pr has received. on thu, may 6, 2021, 22:50 ict ***@***.***> wrote:",0,0,0,0.8329659104347229,0.9677111506462096,0.596732497215271,0.0,accept,unanimous_agreement
834034363,835,the first red flag has arrived,0,0,0,0.9578042030334472,0.967631459236145,0.9623867869377136,0.0,accept,unanimous_agreement
834035359,835,-wip0 it's only the beginning,0,0,0,0.9792326092720032,0.9860894680023192,0.9781908988952636,0.0,accept,unanimous_agreement
834037351,835,"i have been reading through this pr, and all of the comments, and agree that the idea of adding telemetry using the google api's is extremely problematic. there really does need to be a lot of conversation around this pr considering all of the issues that have been brought up, including (but not limited to): - the apparent lack of following the normal process for this pr. - the apparent lack of consideration of how this change needs to be implemented for different localities, such as the eu's gdpr, california's ccpa regulations, and other regions regulation, etc. - questions surrounding google api's being used for gathering this information. - serious issues with privacy questions. - questions about the custody of this information: ie, who is going to gather and use this information? and to what end is this information going to be used? - are there other options that can be implemented that will enable the same functionality without impeding on the privacy of users? the problem with this pr is now that it is out there is a stain of mistrust on the audacity project... something that i would never have thought i would be saying about one of the most revered open source projects of all time. (seriously, i can't think of many projects that have had the enduring admiration of such a large audience.) imo - if there is not a public statement about this pr made tomorrow, i would suggest that someone participating in these comments start a **respectful** conversation on the forum, as this pr's proposals need to be discussed with the much larger user base of audacity.",-1,-1,-1,0.9020044207572936,0.7711644172668457,0.8954680562019348,-1.0,accept,unanimous_agreement
834038939,835,"i tried to find discussion about this in the forum and could not. if you want to know more about how to improve audacity for users, i recommend switching to modern and more usable infrastructure, in particular migrating your old phpbb forum to discourse. this will make it nicer for users to tell you what they want.",0,0,0,0.8925508856773376,0.96685129404068,0.949365735054016,0.0,accept,unanimous_agreement
834039616,835,"the forum is an interesting idea, but really any github pr should be strongly linked to one (or more) github issues",0,1,1,0.6987605690956116,0.749371349811554,0.8292430639266968,1.0,accept,majority_agreement
834043338,835,"so did i, and for some reason i cannot create a new conversation, which is why i suggested that someone should start one. personally, i'm not a fan of discourse, and a forum with over 150,000 members, and hundreds of users online at a time migrating to a new forum is likely something that would (a) take considerable effort, and (b) be just as divisive as this pr. :)",-1,1,1,0.9050185680389404,0.9769616723060608,0.9705874919891356,1.0,accept,majority_agreement
834043447,835,"i strongly recommend never putting any telemetry code into audacity. audacity is an open source music app for editing sound and music. you don't need numerical data and metrics and analytics to improve the app. it's not the end of the world if someone encounters an error and the developers aren't aware of it right away. what good could possibly come out of it? none. what bad could come out of it? lots privacy issues and bugs. from the pr: you can fix bugs as you encounter them. or as people report them and you are able to reproduce them. if you want, you can make logs and have people to upload those log files manually. you don't need to know which file formats are popular, you can just ask people to open issues if they want a file format supported. you don't need to know which effects are popular. prioritize improvements based on your own experiences with the app and encourage people to give written feedback. why does it matter which os version or audacity version people are using? that information should be private. if for some reason you really care you can create a poll.",0,-1,0,0.4609424173831939,0.9327929615974426,0.5783125758171082,0.0,accept,majority_agreement
834043801,835,"excuse me, but what the fuck do you think you're doing to our baby?!",-1,-1,-1,0.9862133860588074,0.9909021258354188,0.99265056848526,-1.0,accept,unanimous_agreement
834044525,835,based!,0,0,0,0.9535885453224182,0.7251497507095337,0.8967203497886658,0.0,accept,unanimous_agreement
834045016,835,"this is completely unnecessary, nobody except the users who run the program should know anything about the host machine or what the user did with the program. audacity is one of the last foss programs out there without telemetry in it, there is no reason to add any to it. it's a fucking audio editor for christs sake!",-1,1,-1,0.98948472738266,0.8481666445732117,0.9942336678504944,-1.0,accept,majority_agreement
834045448,835,what benefit is derived from moving from one forum to another?,0,0,0,0.9651228189468384,0.9878694415092468,0.986604869365692,0.0,accept,unanimous_agreement
834046893,835,"moving to infrastructure that is easier to use makes it easier for users to give feedback, which helps developers know what is important to users, much moreso than questionably useful incomplete statistics.",0,0,0,0.921158254146576,0.9635080099105836,0.979440689086914,0.0,accept,unanimous_agreement
834047250,835,"regarding the software used on the forum. respectfully, i do not believe this pr is the right avenue to discuss this. we should keep this discussion on topic. post here should be directly related to this pr. we have plenty enough to discuss in the pr already. on thu, may 6, 2021, 23:57 jxu ***@***.***> wrote:",-1,0,-1,0.5807594060897827,0.6380767822265625,0.5505950450897217,-1.0,accept,majority_agreement
834047308,835,"there is nothing difficult about using a phpbb forum. (personally i find discourse to be horribly ugly and difficult to navigate, compared to traditional forums. you may think the opposite, but the change from a well established forum won't go over easily.)",-1,-1,-1,0.9863761067390442,0.7866993546485901,0.6268252730369568,-1.0,accept,unanimous_agreement
834047419,835,"easier to use for who? discourse is an annoyance (at best) to me, and i think it would be a pain to many of the 150,000+ users that are used to phpbb already. imo.",-1,-1,-1,0.9878984093666076,0.9898293614387512,0.9850110411643982,-1.0,accept,unanimous_agreement
834047464,835,"okay, enough about the forum software. let's not drag this further off topic.",0,0,0,0.9454314112663268,0.9332237243652344,0.6182896494865417,0.0,accept,unanimous_agreement
834049281,835,nack,0,-1,0,0.9703128933906556,0.8127092719078064,0.9793425798416138,0.0,accept,majority_agreement
834049591,835,"i don't want to pile on in regards to analytics or the implementation here, so far as to say that i disagree with it and i largely agree with the community sentiment in the above posts. i would like to point out that home assistant which is a very large and active community recently implemented some analytics. they had really good discussions and a significant amount of communication with the community about what they were going to collect and how they were going to use it, with specific tangible benefits and examples. i think a lot can be learned about the process that they went through and how they implemented this feature. while their implementation collects different information and is not directly equivalent to what is being implement it here, i think that how they went about implementing it and how they interacted with the community was excellent and is a good case study for how such things could by implemented in the future. [a link]",1,1,1,0.5948666930198669,0.912489414215088,0.7578858733177185,1.0,accept,unanimous_agreement
834050507,835,"emphatic -1. google is a scourge on the internet. there is absolutely no way this analytics data will not be cross-referenced inside their insidious black box of multi-billion-dollar ad tracking, just another finger prying into people's online lives. i, like many others, will simply use a ""google-free"" fork of this software and encourage everyone else to do so, even if there are no other changes to audacity other than a bunch of red minus symbols cutting the entire google stack out wholesale. don't take this as an invitation to more tightly integrate the software with google, such as requiring their sso or an email login to get access to ""enhanced features"" or whatever, either.",-1,-1,-1,0.976219356060028,0.961223840713501,0.9801367521286012,-1.0,accept,unanimous_agreement
834050545,835,waiting for a statement by tantacrul who is quite active on social media (does he have a github account?),0,0,0,0.8404183387756348,0.8940865397453308,0.949354350566864,0.0,accept,unanimous_agreement
834050798,835,"### for those that are saying telemetry should not **ever** be implemented: yeah, sorry, but as the new maintainers are trying to improve the ui and ux (which i strongly support and am looking forward to as audacity is still stuck with a really old-looking gui and skinning is still horrible), analytics _can_ be helpful. however, though i myself have no problems with google analytics, i have many friends that do. it's not a matter of whether we can or should implement google analytics in audacity - it's the fact that as one of the oldest/best foss projects the brand-new maintainers should not immediately begin making such controversial decisions without approval of the userbase. i'd once again draw the maintainer's attention to 's comment where they provide many decentralized and/or foss analytics platforms as alternatives: [a link] there's little reason to use google analytics over these other options for the type of data the audacity team _should_ be collecting in order to improve this project. i'd remind us all to stay positive and remember that as a community we don't get anywhere from division and anger. the muse group has done an excellent job with musescore, so let's continue to support their efforts to improve audacity and simply provide _constructive_ feedback. cheers!",-1,-1,1,0.9173763990402222,0.9844653010368348,0.5407023429870605,-1.0,accept,majority_agreement
834051729,835,"as a mere user, i'd be fine with user tracking _only_ if: - it was opt-in. - it did not use google analytics, but rather an open-source analytics suite hosted by audacity developers. - the developers did not share this data with a third party. edit: i'd even opt-in if it would provides developers with data useful for ux improvements. considering google analytics is controversial in foss, i feel this early move by new management is somewhat worrying.",-1,0,-1,0.5729587078094482,0.6551560163497925,0.8906480669975281,-1.0,accept,majority_agreement
834051878,835,"i messaged him on patreon about this pr. if he isn't aware of it yet, he likely will be by the morning. on fri, may 7, 2021, 00:13 jxu ***@***.***> wrote:",0,-1,0,0.8556243777275085,0.5854522585868835,0.9491255283355712,0.0,accept,majority_agreement
834053139,835,"oh right, he has a patreon. it is for his videos, but given he made a popular video on being the head of audacity (how i found about him), it's safe to say it's relevant.",0,0,0,0.8959397077560425,0.588118314743042,0.8140044212341309,0.0,accept,unanimous_agreement
834053829,835,"i've found is github account, but it doesn't look like he doesn't do much work on here, one commit to musescore and one pr review in musescore. imo - i'm guessing he isn't aware of this pr as he isn't on the approval chain. it appears the author of this pr, and the approvers are likely associated with ultimate guitar, the company that acquired both musescore and audacity. this pr is likely not in his area of responsibility. however, i have the feeling he would likely want to be aware of it since he has made himself and his associations with these projects very publicly visible.",0,0,0,0.6662241220474243,0.5126410126686096,0.8713069558143616,0.0,accept,unanimous_agreement
834054832,835,"just a quick correction, they're known as the muse group ([a link] :grinning_face_with_smiling_eyes:",0,0,1,0.7796694040298462,0.9787269234657288,0.9019635915756226,0.0,accept,majority_agreement
834056694,835,"thanks for the correction... i picked up the ug name from reddit, i should have double checked it before repeating it publicly. (although, at least ug is one of their applications...)",1,1,1,0.932257115840912,0.9607082009315492,0.9699660539627076,1.0,accept,unanimous_agreement
834063410,835,"absolute insanity. google spying in an audio editor? are you out of your mind, or are you just bought and paid for by some three-letter government agency? you do realize that it will be forked and all the spying removed, right? even if this is merged, all you will accomplish is taking all your goodwill in the open source community and lighting it on fire.",-1,-1,-1,0.9733221530914308,0.9665817022323608,0.9879580140113832,-1.0,accept,unanimous_agreement
834065295,835,"okay but how do the following things help with ui/ux at all? shouldn't we be getting feedback directly from the users instead of an automated system? - session start and end - errors, including errors from the sqlite3 engine, as we need to debug corruption issues reported on the audacity forum - usage of effects, sound generators, analysis tools, so we can prioritize future improvements. - usage of file formats for import and export - os and audacity versions edit: instead of having telemetry, why don't we make it easier for users to find places to submit issues and feedback in the program?",0,0,0,0.9731532335281372,0.9793192744255066,0.9858915209770204,0.0,accept,unanimous_agreement
834066758,835,audacity team does not need info on how many fart.wav sound effects i export,0,0,0,0.9830721616744996,0.9002702236175537,0.9926890730857848,0.0,accept,unanimous_agreement
834066969,835,exactly lmao,0,0,1,0.9779427647590636,0.8141607046127319,0.965989112854004,0.0,accept,majority_agreement
834067353,835,"i've created a fork of audacity that i'll be trying to maintain, if any of you would like to help out in any way, i'll be setting up github discussions for it shortly. [a link]",0,0,0,0.954704761505127,0.9458283185958862,0.5129276514053345,0.0,accept,unanimous_agreement
834067514,835,"i will sincerely hope for the failure of the audacity project and cheer for any clean fork if audacity gains the capability to send any of my data to a third party data aggregator such as google or yandex, no matter how ""trivial"" that data is.",1,1,-1,0.8217762112617493,0.8630104064941406,0.7867903709411621,1.0,accept,majority_agreement
834068454,835,i think it's a little premature and why should the community trust you as a maintainer?,-1,-1,-1,0.8413918018341064,0.5105622410774231,0.7584649324417114,-1.0,accept,unanimous_agreement
834068753,835,at this point i don't even know if i can trust the linux kernel.,-1,0,-1,0.6857519745826721,0.902702569961548,0.8701674938201904,-1.0,accept,majority_agreement
834068997,835,simple. follow upstream exactly except for the telemetry. should be easy to see in git.,0,0,0,0.9749719500541688,0.958065927028656,0.9811769723892212,0.0,accept,unanimous_agreement
834069296,835,"i don't have the knowledge but is there anyone out there who can copy the code base and start a new, really open source, spy and adware free (because you know the next thing will be ads) version of this and then drop this version?",0,0,0,0.6468380093574524,0.9438000321388244,0.8631160855293274,0.0,accept,unanimous_agreement
834069416,835,"well they have no reason to trust me as of now, but i'm going to make sure all contributions to my fork are composed of 100% free and open source code. you shouldn't trust anyone, just use good judgement.",0,0,1,0.4598969221115112,0.5823011994361877,0.7836529016494751,0.0,accept,majority_agreement
834069735,835,linux kernel is pretty trustworthy.,0,0,0,0.8242385387420654,0.6506259441375732,0.5599408149719238,0.0,accept,unanimous_agreement
834070087,835,so was audacity.,0,0,0,0.9026095867156982,0.9825641512870787,0.7381645441055298,0.0,accept,unanimous_agreement
834070300,835,the audacity of this pull request - the 12 year old versions of ourselves would be kicking all of our asses right now if they knew this was going on,-1,-1,-1,0.9721863269805908,0.5912504196166992,0.9888870120048524,-1.0,accept,unanimous_agreement
834070346,835,a maintainer does a lot more than contribute code. he/she has to make tough decisions about what changes are made.,-1,-1,0,0.5700262784957886,0.6342877745628357,0.7133054733276367,-1.0,accept,majority_agreement
834070446,835,"imo it _is_ useful to know how often each function or file format is used, but it's much more sensitive than os version numbers. the only way that would be reasonable is if each type of information were individual opt-ins where the user explicitly says that they're ok with sending each kind of data. and i didn't even know google analytics was a thing for non-web apps; i agree with everyone here that involving google as a third party is a terrible idea. feedback from users is helpful, but it doesn't let you know what people _don't_ use, only what they _do_ use and have issues with. and just to be explicit, **this change has not been merged yet**.",-1,1,-1,0.9736112356185912,0.6329485177993774,0.935745358467102,-1.0,accept,majority_agreement
834071300,835,"anonymous telemetry is really good idea, this may help devs to improve software. now you want to use surveillance software like yandex and google metrics, that's definitely bad idea due to privacy reasons. i hope that this pr wouldn't be merged at the current state. if audacity really needs some telemetry we should create _privacy and free_ friendly solution",1,1,1,0.8824377059936523,0.6041896343231201,0.8749536871910095,1.0,accept,unanimous_agreement
834071965,835,i guess i'll have to learn along the way!,0,0,0,0.711380660533905,0.8488456010818481,0.7785870432853699,0.0,accept,unanimous_agreement
834072533,835,"in my opinion something similar to the way kde does telemetry is a good way of doing it: [a link] if something similar gets implemented by audacity, that will be fine. but google analytics, no thank you,",1,1,0,0.8967925906181335,0.9892783164978028,0.9239227771759032,1.0,accept,majority_agreement
834072628,835,"if you must have telemetry, why can't it be a transparent json file emailed to the maintainers? is that ridiculous?",-1,-1,-1,0.949910581111908,0.8789483904838562,0.9778973460197448,-1.0,accept,unanimous_agreement
834073116,835,"the audacity of adding telemetry to audacity... if the premise is to 'prioritize future improvements' then by nature of being opt-in, wouldn't there be an extremely small sample size relative to the entire userbase? i especially doubt many people would willingly opt-in knowing that the information is being collected by google analytics, let alone yandex whose headquarters is in moscow, russia.",0,0,-1,0.5926110148429871,0.9158731698989868,0.9839003086090088,0.0,accept,majority_agreement
834073691,835,no.,0,0,0,0.8795708417892456,0.9381861686706544,0.9730188846588136,0.0,accept,unanimous_agreement
834075332,835,"i use audacity a lot and welcome all improvements. telemetry is an extremely useful tool for helping release the full potential of software... because relying on users to report issues alone is simply not enough. it's clunky, prone to misinformation/misinterpretation, and just not giving the full picture. i agree with all points regarding using your own foss hosted analytics platform, making it opt-in and ensuring privacy policy is succinct, correct and requiring explicit consent, handling gdpr considerations etc. if it's a foss project, it should be sensitive towards issues like privacy and the legality of collecting and storing certain data. what i don't agree with is hyperbole and the freaking out some people are doing because of the mere idea of telemetry. that makes no sense at all.",1,1,1,0.9373580813407898,0.9924610257148744,0.992440700531006,1.0,accept,unanimous_agreement
834077198,835,"this is great. kudos to the kde community for working to put together these sensible guidelines in clear, concise language. that page is licensed under the creative commons attribution-share alike license, so i recommend that audacity start by copying that verbatim and perhaps make some small adjustments for audacity's use case.",1,1,1,0.9892072677612304,0.9934666752815248,0.9949491024017334,1.0,accept,unanimous_agreement
834077665,835,"if you have to change the rules later, you might as well not have rules at all.",0,0,0,0.9692487716674804,0.9872746467590332,0.739453136920929,0.0,accept,unanimous_agreement
834082422,835,"disabled by default, a user must manually and without nagging explicitly opt-in to telemetry themselves. this is what gdpr demands, this is what i expect.",0,0,0,0.9789410829544068,0.9868717193603516,0.984503984451294,0.0,accept,unanimous_agreement
834083594,835,"telemetry burns the community as you should be able to see in this pr. user testing is more expensive than telemetry on its own, but contributors *will* leave over this. it isn't worth it. please stop before you kill the project.",-1,-1,-1,0.9334856271743774,0.8191540837287903,0.9871108531951904,-1.0,accept,unanimous_agreement
834084755,835,"-hiu realistically speaking, telemetry does not kill a project. win10 is still the most-installed os, gitlab still exists, and so will audacity continue. however, the user base will shrink. plus there's also the issue of how useful telemetry *really* is, 'cause there's an endless well of biases to consider when trying to use telemetry for anything more than automated sending of crash reports.",-1,0,0,0.5000914931297302,0.5783497095108032,0.7097554802894592,0.0,accept,majority_agreement
834086529,835,this list seems somewhat misleading. every single [a link] is being recorded. it doesn't matter if there was an error or not. seems it's only a matter of time before filenames(linked with ip) will be leaked through the titles.,0,-1,-1,0.7560135722160339,0.7196327447891235,0.6454422473907471,-1.0,accept,majority_agreement
834087149,835,google analytics? seriously?,-1,-1,-1,0.9420501589775084,0.9687404036521912,0.9850560426712036,-1.0,accept,unanimous_agreement
834087151,835,win10 is not foss and cannot be forked sans telemetry. audacity is and can.,0,0,0,0.9747689366340636,0.9805442690849304,0.9709782004356384,0.0,accept,unanimous_agreement
834087518,835,audacity survived without having trackers for more than 20 years. why is this needed all of the sudden?,0,0,0,0.6924638152122498,0.814565122127533,0.8428593277931213,0.0,accept,unanimous_agreement
834087605,835,"i rarely use audacity. i think telemetry is a good thing to improve software. but please, use open source platform to collect telemetry, if you will use proprietary platform, it has high chance to be removed from distros like debian because of 3rd party non-free dependency. so my wishes are: 1. use open source telemetry platform 2. dynamic linking, so it's easier to package audacity for distro developers 3. ask on first launch if user wants to share telemetry",1,0,0,0.6298391819000244,0.7437832951545715,0.6023228168487549,0.0,accept,majority_agreement
834088486,835,"just passing by to say that yes, this is a horrible idea. don't integrate *google analytics*, of all things, into a foss desktop audio program. please. opt-*in* anonymous well-defined self-hosted analytics? i'm personally okay with that, but it still toes the line for a lot of people. i don't see the value-add here beyond error reporting, but even then, you could just implement a system where if an error happens it can be optionally reported by itself, like what jetbrains does in their ides. just seems silly to me.",-1,-1,-1,0.9911604523658752,0.992885410785675,0.9914637207984924,-1.0,accept,unanimous_agreement
834088881,835,vlc's implementation of first-run opt-in for something as basic as _network access for thumbnail lookup_ is something i think audacity could model after for anonymous usage/failure data.,0,0,0,0.9813603162765504,0.9897553324699402,0.9828662276268004,0.0,accept,unanimous_agreement
834089404,835,i'm so confused. why use off the shelf analytics software for this? you can run your own endpoint to collect events with like....one php file. and that could be open source too so we see exactly how you collect analytics data and decide for ourselves whether we want to opt in or not. why soil your non-controversial brand with associations to controversial ones? all of this just to avoid setting up a backend service that inserts rows into a table?,-1,-1,-1,0.9730513095855712,0.9005215764045715,0.9891323447227478,-1.0,accept,unanimous_agreement
834091160,835,please 1) make telemetry opt-in and 2) provide an easy way for users to see what technical information is collected *directly from within audacity*.,0,0,0,0.96831077337265,0.9917792677879332,0.9788984656333924,0.0,accept,unanimous_agreement
834091513,835,every single wxdialogwrapper title is being recorded. it doesn't matter if there was an error or not. seems it's only a matter of time before filenames(linked with ip) will be leaked through the titles. thank you for this astute code review. i hope you keep an eye on whatever proposed code changes follow this.,1,1,1,0.9476401209831238,0.9522005915641784,0.9850607514381408,1.0,accept,unanimous_agreement
834091542,835,"just the fact that it collects your ip address and assigns a uuid to your machine alone is worrying.. (yes, i'm aware github probably does the same thing, but at least it isn't something that's directly installed on my pc and i can *easily* do something to anonymize myself from it)",-1,-1,-1,0.960690140724182,0.6981082558631897,0.9747024774551392,-1.0,accept,unanimous_agreement
834091568,835,"this one *really* concerns me as well, not to say disgusts me. not only is there an addition of telemetry, of which i do not see potential merits outweighing all concerns to be had, but that data is shoved right through fucking google. the one entity with enough data to deanonymise anything they want to, given time and will. i have not ever observed telemetry resulting in an improvement of usability of software. it always ended up just collecting biased data. you can't tell the difference between e.g. a person not being interested in a feature or just not being able to fucking find it or a person not seeing it due to accessibility issues. yes, all damn software jumps onto that false prophet. and once it does, there's is zero guarantee that said software may not one day add none-of-your-business data to the mix, be it on purpose or by accident. (see the file name concern raised above.) looks like i should more seriously start reinstalling all my software except the browser in sandboxed environments without any network connections.",-1,-1,-1,0.9859341979026794,0.986461579799652,0.9862533211708068,-1.0,accept,unanimous_agreement
834093680,835,precisely. there is *no such thing* as truly anonymised data. it's only obfuscated at best. throw enough effort at it and everything's an open book. and all that for little benefit to the end user.,0,0,0,0.683576226234436,0.580014705657959,0.8861730694770813,0.0,accept,unanimous_agreement
834095687,835,yikes,0,1,-1,0.9726107120513916,0.6747378706932068,0.7190560102462769,,review,no_majority_disagreement
834095931,835,no.,0,0,0,0.8795708417892456,0.9381861686706544,0.9730188846588136,0.0,accept,unanimous_agreement
834096200,835,"i feel like all the points have been driven in - for telemetry, against all telemetry, against _these_ telemetry services; jokes about ""the audacity of"" audacity; how badly it will kill the project/the team/my ego/my ex's pet slime mold; rallying calls to pitch forks and spoons - all that remains now is to wait on a decision to be made, and set down the pitchforks for the time being. after all, we're just a small sample of the audience. many people use audacity and may remain blissfully unaware of an issue like this, until people notice it being a problem. it would be rather difficult to rally the momentum behind millions of audacity users to a random fork over a single issue like this. it is best that we address it _in this project_ primarily, and avoid dragging users through miles of heartbreak over ""which audacity"" to use. also worth noting: audacity :registered: is a registered trademark in the us and other jurisdictions. while i'm not a lawyer, and this is not legal advice: forks really must not carry the name ""audacity"" on them without permission from its rights-owner - and, in my opinion, even for other reasons aside from the legal.",-1,-1,1,0.961419939994812,0.970565378665924,0.3722769021987915,-1.0,accept,majority_agreement
834097973,835,"a shitty company will make shitty software, that's no surprise.",-1,-1,-1,0.98576557636261,0.9880837798118592,0.9814110398292542,-1.0,accept,unanimous_agreement
834099287,835,"a summary of the general feeling would be : 1) basic telemetry isn't a bad idea but... 2) opt-in and by default disabled. ask on first run if the user wishes to enable it, and inform about it. 3) don't use google analytics.",0,0,0,0.8834236860275269,0.7740243673324585,0.9249853491783142,0.0,accept,unanimous_agreement
834099844,835,how about we cease the one-word comments and repetition of already-stated arguments and wait for a response from the audacity team? i think it's pretty clear what the community's stance on this is. further dilution only hides the actually good arguments.,0,0,0,0.9060665369033812,0.8850439190864563,0.9447950720787048,0.0,accept,unanimous_agreement
834100409,835,"i feel misrepresented by your summary. my standpoint is: - telemetry for ux studies is near useless thanks to all the sources of bias in your data. - automatic crash reports with user confirmation are super valuable. - if you absolutely must have telemetry or else someone dies, at least follow the entire gdpr by the letter, take it as dogma, and whatever you do, no google.",-1,-1,-1,0.9782819151878356,0.9350351691246032,0.983820915222168,-1.0,accept,unanimous_agreement
834101248,835,"\- from the [a link]. i wonder how you got to this decision - as a team or as a foss contributor to just say ""yeah, it's fine if we can track users using google analytics"" (of all things). don't you know that google is a data mining company? users are the _product_, data is their _currency_. but to keep this constructive, what about another, self-hosted foss telemetry library (e.g. [a link] here's a list of different open source analytics libraries: [a link] (seems to be web focused mostly). really hope this doesn't get merged and this direction of questionable changes to audacity under the new leadership will stop!",-1,1,1,0.795475423336029,0.978429675102234,0.8769940733909607,1.0,accept,majority_agreement
834103291,835,"then we can call the fork ""audacious"" :+1:",0,1,1,0.882644534111023,0.9877816438674928,0.9908498525619508,1.0,accept,majority_agreement
834105437,835,"ah, we doing joke fork names? given the »audacity to telemetry«, how about naming the telemetry-free fork »respect«?",0,-1,-1,0.6828874945640564,0.8092085719108582,0.7875399589538574,-1.0,accept,majority_agreement
834105536,835,"call it ""humility"" or ""respect"".",0,0,0,0.8978232741355896,0.9709432721138,0.952484369277954,0.0,accept,unanimous_agreement
834105674,835,beat me to it.,-1,0,0,0.6960121393203735,0.9260267615318298,0.7552566528320312,0.0,accept,majority_agreement
834105891,835,"i know it's beating a dead horse at this point, but what exactly does adding telemetry accomplish? audacity is already the and if there were any scenario in which it were not accomplishing the running on damn near anything which it already does near flawlessly for decades, would not somebody just open a ticket and upload a crashlog? the benefit of foss is you don't need metrics on which platforms to support, because if it's not working on your end, you can just patch it until it does. you don't need to predict what the market wants, just carry it forward every once and a while and barring a backport make old releases available.",-1,-1,-1,0.6584285497665405,0.8518680334091187,0.8903539776802063,-1.0,accept,unanimous_agreement
834105911,835,concurrency hard. :),1,1,1,0.6073246002197266,0.993779480457306,0.9823225140571594,1.0,accept,unanimous_agreement
834107887,835,"average joe:trade_mark: will indeed not open a github issue with a crash report, 'cause average joe:trade_mark: doesn't even know what github is. we are the tech-savvy 1% here. but that's why i said automated crash/error reports with user confirmation are fine. nobody has to open an issue, audacity devs get their stack traces in the formats they prefer, everyone's happy.",1,1,1,0.8540022373199463,0.935370147228241,0.9632704257965088,1.0,accept,unanimous_agreement
834110983,835,absolutely no. remove it already. why do you think people use this tool in the first place? you are taking away something. very bad idea. resolve this. make a good decision. thank you.,-1,1,-1,0.6124589443206787,0.9102602601051332,0.9923478364944458,-1.0,accept,majority_agreement
834112117,835,"serious suggestion here: put a button in the top right of the menubar that says ""complain to the developers"". it pops up a little input box, 128 character max, and sends it directly to a simple webserver along with the build number and os version, both visible in the box. 100% anonymous. no uuid's, no machine fingerprints, no sneaky anything. have a 10 minute cooloff or something to prevent spam. post all the messages publicly on the audacity website. you will collect the real frustrations of your users very quickly. the wording of the button is important; do not soften it. you want _complaints_, not _feedback_. you want to know when things aren't working to the degree that people are getting frustrated enough to _complain_, not just that someone had a nifty idea about how the icon should be corn-flower blue.",0,-1,0,0.6185422539710999,0.9293481707572936,0.6330750584602356,0.0,accept,majority_agreement
834113385,835,"as someone who values privacy more. i aggresively disagree with this. if this gets merged, then i guess i have to look for another audio recording software. this is just bs and a violation of our privacy.",-1,-1,-1,0.9795603156089784,0.8879702687263489,0.984846830368042,-1.0,accept,unanimous_agreement
834113942,835,"opening a github issue is by no means the only recourse, the first recommended action in a google search is to ak the forum, then the bugzilla, not the github(though this may be historic, everybody likes the cloud:trade_mark: these days. for modernizing bug reports, i would accept being prompted to upload a log as a convenience, but automatically collecting a bunch of log data during normal operation is probably mostly pointless, and having software that doesn't need to constantly call home just always feels nefarious, even if nobody would ever use audacity to do something nefarious. just collect the last hour of logs, and the postmortem if necessary, maybe scrub some paths etc. i can see a reason for prompting the user to upload a crash log on relaunch after dirty exit. and i can see a reason to have a wizard under the help menu for opening a ticket with a simple http post from within the application for behaviours that are not behaving. these are always nice to haves for non technical end users. but session and platform tracking, now that's just dumb.",-1,-1,0,0.9419278502464294,0.915844202041626,0.7201310396194458,-1.0,accept,majority_agreement
834114374,835,"on that note, i *really* like how ms teams handles feedback/complaints after video calls. it politely asks for a star rating, you can just click it away. and if you rated, you get the option to specify whether something didn't work. a few checkboxes for expectedly common problems, an input field for custom complaints, done.",1,1,1,0.9404643177986144,0.6971774697303772,0.9718999862670898,1.0,accept,unanimous_agreement
834114715,835,the level of paranoia on this pr is wildly out of control,-1,-1,-1,0.9672595858573914,0.6355850696563721,0.9640696048736572,-1.0,accept,unanimous_agreement
834117010,835,"your level of denial to the practices of your run of the mill ""don't be evil:trade_mark:"", ""do the good thing:trade_mark:"" megacorporations is wildly out of control.",-1,-1,-1,0.9534196257591248,0.9381287097930908,0.9649381637573242,-1.0,accept,unanimous_agreement
834117437,835,"funny, i just wanted to say the same about the level of ignorance. :d",1,1,1,0.9856309294700624,0.9698918461799622,0.9944912195205688,1.0,accept,unanimous_agreement
834118155,835,excuse me what the funk,-1,-1,-1,0.9099048972129822,0.9740744233131408,0.9786559343338012,-1.0,accept,unanimous_agreement
834118225,835,"it's not paranoid to act suspicious of unnecessary features in software that is working fine, particularly if it adds a bunch of otherwise unnecessary dependencies that you now have to manage, and depends on an external commercial interest, especially one that has its entire business model predicated on violating your privacy as much as the law will allow.",-1,-1,0,0.6619484424591064,0.6690859794616699,0.6585583090782166,-1.0,accept,majority_agreement
834118874,835,"in some countries, privacy is a matter of life and death. it is understandable that some people have strong feelings about it. that being said, most of the commenters do not have a problem with responsibly implemented, opt-in, truly and fully anonymous, completely foss usage data collection. that's not what this pr is. this pr sends the titles of all your windows to a company known to sell data to all sorts of bad actors.",-1,-1,-1,0.9614877104759216,0.9149916768074036,0.6126805543899536,-1.0,accept,unanimous_agreement
834119695,835,"i've been using audacity since 15 years ago and it's perfectly fine without this unnecessary ""telemetry"" and stuff.",0,0,0,0.8121349215507507,0.7946452498435974,0.6419493556022644,0.0,accept,unanimous_agreement
834119981,835,also i've heard people defend telemetry because it would help the ui design. personally i think the ui is fine as it is...,1,0,0,0.6880007386207581,0.909509003162384,0.7767632603645325,0.0,accept,majority_agreement
834120906,835,"exactly, i wonder how many people will die because us agencies use that data, collected by google, for drone strikes.",-1,0,0,0.7721471190452576,0.7350816130638123,0.6831137537956238,0.0,accept,majority_agreement
834121824,835,"this mostly echoes what other people have written but this would be my important shortlist before considering something like this. - implement your own data collection service, use data sampling to make the data volumes reasonable. - anonymize all data before it's being written to any kind of storage, preferably in the client when its possible. - be gdpr compliant (and really spend some time on understanding what this means). - provide a detailed document to the users that explains all the events that are collected. - always ask users for consent initially and for every change in what you collect.",0,0,0,0.7242261171340942,0.9576510787010192,0.9624748229980468,0.0,accept,unanimous_agreement
834122255,835,"i second this. i'm sick and tired of having to constantly re-learn the ui of this or that application because it was ""modernized"" or the devs just felt like changing everything for fashion reasons. very seldom is there a legitimate improvement in redesigns, and very often it's a step backwards. look at excel 2003 vs the new ""ribbon"" garbage. gedit is basically unusable now with the new csd hamburger menus.",-1,-1,-1,0.9872050285339355,0.9910860657691956,0.992797076702118,-1.0,accept,unanimous_agreement
834127490,835,"so in conclusion, nobody really likes this. skedaddle.",-1,-1,-1,0.9790323972702026,0.9855208992958068,0.9843379855155944,-1.0,accept,unanimous_agreement
834127508,835,"i speak for the quantified opinion of the masses when i say this isn't going to happen. the finer details of how this isn't going to happen are up to you, dmitry vedenko.",0,0,0,0.8892374634742737,0.9004677534103394,0.7483681440353394,0.0,accept,unanimous_agreement
834127964,835,"if not, someone will report failures to be compliant to the corresponding offices, there'd be a tongue-lashing, and if things don't get fixed asap then, boy will it be expensive.",-1,-1,-1,0.7739126086235046,0.9264630675315856,0.8796195387840271,-1.0,accept,unanimous_agreement
834130242,835,the first post be like ![a link],0,0,0,0.782585859298706,0.9722331166267396,0.9424872994422911,0.0,accept,unanimous_agreement
834131991,835,make this only opt-in and i don't have an issue with this. we don't want to give google even more data. i mean if you need analytics setup matomo analytics on a do box and do it like that. i am 100% sure that do or aws will provide servers for free for this open-source project but we can also sponsor this.,0,0,0,0.7927483916282654,0.8873835802078247,0.6465051770210266,0.0,accept,unanimous_agreement
834134753,835,![a link],0,0,1,0.9475814700126648,0.9432068467140198,0.5592244863510132,0.0,accept,majority_agreement
834134939,835,"i would not sponsor for telemetry infrastructure, btw. i prefer throwing my money into the river instead and watch it float. much better ux.",1,1,1,0.7911230325698853,0.574751079082489,0.8769346475601196,1.0,accept,unanimous_agreement
834135069,835,respect for making that homemade meme right on the spot.,0,0,1,0.5925644040107727,0.9506573677062988,0.7420672178268433,0.0,accept,majority_agreement
834135965,835,at this point most of this pull request is spam. it's very obvious audacity does not need telemetry. as far as i remember that audacity has plugin support. so why not make this a plugin instead?,0,0,0,0.7730122208595276,0.9047880172729492,0.5954340100288391,0.0,accept,unanimous_agreement
834137797,835,"a plugin tucked away in a repo deep, deep underground where no sunlight will ever reach it.",0,0,0,0.934675633907318,0.6379910111427307,0.7387619614601135,0.0,accept,unanimous_agreement
834142456,835,i have a few simple questions. 1) why on earth would you need telemetry in an audio editor like audacity? 2) telemetry and crash reporting are two different things. why go with telemetry? 3) where is telemetry going to help users? given that users escape microsoft's telemetry and come to gnu/linux distributions for the privacy (as one of the many of the reasons that they use when they decide to switch oses) why implement a feature that is so hated in a f/loss software that is so used? 4) audacity is a pretty famous f/loss piece of software. noone is denying that and there are plenty of evidence to back that claim up. why the telemetry?why now? what makes you guys think that this is ever going to change (apart from merging such a feature into a perfectly fine piece of software)? thank you in advance for taking the time to answer my questions.,1,-1,-1,0.7549864053726196,0.969103455543518,0.9188615679740906,-1.0,accept,majority_agreement
834146852,835,who's idea was this? ![a link],0,0,-1,0.8216270804405212,0.894250214099884,0.9777161478996276,0.0,accept,majority_agreement
834148153,835,"i thought this is a joke. it's not funny. i guess all that had to be said about this has already been said. i trust the new maintainers will listen to the community and realize doing things this way is not actually going to help audacity and it's community. i'll happily share some data with the team to help improve audacity, but **not like this**.",-1,-1,-1,0.9792835116386414,0.9357892870903016,0.8781942129135132,-1.0,accept,unanimous_agreement
834148572,835,might as well just use propietary software at this point.,0,0,0,0.9839230179786682,0.990917146205902,0.9392690062522888,0.0,accept,unanimous_agreement
834149347,835,"i don't know the communication policy of this project, but any other reasonably large project i know use one of ticket / rfc / forum post / mailing list post to “suggest” something like adding phoning home. a pr is for submitting implementations, as can be directly witnessed here it bifurcates into people discussing the change itself, while others focus on the technicalities of the implementation. so perhaps this is also an opportunity to reset the question how adding things like this are communicated to and discussed with the project first.",0,0,0,0.9228575229644777,0.9770684242248536,0.9766699075698853,0.0,accept,unanimous_agreement
834151099,835,nice idea ! you should also add a bitcoin miner !,1,1,1,0.9897024631500244,0.9951360821723938,0.9939925074577332,1.0,accept,unanimous_agreement
834156337,835,"no, just no",0,0,0,0.830461323261261,0.7012318968772888,0.9257063269615172,0.0,accept,unanimous_agreement
834156790,835,"as with modern oss development in 2021, it is likely the discussion here will be ignored, this pr and any issues marked as ""locked; too heated"", and merged anyway.",0,0,0,0.9402238130569458,0.9888314008712769,0.943215012550354,0.0,accept,unanimous_agreement
834158289,835,"i would like to raise my concern about this pull request as the maintainer of this software for arch linux. with several hundreds of packages to maintain i can not spend the time to start devendoring more things, that are being vendored into audacity for no good reason. it is one thing to vendor [a link] (poorly), and not fix issues with the build system ([a link] [a link] [a link] however, it is something completely different to start vendoring `curl` (poorly) and potentially expose users to its numerous cves per year. to remove all this and protect users from this harmful decision making adds more work for me. this decision is short sighted and *very* frustrating for users and maintainers alike...",-1,-1,-1,0.9334228038787842,0.958130180835724,0.8924956917762756,-1.0,accept,unanimous_agreement
834159119,835,"ah yes, open source google spyware, how great",1,1,1,0.986757516860962,0.5606120228767395,0.9822880029678344,1.0,accept,unanimous_agreement
834162338,835,wtf are you doing? you woke up one morning and decided your time was best spent writing this garbage?,-1,-1,-1,0.9855732321739196,0.9573156833648682,0.9945452213287354,-1.0,accept,unanimous_agreement
834162619,835,"regarding the concerns of vendoring dependencies, i recommend considering [a link]. i recently helped [a link]. despite being made by microsoft, it was surprisingly pleasant to work with. it's implemented with cmake scripts and integrates with cmake easily. i suspect mixxx and audacity have a lot of dependencies in common so you likely won't need to add many packages to vcpkg yourself. it's quite easy to add new packages to vcpkg and it's easy to vendor the dependencies you need to vendor while keeping the rest up to date. mixxx uses github actions to build all windows dependencies, scp an archive of them to a server, then downloads and caches that archive for the ci jobs on the application code repository. i'd be happy to discuss this further and give you some tips to get started on this if you're interested.",1,1,1,0.7910966873168945,0.9566057920455932,0.971846640110016,1.0,accept,unanimous_agreement
834163955,835,it is an absolute no-go to include a tracker. please remove google analytics. i do not want to send my data to google. and in particular certainly not via audacity.,-1,-1,-1,0.7253682017326355,0.6496824622154236,0.8760542869567871,-1.0,accept,unanimous_agreement
834168078,835,"well lads, if this gets merged, we might as well create a new fork. i’d absolutely hate it if telemetry were to be in audacity, even more so if it is google analytics.",-1,-1,-1,0.980663001537323,0.9829948544502258,0.9934735894203186,-1.0,accept,unanimous_agreement
834169284,835,google analytics in foss... the sheer audacity of it all. realtalk: if you do this expect much of the userbase to move over to a fork without this spyware in it.,-1,1,-1,0.96069598197937,0.5683380961418152,0.8986607193946838,-1.0,accept,majority_agreement
834170392,835,why the fuck would you add that,-1,-1,-1,0.9726191759109496,0.9841407537460328,0.981714963912964,-1.0,accept,unanimous_agreement
834171177,835,don't really think this is a good idea i was hopeful they would just improve the ui and mostly leave it alone but seems i was wrong i wouldn't mind if this was opt-in or heck opt-out if the user is prompted after install also don't like the idea of this being done with google or yandex tracking can be very useful sometimes for fixing bugs but shouldn't be too spook this is only going to push people away from audacity and probably create many forks also don't know how true this is since i am probably the worst programmer on earth but many have pointed out that curl is not very secure and have many security bugs,-1,-1,-1,0.9625822901725768,0.9155040383338928,0.9866803288459778,-1.0,accept,unanimous_agreement
834174629,835,telemetry is not bad. just make sure google isn't the one collecting data. also make it opt-in.,0,0,0,0.7769972085952759,0.8088045120239258,0.7073143124580383,0.0,accept,unanimous_agreement
834178223,835,that's the beginning of the end of audacity. that's 5500 lines full of bugs that need to be maintained and will take brain time off the actual program. such things are actively harmful to projects. projects that have become greedy for improvement so badly that they start to harm themselves (and their users) into a vicious cycle. *actual* users who liked the program and who have something to say about it will leave. and you'll be left with uninvolved people whose usage doesn't reflect the original usage anymore. and so will audacity die.,-1,-1,-1,0.9772953987121582,0.9788169264793396,0.9355239272117616,-1.0,accept,unanimous_agreement
834180924,835,can i be in the screenshot?,0,0,0,0.9882065653800964,0.99068683385849,0.9934000968933104,0.0,accept,unanimous_agreement
834181098,835,"let's stop collectively posting insults and doomsaying, it's not helpful. the actual points have already been made, and this is just drowning them in the noise.",-1,-1,-1,0.975075662136078,0.9751864075660706,0.9734728336334229,-1.0,accept,unanimous_agreement
834182783,835,i strongly oppose this change,-1,-1,-1,0.9015793204307556,0.8844361305236816,0.9454326033592224,-1.0,accept,unanimous_agreement
834183003,835,if this gets merged i will have to look for an alternative.,0,0,0,0.9684233665466307,0.9814279079437256,0.8805390000343323,0.0,accept,unanimous_agreement
834186011,835,", why doesn't your management just stay away from audacity development instead of slowly killing it? just let this program alone, and the community will make it sustain without any telemetry junk! nice improvements from the very first days of acquisition!",1,1,1,0.96920645236969,0.9915255904197692,0.869290828704834,1.0,accept,unanimous_agreement
834186867,835,:fork_and_knife:,0,0,0,0.9629154205322266,0.9835572242736816,0.9885939359664916,0.0,accept,unanimous_agreement
834186975,835,![a link],0,0,1,0.9475814700126648,0.9432068467140198,0.5592244863510132,0.0,accept,majority_agreement
834189232,835,"i am against this pr. not because it is telemetry, not because it is helpful for the developers i am against this because it is not opt-in(it is opt-in, according to ), and it is using third-party services suchs as google analytics and yandex. good luck writing the new privacy policy and we users are forced to accept",-1,1,-1,0.926851749420166,0.9692236185073853,0.9857308268547058,-1.0,accept,majority_agreement
834189779,835,the fact that project members discuss implementation details of this instead of questioning the whole idea leads me to believe that a major fork is just a matter of time.,0,0,0,0.778106689453125,0.9633995294570924,0.9673026204109192,0.0,accept,unanimous_agreement
834189942,835,it is opt-in. looking through the code can verify that,0,0,0,0.98686546087265,0.9852546453475952,0.9951741099357604,0.0,accept,unanimous_agreement
834193417,835,how about ***no***,-1,0,0,0.8776503205299377,0.9407967925071716,0.8135462999343872,0.0,accept,majority_agreement
834195205,835,"next up, adding telemetry to the linux kernel via google analytics. jokes aside, a big **no**.",-1,-1,-1,0.9611408710479736,0.8707535266876221,0.5407396554946899,-1.0,accept,unanimous_agreement
834197663,835,itt twitter and reddit,0,0,0,0.9747631549835204,0.9606856107711792,0.9607385396957396,0.0,accept,unanimous_agreement
834198695,835,"i guess that this is going to be merged anyway, but have you considered at least using a self-hosted oss analytics solution like [a link] instead of google/yandex? at least that's a more privacy friendly solution and should get rid of the quota problem.",0,0,0,0.9799956679344176,0.9794024229049684,0.9864314198493958,0.0,accept,unanimous_agreement
834199078,835,"traditional way to get feedback from users (which functions they use and how much) was to send questionnaire. i wonder if this would be better alternative (e.g. optional questionnaire shown after first run of newly installed audacity) also - i think there are many users which use older versions of audacity and does not need to update it (because older version just works fine without problems). so probably you will not get actual usage stats this way, but version somewhat skewed to new users / users who update regularly. edit: i use audacity a lot and updated to 2.4.2 only after i needed to use some advanced noise reduction trick which was not possible with older version which otherwise worked just fine for some years.",0,0,0,0.8834375739097595,0.9473624229431152,0.9668006300926208,0.0,accept,unanimous_agreement
834199124,835,"for all that i dislike the *idea* of having telemetry in foss, as a developer i have to admit that it _can be useful_ for cases such as tracking feature usage and bugs. honestly, what percentage of users **will take the time to write an issue or a forum post** whenever they have a bug? that being said, *if* telemetry there is, it should absolutely be opt-in, and **not in the gdpr** ""click ok to accept all or spend fifteen minutes clicking on checkboxes to disable everything"" way. there are numerous foss with telemetry that simply, at the first launch, present the user with a ""do you agree for xxx to send usage data to the developers?"" dialog box with a simple yes/no answer. that doesn't fix the problem of shipping additional libraries required for telemetry which increases both the time required for os maintainers to package new releases, and the attack surface. the latter could be solved by providing telemetry-free builds of audacity for those who want them (remember the ansi/unicode windows builds days?). no real conclusion in this comment, i simply wrote it to say that the issue isn't as simple as ""telemetry bad"".",-1,-1,0,0.9847111105918884,0.9780125021934508,0.4713533818721771,-1.0,accept,majority_agreement
834199991,835,"it would be especially ironic if after all this true user feedback, audacity decides to still spy on their users. clearly it would show that ""user feedback"" is **not** what they really care about, at all.",-1,-1,-1,0.9718235731124878,0.9324257969856262,0.9723738431930542,-1.0,accept,unanimous_agreement
834201963,835,"if this gets merged, the project will be forked and the community split.",0,0,0,0.9800665378570556,0.9930152893066406,0.9154319167137146,0.0,accept,unanimous_agreement
834202275,835,you will own nothing and you will be happy.,0,1,1,0.5255774259567261,0.8332428336143494,0.6297243237495422,1.0,accept,majority_agreement
834203391,835,"while we may choose to uplicense as necessary (ex: gplv2 --> gplv3), audacity was born gpl and will remain gpl for as long as it will exist. uplicensing is also not something to take lightly either, as there are considerable downstream implications. it should only be done when there is a genuine blocker that prevents enhancements that are clear benefits to the user. a good example of such a blocker is the vst3 sdk which is glpv3. if audacity is not uplicensed to glpv3, vst3 support is not possible, significantly limiting future capability and user choice. every choice we make as a company in contribution to the open source initiatives that we support is in service of improving the experience of the user. part of our commitment to open source is a commitment to transparency. being fully transparent, the cla of the open source projects we support does grant some form of flexibility in licensing. but what does this mean? i will use the example of musescore. the musescore cla does allow for the possibility to dual license the source code as gpl and proprietary, so long as it remains also available under gpl. but why would we ever want to do this? how could this possibly be in service of the user and user choice? to answer this, let's back up to when the audacity project began. at that time, the most powerful and capable mobile devices on the market had a 2 inch bitmap screen. the most powerful potential of the capabilities of that device was the ability to play snake. fast forward to now, where the new ipad pro devices are even more powerful and capable than apple's top macbook pro. user choice also means choice of devices they wish to experience the software on. but there is only one problem. the ability to install software on some devices is limited by the manufacturer who acts as gatekeeper. as we have learned from the apple/vlc issue from a few years back, there is considerable risk with being subject to these sole gatekeepers and their interpretation of gpl. to minimize such risk, it is good to have more flexible options for limited scenarios such as alternative licensing for a specific build for a specific platform to solve a specific issue (ex: excluded from platform due to glp as in vlc case). in more simple terms, we view the potential of dual licensing as an insurance policy in order to ensure availability for the user on the platform of their choice. all of this is simply words. i completely understand this. i can only suggest that you look to our actions, particularly as it is related with musescore.",0,0,0,0.9736116528511048,0.9884202480316162,0.9750769138336182,0.0,accept,unanimous_agreement
834205099,835,it's not opt-in if the default is on. [a link],0,0,0,0.9879823923110962,0.988720953464508,0.99435955286026,0.0,accept,unanimous_agreement
834206645,835,"things like this are the work of corporate developers, not software engineers and computer scientists. let it be known that users, especially those in the open source community, will not stand to be spied on. this is quite possibly one of the largest rebuttals to a pull request i've seen, second only to github's dmca on youtube-dl (which i have commonly used in conjunction with audacity actually). good job people.",1,1,1,0.9766982197761536,0.9630597829818726,0.9588204622268676,1.0,accept,unanimous_agreement
834206657,835,this action looks very bad right now. your response with an essay on a tangential issue rather than addressing the substance of this pull request only adds fuel to the fire.,-1,-1,-1,0.9817833304405212,0.9774174690246582,0.9858090281486512,-1.0,accept,unanimous_agreement
834207153,835,"you seem to be including google analytics in audacity as opt-out. looking at that action alone shows that you are hostile towards your users: you data-mine them and feed the results into google, so you can get a little bit of that data for yourself in return.",-1,0,-1,0.7024693489074707,0.6181761026382446,0.8393691778182983,-1.0,accept,majority_agreement
834207774,835,a big **no**. waiting for a split/fork and staying with the previous version.,-1,-1,-1,0.806776225566864,0.5533724427223206,0.9253295063972472,-1.0,accept,unanimous_agreement
834208378,835,"original author: me last night: i have realized that the phrase ""errors, including errors from the sqlite3 engine,"" is deliberately misleading. as mentioned in the quote from an off topic discussion earlier the sqllite3 engine is the save file handler in the (new and ill-conceived) audacity 3.0 save format. so without going through 5000 lines of code to confirm this there is a distinct possibility that ## __this code is uploading portions of your save files to google and yandex__. which is not as harmless as the developers have indicated but is a major invasion of privacy. i commented last night that this is not the time to argue about save files, but it has come to my attention that even archlinux (a distribution known for tracking software releases quickly) is refusing to update past audacity 2.4.1 which implies there is something fundamentally wrong with the new release. i think that the new save format which is evidently causing many issues on the forum is part of this problem. so a message for the devs: if you ditch this ill conceived idea of using web tech to store real time audio data that is fundamentally incompatible with how people want to use the software, maybe to won't need telemetry to track why it's broken. i can tell you why its broken rn, it was a bad idea! i demand a community petition to roll the entire project back to v2.4, and divorce from muzegroup",-1,0,0,0.8996761441230774,0.8023465871810913,0.8481758832931519,0.0,accept,majority_agreement
834208625,835,"as the founder of kludge cyber systems we are happy to make and adopt a community fork if this is merged. rest assured, this ship will not sail anywhere other than the seas of freedom.",1,1,1,0.9642632603645324,0.8901369571685791,0.8804543614387512,1.0,accept,unanimous_agreement
834211484,835,"has already offered to maintain a fork. if that ends up being necessary, it would best be done by someone with a strong reputation and skills in cooperative audio software.",0,0,0,0.8985326886177063,0.9765521287918092,0.985750675201416,0.0,accept,unanimous_agreement
834212390,835,i thought this was a joke at first. then i realized you really did found a company called kludge cyber systems. my bad,-1,-1,-1,0.991065800189972,0.9898622035980223,0.9949707388877868,-1.0,accept,unanimous_agreement
834214437,835,"no worries. my friends laughed at me for the name when i made it, too. but ultimately i founded it to prove to myself you don't have to swallow your morals to be successful, so that doesn't matter to me i agree. this would be our first undertaking into audio software, but we pick up on things very quickly, and in general have a good reputation with maintaining open source projects of many sizes. for instance, we have inherited 2 year old python abandonware, i myself know c++, go, rust, et cetera, and we are strong advocates of open source software. not to toot my own trumpet, though - this decision is best left to the community as a whole.",1,1,1,0.9335505366325378,0.9921700358390808,0.9542921781539916,1.0,accept,unanimous_agreement
834214521,835,this is a really bad idea,-1,-1,-1,0.9890583157539368,0.991793692111969,0.9955843091011048,-1.0,accept,unanimous_agreement
834215152,835,i like the name :),1,1,1,0.9916561841964722,0.9919183850288392,0.9599784016609192,1.0,accept,unanimous_agreement
834216423,835,"_embrace, extend, exterminate_",0,0,0,0.9754379391670228,0.9800690412521362,0.9839115142822266,0.0,accept,unanimous_agreement
834216720,835,"no, it is opt-in. you're referring to a modal with ""yes"" already focused so that pressing enter key will enable it. you still have a yes and no button next to each other. throughout the code telemetry is disabled and will only be enabled if the user clicks yes. focusing on the confirmation button does not mean it's opt-out",0,0,0,0.968418300151825,0.9783225655555724,0.9876651763916016,0.0,accept,unanimous_agreement
834218277,835,"i do have to ask, though - why is this even necessary? the only thing software like this needs to collect is when errors occur and crash logs happen, at which point a popup should display at the end of the session or on crash letting them see the log that's about to be sent and asking if they want to report it.",0,0,0,0.9507110118865968,0.958845555782318,0.76433926820755,0.0,accept,unanimous_agreement
834218441,835,"to whom it may concern, i speak as only an individual amongst the huge foss community, so value the following comments as just a representation of only my feelings & opinions on this matter. *but* take note that this is the **first** time that i have ever been so against a decision that i have felt that i needed to voice my opinion on it. so the first issue i have here is just how **poorly** the *audacity development team* have handled this entire push request/suggested changes process. you have failed from the very outset to identify that as a widely used and well loved foss, you will be, and must be, at all times subject to public scrutiny of decisions prior to **any** kind of code changes being submitted. your entire teams complete lack of transparency, and the failure of your team to respond adequately & promptly following such a strong public disagreement shows that the systems you have in place for managing public relations are an utter shambles and really need to have attention paid to them so that situations similar to this if they do occur in the future aren't pushed through with such complete disregard for end-users & package maintainers. now that i have highlighted the flaws in the poor execution of public relations with the community i shall now move on to addressing the actual code commit itself, it's contents, it's intentions, and it's usefulness. ##1.) the addition of telemetry inside of a foss project now that i have clearly outlined in the title of this section exactly what i will now cover you should hopefully be prepared to listen to and take note of the issues that i have with this change. foss prides itself on being highly privacy-focused and open, this is something that many people in the foss community see as a cornerstone of foss development, and it seems that the the audacity development team have failed to realise just how critical privacy is to many people that choose linux and foss as thier chosen methods of software interaction. telemetry is not welcome in foss software, regardless of the project, and as someone who helps support a foss project i can tell you from my own personal experience that telemetry is essentislly useless to most people looking to find faults with and fix bugs in software, the methods with which the data is gathered, and, the inability for that data to be understood from the users perspective mean that it is impossible to gain any useful context from telemetry data. the audactiy development team should be fully aware that telemetry is useless for all but some very invasive marketing and analytical subjections. ***why*** **did you ever think this was an acceptable change to make?** **do you think we are stupid?** under no circumstances should telemetry be included into audacity. it doesn't belong in foss projects under any circumstances. and, your attitude towards how you have handled it's suggested integration into audacity highlights your complete disconnection from the huge community that uses audacity. stop the process here and now. go back to the drawing board and re-evaluate the feedback you have recieved from the community on this matter. you'll learn a lot by listening to the communtiy and taking on-board the feedback that has been provided. don't make us fork this project just because you are unable to accept honest criticism from your end-users. do the right thing, work with us to improve the project in ways that the community want it to be improved. the last two points i was going to cover are frankly irrelevant because they don't even need to be considered once you taken on-board my feedback on the first point. but just in case you think you know better than your own end-users..... ***no google. no yandex.*** **no opportunity for discussions on the matter either. it's the communities way or the highway for the current audacity development team.** take heed, we want our values preserved, please don't fight against us on this matter.",-1,1,-1,0.9422169923782348,0.9005170464515686,0.8525752425193787,-1.0,accept,majority_agreement
834219131,835,i like the guy above me.,1,1,1,0.8789074420928955,0.8066574931144714,0.9208837151527404,1.0,accept,unanimous_agreement
834219161,835,don't merge this.,0,0,0,0.6404472589492798,0.8059707283973694,0.8985478281974792,0.0,accept,unanimous_agreement
834219643,835,this is sus as.,0,0,0,0.9816446304321288,0.9743690490722656,0.990959405899048,0.0,accept,unanimous_agreement
834219764,835,where am i?,0,0,0,0.8246403932571411,0.9654219150543212,0.9754772782325744,0.0,accept,unanimous_agreement
834219957,835,"if i had to guess, i don't think the community wants this. not like there's 19 likes and 1570 dislikes. in all seriousness, this might contribute to the development of audacity but this seems unnecessary, especially with the existence of forums. if there's a crash... just post it on the forums. no automation or google analytics required, and users can leave their privacy concerns at rest.",-1,-1,-1,0.70624178647995,0.8926029801368713,0.6204761862754822,-1.0,accept,unanimous_agreement
834220617,835,the place from where it all went down :(,-1,-1,-1,0.9891470670700072,0.9900339245796204,0.9935420751571656,-1.0,accept,unanimous_agreement
834221539,835,"this is preaching to the choir and may be melodramatic grandstanding: the spirit of audacity was a open research project at carnegie mellon. i don't speak for my institution, but it seems like many of my peers are all to eager to cash out with a lucrative big tech job violating people's privacies. somewhere along the way, most of the hacker spirit died and programming just became a way to market and track people more.",-1,-1,-1,0.9636498689651488,0.8806775808334351,0.9608721733093262,-1.0,accept,unanimous_agreement
834221854,835,and me looking at this pr :d ![a link],1,1,1,0.9923473596572876,0.973210334777832,0.9952876567840576,1.0,accept,unanimous_agreement
834222324,835,"use internal infrastructure instead of relying on a third party for analytics collection, please.",0,0,0,0.9819897413253784,0.9884305000305176,0.9791101217269896,0.0,accept,unanimous_agreement
834222459,835,"that isn't software engineering. that isn't computer science. it's computer industry. your peers can enjoy it, but i'd hope you reasonably want no part of it, and certainly nor do the rest of us.",0,1,-1,0.7805261015892029,0.918765664100647,0.8433722257614136,,review,no_majority_disagreement
834223088,835,"polite reminder this is github, not your local discord server. please keep discussions on topic, and ensure every new post adds to the discussion. as a further reminder every time someone clicks ""comment"" about 200 people get an email.",0,0,0,0.8679855465888977,0.9739392399787904,0.7596527934074402,0.0,accept,unanimous_agreement
834224445,835,"sorry, i thought reddit had a new feature to upload code. my bad.",-1,-1,-1,0.9901366233825684,0.9942395687103271,0.9952905178070068,-1.0,accept,unanimous_agreement
834224591,835,"these are all very sweet words. but the tl'dr of your message is that you are somehow implying you will add a cla to be able dual license audacity, i.e. add a non-gpl version. could you please clarify if you obtained that permission from all main constributors of _the existing code base_ (which in my understanding is a precondition to add dual licensing), and what you intend to do with code that has been submitted by people who were not part of that deal?",1,1,1,0.9808945059776306,0.8915694952011108,0.9644656777381896,1.0,accept,unanimous_agreement
834225352,835,i think that ship sailed 200 comments ago,0,0,0,0.9651666879653932,0.9589625000953674,0.962306559085846,0.0,accept,unanimous_agreement
834226077,835,not really a strong leg to stand on musescore has been littered with subscription only features and bolted to a closed source server infrastructure. with as far as i can tell little input from the community about if that is what they want. muse is about monetizing these apps not improving them.,-1,-1,-1,0.950226902961731,0.7842742204666138,0.9258676171302797,-1.0,accept,unanimous_agreement
834226461,835,currently over 99.97% of the reactions to the original commit are negative. clearly the users are overwhelming opposed to it. if it gets added that will be a massive middle finger to people who have used audacity all these years and will most likely result in a loss of users.,-1,-1,-1,0.9487975835800172,0.5459293723106384,0.9340708255767822,-1.0,accept,unanimous_agreement
834228086,835,"btw ardour is free open source, has no tracking, and still manages to fund its self. btw its also got 90% of the features of audacity, and is a viable exit strategy for many. * cough * [a link] * cough *",-1,0,1,0.809292733669281,0.9415650963783264,0.739801287651062,,review,no_majority_disagreement
834228994,835,"most users who were led here by reddit, hn, etc. it would be more fair to survey ""the typical audacity users"" (what telemetry does, but voluntarily). i think audacity users care about open source, but a lot of people couldn't care less and just use it because it's free. or maybe distro maintainers will decide whether or not to use a fork.",0,0,0,0.8263466954231262,0.9635868072509766,0.9492117166519164,0.0,accept,unanimous_agreement
834230873,835,"getting back on topic.. sorry to say but google analitycs and datadog are ones of the most intrusive methods to datamine the user, the way and the ammount of data that it collects its disgustingly wide. i honestly wouldn't feel comfortable knowing that audacity uses it, even if there was a button to disable it.",-1,-1,-1,0.9909143447875975,0.9920682907104492,0.9927327036857604,-1.0,accept,unanimous_agreement
834230959,835,anecdotal data point: i'm a regular audacity user and i also learned about this issue via reddit. (i don't know if i would have learned about this in time if it wasn't for reddit/hn.) i assume that many of the people speaking in this thread actually use the application instead of participating in storms about applications they don't even use or haven't seen them used themselves.,-1,0,0,0.8247124552726746,0.8942562341690063,0.9554816484451294,0.0,accept,majority_agreement
834231964,835,"i understand the motive behind it but i disagree with this. while i do admit that telemetry is useless for the end user, it's *theoretically* only directly useless for them. if developers use telemetry properly, this will indirectly be useful for the end user as many more bugs will get squashed which will make it more stable and potentially faster, but that's only if developers use telemetry properly. i'm all for foss telemetry. i don't like opt-in or opt-out telemetry; i prefer a prompt at first launch that asks the user if they want to enable telemetry or not, which can then be enabled or disabled in the settings depending on what you chose initially. that being said, i'm all for foss telemetry. google analytics is something i will sincerely disagree with however.",-1,-1,-1,0.9786473512649536,0.94440495967865,0.533399760723114,-1.0,accept,unanimous_agreement
834232432,835,"that may be the case but that doesn't mean when the average user hears about this and how it was added to audacity anyway despite the overwhelming concerns of other developers that there won't be a loss of users, not all users, most likely not a majority of users, but it will still drive people away from the program. are the benefits of telemetry worth that loss?",0,0,0,0.9258509874343872,0.7885029911994934,0.8408235907554626,0.0,accept,unanimous_agreement
834233129,835,this response by tantracrul misses most of the complaints people have. i am not hopeful at this stage for the audacity team to actually listen to the feedback.,-1,-1,-1,0.970879077911377,0.9217707514762878,0.9460589289665222,-1.0,accept,unanimous_agreement
834233782,835,"this is a terrible idea, and is a crime against the values of many of your core users. absolutely immoral.",-1,-1,-1,0.9872047901153564,0.992385745048523,0.9946445226669312,-1.0,accept,unanimous_agreement
834234012,835,i have a distro developer telling me they are preparing a patch to remove this pr from future builds for their os. so this is already starting to fracture the product.,0,-1,0,0.9179068803787231,0.582428514957428,0.8658536076545715,0.0,accept,majority_agreement
834234184,835,"why do you want telemetry this much with all these services? they're never going to make their way into this software, move on and make your own fork of audacity with google analytics telemetry if you want, but keep in mind that it isn't audacity's goal to track (not directly) its users.",0,0,-1,0.9232222437858582,0.8865069150924683,0.5123352408409119,0.0,accept,majority_agreement
834235362,835,"yandex, seriously? like a kgb cyber front? haha, try harder next time...",-1,-1,1,0.9275124669075012,0.5638188719749451,0.9648848176002502,-1.0,accept,majority_agreement
834236982,835,"all i will say is that after [a link] where, after the acquisition by ultimate guitar (now muse group), musescore developers threatened a developer with sending the police to their door for *using a public api* to download sheet music... i am not in the least bit surprised that their first move after taking control of audacity would be something like this. seriously, read the whole thread for more.",-1,-1,-1,0.9656290411949158,0.9702170491218568,0.6269322633743286,-1.0,accept,unanimous_agreement
834238211,835,this imho (and the success of programs like blender) is the proof that floss projects work best as non-profit endeavors (e.g. foundations) backed by donations. we have to change the culture so that all users realize the value of floss programs they use and donate to feed the people who put their work into those programs!,1,0,1,0.456779420375824,0.7378303408622742,0.923096776008606,1.0,accept,majority_agreement
834238221,835,the success of a fork or a continuing series of patches depends on where the regular contributors contribute to. the same issue arose when youtube-dl got into hot water on github. have the regular contributors made any statements yet?,0,0,0,0.974198281764984,0.955207109451294,0.9848564267158508,0.0,accept,unanimous_agreement
834239917,835,"yes, take a look at krita and ardour for positive examples of how to fund cooperative creative software. i recommend you have some discussions with the developers of those software about how they make it work in practice.",1,0,0,0.5644769072532654,0.9344037771224976,0.8003036379814148,0.0,accept,majority_agreement
834240262,835,good. telemetry is not wanted.,1,1,1,0.8469536900520325,0.6206738352775574,0.8117012977600098,1.0,accept,unanimous_agreement
834240416,835,pls never merge this.,0,0,0,0.887468159198761,0.7914559245109558,0.971169114112854,0.0,accept,unanimous_agreement
834241743,835,"this is a horrible, horrible idea",-1,-1,-1,0.9880467653274536,0.9937734007835388,0.996013045310974,-1.0,accept,unanimous_agreement
834241794,835,"it really is a bad omen if the first thing that musescore does is implement user tracking using google, of all things.",-1,-1,-1,0.9830124974250792,0.9870533347129822,0.9462183713912964,-1.0,accept,unanimous_agreement
834242208,835,"what's the point of being constructive? this is garbage pull request, the points have been made, and now the only thing left is to get those points across.",0,0,-1,0.8535054326057434,0.9398553967475892,0.9910780787467957,0.0,accept,majority_agreement
834242882,835,i am as an end user firmly in the camp this pull request should be rejected as one it raises serious privacy concerns and two it will cause a fork. if something like this is allowed in can i trust the audacity team any more? because from where i'm standing i can not and this is coming from a long time user that has used audacity in a professional context and suggested it to other people over the years. the fact parts of the code are obviously obfuscated to hide what they actually do and where they are sending data is worrying especially with the fact we know there are actors out there trying to initiate supply chain attacks on oss projects. edit: one thing i forgot to mention is i have no issue with some telemetry per say it's more the providers being used to process it as i know google has been caught in the past intentionally trying to link 3rd part apps and services using their analytics to their user tracking database. i do believe a better solution can be found with a little time with the greater community.,-1,-1,-1,0.8709937930107117,0.7690306901931763,0.977931559085846,-1.0,accept,unanimous_agreement
834243297,835,yay another fork and revert,0,0,0,0.9471735954284668,0.957205057144165,0.813646137714386,0.0,accept,unanimous_agreement
834243310,835,it's true. i haven't seen a single ux improvement yet.,0,0,0,0.6909178495407104,0.8832520842552185,0.9664148092269896,0.0,accept,unanimous_agreement
834244565,835,"the audacity code is not obfuscated. it's right here in this pull request, have a look yourself if you want. multiple people have already. however, the code running on the servers this data is sent to *is* proprietary.",0,0,0,0.9709266424179076,0.9840654730796814,0.98343163728714,0.0,accept,unanimous_agreement
834244660,835,please no. thank you.,0,1,1,0.7323437333106995,0.9669585227966307,0.758499026298523,1.0,accept,majority_agreement
834245011,835,the telemetry should be put behind a define so one could compile audacity without telemetry. opt in after compiling it and optional in the compilation process.,0,0,0,0.9872432947158812,0.994127869606018,0.9949535727500916,0.0,accept,unanimous_agreement
834250046,835,"this is an awful idea. at least you could have tried to implement it in some non-google, open-source way. if this gets accepted, you are losing me as a devoted audacity user. please do not continue with these efforts.",-1,-1,-1,0.9894024133682252,0.9884651899337769,0.9951097369194032,-1.0,accept,unanimous_agreement
834253599,835,"umpteenth user chiming in: the issue is not telemetry, it's the provider used. i am happy to provide telemetry data, so long as the telemetry infrastructure is open source and hosted by audacity. a black box is unacceptable in free and open-source software.",-1,1,0,0.8560593128204346,0.9476924538612366,0.7634687423706055,,review,no_majority_disagreement
834254283,835,"""additionally, this pull request comes with a set of libraries to help the future efforts on audacity."" putting sugar on crap doesn't make it not crap.",-1,-1,-1,0.9517579674720764,0.862869381904602,0.915013551712036,-1.0,accept,unanimous_agreement
834254661,835,maybe making it viewable for everyone would also help? because that way everyone knows transparently whats being collected + independend devs can also use that data for improving the software.,0,0,0,0.9685133695602416,0.9716379642486572,0.9761630296707152,0.0,accept,unanimous_agreement
834255149,835,"people really going ""these people came here from reddit, they're not real users"" when the merge request calls the program ""the audacity"" like some geezer calling their grandkids' favorite game ""the pokemon""",0,0,-1,0.848059892654419,0.5518171787261963,0.6618281006813049,0.0,accept,majority_agreement
834257435,835,that they had _the audacity_ to do this :zany_face: (sorry i couldn't help myself),-1,-1,-1,0.9915249943733216,0.9918357133865356,0.98251074552536,-1.0,accept,unanimous_agreement
834257470,835,"it will be the ""vital vs vitalium"" situation all over again. an audio editing tool is an audio editing tool, not something that connects to your toaster and short-circuits it. but if you're butt-tight about telemetry, how about using something like [a link] instead of google analytics? plausible is open source and can be self hosted.",0,0,0,0.7776792049407959,0.9100589156150818,0.8121721744537354,0.0,accept,unanimous_agreement
834258121,835,i wouldn't care a lot about this but it is using google analytics. no just no.,-1,-1,-1,0.8800435066223145,0.5110192894935608,0.961888551712036,-1.0,accept,unanimous_agreement
834260386,835,"even if the infrastructure is floss, once your data leaves your computer you have no control over it. audacity's servers could still send it to other servers owned by ad companies. my question is: since muse group is a for-profit company and it decided to buy audacity, which is clearly an offline program, why did they buy it? what is their proposed business model?",0,0,0,0.729201078414917,0.6347954273223877,0.9344657063484192,0.0,accept,unanimous_agreement
834260813,835,bruh,0,0,0,0.9231669902801514,0.5735108852386475,0.8966339826583862,0.0,accept,unanimous_agreement
834261093,835,"and this, dear viewers, is the first step of a formerly very popular foss software into irrelevance. fair well, it was a good time before it stopped being free and libre open source software.",1,1,-1,0.9064160585403442,0.9881728291511536,0.9245354533195496,1.0,accept,majority_agreement
834261239,835,muse group developers appear to be located in russia. i wouldn't hassle them over english usage,0,-1,0,0.9793494343757628,0.8077853918075562,0.933433473110199,0.0,accept,majority_agreement
834262567,835,"i would like to point out that i am not happy with any telemetry. telemetry shows a shift from the user base being a community to being a customer base. instead of cooperating with the community a telemetry system spies on them, and stores its findings in a database that only a handful of developers can access. this is flies in the face of the fundamental goals of free open source software that anyone can contribute and all project materials are freely available.",-1,-1,-1,0.9686444401741028,0.6428368091583252,0.9332193732261658,-1.0,accept,unanimous_agreement
834263257,835,"i think its clear that most of us don't like this pr, can we finally agree on that and cancel this pr? ![a link] worst case scenario, we can always make a fork if people want to keep using it without the proposed changes.",-1,0,-1,0.9589003324508668,0.868102490901947,0.8677237033843994,-1.0,accept,majority_agreement
834263753,835,"to all people complaining here, musescore already includes google analytics. [a link] so they likely already have a working setup with ga, it makes sense (for them, on their side) to use the same setup once again. i think complaining here will do nothing. they will merge this and just wait for the storm to die out as usual.",-1,0,-1,0.9000168442726135,0.5585817694664001,0.8043797016143799,-1.0,accept,majority_agreement
834264437,835,i think it still makes sense to put it behind a define - maybe even making the data public - its open source after all (but especially not using google or yandex would help),0,0,0,0.9430433511734008,0.976470708847046,0.9760642051696776,0.0,accept,unanimous_agreement
834264968,835,the people who can do that are project maintainers and members i.e. the people who have permissions to for this repo.,0,0,0,0.974462389945984,0.9836667776107788,0.9948340654373168,0.0,accept,unanimous_agreement
834265106,835,this was a dumb idea. it is just going to mean the project gets forked and the developers move.,-1,-1,-1,0.9860708117485046,0.98769348859787,0.9938235282897948,-1.0,accept,unanimous_agreement
834266533,835,"polite reminder this is github, not your local discord server. please keep discussions on topic, and ensure every new post adds to the discussion. as a further reminder every time someone clicks ""comment"" about 200 people get an email. final warning both of you before you get passed up to the github moderation team",0,0,0,0.7884157299995422,0.9149723052978516,0.7050719261169434,0.0,accept,unanimous_agreement
834266651,835,", so is distrho ports going to have a new addition?",0,0,0,0.9866968989372252,0.987173080444336,0.9902440905570984,0.0,accept,unanimous_agreement
834267150,835,"i agree, terrible idea. i will use a fork.",-1,-1,-1,0.9880300164222716,0.9925405383110046,0.9934917092323304,-1.0,accept,unanimous_agreement
834267598,835,regular users shouldn't have their data unsolicitedly sent to servers.,0,0,0,0.8052356243133545,0.9038940072059632,0.7130557894706726,0.0,accept,unanimous_agreement
834268241,835,we engage in subtle ammounts of tomfoolery,0,-1,-1,0.9241551160812378,0.5848317742347717,0.9125207662582396,-1.0,accept,majority_agreement
834268677,835,"distrho-ports is for juce plugins, not this. for open-source and linux distributions in general, the best we can do for audacity is de-vendor the dependencies as much as possible. the custom modifications to wxwidgets are particularly hard to deal with for packaging #625",0,0,0,0.9387741684913636,0.955203890800476,0.9555609822273254,0.0,accept,unanimous_agreement
834270606,835,"well if true that's that. time of death may 2021, age 22 years.",0,0,0,0.9667168259620668,0.988326609134674,0.9856171011924744,0.0,accept,unanimous_agreement
834270741,835,"for error reporting a good alternative could be sentry.io, as it's opensource and has way better tools for catching errors. for tracking there's always matomo.org, which is also opensource.",0,0,0,0.867666482925415,0.987959623336792,0.9166680574417114,0.0,accept,unanimous_agreement
834271482,835,"please do not add telemetry to audacity. i do not like the idea in general but using google makes this even worse. maybe use polls and surveys to find out how people are using the program. i'm 1000 times more willing to fill out a survey than passively provide use information. i'm sure many other people feel the same, especially since this is open source software that people are inclined to trust more than proprietary software.",-1,-1,-1,0.9770148992538452,0.8659946918487549,0.960440456867218,-1.0,accept,unanimous_agreement
834271796,835,"polite reminder this is github, not your local discord server. please keep discussions on topic, and ensure every new post adds to the discussion. as a further reminder every time someone clicks ""comment"" about 200 people get an email. final warning before you get passed up to the github moderation team",0,0,0,0.7775265574455261,0.9478041529655457,0.7453547120094299,0.0,accept,unanimous_agreement
834274230,835,"dear all, we have updated the pr description to clarify what is going on.",1,0,0,0.7846156358718872,0.925666570663452,0.9480183720588684,0.0,accept,majority_agreement
834274809,835,"i think its quite clear that people dont like this pr, as for this topic, as i said before, its gotten out of hands. people already said more than 10 times that noone wants these changes, and the fact that it doesnt stop says alot about the progression of this topic. its gotten to the point where the conclusion of the topic is more than clear, and theres nothing else to add that could change the mind of the users. the topic should be closed at this point, you wanted a feedback for this pr, and you got it. not meant to be rude with this message, but the topic started deviating from the original subject long ago.",-1,-1,-1,0.5647938251495361,0.9862220883369446,0.935039222240448,-1.0,accept,unanimous_agreement
834277206,835,if this is absolutely necessary - what about at least making the data public (anonymized) and using open-source tools?,0,0,0,0.97784823179245,0.992698848247528,0.9863341450691224,0.0,accept,unanimous_agreement
834277830,835,please do not add telemetry to this project.,0,0,0,0.7880611419677734,0.9468819499015808,0.9138548374176024,0.0,accept,unanimous_agreement
834278044,835,"the updated description states: as-is, going with ga is crossing a line many people here expressed not being okay with. i am personally not okay with any kind of analytics, but if it really has to happen without question, ffs do not use google. the fact that we even need to state this makes me lose hope on the development process of the team behind audacity.",-1,-1,-1,0.9661137461662292,0.7963466644287109,0.9693227410316468,-1.0,accept,unanimous_agreement
834280099,835,"this will essentially erase all users of your software not using windows or macos, as most unixes rebuild the software on their own servers which will automatically exclude them from your statistics. with an automatic measurement bias such as this how do you expect to extract meaningful information from this move, without punishing users on platforms that are not supporting your telemetry?",0,0,0,0.8894831538200378,0.9242121577262878,0.8911693096160889,0.0,accept,unanimous_agreement
834280769,835,"please fully read the pr comment: `telemetry is strictly optional and disabled by default. no data is shared unless you choose to opt-in and enable telemetry. `. i don't know, do you cry over the fact that when firefox crashes you can send crash info back to mozilla?",-1,0,-1,0.911325991153717,0.8952933549880981,0.539638876914978,-1.0,accept,majority_agreement
834280783,835,please don't merge this. i don't want to share my data – especially not with a google service.,-1,-1,-1,0.8804189562797546,0.8701393604278564,0.9185089468955994,-1.0,accept,unanimous_agreement
834280938,835,"i agree with . i would like to see a clear, unambiguous commitment now that you will *not* use google analytics *nor* yandex. to quote [a link]: i understand it will take some time to evaluate the various alternatives that have been proposed and decide on one. if none fulfill everything you wanted, then continuing with google analytics and/or yandex is still not acceptable.",0,0,0,0.7682716846466064,0.833935558795929,0.8326768279075623,0.0,accept,unanimous_agreement
834282036,835,"even its disabled by default, the fact that it use ga and yandex as first start is still disappointing. should have choose the free open source analytics one if still insisting doing telemetry",-1,-1,-1,0.9599528908729552,0.8402063250541687,0.9719967246055604,-1.0,accept,unanimous_agreement
834282994,835,"so on the prompt window the button for sending telemetry is pretty much highlighted. yet you state, that it is disabled by default. it makes no sense to me.",-1,0,0,0.6393724083900452,0.6999140977859497,0.6686493158340454,0.0,accept,majority_agreement
834283058,835,nah you have mistaken worry for anger,-1,-1,-1,0.7901256084442139,0.8981766700744629,0.9428121447563172,-1.0,accept,unanimous_agreement
834283808,835,"my guess? make an ad filled mobile app with a paid ""premium version"" to remove the ads and slowly turn audacity itself into a ""cloud based music creation platform"" with a subscription fee.",0,0,0,0.9739890098571776,0.9725645184516908,0.9733363389968872,0.0,accept,unanimous_agreement
834284738,835,![a link],0,0,1,0.9475814700126648,0.9432068467140198,0.5592244863510132,0.0,accept,majority_agreement
834285264,835,is this a joke?,-1,0,-1,0.9027411937713624,0.629460871219635,0.8370704054832458,-1.0,accept,majority_agreement
834285554,835,"i'm not a fan of telemetry in general, especially for a fully offline application. but my biggest concern lies with google and yandex, these are not privacy conscious companies nor do you have any control over how they use the data. (that's, of course, assuming the telemetry remains opt-in by default and that the behavior never changes, this seems unlikely to me seeing how this industry tends to operate so i'm strongly against it in general). notably this prompts the question ""how is this going to change over time?"" is it going to become mandatory in five years? is it going to then expand in scope? i suspect i'm not the only one finding this development concerning in both the short and long term.",-1,0,-1,0.9629073143005372,0.6471459865570068,0.9567252397537231,-1.0,accept,majority_agreement
834286641,835,"fyi, while opt-in is a good thing, the interface in the screenshot *still* violates the gdpr - it makes the ""accept"" option more visually attractive, which is not allowed. the accept and reject options must be presented on equal footing, without using 'dark patterns' like attractive colors for the accept button or extra-convincing label text. edit: it also doesn't mention *where* it is sending the data to, which is dubious under the gdpr at best.",0,-1,0,0.7803151607513428,0.6520612835884094,0.831012487411499,0.0,accept,majority_agreement
834287482,835,"yeah this is concerning too. if they ship it into macos also, should it have to be the ""dont send"" button that should be highlighted? because what i know about apple ecosystem is they designed it like that and giving no option to tracking.",0,0,-1,0.9537054300308228,0.5370838046073914,0.9270537495613098,0.0,accept,majority_agreement
834287964,835,"i am very sick of this mentality to be very honest. it is precisely us that should be opposing these changes. as developers we have the responsibility to fully understand the technical and ethical implications of such things and stick up for software users that are less informed than us - users that place all their trust in us. when i go to the store to buy food i expect it not to contain poison because i trust that the experts in that industry have my best interests in mind, and have protected me against things that i may not know about. ""we can put telemetry in this software and the users will not realise"" is just as true as ""we can put poison in our food and the customer will probably not realise from the ingredients list"".",-1,-1,-1,0.990005910396576,0.9802535772323608,0.9906507730484008,-1.0,accept,unanimous_agreement
834288438,835,bump bump bump,0,0,-1,0.8729777932167053,0.8926616907119751,0.446111112833023,0.0,accept,majority_agreement
834289490,835,these are the typical audacity users. audacity users are almost a complete subset of reddit & hn users.,0,0,0,0.9762477278709412,0.9879382252693176,0.971314251422882,0.0,accept,unanimous_agreement
834291949,835,"![a link] please make ""don't send"" the default option, or don't specify a default option.",0,0,0,0.9703161120414734,0.9344736933708192,0.9786848425865172,0.0,accept,unanimous_agreement
834292300,835,don't merge this please.,0,0,0,0.5371074080467224,0.5049387216567993,0.7218655943870544,0.0,accept,unanimous_agreement
834292364,835,"in your clarifications you do not address the security implications that you introduce with vendoring an out-of-date and unpatched version of curl though (which would be the case for macos and windows users). do you plan on releasing every time libcurl has a release? how do you envision to do security advisory tracking? opening an application to the internet like this is non-trivial and unnecessary attack surface. the above leads me to the conclusion, that `lib-network-manager` will be used not only for telemetry in the future and i find this very worrying, as this means that while the user can opt-out of telemetry, a vendored libcurl would still be used to talk to e.g. a web shop or whatever it is you envision to do with it. that thinking about the topic of ""how to build this sanely on a linux distribution"" came after the fact makes me not very hopeful, that issues with the build system, such as #625 will ever be resolved.",-1,0,-1,0.9482465386390686,0.6517683267593384,0.8265156149864197,-1.0,accept,majority_agreement
834292659,835,"the confirmation dialog says: ... when at the same time the pull request says ... so, errors reported “anonymously” can be matched with forum users. great. if you use yandex to get daily usage, why do you need session start time? if you want to get session duration, why record start/end? can you name a single feature that would benefit from usage duration information? why would you use ga then?",1,1,1,0.9039356708526612,0.8365333676338196,0.6192619800567627,1.0,accept,unanimous_agreement
834292886,835,"if this is merged i'm off official builds. i'm sure someone will be providing binaries off here that have the telemetry disabled at compile time. in the end i have outgoing firewalls on everything anyway and block requests by default. funny that the first thing you do when audacity is bought out is an unpopular ""feature"" 1/2 the user base is against.",-1,-1,-1,0.9761019945144652,0.9783318638801576,0.7826789617538452,-1.0,accept,unanimous_agreement
834292989,835,"i think audacity can still come out on top and get back users trust if it closes this pr on the short-term. the longer this pr is left open, the more people will be outraged and stop using it altogether. at some point the shitstorm is not worth it. only if there are deeper plans for more ""modern"" practices coming after this, which i really, really hope it is not the case. please close this pr and show you care about yours users.",-1,-1,-1,0.9111355543136596,0.9664849638938904,0.973954737186432,-1.0,accept,unanimous_agreement
834294100,835,"if audacity is going to add telemetry, i’d at least suggest using [a link] instead of privacy-unfriendly solutions like google analytics and similar.",0,0,0,0.9164504408836364,0.9851357340812684,0.9506548643112184,0.0,accept,unanimous_agreement
834294589,835,nah this team will never again be trusted by anyone for anything ever again,-1,0,-1,0.9667745232582092,0.9064539670944214,0.9796709418296814,-1.0,accept,majority_agreement
834294625,835,"completely off topic but are you the guy who makes cadence? if so i really wanna talk to you about the world of jack mangers, you can find ways of contacting me in my bio.",0,-1,-1,0.9045907855033876,0.6285046935081482,0.7315381169319153,-1.0,accept,majority_agreement
834294633,835,i would like an answer to this as well. i cannot imagine any way this helps audacity developers improve the software for users. it only seems intrusive for no benefit.,-1,0,-1,0.5973270535469055,0.767693042755127,0.9284582138061525,-1.0,accept,majority_agreement
834295929,835,"hum... i guess, i'm not going to be using not recommending audacity anymore.",-1,-1,-1,0.9596267342567444,0.9155023694038392,0.824770987033844,-1.0,accept,unanimous_agreement
834296467,835,"you seem to have a habit of thinking you speak for everyone. your views are quite extreme and i'd prefer if you stopped assuming everyone was as hate and spite-filled as yourself. i'm sure we'd all prefer to come to a respectful middle-ground. edit: i see the irony in saying ""i'm sure we'd all..."" after talking about speaking for everyone. to rephrase, i believe it'd be _better_ for everyone, whether everyone would prefer that or not.",-1,-1,-1,0.971942126750946,0.9665407538414,0.9600890278816224,-1.0,accept,unanimous_agreement
834297698,835,"i sure do buddy and i'll say it again, they fucked up here. if you genuinely think anyone can ever recover from this i have a bridge to sell you",-1,-1,-1,0.9660051465034484,0.9807031154632568,0.987351655960083,-1.0,accept,unanimous_agreement
834298872,835,"don't worry i flagged his first comment for ""hate speech"" ""inciting violence"" and ""directed threats"" already. an impressive number of rule violations in a single post i might add.",1,-1,1,0.7320494055747986,0.4593724608421325,0.754804790019989,1.0,accept,majority_agreement
834299889,835,incidentally i did this despite us being on the same side of the argument. that sort of conduct is not good for anyone involved. just cos we don't like a software decision doesn't mean death threats are justified.,-1,-1,-1,0.9724021553993224,0.9311429262161256,0.917076289653778,-1.0,accept,unanimous_agreement
834302222,835,adding telemetry is a useless act when nearly all your users (linux distros) are gonna compile from source and create their own packages or downright disable it. all you are doing is shattering peoples faith. you obviously do not care about the previous user base of this application when you have decided to include telemetry that a majority has clearly expressed they don't want. who cares if you disabled it by default? in the end you are still leaving room for an opt-out scenario in the future and even more data gathering. when a company owns a piece of software these things are added for improving your profit not the users experience.,-1,-1,-1,0.9777138829231262,0.9216727018356324,0.908845841884613,-1.0,accept,unanimous_agreement
834305897,835,"whew, what a drama. i remember participating in another one, don't remember which one, got a lot of fun. crsib is a master troll, cristhiancc and igbc are your typical github moderation team pet lapdogs. i just hope audacity will stay as it is, open source and free for everyone and from any kind of telemetry (which is used for selling to advertisers, not for improving software) and that this topic will never be brought back.",-1,1,1,0.8068099617958069,0.5310252904891968,0.7631852626800537,1.0,accept,majority_agreement
834307609,835,"this is ridiculous. **it is disabled by default and if you don't want to use it, you can keep it disabled.** though i have to agree with some people - you should probably use open source/foss analytics tools instead.",-1,-1,-1,0.9842306971549988,0.9877155423164368,0.9898808002471924,-1.0,accept,unanimous_agreement
834308489,835,"at least, mention me when you talk about me. and thank you, nobody told me i was a pet lapdog, that's kinda flattering.",-1,1,1,0.7361425757408142,0.9931464791297911,0.987500011920929,1.0,accept,majority_agreement
834308821,835,it's the type of information advertisers like to see when negotiating how much they'll pay for ad placement.,0,0,0,0.9660439491271972,0.9630000591278076,0.9783185720443726,0.0,accept,unanimous_agreement
834309061,835,"imo, if you really want to add telemetry, you should add it like this: - log locally - at a successful restart delete the data - at a successful restart after a crash, ask to send it, and then delete it locally.",0,0,0,0.9807240962982178,0.9920088052749634,0.9906209707260132,0.0,accept,unanimous_agreement
834309382,835,"not sure about others, but i for one would prefer to fill in a survey than telemetry. (i will always opt out of telemetry.) please provide ways for the user to talk about the program instead!",0,0,0,0.94118070602417,0.8922826647758484,0.9384913444519044,0.0,accept,unanimous_agreement
834309868,835,"at your service. i do enjoy a good foss food fight. looks like this has just gone back to draft, so i guess we got through to them. or they got sick of getting 100 emails an hour. good work everyone.",1,1,1,0.9914804697036744,0.994055151939392,0.995137631893158,1.0,accept,unanimous_agreement
834310722,835,"in 6 months its gonna change from disabled by default to enabled and people will be like: ""what are you mad about you can disable it?"". 6 months after that the option will disappear and people are like ""who cares it wasn't even the default option"". do not add tracking for an offline only application.",-1,-1,-1,0.9672868847846984,0.913857638835907,0.8739116191864014,-1.0,accept,unanimous_agreement
834311616,835,imagine wanting to edit some audio files and suddenly you have 14 http requests sent out a minute (optimistic i guess),0,0,0,0.9342486262321472,0.8933799266815186,0.900692343711853,0.0,accept,unanimous_agreement
834312076,835,"yeah, finally, after repating the same thing, and reading the same ""we don't like this pr"" for the 100th time. its true that the topic deviated, but thats just because everyone were tired of repeating themselves. people have to learn to noticed when something like this happends during a conversation. cause when that happends, you stop add anything of value to the conversation.",-1,-1,-1,0.9321094751358032,0.9703344106674194,0.8383703827857971,-1.0,accept,unanimous_agreement
834312378,835,"the mere existence of google analytics in the code is already a violation of the gdpr in the eu. the fact that the software is used in education and schools makes it even more problematic. even more critical is the fact that the tracking could also capture the data of minors. anyone (admin or school board responsible) who makes the software available unchecked and explicitly approved (in each individual institution) even just makes himself liable to prosecution under certain circumstances. she (or he) risks a fine and the loss of his job. if you want to see the software disappear into insignificance within a very short time, stay on this path. i work for a school board and - for my own self-protection alone - i will suggest to my superiors that the software be banned immediately in all schools in the state if there is a risk that it may contain unlawful tracking.",-1,-1,0,0.950546383857727,0.6171690225601196,0.5321855545043945,-1.0,accept,majority_agreement
834312884,835,can't wait to be arrested for using audacity in the eu.,0,0,-1,0.8309947848320007,0.7260667681694031,0.930856704711914,0.0,accept,majority_agreement
834313509,835,nah i am only telling people off for posting memes or harrassing other users. thankfully not much of that today.,-1,-1,0,0.9415051937103271,0.954986810684204,0.6155229806900024,-1.0,accept,majority_agreement
834314365,835,"so if they put this in, who is going to maintain the audacity fork that lacks telemetry, but is otherwise the same?",0,0,0,0.9731085300445556,0.9869214296340942,0.9751537442207336,0.0,accept,unanimous_agreement
834315186,835,"thing is, that's crash reporting, not telemetry. crash reporting is still immensely useful, and audacity's also considering adding it via breakpad. telemetry is collecting information about platform, high-level usage context and performance, to help understand how the software is running when everything is working, rather than why it's failed when it has failed. telemetry is easier to argue shouldn't be present at all. crash reporting is way easier to justify. i mentioned before that i find telemetry super useful for my own software, and i don't mind audacity adding it; they should just be conscious about privacy, more so than they are right now by sending the data off to google and yandex. otherwise, i totally agree with you.",1,1,0,0.4534410238265991,0.5044578313827515,0.772485077381134,1.0,accept,majority_agreement
834315749,835,someone who will have the _audacity_ to fork it. i'll see myself off.,0,0,0,0.948721170425415,0.9688244462013244,0.9122481346130372,0.0,accept,unanimous_agreement
834316288,835,i mean it doesn't take much to cherry pick commits to merge...,0,0,0,0.6460094451904297,0.8803018927574158,0.9722476601600648,0.0,accept,unanimous_agreement
834316838,835,"thats ok, but you jump too quickly :c. not everyone posting a meme is insantly a bad user. memes are a way of expressing ourselves, and can be used to point out the mood of a conversation before it escalates, its true that we are adults here, but that doesnt mean that the convesation has to be stricly formal.",-1,-1,1,0.6907787919044495,0.970033586025238,0.9602413773536682,-1.0,accept,majority_agreement
834317600,835,this is the sort of work a lot of distros already do. in researching this pr i found that debian have been modifying audacity privately for years just to keep the damn thing working on their os.,-1,-1,-1,0.8686562180519104,0.8078935742378235,0.9320855736732484,-1.0,accept,unanimous_agreement
834317805,835,"i can understand the desire to know users os, as it allows indeed to support more users more effectively, but there are free/libre telemetry and helpdesk support systems. more generally i have been thinking about the state of free/libre softwares support tooling recently. often you will see a software great in its own field, but that uses a proprietary chat room system, forum, or telemetry. there should be more collaboration and free projects should offer support to other free projects when possible. you run a free forum ? offer to run \ 's forum.",0,0,0,0.6202303767204285,0.5339069366455078,0.8435653448104858,0.0,accept,unanimous_agreement
834317983,835,"see the clarification of the pr. support for telemetry is only enabled by default in the official builds. if you build from source, it won't even ask if it's okay to send data; you're safe and sound. that said, i'm not sure if audacity supports reproducible builds. considering they have all their dependencies included in the main git tree, rather than as submodules or traditional dependencies, i'm a little worried about their architecture. i'm no expert with audacity (i use it casually and have never made any contributions to it) but this kind of software tends to have certain difficulties with building cleanly and consistently. **edit:** it's still concerning to me that they're including intrusive telemetry, but this reply is to clarify there's an official way to disable it from builds altogether. i guess there's solace in at least that.",-1,-1,0,0.8945579528808594,0.9231619238853456,0.8695442080497742,-1.0,accept,majority_agreement
834318354,835,"just wanted to share some support for the people working on this. i actually think telemetry data could prove extremely useful to understand how the software is used in the wild, and what are the potential pain points. as long as it's opt-in, disabled by default, and there is a clear communication about what is sent, when, why and to whom, i don't think it's such big deal. and it seems to be the case. that being said, an other backend than google analytics or yandex for storing and querying the data would be nice, but hey, what good enough alternatives are available out there?",1,1,1,0.9169740676879884,0.9219312071800232,0.9648077487945556,1.0,accept,unanimous_agreement
834319269,835,"see the post on incrementalism by . no ""telemetry."" hard stop.",-1,0,0,0.7487523555755615,0.9796415567398072,0.7190800309181213,0.0,accept,majority_agreement
834319639,835,you cannot said is for dev only when you plug-in google analytics ... this monster just snif everything you do and you don't know what its take...,-1,-1,-1,0.9844610095024108,0.9834156036376952,0.9920085668563844,-1.0,accept,unanimous_agreement
834320113,835,"oh how nice. i'm another russki comrade, just freedom loving one. gonna go and find this hq and verbally assassinate everyone there. wish me luck.",1,1,1,0.9884230494499208,0.9949919581413268,0.98382830619812,1.0,accept,unanimous_agreement
834322355,835,oh absolutely not,-1,-1,0,0.6636898517608643,0.7020326852798462,0.6783195734024048,-1.0,accept,majority_agreement
834322765,835,"if this gets merged and you further have to use use audacity, consider using [a link] to disable internet access and further restrict folder access in your $home. i dont know, why -licameli and have not replied to the prs and who has what access rights to the repo besides them. i will stop following this for now. the main devs should manage this.",0,0,0,0.6747124195098877,0.7492641806602478,0.6584787368774414,0.0,accept,unanimous_agreement
834322885,835,"why is there a plan to send my usage data for audacity as additional data points to an ever-growing analytics and telemetry monster instead of the fabled eighth magnifying glass i was promised tantacrul? but seriously: if you do analytics **please** selfhost it. who has access, how long and when will it be deleted - and even better, how much will be made public so others can benefit - should be mandatory statements - as well as help compliance. and make ""no"" the highlighted default. i know it sucks and it will lead to less users agreeing (which effect does the close button/esc call? default? none?) to send usage data but that will be the most friendly, agreeable and least resistant way - plus 100% gdpr/dsgvo compliant too. and while i value the effort to take audacity into the current century with a more consistent design after you applauded the amazing open source community please dont disappoint the same with the first action being telemetry to some of the biggest privacy violating monsters despised by floss out there. we're all rooting for you to do the right thing.",-1,-1,-1,0.9882828593254088,0.9913488030433656,0.9938761591911316,-1.0,accept,unanimous_agreement
834323989,835,"as a side effect from this, which was touched by others but only briefly, is that audacity team will only receive analytics reports from a certain, very specific kind of people. if new developments and ideas happen because of the results of these analytics, it will be focused only on these people, no way around it.",0,0,0,0.5412253141403198,0.971905529499054,0.9491575360298156,0.0,accept,unanimous_agreement
834324064,835,this is how zrythm does it ![a link] example bug report that gets generated: [a link],0,0,0,0.627295196056366,0.946452498435974,0.7706212401390076,0.0,accept,unanimous_agreement
834324398,835,this is by far the best way. bonus points for making the logs easy and intuitive to find so the average user can participate in submitting bugs with logs.,0,0,1,0.55791175365448,0.5072504878044128,0.985729455947876,0.0,accept,majority_agreement
834326198,835,"i really like the log local, ask to send approach. i personally would like to see what type of data is being sent as well... there could even be a ""always send"" option that will cause a window to pop up that announces it is sending the data (along with an option to opt out of the ""always send"" mode), but otherwise just works in the background.",1,1,1,0.97686105966568,0.8335038423538208,0.8392715454101562,1.0,accept,unanimous_agreement
834328822,835,"the idea of this being a slippery slope itself seems preposterous to me - as much as you might want to assure yourself with it, companies and projects are not inherently disposed to become evil once they get big. again, i don't support the way audacity is implementing telemetry, but i know how useful it can be as someone who includes it in my own software. *i'm not interested in any profit incentive;* i would leave it out if i didn't gain anything from it. but knowing who my users are and how well my software is performing for them, is incredibly helpful. i expect audacity feels the same about this. google and yandex software range from cheap to free and are super easy to integrate, but they are ethical monstrosities. i've already spoken against the inclusion of any link to their platforms in audacity. however, i believe telemetry can absolutely be done ethically and productively. being able to gauge audacity's user base will greatly help them as a platform, i believe, and to this extent, i'll support them. what's so evil about knowing how many users you have and how generally they use your software? it's not going to spiral out of control.",1,1,-1,0.4374106824398041,0.7960324883460999,0.3825385272502899,1.0,accept,majority_agreement
834330448,835,"this is ridiculous. your response to hundreds of users telling you they don't want their data to be shared with the privacy nightmare that is google shouldn't be ""we'll replace it only if we can find something better"". if you can't find a solution for telemetry that the userbase can be happy with, like kde's approach, then you shouldn't add telemetry at all. the fact that you're even considering adding google analytics at this point clearly shows that you aren't taking this feedback seriously. if you don't do a complete 180 on this, i expect that there'll be a fork that'll split the community.",-1,-1,-1,0.9870636463165284,0.9870350956916808,0.9877447485923768,-1.0,accept,unanimous_agreement
834330522,835,"how about they just ask their users instead? like how we found out people's opinions on things for the entirety of human history? telemetry is invasive, anti-social, underhanded, and not even an effective tool. no amount of numbers and statistics is ever going to tell you *why* people are doing a certain thing or how they feel using your software. ""90% of people are using this feature"" is completely meaningless when you have no idea if they're pulling their hair out and punching the wall the entire time they're using it.",-1,-1,-1,0.9499695301055908,0.8967747092247009,0.9723150134086608,-1.0,accept,unanimous_agreement
834330976,835,"this. or at the very least, use a self-hosted, open-source telemetry platform. not google analytics... i completely understand how this data _could_ be useful to improve audacity, and i want to assume good faith here. but this is not the way.",-1,0,-1,0.768600344657898,0.8392869830131531,0.6948849558830261,-1.0,accept,majority_agreement
834331427,835,"this gets an absolutely big no from me and almost all other audacity users in this thread, pretty unanimous.",-1,-1,-1,0.7384809255599976,0.9015812873840332,0.9819074273109436,-1.0,accept,unanimous_agreement
834332998,835,people will be mentioning this pr for a decade in discussions about telemetry. we are witnessing history here folks.,0,0,0,0.7325822114944458,0.6457856297492981,0.8262282609939575,0.0,accept,unanimous_agreement
834333609,835,if you think foresight is preposterous then that's a you problem.,0,0,-1,0.6717191934585571,0.7812865376472473,0.8612070679664612,0.0,accept,majority_agreement
834340845,835,"while this thread not locked, hello there!",0,1,1,0.9336458444595336,0.9567880630493164,0.8052893877029419,1.0,accept,majority_agreement
834341873,835,"you don't need to implement telemetry to make better software, take blender as an example, it has no telemetry and yet it's the best free and open source 3d tool available out there. you can use community forums to ask what people need and want, report bugs, have transparent discussions etc... again, you don't need telemetry.",0,0,1,0.872725784778595,0.7133506536483765,0.5318198204040527,0.0,accept,majority_agreement
834342788,835,"seriously, of all the telemetry and logging solutions out there you had to use f*****g google? i'm not opposed to opt-in telemetry, but come on, at least come up with something that isn't google.",-1,-1,-1,0.9809476137161256,0.5500221848487854,0.9882916808128356,-1.0,accept,unanimous_agreement
834344487,835,"i'd prefer not to have telemetry and i hope this pr gets dropped (but i'm not entirely against it if done well), but please in case do not track more data than you really need... you surely don't need file names, ip addresses, uuids, or other information that is user-identifying (maybe os and kernel version are ok by themselves). this could be an issue with google analytics or yandex (it's also not entirely clear why you have to use both, i think there are other ways to do that, maybe something like batching). i hope you'll use some analytics service that it's more privacy-oriented, in case this pr goes on... anyway, all linux distributions build packages from source. because of that and because telemetry is disabled when building from source, you likely won't receive any data from linux users (i also really doubt distros' package maintainers will enable telemetry on your package) so the data you would receive will surely be incomplete.",0,0,0,0.8242872357368469,0.874405026435852,0.7530798316001892,0.0,accept,unanimous_agreement
834345307,835,"if you take your users seriously and there's need for information about the user's system behavior, simply ask the users. be it with polling or other services.",0,0,0,0.9640228748321532,0.6401242613792419,0.98152095079422,0.0,accept,unanimous_agreement
834346903,835,"to reflect on the given reasons why this feature was built in: 1. ""audacity is widely used across several platforms, but we have no information on the application stability"" on almost all platforms it is possible to catch fatal exceptions and let the user decide whether they want to report that crash. with the permission of the user (and this permission is only for that very crash and not all crashes after that), this crash report can be sent to servers owned by the community instead of sending them to google&co to further process them and fix the bug. 2. it is difficult for us to estimate the size of the user base accurately. i'm not sure how this would make audacity better. you have the download statistics. those numbers will be significantly higher and closer to the actual user base than the number of users actually agreeing to that telemetry feature. if you want to actually know the number of users, you can ask the user once during installation or start up whether they would like to let this known. again this information should be going to community servers instead of google&co. apart from that, trying to know the exact user base is only good for one thing; letting investors know how much potential customers they have to milk. 3. we need a way to make informed decisions about which os versions to support. for example, can we raise the minimum version of the macos to 10.10 to update the wxwidgets to the latest version? again, download statistics can help here or an optional questionaire on the download page or once at first startup. 4. we have a known issue with the new file format introduced in audacity 3.0. we found it with the great help of the community members on our forum. however, there is no way for us to estimate the impact of these issues on users. is it just a random case? do we need to rush the work on the recovery tool or help the users one by one? or do we need to rethink the file format to make it safer and more easily recoverable? telemetry does not help with prioritizing bugs. bugs are usually not visible in telemetry data as bugs have the tendency to be unaccounted for and thus there is no telemetry data to count particular bugs. after all, why adding telemetry to understand a bug, instead of ""just"" fixing it? also the number of users watching a particular issue (or the already mentioned crash report) will give you enough hints about how important a bug is.",0,0,0,0.8931443095207214,0.98464834690094,0.977405607700348,0.0,accept,unanimous_agreement
834351418,835,"to the poeple suggesting compile-time flags and distributions taking this feature out: great, you're looking for a solution for **you**. how about we all agree that nobody likes tracking (at best, people are *indifferent* to tracking!) and that we don't want it in any version of audacity? if we debate ""opt-in"" vs. ""opt-out"", we've already lost the most important battle. this feature should not be part of the code. saving linux builds or self-compiled builds will not be helpful to the general user base of this program. if it's in the default, precompiled windows installer, that's probably used for 60% or more of all people using audacity. and we're debating to screw them over. so: no tracking, please. it's not exactly complicated. not ""opt-in"". not ""i can compile it away, i am so smart"". no ""we're forking this"". no tracking. period.",1,1,-1,0.4732517004013061,0.5441116690635681,0.6470930576324463,1.0,accept,majority_agreement
834354552,835,"this plus the measurement of the periods of users use of the software is suspicious. this is classic ""screen hours"" reporting. the only reason i can see to do this is to determine the ""value"" of the software for a monetization strategy. if you look at [a link] the thing they are most proud of is ""100m downloads"" not how this software has helped individuals, educators, and scientific research for the last 22 years.",-1,-1,-1,0.9293913245201112,0.7524974346160889,0.8467473983764648,-1.0,accept,unanimous_agreement
834358022,835,"also, please, don't use a ""dark pattern"" if you decide to add telemetry. the ""send anonymous data usage"" in blue is leading users to click it without reading, as usual. also, ""anonymous"" is a word a bit too strong when we know it's about using google analytics... there is no anonymity possible with google analytics.",0,0,0,0.8948650360107422,0.5956161022186279,0.908148467540741,0.0,accept,unanimous_agreement
834359042,835,i think you have bigger problems than precompiled audacity opt-in telemetry if you are using windows.,0,0,0,0.6230218410491943,0.8600955009460449,0.8273473381996155,0.0,accept,unanimous_agreement
834359782,835,"the audacity developer should have just implemented this and be done with it, and just let the people complain and do whatever they want. just look at filezilla. tim kosse gives zero f*s and do whatever he wants and people pretty much have to accept whatever he does :grinning_squinting_face:. filezilla has worse stuff than telemetry mind you.",-1,-1,-1,0.9839943647384644,0.96360582113266,0.9840844869613647,-1.0,accept,unanimous_agreement
834362288,835,"both previous posts (windows, filezilla) are strawman arguments.",0,0,0,0.9868721961975098,0.9930667877197266,0.9829174876213074,0.0,accept,unanimous_agreement
834362435,835,just in case nobody said it before ;) this sucks.,-1,1,-1,0.8479502201080322,0.9757136106491088,0.6522970795631409,-1.0,accept,majority_agreement
834363301,835,this is not how open source projects work in real life. the idea of floss is for people to collaborate together and not one person making egoistical decisions,-1,0,-1,0.9222526550292968,0.5661100745201111,0.8073471188545227,-1.0,accept,majority_agreement
834364683,835,"speaking for myself, a ""work in progress"" pull request is not a qa issue. i shall make my views clear to the development team when or if this work is merged, based on a calm and careful assessment of it as it is at that time. while i understand some of the concerns raised, and while i personally take the issue of user privacy very seriously, i also appreciate the benefits that telemetry can bring ""for users"". having developed many features for audacity, including timeline quick play, split stereo track to mono, the distortion effect, bass and treble effect, sample data import / export, label sounds, nyquist plug-in installer, countless plug-ins and many enhancements, i would love to know which features audacity users find useful. i improved the pink noise and brownian noise generators, but does anyone use them? despite asking on the very active audacity forum, i have no idea. was i wasting my time? could i have brought more value to the audacity community by doing something else? i have no idea, because asking users to give feedback on the forum does not work. what about all the time that i spent adding sbsms to change pitch and change tempo? is that something that people use, or was that a waste of time? i have no idea, i just assume that it might be useful for some, with hardly any user feedback to support that assumption. can telemetry be useful in foss? yes i believe that it can, provided that it is opt-in, is transparent about what data is collected, who has access to that data, and what the data is used for. i see, and i am happy about the limited uses of telemetry in foss classics such as firefox. i am rather disappointed to see so many negative comments from people that have clearly not even checked if this feature is opt-in or opt-out. i much prefer to see people contributing rather than just criticising. if you really want to help, get involved and contribute (i'm aware that several writers here do actually contribute to foss). i am not going to speculate about the final form of telemetry, if any, that will end up in a future audacity release. many of audacity's features have been through multiple iterations before being suitable for general release, and i have better things to do with my time than speculate about what may or may not be - at least i think i have better things to do.",1,1,1,0.8304563164710999,0.9542394280433656,0.681308925151825,1.0,accept,unanimous_agreement
834364727,835,grabbing some popcorn [a link],0,0,0,0.9638137817382812,0.9751665592193604,0.9196162819862366,0.0,accept,unanimous_agreement
834368254,835,yikes wtf,-1,-1,-1,0.97523695230484,0.9915531277656556,0.9931312203407288,-1.0,accept,unanimous_agreement
834371298,835,"that's not surprising - most users will likely never look at the forums. a much better approach to this is to have the *software* ask users to fill in eg. a survey. that doesn't require telemetry, and the problem in this case was likely just that users didn't *know* that their feedback was being asked for. that should not be surprising, considering that the pr involves thousands of lines of code, included no explanation on what was going on, and the norm in the software industry is to violate user consent (which this proposal also does, through the use of dark patterns). that's an error on the side of the maintainers who have not communicated effectively, not an error on the side of the users who see a dark cloud descending over their favourite software. there's not really anything to ""contribute"" when the maintainers of the project have seemingly already decided to do this, without engaging with the community first.",-1,0,0,0.5397626161575317,0.6885060667991638,0.7168557047843933,0.0,accept,majority_agreement
834371638,835,"it's not about opt-in or opt-out, it's more about the fact that there are plenty more non-invasive and privacy-friendly (even self-hostable) analytics provider out there than google analytics.",0,0,0,0.901932418346405,0.9788426160812378,0.9473521113395692,0.0,accept,unanimous_agreement
834375157,835,"as others have stated, much of the concern is about the usage of google analytics and yandex, along with the violation of the gdpr. there are also concerns about security by introducing dependencies on libcurl and by doing downloads in the build scripts. if they ran their own telemetry servers, fixed the issue with the opt-in/opt-out dialog and removed the (poorly implemented) dependencies on things like libcurl people would have been much less upset. at this point though the cat is likely already out of the bag. the damage has been done and clearly the dev team has lost a lot of trust with the community. i suspect walking this back all the way and having a true discussion with the community it the only way to win back that trust. this should have never been a pr. this should have been an issue. it should have had discussion on the forums. there are so many mis-steps here. on fri, may 7, 2021, 09:05 steve daulton ***@***.***> wrote:",-1,-1,-1,0.6102916598320007,0.7922043204307556,0.6850932240486145,-1.0,accept,unanimous_agreement
834377549,835,"many people here agree with you in that telemetry can be really useful, myself included! the biggest problem is _how_ this feature is implemented. no data is anonymous nor can it becollected in an ethical way when sent over to proprietary telemetry platforms owned by giant advertising companies. but if the data is anonymous and sent over to an open-source platform you guys do have control over, and the data collected is sensible and will actually help improve audacity? then sure, collect away! this implementation proposed is not sensible. at the very least it feels rushed. and i think it is important to acknowledge that.",1,-1,-1,0.7262336015701294,0.6333030462265015,0.7792969346046448,-1.0,accept,majority_agreement
834380287,835,"""privacy by design"" and ""privacy by default"" are basic provisions of the gdpr! what is a tracking tool doing in an audio editor? it can only be used for user research. was the reaction to the whatsapp/facebook announcement not seen? users are switching to other solutions. hopefully we don't have to look for another audio editor....",0,0,0,0.5179086327552795,0.4700618982315063,0.4213068187236786,0.0,accept,unanimous_agreement
834381720,835,"i see two paths here, and both of them are equally disgusting. path one: you guys are selling your users' data to corporations, for money. path two: you guys are trying to go public, showing how many users you have to convince corporations to buy the software alongside its user base. am i wrong? there are many evidences that are provoking these ideas in my mind. in case i'm wrong, then why would yandex care of how many users are running audacity? why send data directly to google?",-1,-1,-1,0.9861960411071776,0.9818774461746216,0.9898889660835266,-1.0,accept,unanimous_agreement
834382007,835,"i think this response was carefully thought through but ultimately tone deaf. as has been repeated many times in this now unmanageably long thread, we, the community, are telling you, the developers, we don't believe this is an effective or appropriate measure. we understand that you want feedback about the development direction of the software, and we are telling you the forum should be enough. i am curious why you do not trust the direct feedback from your thousands of active users, to the point you feel you need automated tracking systems to replace that model? as for tracking in foss, if it is indeed useful it must also be considered how that data can be shared safely and fairly. what segment of users this data truly represents, and how compliance with the myriad of laws surrounding data protection can be abided. we, the community, have seen no planning or engagement with the community about how to approach these important issues. finally with the introduction of new corporate developers in recent times means __we don't believe you__ when you say this is for the god of the community anymore. this is not helped by the repeated statements from devs that this is optional and anonymous, when frankly the ""opt in"" dialog is already in violation of gdpr, and it is widely accepted by the security community that google analytics is not anonymous. you either fundamentally misunderstand the technology you are trying to implement or your are misleading the community. you cannot sidestep these issues",-1,-1,-1,0.6262041330337524,0.8907516002655029,0.921767234802246,-1.0,accept,unanimous_agreement
834385463,835,"yes, i would love to have my data collected by google analytics and yandex, processed by them and told that my data is completely anonymous and untraceable. sure thing! in a foss project :) 1:35 like to dislike ratio doesn't show a 'dislike', but an 'overwhelming majority voting against this bad idea'. the first thousand user's data may be used for development, but the hundreds of thousands of other users' data will be used for data processing and collection, not for enhancing any user's experience. get rid of this draft...",1,1,1,0.9868254065513612,0.990487277507782,0.9880473613739014,1.0,accept,unanimous_agreement
834399770,835,"i vote against this. telemetry shouldn't even be optional, it should be kept out of the code completely. hard no to telemetry. they all start with ""disabled by default"", then they become ""enabled by default"", then parts of telemetry become default, not an option anymore. and more will follow. so, no to telemetry. people have mentioned that the window that asks for opt-in for telemetry has a dark pattern to trick the user to click on the opt-in button. i'd say that's evil.",-1,-1,-1,0.9555912613868712,0.9852967858314514,0.9637722373008728,-1.0,accept,unanimous_agreement
834399813,835,"hey, the screenshot that has now been added to the pr message includes a [a link]. this isn't making things better. please listen to the community and everyone posting in here. this is not a change people will forget and will forever tarnish the reputation of audacity.",-1,-1,-1,0.9617435336112976,0.8007332682609558,0.978984534740448,-1.0,accept,unanimous_agreement
834402376,835,"i am a grad student in linguistics who used audacity infrequently in the past, but will probably has more uses for it in near future as i'm studying phonology (inter alia). i'll probably also end up teaching on this subject in a few years, so that's were my single comment in this thread will be coming from (i'll refrain from participating otherwise as this is already a huge thread, and back and forth bickering won't add much). first of all, i'll say as a student/researcher in phonology / phonetics, if this change goes through, i can not in good faith recommend audacity as a good tool for research to my peers and any students i might have. among others, i do not trust a now corporate project to stick to its word once tracking gets in to the software, and once that happens, we will ultimately face extra research ethics issues, as our science is based on human subjects who have rights to privacy we must respect. secondly, i want to parrot a comment i made on social media as to why i wouldn't trust you with keeping your word in the long run: my two cents.",0,0,-1,0.5849482417106628,0.8231877684593201,0.5201713442802429,0.0,accept,majority_agreement
834403823,835,how audacious!,-1,1,1,0.7043341398239136,0.894930362701416,0.8973608016967773,1.0,accept,majority_agreement
834404277,835,ah hell someone already made the joke,-1,-1,-1,0.984052300453186,0.9827560186386108,0.9848936200141908,-1.0,accept,unanimous_agreement
834404412,835,after 487 messages these jokes are getting old,-1,0,-1,0.9143317341804504,0.7974990010261536,0.9731778502464294,-1.0,accept,majority_agreement
834405519,835,you tried  ̄\_(ツ)_/ ̄,0,0,0,0.9842790961265564,0.8431088328361511,0.9727956056594848,0.0,accept,unanimous_agreement
834405825,835,"while skimming through the source code, this is what i discovered is the information that audacity will collect: - client uuid (apparently generated on a per-session basis) - your os name and version - audacity name and version - version number of wxwidgets - system language - when you start audacity - when you close audacity - when an exception/error occurs - when you import audio (file format, and whether import succeeded?) - when you export audio (file format, and whether export succeeded?) - when you apply an effect - when some kind of database error occurs? - when you open a window? - when you use the analyzer? - it also appears to store cookies? (note: this list is based on my own rough review, i didn't look at the first post before! i might also not be 100% correct, it was only a quick and dirty look at the code.) both google universal analytics and yandex metrica are used. it appears that the collected information is sent directly to google and yandex.ru (but not everything appears to be sent to yandex.ru). this also means they know your ip. knowing your ip, in combination with os name, version, audacity version, etc. could be used for fingerprinting, similar to browser fingerprinting. there is a chance you could be de-anonymized with this information. although i don't know if the information would be enough to fully de-anonymize someone, it is certainly in the realm of possibilities. also, this pr is called ""basic telemetry for the audacity"". this implies that is is planned to add even more telemetry features in future, thereby increasing the chances of de-anonymization. the fact that google and yandex are used for tracking doesn't make it any better. google has like a billion tricks up their sleeve to track you. i don't know about yandex, but they too are a big corporation. i conclude that all claims of anonymity are very questionable. however, with this change, audacity will lie to the user by claiming that this tracking is completely anonymous. this is almost certainly a gdpr violation waiting to happen. someone somewhere in the eu will probably install an audacity build for an institution but tracking was ""accidentally"" enabled and now they're in trouble. i've already read comments of people who will go full ""scorched earth"" mode and get rid of all audacity installation because they don't want that even just 1 bit is sent to google or other tracking companies. also, this is certainly a violation of informed consent, since it suggests anonymity while this claim stands on very thin ice. but let's not overlook the elephant in the room: overall, this change is obviously completely useless for the user and no user wants this. from the user point of view, this feature is always bad since it has a risk of de-anoymization. in other words, this is an anti-feature. the discussion of opt-in vs opt-out is a distraction. the only reasonable decision here is complete rejection.",0,0,0,0.969025194644928,0.9890037178993224,0.9757378101348876,0.0,accept,unanimous_agreement
834406945,835,"rip audacity, good night dear friend.",1,1,1,0.9698982238769532,0.964046835899353,0.9694069623947144,1.0,accept,unanimous_agreement
834409233,835,"feel free to have look at [a link] for ""clean"" telemetry, if it exists.",0,0,0,0.8666640520095825,0.9155542850494384,0.9667352437973022,0.0,accept,unanimous_agreement
834412328,835,and all this for an audio editor! why in the hell would an audio editor collect so many data if not for selling them to corporations in exchange of money?,-1,-1,-1,0.9799342751502992,0.9873813390731812,0.9908761382102966,-1.0,accept,unanimous_agreement
834414248,835,"want to be extra ethical? don't use psychological manipulations by making the ""send anonymous analytics data"" in blue. users will be more likely to click on it. it should be a white button instead and make the ""don't send"" button white. better yet listen to the people over here, people don't want this bullshit implemented. i liked audacity for a reason, because of its open source non-telemetry software which is unlike most other proprietary crap that has spyware bundled with it.",-1,-1,-1,0.7867636680603027,0.6739271879196167,0.9135201573371888,-1.0,accept,unanimous_agreement
834414513,835,"also hey while we're at it, can we talk about how this is going to negatively impact hundreds upon thousands of other computer users who don't know what github is and consequently also cant protest to this egregious privacy violation? cos that's also pretty cool, huh! small edit: i will say also that i'm not fully opposed to the idea of actually basic actually anonymous telemetry for the sake of actually helping development....but frankly, the reasons given are rubbish and as previously mentioned don't really _need_ telemetry. that, and the fact that you're so reluctant to move away from google/yandex despite multiple people giving you an absurdly long list of alternatives is ridiculous. get over yourselves and actually listen to your community.",-1,1,1,0.8984636068344116,0.533471405506134,0.4760727882385254,1.0,accept,majority_agreement
834424452,835,"i'm no enemy to telemetry in general and making in opt-in is the only valid option. having the buttons in a way to guide non-tech users towards opting-in is borderline, but may be ok. but using google analytics (or any other privacy-denying provider) for that purpose is about the worst idea any open source project can have...",-1,-1,-1,0.9798281788825988,0.8438278436660767,0.991879105567932,-1.0,accept,unanimous_agreement
834426433,835,i hope somebody makes a fork out of this honestly!,1,-1,-1,0.6882715821266174,0.990407168865204,0.7374196648597717,-1.0,accept,majority_agreement
834429007,835,"of course they can protest. there is a ""don't send"" button. the default happy flow right now is sending your data. many people unaware of what this means will thus give up their data. i'm sure the developers knew that while making it. this should be the other way around.",-1,-1,0,0.8394370079040527,0.8954737186431885,0.8729801177978516,-1.0,accept,majority_agreement
834430514,835,"i don't wish to see telemetry become a broadly accepted feature of open-source software. i am very disappointed that the project is going in this direction. please reconsider, since you're risking splitting the community by forcing a telemetry-free fork.",-1,-1,-1,0.98471200466156,0.9550144076347352,0.9886215329170228,-1.0,accept,unanimous_agreement
834431938,835,"that implicates they can only protest to this thing when it's already passed and been included in the software. not good enough, quite frankly.",-1,-1,-1,0.9527948498725892,0.9785263538360596,0.8542488217353821,-1.0,accept,unanimous_agreement
834432076,835,"as someone who tries to minimize my connections to google, i'd like to see the dialogue box explicitly mentioning that google is used for the telemetry, as that would make it a hard pass for me, and probably to others who in general wouldn't oppose sending *some* telemetry, but want to avoid google.",0,0,0,0.6211673021316528,0.8829113841056824,0.926536738872528,0.0,accept,unanimous_agreement
834432178,835,i imagine most of linux distros will have this option disabled - which means that vast majority of their users will not show up in statistics. making any os-specific decisions on such biased data will lead to worse linux support in the long run. (especially in the event of corporate interests taking initiative),-1,0,0,0.5364063382148743,0.9399275183677672,0.8450171947479248,0.0,accept,majority_agreement
834439804,835,"another case of a greedy company screwing over their users for making a profit. as other people pointed out, this seems like a move to count the number of users for promoting the company. it is just sad.",-1,-1,-1,0.9836893677711488,0.9861345887184144,0.992774248123169,-1.0,accept,unanimous_agreement
834440020,835,"additionally, it would mean that windows users would always receive a build of audacity with telemetry baked in from the official channels. windows users are not accustomed to compiling software from source. if audacity ever decides to make it this feature mandatory, there is no one there to distribute binaries with this feature patched out.",0,0,0,0.9613341093063354,0.976150393486023,0.9685844779014589,0.0,accept,unanimous_agreement
834445653,835,automating this with ci (after some initial setup) is trivial. that would be the main reason for a fork. so people would download librecity or whatever instead of audacity.,0,0,0,0.8071128726005554,0.9664049744606018,0.9799596071243286,0.0,accept,unanimous_agreement
834446879,835,"am i reading things wrong, or did you just change this after people noticed and called you out? looks to me like the original default was enabled: [a link] usually when a company acquires a popular software project they wait a lot longer to start screwing it up. hats off to you for hitting the ground running, i guess? seriously, how could you possibly have expected the news that one of the most popular foss projects was going to implement google analytics (again--originally enabled by default) was going to be accepted any other way? edit: answer is i'm reading this wrong [a link] edit edit: ...as least as far as the timing on the default change. i stand by my rush-to-screw-up opinion.",-1,-1,-1,0.9840654730796814,0.960019588470459,0.8901781439781189,-1.0,accept,unanimous_agreement
834447689,835,"data collection is absolutely crucial in software development. google analytics doesn't just collect data though, it takes your soul with it. don't ruin your reputation further.",-1,-1,-1,0.4628131091594696,0.8350434899330139,0.7895102500915527,-1.0,accept,unanimous_agreement
834449458,835,if you look in the actual pr history that change was made before this pr had any related comments on it. most likely was just a default in development and changed for the actual release.,0,0,0,0.9862343072891236,0.9896820187568665,0.985697865486145,0.0,accept,unanimous_agreement
834450195,835,tracker in foss... this not normal,-1,0,0,0.8789767026901245,0.5204840302467346,0.9834867715835572,0.0,accept,majority_agreement
834451026,835,"i think one issue is that not everyone may be aware of the code. i, and many others, can adjust fine; i use some ruby scripts or just oldschool gnu sed to automatically eliminate undesired code, then compile from source. i do this, by the way, to automatically remove ""code of conduct"" files too since they are not relevant (they are not part of the licence, for example, thus irrelevant propaganda). when you go to the audacity homepage, though, you can read this, among other entries: ""developed by a group of volunteers as open source."" of course we can ask what exactly is meant with ""open source"". is ethics included? the audacity comes with a code_of_conduct.md by the way, yet audacity is currently stating that ""telemetry"" is ethically and morally acceptable. well, call me strange, but i find tele-sniffing and tele-spying on users much more problematic than a ""code of conduct"" which is already irrelevant to me (since it is not part of the licence, thus it can not be enforced). i would highly recommend the audacity team to reconsider. it is clear that this is done for revenue-driven purposes and i think people can somewhat understand different strategies used by different organization in this regard, which is understandably a problem with many open source projects. i am all in favour of state-driven aid as well (provided that there are verifiable means to see that this benefits the taxpayer too), but sneaky-tele-spying is just morally and ethically inacceptable. the downvotes are very clear, so i think the audacity team should completely reconsider the approach. i highly recommend dropping that idea. see the libreoffice team reconsidering their approach in regards to two-class apartheid (""business"" versus ""regular"" users) a few months ago as an example to better the situation. and see the qt project for an example how to worsen the situation (the kde devs are in denial mode right now but this can not be maintained in the long run either; nobody wants to be penalized up to 12 months before patches are available for the open source community. the kde devs have not understood this yet.)",0,0,0,0.9241146445274352,0.9600874781608582,0.941360354423523,0.0,accept,unanimous_agreement
834451187,835,"i'm not as worried about analytics as some here - if things devolve, there'll be a pull request to review. i do have two concerns with the pull request: - i agree that the screenshot should be more clearly opt-in - the ""dark pattern"" should become neutral, perhaps with enabling analytics requring a checkbox to enable the ""send data"" button + a button click. that would make opting-in a positive decision. - i am concerned about shipping a private `libcurl`, even unpatched. `libcurl` releases frequently and has had cves. i don't think audacity wants to be in the business of tracking `libcurl` and being forced to re-release audacity on `libcurl`'s schedule. make `libcurl` a dependency, and check for a minimum version. this loose coupling will ensure that `libcurl` is as up-to-date as possible; whichever updates first will be used. `libcurl` has been very good about not breaking apis, so this is a low risk strategy, there is nothing (on any os) that prevents one library (dll) from depending on or dyamically linking another. i don't understand why you need two analytics services. depending on where a user lives, (s)he may be more worried about one or the other. but both gives the worst of both worlds. i'd suggest settling on one. and you might satisfy some concerns if you allowed selection of what is collected. eg. a checkbox for ""census data only"" and another for ""usage details"". [edit: fixed two typos.]",-1,0,0,0.781378984451294,0.8687347769737244,0.6407842636108398,0.0,accept,majority_agreement
834451350,835,"also we all know as users that ""default off"" will eventually become ""always on"" as muse group slowly gets their tentacles all over it. free isn't free if your data is being mined.",0,0,0,0.9548861384391784,0.8605693578720093,0.9437180757522584,0.0,accept,unanimous_agreement
834457819,835,"if you hosted the telemetry collection server yourself, i might opt in. sending your users' data to a third party is a hard nope.",0,0,0,0.8173661231994629,0.8045282959938049,0.8235577940940857,0.0,accept,unanimous_agreement
834461501,835,"audacity is my go-to tool for whenever i need to make a very quick edit to some audio file that i have at hand, but i have one improvement for this pr: close it. **scrap the entire request.** don't even think about getting this merged in the future. i want _my_ privacy to be respected.",-1,0,-1,0.876192033290863,0.7981339693069458,0.9482420086860656,-1.0,accept,majority_agreement
834461530,835,"i'm happy to voice my support for this telemetry. i have experienced what it's like to be on the other side, developing an application and having access to telemetry, and the benefits are huge. it is not a privacy concern in my opinion, the data being collected is as anonymous as the data being collected about all of us here right now every time we visit a website. there is frankly some paranoia going on in this thread and i suspect this is a ""vocal minority"" venting. more than 99% of audacity users probably don't even have a github account to comment here, let alone care this much about telemetry. the points you raised steve about the uses of this anonymous data are great examples of why telemetry is useful. being able to see real time data on how your changes are making a difference to users, positive or negative, is very valuable and a great tool for a ux focused development approach. i'd also add you're right about how difficult it is to get feedback from users. lots of people in this thread have talked about surveys and asking for feedback on forums, but almost no one ever does that and those who do are usually a vocal minority, and it's best not to let the vocal minority drive the direction of development. those talking about this being 'data mining' for money are a few fries short of a happy meal. no money will be made from this kind of telemetry. i don't know how the average person here could even think that information about how often an error occurs or how long the average audacity session is, or which audio effects are the most popular, could be worth anything to anyone. it feels like a lot of people here are just automatically making the connection between harmless anonymous opt-in telemetry, and facebook style massive data mining operations for advertisers. also thankyou for your great work on audacity over the years.",1,1,1,0.9101306796073914,0.9856849908828736,0.9834596514701844,1.0,accept,unanimous_agreement
834463835,835,"please, do not do this.",-1,0,-1,0.9445868134498596,0.6004219651222229,0.9770484566688538,-1.0,accept,majority_agreement
834466136,835,"the fact that with all this backlash, the new company is still ""forcing"" this pr and is not willing to listen the community is one of the most worrying parts. this project got here thanks to the contribution of a lot of people, and hearing what they had to say. they completely turn their backs on the community in like 4 days of developing.",-1,-1,-1,0.9579078555107116,0.942943274974823,0.9799088835716248,-1.0,accept,unanimous_agreement
834466207,835,a completely useless pr for a feature which nobody asked for. kindly close it.,-1,-1,-1,0.9450743794441224,0.9755606651306152,0.993061363697052,-1.0,accept,unanimous_agreement
834466896,835,please dont turn oss into open source spyware,0,0,-1,0.6888104677200317,0.974153220653534,0.9040302634239196,0.0,accept,majority_agreement
834469971,835,"i will tell you they won't care. with the money they're going to get by selling users' data, who needs morals and _**audience**_? (possible name for a future fork intended)",-1,0,-1,0.659011721611023,0.7175143361091614,0.6208156943321228,-1.0,accept,majority_agreement
834471396,835,"this time could be far better spent doing anything else than implementing telemetry. at least it's optional, but please focus on cleaning up audacity's ui instead, it's quite daunting to newcomers.",1,-1,-1,0.5027446746826172,0.8562658429145813,0.8683422207832336,-1.0,accept,majority_agreement
834471750,835,"i think others have expressed my views to you in a better way than i could right now. nonetheless, especially after your last post here, i think you should reconsider especially since none of your messages addresses the legal standpoint, such as gdpr for example, where consent is explicitly required and afaik, no mechanism is present to handle such a thing in your code. to be honest, and i know that most people in the floss communities i contribute to, would just stop using a floss project that might contain such ""telemetry"" even before it is implemented. in other words, unless this draft is abandoned in the near future, you will make a lot of users run away from your audacity. this would be a shame, especially since this project is so good and well-established. i hope you will take the right decision.",-1,0,0,0.5006846785545349,0.910442352294922,0.8545156717300415,0.0,accept,majority_agreement
834471986,835,waiting for a fork to come up :trollface:,-1,0,1,0.9064722061157228,0.9593129754066468,0.8977665901184082,,review,no_majority_disagreement
834472156,835,"that's why they're adding telemetry, to get useful information to help drive ux improvements?",0,0,0,0.983089804649353,0.98762309551239,0.9932435154914856,0.0,accept,unanimous_agreement
834473638,835,"you could just get useful information by asking for feedback instead of tracking user activity. have a ""send feedback"" button, reach out to users, etc. there's no need to turn audacity into spyware.",0,0,0,0.9695499539375304,0.9866132140159608,0.9830116033554076,0.0,accept,unanimous_agreement
834473787,835,"no, no and no. don't do this.",-1,-1,-1,0.9580598473548888,0.6828604340553284,0.9457582235336304,-1.0,accept,unanimous_agreement
834474575,835,"good night, audacity. either i will conserve the version i have got, or i will deinstall.",1,1,1,0.969985008239746,0.99042809009552,0.9696545004844666,1.0,accept,unanimous_agreement
834477281,835,"if the future advertisers, they're going to sell our data to, wanna know about the user count... spoiler alert: it decreases drastically in this very moment.",0,-1,-1,0.5751898884773254,0.6700156331062317,0.8453837037086487,-1.0,accept,majority_agreement
834477558,835,well this is bad. a legend falls.,-1,-1,-1,0.9851869940757751,0.9881126284599304,0.9929664134979248,-1.0,accept,unanimous_agreement
834477617,835,"majority of users completely ignore any request for user feedback, and the small number who don't, usually try to use it as a means of voicing their strong opinions to affect change in the direction of development, making their feedback less useful. even when users are being honest and reasonable with their feedback, they usually can not provide the kind of detailed useful information that telemetry can offer.",0,0,0,0.5365005135536194,0.7956917881965637,0.5273939967155457,0.0,accept,unanimous_agreement
834478530,835,"except that, it's actually a data sellout to google/rest of advertisers/nsa and yandex/russian government, can't believe you say facebook is data mining a lot of data while not acknowledging that google does it for the same scale, if not larger",-1,0,-1,0.537054717540741,0.6393206715583801,0.9642245769500732,-1.0,accept,majority_agreement
834479721,835,which advertisers do you think are going to buy information on which menu items are being clicked the most and which error messages are the most common? think about this. this data wouldn't even be useful to advertisers.,0,0,0,0.953923523426056,0.8731011152267456,0.7394675016403198,0.0,accept,unanimous_agreement
834479968,835,"adding the telemetry is **fine**. but relying the data handled to the third party, and even big tech company operating from advertising like google is **not fine** and yandex too, even i dont know how good their privacy practice is. also dont forget the bad ui decision such as possible ""dark patterns"" in the screenshot dialog too. not to mention the legal stuff on gdpr.",0,-1,-1,0.6367751955986023,0.739351212978363,0.5625765323638916,-1.0,accept,majority_agreement
834480410,835,"seriously, just talk to your users. build software that people _want_, not software that makes a number on a dashboard go up.",0,-1,0,0.5425829887390137,0.9230130314826964,0.5223807096481323,0.0,accept,majority_agreement
834481571,835,yooo its time to never update my audacity again,-1,-1,-1,0.7589117288589478,0.942462921142578,0.9467355608940125,-1.0,accept,unanimous_agreement
834481758,835,"what ""detailed useful information"" could you get from storing client uuids and making network requests every time a window is opened?",0,0,0,0.9867700338363647,0.9878621101379396,0.9909065961837769,0.0,accept,unanimous_agreement
834485502,835,"don't make me firewall yet another application. users shouldn't have to worry about every application on their computer chipping away at their bandwidth caps, especially not an audio application.",0,0,-1,0.5575801134109497,0.6232174634933472,0.8155166506767273,0.0,accept,majority_agreement
834485544,835,"welp, to /dev/null audacity goes, ardour is now the only music software worth using on linux.",0,0,0,0.92316997051239,0.913767635822296,0.9600949883461,0.0,accept,unanimous_agreement
834485946,835,"that's an important point. there will be distro maintainers who will consider disabling this compile flag and so no telemetry data will come from those distros. if the audacity developers will base their focus on this telemetry data, they might think that no one uses the software on those operating systems and they might be inclined to just ignore bug reports or seize to support it entirely. as some distro maintainers will forsee this problem, they will be inclined to not disable this flag because it might negatively affect the support of their platform.",0,0,0,0.8537715673446655,0.8875973224639893,0.9566376209259032,0.0,accept,unanimous_agreement
834489299,835,"that doesn't make any sense. the benefits of telemetry are fairly limited, if not against the whole point of free software. and also it's not true as most contributors send a full detailed log of what's wrong.",-1,0,-1,0.7822996973991394,0.6289998888969421,0.5242385268211365,-1.0,accept,majority_agreement
834490625,835,humanity and its consequences have been a disaster for humanity.,-1,0,-1,0.9622183442115784,0.8758299350738525,0.9786928296089172,-1.0,accept,majority_agreement
834491474,835,"i think there are some inaccurate assumptions being made here, such as: a) assuming the majority of users for audacity are on linux, far more likely that the majority are on windows. b) drastically over estimating the number of people who can / would compile software from source code. c) drastically over estimating the number of people who would care about telemetry so much that they would compile a fork of audacity from source just to remove telemetry which is already opt-in.",0,0,-1,0.8278815746307373,0.8702734708786011,0.669858455657959,0.0,accept,majority_agreement
834492454,835,audacity has worked just fine as is for 20 years. there are many venues to report bugs. seeing how many midi files are people exporting or what os are they using is not going to help you fix any issues. you still have time to turn back the ship before it turns into titanic.,-1,0,0,0.6967419385910034,0.8619264960289001,0.8534697890281677,0.0,accept,majority_agreement
834495717,835,"i'm starting to become fearful that viable alternatives for telemetry other than the kind that gives google/yandex data are being buried in the sea of messages. is there any way that such alternatives can be organized into one neat list so that alternatives could actually be explored? i won't disagree with the mere concept of telemetry being included, given it's **always** opt-in, but i will fight back against the notion of willingly handing companies such as google more data, and i know for a fact alternatives have been offered.",-1,-1,-1,0.9771761894226074,0.9368133544921876,0.9869818091392516,-1.0,accept,unanimous_agreement
834495890,835,meanwhile you are just underestimating us that we will not make a fork of it and not caring about telemetry at all.,-1,0,-1,0.8842989206314087,0.6421039700508118,0.9196826219558716,-1.0,accept,majority_agreement
834496459,835,"gdpr applies to data that identifies a person or can be uses to identify a person with reasonable certainty. unless the telemetry collection services track the source ip address, this does not seem to be the case here as none of the listed info relates to a person.",0,0,0,0.9838391542434692,0.9899930357933044,0.9929308891296388,0.0,accept,unanimous_agreement
834498496,835,"as someone in this thread said few hours ago, either google or devs are able to ""decrypt"" pseudonymous ids ga gives so uhhh, thats gdpr breach",0,-1,0,0.5099711418151855,0.9844016432762146,0.9901700615882874,0.0,accept,majority_agreement
834498662,835,what's the point in creating a fork just to remove a feature that is already off by default? that's like creating a fork of vlc to remove the option to have a custom skin because you don't plan to use one.,0,0,0,0.9579565525054932,0.9851940274238586,0.5704789161682129,0.0,accept,unanimous_agreement
834499348,835,there's a point in showing opposition to whatever dumb decision devteam decides to make,-1,-1,-1,0.6787176728248596,0.5235418677330017,0.9894456267356871,-1.0,accept,unanimous_agreement
834499445,835,have you looked at [a link] as this seems to be what you want you want and would then remove google and yandex which seems better and you can even host it yourself if i recall correctly,0,0,0,0.9791855216026306,0.821509063243866,0.9894990921020508,0.0,accept,unanimous_agreement
834499743,835,i'll make the logo!,0,0,0,0.5448354482650757,0.8247125148773193,0.967780828475952,0.0,accept,unanimous_agreement
834500565,835,"the lack of support is already the case also without telemetry, which makes it all the more disappointing that a topic such as this receives so much attention while there are *actual problems to fix* with this application and its build system. i would love to see improvements on that.",-1,1,-1,0.9471315741539,0.6870788931846619,0.9725367426872252,-1.0,accept,majority_agreement
834500614,835,"and that's not mentioning the distro mantainers that will just outright remove audacity from the repos, most likely to do that is debian, then they will upload their audacity fork without telemetry, and other distros will follow...",0,0,0,0.960813581943512,0.9480018615722656,0.97773414850235,0.0,accept,unanimous_agreement
834500997,835,"in 3.2 you will switch it on by default in 3.3. your tracking will try to search for files on our discs in 3.4. we will get annyoing advertisements from 3rd parties, probably with security leaks. any further questions? audacity is dead for me if just one single line of tracking code is inside. it doesn't matter if it's ""optional"" for a small period of time.",0,-1,-1,0.9440840482711792,0.5883944034576416,0.5491875410079956,-1.0,accept,majority_agreement
834502158,835,"this is a silly comparison. one is harmful on the long run, while the other is just an aesthetic thing. also, a certain group called 'suckless' would like to know your position.",-1,-1,-1,0.982172667980194,0.9893757104873656,0.990535318851471,-1.0,accept,unanimous_agreement
834505082,835,"but why? no, please.",0,0,-1,0.6250499486923218,0.789785623550415,0.9804468154907228,0.0,accept,majority_agreement
834507358,835,also they even wanted telemetry to be on at the first place. ![a link],0,0,1,0.7549043893814087,0.8975085020065308,0.7933378219604492,0.0,accept,majority_agreement
834513451,835,"they have been lying repeatedly throughout this entire process. i have concluded in several comments above, that the only meaningful reason to collect the types and volume of data proposed in this pr is for constructing a monetization strategy not supporting feature development. calling this conclusion paranoid ignores that the developers in question have a history of this exact behavior with musescore.",-1,0,-1,0.7996461391448975,0.7764127850532532,0.5997861623764038,-1.0,accept,majority_agreement
834516456,835,or just don't add telemetry :),1,1,0,0.7290387153625488,0.9750055074691772,0.9901182055473328,1.0,accept,majority_agreement
834516747,835,"thats not enough, either they use self-hosted telemetry, or don't use it at all",-1,0,0,0.7072363495826721,0.9050130248069764,0.8575168251991272,0.0,accept,majority_agreement
834520264,835,"# ok poll time, lets find out what people really want: [a link] i dunno how to make a poll on github",0,0,0,0.5577976703643799,0.610127866268158,0.9615933895111084,0.0,accept,unanimous_agreement
834520649,835,"are you trying to get people to stop using it, or just encouraging people to fork?",0,0,0,0.5739583373069763,0.9415205121040344,0.9510619640350342,0.0,accept,unanimous_agreement
834521293,835,"if this is implemented there is a very real danger that i hope the team avoids: * powers users (those that are more likely to be both privacy and technically conscious who may choose to disable telemetry) may use certain obscure features more than other users * the analytics will, by dint of the above caveat, not reflect features used more often by power users * this runs the risk of management choosing to cut features because they see them as not being used, and therefore not worthy of the time required to maintain them i have seen other projects fall into this trap, so i hope the audacity team is aware of this and knows how to avoid it.",-1,-1,0,0.5467873811721802,0.5126005411148071,0.5683012008666992,-1.0,accept,majority_agreement
834522300,835,"just the fact that despite after 2500 dislikes and more than 500 comments all saying we **don't** want telemetry, they don't take action says long enough about what kind of people we are dealing with. if we can't fix their minds then there is no more reason to even try to fight against.",-1,-1,-1,0.8788650035858154,0.7819401621818542,0.962160050868988,-1.0,accept,unanimous_agreement
834525238,835,"i don't understand the outrage. what they're doing is perfectly reasonable and (i think) in good faith. they just want to have data to improve audacity, and the way they are doing it is the best way. data is useful, there's no denying that. knowing how your users use the software is vital to knowing what to even improve, without it, you can only guess or hear the complaints from a minority which may or may not represent the actual problems of the software. take into account, this data is **anonymous** and **opt-in**. **plus** this is only enabled if you compile from source with the intention of enabling it, most repositories will not even have this in the binary. there are other floss projects which do the same, kde comes to mind, it also has opt-in telemetry. telemetry in itself isn't bad, it's only bad if it doesn't respect your privacy, and if you give consent to this, i don't see how your privacy is getting violated. also, audacity is open source, if this actually gets out of hand, a fork will exist with all the crap removed. there's no reason to be alarmed.",-1,1,-1,0.8422805666923523,0.7233196496963501,0.82847660779953,-1.0,accept,majority_agreement
834528543,835,if they don't quit with the idea of telemetry then a hostile fork will be made. splitting the community. is it that what you want audacity?,-1,-1,-1,0.8061473369598389,0.6840110421180725,0.8756207823753357,-1.0,accept,unanimous_agreement
834529402,835,"as a developer i know how valuable knowing some numbers is. and i usually opt-in non invasive telemetry.. but this whole pr is somehow shady.. the narrative is changing, clarifications that should've been there are just being added and the choice of yandex and google is just sloppy",-1,-1,-1,0.9784221649169922,0.9789380431175232,0.9818364977836608,-1.0,accept,unanimous_agreement
834531219,835,"they are just waiting for this shitstorm to die down and resume operation aftewards. weekend is coming, so i guess on early next week we get a more definitive answer.",-1,-1,-1,0.9620432257652284,0.9275429248809814,0.9787197709083556,-1.0,accept,unanimous_agreement
834531610,835,"i think the main source of outrage is the telemetry provides they are using, it really wouldn't be too hard to process telemetry on their own servers, but instead they are planning to sent this data to *google* of all people, only facebook would be a worse choice",-1,-1,-1,0.9794924259185792,0.9278032779693604,0.9792611002922058,-1.0,accept,unanimous_agreement
834531779,835,it will not be anonymous until they switch to a self-hosted telemetry service and stop collecting ips.,0,0,0,0.8992327451705933,0.9878596663475036,0.9847550988197328,0.0,accept,unanimous_agreement
834532416,835,"wrong, some of us are in agreement with the need for telemetry, so you're going to have to go through the comments and count up the positive/negative comments.",-1,-1,0,0.7972725033760071,0.677643358707428,0.8774154782295227,-1.0,accept,majority_agreement
834535795,835,i'm with you on that. i don't get it either. it feels like a lot of paranoia in this thread.,-1,-1,-1,0.9524177312850952,0.957740306854248,0.8059274554252625,-1.0,accept,unanimous_agreement
834539094,835,we have come to a point where refusing being tracked and analytics is considered paranoia now... really sad state of affairs :(,-1,-1,-1,0.991835355758667,0.9909590482711792,0.99625164270401,-1.0,accept,unanimous_agreement
834539396,835,so i take you did not read much of it.,0,0,0,0.8928959965705872,0.8793929815292358,0.9710173010826112,0.0,accept,unanimous_agreement
834539478,835,"mind insomnia you and a couple of others are individuals standing against dozens. i respect you for standing by your views in such a public forum, however you should acknowledge the consensus stands against you.",-1,0,0,0.4689944982528686,0.7494823336601257,0.5051954388618469,0.0,accept,majority_agreement
834539822,835,"the edited op makes it even more obvious that this is, at best, trying to solve a problem that doesn't exist, at least not nearly to the degree that would make it worth entering into a deal with the google. i remember a couple years back when gzdoom had telemetry. no google nonsense, just a very narrow question of how many people were still using some really old oses and graphics hardware that the devs were struggling to keep supporting. these struggles had been voiced and well known for quite some time before the decision had been made. *once that question was settled the gzdoom team got rid of the telemetry.* i don't see that kind of thinking with this pr. instead, it just looks like someone wants to add telemetry to this because they think it's a good idea but without any immediate use case in mind, and then tried to come up with justifications for it.",0,-1,0,0.7705783843994141,0.6541715264320374,0.6669808030128479,0.0,accept,majority_agreement
834540771,835,the pop-up could be a lot clearer: [code block],0,0,0,0.975772738456726,0.9875605702400208,0.9902443885803224,0.0,accept,unanimous_agreement
834541213,835,"simple, lack of transparency from the start + iffy choice of what to collect and absolutely unnecessary choice of provides like google and yandex = outrage",-1,-1,-1,0.9806818962097168,0.9856945872306824,0.994016408920288,-1.0,accept,unanimous_agreement
834542251,835,# have your say lets find out what people really want: [a link] yes i see the irony in collecting statistics on if people want statistics collected.,0,0,-1,0.5735211372375488,0.7923703789710999,0.7059154510498047,0.0,accept,majority_agreement
834543264,835,"as-per gdpr (at least), they must do that and more (consent, etc.).",0,0,0,0.9728681445121764,0.9888760447502136,0.9915186762809752,0.0,accept,unanimous_agreement
834543591,835,"this is toxic mentality if they do, because it means they don't care about the transparency of the decisions and are no different than big companies. instead, what they could and should do, is discussing these decisions in forums and with people, not decide by themselves what it's best for them.",-1,-1,-1,0.9678364396095276,0.7607758045196533,0.973672330379486,-1.0,accept,unanimous_agreement
834543636,835,i refuse to be tracked by your survey! you'll just sell my data to advertisers!,-1,-1,-1,0.9638455510139464,0.9704182744026184,0.986372172832489,-1.0,accept,unanimous_agreement
834543942,835,": this is a good start, with 3000 people stating they are disapproving, confused or concerned it seems that the initial proposal was less than well considered. strictly optional for who? implementing an opt-in/opt-out dialog indicates that by default you are expecting this code to be compiled into the application this seems rather disingenuous. the vast majority of users do not compile this code themselves. they get it from an upstream that compiles it for them, therefore the average user will have no way of knowing if this code is compiled into the application until they start it. and this is a valid use case... however, having a valid use case doesn't make the jump to using api's from privacy disrespecting third parties an obvious solution. having identified the need and use case the obvious next step should have been to start a conversation how to best implement this feature, and make certain identify: - impact of the feature on developers - impact of the feature on users - how to safeguard user information - what is the chain of custody for the information being gathered - what is the life cycle for the information - what features will be available to users to see the information that is being gathered - what types of transparency are the developers going to maintain around this information cross-site tracking is not necessary for google to take the information supplied to them and use it against other sources they gather information from in order to fingerprint the user. this kind of data mining operation is precisely what they have been known to do for years now. this is more than enough information for google to use it in their mining operations. did you consider anything else? i did a quick thought experiment about other common applications that i know that gather information. what did i come up with? well, i'm using firefox, and i know they gather information all the time. so, i did a quick double check to see what their documentation / statement is around the information they gather. they are very clear and transparent: [a link]. i note they have some very carefully stated guidelines surrounding the gathering and use of this information: your proposal is that you have an on / off switch, with no indication of: 1. where the information is stored? 2. how long the information is stored? 3. what (if anything) will be done to anonymize the information? 4. who will have access to the information (including any third parties)? 5. if the user turns off the option later, when will their information be deleted? speaking to #3 above, it's definitely necessary as you have stated: the simple faq style document from mozilla addresses a number of these concerns, and links to more in depth information regarding the gathering of this information and all of the technical details of how it is used. this is the kind of transparency that needs to be included when addressing this kind of situation. one of the nicer things about mozilla's implementation is they have a whole, publicly available portal for information surrounding the telemetry they gather: [a link] - nothing in your proposal suggests that you would implement anything similar. also, very noteworthy: mozilla has a **whole open source [a link]** for this application. this is the kind of implementation that should have been considered before even one line of code was written to try to implement this., the big takeaway here, is that as a developer you have misunderstood the practice for implementing a large new feature. from a technology standpoint it is simple. the hard part is the **policy, procedures and processes** that are needed to support this feature. the code is the easy part, it's working with the whole community that is difficult, but it is absolutely critical.",1,-1,1,0.85140460729599,0.6871666312217712,0.5303176641464233,1.0,accept,majority_agreement
834545807,835,as they're obviously do not take the concerns of thousands of their users serious - waiting for forks to come. get ready to become the openoffice of audio software.,-1,0,-1,0.6347670555114746,0.8333671689033508,0.9250799417495728,-1.0,accept,majority_agreement
834546040,835,":grinning_squinting_face: very good. yes straw poll collect your ip address for the purposes of ensuring you can't vote twice. however when creating the poll i disabled all other cheat tracking, including cookies. unlike audacity at least straw poll is upfront about their what data they actually collect.",1,1,1,0.9786894917488098,0.934096336364746,0.9630373120307922,1.0,accept,unanimous_agreement
834546723,835,"i think it's useless keep going. it's clear they won't change their mind, i will stay with my idea that the telemetry has been added to sell data to corporations and maybe one day sell the whole audacity software, team and users. now, everybody is free to believe what they want to believe and keep going, just keep in mind you won't get listened.",-1,-1,-1,0.971843719482422,0.5503867864608765,0.9783824682235718,-1.0,accept,unanimous_agreement
834546874,835,"plenty of major foss projects get by without telemetry, this isn't necessary in any way. even if it were, ga isn't the way to go about it. anonymous it ain't. pseudonymous is the word here, the data it sends seems to be easily traceable to a personal profile on google's end. opt-in and compile flag looks to have been last minute changes just to try to appease the crowd, one being a gdpr requirement in the first place and the second being a very fragile line of security. forking is the last line of defense against stuff like this. if arguing over it gets it away from being merged upstream, that's in the best interests of (i think) almost everyone involved.",-1,-1,0,0.7049953937530518,0.883625328540802,0.6110779643058777,-1.0,accept,majority_agreement
834549915,835,":lol: apologies for being off-topic, but did you read this on the strawpoll.me site? ""fandom and our partners use technology such as cookies on our site to store and collect information from your browser to personalize content and ads, provide social media features, and analyze our traffic.""",1,-1,1,0.9434669613838196,0.8131551742553711,0.9135113954544068,1.0,accept,majority_agreement
834550278,835,make it cute and i'm in!,1,1,1,0.9782987833023072,0.9944215416908264,0.9926678538322448,1.0,accept,unanimous_agreement
834550735,835,[fork name]-chan will be the mascot! (please i hope the name will be 'audience'),1,0,1,0.7971248030662537,0.5203056931495667,0.9390485286712646,1.0,accept,majority_agreement
834551069,835,"things i learned in this disrespectful and in its execution illegal pr: - audacity shall be dead to me, time to install ardour. - time to uninstall musescore and stop composing music until i managed to save the ~500€ for finale. fuck this.",-1,-1,-1,0.989965558052063,0.9891034364700316,0.9943524599075316,-1.0,accept,unanimous_agreement
834551144,835,yea websites be shitty. but there are tools and plugins and browser features for protecting yourself online. maybe you see why we don't want these same technologies in a native app where no such protections exist?,-1,-1,-1,0.9891102910041808,0.9871436953544616,0.9691587686538696,-1.0,accept,unanimous_agreement
834552120,835,also this: strawpoll does literally the very thing this thread is against.,-1,0,0,0.8146749138832092,0.9539602994918824,0.8612688779830933,0.0,accept,majority_agreement
834554004,835,wait until you hear what github collects wait until you hear what data github collects!,0,0,0,0.9493489861488342,0.8057029247283936,0.9314523935317992,0.0,accept,unanimous_agreement
834554577,835,y'all realise that every time you comment on this you bring more people to my poll i have got over 250 votes,1,0,1,0.4332394003868103,0.6519820690155029,0.5095832943916321,1.0,accept,majority_agreement
834559389,835,"with a highly biased sample size of mainly people who already agree with you. but it's besides the point. the point is, strawpoll's user tracking is actually worse than what audacity is proposing. a) it's not even possible to opt out of strawpoll's tracking b) strawpoll is actually sending that data to advertisers",-1,-1,-1,0.906559407711029,0.5967131853103638,0.8792566657066345,-1.0,accept,unanimous_agreement
834561165,835,are we making a microsoft audacity now? come on.,0,0,0,0.976427435874939,0.9189470410346984,0.8897514939308167,0.0,accept,unanimous_agreement
834561184,835,"this is getting kind of ""off-topic"" i feel.",-1,0,-1,0.8811756372451782,0.7366042137145996,0.8639603853225708,-1.0,accept,majority_agreement
834561258,835,just to make sure to bump this question from doesnt get dumped because of the conversation,0,0,0,0.9207550287246704,0.94847309589386,0.834676206111908,0.0,accept,unanimous_agreement
834561914,835,so what your saying is.... statistics are a bad way of judging how the community as a whole feels about your software?,-1,-1,-1,0.9344673752784728,0.9651099443435668,0.937661111354828,-1.0,accept,unanimous_agreement
834562384,835,"i don't use strawpoll every day to do my job. strawpoll doesn't care about my usage patterns other than the 3 seconds i took to use their site. i have privacy badger and ublock origin installed, which thwarts most of what they try anyway. none of that can be said for audacity. you're arguing a moot point.",-1,-1,-1,0.9456615447998048,0.9509625434875488,0.953681707382202,-1.0,accept,unanimous_agreement
834564722,835,are you realizing that you have more dislikes than likes in your posts? the strawpoll is not biased in any way i see.,0,0,0,0.7238380312919617,0.8121064305305481,0.6135628819465637,0.0,accept,unanimous_agreement
834567336,835,the damn weebs,-1,-1,-1,0.981165051460266,0.986348271369934,0.9898869395256042,-1.0,accept,unanimous_agreement
834572123,835,"# ok poll time, lets find out what people really want: [a link] 400 responses and counting",0,0,0,0.5658265948295593,0.5874825716018677,0.8009529709815979,0.0,accept,unanimous_agreement
834573904,835,you're making a poll asking whether it's okay to send data to google using a site that sends data to google?,0,0,0,0.899999737739563,0.9880931973457336,0.9858605861663818,0.0,accept,unanimous_agreement
834573980,835,"i don't know why people are acting as if this is new, musescore's website has used yandex for telemetry since at least january 2019. [a link]",0,0,0,0.665057361125946,0.8761276602745056,0.6377837061882019,0.0,accept,unanimous_agreement
834574071,835,you dont need to keep reposting this,0,0,0,0.8239175081253052,0.852647602558136,0.967276096343994,0.0,accept,unanimous_agreement
834574758,835,fine :p i will put the results up when it slows down enough,1,1,1,0.9581179022789,0.9636756777763368,0.9894530773162842,1.0,accept,unanimous_agreement
834575178,835,i would wager because audacity is (most likely) used by exponentially more people than musescore. nobody here is suggesting that sending analytics to shady companies is new.,-1,-1,0,0.4975460767745971,0.5987064838409424,0.9282742142677308,-1.0,accept,majority_agreement
834576049,835,"because we are talking about audacity here, i guess  ̄\_(ツ)_/ ̄",0,0,0,0.6163750886917114,0.7968189716339111,0.9701138138771056,0.0,accept,unanimous_agreement
834576108,835,"you do understand the difference between a damn website running behind ublock origin, umatrix, and more, where *we* are in control over what code runs, somewhat, and a compiled executable that can do whatever it wants to, right?",-1,0,-1,0.5721592307090759,0.8217505812644958,0.8484559655189514,-1.0,accept,majority_agreement
834577547,835,"may be use sentry.io (it's open source, you can selfhost it) for the data, described in pr? it's privacy friendly and (imo) perfect fit for such case.",0,0,0,0.8164559602737427,0.8601838946342468,0.9027658104896544,0.0,accept,unanimous_agreement
834577751,835,"i think i put it the wrong way, i'm just pointing out that they've always been pretty shady.",-1,-1,-1,0.9078280329704284,0.7991639971733093,0.9222434163093568,-1.0,accept,unanimous_agreement
834578816,835,"sentry wouldn't work for this, it's only for error reporting afaik.",0,0,0,0.9541174173355104,0.9546449184417723,0.9813668727874756,0.0,accept,unanimous_agreement
834585377,835,are more likely to fork software.,0,0,0,0.9003353118896484,0.969976842403412,0.934023380279541,0.0,accept,unanimous_agreement
834592067,835,"nope, you can report both errors and custom events, here is link to the doc page of sentry cli, but the same for any platform with sentry sdk: [a link] we literally used that for tracking user base count and ""open app home screen"" events for mobile apps in one of private projects, because we don't want to send our users data to google analytics or yandex (app)metrica",0,0,0,0.9415918588638306,0.9758548140525818,0.9913225173950196,0.0,accept,unanimous_agreement
834593197,835,"i'd be cautious of this one... i don't see anything licenses, and i don't see any clear statements about how data is handled if it isn't self-hosted. iow - it would be possible to encounter many similar issues that we have with google and yandex now... and the fact that this isn't an open source project gives me quite a bad feeling about it being used in an open source project.",-1,-1,-1,0.941531538963318,0.9643846154212952,0.9780437350273132,-1.0,accept,unanimous_agreement
834598802,835,"as the original/lead dev of ardour, i appreciate the sentiment, but it should be made clear that audacity is an audio file editor, and ardour is a daw. although their functionality overlaps somewhat, they are entirely different sorts of programs, and one does not replace the other (at least, not necessarily). also in the interest of full disclosure, builds of ardour from ardour.org (the only ones we recommend and support) will contact ardour.org (not google) when you start the application and send it your os and current ardour version. we use this to notify you of new releases. we necessarily know your ip address when you do this (because that's how the internet works). we do store this information, but do nothing else with it: ardour.org has no idea who you are or what you are doing with ardour (and we don't want to know either).",1,1,1,0.9410905241966248,0.9806050062179564,0.942079782485962,1.0,accept,unanimous_agreement
834600905,835,"making an audacity app steal data and send it off to random third parties is pointless. why would anyone want this this provides zero value to the end user, is a huge potential risk, and its very bad public relations why? just why",-1,-1,-1,0.9774984121322632,0.984598994255066,0.9931082725524902,-1.0,accept,unanimous_agreement
834602926,835,"ok, although i hate google enough to have moved entirely to sfos (look at my repos), i certainly understand why this is being done. as long as it is opt-in, i'm ok with that. i never go anywhere near those settings and i've been using audacity from the beginning. thanks muse and audacity teams for your work!",1,1,1,0.9843813180923462,0.993347465991974,0.9944287538528442,1.0,accept,unanimous_agreement
834602980,835,"thanks for the correction, might not be too bad of a solution then. you do bring up a good point. i looked into [a link] and it appears the code is licensed under the ""business source license"" which explicitly says it is not an open source license. the license changes from this ""bsl"" to apache 2.0 after 3 years afaik, which is not ideal. so maybe sentry is not the move here.",1,1,1,0.8637585639953613,0.8969086408615112,0.9738348126411438,1.0,accept,unanimous_agreement
834603395,835,because of the fud around telemetry- making it optional would mean most half-informed people will turn it off (most of them being on linux). thus audacity will have no way to track linux usage hurting it's progress on linux. i propose making it mandatory and impossible to turn off but with anonymization and less data points.,-1,-1,0,0.6038089394569397,0.6287801265716553,0.6083602905273438,-1.0,accept,majority_agreement
834605521,835,if it cannot be turned off people will just disallow audacity internet access with a firewall,0,0,0,0.7736440300941467,0.9698799252510072,0.8391159176826477,0.0,accept,unanimous_agreement
834608079,835,for openbsd: [code block],0,0,0,0.988352119922638,0.989938497543335,0.9959255456924438,0.0,accept,unanimous_agreement
834611167,835,"i'm sure continued comments are going to get lost in the giant flood of folks already commenting here, but this is a bad idea :tm: as currently implemented. since you are attempting this ostensably to collect user feedback/needs, i'll make my feedback very clear. if this pr is merged, i will no longer use audacity and will find another solution. i will also no longer reccomend audacity to friends/colleagues due to this stance on user privacy. if this pr was revised to meet some of the suggestions of others in the thread (using a self-hosted and secured telemetry system, being clearer about what data is being collected, making opt-out the default) i would re-consider my stance. however, the trust has already been broken in my opinion and now i would have to cautious about every future change to audacity being a change that violates user privacy.",-1,-1,-1,0.9590391516685486,0.983274519443512,0.9283014535903932,-1.0,accept,unanimous_agreement
834611829,835,": hi paul, thanks for wading into this messy pr to comment on some of these items. i don't think the kind of ""check-in"" system is something that most would object to... by implementing this feature in a way that is respectful to your users. however, i wondered if you could provide some more feedback to help clarify some of the things about how ardour went about implementing this feature? things i would be curious to see added to this conversation would include: 1. how transparent is this feature implementation to users? 2. is there any end-user documentation surrounding the implementation of the feature? (ie, what's gathered, how long it's kept, how it's used, etc.) 3. were there any internal discussions before the decision was made to implement this feature? 4. were there any public conversations before this feature was implmented? 5. what is the data retention policy surrounding this information? 6. were there any steps taken in light of regulations that could influence how this information is kept? 7. what procedures are followed to keep this information secure? i do find it a little disheartening to hear that ardour is storing the ip address. it would seem to me that during a check-in it would be possible to notify users of updates, and once that is done then the ip address is not really needed and could be scrubbed from the stored information. if you are looking to build more usage data, then an anonymized uuid should be used instead of the ip address. edit: changed: """"check-in"" system is something that anyone would object to.."" to """"check-in"" system is something that most would object to..""",1,1,1,0.9186477661132812,0.9580254554748536,0.9468894004821776,1.0,accept,unanimous_agreement
834613227,835,22% of respondants polled state they object to any form of network communication: [a link],0,0,0,0.9768397212028505,0.9898489117622375,0.8685424327850342,0.0,accept,unanimous_agreement
834615117,835,"i should have said *most* instead of any. obviously 22% is not a majority. and, a sample size of less than 1000 against a user base (at least according to the forum) of over 150,000 isn't quite significant.",0,0,0,0.79883873462677,0.9425092935562134,0.7998878359794617,0.0,accept,unanimous_agreement
834616399,835,looking forward to a fork of the pre-tracking audacity ...,0,0,1,0.7540627717971802,0.9906546473503112,0.6093832850456238,0.0,accept,majority_agreement
834617735,835,"you are absolutely insane. don’t worry, i won’t ever be using audacity ever again. you took the trust we had in your software and flushed it down the toilet.",-1,-1,-1,0.9889705181121826,0.9787092208862304,0.9943979382514954,-1.0,accept,unanimous_agreement
834619674,835,right here: [a link] emphasis mine.,0,0,0,0.9693173170089722,0.982852041721344,0.9930301308631896,0.0,accept,unanimous_agreement
834621296,835,"audacity hasn't needed telemetry in the past, and it doesn't need it now. the fact that it's opt-in would make it useless any way, because the majority of your users wont go and opt-in i'm pretty sure.",0,0,0,0.8945381045341492,0.7177039384841919,0.9077020287513732,0.0,accept,unanimous_agreement
834621523,835,"it's likely that the ip address being stored is in web server logs, etc. nginx, etc logs ip addresses in access logs by default.",0,0,0,0.986500322818756,0.9934210181236268,0.9904899597167968,0.0,accept,unanimous_agreement
834622705,835,"please read the original comment. they explicitly store this information along with the user's os. it is deliberate, not a mis-configuration. even if it is web server logging, that doesn't make it ok.",0,0,0,0.8719932436943054,0.946966588497162,0.9856233596801758,0.0,accept,unanimous_agreement
834624099,835,"holy crap this is a lot of drama. i'm gonna just state my opinion: * it is possible for analytics to be okay, because ""analytics"" is a very broad word. the word ""analytics"" includes things that are okay and also things that aren't. * i have no problem with the developers of any program knowing someone is using their program on linux, or on x64 gentoo linux * i have no problem with the developers of any program knowing people use their program xx hours per day on average * i have no problem with the developers of any program knowing that people are using certain plugins more than others * the above information can be gotten without having a concept of sessions * the above information can be gotten without linking data together. there would be no reason to need to know that people who start audacity at a certain time of day are more likely to use a certain plugin. * i wonder how useful the above information actually is * i would be worried about the developers of a program knowing exactly when i'm using it. * i would be worried about the developers of a program knowing in precise detail what i'm using it for (e.g. sending audio data to the server) * i would be worried about the developers of a program linking together all that data and building a user profile. * google is permanently untrustworthy. if it would just collect the above-mentioned data and calculate statistics for the audacity developers, that would be okay. but i doubt that it does just that. there is no transparency about what google does with your data. not even the audacity developers would know. same for other large advertising companies. * you guys (you know who you are) are making a mountain out of a molehill considering the program asks you whether you'd like to enable analytics when you start it up. it's like you saw the word ""telemetry"" and just rushed in to attack the developers. sheesh, cut it out. * the fact that a program has telemetry *that you turned off* is a really dumb reason to avoid using the program. * people who are irrationally pissed off are more likely to be commenting in this thread, than people who aren't. they are a ""vocal minority""",-1,-1,-1,0.9891017079353333,0.991380512714386,0.9941388368606568,-1.0,accept,unanimous_agreement
834624926,835,"it can be disabled if running from the command line. if the system is not online, or has a firewall blocking the communication, ardour continues normally and without delay (it is done in a separate thread, and can fail with no impact). there is not. there were. with the core user group, on irc. there may or may not have been some discussion on the user mailing list - i don't recall. the information is not associated with any user id at ardour.org and so cannot be deleted in connection with a gdpr-style request. making it deletable on request would mean associating it in someway with a user id, which we will not do. we currently retain all such ""pings"" back to 2013. i researched this when the gdpr passed, and do not believe that it is affected by it. the usual procedures that we follow to make ardour.org itself secure, nothing more. there is an unpublicized url that provides an aggregate summary of the data, but we rarely use it because the db query takes too long to execute. we already have the general message that windows and linux users are about equally sized groups, with macos significantly smaller, and to be honest the information coming in likely only serves to reinforce that. in that sense, we would not lose much at this point by not storing the data at all.",0,0,0,0.9782335758209229,0.9867023825645448,0.9801307916641236,0.0,accept,unanimous_agreement
834625883,835,"you'd win a lot of points making this change in the near future, given the timing. just a thought. i've been looking to switch away from cubase. maybe ardour can be my next destination.",0,0,1,0.8276075720787048,0.6784458160400391,0.6762741208076477,0.0,accept,majority_agreement
834626680,835,"bravo! you've won the award for the most irrational and stupifying dumb comment in this conversation. (1) linux users tend to be much more technical, and much better informed than the general user base, (2) such a move would likely get audacity removed from most linux distributions, (3) a fork would likely be inevitable, (4) the harm to the reputation of audacity would be irreparable, (5) there would be a good chance that this kind of move could find itself in a regulatory quagmire of gdpr, ccpa, and others. this would absolutely guarantee that audacity would go the way of openoffice.org. hmm, i think i like the name ""libreaudio"" for the fork.... ;)",-1,-1,-1,0.7995908260345459,0.9220627546310424,0.8464927673339844,-1.0,accept,unanimous_agreement
834628099,835,"as long as it can be disabled at compile time, this is exceedingly unlikely. linux distributions (afaik) all build ardour with the --no-phone-home configure-time option. it's not an issue.",0,0,0,0.939254105091095,0.9659031629562378,0.9862141013145448,0.0,accept,unanimous_agreement
834628266,835,"i get the impression that comment was deliberately inflammatory (i.e. ""trolling"")",-1,-1,0,0.8509968519210815,0.6183068752288818,0.673998236656189,-1.0,accept,majority_agreement
834629976,835,"paul's original comment: maybe i am reading that too tightly, but ""store this information"" would indicate storing the ip address. which is how it should be. it could just have been the wording of paul's comment that lead me to incorrectly believe that the ip address is being stored. if it isn't, then the feature is working the way i would hope most other developers (like you) would handle it.",0,0,0,0.9392189979553224,0.9749387502670288,0.9704885482788086,0.0,accept,unanimous_agreement
834630549,835,"for every person who tries ardour and loves it, there's someone who emails me and says ""this is complete garbage, i can't even believe that you think this is usable"". for every person who says ""i used to use logic, but ardour is so much more intuitive"", someone emails ""this program is f***ing impossible to use, it's not intuitive at all, i'm never using it again"". i long ago stopped caring - we work for the people who like ardour, everybody else has a great choice of amazing daws to work with (and prefer).",-1,1,-1,0.9836038947105408,0.9501082301139832,0.9940348267555236,-1.0,accept,majority_agreement
834631569,835,1000 votes and the results seem pretty stable so i am happy to post them: ![a link] these strawpolls are perpetual (i can't close it) so you can still vote [a link],1,1,1,0.9809790849685668,0.992421805858612,0.996094524860382,1.0,accept,unanimous_agreement
834631600,835,"i understand. having worked on development of a daw myself, i'm always interested in trying new ones. cubase is pretty bad for how i work, and it's glitchy to boot. updates are expensive. you might not care, but i do. i also care about not being tracked.",-1,-1,-1,0.9803377389907836,0.9714022278785706,0.975338578224182,-1.0,accept,unanimous_agreement
834632064,835,"already have a fork, without spyware?",0,0,0,0.9274553060531616,0.987885594367981,0.9943298101425172,0.0,accept,unanimous_agreement
834632706,835,"count me as one of those people who loves ardour. i've used it for numerous recording projects (of my weird, out there noise sound stuff), and used it for rough mastering other people's works. it's a brilliant tool when used in the manner it was designed to be used. audacity has it's place in audio toolkits as a quick record and edit tool, right alongside ardour. they both have their places and uses.",1,1,1,0.9289281964302064,0.990907907485962,0.9837005734443665,1.0,accept,unanimous_agreement
834633075,835,"the ip address is stored. we consider it less identifying than a uuid, and wanted a way to count pings from the ""same address"" in order to differentiate 1-time ""testing the waters"" from repeat usage. but again, we've pretty much reached ""stable information"" - someone who has used it more than 3 times fires up a version they got from us about every 2.4 minutes, with at least once such user in almost every country on earth, windows & linux equal, macos trailing. there's not a lot more we will ever glean from this data, so we may indeed stop storing any of it.",0,0,0,0.8279075622558594,0.8841590285301208,0.9781127572059632,0.0,accept,unanimous_agreement
834637795,835,"just to add a thought to the whole discussion: at this point, the tracking and data collection, no matter how well meaning or not, hardly matters, the damage is already done. open source projects live through the community, and though the contribution of enthusiasts. even the mention of something that makes the community lose trust in the development process and the software will negatively impact the outcome. this isn't just passionately discussed here, but at multiple places, and that will all impact the future of audacity. the outcome will not be a net positive. trust is a fickle thing in knowledgeable it people... the best thing to do is for the people responsible to admit this to themselves and to the community, salvage what trust in the project remains, and maybe consider what open source in general and audacity in particular really needs to thrive in the long term.",-1,-1,-1,0.9760413765907288,0.9363689422607422,0.6470347046852112,-1.0,accept,unanimous_agreement
834638000,835,"that's regrettable. hopefully this is a topic that might be re-considered in the future. imo - i think the idea of using the check-in system is useful, and i think it would be possible to anonymize a uuid. the reason ip's aren't anonymous is precisely what you commented on below: gleaning the locations is what should be anonymized. it is something that could be derived during the communication and stored, instead of storing the ip address itself. just a bit of feedback. and, for what it's worth, i don't think gather the information you've described is a violation of anyone's privacy, it's good usage / demographic information. i would still like to hear more about the other items i asked about if you have time to discuss them. thanks again!",-1,-1,-1,0.6373074054718018,0.9832909107208252,0.9810364246368408,-1.0,accept,unanimous_agreement
834638226,835,"if you **must** do telemetry, at least make it go to your own servers. how hard can it be, sounds like a simple rest api connected to a db.",0,0,0,0.8961448669433594,0.9588422775268556,0.9890419840812684,0.0,accept,unanimous_agreement
834639267,835,"those who hate tracking enough to never use a program again because it adds some analytics as an opt-in feature: why the heck are you commenting on github, a microsoft website?",-1,-1,-1,0.985059380531311,0.9591811299324036,0.951607882976532,-1.0,accept,unanimous_agreement
834639701,835,"you know as well as i do, if they were as clean, thoughtful, or even just willing to do so, this is how they would have gone from the start. consider the big picture: this is done on purpose.",0,0,0,0.9373416900634766,0.8409603238105774,0.8517087697982788,0.0,accept,unanimous_agreement
834640227,835,"you are free to offer an alternative. also, this is where the draft started, so...",0,0,0,0.9623591899871826,0.9488036036491394,0.9923684000968932,0.0,accept,unanimous_agreement
834641043,835,"on the contrary. what usually happens in these cases is everyone forgets about the whole thing by next week, analytics go in, no users are lost, because it turns out people actually don't care about analytics very much and they care about using the software a lot more. this happens *despite* the number of complaints in the pr.",0,-1,0,0.5223877429962158,0.590328574180603,0.894988477230072,0.0,accept,majority_agreement
834646470,835,and then they end up switching the default to it being enabled by default :),1,1,0,0.6205679774284363,0.9696837663650512,0.9912877678871156,1.0,accept,majority_agreement
834649901,835,"currently, this pr has 130 thumbs up vs 2692 thumbs down, which is a laughable 5% approval.",1,-1,-1,0.6201006770133972,0.9630401134490968,0.9788697957992554,-1.0,accept,majority_agreement
834650262,835,"goodbye, audacity",-1,1,-1,0.5925007462501526,0.9458571076393129,0.9601625800132751,-1.0,accept,majority_agreement
834650698,835,lines up roughly with the statistics i collected,0,0,0,0.9823415279388428,0.9858983755111694,0.9863196015357972,0.0,accept,unanimous_agreement
834650987,835,![a link],0,0,1,0.9475814700126648,0.9432068467140198,0.5592244863510132,0.0,accept,majority_agreement
834653546,835,"[a link] demonizing your very own target audience, implying they are luddites and ignorant, very cool. :thumbs_up: don't forget mandatory surveillance is a magnet for legal trouble. if you merge this, it'll be no better than using audition, at least adobe has monetary incentive to add features.",1,1,1,0.6295003890991211,0.9259479641914368,0.49384406208992,1.0,accept,unanimous_agreement
834654331,835,"i'm still waiting. i posted this 7 hours ago. this should not be hard, nor require much internal discussion. that fact that there has been no response on this simple matter in 7 hours does not give me confidence that the future of audacity is in good hands.",-1,0,-1,0.5229548811912537,0.6657905578613281,0.9423217177391052,-1.0,accept,majority_agreement
834654863,835,"have you considered the following points? 1. if you have no information about the application stability it's probably because the application is already stable enough (?) and as a consequence people are not reporting a lot of bugs. 2. why would you need to estimate the size of the user base accurately? 3. open a thread about the switch here [a link] and ask for help to the community for testing. 4. take your time for testing, solving issues isn't necessarily easy. discuss these decisions with the community themselves. though, a telemetry system won't help you fix this knows 3.0 issue.",0,0,0,0.800806999206543,0.9568698406219482,0.9786598086357116,0.0,accept,unanimous_agreement
834660766,835,is there something wrong with having a bug reporter (upon crashing) instead of integrated tracking?,0,0,0,0.8472864627838135,0.9737652540206908,0.913802981376648,0.0,accept,unanimous_agreement
834662288,835,"among people who bother to pay attention to it. there is a sampling bias there. bets on this person installing it again within a week? seriously, these kinds of controversies have been rehashed over and over and over and over and over and over and ... and they always have the exact same outcome: nothing. if people care, which they do not, they will fork the project and the fork will gain traction over the original, but it won't because they do not. reacting with thumbs down doesn't prevent it from happening, it just tags you as the kind of person who thinks reacting with thumbs down prevents something from happening.",-1,-1,-1,0.9173561334609984,0.922716736793518,0.742347240447998,-1.0,accept,unanimous_agreement
834663518,835,"so... you don't expect there to be sampling biases in the tracking data, like no data being able to be collected from linux due to how its packaged?",0,0,0,0.9523508548736572,0.9439886808395386,0.976860284805298,0.0,accept,unanimous_agreement
834663615,835,"speak for yourself. i care enough that if this is merged, i will maintain a version with no tracking code enabled. then figure out ci so there are builds for win/mac without them too. just because other people do not care (usually out of ignorance) you do not have to follow. lead by example, make the world a better place, and all that... not everyone is the same, some people actually do want to do good stuff and have ethics about it. edit: most of the ci stuff seems to be in [a link] then triggered via github actions? i never used those, but seems similar to travis. might be a good exercise to get familiar with these tools.",1,1,1,0.4799432754516601,0.4068258106708526,0.4148626029491424,1.0,accept,unanimous_agreement
834668107,835,"even if the pr is merged, the people who care will look for alternative solutions and / or find methods to disable the telemetry anyways (patches, jailing, egress rules, etc). ... which kinda defeats the purpose of the telemetry in the first place, as it will only be available for a subset of the overall user-base, and likely only serve to complement other kinds of metrics (popularity contests, download counts, pr participation, etc). ... while i'd agree that protesting alone does not work (... alternative proposals tend to do better), it's not a totally a wasted effort; after all, the decision to make the feature opt-out was **a calculated one**, and implies that the data belongs to them, unless you're smart enough to stop them.",-1,0,0,0.8037679195404053,0.5303596258163452,0.8456053733825684,0.0,accept,majority_agreement
834671617,835,i still don't understand why using google analytics would be a good idea. it takes little effort to set up a a self hosted telemetry.,0,0,-1,0.5886660814285278,0.6973384618759155,0.5324190258979797,0.0,accept,majority_agreement
834674850,835,i doubt many distributions will go out of their way to enable that option. if this pr gets merged the people who actually have the telemetry enabled is so low that it completely defeats the point of having telemetry in the first place.,0,-1,0,0.7307457327842712,0.7530965209007263,0.507543683052063,0.0,accept,majority_agreement
834688004,835,"something curious i found. the recent changes on their wiki mention a few updates on the analytics documentation page made today [a link] they still keep insisting that this is all annonymous. from [a link] the use of uuid, ip and a few other details makes it really pseudonymous at best. granted, they do not intend to record personal data, but end up helping facilitating that.",0,-1,0,0.8594617247581482,0.7376148104667664,0.8532101511955261,0.0,accept,majority_agreement
834688303,835,"all this stuff? it's what people say they'll do, every time it's happened in the past. almost always, it doesn't happen. you don't have to agree or disagree, because reality agrees. btw since it prompts you on startup, there is no difference between opt-out and opt-in. you just call it opt-out to make it sound worse. i'll note there is no way to avoid recording ip. however, the uuid is totally unnecessary. so is the timing and order of events. all they really want to know is: how long was the app used in total, and how many times was each option used, over a period of say a week.",0,0,0,0.7479372024536133,0.5692369937896729,0.4882774651050567,0.0,accept,unanimous_agreement
834689200,835,yes there is. don't put it in the logs.,0,0,0,0.8601152896881104,0.9088085293769836,0.9890429377555848,0.0,accept,unanimous_agreement
834690202,835,"there's no way for an end user to know whether it's logged or not. they could say they're not logging it, but then log it anyway.",0,0,0,0.9327255487442015,0.9632702469825744,0.9272490739822388,0.0,accept,unanimous_agreement
834691844,835,"congratulations, you've proposed the most unpopular change in the history of this project. but at least you're aware of the concern. will you act on it? give it up or be forked.",0,1,1,0.6084985136985779,0.9886192083358764,0.5236830711364746,1.0,accept,majority_agreement
834692080,835,"if you never send analytics data, there is nothing to record ;) ;)",1,1,1,0.9462774991989136,0.9924324750900269,0.9923467636108398,1.0,accept,unanimous_agreement
834692944,835,"that's true. we'd have to take their word for it, which requires trusting them. speaking for myself, my trust for muse group is hanging by a thread at this point. what they need to do to *start* rebuilding it is to immediately, unambiguously commit to not using google analytics nor yandex.",0,-1,0,0.6507014632225037,0.5515798926353455,0.5622432827949524,0.0,accept,majority_agreement
834703302,835,"personally, i'm not against **strictly optional, disabled by default** telemetry if you specify which services (google? yandex?) you're using right in the box as opposed to the privacy policy link on the screenshot. right now it's like you're ashamed of using google (which you should) and hiding it (which isn't good). if you don't want to be ashamed and still roll analytics, please try to set up your own analytics software (there are a few options, from matomo to plausible to rolling your own script that logs events in a table and using things like metabase to build reports from that). it's really easy nowadays and a capable server should cost like $20/mo, so that shouldn't be that big of a deal.",-1,-1,-1,0.9599891304969788,0.8299373388290405,0.7538407444953918,-1.0,accept,unanimous_agreement
834708636,835,fyi for devs: you've been brigaded from reddit. [a link],0,-1,-1,0.9468873739242554,0.6384434700012207,0.7770559191703796,-1.0,accept,majority_agreement
834710563,835,"i dont come from reddit and i oppose those changes. what do they need my ip address for if it's to help debug stuff? please, lol.",-1,1,1,0.4613630771636963,0.9740522503852844,0.9678231477737428,1.0,accept,majority_agreement
834711947,835,i found out from a non-programming related discord. i recommend you salvage what is left of your and tantacrul's reputation.,0,0,0,0.870312511920929,0.757742166519165,0.9217007756233216,0.0,accept,unanimous_agreement
834712930,835,"i don't come from reddit (i heard about this via a mastodon followee) and i still think this pr is actively harmful to audacity, its users, and the free audio community broadly - both if merged, and frankly, at this point, even if it's not, in light of what seems to be a lack of willingness to change course to address the plethora of community concerns. i would feel this way whether i'd read zero or a million words of commentary around this thread and the underlying implementation. furthermore, ""brigading"" is a fairly loaded term to use for what was someone sharing a link. this is the internet. links are shared all the time - it's the literal entire point.",-1,-1,-1,0.955134928226471,0.7897964119911194,0.93825763463974,-1.0,accept,unanimous_agreement
834713197,835,"it's more than reddit, i see this issue's popped up on /g/ a bit ago, and it's been getting passed around irc, mastodon, twitter, matrix, telegram and discords here and there. it is not a small issue, and i'm surprised comments have not been restricted to contributors here yet.",-1,0,0,0.7441724538803101,0.8834352493286133,0.8288682699203491,0.0,accept,majority_agreement
834713800,835,"turns out that when an open-source project does something wildly unpopular, the word spreads.",0,-1,0,0.8305750489234924,0.9094030261039734,0.8905366063117981,0.0,accept,majority_agreement
834714438,835,the only project that would get a stronger reaction than audacity would probably be if the linux kernel tried to do something similar. audacity is very proud of how many users their app has. a lot of those users feel that the foss values of the project are very important.,1,0,1,0.9381919503211976,0.5134344696998596,0.8485625982284546,1.0,accept,majority_agreement
834714743,835,i hope y'all are connected to github with a vpn and throwaway account,0,0,1,0.6949217915534973,0.7938708662986755,0.6072168946266174,0.0,accept,majority_agreement
834715903,835,"guys, you're in the news [a link]",0,0,0,0.9547777771949768,0.9344502091407776,0.981144368648529,0.0,accept,unanimous_agreement
834715918,835,now that things have quietened down i think its important to remember this is the first battle in a long war for who controls the interests of audacity. people stating that the devs will push this change through quietly have plenty of cases to back them up. from here on out the community needs to ruthlessly review every single pr going into this project and every single commit going into master. until they give up or the money runs out.,-1,-1,0,0.5578734278678894,0.6723896265029907,0.6766343712806702,-1.0,accept,majority_agreement
834716673,835,excerpt:,0,0,0,0.97180837392807,0.9829238057136536,0.9946980476379396,0.0,accept,unanimous_agreement
834716896,835,"[a link] adds nothing of value to this, or any, discussion. we can go down that rabbit hole all day and it will still do nothing but waste everyone's time.",-1,-1,-1,0.884352445602417,0.7054315805435181,0.9612847566604614,-1.0,accept,unanimous_agreement
834717045,835,"i'm neither surprised nor disappointed - so far the discussion has remained, for the most part, civil here - and in case y'all missed it (i did) - there is a statement made in the op above, about the use of telemetry, library cruft and what not. while i'm glad they addressed it, i'm still unhappy with the decision to push forward as it is - though, i would be incredibly relieved if they saw it fit to work out a self-hosted telemetry service to use on public builds. another option imo, would be to entirely separate telemetry-enabled builds on the audacity download page, and gate that behind a strict privacy policy, for compliance's sake. this makes it an opt-in proposition at download time - and, at first-run. that way, users deploying audacity en masse, which can ***not*** have telemetry on their network for understandable reasons, can continue using a supported version of audacity, rather than a fork or a build from source.",-1,-1,-1,0.8732689023017883,0.6488348245620728,0.8430972695350647,-1.0,accept,unanimous_agreement
834717510,835,cause it's impossible to send anything over the internet without an ip address...?,-1,0,0,0.5009471774101257,0.730219841003418,0.9294098615646362,0.0,accept,majority_agreement
834718368,835,they don't need to log it.,0,0,0,0.9781991243362428,0.9745895266532898,0.9758762717247008,0.0,accept,unanimous_agreement
834718826,835,"correct, but there is no way to prove they aren't logging it, so we have to assume they are anyway",0,0,0,0.9760023951530457,0.9014750719070436,0.9679667353630066,0.0,accept,unanimous_agreement
834719428,835,"small request - could you specify what requirements you're looking for specifically, perhaps in a new issue report, for a non-google/non-yandex and/or self-hosted telemetry service? the community has answers, but this pr comment space is getting crowded for sure.",0,0,0,0.7005738615989685,0.9238996505737304,0.8625609278678894,0.0,accept,unanimous_agreement
834720332,835,it's not brigading when it's the wider free software community/users responding...,0,-1,0,0.9145039916038512,0.6551346778869629,0.9423142671585084,0.0,accept,majority_agreement
834723486,835,"this makes it an opt-in proposition at download time - and, at first-run. that way, users deploying audacity en masse, which can not have telemetry on their network for understandable reasons, can continue using a supported version of audacity, rather than a fork or a build from source. i think this is a great idea. several users have already mentioned that they are responsible for usage of audacity in educational settings. in schools, universities, governmental agencies, companies, and other institutions with mass deployments of computers, it would be easier for them to use audacity without a shred of doubt about compliance with institutional and legal policies if [a link] hosts official builds with the telemetry not even compiled into the binary. in a mass deployment, it would be inconvenient to ensure that the checkbox for telemetry is disabled on every single computer. with github actions, this would be really easy to implement using the matrix feature.",1,1,1,0.9585024118423462,0.9552135467529296,0.9555357098579408,1.0,accept,unanimous_agreement
834725862,835,nack,0,-1,0,0.9703128933906556,0.8127092719078064,0.9793425798416138,0.0,accept,majority_agreement
834728848,835,"... some people actually do care, and things can change. to think otherwise is feed into complacency. what people do and say matters. (if all this is for not, then what is the point of the pr -- or this dialog -- in the first place; just merge and be done with it). no, i'm calling it opt-out because it, in-fact, requires end users to ""opt out"" (the shinny blue default button in the mockup ;) , aside from the other comments about config defaulting) ... if the opt-out model sounds worse to you, that is inferred. would things change so much if users were required to check a box to **enable** telemetry; perhaps with the same catchy rationale above it? ... yes, it would, because most users will not read the message, and as a consequence, telemetry would not be collected. the whole point of defaulting **on** is to collect information from those uses who indifferent, not paying attention, or are uninformed. i think it is more appropriate, and in better taste, to produce software in an ethical manner and air on the side of caution for people who might not know any better, then it is to aggregate metrics. (... a different way of saying it, with using that other phrase ...)",-1,0,1,0.6579837203025818,0.4692666530609131,0.6636375188827515,,review,no_majority_disagreement
834732927,835,i'll believe it when i see your fork become more popular.,0,0,0,0.5412966012954712,0.9582222104072572,0.9545273780822754,0.0,accept,unanimous_agreement
834733973,835,"oh, you got me there, maybe i should change the way i think about the world ...",0,0,0,0.6623324751853943,0.6086972951889038,0.504130482673645,0.0,accept,unanimous_agreement
834734712,835,"that is the thing, it doesnt have to. for something to become a success, all it takes is 1 person using it and being grateful for it. vscodium is a thing for those that need to run vscode (say the rest of the team is using the same tool and has a defined workflow for it) but are not ok with all the tracking and eula associated with it. vscodium is never going to be more popular than vscode, but because people use it, in my opinion it is already a success. it serves a purpose and serves it well. those that care will find it and use it. the developers that fork and create such projects are not interested on popularity contests, but about being useful.",1,1,1,0.6837977766990662,0.9779815077781676,0.9493420124053956,1.0,accept,unanimous_agreement
834736760,835,vscode is still more popular than vscodium.,0,0,0,0.9709351658821106,0.9633775353431702,0.9575304985046388,0.0,accept,unanimous_agreement
834736855,835,ooh where do i download that? need that.,0,0,0,0.9265292882919312,0.92118638753891,0.930445909500122,0.0,accept,unanimous_agreement
834737579,835,"but the thing is, unlike audacity, most people think of vscode as being a free tier of a microsoft product, not as a oss product. therefore, expectations are exponentially lower, given m$'s ancient reputation",0,0,0,0.7262043952941895,0.979317307472229,0.8477689623832703,0.0,accept,unanimous_agreement
834738640,835,"dear obviously confused committer, i'm not from reddit. i'm a random guy who knows audacity exists, simply because it's one of the most well-known, most complete and most appreciated floss alternatives to proprietary software. please consider to stop fucking with it. you're making it worse. go back to your shitty commercial offerings that noone has ever heard about and stuff all your shitty telemetry, antipatterns and ui redesigns in there. in other words, kindly fuck off. best regards, the internet",-1,-1,-1,0.9908577799797058,0.9897225499153136,0.9919357299804688,-1.0,accept,unanimous_agreement
834743169,835,"oh yea my favourite thing about this muse takeover is they have promised to ""fix"" the gui. :grinning_squinting_face: the gui in audacity may not be pretty (and there's a couple of bugs) but its one of the most straight forward and intuitive interfaces i have ever used. in fact i have seen it be used as a case study for good interface layout before. making it pretty doesn't make it better.",-1,1,1,0.5983235239982605,0.6509910821914673,0.9719966650009156,1.0,accept,majority_agreement
834748865,835,": i suggest taking a perspective more like these developers: : : please don't base your decisions on whether to continue support for a feature or operating system on necessarily unrepresentative numbers. drop support for features when maintaining them becomes an obstacle to moving forward with the rest of the project. it doesn't matter if one person or ten million people use the feature. if it needs to go, it needs to go. if not, keep it.",-1,-1,-1,0.5817196369171143,0.6241121888160706,0.8551377654075623,-1.0,accept,unanimous_agreement
834749174,835,"hi the majority of this response is very useful... i'll just add a few follow up comments where there might be some more interest: it would be a good idea if there were... say the way mozilla approaches it: [a link] that's at least some consideration of the user base. :) now that is something that i would suggest could be improved. as noted in the firefox document i linked above, they keep the data for 13 months, while removing ip addresses every 14 days. from what i've read (from documents like [a link] guide), they tend to view ""personal data"" in the broadest terms possible. since ip addresses can be used to compel information from a service provider, it is generally regarded as personal information. just some food for thought. imo - while the fact that this url only presents aggregate information is good, having an unpublished url that is public facing (if it is, in fact public facing) is not. this is an attack surface that someone who found the url could use to try to gain access to the database itself. yes, you mentioned this in other posts. personally, i don't see the issue with gathering such information as it might be of use for other purposes (ie, identifying which versions of ardour are still in wide use, identifying which platforms are most active - like you have already stated, how often ardour is being used, and possibly a lot more). i think the main point is to (a) secure the information as strongly as possible, and (b) keep the information as anonymous as possible. it sounds like these were considerations when it was first implemented. if anything, i would suggest that this topic could be re-investigated to update things to more current standards. it's this kind of thinking that should be present in this pr that i think many of us are not seeing / reading... my hope is that this discussion might provide more of an example to musecorp about what users would like to see discussed about such an implementation.",1,1,1,0.9904610514640808,0.995076596736908,0.99672532081604,1.0,accept,unanimous_agreement
834752823,835,"the fact that they're calling it a product means it's already dead to me as foss, telemetry or not.",-1,0,0,0.9058040976524352,0.5727757215499878,0.608047604560852,0.0,accept,majority_agreement
834753366,835,"hi paul, i was responding to the person that stated the telemetry should be left on permanently with no option to disable it. this would not be acceptable to most distributions.",0,0,0,0.9729477763175964,0.8942999839782715,0.9863978028297424,0.0,accept,unanimous_agreement
834754088,835,"amen, to that, i have been waiting for someone to say this for the last 24h",0,0,0,0.5965632200241089,0.8103094696998596,0.8315063714981079,0.0,accept,unanimous_agreement
834754912,835,"probably, but i figured there was a chance he was serious so i thought a serious response was worthwhile.",0,0,0,0.792507529258728,0.9225550889968872,0.8724450469017029,0.0,accept,unanimous_agreement
834757641,835,f in the chat for old good audacity. what's a good name for the fork?,1,-1,1,0.7308527231216431,0.5021227598190308,0.9814075827598572,1.0,accept,majority_agreement
834758248,835,i postulated libreaudio earlier... borrowing from libreoffice forking off of openoffice.org,0,0,0,0.986250638961792,0.9827237725257874,0.9897185564041138,0.0,accept,unanimous_agreement
834758755,835,f in the chat for old good audacity. what's a good name for the fork?,1,-1,1,0.7308527231216431,0.5021227598190308,0.9814075827598572,1.0,accept,majority_agreement
834758776,835,that's already [a link].,0,0,0,0.987939476966858,0.9844956398010254,0.9940343499183656,0.0,accept,unanimous_agreement
834758781,835,there's an audio player named audacious.,0,0,0,0.9817737936973572,0.941050112247467,0.9830563068389891,0.0,accept,unanimous_agreement
834761310,835,"i say we call it audacity. you know cos we have the audacity to call it audacity. (yea i know i know, i am going)",1,0,1,0.6039374470710754,0.609411895275116,0.8579603433609009,1.0,accept,majority_agreement
834762457,835,"audacity origin ;-) __edit:__ but jokes aside, i thought _audience_ was pretty nice, if there is no conflict with existing software.",1,1,1,0.9610720872879028,0.9947943091392516,0.994802951812744,1.0,accept,unanimous_agreement
834762946,835,glad to see this made a draft.,1,0,1,0.9210057854652404,0.7698004841804504,0.9657835960388184,1.0,accept,majority_agreement
834763098,835,it should probably get some practical and boring name like libreaudio until someone can come up with a good pun.,-1,-1,0,0.9199175834655762,0.7389729022979736,0.8036380410194397,-1.0,accept,majority_agreement
834763688,835,baby steps: next get the pr closed altogether then get removed from the list of people with write access altogether.,0,0,0,0.9827492237091064,0.7727298140525818,0.9843890070915222,0.0,accept,unanimous_agreement
834764930,835,(not in the topic) came up with audacium (audacity and chromium stuck together),0,0,0,0.9699085354804992,0.9847102761268616,0.9904602766036988,0.0,accept,unanimous_agreement
834766910,835,maybe this is a situation where a benevolent dictator leadership model would've helped. torvalds would've rightfully cursed these changes out.,-1,-1,-1,0.7270988821983337,0.8631772994995117,0.8745973110198975,-1.0,accept,unanimous_agreement
834769730,835,"stallman is the counterpoint of when a benevolent dictator goes wrong however. finding a truly benevolent dictator is hard. frankly i prefer the rust model where everyone even the lead devs are held to a set of community rules and processes for implementing changes, its a model where no one is above the law, and no one's voice is permitted to be louder than anyone else's (within practical reason). it's not perfect but it significantly reduces the amount of drama in the rust world. (so far the discussion has been polite please don't flame me on this one)",-1,-1,0,0.8903306126594543,0.9619741439819336,0.5177100896835327,-1.0,accept,majority_agreement
834771731,835,i agree that this pull request should be closed at this point. any alternative implementation should start fresh in a new pull request *after* discussing with the community how to do it in an acceptable way. i'm still waiting on an unambiguous statement that audacity will not use google analytics nor yandex.,0,0,0,0.9327555894851683,0.9824193716049194,0.9291214942932128,0.0,accept,unanimous_agreement
834772506,835,audiocity ?,0,0,0,0.9843940138816832,0.9764758348464966,0.9867486953735352,0.0,accept,unanimous_agreement
834773917,835,i feel we need another poll :grinning_squinting_face:,1,0,1,0.5942641496658325,0.9681347608566284,0.9589248895645142,1.0,accept,majority_agreement
834773920,835,call it cacophony lol,1,1,1,0.901883602142334,0.990184247493744,0.8946347236633301,1.0,accept,unanimous_agreement
834776107,835,"it would probably be wise to discuss a possible fork, its naming etc. somewhere else? the thread gets out of hand, and project maintainers (somewhat rightfully) could close/ lock it at some point. it could be on the audacity user forum, or better suggestions?",0,0,0,0.983819305896759,0.9898489117622375,0.9561846852302552,0.0,accept,unanimous_agreement
834776652,835,could call it animocity (portmanteau of animosity and audacity),0,0,0,0.9647530913352966,0.909947633743286,0.9432542324066162,0.0,accept,unanimous_agreement
834776872,835,oh i thought the point of having it here was to remind the dev's we are not going away. this isn't over just cos the thousands of tryhards from reddit and hn have stopped,-1,0,0,0.6980940699577332,0.7320771813392639,0.5904556512832642,0.0,accept,majority_agreement
834778088,835,"i presume we haven't had an ""official response"" from either muse group or debian/arch/other distro maintainers yet.",0,0,0,0.9747406244277954,0.987200140953064,0.974532961845398,0.0,accept,unanimous_agreement
834778550,835,they are working on one. that much has been confirmed.,0,0,0,0.9732134938240052,0.9488101601600648,0.9883846044540404,0.0,accept,unanimous_agreement
834780181,835,"given that all of the muse group people have not even considered removing google and yandex, the most controversial sticking points, i'm not hopeful.",-1,-1,-1,0.9652790427207948,0.9600360989570618,0.7993564605712891,-1.0,accept,unanimous_agreement
834780544,835,ohoh what about ana ? it stands for ana is not audacity :) or even audacity is not audacity if you will.,1,1,1,0.9528440237045288,0.9903839826583862,0.9912481307983398,1.0,accept,unanimous_agreement
834780746,835,"duplicity is another neat one, a constant reminder of why people started the fork (also because it's a duplicate of audacity)",0,0,1,0.8983730673789978,0.933715045452118,0.797145664691925,0.0,accept,majority_agreement
834780848,835,they are considering it. they have not committed to not using google analytics and yandex.,-1,0,0,0.6912504434585571,0.9803358912467957,0.9862213134765624,0.0,accept,majority_agreement
834781022,835,"i would suggest you look at the community you are addressing this to: libreoffice is the result of a fork from openoffice.org when oracle took it over and started making changes that met with major disapproval. the maria database came about from the same situation with oracle taking over mysql. neovim came about because some users felt that the development speed and direction of vim wasn't moving in the right direction (it wasn't even an issue was controversial as this one). you should learn some history about the open source world. there is a long history of projects being forked when there are issues that developers have ignored their users feedback. no, reacting with a thumbs down is an indicator that your comment doesn't deserve support because it is a deeply flawed and ignorant argument.",0,0,0,0.8810304403305054,0.6351765990257263,0.9203059673309326,0.0,accept,unanimous_agreement
834782088,835,vim and neovim are co-existing just fine.,0,0,1,0.9317755699157716,0.9712113738059998,0.769521951675415,0.0,accept,majority_agreement
834782700,835,"""we do not incorporate cross-site tracking, limiting the ability to identify the user by both google and yandex."" this is misleading. if information is sent to either of these websites along with your ip, it's identifiable, period. it is easily correlated with you via the gobs and gobs of data they already have on you (yandex more so if you're russian). this is what they're good at, this is their bread and butter. and people know this. i will never opt into telemetry with them as the service provider, and so will many, many, many other people who use this app, which will limit the usefulness of this. if you switched to to a self-hosted solution, i'd definitely feel more comfortable with it. i recognize the utility and usefulness of telemetry in designing helpful applications, but there are tremendous privacy concerns that come with it, and using google or yandex is a non-starter for a huge swath of your userbase.",-1,1,-1,0.8575761914253235,0.7520443201065063,0.5503345131874084,-1.0,accept,majority_agreement
834783205,835,"they are still not addressing the main points though: why are they collecting the data they chose, why didn't they include the community, and why do they think this is apropriate way of collecting information about their __community__ (not product) my poll which has now over 1400 responses shows that 50% of respndants don't support the idea of any tracking at all. [a link] yet no response on this matter from audacity or muse.",0,0,-1,0.7291353344917297,0.5947635769844055,0.893162190914154,0.0,accept,majority_agreement
834784428,835,i think i should restate what i said directed at a developer earlier:,0,0,0,0.977779507637024,0.9671355485916138,0.9864118099212646,0.0,accept,unanimous_agreement
834785286,835,"exactly... this was less of an issue like this one, there was just a feeling that there needed to be a different direction for the development. libreoffice and openoffice are co-existing as well...but i'd guess the user base for ooorg is a lot smaller now.",0,0,0,0.8627983927726746,0.9135698080062866,0.9188283681869508,0.0,accept,unanimous_agreement
834793721,835,"you will note that in these cases, the main developers of the project moved to the fork.",0,0,0,0.9883902072906494,0.9890968799591064,0.992923617362976,0.0,accept,unanimous_agreement
834800275,835,thanks for calling my suggestion boring and practical... lol,1,1,-1,0.9802750945091248,0.9933708906173706,0.973543107509613,1.0,accept,majority_agreement
834800882,835,"oh **** i didn't even see someone else made the same suggestion, sorry",-1,-1,-1,0.9895790219306946,0.9918294548988342,0.996057629585266,-1.0,accept,unanimous_agreement
834801183,835,"they are not addressing this and will not address it because it is all pretty normal for them. musescore already added google analytics, so this was the obvious next step. just integrating the new acquisition onto the same toolset they have in place. the responses here are the exception, not the norm. i bet some of them are baffled to what is going on, doesnt make sense to them. i personally have very little hopes of google analytics being taken out. it is now the modus operandi of businesses and corporations. in order to grow in userbase, understand which areas need attention, generally bringing ""value"" to the ""product"" :nauseated_face: they take analytics as a necessity. this is a hard clash of ideals between corporate attitude and free, open-source ethos. not everyone shares the same ideals of, for example, blender's author when he says he has no interest on money. a recommended watch [a link]",-1,-1,-1,0.9357332587242126,0.9460185170173644,0.7862563133239746,-1.0,accept,unanimous_agreement
834801199,835,"it's alright, i was genuinely laughing....",-1,1,1,0.8080829977989197,0.8242670893669128,0.9906665682792664,1.0,accept,majority_agreement
834803380,835,"well stated, but it's our job to show muse their corporate mindset will not get them very far here. audacity's roots are in the scientific community, that its where it grew from. i doubt many users are interested in the musings or wills of our corporate overlords. (pun intended)",-1,-1,0,0.6993313431739807,0.8589224219322205,0.6918480396270752,-1.0,accept,majority_agreement
834807190,835,"in those cases that is true. but there are lots of other cases where the original developer left a project, and others took over by forking the project. my point was that the concept of forking a project due to disagreements over development trajectories is not unusual in the open source world. whether the original developers move over, or if the fork gains the same following as the original was not really the point... addressing the lack of understand of the person i was responding to was the point.",0,0,0,0.8455610275268555,0.6183913946151733,0.8776567578315735,0.0,accept,unanimous_agreement
834808106,835,boo,0,0,1,0.6400018334388733,0.9614290595054626,0.440276950597763,0.0,accept,majority_agreement
834808145,835,boring and practical and easy to remember and on-brand and self-explanatory... is good name,-1,1,1,0.9477037191390992,0.9825602173805236,0.9242985248565674,1.0,accept,majority_agreement
834810966,835,i was just making a joke based on the openoffice.org -> libreoffice transition... but it might just stick. :),1,1,1,0.8596848845481873,0.9771425127983092,0.9931312203407288,1.0,accept,unanimous_agreement
834811079,835,"in these cases, the older projects are also more well known! please can we discuss forks as a last resort, because most people **will not ever** switch to your new audacity fork meaning they will not see the benefits of an audacity fork",0,1,0,0.7721019387245178,0.6077067255973816,0.964858055114746,0.0,accept,majority_agreement
834812702,835,"![a link] the poll i created is at 1500 votes, now representing 1% an equivalent of the alleged user base on the forum. the statistics remain unchanged 50% of responses state a firm no to any form of tracking. as always the poll is available at [a link]",0,0,0,0.9192456007003784,0.8872792720794678,0.6993021965026855,0.0,accept,unanimous_agreement
834813052,835,"right, this doesn't use an open source license in my opinion: [a link] in fact to quote the license: source license. however, the licensed work will eventually be made available under an open source license, as stated in this license. p.s. i see that someone else replied to this earlier....i'm still catching up on comments since i was away for a couple of hours. (hopefully caught up now.)",0,0,0,0.6200110912322998,0.8177016377449036,0.8055569529533386,0.0,accept,unanimous_agreement
834815012,835,"this just occurred to me, and i'm not sure whether anyone mentioned it already: if the telemetry is using methods and services that goes against the conscious of most privacy minded folks, it would mean that most linux distributions will build audacity without it for their repositories, and that will result in no user data from linux. wouldn't it just defeat the purpose of the telemetry from the start then?",-1,-1,0,0.6729820370674133,0.5478833317756653,0.9149755835533142,-1.0,accept,majority_agreement
834815648,835,just edit you `/etc/hosts` and no google analytics for you.,0,0,0,0.9644570350646972,0.98784339427948,0.9928092956542968,0.0,accept,unanimous_agreement
834821499,835,you shouldn't have to do that,0,0,-1,0.9727652668952942,0.8572986125946045,0.8499935269355774,0.0,accept,majority_agreement
834822265,835,you keep using ad blockers?,0,0,0,0.914932906627655,0.9401408433914183,0.9123675227165222,0.0,accept,unanimous_agreement
834823493,835,"yes, and i shouldn't have to. i use adblockers because i do not support super annoying and laggy ads, not to mention the tracking that comes with almost all of them. i strongly prefer websites that don't have ads at all. you did nothing to address my point whatsoever",-1,-1,-1,0.974346399307251,0.6402812004089355,0.9909735321998596,-1.0,accept,unanimous_agreement
834834673,835,"with this pr, telemetry would only be included in the official releases built through the github ci system; linux distributions building audacity from source on their own infrastructure won't include the telemetry bit *at all*. this means the project wouldn't get *any* data from *any* linux user installing it through their package manager in the first place. on one hand, i'm glad that none of my personal data would get sent to google and yandex. on the other hand, i'm pretty sure that means they wouldn't get potentially useful information from a significant chunk of their users so the collected data is incomplete. ignoring the privacy concerns for a moment, this functionality just seems badly implemented in its current state.",1,0,0,0.5691287517547607,0.4714796841144562,0.514911413192749,0.0,accept,majority_agreement
834838040,835,"incomplete is an understatement. from a statistical point of view it would be an invalid data set, which would be no basis for making any decisions (technical or otherwise). worse than badly implemented. it seems broken by design.",-1,-1,-1,0.9644573330879213,0.9623871445655824,0.9816458225250244,-1.0,accept,unanimous_agreement
834869857,835,maybe this pr is more targeted towards windows and mac os users?,0,0,0,0.9797520637512208,0.9887987971305848,0.969910442829132,0.0,accept,unanimous_agreement
834872543,835,"seems like this could skew data a bit. on 5/7/2021 17:46, andreis wrote:",0,0,0,0.8851322531700134,0.959706485271454,0.9800077080726624,0.0,accept,unanimous_agreement
834887247,835,"so, i gather you hadn't spotted the number of new forks then.",0,0,0,0.9818561673164368,0.9791421890258788,0.986562967300415,0.0,accept,unanimous_agreement
834891815,835,"i've used audacity all my life, since i was like 6 years old. i'm now 22. (take my data, mine it i don't care) and i did so on windows. i've also run linux exclusively for quite a few years. but these days, the only times telemetry genuinely annoys me is if it gets in my way. if i can turn off the targeted advertising that results from my data being collected. i don't care. the way analytics are being approached in this case is at best useless and at worse worrying. [a link]. i don't agree with the foam at the mouth raging mentality of ""audacity is dead, let's make a fork now."" (call it audavillage since you're reclused away from the city) i think i understand what happened here. an attempt at a useful feature was made by a community member who was well-intentioned, but did not know how to handle these things properly. using proprietary obscure services like google analytics and yandex metrics. as well as explicitly storing records of ips and uuids. the main developer of ardour has popped up in this thread and mentionned how ardour uses (used) anonymized telemetry to get a better idea of the divide in operating systems amongs their users. this is useful info. that can be guessed from people downloading the app. i will say, a manual analytics feature that lets you get a full system report including data about audacity to put into a bug report would be useful. but automated background analytics aren't. recurring data can only ever be used for engagement metrics useless to development. i realize this is a mess of a comment. sorry. i wish the best to the audacity team.",-1,-1,-1,0.9852227568626404,0.9840562343597412,0.9818794131278992,-1.0,accept,unanimous_agreement
834900047,835,"so, who's starting the preventive, no telemetry fork of audacity?",0,0,0,0.9262829422950744,0.9677372574806212,0.9631433486938475,0.0,accept,unanimous_agreement
834918254,835,"people who are focusing on there being analytics, and not the specificities of analytics being provided by large, known to disrespect privacy megacorps, are massively missing the point and proving they don't actually understand why anyone was originally concerned about analytics in general, and are just jumping on what they perceive to be a cool fad. **analytics can be great tools for developers** for a multitude of reasons (although i don't agree with her stated approach to invasive telemetry, has brought up some good ones, and i find 's reply [a link] to be perfect in every way), but **the use of google and yandex tools is concerning and egregious, and goes against the very foundational ethical philosophies of a floss application.** i really, highly hope the audacity team takes into consideration why going with these tools is harmful. if they aren't quite sure, i'm sure many people in their community are more than welcome to help them understand. though i would [a link]",1,-1,-1,0.5323168635368347,0.7840483784675598,0.8400350213050842,-1.0,accept,majority_agreement
834926949,835,"anyone who posts a pro-analytics comment who does not wish to immediately out themselves as a hypocrite should include their ip address in their comment. either it is ""safe and anonymous information"" or it isn't, you can't have it both ways.",0,-1,0,0.8539314866065979,0.6035221815109253,0.8034687042236328,0.0,accept,majority_agreement
834944231,835,here's mine: 127.0. 0.1 :),1,1,0,0.8341412544250488,0.9834100604057312,0.7474777698516846,1.0,accept,majority_agreement
834950793,835,"libredacity, but that sounds weird lol",-1,-1,-1,0.9454100131988524,0.9867877960205078,0.9813201427459716,-1.0,accept,unanimous_agreement
834954093,835,audience - audio editor with the audacity to listen to it's users,0,0,0,0.7586235404014587,0.965958297252655,0.8222634196281433,0.0,accept,unanimous_agreement
834960893,835,"i'd rather not see a fork, but that name would be a fun one :^)",1,1,1,0.9910464882850648,0.9956381916999816,0.9935571551322936,1.0,accept,unanimous_agreement
834964414,835,"thanks for the vote of confidence on my comment...it certainly took a while to put it together, and i still feel like i could have done some more... like gathering more policies around telemetry in other open source projects just to provide more examples that handle it appropriately.",1,1,1,0.9708622694015504,0.9617044925689696,0.9691740870475768,1.0,accept,unanimous_agreement
834969949,835,"i have changed my opinion. there should be zero telemetry in audacity whatsoever, even if it is collected and stored in an anonymized, consentful way. has already demonstrated that he [a link]: , you may think less than 50 people complaining is irrelevant. you are wrong. 50 people complaining is actually *a lot*. it is your capitalist mindset that is irrelevant. you can't buy trust. what has your money done for audacity? you've hired at least one new developer () who has no history of contributing to audacity. the only reference i can find of contributing to foss is a link to a [a link] from his linkedin profile. now some of the first code he writes for audacity sets off this shitstorm? i'm not saying you shouldn't hire anyone who doesn't have a prior history in foss to work on audacity -- that would amplify existing biases -- but did you even consider looking for foss audio developers to hire? when redhat hires the fedora project leader, they don't just hire any random programmer. they hire someone from the community and who they hire is subject to the advise and consent of the volunteer elected representatives of the fedora community, as specified in [a link]. did you even know that recently started asking for financial support for his work? i'm not trying to speak for ; i don't know if he would even want the job. but it sure seems you didn't ask or were even aware that he was seeking financial support to work on foss audio software. and now through your mismanagement, he's prepared to maintain a fork and make your investment in the audacity trademark worthless. you've gone about this all wrong. you need to understand that the community is in charge here, not you, and come to us humbly, asking how to make amends and build trust. the first step would be closing this pull request and committing to not adding any telemetry to audacity. a second step could be setting your new hires to work addressing longstanding complaints from the wider foss community about audacity forking dependencies and making it hard to integrate audacity's build system with linux distributions' packaging policies. audacity does not exist in a vacuum. it is far bigger than the regular contributors and active users on the forum. it is one part of a large ecosystem of interdependent software.",-1,-1,-1,0.9712718725204468,0.9623043537139891,0.7704623937606812,-1.0,accept,unanimous_agreement
834974557,835,you sound retarded and self obsessed so i am not going to reply to individual points. now go watch your netorare,-1,-1,-1,0.9837707281112672,0.9855959415435792,0.9932398796081544,-1.0,accept,unanimous_agreement
834976188,835,"gah, i saw this happening as soon as i saw the muse announcment. no. no analytics, unless wholly self hosted. but also, most linux distros will build this without analytics, so your data will be near useless, as a large userbase is linux users. just a bad pr from the user story phase, right up to the systems architecture phase, and then still a bad pr in the user acceptance phase.",-1,-1,-1,0.904970407485962,0.9000487923622131,0.983515441417694,-1.0,accept,unanimous_agreement
834988630,835,"ah, i see you didn't follow the vitualbox and mysql debacles, huh?",0,-1,0,0.859634280204773,0.6196560263633728,0.9748564958572388,0.0,accept,majority_agreement
834989926,835,and then came mariadb,0,0,0,0.9825185537338256,0.9769079685211182,0.9513533115386964,0.0,accept,unanimous_agreement
834990255,835,"pr description keeps getting updated in a way that suggests there is no interest in dropping the telemetry. they just keep doubling down on why what they're doing is okay. it's not okay. my audio editing app does not need ""cross-platform networking"", and it certainly doesn't need a layer on top of that for ""future features"".",-1,-1,-1,0.5368064641952515,0.8397541046142578,0.9363628625869752,-1.0,accept,unanimous_agreement
834992606,835,"i agree, **no telemetry at all** should be in audacity. if this pr gets accepted, many people like me and people who value privacy will stop using audacity and musescore (and both will both likely be forked). prepare to become openoffice.org if this gets accepted! also, if you disagree, please put your ip, email, and your unix username below. it will be annonymized, i swear :)",1,1,1,0.9252938628196716,0.9942284822463988,0.9873772263526917,1.0,accept,unanimous_agreement
834997136,835,"nevertheless, they are now part of the audacity maintenance, since they are included. bugs in the ""vendor dependencies"" are now bugs in audacity.",0,0,0,0.9864872097969056,0.9763599038124084,0.9921773076057434,0.0,accept,unanimous_agreement
834999781,835,"does anyone know any good software alternatives that don't include telemetry? i heard about ardour somewhere, is it legit?",0,0,0,0.9624372720718384,0.96998929977417,0.9840294718742372,0.0,accept,unanimous_agreement
835004419,835,"ardour is a bit overkill. on 5/7/2021 20:52, siraxolot wrote:",-1,-1,0,0.9319579005241394,0.9200156331062316,0.6217333674430847,-1.0,accept,majority_agreement
835014624,835,"i'm on their website now [a link] and i thought i read something about some limited telemetry i don't recall what exactly, i can't find it on the site, and it might not even be real (but even if it was, it was nothing of the sort that's being proposed in this pr). and yeah, this program does look like overkill for a lot of us, but hey if we gotta drop something on such short notice to trade it for something that's even more, that's certainly a more pleasant surprise than dropping it for something less!",1,-1,1,0.7303088307380676,0.4896044731140136,0.8413097858428955,1.0,accept,majority_agreement
835020149,835,"well, ardour is a full fledged daw (digital audio workstation), of course it will be overkill compared to audacity, which is an audio editor, that's why if a pr like this, or something similar gets merged the only course of action is fork as there's no other good foss program to fill in audacity's use case, that of a ""simple"" audio editor.",0,0,0,0.8871324062347412,0.5993745923042297,0.8775602579116821,0.0,accept,unanimous_agreement
835054327,835,"as long as audacity **commits** to never enable telemetry by default in the future, i have no problem with this. i don't want audacity to become another firefox.",-1,0,0,0.7827707529067993,0.7823089361190796,0.6392282247543335,0.0,accept,majority_agreement
835058364,835,"there is a typo in this commit message [a link] also, i found a bug: [a link] this seems to have been copypasted from [a link], i think you meant to use `trailingsemicolon` and not `semicolonposition` in the npos check (as-is it looks like it can lead to bad things (tm) if the first semicolon is found and the ""expires="" semicolon isn't, leading to `cookiestring.substr (expiresposition, trailingsemicolon - std::string::npos)`) i'll stop using audacity if this pr gets merged. have a nice day",0,0,0,0.9396268725395204,0.987818479537964,0.9531983733177184,0.0,accept,unanimous_agreement
835085744,835,"i generally agree with this pr and i would argue it's probably better to implement it anyway against the backlash depending on the risk of creating a fork. the thing is, the upvote/down vote ratio is highly skewed because the sample size is not all audacity users but only the ones who are outraged by this. the ones in favor will probably not click on articles about this and search the pr afterwards and also upvote (like i did). sure, in this bubble the shit storm is big, but the bubble in general is fairly small and i doubt that this would be such a controversial pr if every audacity user had to vote on this before they could launch audacity again. as for the ""pro-people leave your ip address!"": no i won't, because i don't have to. you also don't have to opt into telemetry. to conclude: the community can still create a fork if this gets out of hand, but as of now i don't see why this pr alone would warrant it. edit: please explain the downvotes on this comment.",-1,-1,-1,0.9615878462791444,0.9046241044998168,0.6203252077102661,-1.0,accept,unanimous_agreement
835087545,835,"it's off by default and completely opt in. i honestly don't understand the issue. if you don't like it, you literally don't have to *do anything* to not share your data, because it *isn't*. my ip is also 49.183.159.93 by the way, not that this does anything because the security risk of a simple ip address is greatly overstated anyway.",-1,-1,-1,0.9489582777023317,0.9712371230125428,0.8864597082138062,-1.0,accept,unanimous_agreement
835093943,835,lol.,1,1,1,0.9773658514022828,0.9771733283996582,0.8333443999290466,1.0,accept,unanimous_agreement
835095133,835,"no, just like i don't have to opt in to telemetry.",0,0,0,0.9598905444145204,0.8560190796852112,0.9871538281440736,0.0,accept,unanimous_agreement
835102365,835,"at this point, your justification rings hollow. i will make no claims about your motives for making this change, but i will say that you've already significantly damaged the trust that the community has in the people making the decisions for this software. continuing to double down is only making things worse. drop this patch, take a step back, and evaluate the situation. you're only digging yourselves deeper. i get that you want to gauge how the people using audacity actually use the software, but this was never the way to do it. edit: it's also rather telling that you're even concerned with complaints about the use of private library versions. i'm sure a couple people here have voiced that concern, but the primary issue isn't the version of libcurl that's being included, it's the fact that libcurl is being included at all. it's the fact that you intend on adding *more* networking to an offline audio editor in the future. if you want to keep audacity the same and not anger the people who use it, you're going about it the wrong way.",-1,-1,-1,0.9622069597244264,0.9424904584884644,0.9664308428764344,-1.0,accept,unanimous_agreement
835126943,835,"welp, if this kind of karen tier comment is the support for this pr..... then there's no other way around, fork, and fork hard! :d",1,1,1,0.9856953024864196,0.9778429865837096,0.9884201288223268,1.0,accept,unanimous_agreement
835130141,835,the general lack of empathy you’ve displayed for people using audio software for reasons extremely outside of your use case or opposite of your geography. that same lack of empathy could ricochet through a general software tool that millions of people use for reasons entirely outside your understanding of human communication in general.,-1,0,0,0.7995016574859619,0.7149544954299927,0.5601402521133423,0.0,accept,majority_agreement
835136313,835,"the issue is that: a. it uses closed source telemetry providers that are well known to data mine b. the telemetry is not that useful considering that basically no linux build will include it enabled it's not necessarily a security issue, it's a privacy issue.",0,0,0,0.5636372566223145,0.9398837089538574,0.9086106419563292,0.0,accept,unanimous_agreement
835140299,835,"a meta-concern: if lots of apps decide that telemetry is important (even if it is disabled by default, with informed consent, and limited to sharing genuinely relevant data), then users are not going to have the time to stay aware of what information they are sending, to whom, and how to disable the items that they no longer wish to share. this is similar to the situation that cookie consent banners have arrived in. many websites may follow the rules, but the overall effect is that users are overwhelmed and lack sufficient agency to be confident about how their data is used. a scalable solution for the user population might require something more like a system settings dialog, where users could select what kind of information they are comfortable sharing, with the ability to add exceptions for specific types of application and/or data brokers. providing the ability for users to accurately vote with their data that way would help to create a telemetry/analytics data market, and increase the value of user data, encouraging data providers and application authors to play by the rules and maintain trust. on a personal note: in the long term, i think some level of data sharing is beneficial for people. it's difficult to exist entirely as an island. but not everyone feels safe or ready to share - especially when it is in a digital, nebulous way that their senses cannot detect. so we should always offer no sharing of data -- real privacy -- as a default, while explaining and showing the benefits (and drawbacks) that others experience from participating.",0,0,0,0.5308950543403625,0.7783563733100891,0.9172840714454652,0.0,accept,unanimous_agreement
835143113,835,how did you enjoy [a link],0,1,0,0.6113313436508179,0.5713533759117126,0.5791801810264587,0.0,accept,majority_agreement
835144474,835,i don't want to have to use audacity through a vpn sheesh,0,0,0,0.9356842041015624,0.8384747505187988,0.7049718499183655,0.0,accept,unanimous_agreement
835144586,835,"i am sad to see and -licameli actively supporting this at the top of this pull request. i would like to hear your responses to the criticism here. is this something you really want, or was this imposed by / ultimate guitar / muse group? where did the decision to implement this come from and why is there nothing publicly available about the proposal before any code was written? if you really think sending data about audacity users to google and yandex is okay, well, thanks for audacity, but i can't trust you anymore.",-1,-1,-1,0.9365376234054564,0.9855166077613832,0.9934741854667664,-1.0,accept,unanimous_agreement
835148384,835,ya know most people have dynamic ip addresses that change regularly right? my ip address changes almost every day.,0,0,0,0.961851954460144,0.9441139101982116,0.9387798309326172,0.0,accept,unanimous_agreement
835148432,835,"also friendly reminder to the new team members, that in case of a fork - audacity could actually die like openoffice did - it's gonna be a race then i suppose",0,0,0,0.8067537546157837,0.8595736026763916,0.6298747062683105,0.0,accept,unanimous_agreement
835149001,835,"while this is admittedly incredibly funny as a response, it isn't really the gotcha you think it is. analytics does not inherently mean collecting and storing data on ip addresses. there's plenty of useful data to be provided without any of that stuff being recorded. in fact, quite truthfully i don't know what analytics solution, third party or homegrown, would provide that, since i can't see it as useful data in any way. and if you're concerned about the mere connection to another party revealing said address, well... i hope you never visit the website for audacity, or downloaded prebuilt binaries, or used any application that uses a p2p system, or used any centralized package repository on linux. or, uh, accessed the internet in general really. this isn't a problem with analytics, this is just inherently how internet traffic works. any time a project will provide some sort of connection, they will see your ip. that's downloads, that's websites, that's selfhosted git, that's extension managers, that's repositories, that's support communications. an ip address is inherently public information, which is why you should be careful with what you do about it. if you're going to do embarrassing or illegal stuff that is trackable via ip, use a vpn. that's basic knowledge and this person being sloppy with downloading pornography doesn't indicate that this is a ""privacy concern"". sometimes we are responsible for our own actions. google and yandex should not be trusted for analytics because of way too many other privacy concerns. and opt-out is a dark pattern. opt-in analytics, through a solution that is both open source and privacy oriented, can provide useful information to improve an application and pinpoint issues and where things are failing. keep in mind crash logs are technically a type of analytics...",1,-1,-1,0.5241425633430481,0.9755963683128356,0.506672739982605,-1.0,accept,majority_agreement
835149574,835,not really. openoffice died because the original project's development slowed down to a crawl while the fork developed faster than oo ever did. that would not be the case with a fork of audacity done purely remove an **opt-in** setting. the fork would likely be playing catch-up with the original constantly. a better comparison would be something like firefox and the fork waterfox.,0,0,0,0.8909614682197571,0.8848423361778259,0.8801453113555908,0.0,accept,unanimous_agreement
835150339,835,so your solution is playing chicken with the foss community rather than listening to criticism?,0,-1,0,0.5383040904998779,0.5629347562789917,0.511522650718689,0.0,accept,majority_agreement
835150446,835,"welp, if the dev team is in support of this form of telemetry.... you know what time it is ![a link]",0,1,0,0.8609619736671448,0.7010310888290405,0.662427544593811,0.0,accept,majority_agreement
835152464,835,a few hundred angry karen's ranting on a github issue does not equate to the entire community surrounding audacity. i'd be quite willing to bet that the majority of audacity users don't care. remember we still live in a world where more people use facebook than desktop linux. the concerns expressed here are extremist in nature and niche.,-1,-1,-1,0.970796525478363,0.9374743103981018,0.7157593965530396,-1.0,accept,unanimous_agreement
835153688,835,"that would not be the case with a fork of audacity done purely remove an opt-in setting. the fork would likely be playing catch-up with the original constantly. a better comparison would be something like firefox and the fork waterfox. take a look at the [a link]. it's mostly 4 people. this situation has attracted a huge amount of attention, including by skilled software developers, some of whom (like myself) have years of experience building complex audio software. we have the means to fork audacity and take it in a different direction even if those 4 developers stick with muse group. it would be really sad if it came to that. i don't want it to go that way. they haven't merged this, nor any telemetry, yet. they can start building trust by: 1. committing to not adding telemetry to audacity. 2. explaining how the decision to implement this was made. 3. work with the community to change their decision making process to ensure nothing like this happens again.",0,-1,0,0.5430828332901001,0.633393406867981,0.7965489029884338,0.0,accept,majority_agreement
835153918,835,"very helpful to insult my comment as ""karen tier"" just because you disagree without explaining why. --- i don't understand what you mean by that, can you elaborate? i sometimes use audacity to cut up songs or voiceovers, but i don't need it professionally or on any major capacity. isn't that the average use case for this software? what does my geography (germany) have to do with any of this or am i missing a metaphor? i get that my opinion of ""don't take the backlash too seriously"" is not very popular, but i really couldn't understand what the backlash is about. extra dependencies and networking is a completely separate concern, but that doesn't seem to be the issue judging from the comments. i feel like most commenters are just enraged because their open source ethos clashes with the desire to make data driven decisions by using telemetry. since the tracking is optional and opt in, nothing changes for the user, so aside from technical considerations, how could this possibly be bad? i honestly don't get that and i'd like to understand it. --- a: only data from consenting users would be included in the data set though. b: windows/mac isn't affected by this and i would guess that that's still the majority of the users because at least for windows there isn't really a good alternative (don't know for mac).",-1,-1,-1,0.8734612464904785,0.9847853183746338,0.9777504205703736,-1.0,accept,unanimous_agreement
835154921,835,why does telemetry literally gets added to every single thing? don't you think we're getting tracked enough like that? why do you want to know everything? you should not see what we're doing and how we're using the app.,0,0,-1,0.6817991137504578,0.5719823241233826,0.8137592673301697,0.0,accept,majority_agreement
835155079,835,"i'm sorry you feel that way, but all software has ethical and moral ramifications. those creating and using floss software are going to be incredibly interested in being both ethical and moral in the software that is produced, since floss values are foundationally about software that is honest about itself and does as little harm as possible, while being open and available for all. closed source, third party analytics solutions do not fall within those goals and leave the door for plenty of abuse, not necessarily from the audacity developers, but from providing more compilable data for a megacorp entity that is known to use software unethically, providing data to governments and other corporations that might seek to do harm to marginalized people and communities. this is absolutely a justified conversation to be having, even though the toxicity in some places is rather unwelcomed and disappointing.",-1,-1,-1,0.9877881407737732,0.9859074354171752,0.9694812297821044,-1.0,accept,unanimous_agreement
835155522,835,"then read the 800+ comments explaining that above. yes, all of them. it does not seem that you have.",0,0,0,0.9736264944076538,0.9576932787895204,0.9872337579727172,0.0,accept,unanimous_agreement
835156904,835,"then... don't turn on the **opt-in** telemetry, and you won't have to. simple.",0,0,0,0.9448733329772948,0.9088855981826782,0.911229133605957,0.0,accept,unanimous_agreement
835159591,835,"have you heard of goodhart's law, ? if you switch from ""listening to community feedback and trying to make choices that satisfy people"" to ""trying to maximise some telemetry metric as a proxy for community satisfaction,"" then that metric will rapidly become useless for that purpose. besides, making development decisions based off of big data:tm: is setting yourself up for failure, especially with open-source software. if your contributors don't have full and unrestricted access to the data you're making decisions off of, then you're going to be undercutting them at every turn. at that point, a fork would be inevitable. some people having telemetry on and others not means that the people with telemetry off will be silenced for being concerned about privacy. given that these people often (but not always) use similar platforms, it might lead to support for those platforms being underestimated, as well as other annoying incorrect estimations/evaluations caused by this confounding factor. that means it'll mean the data collected is inaccurate and, well, that just defeats the purpose, doesn't it?",-1,0,-1,0.7661857604980469,0.5241348147392273,0.5621961355209351,-1.0,accept,majority_agreement
835162389,835,"i might as well throw in my two cents: i like my privacy. if you include telemetry, i'd prefer it to be an option in the settings, which is only enabled when the user navigates to it and turns it on (not ever prompting on startup, etc.)",1,1,0,0.97298264503479,0.9384724497795104,0.6648666858673096,1.0,accept,majority_agreement
835163173,835,"privacy concerns are not ""extremist in nature and niche.""",0,0,0,0.5519108772277832,0.9670344591140748,0.9641389846801758,0.0,accept,unanimous_agreement
835163964,835,"yes. windows and mac users are affected by this since they are the only people to have builds that have telemetry in them. as mentioned by several other people, this degrades the value of the telemetry as a large portion of the user base just isn't included. i'm not against telemetry, i just don't think that this pr is doing it right. in my opinion, it should be self hosted, completely transparent and as anonymous as possible. ideally there would also be a way to toggle what is collected, but not a lot of projects do that.",-1,0,0,0.6022029519081116,0.6846344470977783,0.5454762578010559,0.0,accept,majority_agreement
835165635,835,"good old ""i have nothing to hide so i dont care for privacy"" edit: [a link] starting on this because, guess we'll have to, feel free to join in.",1,1,1,0.8040885329246521,0.9795618057250975,0.6566452980041504,1.0,accept,unanimous_agreement
835166402,835,"this is all the more reason to care as somebody that cares enough to be replying here. quick thought: i always thought it was subversive for audacity to have the name that it does, as if the open source community had the audacity to release a professional competitor to crap like cool edit pro -> adobe audition. i _never_ expected the name to carry such irony where there was audacity enough to square up against that community by acquiring the software, this is just weird.",-1,-1,-1,0.989614188671112,0.9860273599624634,0.9900389313697816,-1.0,accept,unanimous_agreement
835169819,835,"i haven't heard of this law but it's an interesting read. however, i don't think it applies here. i don't think the goal of this telemetry is to get metrics to optimize for but rather to understand which effects & features are most popular (and then optimize those depending on real feedback and needs). i definitely think the data should be public and that self hosted analytics should be used instead of google/yandex. much of the outrage seems to be about telemetry in general though and not just the provider choice, that's why i was confused. also, you could normalize the statistics if you know how many users you have for each platform (which they probably have data on already).",-1,-1,0,0.4014025926589966,0.5660061240196228,0.4563559889793396,-1.0,accept,majority_agreement
835172722,835,"you fundamentally cannot get representative statistics of how many people use software on linux. this is a feature, not a bug. linux users get most of their software through their distribution's package manager, not the application developer.",0,0,0,0.9568811655044556,0.7740793228149414,0.959713578224182,0.0,accept,unanimous_agreement
835179331,835,"do you think there's a disparity between feature popularity? as for bug reports, linux users will report them and include logs themselves, but windows/mac users probably won't. in that case, it just improves windows/mac bug reporting without affecting the already good linux bug reporting. i doubt that the inaccuracy of the data set actually impacts the quality given the specific type of data collected.",0,0,0,0.9357260465621948,0.9096565246582032,0.9786412119865416,0.0,accept,unanimous_agreement
835198341,835,"yay, the thumbs down finally broke 3000! i'm immediately reminded of this one story: [a link] and then that whole bit with noah and ham... (not that i think the techy computery crowd that'd be on this thread would be all that interested in theological moralizings of these old dead white(according to the us census!) men, just a not-quite-random example of the value of privacy being recognized even before the industrial revolution)",-1,-1,1,0.5877562165260315,0.98719984292984,0.9097486138343812,-1.0,accept,majority_agreement
835201167,835,"you can, using telemetry, that is the entire point of this pr. what has gone utterly bad is the *how* part. why google and yandex of all places, instead of using stuff like firefox's telemetry infrastructure, is beyond me.",-1,-1,-1,0.9592544436454772,0.943314790725708,0.9696099758148192,-1.0,accept,unanimous_agreement
835205365,835,"i think there are few other audio editors out there. i use my own, [a link], but that hardly covers even a fraction of the functionality of audacity (for example, doesn't offer volume breakpoint editor or independent tracks, doesn't feature nyquist etc.), it's basically constrained to what i need in my work, though i'm open to additions.",0,0,0,0.9081878662109376,0.8890321850776672,0.8942704200744629,0.0,accept,unanimous_agreement
835215898,835,"whataboutism, strawman argument and false equivalence in one post! just because platform a does thing x, platform b doing x doesn't make it right. besides browsers sandbox a lot internally, have adblockers and scriptblockers because people disliked telemetry this much. such smokescreens only derail any meaningful discussions.",-1,-1,-1,0.9732760787010192,0.964374303817749,0.9904838800430298,-1.0,accept,unanimous_agreement
835244902,835,"thank you, now i have religious justification why this pr is bad. without getting into the weeds about morality, there seems to be a widely agreed upon right to privacy as a human right.",1,1,1,0.791477620601654,0.563718855381012,0.6488586664199829,1.0,accept,unanimous_agreement
835246913,835,"if this would be strictly optional and disabled by default for users of a free software, this would be an isolated, non-mainline branch that would never be filed as a pull request against trunk. as likely is a knowledgeable software developer it is highly likely that they know how software works and what the consequences are and how this is _not_ in favor to audacity users. sure otherwise this pr would have never been filed, despite even stayed open longer than 48 hours. --- there is better utility for users doing bug reports than telemetry even on less accessible platforms . so if you really feel about improving that, could you elaborate what makes you, want adding telemetry to audacity to enable users? telemetry is not user participation in a software project. it's the opposite. and it is really hurting to see it here, as free software development has the potential to actually give answer to such problems, like the support problem in commercial software development.",0,0,0,0.8548769950866699,0.900063693523407,0.9091002345085144,0.0,accept,unanimous_agreement
835250737,835,"don't know if it's been mentioned yet and i don't feel like reading all those hundreds of comments, so i'm gonna mention it here: the screenshot makes the ""accept"" button more pronounced. a common dark pattern, sure, but one that stands against gdpr regulations. might want to rethink that.",0,0,0,0.64412522315979,0.6482565999031067,0.7942214012145996,0.0,accept,unanimous_agreement
835253882,835,"telemetry is unnecessary for a project like this. if audacity crashes for someone, they can just create a new issue about it. if you don't want to support a specific os version, create an issue and let the community decide. your concept literally shows that the ""send usage data"" is the focused button, which is nothing but a dark pattern. with this layout, the majority of users will not make a conscious choice and instead choose the big blue button on the right.",0,0,0,0.8070347905158997,0.7353338599205017,0.5946167707443237,0.0,accept,unanimous_agreement
835254026,835,"while rethinking, perhaps _privacy by design_ is important as this is the actual software development and it affects the design of the software (which includes the user interface (ui) but goes far beyond it, like how the code is organized, which libraries are used or taken in etc.). only given thought, the user is actually the primary concern of the developers here.",0,0,0,0.9633073806762696,0.9812965989112854,0.9866536259651184,0.0,accept,unanimous_agreement
835263738,835,reminder: poll [a link],0,0,0,0.9783198237419128,0.992141842842102,0.9932177662849426,0.0,accept,unanimous_agreement
835264553,835,"screenshot: please note that ""personal data or sensitive information"" includes the ip address. if you collect it you cannot write what you are currently writing. see also: [a link] also, what others say: this is still a ""dark design pattern"".",0,0,0,0.9769716858863832,0.9676800966262816,0.9886930584907532,0.0,accept,unanimous_agreement
835266571,835,"quite offtopic, but i think it would be a great idea for github to implement some sort of poll system for this kind of debates over prs. it would be extremly useful.",1,1,1,0.5501078367233276,0.8554987907409668,0.9446810483932496,1.0,accept,unanimous_agreement
835267745,835,"also, a unique identifier will always make it pseudonymous at best, and this cannot be called anonymous then. but this is not the point i want to emphasize. the whole practice of tracking should not be included here (or pretty much anywhere).",0,0,0,0.8279736042022705,0.967365860939026,0.9802983403205872,0.0,accept,unanimous_agreement
835277756,835,"this is probably the most disappointing response to these concerns i have seen in quite some time. ""they've already taken my freedom and privacy anyway, so what's the point?"" is a truly upsetting stance to see. not caring is not the same as agreeing. we cannot knowingly stand by and allow others to spy on people without their explicit consent. and honestly, they don't need to be spied on anyway. our concern is more that despite this data collection being utterly useless, they're still doing it anyway - and not for the reasons they say, either. it is quite evidently just for the sake of data mining, as evidenced by their choice to use closed source platforms owned by companies that are quite literally known for selling people's digital existence around like it's nothing. these things have ethical issues attached, and really paints a bad image on the character of the new maintainers. if, as a community, we cannot trust the new maintainers to make decisions with our best interests at heart, and it seems that they pertain more to computer industry than computer science, we are left with no choice but to express how we feel and work for change.",-1,-1,-1,0.9851696491241456,0.9876125454902648,0.9879922866821288,-1.0,accept,unanimous_agreement
835284024,835,"it's not spying. it's telemetry. they do not care what's on your pc or what your name is, or what your favourite colour is. they are recording stats only relevant to audacity. the data is anonymous. no personal information is collected. we're talking about the same kind of information that almost every website, **including this one**, gather about usage patterns already. there is nothing nefarious about this, it's just useful information for product managers to make decisions about the direction of a project. what part of ""opt-in"" does everyone in this thread find so hard to understand? just so we're clear, in case there's any confusion, ""opt-in"" is short for ""opting in"", opting is to make a choice. opt-in means that this will be off by default. telemetry will not be enabled unless **you** deliberately choose to enable it, and go do so. so you can relax. no one will be spying on you. take off the tin foil hat.",-1,-1,-1,0.7033162117004395,0.7367064952850342,0.6640244722366333,-1.0,accept,unanimous_agreement
835287660,835,"can we stop using the term telemetry, and call it what it is: tracking. and stop to be naive that a for-profit company's only goal is to improve the software? they need to make it profitable, so this is the entry point to connecting it to future paid subscription cloud whatever service and/or selling behavioural data to whoever can use them to build whatever models, if not for advertising then perhaps to build a better commercial product. point. and as for networking at all or not - stop reading here if you just think this is tinfoil hat - an audio editor is also a journalistic tool. why on earth do you want to open the possibility that as soon as the ""basic telemetry"" has been extended in some future version, the data thus obtained (not necessarily by the vendor, but whoever manages to hack the connection) can be used to identify people who have been editing particular sounds, interviews, whatever. there is simply no good reason to add this.",0,0,-1,0.5150135159492493,0.5299739837646484,0.938979148864746,0.0,accept,majority_agreement
835290439,835,"you can't, as has been explained at least 4 times above. it's foss, and (many of) the downstream users strip out tracking. has anyone got a promising fork yet?",-1,0,0,0.8528326749801636,0.984350562095642,0.9875541925430298,0.0,accept,majority_agreement
835291066,835,"the data is not anonymous in any legal sense that is compliant with gdpr and other consumer protection laws worldwide; the data processor is google analytics and/or yandex, both of which will record a variety of data and metadata including ip addresses, which are not only pseudonymous but considered personally identifiable information. while not ""personal"" in a sense, when you're a major advertising company already collecting lots of user data, crossing information and finding out who you are is trivial. the mere fact there exist websites that may not comply does not make your argument valid. dark patterns are frowned upon (see pr description), and implicit tracking acceptance (see code) is not consent (see [a link].",-1,-1,0,0.8984347581863403,0.5382413864135742,0.9775832891464232,-1.0,accept,majority_agreement
835293820,835,this is mistaken. dark patterns are not frowned upon - they are illegal. 57 mil might be small change for google - would be it small change for musecore?,0,-1,0,0.7414939403533936,0.8847830891609192,0.7281078696250916,0.0,accept,majority_agreement
835295775,835,"the [a link] towards people in this discussion voicing their concerns on *who* (e.g. google and yandex) will be using your data besides the project maintainers/developers (e.g. muse group) in a closed system - that is used to collect large amounts of data based on profiles, which are (also) derived from an ip address and can be identified across many websites and locations - is not helping your point across at all. please do not conflate that with the topic of *if* there is some form of tracking/telemetry. trying to discredit other people's factual assertions based on an [a link] (e.g. ""everyone is being tracked by everything by now anyways"") or an [a link] (e.g. ""why are you even using github, it also tracks you?"") is not providing any valid argument *for* this pr being merged.",-1,0,-1,0.951334834098816,0.6388581991195679,0.714508593082428,-1.0,accept,majority_agreement
835296052,835,"unfortunately not everything that's usually considered dark patterns are explicitly made illegal. i'm not very well versed on gdpr legalese but i'm not sure a ""default/highlighted action button"" of accepting is an illegal dark pattern in this instance.",-1,-1,-1,0.8951115608215332,0.8958421945571899,0.8023484945297241,-1.0,accept,unanimous_agreement
835301684,835,"what happened to the ips? **in the original post you mentioned both services collecting ip information.** this isn‘t mentioned any more in the updated post, but i find this a bit suspicious. i honestly doubt that there is a way to disable that. so please be honest and mention it! i don't like this way of dealing wih criticism. that‘s also opposing the statement in the screenshot – **ips are both personal data and yield to an estimated location information**.",-1,-1,-1,0.9833994507789612,0.9873839616775512,0.9897106289863586,-1.0,accept,unanimous_agreement
835303450,835,it is.,0,0,0,0.9641651511192322,0.985529899597168,0.9850444793701172,0.0,accept,unanimous_agreement
835317707,835,"the toll for the introductory post counts 3750 negative emojis and 252 positive emojis. those are pretty staggering numbers, and if you can't see the writing on the wall and continue with this implementation **against the will of 93% of your userbase**, we will have to assume that audacity is no longer fit to serve its user's needs and instead serves muse, google and yandex. we had a good run, folks.",1,1,-1,0.9736566543579102,0.7951083183288574,0.6492770910263062,1.0,accept,majority_agreement
835322375,835,"telemetry, clas... closed source incoming?",0,0,0,0.98732191324234,0.9827494621276855,0.9943727254867554,0.0,accept,unanimous_agreement
835325573,835,"well, to be sure, companies are doing their best to ""interpret"" the boundary here. attached is the cookie selection of one of germany's national newspapers. tell me if you don't find it obvious that you ""should"" click the black button (""accept all data collection""). ![a link]",0,0,0,0.7471058368682861,0.9308815002441406,0.8928031921386719,0.0,accept,unanimous_agreement
835327771,835,"i am waiting on an official response from audacity team before doing any work on that. let's give them the benefit of the doubt, you know.. innocent until proven guilty. sure, not a lot of hope for them to go in the right direction, but surprises happen sometimes.",-1,-1,0,0.7773447632789612,0.9835314750671388,0.494057297706604,-1.0,accept,majority_agreement
835334588,835,"i would vote to support the falktx fork, if it will be necessary.",0,0,0,0.9738808870315552,0.9886685013771056,0.9575426578521729,0.0,accept,unanimous_agreement
835336024,835,"please, call it **audience** and i promise i will work on the logo if you need one!",1,0,1,0.9299275875091552,0.5437204241752625,0.886179506778717,1.0,accept,majority_agreement
835343791,835,off topic but i feel like github could really do with threads (similar to how reddit does it?) because the amount of different discussion in these replies is very overwhelming also my poor inbox........,-1,-1,-1,0.9871370792388916,0.9801200032234192,0.9954723715782166,-1.0,accept,unanimous_agreement
835350229,835,"man, call it ""honesty"" if you go ahead with that, pwweease ;p",1,1,1,0.9453868865966796,0.9004378914833069,0.9798873662948608,1.0,accept,unanimous_agreement
835357725,835,":face_with_tears_of_joy: thanks i did have a good chuckle ahaha sadly not me though, since i'm on cg nat and several hundred connections share my ip at any one time.",1,1,1,0.982413411140442,0.9899556636810304,0.9936426877975464,1.0,accept,unanimous_agreement
835361859,835,![a link],0,0,1,0.9475814700126648,0.9432068467140198,0.5592244863510132,0.0,accept,majority_agreement
835367921,835,"i think this a good time to take a hard stance against automatic upload of tracked data (""telemetry"" is a word used to sugar coat).",1,0,0,0.8289656639099121,0.6389521360397339,0.900453507900238,0.0,accept,majority_agreement
835369925,835,"it is opt-in. on first run with this pr, you are asked if you would like to opt in. it is a binary choice, opt in or opt out. your choice is remembered and you are not prompted again, but can change choice option in preference settings should you wish to.",0,0,0,0.981361210346222,0.9807543754577636,0.9907425045967102,0.0,accept,unanimous_agreement
835371682,835,"jack support is broken in audacity 3.0.2. i fixed it here: [a link] a bit too late now, but i wish that github users would observe basic github etiquette.",0,0,-1,0.9725410342216492,0.9335851669311525,0.6756278872489929,0.0,accept,majority_agreement
835375773,835,"yes it is opt-out by default. there is a one time dialog that asks if you would like to opt-in. if you choose not to opt in, that's it, no nags.",0,0,0,0.9768630266189576,0.967502772808075,0.9850578904151917,0.0,accept,unanimous_agreement
835377528,835,"that's not correct. you are misreading the code. it is opt out by default. telemetry is only enabled if you explicitly opt in. if you don't believe me, please test it yourself.",0,-1,0,0.6926662921905518,0.6518340706825256,0.8619309067726135,0.0,accept,majority_agreement
835378995,835,"this is misleading. the current pop-up has the ""yes"" more prominently than the ""no"". ![a link] this is a gdpr violation. and makes it look as the ""yes"" should be default and preferred. please change that. also there is some oddity with [a link] where while the tracking preference is set to false at the start, later on the fallback value is true.",-1,-1,-1,0.8141065835952759,0.824729859828949,0.9438223242759703,-1.0,accept,unanimous_agreement
835379483,835,as steve says - and if you use tools > reset configuration that will turn off the sending of analytics as part of its factory reset of preferences (i qa tested that bit a couple of days ago),0,0,0,0.9876378774642944,0.9897632598876952,0.9944990873336792,0.0,accept,unanimous_agreement
835379546,835,"my apologies at the time of writing i did not know my distro was stuck on v2.4.1. (the v3 won't build on most linux distros, including archlinux) you guys should look into de-vendoring wxwidgets incidentally that doesn't change the fact that this pr is utter nonsense (not to mention complete unmaintainable spaghetti code) anyway you guys can do so much better than bending over and letting a megacorp feast on your users.",-1,-1,-1,0.9310743808746338,0.9695342183113098,0.9914315938949584,-1.0,accept,unanimous_agreement
835380324,835,that is likely to be changed (as one of the qa testers involved i pointed that out to the developer as part of my initial feedback),0,0,0,0.985836148262024,0.9903860092163086,0.9929996728897096,0.0,accept,unanimous_agreement
835380631,835,![a link] btw reposting the latest results cos the devs are lurking over 2000 responses in less than 24h. 50% of people don't want tracking. about 91% of people don't want google tracking.,-1,-1,-1,0.9348539113998412,0.8615433573722839,0.5318217873573303,-1.0,accept,unanimous_agreement
835381580,835,"it might help the authors to ignore the shitstorm by drawing an analogy with teh following tweet. [a link] point is some linux people are perenially outraged and the one's clamoring about forks are also the ones with exactly 0 prs. i do hope that you make the telemetry non-intrusive, only for essential use cases and mandatory so that correct data is collected. please ignore the fud-stricken sheeple.",-1,-1,-1,0.9158753752708436,0.9884352684020996,0.954094171524048,-1.0,accept,unanimous_agreement
835382110,835,"also forgot to mention as has been repeated ad-infanitum throughout this pr ""anonymous"" is a misleading statement. it is not accepted that googles session uuid's are anonymous and it is known that these cookies can be correlated with other data points in googles database to ""de-anonymise"" the user and determine who it is exactly. sometimes the cookie and ip is enough for this process, for example if the user is using any google service from the same computer at the same time.",0,0,0,0.8391160368919373,0.9408122897148132,0.9603339433670044,0.0,accept,unanimous_agreement
835382819,835,"now into personal / group attacks here? please, stop this nonsense. just because some of us have 0 prs in audacity does not mean we do not matter or should not have a say in the matter. as a developer, i take as personally responsibility to lead by example. common folks do not completely understand the implications of analytics and tracking. if they see some developers being okay with it, they will just trust it and go along with it as well. what a terrible example we give to these people. also, just because some of us have not directly contributed to audacity, doesn't mean we are not involved. some people here maintain the backends audacity ends up talking to, to be more specific, jack. what an awful statement to make...",-1,-1,-1,0.9889793395996094,0.9877687096595764,0.9908492565155028,-1.0,accept,unanimous_agreement
835383332,835,"i really don't know why you're on the side of pro-tracking. i checked, your're not shown to have ever contributed to audacity on your profile. what do you stand to gain from having yet another program listening to your activity? i mean maybe you believe this is going to help move development forward, but in the lengthy and heated discussion over the last 2 days i think it has been over stated by developers of various projects that the benefits of tracking is dubious at best. so i have to ask, what's your angle here?",-1,-1,-1,0.8542847633361816,0.8766918182373047,0.9602667689323424,-1.0,accept,unanimous_agreement
835384298,835,"hi, i'm someone who uses windows as their main os and doesn't do any coding of any kind. a while back it turns out that i've had to make a github account just for the sake of reporting bugs, problems or even adding in my own two cents to crap like this pr purely because it actively affects me, the end user. as the person who is using the app, i feel i have a right to kick up a fuss when something that is overtly shitty and bad is trying to get into the application i use at least once every week. stop making broad sweeping generalizations and stop trying to shut down everybody's right to speak out against things. part of the beauty of community run and developed software like audacity is that people like us (in theory) get a say in what does or doesn't get added to the program.",-1,-1,-1,0.9814345836639404,0.9854190349578856,0.9831869602203368,-1.0,accept,unanimous_agreement
835384880,835,"with over 3000 thumbs down it is clear what people think about this. it's an audio editor, it shouldn't make any network connections at all. let alone track users, specially when the tracking is done with parties like google and yandex. i don't care if it's opt-in or opt-out, tracking users doesn't belong in an open source audio editor.",-1,-1,-1,0.5664925575256348,0.783735454082489,0.93647563457489,-1.0,accept,unanimous_agreement
835385336,835,"hello, i am also an end user on windows. i don't want any telemetry, thank you! what a terrible way to dismiss an entire segment of community by comparing apples to oranges. audacity is foss for audio manipulation, not a game that more or less failed to meet it's own goals. i suggest you learn the difference, otherwise i'd be seriously concerned about your contributions.",-1,-1,-1,0.9898545145988464,0.9909148812294006,0.9956982135772704,-1.0,accept,unanimous_agreement
835385375,835,second,0,0,0,0.942489206790924,0.8940228223800659,0.9609209299087524,0.0,accept,unanimous_agreement
835385777,835,"also, just getting this in now before some smartarse tries to make a strawman over it again: yes, i'm using windows and yes, it is indeed windows 10. however, when i installed the os, i took an extra hour to remove 90% of the crap that it comes with and disabled pretty much all of the telemetry and extraneous bullshit in it. me using windows does not make my argument against this pr any less valid, nor does the fact that i don't write code.",-1,-1,-1,0.881924569606781,0.8893570899963379,0.82407546043396,-1.0,accept,unanimous_agreement
835387023,835,"privacy is a universal human right, so if you don't respect it, there's no reason to respect you. you broke ""etiquette"" the moment you tried turning a foss project into a spyware delivery platform for a russian panopticon.",-1,0,-1,0.8972921967506409,0.4982425570487976,0.8847880363464355,-1.0,accept,majority_agreement
835388078,835,"i don't think muse acquired audacity only to purposefully destroy its userbase. muse is not in the position to force anyone to do anything. if they want to retain their userbase and avoid another libreoffice/openoffice situation, they have no choice but to respect their users wishes by honoring the preferences. also, please don't use personal insults as a way to voice your disagreement.",-1,0,-1,0.5538707971572876,0.5858051776885986,0.7952447533607483,-1.0,accept,majority_agreement
835388812,835,how is telemetry looking on this pr? seems a lot of people have given very useful feedback.,0,1,1,0.6898883581161499,0.7087948322296143,0.96803480386734,1.0,accept,majority_agreement
835389784,835,"i have collected statistics which show a large number of people don't want statistics collected. of course opponents to this view who are pro data collection seek to discredit my poll by claiming that data collection is biased and provides an incomplete view, so cannot be trusted for making a decisions about data collection. [a link]",-1,-1,-1,0.8460667729377747,0.6721771955490112,0.6046916842460632,-1.0,accept,unanimous_agreement
835400394,835,"here's an easy way the audacity fork can get a quick development the original lacks, upstream the patches from every distro, that will even make it easier for the fork's adoption.",0,0,0,0.9811038970947266,0.9704102873802184,0.9809619784355164,0.0,accept,unanimous_agreement
835401083,835,"tbh regardless of the outcome of this pr i am tempted to contribute to the dependency de-vendoring of any fork that emerges, so i can get some bug fixes on arch.",-1,-1,0,0.8078575730323792,0.8033024072647095,0.720801591873169,-1.0,accept,majority_agreement
835407005,835,"as a developer, i can understand the want to add telemetry. this does not change the fact that the public has obviously spoken. listen to them. _they_ are your users. i personally believe that adding things like telemetry in this form is a gateway to more data. the fact that they are using google makes this far worse. adding a custom _networking_ library to an _offline_ audio editor has got to raise some eyebrows, including mine. take a step back, and listen to these comments. simply put, you would lose a large portion of your users, including myself. to those who are pro telemtry, i can once again understand why it seems like this will be a good change. as i said previously, this can be a gateway into more data collection. a counter argument to this is that _we already live in a world which collects our data, what would one more app do?_ as a user of audacity, i can say **i simply don't want an audio editor i use in my free time as a hobby, to have data on me in any way**. especially if it is sent to google. please take a step back and reconsider this pr.",-1,-1,-1,0.9292548894882202,0.9467057585716248,0.8005385994911194,-1.0,accept,unanimous_agreement
835423668,835,"### public appeal **of ngo «ukrainian liberation»** **_dear representatives of: • free software foundation; • «muse group» company; • community of the «audacity» project; • free software community; • other concerned communities and organizations!_** --- our ngo is deeply concerned by the implementation of telemetry in the code of free audio software «audacity». in our opinion, such actions not only restricts anyone’s natural right to liberty, but it also threatens to split the «audacity»’s community. at the beginning of may of this year, several international media reported that free and open-source audio software «audacity» was bought by the «muse group» company on april 25th, 2021. [a link] is one of the articles as an example. around the same time, the following [a link] appeared on «github». the post was made by a user [a link], who, judging by the context, is a representative of the «muse group» company, aka new owners of the «audacity». in this post, mr. (or according to the information from the personal profile on «github», dmitrii viedienko, from saint-petersburg, russian federation), is justifying the implementation of telemetry. specialists from the pr department of the ngo «ukrainian liberation» analyzed the text of the post and found not only contradictions but also signs of manipulation, which, according to our ngo, were included. below you can find the results of our analysis of the crsib's post, which we received tonight from our pr specialists: it is important to note, that specialists from the pr department of the ngo «ukrainian liberation» do not claim their conclusions to be the only possible truth. they should be perceived taking into account that every person (or group of people united by one idea, like our ngo, for example) are entitled to their own opinion, even if it is not correct. but let’s go back to the initial issue. [a link] is a company that has representatives in hong kong, shanghai, and sydney, australia. you can also contact them via messengers, which are far from the free software (""wechat"" and ""weibo""). the author of the initial post on «github» under the nickname crsib is from russian federation, the «muse group» company is (as we might guess) from china. in our opinion, both of these countries can hardly be called completely free and democratic. we are doing our best to leave the political and territorial aspects out of this conversation, but here we are forced to dwell on this point. we sincerely apologize to the community for emphasizing this, but we believe that without a full and comprehensive understanding of the situation, it will be hard to understand the conclusion that we came to. moreover, [a link]. in our opinion, this partly explains the use of non-free platforms «yandex» (russia) and «google» to collect the data, as well as why there has been no previous discussion with the community. (by the way, we still are not fully sure, how (and from whom) the abovementioned «muse group» **bought a free and open project «audacity»**. we are asking the representatives to provide an explanation regarding this issue. this letter should also be considered as a request for relevant public information from the «muse group» company: **how and from whom is it possible to purchase a free and open project?**) all the above cannot help but cause significant concern about the future of «audacity» - an audio editor that we all know, love, and actively use. without resorting to any subjective analysis, we ask members of the community to pay attention to the history of activity of the user crsib on the «github». we deliberately do not draw any conclusions. this situation with the «audacity» brought another split in the community, all this despite the still-fresh memory of «the code of conduct» among linux kernel developers, and, as we see it, bullying of rms and fsf, which, in general, causes new conflicts in our community (ngo «ukrainian liberation» considers itself a part of the community, because we fully share its values and spread them at our home country, ukraine, as much as we are allowed to by current social, political, economic and other circumstances). ngo «ukrainian liberation» also expresses its deep concern at the reaction of individual users to this situation. everywhere we see proposals to create a fork of «audacity» based on the latest available version, free from telemetry. we believe that this measure is acceptable, but it is extreme (when all other solutions failed). it will inevitably deepen the division in the community, as such an approach has both active supporters and opponents. unfortunately, people often forget that the idea is more important than people and their personal opinions. we are convinced that the fork at this stage will lead to two parallel programs - free and imbued with telemetry - and then the «audacity» community will simply split in two, three, and so on. ngo «ukrainian liberation» believes that this is what supporters of non-free components in the software want. this will significantly weaken us. in our opinion, we still have a chance to save our favorite program. with this goal, we introduce the hashtag #saveaudacity. we would like to ask those who agree with our position and our concerns to spread the information about the situation with the «audacity» by using this (or any others, at the discretion of the community) hashtag. as an ngo, we see our main current task in spreading awareness and objective information that, unfortunately, is relevant to the «audacity» audio editor. we call on the community to understand our concerns and to help us. fsf community has always been strong in unity, but today we are divided over political, gender, racial, and all sorts of other stereotypes that do not apply and are not even related to the free software. some individuals believe that their opinion is more important than the idea of freedom and unity of community. with all due respect, we find this position destructive. we ask the community for help also because we do not have programmers among our volunteers, and we cannot conduct an audit of the «audacity» code for backdoors and vulnerabilities included (or not included). **please, help.** ----- _the entire text of this appeal is a purely subjective opinion about the situation from representatives of ngo «ukrainian liberation». this text does not claim to be an undeniable truth and objectivity. we deliberately do not draw any conclusions, leaving this prerogative to the community. without blaming anyone, we present our vision of a situation that might differ (and might be different) from objective reality. with this letter, we ask fsf to assess the situation with «audacity» and, if there is such legal possibility, start integrating ngo «ukrainian liberation» into the fsf as an associate member or any other form that will allow us to interact and fight together against modern challenges. we understood [a link] of rms perfectly and we strive to be useful. only together we can stand and fight against those who bring evil and discord. we are open to a conversation: ukrliberation.com. we will view letters in english, ukrainian, russian, and belarusian._ **_with sincere respect and with apologies for excessive emotionality —_** _**bohdan kovalchuk, chairman (No0) of the ngo «ukrainian liberation», as well as the entire team of this ngo.**_ ----- **original pdf file with a signature and a stamp of ngo ""ukrainian liberation"" [a link].** **translated from ukrainian by [dara sereda.](seredache2000.com)** ----- ### caution! **we were extremely mistaken with tagging the wrong ""muse group"" (thanks to polyjitter and others it had been noticed). i would like to also note, that words about location in china were not meant to hurt or upset anyone, as they had no intent to spread racial stereotypes. we were trying to make a comment about the non-free policies that the country leads. we won't change the initial text, as we fully acknowledge our mistake. thank you, attentive readers, who were able to catch inaccuracies in the text and help us fix them! **we think that this is an awesome example of how the community can work together!** here is the correct link to the [a link]. the ""muse group"" situated in china, hong kong and also syndey, australia, — please accept our sincere apologies. that was 100% our mistake. that happens when emotions of people got the best of us. we are terribly messed up with a couple of muse groups. sorry everyone, who feel harmed with the previous post.** ### please, ignore all written about ""muse group"" from china — the innocent one.",1,1,1,0.606738269329071,0.7118039727210999,0.4121129214763641,1.0,accept,unanimous_agreement
835426487,835,"-ukrainian-liberation is this a known organization? i've never heard of you before, just seems like you want to slither your way into the fsf?",-1,0,0,0.7808414101600647,0.9436362385749816,0.6611554622650146,0.0,accept,majority_agreement
835427426,835,they have a youtube channel active since 2017.,0,0,0,0.8594740033149719,0.985543131828308,0.9801258444786072,0.0,accept,unanimous_agreement
835427934,835,doesn't really mean much.,-1,-1,-1,0.8994190692901611,0.6843289732933044,0.9068708419799804,-1.0,accept,unanimous_agreement
835428380,835,"we are done with ""youtube"" now, just like any other proprietary platform. and (we hope) that's our so-called ""contribution"" to the github, which now belongs to microsoft:registered::copyright::trade_mark:. :-)",1,1,1,0.8292277455329895,0.9909837245941162,0.9838727116584778,1.0,accept,unanimous_agreement
835438250,835,"-ukrainian-liberation no, they're just a corporation, and corporations are known to have unethical interests in the pursuit of profit. people's nationalities don't dictate their value or worthiness. you're xenophobic and racist. stay focused",-1,-1,-1,0.9715505242347716,0.9311249256134032,0.9496804475784302,-1.0,accept,unanimous_agreement
835439497,835,-ukrainian-liberation [a link] is not the muse group that acquired audacity - it's [a link],0,0,0,0.8386809825897217,0.9887719750404358,0.9484336376190186,0.0,accept,unanimous_agreement
835442360,835,"indeed - and it appears the correct muse group is in limassol, cyprus: [a link] hardly any worthwhile information for inflammatory personal smearing. all i'm saying is the argument that nationality = how bad or good someone is, kinda doesn't hold very much weight when you can't even research your hate correctly...",-1,-1,-1,0.9796055555343628,0.96867173910141,0.9523835778236388,-1.0,accept,unanimous_agreement
835443870,835,"since this is making network connections now, will i be able to order pizza with just a voice recording?",0,0,0,0.981562316417694,0.9893665909767152,0.9908030033111572,0.0,accept,unanimous_agreement
835445481,835,"read the code again. `s.id (wxid_yes).addbutton (acceptbuttontitle)->setdefault ();` the default button in the ui is opt-in. you could be forgiven for not even noticing the other button; it is so inconspicuous. this is what everyone is referring to as a ""dark pattern"" and a gdpr violation. if you simply hit enter or the space bar, or click the only button that jumps out at you, you unwittingly opt in. you can't use any software or any websites any more without getting hit at least once and probably repeatedly with a nagging pop-up asking you to subscribe, agree, register, enable a ""feature"", etc. etc. etc. it's beyond tiresome. i can't even tell you how many websites i've set up cosmetic filtering rules and custom styles on to wholly disable this kind of functionality. we all do the same thing: get rid of the nag as fast as possible with as little thought as possible, because ultimately our attention and productivity does have a budget. while i'm on a rant, i might was well pile this on. for them to so quickly try to slide something in under the radar that's not at all innocuous or consistent with preceding philosophy, and to only present community-oriented messaging after being called out in a very public way, is beyond a red flag. it speaks volumes about how they intend to operate and how they conceptualize the users. it tells us they intend to get away with whatever they can. that damage is already done. even doing a 180 now doesn't change that. i am *wholly* against any kind of telemetry. not only is its usefulness dubious, but i consider that to be beside the point. i don't want to be surveilled. i don't want data about me to be collected, compiled, tracked and analyzed. not by a person, not by a machine. not personally, not pseudonymous, not anonymously. not for profit-oriented reasons, and not for ostensibly constructive reasons. that's not why i downloaded the software. it's not something i'm volunteering to do. it's not something i will ever offer any kind of honest, genuine consent to. i don't necessarily think telemetry is a thing that shouldn't exist at all. i think it should be a separate software component that has to be added and enabled affirmatively by a user. approach it that way and find out how much value the users really find in telemetry.",-1,-1,0,0.8676077723503113,0.8276478052139282,0.8669171929359436,-1.0,accept,majority_agreement
835448514,835,at least that would be kinda helpful.,0,1,0,0.849165141582489,0.5782532095909119,0.7778651118278503,0.0,accept,majority_agreement
835448756,835,"the comments on the pr is a hormesis response. it is a dose dependent over reaction to software tracking. non one complains about tracking in vs code, because it already had it. add a little bit of tracking to a well known standalone open source desktop app and bam, here comes the ""overeaction"" meant to inoculate the system (open source software as a whole) to worse intrusions. these comments, while they may seem like an overreaction to some, are a really good thing for the community and i hope that the moderates who are ok with some telemetry can see why this discussion, in this format, with this intensity, is important.",1,1,1,0.895944356918335,0.5723108053207397,0.8534460067749023,1.0,accept,unanimous_agreement
835449358,835,what a bunch of crap. all the people that made [a link] would like a word.,-1,-1,-1,0.9881368279457092,0.9855255484580994,0.9951254725456238,-1.0,accept,unanimous_agreement
835449766,835,"actually, the fact that vscode is chromium-based and has tons of telemetry built into it is part of the reason why i still use `vim`. thanks for pointing out that fork! i'm gonna try it out.",1,1,1,0.953405499458313,0.9709148406982422,0.9909568428993224,1.0,accept,unanimous_agreement
835450855,835,**thank you!** it's been corrected above. ;-),1,1,1,0.989335000514984,0.9959703683853148,0.9969310760498048,1.0,accept,unanimous_agreement
835451639,835,"### caution! we were extremely mistaken with tagging the wrong ""muse group"" (thanks to polyjitter and others it had been noticed). i would like to also note, that words about location in china were not meant to hurt or upset anyone, as they had no intent to spread racial stereotypes. we were trying to make a comment about the non-free policies that the country leads. we won't change the initial text, as we fully acknowledge our mistake. thank you, attentive readers, who were able to catch inaccuracies in the text and help us fix them! **we think that this is an awesome example of how the community can work together!** here is the correct link to the [a link].",1,1,1,0.862591028213501,0.9930744171142578,0.9861994981765748,1.0,accept,unanimous_agreement
835451767,835,"only the **closed-source** version of vscode (i.e. the one you download from microsoft) has tracking. if you compile it from source, it's free of it.",0,0,0,0.9833434820175172,0.9913946986198424,0.9917323589324952,0.0,accept,unanimous_agreement
835451806,835,"i understand your point, but the fact is vscode already had it. as someone said, vscode uses chromium which is well known to use telemetry and collect user data by default. that is once again known and documented to be a part of the vscode model. this differs from audacity, which for the 20+ years it had been around, has never even had networking.",0,0,0,0.9083317518234252,0.9823236465454102,0.9409748315811156,0.0,accept,unanimous_agreement
835452447,835,"is musecy holding ltd. a nonprofit, and if so, where is it registered as one?",0,0,0,0.9734073877334596,0.9906316995620728,0.9890745282173156,0.0,accept,unanimous_agreement
835454933,835,"### the ""muse group"" situated in china, hong kong and also syndey, australia, — please accept our sincere apologies. that was 100% our mistake. that happens when emotions of people got the best of us. we are terribly messed up with a couple of muse groups. sorry everyone, who feel harmed with the previous post. please, ignore all written about ""muse group"" from china — the innocent one.",-1,-1,-1,0.9872277975082396,0.992629885673523,0.9790853261947632,-1.0,accept,unanimous_agreement
835456903,835,"it seems that musecy holding ltd is a for-profit corporation. does muse own the trademark ""audacity"" or any other intellectual property related thereto?",0,0,0,0.9715443253517152,0.9905114769935608,0.9885254502296448,0.0,accept,unanimous_agreement
835457298,835,"some people here maintain the backends audacity ends up talking to, to be more specific, jack. likewise, i have contributed to several parts of the infrastructure that audacity depends on, sometimes working directly with audacity users to fix bugs affecting us both: * [a link] * [a link] * [a link] so just because i don't have any commits in the audacity code repository does not mean i have not contributed anything to audacity before. ironically, the audacity developers' bad habit of forking dependencies [a link].",-1,-1,0,0.8766558170318604,0.7696176767349243,0.881754994392395,-1.0,accept,majority_agreement
835460254,835,"hello there! the initial post by ukrainian liberation was deleted and the account was banned, so some people might not see the changes that were added. here they are: ### caution! we were extremely mistaken with tagging the wrong ""muse group"" (thanks to polyjitter and others it had been noticed). i would like to also note, that words about location in china were not meant to hurt or upset anyone, as they had no intent to spread racial stereotypes. we were trying to make a comment about the non-free policies that the country leads. we won't change the initial text, as we fully acknowledge our mistake. thank you, attentive readers, who were able to catch inaccuracies in the text and help us fix them! we think that this is an awesome example of how the community can work together! here is the correct link to the correct muse group. the ""muse group"" situated in china, hong kong and also syndey, australia, — please accept our sincere apologies. that was 100% our mistake. that happens when emotions of people got the best of us. we are terribly messed up with a couple of muse groups. sorry everyone, who feel harmed with the previous post. please, ignore all written about ""muse group"" from china — the innocent one.",-1,1,-1,0.8624318242073059,0.8318966627120972,0.948909878730774,-1.0,accept,majority_agreement
835461095,835,"please stay focused, don't feed oder replicate trolls, refrain from all-caps or all-bold, avoid ad hominems, ableist slurs etc.",0,0,-1,0.7157383561134338,0.6429920196533203,0.58759605884552,0.0,accept,majority_agreement
835461679,835,"thank you, corrected)",1,1,1,0.8938462734222412,0.9356181025505066,0.7743856310844421,1.0,accept,unanimous_agreement
835471049,835,"did the person ""aaron spike"" who created the audacity logo, assign the copyright to it to tony berman of berman entertainment and technology law? there is a trademark registration for the audacity logo under that name. what is the connection between tony berman and musecy holding ltd.?",0,0,0,0.9766942262649536,0.990295946598053,0.9876973032951356,0.0,accept,unanimous_agreement
835474591,835,"if you want telemetry ... don't use google or facebook or apple or microsoft or yandex (wtf?) or similar. you can do a one-time check at the first start after a fresh installation or update to gather the information you want after the user allows it. you can write that code yourself. i wonder how people before that telemetry non-sense knew what work to prioritise, what os version to drop and so on ...",-1,-1,-1,0.9602210521697998,0.8439711928367615,0.9887031316757202,-1.0,accept,unanimous_agreement
835484246,835,"firstly, this has nothing to do with this pull request. it is not a code review in any shape or form, is unrelated to this pull request and does not belong here on github. secondly, the current version of the audacity logo was not created by aaron spike, it was created by me, using gimp, and i have the original gimp files to prove it. thirdly, yes, audacity has permission to use the logo that i created, just as audacity had permission to use the older logo on which it was based, and the even older version on which that was based.",0,0,0,0.9645678997039796,0.9776896834373474,0.9202549457550048,0.0,accept,unanimous_agreement
835485487,835,"i would say that this inquiry is related to the pull request, since this pull request may result in a fork, and the legal issues regarding using the original audacity logo in said fork.",0,0,0,0.984033703804016,0.98985356092453,0.9853338003158568,0.0,accept,unanimous_agreement
835489633,835,"it has all been said already, but i feel that an additional voice in opposition to this pr may help somewhat. i've been using audacity since elementary school in 2005. it's been installed on any system where i've needed to record audio. it would be trivial for me or anyone else to switch to a fork that doesn't include telemetry. i use pale moon and vscodium for that explicit reason. it's true that most people won't care. chrome is still the dominant browser after all. but enough people clearly do care that i hope this pr gets closed soon, rather than merged. if it is merged it will take me three package manager commands to switch to something else and never look back.",-1,0,0,0.4565648734569549,0.7731019258499146,0.3731117248535156,0.0,accept,majority_agreement
835489871,835,"since the cmake option to enable telemetry is opt-in (disabled by default), removing telemetry from audacity is as simple as building it without including any telemetry-related options. in case the audacity team merges this pr, i made a repository that will automatically build the app without telemetry (work in progress): [a link]",0,0,0,0.9837403893470764,0.9933486580848694,0.9929450154304504,0.0,accept,unanimous_agreement
835493256,835,that is actually an argument against this pr. the vast majority of linux distributions will compile audacity with the option disabled therefore missing the point of having telemetry in the first place.,0,0,0,0.9654256105422974,0.9466692805290222,0.971314013004303,0.0,accept,unanimous_agreement
835494887,835,basically i think optional (opt in) telemetry to improve audacity is ok. but why the hell with this google crap? it is exactly the opposite the floss community want to have.,-1,-1,-1,0.9614791870117188,0.9572268724441528,0.9551067352294922,-1.0,accept,unanimous_agreement
835496535,835,"windows (and macos?) users download the build (with telemetry built-in) from audacity's website, and these operating systems hold the majority of the os market share.",0,0,0,0.9793374538421632,0.990967333316803,0.98504239320755,0.0,accept,unanimous_agreement
835506183,835,"i have a suggestion for a more respectful approach to telemetry. instead of doing this blanket telemetry on audacity users minus those who are using linux distribution packages, do limited scope remote usability tests on people who explicitly want to contribute to audacity. for example [read in tantacrul voice]: if you take this approach, i think you could actually get linux users to enthusiastically participate. if you start by doing your best to respect users' consent and privacy, i think you could get much more useful data and use it to improve audacity.",0,0,0,0.5889855027198792,0.8658463954925537,0.7096500396728516,0.0,accept,unanimous_agreement
835507125,835,"is ""permission to use the logo"" the same as ""permission to trademark the logo""?",0,0,0,0.972602367401123,0.993801772594452,0.9921205043792723,0.0,accept,unanimous_agreement
835513964,835,"# data collection vs telemetry in audacity audacity pr #835 is a mess on many levels. problems that exist with this pr are stated reasons for implementing telemetry: - lack of stability information. - unknown userbase size. - development and support decisions. - resolving a known issue with unknown impact on users. in addition, the stated information that will be gathered via a telemetry interface are stated as: - application open information (yandex) - session start / end events (google) - debug information / errors (google) - file format information (google) - operating system version (google) - audacity version (google) - other tools used by the user (google) - ip address (google & yandex) the vast majority of this information, however does not need to be gathered using telemetry, and in fact, using telemetry would likely lead to mis-leading information or a lot of unusable information being gathered that would not assist the development process. before going into the reasons telemetry is not appropriate for addressing the majority of this information, consideration should be given to how telemetry is generally used in large open source projects. ## telemetry in open source there are projects that use telemetry. however, in many cases the implementation of telemetry is well documented, and frequently goes through an exhaustive approval process before being implemented. the following provides an overview of telemetry handling in several open source projects. ### case: the linux foundation **the linux foundation** introduced their [telemetry data collection and usage policy]([a link] in october of 2019. the policy makes it clear that there are many items that need to be considered before implementations are approved. these considerations include (but are not limited to): 1. individual data privacy: does the data track or identify the user? if it doesn't could it still include personal information that is subject to laws and regulations? 2. data confidentiality: does the data result in any business-sensitive information being sent to the project, or a third party? if there was a consent dialog, what guarantees that the user was authorized to grant consent? 3. awareness of collection: does the software guarantee that no data is gathered before consent has been given? is it opt-out or opt-in? can the consent notice be bypassed? 4. security of the collection mechanism: does the ""phone home"" mechanism itself open security vulnerabilities to the application? is there still a vulnerability if the user does not opt-in to the data gathering? in order to deal with all of this information, the linux foundation requires member applications submit to a review by providing: - the specific data to be collected. - demonstrate the data is fully anonymized, and does not contain any data about an end user, or information that could be sensitive. - the manner in which users are notified of the details of the data collection, use and distribution. meeting requirement of consent before information is gathered. - the manner in which the information is to be stored and use by the project. - security mechanisms used to ensure the collection of information will no result in unintentional collection, or security vulnerabilities. following all this guidance, the information is submitted to a review panel of the linux foundation's legal team for review. ### case: kde the kde project introduced telemetry into their plasma environment approximately a year ago. in so doing, they developed a [telemetry policy]([a link] that is applied to all applications in the kde environment. this is a rough summary of the policy: - transparency: - data is shared in a way that (a) is easy to understand, (b) is precise and complete, (c) is locally available without network connection. - any changes to the gather must be highlighted during the release announcement. - control: - telemetry is **always** opt-in. it is off by default, and only enabled by explicit user action. - telemetry settings can be changed at any time, and are prominent in the user interface of the application. - telemetry settings are independent of any other settings, features or functionality. - applications must honor system-wide telemetry settings. - detailed documentation must be provided on the operation of the telemetry settings. - anonymity: - nothing that is considered personal information is gathered, especially where regulations such as the gdpr are concerned. - no unique devices, installation or user id's are used. - data is stripped of any unnecessary details, and downsampled appropriately before transmission. - network operation data (such as ip addresses) are not stored with the telemetry data. - minimalism: - only gather the absolutely minimal information needed. - collected data must have a clear purpose. - data is downsampled to the maximum extent possible before transmission. - relevant correlations between individuals bit of data should be computed at the source whenever possible. - data collection is stopped when corresponding questions have been answered. - privacy: - never transmit any user content, or hints at user content (ie, file names, url's, etc.) - gather only system information specific to the installation / environment **independent** of how the application/machine/installation is used. - gather statistical usage data of an installation / application. in order to use telemetry information in a kde project, all of the above must be met, and a public review is passed. this review process is repeated for every release if there are any changes to the information being gathered. received data is regularly audited for violations of this policy. if there is a violation, the data is deleted and collection is suspended until compliance can be re-established. to date, only [four kde applications]([a link] use telemetry data. ### case: gitlab on october 23rd of 2019 gitlab announced that they were making [changes to their terms of service]([a link] that included the addition of javascript on their website that would gather information to be used by gitlab and possibly sent to third parties. the code would be both open source and proprietary. they stated that they would update their privacy policy to indicate what information was being gathered, and where it was being sent. users of gitlab immediately took to the issue that was opened to track the announcement and wrote a number of messages of concern about the information that was being gathered, and the lack of control about how the information was being used. on october 29th, gitlab sent out a letter that explained the following: ### other cases in an earlier post i documented the policies, processes and information gathered by firefox, including the glean tool the mozilla foundation specifically created for gathering this information. something that wasn't discussed as a significant point was firefox's transparency and user's control in terms of their telemetry gathering. any user can see what information has been sent to mozilla without having to dig through their telemetry portal. just open ""about:telemetry"", and the last two weeks of pings is available for users to see and verify that none of the information being sent to mozilla is sensitive. also users have a degree of control over what information is being gathered through a series of check boxes available in the privacy & security portion of the preferences menu. * * * also contained in the comments on this pr is a discussion with one of the main developers of ardour, in which we discuss the information that they gather, and the limited usefulness of this information, and the processes and decision making that went into adding it to ardour. ### telemetry conclusion when implemented properly in large projects, there is far more consideration given to the process and procedures needed to make certain that appropriate safeguards are implemented to protect end user's privacy and anonymity. further, the consideration for safeguarding against sensitive information being communicated is also required. on top of this, legal and / or public review of telemetry information being gathered is a routine process in these projects. when the input of the community is not considered, problems such as that issues that gitlab created for themselves do serious damage to their perception in the community. ## data collection in open source there is actually a long history of data collection in open source projects. where data collection differs from telemetry is often in the frequency and / or the amount of detailed information that is gathered. ### os hardware profiles ubuntu, several of the \*bsd distributions, and others have been building hardware profile databases for years. this is typically done as a one-time, completely voluntary data collection performed during the operating system installation. an example of this is the [nyc\*bug dmesgd]([a link] which has allowed users to upload copies of their dmesg logs into a database since 2004. all of the information contained in the database is anonymized, there is no personally identifying information. system76 and redhat enterprise linux take a different approach. they include tools that are used only on the basis of support needs. these tools gather system logs, hardware profiles, detailed configuration information and system coredumps into a single file. this file is then attached to support requests through a secured system. ubuntu has made one of the more controversial implementations of data collection via it's ubuntu report tool. it gathers system information and sends reports to ubuntu including: ubuntu version, oem/manufacturer, device model number, bios info, cpu details, gpu details, installed ram, partition info, display(s) details, auto-login status, live patching status, desktop environment, display server, and timezone. while not containing direct personally identifying information, some of the information could be sensitive in a number of environments. the user is prompted during installation to disable (opt-out) of the data collection, and is allowed to preview the data before it is sent, while making the decision. the data gathering system is a standalone package that can be completely removed from the system in environments where having installed would be deemed an issue. ### application crash reporting numerous systems, including ubuntu, redhat enterprise linux, and others have features that can be enabled to allow semi-automated submission for crash reports with debug information. this allows targeted collection of information which the user likely feels more comfortable in submitting the information. additionally, this can be used much in the same way as the system76 and redhat tools for generating logs and debug information that the user can submit as part of a support request. ### software popularity ubuntu, debian, arch linux, and other distributions contain a package which is not installed or enabled by default that allow users to send information about the applications they are using on their system. the information is restricted to: package name, how recently it has been used, and how recently it has been updated. this approach keeps to the approach of sending minimal information, devoid of personally identifying information. since this software is not activated unless specifically installed by the end user or system administrator, there is a fairly high confidence that potentially sensitive information is not being communicated. ### data collection conclusion there is a long standing tradition of data collection when it comes to the open source world. however, many linux distributions have taken a stance of data gathering on an ""as needed"" basis (with the notable exception of ubuntu). systems like \*bsd's nyc\*bug are completely voluntary, and users specifically take the time to upload log files by their own choice. tools like those provided by redhat enterprise linux and system76 are specifically designed to be used in tracing problems and resolving issues. they are only used at the discretion of the end user or system administrator who is seeking support. popularity polling is a system that has been made available in several distributions, however it is typically not installed by default. instead users that are willing to share information about their usage habits may install and enable this functionality. the only notable substantial outlier (at lest that i know of) with regards to data collection is ubuntu, which installs a default collection system. this system, however, allows the user to opt-out on the first boot of their system after installation. it also offers the user the chance to actually see the information that is gathered to be sent to canonical before it is sent. ## audacity's telemetry justification this brings us back to the proclaimed need for telemtry in audacity. first let's look at the reasons: ### lack of stability information it's difficult to see how telemetry information as proposed would be able to affect this without gathering a lot of information about the environment in which the user is operating their system. the declared ""os"" information would certainly be more than just the os version? it would be necessary to know a lot of information about the underlying hardware configuration. gathering such detailed information (such as system board, cpu, firmware version, disk configuration, ram, etc.) could be considered by many users to be sensitive information. a better indicator for stability issues would be to have a reporting system that allowed users to submit reports when instability actually occurs. this targets the information to specific issues, instead of having an overly broad collection of information that makes the location of this information like finding a needle in a haystack. ### unknown userbase size this is probably one of the least worthwhile arguments put forward for the addition of telemetry information. the problem with this justification is that the implementation of telemetry collection is broken by design. this is a feature that the user has the choice to disable by default. that alone guarantees a level of inaccuracy of the information being gathered. to make matters worse, there is the option to compile the application without enabling telemetry at all. in this situation the information gathered by telemetry is very likely to be highly inaccurate. it will never be clear which linux distributions disable telemetry during package builds. it will never be clear what percentage of the user base opt's out of the telemetry when they are offered the option. there are much better ways to gather this information. as noted in the **software popularity** section, many linux distributions already collect anonymized information regarding package installation and usage. this information is often freely available from the distributions. outside of the linux ecosystem many of the distribution points for packages (including, i would believe) github and audacity's own websites keep download statistics for the package. many of these sites also gather client platform information during the download process. overall these sources of information would paint a more accurate picture than relying on the automated gathering of information with unknown levels of accuracy. ### development and support decisions. development and support decisions that are based on potentially highly flawed statistics from telemetry gathering (as outlined in **unknown userbase size**) will likely lead to bad decision making, and only serve to disenfranchise a portion of the current user base. directly polling the user base is a far better way to gather information about the direction to take for development. audacity has a support forum with over 150,000 users, and several mailing lists with a high number of users. certainly users that are so invested in the software to take the time to sign up for a forum, or add their email address to an email list are the users that should be targeted for development decisions. other ways of gathering information could be open, public, anonymous polls operated from audacity's website. ### resolving a known issue with unknown impact on users. this is a situation where it is difficult to understand how this information could be used in resolving an issue. first, it is something that really shouldn't be the basis for making a decision on whether to resolve an issue or not. the primary motivation for resolving an issue should be whether or not there is a security assessment. any features that is not working as designed needs to be assessed in the light of potential risk to the stability of a users system. this is first and foremost. the higher the chance that a issue can be exploited by any potential bad actor the higher the need to fix the issue. basing the decision to resolve an issue on the basis of user impact is the wrong way to go about supporting an issue. user impact should be considered to be equal to a threat assessment when users report the issue, and document the severity as having a significant impact on the user base. ## the proposed telemetry implementation as stated earlier, the proposed implementation of telemetry in audacity is highly problematic. but the nature of the problems with the chosen path here are much deeper. ### inaccurate information as stated above, the information being gathered is very likely to be highly inaccurate due to numerous factors. the number of users that will opt-out of telemetry will never be known. the number of downloads that have been built with the telemetry completely disabled will never be known. because of these fundamental flaws, the data should be considered gigo (garbage in, garbage out). ### lack of policy information no consideration, or research appears to have been done to develop a privacy policy that can be applied to telemetry information. large open source projects like **the linux foundation**, **kde**, and **firefox** have developed processes for the approval of telemetry implementation that involve legal and public review before any implementation is made. there is no process proposed by the audacity team to ensure that the information being gathered conforms to any regulatory requirements. ### choice of third party service providers many security and privacy experts warn of using google and yandex's systems. these systems are known to be used for extensive data mining. the implementation of these systems gather personally identifiable information (at a minimum ip addresses) through audacity is not an acceptable standard. ### the lack of consideration of open source alternatives at a minimum there are three open source alternatives that should be considered for the implementation of a telemetry system. the three that are known at this time are [a link], [a link] and [a link] all of these options are open source licensed tools, and have statements of gdpr compliance. several of them also cover ccpa and pecr compliance as well. ## conclusion this document has attempted to do the kind of research that the audacity team should have done before beginning work on implementing telemetry in audacity. this research has included: - looking at successful telemetry implementations in large open source projects - looking at a case where a large open source project went wrong with changes to their telemetry implementation - looking at alternative data collection techniques that could be implemented to largely the same effect as the proposed telemetry implementation - looking at the deep flaws in the proposed telemetry implementation - looking at the lack of communication around the proposed telemetry implementation - looking at alternative choices for implementing a telemetry system that would be more respectful of user privacy - looking at alternatives for gathering some of the information outside of using telemetry because of of all of the concerns outlined in this document, it is proposed that the implementation of telemetry in audacity be set aside until a more thorough investigation and discussion can take place that will address many of the issues raised in this document. this document was researched and written in under 12 hours. the audacity team should recognize that just the amount of issues brought up with a very short review dictates that there are issues that need a lot more research in order to be properly and thoroughly addressed.",-1,0,-1,0.944494903087616,0.7899383306503296,0.9711670875549316,-1.0,accept,majority_agreement
835514908,835,i wish comments could be pinned or something. that is a great writeup.,1,1,1,0.9842332005500792,0.991904079914093,0.9937059283256532,1.0,accept,unanimous_agreement
835515480,835,"thanks. i was inspired last night when someone else pointed to one of my comments as ""perfect"" and i kept thinking ""there's so much more that should be documented about this issue...""",1,1,1,0.9721722602844238,0.9881830811500548,0.9944726824760436,1.0,accept,unanimous_agreement
835518468,835,can you dump the markdown under a repository like [a link] so the rest of us don't lose it in this increasingly unmanageable thread? as has been noted a few times here there's a tendency for threads like this to cycle endlessly.,0,0,0,0.8836267590522766,0.8742203712463379,0.8963422179222107,0.0,accept,unanimous_agreement
835519537,835,"i'll point out that it will look better rendered as actual markdown, where the hard line breaks will be treated as just spaces.",0,0,0,0.984815239906311,0.97898530960083,0.9773716926574708,0.0,accept,unanimous_agreement
835524848,835,"-sanders sure: [a link] i'll add for , the files are the original markdown versions of the document and a couple of comments i posted earlier.",0,0,0,0.9611141085624696,0.978590190410614,0.987987756729126,0.0,accept,unanimous_agreement
835528192,835,"great, thank you. i think the link has a good chance of staying current as the thread rolls on.",1,1,1,0.9830942749977112,0.9937939643859864,0.9937168955802916,1.0,accept,unanimous_agreement
835533582,835,excellent further input! put a lot of things way more eloquently than i ever could.,1,1,1,0.9881724715232848,0.9956272840499878,0.9966502785682678,1.0,accept,unanimous_agreement
835579210,835,why are you ruining one of the best pieces of audio software available?,-1,-1,-1,0.7232712507247925,0.9396939277648926,0.9480378031730652,-1.0,accept,unanimous_agreement
835590089,835,popping in to say you did a really good job with that comment and i really appreciate what you said :),1,1,1,0.991852343082428,0.9960390329360962,0.9961307048797609,1.0,accept,unanimous_agreement
835592881,835,thank you .,1,1,1,0.6186631917953491,0.6764394640922546,0.7940881848335266,1.0,accept,unanimous_agreement
835594845,835,"i am seeing some great summaries and it really feels like the debate is wrapping up? yet i am still seeing code review about coding style in the god damn chat. why are we still doing this, can we wrap this up and get this god damned pr closed, please. based on the lack of engagement from the op i don't think even the devs wanna touch this thing anymore, so maybe, reviewer's, you should call it a night, i think you might be wasting your time at this point?",-1,-1,-1,0.9825955629348756,0.987941026687622,0.9914304614067078,-1.0,accept,unanimous_agreement
835595113,835,closing this will resolve issue #846,0,0,0,0.9878425598144532,0.9898877739906312,0.9941158294677734,0.0,accept,unanimous_agreement
835595483,835,well... #846 is subtle,0,-1,0,0.8875900506973267,0.6519070267677307,0.9860498309135436,0.0,accept,majority_agreement
835599860,835,"yes. to sum up those summaries: just don't do it! sorry about nitpicking those details. didn't know when i started my review that it was so bad i barely could count review comments in one hand even without nagging about the style. but yes: please close this pr. it's one point simply chiming in to the discussion stating your opinion, but some slightly different when you had a closer look at the subject matter beforehand. gives that comment a completely different weight. and yes: could have called it a day, just reviewing the ui changes.",-1,-1,-1,0.9907824397087096,0.9915364980697632,0.9907659292221068,-1.0,accept,unanimous_agreement
835600688,835,[a link] this is better,0,0,0,0.9648409485816956,0.965565264225006,0.9844805598258972,0.0,accept,unanimous_agreement
835601389,835,"i personally appreciate the thorough code review. just the excessive whitespace and eol comments tell me that the coding standards for this project are not being adhered to by the new developers. and, pointing out the actual issues in the code where the telemetry and network-manager implementation are concerned undermine numerous claims made by the original submitter of this pr.",1,1,1,0.9645395278930664,0.9819695949554444,0.9482460021972656,1.0,accept,unanimous_agreement
835606071,835,the fact that this is still ongoing blows my mind.,-1,-1,-1,0.7805044054985046,0.919284164905548,0.9825841784477234,-1.0,accept,unanimous_agreement
835610435,835,i opened a new issue to discuss automated code formatting: #847.,0,0,0,0.9517815709114076,0.9822980165481568,0.991523027420044,0.0,accept,unanimous_agreement
835616069,835,"i'm appalled to see that despite significant user feedback, this pr still hasn't been rejected. as written, there are legal, security and privacy problems with this pr. the vendoring of so many dependences is also a pretty terrible code-smell. additionally, telemetry that will be disabled by the overwhelming majority of distros means that any data gathered will be inconclusive at best, if not outright misleading. there is no good argument for proceeding.",-1,-1,-1,0.9875516295433044,0.9889492988586426,0.9912700653076172,-1.0,accept,unanimous_agreement
835625837,835,"who is spyrou kyprianou, the person who apparently purchased the audacity trademark from dominic mazzoni in 29 december 2020?",0,0,0,0.9025478363037108,0.9900902509689332,0.9888611435890198,0.0,accept,unanimous_agreement
835630718,835,this change is like **literally** 40 times more controversial than the second most controversial change **ever** and its still not rejected. unbelievable.,-1,-1,-1,0.9876975417137146,0.9924208521842957,0.9924962520599364,-1.0,accept,unanimous_agreement
835641313,835,has anyone made a joke about the audacity of the situation?,-1,-1,0,0.7920194864273071,0.8124799132347107,0.5627238154411316,-1.0,accept,majority_agreement
835641778,835,only like 5 times already.,0,0,0,0.9122766256332396,0.7062715888023376,0.8581718802452087,0.0,accept,unanimous_agreement
835642006,835,i think that's a conservative estimate of the audacious level of audacity puns...,-1,-1,0,0.9127748608589172,0.9042963981628418,0.5025028586387634,-1.0,accept,majority_agreement
835646260,835,"[a link] why was there a 4 month gap between the trademark apparently being purchased and the announcement of this ""acquisition""?",0,0,0,0.9744025468826294,0.991169571876526,0.9852660298347472,0.0,accept,unanimous_agreement
835688351,835,"hello everyone and i am bagging for a piece of your attention. yesterday (utc+3) ngo ""ukrainian liberation"" made a [a link] trying to get some information from the “muse group” company and bring attention of community to the topic, and after we posted it we found out (btw, **with the help of attentive readers** – ngo ""ukrainian liberation"" says ""thank you!"" once again for that), that **we tagged the wrong company**, the [a link] ""muse group"". the right one is [a link]. we were shocked and ashamed of our mistake, and we added the correct link to the website along with an apology within the first 30 minutes. unfortunately, by that time the post was already blocked and we are not sure how many of you were able to see it. now the account is also flagged (we are not sure why), but we are waiting for a feedback from the support team. now to the interesting part. this mistake got us thinking: how could 7 people who were checking the article did not notice such a mistake? well, it turns out that all 7 people were using [a link], which, if you search for “muse group”, shows the other company. now, despite our principles of not using google at all, we tried using [a link] for the same search, and viola! it was on the first search page, right after [a link]. while looking at results from duckduckgo (btw, we tried a lot of different requests like [a link], [a link], [a link], [a link], etc.) we found [a link] in which it is said that the ""muse group"" was founded a few days before they bought ""audacity"". we decided to use ""[a link]"" to look what was up with their website before. we found out that the website ""mu.se"" used to [a link]. and now you can easily see that the first news of just-created ""muse group"" was [a link], but the point is that the website ""mu.se"" itself [a link]. the ""newsroom"" place of the website ""mu.se"" has [a link]. we were not the only one who noticed this situation, so here is [a link] about it. we are not going to make any conclusions. that’s up to the community. by the way, ngo ""ukrainian liberation"" would like to apologize for a terrible mistake they made. here's what bohdan kovalchuk, the No0 of ngo ""ukrainian liberation"", says: by the way, [a link]. if you're still seeing the previous one, just refresh the page. and the last interesting for today: a user had just uploaded a comment just above this one. you may want to check it also. ;-) however, the question remains open: **how and from whom could an open, free audacity project be purchased?** it is really very interesting for us. --- upd (12:00 am, utc+3): here are [a link] written by bohdan kovalchuk, ngo ""ukrainian liberation"". --- _thank you very much for your attention and sorry for bothering the community._",1,1,1,0.959705889225006,0.974454700946808,0.9834518432617188,1.0,accept,unanimous_agreement
835690489,835,my speculation is that an open source project can be taken over by paying off or sneaking into contributor positions. intel and nsa have tried multiple times to push out old leadership and sneak in vulnerabilities into linux.,0,0,0,0.5246710181236267,0.6017513871192932,0.970961570739746,0.0,accept,unanimous_agreement
835691210,835,i have been given confirmation from dominic mazzoni (by email) that he did indeed sell the trademark. the 4 month gap has not been explained however.,0,0,0,0.9720759391784668,0.9804937243461608,0.9859845638275146,0.0,accept,unanimous_agreement
835691790,835,that is strange.,-1,-1,-1,0.944592297077179,0.9897463321685792,0.962454617023468,-1.0,accept,unanimous_agreement
835695309,835,"in that case, it is likely that any fork of the project, that uses the name ""audacity"" would be subject to trademark lawyers sending cease and desist letters and other such amoral behaviour.",-1,0,0,0.5239594578742981,0.8773899674415588,0.6465729475021362,0.0,accept,majority_agreement
835706808,835,"there can be legitimate uses of networking in an audio application, for example mixxx can lookup music metadata on musicbrainz at the user's explicit request with each network connection. but seeing the reckless way this pull request vendors libcurl and now seeing that there has been literally no response from any maintainer on a pull request fixing a security vulnerability (#700) for *6 months* until a [a link] today, i am awfully concerned about any networking functionality added to audacity. if you add *any* networking functionality, gate it all behind a cmake option so networking libraries are not even built or linked.",-1,-1,-1,0.9835593104362488,0.8742676973342896,0.9767286777496338,-1.0,accept,unanimous_agreement
835707273,835,can't sue who you can't find. misappropriation of open-source projects is a breach of social contract in which case there is no moral obligation to adhere to laws when obtaining a resolution.,-1,-1,0,0.7825583219528198,0.740945041179657,0.694690465927124,-1.0,accept,majority_agreement
835723397,835,i'm against. i will create my own fork,-1,0,-1,0.9194729328155518,0.8451138138771057,0.7642087340354919,-1.0,accept,majority_agreement
835744726,835,"unfortunately, looking at the open pull requests and issues, this seems to be the norm here. i was shocked to learn that such a widely used application is maintained by so few people. i thought the mixxx team was tiny but it has more people and is a much more niche application. i understand the audacity team has limited capacity, but how could the team grow if you ignore people who are trying to help? the least you could do when someone opens a pull request is leave a quick comment like ""hi, thanks for contributing! we're really busy working on x, y, and z right now so it may be a bit before we're able to review this. feel free to ping us in a couple weeks if we don't respond."" this makes it even more concerning that you have hired a new developer with little to no background in foss. it's not like they're hiding. a quick web search can find [a link] easily.",1,-1,-1,0.5647711753845215,0.947225034236908,0.9834729433059692,-1.0,accept,majority_agreement
835745430,835,this reminds me of a song i heard called [a link],0,0,0,0.7628431916236877,0.9815711379051208,0.9663750529289246,0.0,accept,unanimous_agreement
835758578,835,it would be ironic if an angry fork attracted more developers than the original project purely out of spite,-1,-1,-1,0.9525466561317444,0.8630616664886475,0.8558958768844604,-1.0,accept,unanimous_agreement
835759201,835,it would not be purely out of spite. it would also be because the original developers have been negligent at fostering the growth of the developer community.,-1,0,0,0.7240060567855835,0.9089832901954652,0.687566339969635,0.0,accept,majority_agreement
835762717,835,"what is this masonic horseshit? you'll just be forked. congrats, you accomplished absolutely nothing, except pissing people off!",-1,-1,-1,0.9567119479179382,0.6359606385231018,0.9943548440933228,-1.0,accept,unanimous_agreement
835766472,835,maybe we should write a new audio editor in rust instead of forking audacity. that way we would not have to deal with forked dependencies and a hacky build system. . . . i'm only half joking.,-1,-1,-1,0.9840697646141052,0.98845112323761,0.9755218625068665,-1.0,accept,unanimous_agreement
835771035,835,"now, that would be well described by ""the audacity"".",0,0,0,0.9731276035308838,0.989319145679474,0.9369574189186096,0.0,accept,unanimous_agreement
835772456,835,"it is important for the people pushing for this feature to realize that the backlash they are getting is not just due to the implementation details or ""tinfoil hats"" being against telemetry out of principle. the context matters. audacity was very recently ""acquired"" by muse group, a company that was just recently founded itself. however, neither the [a link], nor the [a link], nor [a link] properly explain how that was done or what that even means. there is hardly any information on who is behind muse group. the [a link] currently seems quite fishy and also does not give any details. when a free, open source project that has existed for about 20 years is suddenly, and without any explanation, taken over by a company, that is reason for concern in itself. a community developed free and open source project does not have any financial interests, so the intention is simply in creating the _best_ software possible. a company naturally has to put financial interests first, so the focus _will_ shift to create the most _profitable_ software, not necessarily the _best_ software. with this, there comes the danger of paid-for features, monetizing of user data, dropping of cross-platform compatibility and many other worrying issues for the existing user base. hence, muse group should be very aware of the fact that people will watch closely as to what changes they are pushing for. with this context in mind, it should be clear that a pull request with 5500+ lines of new code and dependencies, which came out of the blue, without any prior consultation with the community, from a developer who is obviously associated with muse group, but has previously not contributed to the project, is reason for concern. however, if the pull request was a long sought-after feature, that would probably be okay. that is not the case, however. instead, this pull request implements a feature that not only _no one_ has ever asked for, but it is also one that has serious negative legal and moral implications. not only because it is about tracking user's data, but also because it attempts to do so in an atrocious way. add on top that the positive benefits of this are, at best, questionable, while the potential issues are huge. to name just a few, more code means more potential bugs and security vulnerabilities, more need for qa, bug fixing and maintenance, bigger download size, harder packaging for linux distributions and many more. therefore, this is not just about whether or not someone agrees to the collection of usage data. this is about a questionable over-take of an open-source project, about horrible decisions and timing, horrible implementation and horrible communication all bundled up into one huge disaster. even if this pull request will not be merged due to the pressure of the community, the trust in muse group and the future of the audacity project has already sustained damage that most likely can not be repaired. if you want to fix this, don't just replace google with matomo. if you want to fix this, don't just remove this pull request. if you want to fix this, you need to answer _a lot_ of questions and expose the motivations and details behind the overtake, this feature and many more. you owe it to a project that has been successful for twenty years. you owe it to a loyal and hard-working community. you owe it to us. you owe it to yourself.",-1,-1,0,0.4836311340332031,0.5992938280105591,0.7035149335861206,-1.0,accept,majority_agreement
835774612,835,bravo.,0,0,1,0.8259024620056152,0.9716097116470336,0.3832838833332062,0.0,accept,majority_agreement
835777069,835,this pull request still hasn't been denied? i don't see any reason for the hold-up. regardless of the outcome of this discussion if the governance of this project is inactive then a fork is necessary.,0,0,0,0.971230924129486,0.9751587510108948,0.9700753092765808,0.0,accept,unanimous_agreement
835778117,835,"add on top a history of forking dependencies and not even trying to upstream patches, responding rather flippantly to linux packagers' concerns (#625), and [a link] which end up falling on the developers of other applications sharing dependencies to resolve.",0,0,0,0.9797182083129884,0.959950029850006,0.9296368360519408,0.0,accept,unanimous_agreement
835779266,835,"actually that's a huge message on its own. noone cares to have a look at fixing a security vulnerability but there is time to create pull request for telemetry. honestly i don't think that this is only to improve anything for users but to prepare some ""pay with your data"" shit like with many other services out there. and even if the introduction is honest the priority list is really really bad. why is ""implement telemetry"" higher in the list than ""fix security vulnerabilities"". i can tell you something about user preferences even without any telemetry in place: your users want to have security vulnerabilities fixed with top priority!",-1,-1,-1,0.987950325012207,0.9885993003845216,0.992362380027771,-1.0,accept,unanimous_agreement
835779364,835,"would be great if the trollish comments would stop.. this is a serious matter. the more of them there are, the less inclined everyone else is from participating in an actual, honest, serious discussion. the whole thing might just be ignored because most people commenting do so in a very unfriendly manner. some anger is understandable, but if we are not civil and decent it is unreasonable to ask the other party to be that for us.",-1,-1,-1,0.9587539434432985,0.9795616269111632,0.8305301666259766,-1.0,accept,unanimous_agreement
835784477,835,stupid pull requests beget stupid comments.,-1,-1,-1,0.9860751032829284,0.98985755443573,0.9877555966377258,-1.0,accept,unanimous_agreement
835785719,835,"i would suggest to rename the pr as _make possible for users to help the project by contributing anonymous usage if they want to_, this way the answers of people responding _i'm against_ with epidermal reaction like if they were on twitter would look funny at best. i can understand how the original title can be triggering when not reading the explanations that came after the title, but well, as a people i believe we can read more than 140 characters...",0,0,-1,0.5365869998931885,0.799153745174408,0.7089570164680481,0.0,accept,majority_agreement
835787812,835,"please read the discussion, it has already been established that the information being sent is not anonymous.",0,0,0,0.984466314315796,0.9885876178741456,0.9934450387954712,0.0,accept,unanimous_agreement
835790791,835,"here is yet another point against adding any networking capabilities to audacity whatsoever. audacity uses a vendored copy of ffmpeg. as documented in issue #398, audacity was using ffmpeg version 2.2.2 until pull request #741 was merged only 4 days ago. ffmpeg 2.2.2 was [a link]. remember that [a link] by the lead developer of signal demonstrating a proof-of-concept exploit in widely used software? it strongly implied that was accomplished by exploiting a vulnerability in an old version of ffmpeg from 2012, likely with a specially formatted media file. that was exploited to achieve execution of arbitrary code by the attacker. considering audacity is an extremely widely used application, there would be a lot of incentive for a malicious actor to use it to launch an attack on audacity users' computers. the audacity maintainers (not merely the new people from muse group) have already demonstrated they are not trustworthy for maintaining the security of audacity. adding a novel attack surface, especially in a very reckless way by vendoring libcurl, is a horrible idea.",0,0,0,0.9656761884689332,0.992456078529358,0.9737038016319276,0.0,accept,unanimous_agreement
835793044,835,no new dependencies should be added to audacity before cleaning up this mess with vendored dependencies. this should be the very top priority above any new features or ux improvements because it is crucial for security.,0,0,0,0.8681177496910095,0.9815292358398438,0.9715097546577454,0.0,accept,unanimous_agreement
835793562,835,"security does not pay bills and does not make for flashy news. so it ends up ignored most of the time, until a leak of some sorts happen. this is a systemic problem.",-1,-1,-1,0.87088543176651,0.8734093904495239,0.8340659141540527,-1.0,accept,unanimous_agreement
835794008,835,"speaking of signal, do you think it uses telemetry? is it unusable crap? (please don't take this off topic debating the merits of signal versus other messaging systems. that's not the point here.)",-1,-1,-1,0.9618437886238098,0.92438405752182,0.9861437082290648,-1.0,accept,unanimous_agreement
835794267,835,"wtf has that to do with anything, or relevant at all? you are part of the problem here, please shut up",-1,-1,-1,0.984062671661377,0.9743480682373048,0.9946040511131288,-1.0,accept,unanimous_agreement
835796555,835,i apologize for bringing that last point up. it's not very relevant. please don't respond to it and drag this off topic.,-1,-1,-1,0.9847666025161744,0.988060712814331,0.9912376403808594,-1.0,accept,unanimous_agreement
835814939,835,when will a decision be made about this pr? i'm very curious how the maintainers weight the over 3000 thumbs down this pr has received.,0,-1,-1,0.7155195474624634,0.6009297370910645,0.9342693090438844,-1.0,accept,majority_agreement
835815593,835,if you have the monitor upside down you could see it as over 3000 thumbs up for something you can't understand.,0,0,0,0.840295672416687,0.6074401140213013,0.8611432909965515,0.0,accept,unanimous_agreement
835827377,835,"wow, the users are asking you not to do this and none of the audacity team seems to care about its users, so now you're going to go through with it?",-1,0,-1,0.6465269923210144,0.7321338057518005,0.9842682480812072,-1.0,accept,majority_agreement
835828070,835,"to muse group: people are ready to maintain fork of audacity if this pr‌ gets accepted. most of your users do _not_ want telemetry either! therefore, if this pr gets accepted, _your investment in audacity would be near useless_. that's all.",-1,0,-1,0.5461215376853943,0.6554888486862183,0.9323380589485168,-1.0,accept,majority_agreement
835829214,835,"a lovely thing about oss: there are things called _forks_ which branch off the original project! many people do this when the original project goes awry (such as libreoffice and mate, forks of openoffice.org and gnome 2). this project is close to going haywire and _**many**_ people stated that they **will** fork and maintain audacity if this pr gets accepted. so, if you want to maintain a large user base, muse group, close this pr and you won't become openoffice.org soon.",1,1,1,0.9818170070648192,0.970533013343811,0.8254899382591248,1.0,accept,unanimous_agreement
835844840,835,"they are now probably thinking about ways to get around this telemetry thing and implement something else that satisfies their business model needs. they clearly showed us their mentality regarding not caring about people and ultimately, about the community. mentalities like that are hard to change, they are generally toxic. it's obvious that we as users who care about privacy need alternatives to edit our whale, monkey, voice and other personal recordings. so also if they won't commit this patch, i've had enough about their disrespectful and not engaging behavior towards humans. **get this shit that has nothing to do with an audio program out of here**.",-1,-1,-1,0.9885795712471008,0.976440727710724,0.9817496538162231,-1.0,accept,unanimous_agreement
835845422,835,"i'd guess it's more like ""trying to assess the impact of a fork, and how likely it would be that it happens"", and ""what plan b would be like if it happens"". i don' trust that they'll do anything good (kind of pessimistic, but anyway...) and i'm ready to start using a fork. i only remember one case in which a company reverted a decision to include telemetry in free software -- gitlab.",-1,0,-1,0.6918988227844238,0.8628745079040527,0.7849889397621155,-1.0,accept,majority_agreement
835850652,835,"audacity is music software, which does not need or require a network stack. audacity is not a web browser, which does need and require a network stack.",0,0,0,0.9823682904243468,0.9871315956115724,0.9900824427604676,0.0,accept,unanimous_agreement
835859628,835,"i keep seeing this argument but the simple truth is: * this pull request is a draft, not some guaranteed merge action. * the developers taking their time to think about the best course of action from here on out. not immediately responding to the dogpiling that's going on in this pr, shouldn't be misconstrued as ""they don't care"", especially considering how helpful the community at large has been (speaking as a lurker). afaik, some of the people involved in this pr actually read every single post here, and are evaluating how to tackle the telemetry issue in a way that would work out for both the devs and the users.",-1,0,0,0.5170833468437195,0.6033844947814941,0.6662179231643677,0.0,accept,majority_agreement
835859697,835,"i just got banned off of the audacity discord. not for being rude, pushy, or invasive - but for pointing out that their ""good luck finding people to maintain a fork"" comments were a little strange and disconcerting. i really, _really_ wanted to assume negligence instead of malintent, and tried to have an open conversation with the maintainers. i was met with rudeness, snyde comments, pompous behavior (""good luck, you can't just take over a 20 year project so easily"", ""good luck finding translators"", etc.). # the devs have no interest in listening to anyone. let's fork it already.",-1,-1,-1,0.9849817752838136,0.9847359657287598,0.988465428352356,-1.0,accept,unanimous_agreement
835860346,835,"it was not a draft when it was posted. it was converted to one after the initial backlash. this was also requested directly by tantacrul, the new owner of audacity, and coded/submitted by a muse group employee. they have every intent to merge this.",0,0,0,0.9860018491744996,0.9859758019447328,0.9844930171966552,0.0,accept,unanimous_agreement
835860713,835,- did they really say that? there's not even a need to maintain any fork - all it takes to disable telemetry is to build audacity from source and distribute the clean binaries.,0,0,0,0.966721534729004,0.9838998317718506,0.97347754240036,0.0,accept,unanimous_agreement
835862558,835,"yes. it's not paraphrasing, either.",0,0,0,0.8044625520706177,0.9222272038459778,0.9699469208717346,0.0,accept,unanimous_agreement
835863881,835,"if they had every intent, it would not have been reverted to a draft. don't think they're not taking this seriously.",-1,-1,-1,0.920738399028778,0.5294714570045471,0.803037703037262,-1.0,accept,unanimous_agreement
835864192,835,"this is true, however more antifeatures will _likely_ be added (and in that case, fork time!).",0,0,0,0.9867401719093324,0.991869568824768,0.9915436506271362,0.0,accept,unanimous_agreement
835864444,835,they are not taking it seriously. tantacrul said in the discord that he's waiting for this to blow over.,-1,-1,-1,0.9670190811157228,0.9183289408683776,0.962424337863922,-1.0,accept,unanimous_agreement
835865019,835,"how is that any indication of them not taking it seriously? that's a wise course of action when you're being dogpiled on. meanwhile, it creates some space to rethink how to tackle the feature instead. i feel like i'm contributing too many posts to this way-too-long pr already, and i'm not sure it's going anywhere, so i'm pulling out of this conversation. but maybe keep a basic modicum of trust that the people who have been working on this project for years are out to find the right solution that works for everyone.",-1,-1,-1,0.8750540614128113,0.9419001340866088,0.539697527885437,-1.0,accept,unanimous_agreement
835865078,835,i'm reading the reversion to a draft state as more of wip cycle as coding errors / issues are worked out. i am not seeing this as the intent to revert the code completely and close out this pr.,-1,0,0,0.8483977317810059,0.923942804336548,0.9814281463623048,0.0,accept,majority_agreement
835865271,835,apart from the legal/privacy/ethical issues what concerns me the most they are giving zero response to the technical concerns raised in the code reviews. that alone convinces me to support whatever popular non-muse fork emerges.,0,0,-1,0.5477365255355835,0.8400447368621826,0.8336990475654602,0.0,accept,majority_agreement
835865636,835,"that's exactly what i did, and they gave me every reason to believe this is not some innocent ordeal.",-1,0,0,0.827056884765625,0.5179309844970703,0.6961987018585205,0.0,accept,majority_agreement
835866087,835,"the only way to ""...find the right solution..."" would be to start from scratch. the code that is being worked on is flawed from it's initial intent, and is broken by design. those are issues that cannot be coded around.",-1,0,0,0.6148210167884827,0.6499982476234436,0.7859686613082886,0.0,accept,majority_agreement
835866165,835,that trust has already been broken for many. it is up to the maintainers (old and new) to work towards restoring it. i have suggested multiple times throughout this discussion specific steps they could take to build trust. i am awfully concerned that they have not taken any of those steps in days. the most basic step would be a simple comment saying that they commit to not using google analytics nor yandex. all that takes is one sentence. and that's just the first step to demonstrate this is going in the right direction.,-1,-1,-1,0.9715230464935304,0.7951109409332275,0.9803611040115356,-1.0,accept,unanimous_agreement
835868839,835,"this is a bad idea. this will not blow over until a response is provided. if it is a bad response, it will blow up even bigger.",-1,-1,-1,0.9852663278579712,0.9770435690879822,0.976106584072113,-1.0,accept,unanimous_agreement
835871371,835,"again, for those that aren't ""developers"", in software development you don't add code that is not necessary to the main functionality of the application. this pr is attempting to turn a really great and working perfectly fine right now ""audio application"" into a ""web browser"" (with who knows what down the road and a bunch of **new security issues as it using your network**) currently this software does not use the network or internet.",0,0,0,0.690330982208252,0.7974594235420227,0.8238274455070496,0.0,accept,unanimous_agreement
835871928,835,"can you post a screenshot of this please? i disagree with discord tos, so i cannot join.",-1,-1,0,0.8661899566650391,0.913163721561432,0.7754255533218384,-1.0,accept,majority_agreement
835872687,835,"tantacrul must have said that after he kicked me from his discord, as i did not see it.",0,0,0,0.4960387051105499,0.9426923394203186,0.6143077611923218,0.0,accept,unanimous_agreement
835872750,835,"nope. i was banned. i know for a fact some others in this thread are in there and can post some screenshots, however (assuming they haven't also been banned). i won't tag them so as to not 'out' them to the hostile audacity team. i encourage them to copy the logs and take screenshots, though. conversations in there would be very interesting to the people here, and i don't want to be the one shouting out hearsay.",0,-1,-1,0.4798000454902649,0.823236346244812,0.7675525546073914,-1.0,accept,majority_agreement
835872940,835,"adding network features does not mean making it a browser. browsers nowadays are a full os, with not just networking, font and image rendering, but also audio and video playback, camera and usb access, gps and others sensors, p2p communication, screensharing... errr what else, whatever the main pc can do, the browser will likely do it too (maybe not now, but in due time for sure)",0,0,0,0.6775749921798706,0.9711196422576904,0.9814795851707458,0.0,accept,unanimous_agreement
835873323,835,"nevermind, i forgot i took a screenshot of an older conversation yesterday that had (some of) the relevant bits. # edit: they are trying to censor this. please don't let them. ![a link] --- here is what was edited into this comment. conversation cannot be copyrighted, and everyone knows who each of the un-censored people are as they are maintainers of this project and/or celebrities (in the case of tantacrul). i protected the non-maintainers who were trying to raise concern with you and have a conversation before you banned us, because they are _not_ well known people and _not_ celebrities. i've not revealed anything other than your intent - much less private information. those named on there do not even give your discord ids, in which you need the nonce number in order to contact anyway. don't be dumb.",-1,-1,-1,0.912574052810669,0.7493164539337158,0.9687155485153198,-1.0,accept,unanimous_agreement
835873845,835,"first, if it is true that they are really waiting for this to ""blow over"", then i think it is likely that they will eventually close this pr for further comments. we should probably agree on an alternative place to keep the conversation going pretty soon, so that killing the conversation here will not kill the conversation in general. second, can someone link to the mentioned discord? i could not find an audacity discord or a mention of such anywhere.",0,0,0,0.6706803441047668,0.9606772661209106,0.9435110092163086,0.0,accept,unanimous_agreement
835873873,835,"also, at this point it would be wise for us to create our own discord or channel for communication, as this pr's comment section is of course subject to being potentially deleted by muse group.",0,0,0,0.9578136801719666,0.994049310684204,0.9863123297691344,0.0,accept,unanimous_agreement
835873926,835,"thanks! though that is a bit unclear/dubious about intentions. letting things cool down is always a good thing, dont make decisions or say things under pressure. we should still press them for a proper response to all of this though. their community deserves better than this",1,-1,1,0.9614118933677672,0.5329232215881348,0.9668558835983276,1.0,accept,majority_agreement
835874066,835,"perhaps an irc channel on say freenode, rather than a discord?",0,0,0,0.9600322246551514,0.9932112097740172,0.9867262840270996,0.0,accept,unanimous_agreement
835874142,835,is it possible to archive all comments in this pr? a lot of useless comments (admittedly i contributed a few) but some very good ones as well,-1,0,0,0.8814067244529724,0.8201017379760742,0.740230143070221,0.0,accept,majority_agreement
835874177,835,"#audacity already exists, we can use that?",0,0,0,0.9797140955924988,0.9925804138183594,0.992983341217041,0.0,accept,unanimous_agreement
835874381,835,"yes, of course. all i can say is, it's clear (to me) based on the _rest_ of the very long conversation that took place in there (aside from that screenshot) that they aren't doing it as a ""cooldown"" period. they're actively hiding from the problem and waiting for things to quiet down enough to move forward. this was also clear to me as the development discussion about this pr was still taking place in the development channels by both the op as well as the rest of the maintainers, talking about changes being made to the code in order to merge it later. yes, sort of. [a link]",0,0,0,0.8326940536499023,0.9722265601158142,0.8321117758750916,0.0,accept,unanimous_agreement
835875942,835,"i'd like to give my two cents on the matter, being an audacity user but also a software engineer. i don't think telemetry per se is a bad thing, for me it wildly depends on how it's done and what for. there are always cases of abuse, whether it be overreaching forcing it on people without an option to opt-out (e.g., the way microsoft does it with windows 10 for example) or the myriad of trackers many websites employ to track users actions so advertisers can target them better (where the worse possible outcome would be a price hike on something because they'd know that particular user would buy it because it's important for them). but, when used for the betterment of the product itself it's something really useful and metrics of all kinds are present in all phases of software development, even during prototyping. i'm going to simplify things, but lets say you have two low fidelity prototypes for a new program, you present them to a series of (willing) participants and see how they use them, how long it takes them to accomplish tasks, what their opinions are, there's a whole lot of things that can be measured there already! afterwards you get to see how they did, which was more effective, more efficient, more intuitive, etc. this is as old as 1986, when john brooke created his system usability scale thing. then there'd be high level prototypes, more interviews, different kinds of metrics, etc. all of that before an actual app is even done! obviously not everybody does things that way, and i'm kind of going off track, but i wanted to let you all know that metrics can be useful towards creating a good program. the thing is, how would you translate that to a finished product already? or an ongoing one? obviously forcing participation is not the way to go (imagine someone approaching you in the street making you use their prototype or else), and doing it surreptitiously is even worse. so in my eyes, whatever is done (generally speaking, not talking about audacity concretely), should be done with the consent of the users and ideally be an opt-in situation. from what i read over at 's original post it would be opt-in and disabled by default, so if that's the case so far so good for me. now, what to track actually? because that's a slippery slope, broadly speaking you'd want to keep it to a minimum, but tracking things that would be important for the betterment of the app itself. to my mind comes microsoft again, any of you remember the changes office had throughout its versions? the amount of toolbars it used to have and how things changed with office 2007? (that's when the ribbon was introduced, which has come a long way since then too, but that's another matter). they had an enormous amount of data from real users, already prior to introducing the ribbon, but i mention it because i remember seeing a presentation on what led to the creation of the ribbon (mix08 it was, i think there are videos in youtube for those willing to see it and i'd highly recommend them even if they're dated) and all that data was really useful! they allowed them to know which functions where used more, which weren't used at all, which where so hidden people didn't even know about (think about it, what do we use in an office suite and what is it capable of doing haha). all that came from telemetry, same with how many steps it took to do something and waaaaay more things (i'd say they captured way too much, but that's not the general point i'm trying to make). being able to see that your users use a function a lot, but it's hidden under several clics may make you think ""okay, let's see if we can make it more accessible, more intuitive"". or maybe, ""wow, they're really using that function and we're even working on it that much, let's do some sprints on it and see how we could improve it"". or even, ""oh... many users are making that mistake before accomplishing what they wanted to do, should we do something about it?"" (because you could see correlation of actions too, where you click at one moment and where you click next). it's another tangent, but in my experience the first thing that comes to my mind is the ""exporting"" to png for example in gimp, i'd go to ""save"" or ""save as"" instead many times. after all that i've said, my position on telemetry would be good, i like things i use the most to be priorized over others maybe. besides, audacity being open source, we (or those with knowledge and inclination) can know what's being measured so we don't have to trust it's going to be something when it's not. yes, it's a big pull request, and it's just that, a request open for comments one way or another and i'm sure the whole thing would be refined before shipping it in a subsequent release (if it's integrated that is). plus, if it's off by default there's nothing to worry about in my mind for those who don't want to take part into shaping the next versions. and if it ended up overreaching or whatever there would also be the possibility of building some binaries without the telemetry code (e.g., if using google's and/or yandex's systems is unacceptable). the bottom line is, just don't think of metrics as a bad thing, at least acknowledge they can be used for good too. yes, many times they're used for not so amicable things like those examples i wrote at the beginning, but not always. and while doing surveys like i mentioned is also another possibility, it isn't as representative of the real usage and certainly not as informative for developers. as long as audacity remains open source and the focus is to improve its usability, user experience, interface, etc. i'm good for it. ps. sorry for the long text, i started writing and it ended up being massive.",-1,-1,0,0.7525120973587036,0.7739770412445068,0.6281725168228149,-1.0,accept,majority_agreement
835876156,835,"i found this, which may help: [a link] on 5/9/2021 13:52, jxu wrote:",0,0,0,0.967332661151886,0.9010875821113586,0.967187225818634,0.0,accept,unanimous_agreement
835877943,835,i took the liberty of archiving the first ten pages (~~up until and including the comment above me~~ updated with some newer comments) on web archive. they're in json format but at least they won't be deleted. 1. [a link] 2. [a link] 3. [a link] 4. [a link] 5. [a link] 6. [a link] 7. [a link] 8. [a link] 9. [a link] 10. [a link],0,1,0,0.9239298701286316,0.6445584297180176,0.9524260759353638,0.0,accept,majority_agreement
835879195,835,"welp that was quick. they [a link] the screenshot. oh no! anyway. lol @ the comment about ""copyright"", and yes, i'm going to show the names (not handles) of the maintainers of the project. might i suggest reading this article: [a link] - here it is mirrored on imgur. [a link] - here it is archived. [a link] i suppose i'll be blocked from posting here soon. i'll update the thread in 's repository if i am. edit: just a few minutes after the screenshot was posted and they censor my comment the pr is closed. okay.",1,1,1,0.8943281769752502,0.9923511147499084,0.9751415252685548,1.0,accept,unanimous_agreement
835880578,835,- and i was going to do the low-tech method of expanding all the comments and saving a raw html file :p your method is a lot more programmatic,1,1,1,0.98785662651062,0.9728440046310424,0.9626806974411012,1.0,accept,unanimous_agreement
835880865,835,over 3000 thumbs down? we're closing this pr. we've taken on board 'no google' and 'no yandex' and muse are now looking for a good alternative (thanks to those who recommended other open source solutions by the way). please understand that this will take a little time to organize and a concrete plan will be published soon - at any rate this week.,0,-1,-1,0.6919416785240173,0.7626906633377075,0.4729337692260742,-1.0,accept,majority_agreement
835881034,835,"i will be setting up a fork soon too then, thank you for closing.",1,1,1,0.8759863376617432,0.9308063983917236,0.8124022483825684,1.0,accept,unanimous_agreement
835881156,835,thank you,1,1,1,0.7400884628295898,0.6702879667282104,0.9420937299728394,1.0,accept,unanimous_agreement
835881632,835,"you're the most qualified to fork imo, and a number of us have mentioned you in discord already hoping you'd fork too. can you do so really quick even if it's not a modified version so that we can star/watch? edit: nevermind, forked here: [a link]",0,0,0,0.7088690400123596,0.6282156705856323,0.6238179206848145,0.0,accept,unanimous_agreement
835881725,835,thank you for making an effort to listen to the community somewhat!,1,1,1,0.972736954689026,0.863721489906311,0.9679651856422424,1.0,accept,unanimous_agreement
835882011,835,"""the devs"" managed to work on audacity for 20 years without needing telemetry, or networking features at all. if a brand new developer is going to introduce new features, libraries, and bloat, there better be a damn good reason for it.",0,0,-1,0.7709630727767944,0.7009526491165161,0.9188358187675476,0.0,accept,majority_agreement
835882133,835,yes! i 1000% agree with what you are saying,0,1,1,0.7522935271263123,0.9061707258224488,0.9760351181030272,1.0,accept,majority_agreement
835882157,835,"i hope you look at some of the comments here a lot more carefully, i have seen some rather extensive work (some of which i did myself) that indicates there were a lot more issues with the underlying concepts that you were trying to achieve with this code. there really needs to be a concerted effort to understand the implications that adding a set of features such as telemetry involve, not just the technological aspect.",0,0,0,0.8693496584892273,0.9431445002555848,0.8781209588050842,0.0,accept,unanimous_agreement
835882492,835,"still need to check and investigate the ci build. in any case keep an eye on [a link] and i will be announcing it there when there is something to see. i had forked for my personal gh account, but it is better to use [a link] the main question now is if it is possible to keep the audacity name as-is (because the build will be identical, as-is, just with no tracking). as much as muse group want to be good people, i think that might be crossing a line on my side. is it okay to keep audacity name for builds which are identical in every way except tracking completely disabled?",0,0,0,0.7867052555084229,0.8116992115974426,0.6126757264137268,0.0,accept,unanimous_agreement
835883452,835,"you'll probably need to change the name. audacity is [a link], and as someone else in the discord (not mentioning who) pointed out, ""audacity"" is trademarked. that trademark changed ownership sometime last year and they took 4 months to announce it. the deal of the trademark transfer was not really outlined per my knowledge. perhaps you don't 'need' to, but you certainly want to - especially since muse group doesn't seem to be cooperative with the oss community.",0,0,0,0.9287959337234496,0.9502946138381958,0.941349446773529,0.0,accept,unanimous_agreement
835883575,835,"better yet, do you commit to providing official release builds for all supported operating systems built without tracking/telemetry? i am aware that you do not currently provide official linux builds but work on this in progress (#843). do you commit to providing official linux builds built without tracking when you introduce official linux builds? this is easy to do with github actions' matrix feature. if you need help with that i am happy to help. i for one think we will probably not need a fork if this is done.",1,1,1,0.9625680446624756,0.9857828617095948,0.571220338344574,1.0,accept,unanimous_agreement
835889342,835,"i'm working on this in case they will add some form of telemetry (which based on what said, they will): [a link]",0,0,0,0.982950747013092,0.9573023915290833,0.9880857467651368,0.0,accept,unanimous_agreement
835889454,835,"what part of ""no telemetry"" don't you understand? telemetry means collection of users' data, this has no place in a free/libre world. despite at least 90% (edit: the majority) of the comments saying ""we don't want telemetry"" and then you saying ""muse are now looking for a good alternative"" explained everything: you are not listening to the community. and for the record, ""looking for an alternative"" is not a winning point for us, it's a losing one in which it's clear now that we completely lost power of choice over this amazing program.",-1,-1,-1,0.9020260572433472,0.5801699161529541,0.9703917503356934,-1.0,accept,unanimous_agreement
835890192,835,"to be fair, a few expressed consent of telemetry with self-hosted servers being ok. there is a division on this specific issue.",0,0,0,0.9789475202560424,0.8863664865493774,0.8993520140647888,0.0,accept,unanimous_agreement
835890969,835,"the right amount of telemetry tracked in a manner that is fair and can be trusted could do good, this is just not it. perhaps something as ""simple"" as a ""send crash report"" button if audacity crashes.",0,0,0,0.9460435509681702,0.9873215556144714,0.7494191527366638,0.0,accept,unanimous_agreement
835891369,835,"i want to reiterate my concern for how the decision to even start working on this was made and how this pull request has been handled. it is *not* normal for foss projects to have no public discussion of major changes to the code before any code is written. if you do not make significant changes to your decision making process, including how the roadmap for development is decided, you should anticipate more contentious pull requests like this. again, i strongly recommend that every audacity maintainer, old and new, read all three of these blog posts about the rust community's growth through a highly contentious issue: [a link] [a link] [a link] furthermore i want to reiterate my earlier suggestion to enable telemetry/tracking only in special builds made for enthusiastic testers who specifically want to provide this data to assist in the development of audacity. mentioned this idea in his [a link] about this as well. i think these users would accept much more invasive data gathering for these special builds than average users, which could help you get better information to improve audacity. you could also likely get linux users to participate in this.",-1,0,-1,0.609144389629364,0.512721598148346,0.9584301114082336,-1.0,accept,majority_agreement
835897075,835,"this is rather frustrating. while it is appreciated that the pr has finally been closed, your take-away is worrying. the vast majority of comments here has made it clear that tracking and the code bloat that comes with it is neither needed nor wanted. but you're basically saying outright that you will have another stab at this. what you _should_ take on board instead: - no tracking, full stop - no huge pr without any prior discussion - no features that no one has ever asked for - no unnecessary code bloat",-1,-1,-1,0.9835919141769408,0.9914444088935852,0.9909018278121948,-1.0,accept,unanimous_agreement
835897610,835,"yes, i think there might be a better way to move forward and make a tool that could accomplish the audacity team's goals without infringing on other's privacy. my thought is what if instead of being built into the application directly, there was an extension system. the extension system could allow the user to install things like a ""support tool"" that only provides crash reporting / debug info. a ""feedback tool"" could provide more usage based information. a ""cloud export tool"" could enable users to be able to send files to whatever cloud based storage they wanted. (this last item is something that steve daulton mentioned being requested by users before.) the idea is that having this kind of system would keep this code off users systems unless they **specifically** decided to download and install it. of course, this doesn't directly address the infrastructure side of things...that is another issue that needs to be worked on.",0,0,0,0.7317524552345276,0.8853537440299988,0.9605575799942015,0.0,accept,unanimous_agreement
835898440,835,extensions add complexity. it is an annoying maintenance burden to keep api/abi compatibility between the host application and externally maintained/installed extensions. i suggest using compile options with cmake instead.,-1,-1,-1,0.9756096601486206,0.8444975018501282,0.9715738892555236,-1.0,accept,unanimous_agreement
835900157,835,"-ing it does add complexity, however it has many advantages: 1. there's no lock-in on platforms where users generally don't build the code on their own (ie, mac and windows) 2. it doesn't require access to github to submit new extensions 3. it puts more control over the code that's installed on their system in the user's hands. 3. a marketplace type system could take some pressure off the developers to chase after features that they don't feel should be in the audacity core 4. it could provide muse group / others with a way to provide ""value added"" add-ons",0,0,0,0.6972677111625671,0.9865224957466124,0.8551296591758728,0.0,accept,unanimous_agreement
835900576,835,"crash reports are indeed a form of analytics and telemetry, so i hope everyone fighting against any form of analytics and telemetry are willing to debug based on hearsay...",0,-1,0,0.6370115876197815,0.5965418815612793,0.5490043759346008,0.0,accept,majority_agreement
835901489,835,"you can use coredumps for when an application crashes and save them locally. it is then up to the user to upload those, or not. users can have a choice if we give it to them.",0,0,0,0.9869258403778076,0.9901446104049684,0.99368155002594,0.0,accept,unanimous_agreement
835903339,835,mentioned this on a twitter post from a linux mag asking tantacrul to give an interview. got blocked. ![a link],-1,-1,-1,0.9561750888824464,0.9424332976341248,0.9854307174682616,-1.0,accept,unanimous_agreement
835904332,835,"that's why i like the idea of an extension system...it gives the user the choice... kind of the ultimate ""opt-in"" - it doesn't exist until the user adds it... if they decide they don't want it, they remove it.",0,1,0,0.5434560775756836,0.6115193367004395,0.740293025970459,0.0,accept,majority_agreement
835904630,835,"why did you ban users from your official discord when they were trying to have a conversation with the maintainers? i'm seeing a pattern here. --- ![a link] you should probably not speak this way to an army of people who are upset with you for violating their privacy. good thing github edits are public, though. edit: he deleted the comment, lol. [a link].",-1,1,-1,0.8851523399353027,0.8339100480079651,0.9887595176696776,-1.0,accept,majority_agreement
835905166,835,i posted two comments. not like i spewed conspiracy theory or spammed.,-1,-1,0,0.8866417407989502,0.93527489900589,0.4984138906002044,-1.0,accept,majority_agreement
835908590,835,"as a contributor to a project with such a large audience tantacrul needs to have better developed soft skills. definitely this situation is a stressful one, but stress management is a helpful feat still. crucial even. otherwise we can't really completely trust someone this unstable.",-1,-1,-1,0.9076159000396729,0.8497143983840942,0.720586359500885,-1.0,accept,unanimous_agreement
835909694,835,i opened a new issue to discuss how to clean up audacity's dependency management: #853. i think everything that needs to be said about this issue has been said already. i suggest locking the discussion now.,0,0,0,0.9072813391685486,0.9772216081619264,0.952185332775116,0.0,accept,unanimous_agreement
835910537,835,-ing consider x-posting to the fork. [a link] edit: issues aren't enabled yet actually - can you fix that?,0,0,0,0.982088267803192,0.9814630746841432,0.9823128581047058,0.0,accept,unanimous_agreement
835911713,835,everyone needs to back down. this pr is closed. it's back to the drawing board to see where things go... muse group now have a chance to address the concerns that have been brought up in this pr. there is no reason to target anyone on the dev team.,0,0,-1,0.5482364892959595,0.7595662474632263,0.8033294677734375,0.0,accept,majority_agreement
835913219,835,"i’d even say tantacrucial! (sorry) on a serious note, i also think that telemetry should be implemented as an optional plugin or available only in a separate build for enthusiasts. matters like supporting old osx systems can be resolved with a poll.",-1,-1,-1,0.9892694354057312,0.992961585521698,0.9910979866981506,-1.0,accept,unanimous_agreement
835917857,835,"this whole ""muse group"" situation is really sketchy in my opinion.",0,-1,-1,0.6735496520996094,0.8685330748558044,0.9742085933685304,-1.0,accept,majority_agreement
835921181,835,i'm glad the maintainers have closed this for now. i do hope they come to their senses and abandon this idea completely. there is no need for tracking or a network stack in an audio editor.,1,1,1,0.9571083784103394,0.6144292950630188,0.9249972105026244,1.0,accept,unanimous_agreement
835923381,835,"incidentally, i'm doing what i can to make sure each of the community's requests are being heard but bear in mind that although i may be heading up the design and prioritisation of features, i'm not all-powerful and the solutions are not in my gift to give. that goes for the creator of this pr too. best i can do is try to push for an outcome that will please as many people as possible.",0,-1,0,0.6341155767440796,0.9449089765548706,0.6845861673355103,0.0,accept,majority_agreement
835938323,835,"the pr votes and this comment thread seem to have made what that would be pretty clear. thanks for the follow-up. edit: , i will encourage you to clarify what your role on the audacity project is, though. your youtube announcement video title declares you to be ""in charge of audacity"", and your twitter bio says you are ""the head of musescore and audacity"". both suggest that if you decided there should not be telemetry or a network layer added to audacity, it would indeed be a gift you could give.",1,1,1,0.9383865594863892,0.9679812788963318,0.97243469953537,1.0,accept,unanimous_agreement
835959358,835,"where will this be published? the audacity forum (if so, in what category)? in a new github issue? one of the email lists?",0,0,0,0.9832144975662231,0.9924718141555786,0.994201123714447,0.0,accept,unanimous_agreement
835979978,835,"this is closed, but this does _**not**_ mean that the muse group will not add telemetry. tantacrul requested telemetry in the muse group discord server (discord? foss? doesn't match at all!) so i do not believe they will give up.",-1,0,0,0.9558732509613036,0.7987139821052551,0.9458481669425964,0.0,accept,majority_agreement
835996960,835,"fwiw discord is super common even among foss communities. it has a lot of issues, including its nature, being so vehemently proprietary that they've even spoken against client modifications like betterdiscord that are based on the code of the official application, but hey, we're on github, which is also almost completely proprietary. discord's a really useful place to get friends together and build communities and communicate, whatever its nature in licensing, and it's a perfectly valid choice for people who want half-decent, sustainably scaling chat, so i think that picking on it is a little undue. that said, yeah, definitely needs to offer a statement of clarification on this. the whole situation feels more than a little uncomfortable.",-1,-1,-1,0.4703300297260284,0.7828139662742615,0.5230793356895447,-1.0,accept,unanimous_agreement
836040128,835,"i would also like a full explanation given ideally to the press, perhaps the register for example, of: - the origins of muse group, a for-profit corporation in cyprus - who really are their primary shareholders - how they bought the trademark ""audacity"" and - what happened between buying the trademark at end of dec 2020 and announcing this at april 2021.",0,0,0,0.8019093871116638,0.9888007640838624,0.9789495468139648,0.0,accept,unanimous_agreement
836069326,835,"sure. i propose the roadmap and many of the features (with help from others on our team) and i work with the community who collaborate on these things in addition to their own goals. i've been doing the same thing for musescore for a while now. however, because i'm in charge of audacity and musescore, this does not mean that i run muse. i work for muse. regarding telemetry: this is a requirement that muse have for every app in their ecosystem so they can determine how the changes we make are performing. i did not (as someone said above) 'request' it. now that this telemetry thing has kicked off, i'm trying my best to achieve a resolution that annoys as few people as possible. then i want to get back to the roadmap so everyone can see what things we are planning and have the opportunity to comment on them. all i'm interested in is working on the design and feature set of audacity. someone else is asking why we only announced recently, having started in late november. answer is easy: transitions take time. a team needed to be hired. skills needed to be learned. we needed to get to know the community and we all had to do a lot of research. also... that announcement video took about a month to write and edit too. i know i'm not answering every question people have asked here. i feel it's best to first get to the telemetry announcement as fast as possible and take it from there. the announcement _should_ happen this week.",0,0,0,0.5913426280021667,0.8625795841217041,0.8543408513069153,0.0,accept,unanimous_agreement
836074105,835,"just because muse owns the name of audacity does not mean the community will have to automatically follow along, especially for self imposed nonsense like ""this is a requirement that muse have for every app in their ecosystem so they can determine how the changes we make are performing."" i hope distro maintainers make the right choice and patch out or use a fork getting rid of this nonsense.",0,0,1,0.7082048058509827,0.9043161273002625,0.4662660360336303,0.0,accept,majority_agreement
836074340,835,"and here we arrive at why all this got started: this was requested by muse group. however, it looks like muse group may have to come to understand that the community that uses audacity does not want this. perhaps they'll have to arrive at a compromise? or simply back down, in this case.",0,0,0,0.9005828499794006,0.9649035334587096,0.9481342434883118,0.0,accept,unanimous_agreement
836079472,835,"i tried earlier to make certain that the depth of this issue is understand from the perspective of the open source community by providing a set of cases. i'm afraid that document got buried in the landslide of comments on here. please have a read through the copy here: [a link] it's a long document, nearly 10 pages, and yet it really on scratches the surface of how divisive the topic of telemetry is in the open source community. i understand that muse group's primary applications so far have been on mobile platforms, and non-open source. the concept of how to work with the open source community at large is a very foreign concept (i am, in fact, surprised things didn't blow up this way with the musescore community). my best suggestion to the muse group is to slow things down... make small changes first, go through the backlog of issues, pr's and bugs.... tackle those first while doing research to understand how to tackle larger changes in a way that will work for the community at large.",-1,-1,-1,0.9468509554862976,0.9667294025421144,0.9619754552841188,-1.0,accept,unanimous_agreement
836085393,835,"wow. thanks! i apologise but i did miss this. incidentally, there was some anger on the musescore forums too although we actually announced it upfront, which i feel came across as much more transparent. in this instance, a communication error led to a first-pass pr being made public which wrong-footed us all and prevented us from announcing it first to gauge reactions. it looked bad when it was discovered like it was.",-1,1,1,0.6485725045204163,0.9478397965431212,0.7410119771957397,1.0,accept,majority_agreement
836087112,835,"hoo-boy, that's not going to appease anyone at all. but thanks for the response, .",1,1,1,0.9422879219055176,0.9909623265266418,0.9302344918251038,1.0,accept,unanimous_agreement
836091284,835,"no apology necessary, i figured it might have been buried, or i posted it when you were (possibly) sleeping. ;) yes, clear communication is always a good first step. imo - there will always be noise around a topic this controversial, it's something that really should be expected. that puts the onus on the proposers to really approach the topic with serious and deliberate forethought. that's something that didn't happen in this case.",1,1,1,0.9021475315093994,0.9893306493759156,0.9826728105545044,1.0,accept,unanimous_agreement
836093515,835,"while i'm sad that you have succumbed to the telemetry fud vocal-sheeple-crowd that would not get the best feature prioritised, i wonder if anyone has recommendations (on unrelated note) to allow only whitelisted apps to connect to the network?",-1,-1,-1,0.9832672476768494,0.9815278053283693,0.9798272848129272,-1.0,accept,unanimous_agreement
836105118,835,"i'll bring in a quote from [a link] (emphasis mine): there has been a lack of transparency about what exactly the motivations for introducing telemetry are. if you are open about what exactly you are trying to accomplish, and start the discussion there rather than starting with 5500 lines of code already written, we may be able to help you figure out a way to do it in a way that is acceptable to the community. the caveat is that if your goals are directly opposed to the community's interests, we'd have to go our separate ways. so let's start with identifying what are the goals that might be accomplished using telemetry. from there, we can discuss the least invasive way to do that. that's how you can build trust. you may be surprised how much you can learn with a more focused approach to collecting data. it may be easier to find the needles when the haystack isn't so big.",0,0,0,0.8983899354934692,0.9523687958717346,0.969448983669281,0.0,accept,unanimous_agreement
836109757,835,"hopefully you are still lurking... an issue that really should be worked on before telemetry is even approached again is de-vendoring the libraries that are being included in audacity. this is actually a massive issue....even bigger than i realized until a few minutes ago. currently there are only three of the top 100 linux distributions shipping audacity 3.x (fedora, mageia and opensuse). there are literally 97 other distributions out there that are still shipping audacity 2.x (including: arch, debian, ubuntu, manjaro, and mint). even if telemetry had been added it would have been irrelevant in the linux world because the vast majority of the distributions can't ship the 3.x releases as they are because there are issues building it. the reason is because audacity is relying on specific libraries that they are bundling with the application, instead of working with the current releases of those libraries. this mistake was going to be made again in this pr by vendoring libcurl as part of the implementation for the network-manager layer. the likely reason this happened is because many of these libraries aren't natively part of windows and macos. so, the vendoring approach was taken in order to handle those platforms. the way to fix this isn't going to be easy... the approach that would likely be the best would be to (a) de-vendor the libraries, (b) modify the build system to produce flatpaks versions for macos and windows. this way the flatpaks can include the libraries (and the most current version of them), while linux versions can build against the native libraries. (at least this is my initial idea for fixing it -- others may have better ideas.)",-1,-1,1,0.5637451410293579,0.913996696472168,0.5682019591331482,-1.0,accept,majority_agreement
836112638,835,please take the discussion about devendoring dependencies to #853.,0,0,0,0.9865607023239136,0.9882319569587708,0.9948872923851012,0.0,accept,unanimous_agreement
836117684,835,"not to stir the pot, but 's comment was posted directly in the audacity discord group within minutes of you interacting with the very same channel. going to be blunt: i don't believe you. i think you saw it and either chose not to read it, or you're trying to save face. of course nobody can read minds, so this is pure speculation. either way, none of this is sitting right with me. it really feels like muse is trying to save face here whilst still trying to keep ulterior motives under wraps. the trust is permanently gone.",-1,-1,-1,0.9738559126853944,0.9852537512779236,0.9730599522590636,-1.0,accept,unanimous_agreement
836119092,835,"i will emphasize that muse is in no position to ""require"" telemetry in a free software program, as all users are empowered to take and modify this software as we see fit, by the gnu gplv2. therefore, if we do not want telemetry, there will be no telemetry",0,0,0,0.94281268119812,0.9843271374702454,0.9789661169052124,0.0,accept,unanimous_agreement
836122245,835,"i'm not sure many people reacting there are knowing how github works. this is a pull request, and then, a draft. if the data was not as anonymous as the stated goal said, then what people must ask for the proposed draft to be rewritten, or submit proposed change to fix the issue. some people submitted suggestions indeed. i'm all concerned by those google and other things i've seen, but eh, that's a pr, the concern would be if that gets merged unmodified, not if the details of the implementation are made open to discussion... there are clearly communication mistakes and problematic things in the former proposed draft, but here we are not on twitter and things are expected to be discussed politely and _edited_... we're not there to do crowded harassment and satisfy our own ego building-up our feeling of being better at judging this or that. we're there to _help_ people making good software, including how to properly protect user data. that's because we are expected to _help_ the place is open to discussion. if pull-request threads were not for helping, github would just be another social emotion dealing platform.",-1,-1,-1,0.8470121622085571,0.8939599394798279,0.889236330986023,-1.0,accept,unanimous_agreement
836124789,835,please don't jump in at the end of a long contentious discussion ignoring even the most recent comments.,0,0,-1,0.7121911644935608,0.7880510687828064,0.9177066683769226,0.0,accept,majority_agreement
836127853,835,"-ing this is indeed addressing recent comments [a link] one hour ago: by reminding this is github, it also means this is even not a place to ask for firewall recommendations...",0,0,0,0.7380996346473694,0.927296817302704,0.969499945640564,0.0,accept,unanimous_agreement
836132456,835,"this being github has no bearing on the reality that the new maintainers of the project have no reason not to accept this pr outside of the outcry that is being raised, seeing as the whole telemetry package is being added on their command. if the acceptance or rejection of this pr was actually based on the soundness of its content in relation to creating good software, it would have been rejected fast enough to not receive any comments at all. and telemetry has now been indicated, by , to be a required component according to muse. this means that unless they choose to listen due to this outcry, the telemetry will be added, which invalidates any claim you are making about github's functionality being relevant to the situation.",0,0,0,0.8122586607933044,0.9717796444892884,0.7762100696563721,0.0,accept,unanimous_agreement
836134301,835,"i'm aware of this. i have read many of the comment there. but that's weird, people are acting like if they were on facebook, the best example being -ing just downvoting comments because of not being happy when seeing this or that comment he probably didn't expected, despite i just [a link] 40 minute ago and my comments were an addition on that topic so we are just agreeing... this is not a place for the concern of being happy or unhappy.",-1,-1,-1,0.9806797504425048,0.986642599105835,0.9925710558891296,-1.0,accept,unanimous_agreement
836138239,835,"i think you make a fundamental misunderstanding about the nature of github, and that of software development as well. not all decisions that go into creating software are technical, they are often done on the basis of personal preference, intentional constraints, morals, ethics, and even financial interest. at the end of the day, every tool humankind uses is an attempt to gain the means to happiness. that a modification to one such tool causes this level of unhappiness, no matter what the underlying reason may be, is plenty enough to take such a minimally intrusive action as making a comment on a pr on github. you're right, this isn't facebook or twitter. but that does not mean that projects are not driven by human goals, and therefore human emotions.",-1,-1,-1,0.9153196215629578,0.762751042842865,0.5426083207130432,-1.0,accept,unanimous_agreement
836139590,835,i don't think a philosophical discussion about the nature of github is helping anything right now.,-1,-1,-1,0.5302364826202393,0.7369040846824646,0.6896159648895264,-1.0,accept,unanimous_agreement
836148778,835,"i know very well what you've said, [a link] and [a link]. it looks like most of the reactions about what i said are more focused on what people believe about me and less about what i said... i'm not there to discuss that. i have said what i assumed was useful to say in the matter of making this a better place for making useful contributions on the topic, not to start a thread about the nature of my own feelings, that was pretty the contrary, i wanted to lower the effect of feelings on the discussion. it looks like i can't help lowering the biases induced by feelings, then see you again.",-1,-1,-1,0.4982278347015381,0.5195195078849792,0.4879514873027801,-1.0,accept,unanimous_agreement
836163545,835,"i don't think that there is anything irrational or emotional in not wanting software to send user data to google and yandex. i think this is a matter of morality. it is immoral to send user data to exploitative ad networks-- even if they don't realize that it is a bad idea to click a ""yes"" button to doing so; as you are then attempting to exploit their trust in you.",-1,-1,-1,0.9769352674484252,0.9236595630645752,0.5013843774795532,-1.0,accept,unanimous_agreement
836164526,835,the audacity maintainers have already agreed to not send data from audacity users to google analytics or yandex. so i don't think discussing that point any further is helpful.,0,0,0,0.9082533717155457,0.9644155502319336,0.9631516933441162,0.0,accept,unanimous_agreement
836168146,835,"the fact is, that they currently send data from musescore users to ad networks.",0,0,0,0.9842483401298524,0.9921145439147948,0.986276924610138,0.0,accept,unanimous_agreement
836169499,835,"so, what about renaming this pr the same way the pr description was edited? this would help lowering the misunderstanding from outside people to better focus on topic. i suggested to rename to something like ”make possible for users to help the project by contributing anonymous usage if they want to” instead of “basic telemetry for the audacity”. this would help to make the thread constructive. and if such suggested title doesn't fit well what is done, it means what is left to do is known, which is constructive as well.",0,0,0,0.8739426136016846,0.9825398921966552,0.9367750287055968,0.0,accept,unanimous_agreement
836170211,835,"the data sent is not anonymous, by the legal definition in gdpr.",0,0,0,0.9840265512466432,0.9910920262336732,0.99276864528656,0.0,accept,unanimous_agreement
836170906,835,okay i think it's time to lock this discussion. nothing is being added anymore that hasn't been repeated many times already.,0,0,0,0.9532684683799744,0.9646507501602172,0.7422312498092651,0.0,accept,unanimous_agreement
836171307,835,"awesome! opt-in is the right way to do telemetry. this is bad. anyone who worked in it for a reasonable amount of time knows how people tend to click highlighted buttons. telemetry should be neutral, so don't highlight any button. this is poorly phrased. the first half mentions usage by platform, while the second half mentions stability. did you mean ""stability by platform"", so based on the combination of usage and stability you know how to set priorities in fixing issues? this is bad. opt-in telemetry will never tell you anything accurate about the true size of the user base. nice, this is a valid reason for telemetry. at the same time, you still can't tell if the collected telemetry is representative. this is why doing telemetry right is critical if you want more data - and it's still not fleshed out properly. this looks like the wrong approach because new features for version x don't warrant the effort of adding telemetry. they're supposed to be tested by the community, especially by those who can provide quality feedback. why use these in the first place? an opt-in mechanism will limit the number of reports from the get go, because most people don't want telemetry features enabled. why not start a telemetry service of your own, and see how it scales? these are fundamentally wrong. if someone enables telemetry and chooses yandex, it means you only get the ""application opened"" event, which is useless in determining anything useful about audacity's performance, stability and environment (os). this makes it look like you want to determine market share more than anything. this is completely wrong. surely you are aware that feeding data into data-hogging companies is unacceptable for a lot of people. the point of telemetry should be to improve the development process, so if you want to maximize the amount of useful data to enable that, make the right choice from the beginning. why complicate things by working with two different platforms, then migrate to another? it takes time and effort to handle those, so do that for your own service, which will also make more people happy and forthcoming with the telemetry feature.",-1,1,1,0.67469322681427,0.9879580736160278,0.9939099550247192,1.0,accept,majority_agreement
836200904,835,"for ux issues such as a ui where nobody can find a specific tool, telemetry won't tell you a single damn thing unless you're doing extremely invasive eye- or mouse-tracking, and frankly, i'm not even sure if robust libraries exist for such a thing on anything that isn't an electron app. it will not actually help anything insofar as ux improvements any more than asking for feedback or doing proper first-time user testing. for crashes and bugs, there's always the classic crash reporter that so many apps already use. you know what telemetry *is* useful for, though? market share. i guarantee that ultimate guitar wants telemetry because it makes them look good to potential investors by demonstrating how much of a ""market share"" their new ""brand"" (audacity) has, and how much time people spend using the app. anyone who has actually worked with telemetry data knows this, including myself. in a very distant second, it can tell you if anyone is actually using a niche platform and if it's worth supporting at all - but again, that's mostly a side-effect of knowing your market share rather than a direct benefit. leave the telemetry at the door, apologize, and hope the foss community forgives the project over the next year. maybe even consider removing telemetry from musescore as a sign of good-will. if _not adding telemetry_ is unacceptable, then we can effectively consider this app ""free as in beer"" rather than ""free as in freedom"" as it's clear that this project no longer belongs to the community with a company shepherding it, but to a business more interested in taking over projects and talking down to the community. more of a google than a linux foundation.",-1,-1,-1,0.7678541541099548,0.8841310739517212,0.722708523273468,-1.0,accept,unanimous_agreement
836220360,835,"no because the hundreds of comments and thousands of downvotes belong to this pr as it was posed (and even before its text was made ""more nice""). the pr is closed. start over with a new discussion of the planned changes.",0,0,0,0.9734264016151428,0.9486840963363647,0.9381513595581056,0.0,accept,unanimous_agreement
836244433,835,"the actual edited pr description also quotes the original pr description, nothing prevents the poster to do the same with the title. anyway, you're right, this pr is closed. so my pr title suggestion is now more about the title of the pr to be created after this one, and such talk must happen before the creation of the next pr, obviously. from such clear statement about intentions (and not about means only like the initial pr title) it becomes possible de produce both a roadmap and ways to control the objectives are met.",0,0,0,0.9627771377563475,0.97231262922287,0.9898771643638612,0.0,accept,unanimous_agreement
836320657,835,"-- [a link] -- [a link] thank you very much, this hits the nail on the head. please see the above. that's what a lot of people here assume, simply because it logically makes sense. if we just look at the [a link] page, we can see they indeed do love to boast numbers. this is something you _have_ to be open about, even if that means the community will disagree. further, one huge question that is still on the table is _how_ muse group has even ""acquired"" audacity, a free and open source project. are the core maintainers, or some of them, now on muse group's pay roll? who exactly is muse group and what is their vision for audacity? what rights and power does muse group have over audacity, exactly? all of this is confusing and should be cleared up - it is _directly_ relevant to the discussion at hand. for example, what if muse group won't back down about tracking, but the community won't either?",1,1,1,0.9459553360939026,0.9772262573242188,0.9864316582679749,1.0,accept,unanimous_agreement
836352962,835,"this. exactly how does one ""acquire"" a gpl project? because from my understanding, it belongs to the contributors and only to the contributors.",0,0,0,0.972233772277832,0.987984299659729,0.9818243384361268,0.0,accept,unanimous_agreement
836355997,835,"this is one of the most important questions about the future of audacity. for example, in 2010 the owner of the nexuiz name sold it to a company, but the actual developers of the nexuiz open source game were in fact contributors from the community and not involved in the deal. the new owner of the nexuiz name released a game in 2012... without success, even xbox 360 servers were shut down in 2013... those who were developers of the original nexuiz game before the selling of the name had to continue the development under another name ([a link] since the name was acquired by the other company. but while xonotic is still more popular than the new nexuiz the name transfer deal was about, it never recovered its visibility and reputation (even the french wikipedia deleted the xonotic page [a link] because of lack of visibility). i even met people who mistakenly believed xonotic was the non-community project... another story with similar effects even if the turn of events was different: old time contributors to openoffice had to pick a new name ([a link] when oracle acquired the name in 2010 as part of sun's catalog without interest for the development of the software itself. 10 years later, i've heard that there is still people to download outdated openoffice, as much as the ones downloading libreoffice. i even met people not knowing about libreoffice this year. so, someone got the audacity name, but what about the community? i'm not in favor of a fork, because if muse group owns the audacity name, the fork will never recover the decade old reputation of audacity and recognition, there may even be people deleting the pages about the community fork every three years on third-party website like wikipedia because of lack of reputation (so, chicken and egg problem). and the audacity-named software would just lose all the contributions, owning the name of a dead project, like owning dead nexuiz and dead openoffice. this would be bad for muse group, bad for audacity developers, bad for audacity users. a fork would be bad for everyone and it would hurt the world for decades. so, the real problem is, how to make muse group and audacity community reconcile themselves. maybe muse group may give up on this or that data that is not worth the loose of the contributors and users for example, and well, as people we may help muse group to know what must not be done and what is best to do. for sure i would not recommend users to give up on data protection. it's often better to know less about users but to keep the users. on the other hand there is probably a place for an opt-out way to contribute some anonymous usage data to help making the software better, but yes that must be opt-out and truly anonymous.",-1,0,0,0.7285594940185547,0.9280396699905396,0.5192518830299377,0.0,accept,majority_agreement
836466532,835,i agree and have therefore opened an [a link]. that should be a better place to discuss this topic than a closed pr for a tracking feature.,0,0,0,0.9460200667381288,0.9588765501976012,0.970698893070221,0.0,accept,unanimous_agreement
836481550,835,"urm, outdated? personally i prefer libreoffice, but after oracle screwed it up for a few years it went to apache foundation, most recent stable release: 4.1.9 (february 7, 2021; 2 months ago)",0,0,0,0.8865400552749634,0.9525153040885924,0.8789372444152832,0.0,accept,unanimous_agreement
836482661,835,"how to ""acquire"" an open source project: buy out all the people who have commit access on mon, may 10, 2021, 5:33 am julien ***@***.***> wrote:",0,0,0,0.9202325344085692,0.9121683835983276,0.9930025935173036,0.0,accept,unanimous_agreement
836556673,835,ok this pr is closed. but its link has been plastered all over the internet. i suggest to the devs this thread be locked. as i see it being a hotbed for drama for the foreseeable future.,0,-1,-1,0.8293884992599487,0.8174805641174316,0.5058929324150085,-1.0,accept,majority_agreement
836589805,835,"i would like to highlight one post by which might also have been lost to the torrent of comments: [a link] the suggestion to make this not a compile-time decision but a plugin makes this much more ok for me. i am on the ""absolutely not tracking period"" train, and i think that that suggestion above can suit _both things at the same time_. the main codebase would not be doing any networking. but people (and not just developers!) could opt-in to tracking very transparently. i also think that crash reporting should be equally decoupled from the main codebase, if technically possible.",0,0,0,0.6622533202171326,0.9120546579360962,0.5003397464752197,0.0,accept,unanimous_agreement
836604025,835,"i haven't read the whole thread, but have you considered using other analytics solutions that don't sell user data? there are various such existing solutions.",0,0,0,0.9716283679008484,0.9667260646820068,0.9687462449073792,0.0,accept,unanimous_agreement
836687462,835,"wow, i hadn't actually seen that site. it does not surprise me at all that download numbers and market share and put above the actual features of the apps. it is very clear where their priorities lie just from this, and their main site only confirms this. audacity may very well be in the slaughtering house now. and please, core contributors, don't paint me or others in this thread as some kind of ""outsiders"" to audacity. i've personally casually used it as a tool for over a decade. for you to turn around and tell your userbase that their opinions don't matter is extremely damning concerning the direction of this whole conversation and the foss community in general.",-1,-1,-1,0.746724545955658,0.987198531627655,0.943301558494568,-1.0,accept,unanimous_agreement
836967886,835,i have used audacity for decades and am very disappointed.,-1,-1,-1,0.9844142198562622,0.975423276424408,0.9890968799591064,-1.0,accept,unanimous_agreement
837050025,835,"omg, this is the most hilarious virtue signaling thread i have seen in my entire life. look at the bold statement making basement dwelling famiu. everyone, lest this be forgotten, it's important to know that famiu has, you guessed, exactly 0 commits. [a link] i hope all toxic losers who are in this thread (i guess all telemetry fud spreaders) are losers like him.",-1,1,-1,0.95367693901062,0.9064117670059204,0.7398338317871094,-1.0,accept,majority_agreement
837052668,835,"not all contributions are code, you know? also, gpl/agpl and pretty much any other license is not about developers. it's about giving the general population rights. look for the ""four basic freedoms"", if you need clarification.",0,0,0,0.9775017499923706,0.9445850849151612,0.9755118489265442,0.0,accept,unanimous_agreement
837063121,835,"this pr was rejected, before your comment, what are you disappointed about?",-1,-1,-1,0.86101895570755,0.6336207389831543,0.902036190032959,-1.0,accept,unanimous_agreement
837067858,835,can this just be locked already? there's not much else anyone can really contribute to the discussion...,0,0,0,0.8225672245025635,0.9461334943771362,0.8558874130249023,0.0,accept,unanimous_agreement
837072787,835,"you talked about commits on this project, but some people there only have like a handful of commits in a single repo and a handful of issues created on the whole github over 10 years, others only have code related to school evaluations... and may have said others do not understand how github works or how software development works... this is what happens when people confuses github with twitter.",0,-1,-1,0.5827146768569946,0.699171245098114,0.8530489802360535,-1.0,accept,majority_agreement
837073059,835,is that you drunk again? :d ([a link] i had a good laugh i have to say :)),1,1,1,0.982970118522644,0.9908103942871094,0.996061623096466,1.0,accept,unanimous_agreement
837110093,835,"-eckleben nah i only have the one account, that one wasn't me. besides i am _anti_ tracking is firmly pro.",0,-1,0,0.927095115184784,0.5774049758911133,0.7008146047592163,0.0,accept,majority_agreement
837322132,835,i'm disappointed i wasn't the target of a clearly troll personal attack on my commit history.,-1,-1,-1,0.979536235332489,0.961850643157959,0.990917146205902,-1.0,accept,unanimous_agreement
837522369,835,"oh wow. it seems nobody hugged you while you were growing up... that's just sad, buddy. it would be nice though if you kept that shitty personality of yours to yourself, that would save yourself a lot of embarassment",-1,-1,-1,0.9903486967086792,0.9908968806266784,0.995323121547699,-1.0,accept,unanimous_agreement
837653043,835,"oh wow! you work for microsoft or something? because there's reason to worry about ""annonymous"" telemetry (hint: not annonymous). also, please keep your horrible personality to yourself. this is github, and not twitter.",-1,-1,-1,0.9900802969932556,0.9283392429351808,0.9949969053268432,-1.0,accept,unanimous_agreement
837843122,835,or moved to gitlab after github got bought.,0,0,0,0.9843634963035583,0.9895727038383484,0.99053156375885,0.0,accept,unanimous_agreement
838475883,835,"yep, time to close this. but will it be closed?",0,0,0,0.9763302206993104,0.7881767749786377,0.9303858280181884,0.0,accept,unanimous_agreement
838662260,835,"i don't see why there is so much backslash. we have this on browsers, which do process much more private informations than an audio editor. it's opt-in anyway. if you don't want to share data either don't opt-in or compile it for yourself without the module :)",1,1,1,0.7276744246482849,0.946093201637268,0.9571419954299928,1.0,accept,unanimous_agreement
838680722,835,read the backlog if you want to know why. not all of us are complicit and don't care. the amount of add-ons needed to make browsing the web a proper experience clearly shows browsers are not a model to follow.,-1,-1,0,0.9153655767440796,0.7215697765350342,0.7684779763221741,-1.0,accept,majority_agreement
838783331,835,"because the negative aspects very much outweigh the downsides. read the discussion for more details. and even with browsers there are enough people quite angry with the situation. but given the implications there (about 4 days for custom builds to remove tracking, when building from source on your own hardware and not everybody can manage this) there's unfortunately not much alternatives to choose from. but that's a different topic. that's what the pr officially says. the actual patch had several issues that inverted this logic and thus made it active by default as well as anti-patterns that coerced the user to just click thru to enable it. oh, and that telemetry was neither anonymous (use of known advertiser services) nor was it limited to actual telemetry only: the pr includes an uuid per user, thus allows for tracking of installations. which brings us back to the browsers: have you actually tried to build audacity from source? do you think this is a sustainable solution for the average user? overall there are much better alternatives to baking telemetry directly into the core application. one for example is having telemetry added by a plugin that the user consciously installs. this also has the advantage that everything the telemetry monitors would also be available by official apis for other plugins to use. doing it that way also guarantees the agreement to the collection of personalizable information under gdpr in conscious, informed and voluntary.",-1,-1,-1,0.856838047504425,0.8492657542228699,0.9114137291908264,-1.0,accept,unanimous_agreement
838792522,835,"yeah sorry, not possible with this amount of comments. :/",-1,-1,-1,0.990050733089447,0.99409818649292,0.9966542720794678,-1.0,accept,unanimous_agreement
838799486,835,"alright, i see your point. i expected that the description was accurate. i have read some of the comments and it felt not really substantial what people complained about. maybe it's worth reworking this patch and run the collection on servers of the project instead of third party ones. i do see a large benefit of collecting crash informations for example, since audacity isn't really that stable to begin with. there's room for improvement.",0,0,0,0.7125043869018555,0.8375661969184875,0.8035837411880493,0.0,accept,unanimous_agreement
838822487,835,a doing bad things doesn't justify when b does bad things.,-1,-1,0,0.8498764038085938,0.8972550630569458,0.5417982339859009,-1.0,accept,majority_agreement
838826849,835,"there's lots of virtue signalling in the comments, unfortunately. this pr introduces a full network stack into an application that successfully managed without one for over 20 years. thus introducing one really should have a very good reason and given the expected overall quality of the collected information the data ain't the compelling reason in this matter. there are simply too many threads attached that negatively affect the quality of the collected data, thus there's much easier and worthwhile methods to produce even better statistics to base your decisions on. remains the part regarding crash reports: one of the few points that i agree. unfortunately even here you don't really need to introduce networking into the core application. to give one example: `htop` simply gives a backtrace, some basic information required for a bug report and instruction how to help to make the backtrace more informative (basically: how you call `objdump` - or its equivalent - on your platform so you can attach that file to the bug report). this gives the option for the user to opt-in sending the bug report and still manages to respect the freedom of the user to not being tracked by the application. if you want to make it more friendly for beginners you could even use a separate application that pops up just when the main application crashed (like firefox and several other tools do), but even then the main application does not need any linkage to any networking stack. and fwiw: the information that `htop` asks the user to provide usually helps to pin down the exact line of the crash within about 20 minutes, even when handling the `objdump` file by hand. could be more convenient to do, but the fact is, that the actual bug reporting can and should be fully offline.",-1,1,0,0.6876717805862427,0.4696152210235595,0.6010128259658813,,review,no_majority_disagreement
838860677,835,seriously please close this pr. i think most of the possible arguments against this have already been established and i hope all the team work in favor of the comunity,0,1,-1,0.4854153990745544,0.8722139000892639,0.8381061553955078,,review,no_majority_disagreement
838873004,835,"[a link] i do, however, think it would be a good idea to lock the pr to prevent anyone from posting yet more comments; i agree that pretty much every possible argument on all sides has been made and we probably crossed that point a day or two ago.",0,0,0,0.5269898772239685,0.9260472059249878,0.9590197205543518,0.0,accept,unanimous_agreement
840611009,835,"please, see our response: [a link]",0,0,0,0.9790924787521362,0.95329487323761,0.9934044480323792,0.0,accept,unanimous_agreement
896713904,1384,"also, it looks like we should only allow source separation in win64 builds",0,0,0,0.9843677878379822,0.9932059049606324,0.9932811260223388,0.0,accept,unanimous_agreement
958149413,1384,"thank you guys for this amazing work! would it be possible to implement a local model import without the neccesity to upload the model on huggingface? the team i work in could possibly use the feature to evaluate and demo the developed models, however, our models are strictly confidential so we shouldn't share the models on a third party platform.",1,1,1,0.9920567870140076,0.9927418231964112,0.9960545301437378,1.0,accept,unanimous_agreement
959639189,1384,"yes! it is (kind of) already possible to use your own local models. you would just have to recreate the repo file structure where deep models are stored (for example: `~/library/application support/audacity/deeplearning-models` on mac). regardless, i've opened an [a link] to add a dialog that makes this a bit less hacky.",0,0,0,0.6223723292350769,0.7928929328918457,0.648398220539093,0.0,accept,unanimous_agreement
993437529,1384,"i have been asked to contribute my review. first thing i notice is ci build failure on three of four platforms, but a rebasing onto commit 6af68bd761642e5937710fa0cc8ef920efa9a5df or later should fix those spurious errors.",0,0,0,0.9759443998336792,0.912861466407776,0.9631091952323914,0.0,accept,unanimous_agreement
993808288,1384,"-licameli hi paul! thank you so much for taking a look. i just rebased on 6af68bd761642e5937710fa0cc8ef920efa9a5df, but i don't think the linux workflow is working yet. here's the relevant error trace (from the [a link]: [code block] any clues?",1,1,1,0.9848129153251648,0.9881812930107116,0.9934640526771544,1.0,accept,unanimous_agreement
993841602,1384,let's ignore linux for now,0,0,0,0.9079676866531372,0.975356936454773,0.9482666850090028,0.0,accept,unanimous_agreement
996654061,1384,i pushed a suggested commit on the end. this shows how to put the new effect and analyzer into a module that is still part of the top-level all_build but compiled into a separate dynamically loaded library and optionally loaded at startup. see commit comments for other details.,0,0,0,0.9879330992698668,0.9926213026046752,0.992395520210266,0.0,accept,unanimous_agreement
1005676661,1384,"i have pushed a few easy cycle-breaking commits onto the branch, and this is the improved dependency graph, but not yet free of cycles. ![a link]",0,1,0,0.5731474757194519,0.6625482439994812,0.6768749952316284,0.0,accept,majority_agreement
1006165116,1384,"i'm done reviewing modelcard, the first step in my upward topological sort of that dependency graph. which file should i do next?",0,0,0,0.9520060420036316,0.8946290016174316,0.9863802790641784,0.0,accept,unanimous_agreement
1007838854,1384,"doxygen output is much improved! the last piece i need to review is the modelmanager, and i might suggest a way to break the remaining dependency cycle among the files.",1,1,1,0.9262090921401978,0.6588234305381775,0.9136547446250916,1.0,accept,unanimous_agreement
1008164817,1384,", i would like you to review two new commits from me now, with a suggested fix for the dependency graph. by adding one more file pair, activemodel, and one use of indirect function call (giving the activemodel object a ""listener""), i make the graph nicely acyclic. ![a link]",1,0,1,0.6560168862342834,0.8466872572898865,0.8391534090042114,1.0,accept,majority_agreement
1008211669,1384,"at last, my review of this project is complete!",1,1,1,0.7149528861045837,0.909813404083252,0.9799461960792542,1.0,accept,unanimous_agreement
1011579765,1384,"i have not yet caught up in a second round of review of your anwsers to my suggestions -- let me know when the branch is stable and i should do it. meanwhile i have pushed two more suggested commits. the first is a cherry-pick from the master, which will disappear from this branch if you rebase it onto latest master. the second makes use of the new utility defined in the first, to simplify the sending of messages from activemodel, which is the class i introduced to break dependency cycles. this is the well known ""observer pattern"" in action -- it is a great friend for the breaking of cycles, and i use it so often i wrote a new class template to help generate instances of it. it often happens that something ui related, like the dialog here, needs to be at the higher level of the dependency graph, and so it is the ""subscriber"" to messages that are ""published"" by the lower level object (here activemodel) which ought to implement the core logic of the program and not have unnecessary dependencies on the ui code. in well structured code, the flow of control often goes in the opposite direction to the static build-time dependency arrows, and indirect function calls through pointers make this possible.",1,1,1,0.9509097337722778,0.9705050587654114,0.8510971665382385,1.0,accept,unanimous_agreement
2413152268,1384,hello! we just [a link] which makes this pr incompatible and/or obsolete as we're switching ui framework and reorganizing large parts of the codebase.,0,1,0,0.9542653560638428,0.9651911854743958,0.6365038752555847,0.0,accept,majority_agreement
1470455176,4414,"that completes just an overview of the final state of the source tree. i didn't yet study each commit. is this all, or will there be other pull requests for other parts of the project?",0,0,0,0.9812666177749634,0.9631293416023254,0.9848211407661438,0.0,accept,unanimous_agreement
1474011102,4414,my first round of review is complete. there is a lot to fix. i do not object if you force push onto recent master and resolve all the conflicts before the next round.,0,0,0,0.9007229208946228,0.7672197222709656,0.9758579730987548,0.0,accept,unanimous_agreement
1474368696,4414,i have composed a list of tasks based on your review comments and some leftovers tbd after rebasing onto the master branch. the branch is now in the following state. - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [x] [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [x] remove beats and measures from interface preferences - [x] hook beats and measures with the time signature toolbar - [x] missing `window.redrawproject();` - [x] undo/redo for time signature - [a link] - [x] correctly handle the time signature in numericconverter - [x] fix projectrate settings (final design tbd),0,0,0,0.9788949489593506,0.9893284440040588,0.981856644153595,0.0,accept,unanimous_agreement
1474402015,4414,"here's another thing i overlooked: at the commit ""selectionbarlistener no longer controls snapping"", you delete the call to `snapselection()` in `as_setselectionformat()`. i think this means that when you change selection format in the toolbar, the selection fails to update for the changed granularity of snapping.",0,0,0,0.9733155965805054,0.9638957381248474,0.9884926676750184,0.0,accept,unanimous_agreement
1474406590,4414,"at ""removes project rate from the selection toolbar"", you can remove `#include ""selectionbar.h""` from projectfilemanager, setprojectcommand, importaup",0,0,0,0.988816499710083,0.9951411485671996,0.9947705864906312,0.0,accept,unanimous_agreement
1474410637,4414,"at ""selectionbarlistener no longer controls snapping"" you can remove `#include ""projectselectionmanager.h""` from pluginmenus",0,0,0,0.986350119113922,0.9946704506874084,0.9953649044036864,0.0,accept,unanimous_agreement
1474415271,4414,"i have done the work of rebasing #4379 onto your latest draft and expect that if your branch still changes, there will be much less work to rebase again.",0,0,0,0.9825323820114136,0.9836665391921996,0.9918161034584044,0.0,accept,unanimous_agreement
1474416890,4414,"the point of this pr is to make snapping to be independent from the selection format, so i don't really get your point",0,0,0,0.6838526129722595,0.9363585710525512,0.7838696241378784,0.0,accept,unanimous_agreement
1474431851,4414,"rebasing my branch onto yours made me think something was missing. you are right about the independence that we now want. what should replace the deleted line is a subscription to `snapchangedmessage` and re-snapping the selection in response. and, that is indeed done.",0,0,0,0.9575434327125548,0.9729639291763306,0.990397572517395,0.0,accept,unanimous_agreement
1474434833,4414,"`msnapmodechangedsubscription` is perhaps a misleading variable name -- the subscription will correctly fire either for change of mode, or change of snapping unit.",0,0,0,0.9763814806938172,0.9876503348350524,0.8781126737594604,0.0,accept,unanimous_agreement
1474439282,4414,"so why this comment? i don't quite agree, but i will change that to `msnappingchangedsubscription` on monday.",0,0,0,0.9568397998809814,0.9584787487983704,0.974619209766388,0.0,accept,unanimous_agreement
1474521701,4414,sorry i got confused. ignore the suggestion if you wish.,-1,-1,-1,0.986241579055786,0.9894087314605712,0.9886898398399352,-1.0,accept,unanimous_agreement
1474875828,4414,"-licameli i have been testing dmitry's latest branch build with the updated bottom tooldock: audacity-win-3.3.0-alpha-20230317+745c285-x64 i have a couple of immediate observations: ### 1) the selection toolbar is using **hh.mm.ss + milliseconds** as its default setting. this is a regression bug already reported: **default time format in selection toolbar (and generators) changed to hh:mm:ss + hundredths** #4408 this is fixed by a 3rd party pull request (that has not made it into master yet): **fix default time format and timeandsampleformat index** #4413 ![a link] ---------------------------------------------------------- ### 2) the default time format for the time toolbar has been changed from **hh:mm:ss** **xxx,xxx.xxx seconds** logged (so we can track this) as: **reset configuration does not use the proper time format for the time toolbar** #4426 this change results in a much smaller font display (for the same toolbar size) - and one that is probably a lot less useful to most users. the oddity here is that if i clear the audacity settings folder then i still get the nice old **hh:mm:ss** time format for timer toolbar. **_but_** if i then use **tools > reset configuration** it changes to the **xxx,xxx.xxx seconds** **update** further testing shows this is a regression on 3.2.4 introduced in 3.2.5 might this be related to the issue in 1) above? i.e. introduced as a result of the new **seconds + milliseconds** time format. --------------------------------------------------------------------------------- ### 3) display oddity with snap logged (so we can track this) as: **display oddity with snapping toolbar when turning snapping off** #4427 also note if you turn **snap** on with a chosen snap format and then turn it if you are left with a residual blue background the size of the text of the now defunct **snap** format: ![a link]",0,0,0,0.953484833240509,0.9829666614532472,0.8682520985603333,0.0,accept,unanimous_agreement
1474879507,4414,i have set a raft of p1s in the manual for the many changes that will be needed when this revised bottom tooldock makes it to master _(presumably for the upcoming 3.3.0)_ i will not work on this until the updated lower tooldock has stabilized.,0,0,0,0.963359534740448,0.9914621114730836,0.9857999086380004,0.0,accept,unanimous_agreement
1479309080,4414,"some accessibility issues: time signature toolbar screen readers do not read the names of the two wxspinctrls. i don't know of a quick fix for this. normally the fix for being able to have an accessibility name where there is no visible label is setting windowaccessible as the control's accessible object. alas in this case, this doesn't work as it sets the accessible name of the spinner control rather than the text box which is the focus. on windows, by default, wxwidgets uses a native control for a wxspinctrl. from include\wx\msw\spinctrl.h: // under win32, wxspinctrl is a wxspinbutton with a buddy (as msdn docs call // it) text window whose contents is automatically updated when the spin // control is clicked. (in contrast for a wxspinctrldouble, on windows wxwidgets uses a generic control. in this case, the structure is a window containing a text box and a spinner thing. with a visible label, the accessibility name of the containing window is automatically set to this label. this is no good, since again the text box is again the focus. however one can derive a class from wxspinctrldouble, where one has access to the text control, and so make it accessible by setting a windowaccessible as the text control's accessibility object, and overriding setname to set the name of the text box.) snapping toolbar 1. was a check box chosen in preference to a toggle button because its state is clearer to see? (a toggle button could have been pressed using enter, a standard keystroke for a button). in the realtime effect dialogs, a keyboard user has to use a platform dependent keystroke to interact with controls which normally accept spacebar. (on macos, for buttons and check boxes, option + spacebar; on windows, using either standard or full defaults, for check boxes, ctrl + spacebar; on xubuntu, for check boxes, enter.) users of screen readers also have another alternative, but i'm ignoring this here, as the application needs to be keyboard accessible whether of not a screen reader is in use. for the snapping checkbox, i see that enter can be used, without the need for a platform dependent keystroke. is it intended that this can also be used in the realtime effect dialogs? (this would rely on them remaining without a default button.) 2. it would be better if the snapping interval drop down list had an accessibility name such as ""snapping interval"" or whatever the best name is for this, rather than an empty name. selection toolbar it would be more convenient if the two numeric controls were adjacent in the tab order (as they are in previous versions of audacity) - ie a tab order of: setup button, first numeric control, second numeric control.",0,0,0,0.8154605627059937,0.6597915887832642,0.940722405910492,0.0,accept,unanimous_agreement
1482568619,4414,"it seems that snapping logic disregards the lower time signature value. for example, let's set snapping value equal to **1 bar** and look how snapping works when **4/4** time signature is set: ![a link] now, let's change the lower time signature value to a half of the previous one, i.e. time signature now is 4/2. observe how selection now snaps to half the value, i.e. 1/2 bar while visually it remains the same as in previous example: ![a link]",-1,0,0,0.5965802073478699,0.989025890827179,0.8568743467330933,0.0,accept,majority_agreement
1482570909,4414,what exactly is tempo is discussed right now :-),1,1,0,0.9669326543807985,0.828644335269928,0.9893724322319032,1.0,accept,majority_agreement
1482588996,4414,"i have fetched the most recent force-push, and it only affects the commits i have not yet reviewed thoroughly. a general comment. the beatsformatter ends up in lib-numeric-formats anyway, despite the effort of making a registry. and in the commit following that one, there is intrusion in numericconverter.h to finish whatever is happening here. the purpose of a registration system is open-endedness, but this does not completely realize it. i don't say this problem must be completely cured for release but the organization could be reconsidered later.",0,0,0,0.7870474457740784,0.929634928703308,0.9714685082435608,0.0,accept,unanimous_agreement
1482596179,4414,"why the location of the file affects open endianness? it can be moved into a different library with no effort. the reason i have started the crusade against `numericconverter` is it's extreme level of unreadability and heavy reliance on the global state. i could've modified the original implementation, but that would be similarly complex and likely more error prone. as you can observe, beats format cannot be represented within the current framework used by numericconverter.",-1,0,0,0.6699618101119995,0.6911286115646362,0.9356610178947448,0.0,accept,majority_agreement
1482599124,4414,"and i had impression that we are doing a step-by-step work, not all or nothing. otherwise i am confused about the amount of the ui details numericconverter had after being split from the control.",0,-1,0,0.5769882798194885,0.7903599143028259,0.7350656986236572,0.0,accept,majority_agreement
1483179835,4414,"indeed we do incremental work, and you leave this code better than it was, although some dependencies among the green libraries still seem less than ideal to me. if it is too difficult now to follow every suggestion to achieve what i think is better organization, it can be done later. it won't be the first pull request just to reorganize libraries, as you surely know. if ui details were still in lib-numeric-formats, it's because i wasn't pursuing perfection but i was doing sufficient to make a green library and unblock the extraction of lib-effects into the green, which was a very big prize.",0,0,0,0.7784401178359985,0.7838444709777832,0.9270352721214294,0.0,accept,unanimous_agreement
1483819059,4414,"regarding the doubts about the loss of the translatable string, when putting only the identifier part of `numericformatsymbol` into a wxevent: really, `numericformatsymbol` is an unnecessary type, and formats should be identified simply by a `taggedidentifier` type. see commit 0fb02a8024a442c571ed6e6dbd53c55da9f4a093 from 2017 where i changed `xo(""seconds"")` to `{ xo(""seconds"") }` and similar in the big table of formats, changing plain strings (`xo` expanded then just to `wxt`) with identifier-translatable pairs. the commit comment explains that translated strings were getting stored in the .cfg file, but that was wrong: locale-independent identifiers should have been used. but in fact the `msgid()` function is never used for those symbols. this isn't very easy to prove, but i have prepared a few buildable commits transforming the code to prove it to myself. now i don't know whether the translations were otherwise used in 2017, but maybe they weren't -- in which case, the real ancient mistake, traceable to 2010, was that these strings were just marked for i18n unnecessarily. i no longer want to add commits to your branch, but will prepare my own pull requests to make this simplification as a code quality improvement that isn't necessary for 3.3.",0,0,0,0.9716333150863647,0.9831171035766602,0.9804377555847168,0.0,accept,unanimous_agreement
1483821290,4414,"we do use those strings for labels, so they have to be translated. we could've had 2 strings instead - one for id and the second for display purposes, but it is not how it works now.",0,0,0,0.8556640148162842,0.9849973917007446,0.9867807030677797,0.0,accept,unanimous_agreement
1483831248,4414,"right, some of what i said was nonsense. what's not nonsense is that numericformatsymbol requires much less widespread use. the sole place where the translation does affect anything is where `numerictextctrl::oncontext` visits the registry. in fact the type could be eliminated and `numericconverterregistryitem` could just expose an `identifier` and a `translatablestring` separately. that's what i really proved to myself with the help of some code changes and the compiler.",0,0,0,0.8605299592018127,0.8633119463920593,0.9529364109039308,0.0,accept,unanimous_agreement
1483831852,4414,"i have pushed a commit, just a small and unimportant fix for a bug that was prior to this pull request.",0,0,0,0.8703130483627319,0.9710242748260498,0.9595051407814026,0.0,accept,unanimous_agreement
1483889471,4414,"and i'm done with this round. i need to reread all my comments and decide which ones i must really insist on and which are only suggestions. i may get to that tuesday. between now and then you may force push a branch with any fixes you agree with, perhaps squashed into the history.",0,0,0,0.9487429857254028,0.9235235452651978,0.8137342929840088,0.0,accept,unanimous_agreement
1483890550,4414,please read my replies as well,0,0,0,0.9823153018951416,0.9677340388298036,0.9898830056190492,0.0,accept,unanimous_agreement
1484782168,4414,"sorry, pressed the re-review button by accident",-1,-1,-1,0.9860509037971495,0.986888349056244,0.989586591720581,-1.0,accept,unanimous_agreement
1484839462,4414,"when there is a text label in front of wxspinctrls, screen readers read the label without any extra code - windows automatically sets the accessibility name of the text box. when there isn't a label, something along the lines of the following seems to work. this is part of my code that i wrote just to test the idea: [code block]",0,0,0,0.9762521982192992,0.9876250624656676,0.9563175439834596,0.0,accept,unanimous_agreement
1488980329,4414,"i'm working in the last big commit. meanwhile, of the unresolved things above, at least please add more i18n-hints for: ""beats"" ""beats"" ""beats and 16th"" be sure each comment has `i18n-hint` not `i18-hint` and you can incidentally fix some other old similar errors in those comments in libraryprefs.cpp and updatenoticedialog.cpp and, as i look at new strings for i18n, now i wonder if we might improve appearance a bit with unicode fractions for 1/2, etc. ? see already in changespeed.cpp: `xo(""33\u2153"")`",0,0,0,0.9527508020401,0.971259593963623,0.9728142023086548,0.0,accept,unanimous_agreement
1489301379,4414,"done. now i need to self-review my own unresolved comments and decide which ones i feel strongly about. that would include at least the i18n-hint comments, maybe no others now. take or leave my minor style suggestions. make a commit with those, and at this point i don't insist on squashing the history.",0,0,0,0.7528784275054932,0.907260239124298,0.8027403950691223,0.0,accept,unanimous_agreement
1489467858,4414,"now i’m done reviewing my own comments and resolving what i don’t care about. please read the rest, though some (especially recent ones) aren’t of high importance.",-1,0,0,0.6416187286376953,0.8492262959480286,0.7332441806793213,0.0,accept,majority_agreement
1490805515,4414,that’s all for this round,0,0,0,0.9470232725143432,0.9868357181549072,0.9722760319709778,0.0,accept,unanimous_agreement
1491070611,4414,i see the last two commits. nothing to add. am i waiting for a change to fix the unit tests or can i formally approve now?,0,0,0,0.9703506827354432,0.912256360054016,0.9889459013938904,0.0,accept,unanimous_agreement
1491353651,4414,"unit tests work now, so i think this one can finally be approved :smiling_face:",1,1,1,0.9117761850357056,0.6163787841796875,0.9952482581138612,1.0,accept,unanimous_agreement
1491820483,4414,"there was commit literally named ""use 1/4 for bpm basis in snapping"". it was before 66a4c611380fda90d455695233e636cbfa3b5840 in the current sequence.",0,0,0,0.9883676171302797,0.9939910769462584,0.9944381713867188,0.0,accept,unanimous_agreement
1491831439,4414,"still an incorrect commit comment in the squash :-) ""rename msnapmodechanged to mtimesignaturechanged"" i'm too fussy",1,1,1,0.9780682921409608,0.9440047144889832,0.978538691997528,1.0,accept,unanimous_agreement
1491833264,4414,. thanks for the accessible spin control!,1,1,1,0.9718019366264344,0.9880059361457824,0.9836296439170836,1.0,accept,unanimous_agreement
1491842767,4414,"there is ""eplicit"" misspelled also in one commit comment. more importantly: i see the changes of assertions in audioiobase.cpp, but i don't see the changes in the audioio mock initialization that i expected to see too. so i think this only hides a known assertion violation in tests, but arguably tests should be compiled with assertion checking enabled and should be made to pass under those stricter conditions. i will not block approval of the pr for this.",0,0,0,0.9366211891174316,0.9745423197746276,0.9793060421943665,0.0,accept,unanimous_agreement
1491848967,4414,"i've planned to try, not to implement them. in order to call handledevicechange i would need a full audioio, i want to keep the dependencies for the tests as small as possible. we do not build different set of libraries for tests, which makes a lot of sense, because we test exactly what we ship. the better question is why that assertion is correct.",0,0,0,0.9045194387435912,0.9190540313720704,0.9725960493087769,0.0,accept,unanimous_agreement
1491860548,4414,maybe some essential part of that function could be demoted into lib-audio-devices.,0,0,0,0.9830679297447203,0.9946675300598145,0.9797983169555664,0.0,accept,unanimous_agreement
1491862815,4414,actually that wasn't the end of the epic,0,0,0,0.8090245127677917,0.9738898277282716,0.7302287817001343,0.0,accept,unanimous_agreement
999391475,2295,"in the pr comment, remember to write only one issue number in each “resolves:” line, so that automatic updating of project boards mentioning this issue are correct.",0,0,0,0.9877101182937622,0.9943450689315796,0.993759274482727,0.0,accept,unanimous_agreement
1009436880,2295,"i pushed a small commit on the end to fix an incorrect comment in effectinterface.h. as you may know by now, ""automation"" is unfortunately used in audacity's code to mean the saving of settings for purposes of macros, but the settings are not meant to vary during the application of the effect, as with an ""automation track"". misleading terminology.",-1,0,-1,0.7326584458351135,0.5353901386260986,0.7098206877708435,-1.0,accept,majority_agreement
1009526601,2295,i'm done with my first round of review of this draft pr !,1,1,1,0.5928645133972168,0.9030983448028564,0.7901327610015869,1.0,accept,unanimous_agreement
1025055852,2295,"second round of review, done! please see the comments from the first round that i did not resolve. i expect some minor build problems rebasing this onto recent master, such as the need to add `noexcept` to some of the overrides of effectprocessor now. i would like to keep round three of review short. the linux ui difficulties, if they can be solved -- let them be in another pull request.",0,1,1,0.8698248267173767,0.5311141014099121,0.8780679106712341,1.0,accept,majority_agreement
1031772623,2295,i'm done with another round of review of new code. i have not yet reviewed again all of my older comments and marked them resolved as appropriate.,0,0,0,0.974142849445343,0.9460555911064148,0.9474437236785888,0.0,accept,unanimous_agreement
1035558184,2295,"the commit ""vst3 plugin modules loading"" now fails to build because internal/componenthandler.h does not yet exist, but deleting just that #include is enough to fix the commit. the next commit ""vst3 processing"" needs to put the #include back. ""vst3 ui"" fails to build because pluginsettings was not in vst3effect.cpp, but including configinterface.h is enough to fix it and all commits after. please make these three small changes in the commit sequence to keep all buildable.",0,0,0,0.9769819378852844,0.9943706393241882,0.9799957871437072,0.0,accept,unanimous_agreement
1035605654,2295,-licameli each commit compiles now,0,0,0,0.9866167306900024,0.9696792364120485,0.9879236817359924,0.0,accept,unanimous_agreement
1036387802,2295,so i withdraw the suggestion above.,0,0,0,0.9638093113899232,0.9699694514274596,0.9821972846984864,0.0,accept,unanimous_agreement
1036389315,2295,i don't know. so let's tolerate the duplication then.,0,-1,0,0.9321675300598145,0.6565670371055603,0.8640038967132568,0.0,accept,majority_agreement
1036390533,2295,this wasn't addressed but is minor,0,0,0,0.9710906147956848,0.9364702105522156,0.9729247689247132,0.0,accept,unanimous_agreement
1036391932,2295,then i will reexamine all the getlatency overrides later.,0,0,0,0.98760986328125,0.988081693649292,0.991554081439972,0.0,accept,unanimous_agreement
1036394668,2295,"the suggestion to re-use messagebuffer, which is now in lib-utility, stands. but don't try it yet. maybe i will do it myself in near future refactorings. messagebuffer or something like it should be used in all existing real-time effects to communicate changes of dials atomically, but is not yet. it wasn't thought of years ago. it is good that you thought of it without prompting. but a question i need to settle is how to do it in a unified way for all effects.",0,0,1,0.6825786828994751,0.915540337562561,0.9175703525543212,0.0,accept,majority_agreement
1036406487,2295,"the suggestion to rewrite buildplainui taking references instead of pointers (required not to be null) was not addressed. at least write an easy comment that pointers must be non-null, where buildplainui is declared.",0,0,0,0.9889180064201356,0.9934351444244384,0.99285888671875,0.0,accept,unanimous_agreement
1036408962,2295,"my suggestion stands, to make a comment about this invariant, to help the next person who reads this code.",0,0,0,0.9788854718208312,0.9776946306228638,0.9853147268295288,0.0,accept,unanimous_agreement
1036413463,2295,"""try grab"" grammar error still in componenthandler.cpp",0,0,0,0.987982213497162,0.9917277097702026,0.9369150400161744,0.0,accept,unanimous_agreement
1036416818,2295,"i still like this suggestion to avoid duplication of string literals -- a very general rule, even if vst 2 code doesn't do it this way, but it is not very important.",1,1,1,0.6099342107772827,0.9026656150817872,0.8158028721809387,1.0,accept,unanimous_agreement
1036419840,2295,"i resolved the conversation where you said this, because i see you made code changes in response to the suggestion, but i don't understand ""it's not prohibited to change parameter names"". when might they change? when upgrading to a new version of a plug-in? or do you mean something else? compatibility of data we write into audacity.cfg is important, in case that file migrates from one version of audacity to the next, or a plug-in upgrades its version.",0,0,0,0.9802408218383788,0.9871455430984496,0.990725874900818,0.0,accept,unanimous_agreement
1036423242,2295,"in fact you are right, and removing the call to `processinitialize` in `vsteffect::realtimeinitialize()` (old vst) is the right thing i think, which will be part of my new issue #2547",0,0,0,0.9713690280914308,0.970352590084076,0.7850209474563599,0.0,accept,unanimous_agreement
1036424556,2295,you were similarly right again here and vst 2 needs to change,0,0,0,0.9837115406990052,0.9528351426124572,0.990587592124939,0.0,accept,unanimous_agreement
1036433591,2295,"please read through my most recent comments and make the small suggested changes as you wish. runloop.cpp does not in fact have the bug of double-free of resources, but still i would suggest making the helper classes move-only, and eliminating the extra indirection of `unique_ptr`, would improve style.",0,0,0,0.9785355925559998,0.971037983894348,0.9865319132804872,0.0,accept,unanimous_agreement
1038980633,2295,"i've had a look at the plain gui, and have found serious problems using a couple of the free plugins from here: [a link] i downloaded and installed both the vst and vst3 versions of the mastering graphic equalizer, and the tube amplifier. for the vst versions, the existing plain gui was ok. however for the vst3 versions the plain gui is definitely not ok: 1. values not in the right range - for example in the graphic equalizer, the sliders in the normal gui have ranges -12 to 12, but the equivalent spin control in the plain gui has range 0 to 1. 2. a wxspinctrldouble can be used for a property which has discrete values. in the normal view of the tube amplifier, there's a mode which can be set to be mode 1 or mode 2. in the plain gui, there's a wxspinctrldouble for the mode, with a range 0 to 1.0 checked the vst3 versions in reaper, and the plain gui version, which is just a series of sliders and values, does not have the first isssue above - the values are in the correct range. there are also accessibility isssues, but it probably best to address them after above problems have been sorted out.",0,0,-1,0.8092482089996338,0.9658536314964294,0.9438937902450562,0.0,accept,majority_agreement
1039462772,2295,"checked it again, it isn't there any more yes, vst3 documenation says nothing about changing the parameter name, so i suppose that plugin developers are free to change them, but parameter id should stay same.",0,0,0,0.9872875213623048,0.9868796467781068,0.9919745326042176,0.0,accept,unanimous_agreement
1862807370,5791,"this might be of interest to you? in any case, this whole initiative would benefit from your input.",0,0,0,0.9760026335716248,0.9612507224082948,0.8928132653236389,0.0,accept,unanimous_agreement
1867641036,5791,"please note, i have pushed a few suggested commits onto the branch to simplify some algorithms. i cherry-picked iteratorx.h from the wave-clip-refactoring branch, which you reviewed before. i extended it with more utilities. you can avoid temporary vectors of integers just to use iota.",0,0,0,0.9838966131210328,0.9457566738128662,0.987277328968048,0.0,accept,unanimous_agreement
1874784924,5791,"i figured out the reason for the crash in the unit test in macos release builds, and i presume the linux builds were failing for the same reason.",0,0,0,0.937134861946106,0.9870014190673828,0.986952304840088,0.0,accept,unanimous_agreement
1877638700,5791,"-licameli i've addressed the 3 things we've agreed on: the `div / 8` error, filtering 4/4 time signatures rather than mistakenly just taking the first of them, and using integer arithmetic when filtering out hypotheses that don't have a round number of tatums per bar. i've also addressed some of the easiest other comments. sorry at this late hour i don't have sufficient brains for more. and finally, i've rebased and put aside the benchmarking commits for now. since these _do not_ change the behaviour of audacity, i think they can be pushed even while qa is doing its work. but for today they're out. i'll make time tomorrow to address more of your comments if i'm confident they don't change behaviour. my benchmarking tests can help me verifying this.",-1,-1,-1,0.9889750480651855,0.9198081493377686,0.977995216846466,-1.0,accept,unanimous_agreement
1878654502,5791,reminding ourselves that [a link] points to a pre-existing problem that should have another issue and will be easily fixed.,0,0,0,0.9673828482627868,0.9883655309677124,0.9837201833724976,0.0,accept,unanimous_agreement
1882154302,5791,does the last commit affect caching or the missed beats in time track?,0,0,0,0.9613216519355774,0.9830557107925416,0.9910280108451844,0.0,accept,unanimous_agreement
1882600625,5791,it's only about caching. what missed beats do you mean?,-1,-1,0,0.7506869435310364,0.5854962468147278,0.9876633286476136,-1.0,accept,majority_agreement
1883982961,5791,"-licameli i cherry-picked the benchmarking test code onto that branch (including your suggestion commits). production code is not modified at all so that won't interfere with qa. a lot of follow-up work depends on this and i already have a benchmarking-improvement ticket, so didn't want to add to the confusion by creating yet another similarly named ticket.",0,0,0,0.9549039602279664,0.9674772024154664,0.9381546974182128,0.0,accept,unanimous_agreement
1884722806,5791,"when importing a non-looped rhythmical audio file, it still tries to detect its tempo even though it shouldn't. so, to illustrate this misbehavior let's take [a link] as a source and trim it by about 1/16 from the right. the resulting loop would look smth[a link]. import it into audacity with ""ask me each time"" in preferences, and there you have it: audacity falsely detects the tempo.",-1,0,0,0.5874857306480408,0.9311813712120056,0.9466352462768556,0.0,accept,majority_agreement
1884748398,5791,"yes: the algorithm detects it as 7 bars of 3/4. there probably is such a periodicity in the onset pattern, which is all the algorithm takes into account at the moment. if it also looked at timbre change patterns, it could probably realize that there in fact is no such periodicity. with a bit of luck i can work on that, but later.",0,0,0,0.7038779854774475,0.9460327625274658,0.9770488142967224,0.0,accept,unanimous_agreement
1690104387,5043,the first commit in this branch fails to build.,0,0,0,0.7181470394134521,0.85334312915802,0.9006732106208801,0.0,accept,unanimous_agreement
1690125190,5043,squashed the branch to something more sensible. each commit builds now.,0,0,0,0.9709497690200806,0.985996425151825,0.9902858138084412,0.0,accept,unanimous_agreement
1709814980,5043,i reset this pr to draft because i have to make a bigger effort at preserving the old behaviour where appropriate. will update the qa checklist for use are reference.,0,0,0,0.9834282994270324,0.9682583808898926,0.9885461926460266,0.0,accept,unanimous_agreement
1715819431,5043,please review and approve this new commit [a link] at #5138 -- and then make similar fixes for this branch,0,0,0,0.9863780736923218,0.9826864004135132,0.990614414215088,0.0,accept,unanimous_agreement
1722477544,5043,added a qa checkbox about sync lock,0,0,0,0.9867720007896424,0.9904824495315552,0.9951066970825196,0.0,accept,unanimous_agreement
1725070421,5043,"-licameli addressed your comments, with [a link] as yet unresolved question.",0,0,0,0.9807594418525696,0.9741408228874208,0.9898446798324584,0.0,accept,unanimous_agreement
1727901790,5043,"i am beginning another round of review, checking that each commit builds. the first fails to build but it is easily fixed.",0,0,0,0.9436913132667542,0.9382533431053162,0.9665768146514891,0.0,accept,unanimous_agreement
1730483986,5043,"please reconsider that, i find it more elegant to read it.",0,0,0,0.8614065051078796,0.9427391290664672,0.9737841486930848,0.0,accept,unanimous_agreement
1731242407,5043,my review so far. the last things i don't fully understand are the implications of the changes in `pasteoverpreservingclips.cpp` and the changes in `wavetrack::pasteone`. about the changes to remove duplication with progress indicators -- you can just remove those three commits and leave the duplication of code for now. we can make the code nicer later.,0,0,0,0.9098886251449584,0.970255732536316,0.9581661820411682,0.0,accept,unanimous_agreement
1731357563,5043,"i have completed a round of review! i was dreading `wavetrack::pasteone`, remembering the huge complications in earlier drafts that i had only skimmed over, but now the changes are easier to comprehend and i see nothing seriously wrong there.",-1,-1,1,0.9694878458976746,0.4871076345443725,0.9760730266571044,-1.0,accept,majority_agreement
1731503040,5043,a note for myself: check if the resulting clip gets shifted a few samples rightwards after having merged the two stretched adjacent clips: [a link],0,0,0,0.9853510856628418,0.9824262857437134,0.9916788935661316,0.0,accept,unanimous_agreement
1734043683,5043,"there's a crash when joining clips with contrasting stretch ratios. i verified that the [a link] commit isn't responsible, but couldn't investigate any further at this time.",0,0,0,0.9211702942848206,0.6832944750785828,0.9858895540237428,0.0,accept,unanimous_agreement
1737216726,5043,"the commit ""waveclip::paste handles stretch ratio differences"" no longer builds. this call has too few arguments: [code block]",0,0,0,0.957880198955536,0.9896789789199828,0.9932472705841064,0.0,accept,unanimous_agreement
1737350171,5043,"approved for qa testing, but i want to continue with my own open-box testing too, exploring edge cases",0,0,0,0.9258034825325012,0.9475876688957214,0.9591833353042604,0.0,accept,unanimous_agreement
1738995316,5043,"i see the additional commit, and it mostly looks good, but one question...",0,1,1,0.5775462985038757,0.8720278739929199,0.8171822428703308,1.0,accept,majority_agreement
1739614591,5043,"found issues - when joining 3 or more clips having different stretch ratios, the resulting clip has wrong length and has gaps of silence that aren't supposed to be there: [a link] - when having multiple clips with different stretch ratios across multiple tracks, selecting them all and trying to join, audacity freezes. [a link]can be used for reproduction. [a link] (to be continued)",0,0,0,0.535572350025177,0.9893753528594972,0.8183772563934326,0.0,accept,unanimous_agreement
1740574965,5043,"i realize that the commit i just pushed, [a link], while fixing the problem when joining two clips, is insufficient when joining more ...",0,0,0,0.756284773349762,0.9256645441055298,0.975309193134308,0.0,accept,unanimous_agreement
1743143298,5043,"bug found by is fixed, thank you! reflected in the checklist.",1,1,1,0.9459807276725768,0.9892483353614808,0.9904748797416688,1.0,accept,unanimous_agreement
1743349307,5043,"in the updated branch, previously logged issues are now fixed :thumbs_up: new issues found: ### when generating audio into a clip, the resulting clip is shifted left to zero and the waveform is incorrect: #### expected: [a link] #### actual: [a link] ### when joining two stretched clips with envelopes, the resulting clip's amplitudes don't match the pre-rendered ones: [a link] #### before `audio clips > join`: #### after `audio clips > join`:",0,0,1,0.9823663234710692,0.9929319620132446,0.6778269410133362,0.0,accept,majority_agreement
1743670610,5043,"thanks . i noticed yet other problems: at the end of a clip, ![a link] generate a chirp. you get this ugly result: ![a link] unfortunately i didn't manage solving this before my day off tomorrow. -licameli if you have the capacity to look into this. clue: the `pastetimewarper` is causing problems when restoring the splits in `clearandpasteone`.",-1,1,1,0.96214097738266,0.9708783030509948,0.8795524835586548,1.0,accept,majority_agreement
1746893331,5043,"in the updated pr: - the issue with generating audio at the end of the clip (see previous comment) is now fixed - the issue with generating audio over a stretched clip is now fixed - the issue with joining clips with different stretched ratios and envelopes remains **unfixed** - there's another issue with generating audio (only in case of nyquist generators, such as e.g. pluck) over an interval selected on a stretched clip: [a link]",0,0,0,0.9786282777786256,0.9944889545440674,0.980099618434906,0.0,accept,unanimous_agreement
1747030323,5043,sorry i oversaw that. commits between your comment and now address this.,-1,-1,-1,0.9874652624130248,0.9936599135398864,0.98946613073349,-1.0,accept,unanimous_agreement
1747034185,5043,actually i also hit some assert if the length of generated audio is greater than the selection - doesn't have to be nyquist. (don't know how it looks in a release build.) looking into this ...,0,0,0,0.9393015503883362,0.9033568501472472,0.9869332313537598,0.0,accept,unanimous_agreement
1747843470,5043,intermediate step “waveclip::paste handles stretch ratio differences” now fails to build,0,0,0,0.9743822813034058,0.9846901893615724,0.9892036318778992,0.0,accept,unanimous_agreement
1747864630,5043,the build failure is fixed three commits later,0,0,0,0.9845582842826844,0.9849416017532348,0.9852983951568604,0.0,accept,unanimous_agreement
1748341777,5043,"i found the issue, which indeed didn't concern nyquist only but also some generators (e.g. tone generator). generating audio over a selection for a duration greater than the selection was buggy. (haven't checked if it was also buggy for durations less than the selection.) with the tone generator, the duration is set per default to the selection duration, but not with the nyquist generator, and that got you to notice the bug. for what it's worth, the fix didn't involve modifying that complicated `clearandpaste` method, but usages of it, so i'm optimistic that this change won't break other things.",0,0,1,0.9347606301307678,0.93931645154953,0.643645167350769,0.0,accept,majority_agreement
1748577432,5043,i attempted no debugging of this. have you fixed it?,0,0,0,0.9600955247879028,0.5409830808639526,0.9773179292678832,0.0,accept,unanimous_agreement
1748653258,5043,my review of new commits is complete,0,0,0,0.9618518352508544,0.9107303619384766,0.959505259990692,0.0,accept,unanimous_agreement
1748783382,5043,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
1749057244,5043,-licameli finished addressing your comments.,0,0,0,0.9793297648429872,0.9459576606750488,0.986153244972229,0.0,accept,unanimous_agreement
1749058189,5043,"now looking into the [strange, suboptimal behaviour reported by](ttps://github.com/audacity/audacity/issues/5273#issuecomment-1748816257)",0,0,0,0.9667310118675232,0.9907634854316713,0.9828343391418456,0.0,accept,unanimous_agreement
1750861113,5043,tested. no new issues were found.,0,0,0,0.978036105632782,0.98225200176239,0.9924651384353638,0.0,accept,unanimous_agreement
1751013169,5043,fini!,1,1,1,0.8236754536628723,0.8189930319786072,0.8312695026397705,1.0,accept,unanimous_agreement
1751050691,5043,likewise :),1,1,1,0.7559399604797363,0.9931517839431764,0.6856940984725952,1.0,accept,unanimous_agreement
1751066025,5043,will i see this soon?,0,0,0,0.9766814112663268,0.9727133512496948,0.9870663285255432,0.0,accept,unanimous_agreement
1751071861,5043,![a link] wanted to be eco-friendly saving a build by waiting for rebase.,0,0,1,0.8271288275718689,0.8523329496383667,0.8352698087692261,0.0,accept,majority_agreement
1751093400,5043,just mine some bitcoin to pay for the environmental impact.,0,0,0,0.9713085293769836,0.9595353007316588,0.9874128103256226,0.0,accept,unanimous_agreement
1625191606,4881,"so i made a cursory review, to check that each commit builds (but they don't). i haven't attempted the detailed review. i see nothing for the envelope tool. can i expect to see something today?",0,0,0,0.9619269371032716,0.9202700853347778,0.9707987308502196,0.0,accept,unanimous_agreement
1625283741,4881,oh that one slipped from my mind. will give it a whack. about to push commits for hopefully acceptable spectrum display.,-1,1,-1,0.8899266719818115,0.4609949886798858,0.869439423084259,-1.0,accept,majority_agreement
1625322579,4881,ready for review.,0,0,0,0.9687511324882508,0.9802002906799316,0.9911438226699828,0.0,accept,unanimous_agreement
1625897799,4881,"i have to stop now. -licameli here is what i know remains to be done: ### remaining features (besides destructive effects and joint-stereo) #### drawing: * pencil drag-drawing : some edge samples can get missed when doing fast movements over the edge of a clip, but otherwise works nicely, including interpolation * brush: similarly, edge samples happen to be set to extreme values, looking like uninitialized floats. * caching: samples are read and written directly from the database. i think it should be easy to adapt the apis i've added to `waveclip` (`setfloatsfromtime`, `getfloatattime`, etc.) to return an `audiosegmentsampleview` and have the drawing code keep the reference count from dropping to 0. #### copy, change tempo, paste: that doesn't work at all. #### selection ignores tempo changes. haven't looked into that at all. ### what works (or should) the rest works to my satisfaction : * waveform display * envelope * spectrum display (directly on clips, `cachingsamplesequence` is dismissed) * etc. i will try to communicate and maybe address minor things sporadically over the week-end, but it is probably safer to assume me gone. fyi",0,0,-1,0.8225427865982056,0.8728064894676208,0.423057496547699,0.0,accept,majority_agreement
1625903286,4881,-licameli i haven't done a proper commit squashing as you wished. you'll also see that i have disregarded method documentation. i hope their implementation is clear enough for you to add them by yourself when you take over. sorry about that.,-1,-1,-1,0.989039421081543,0.9902573823928832,0.98918879032135,-1.0,accept,unanimous_agreement
1626068033,4881,-licameli fyi i have created (yet another) branch with the stretch-handle poc code cherry-picked : [a link],0,0,0,0.9747860431671144,0.8783367872238159,0.9688279032707214,0.0,accept,unanimous_agreement
1658492505,4881,reset this pr to draft until copy-paste and other left-over non-trivial issues are fixed.,0,0,0,0.983064591884613,0.9712852239608764,0.9907241463661194,0.0,accept,unanimous_agreement
1671420968,4881,"no comments about commits 2, 3, and 4 out of 13, except that 2 has some conflict with `last-track-iteration-rewrites` but easily resolved.",0,0,0,0.9794784188270568,0.993927240371704,0.977724015712738,0.0,accept,unanimous_agreement
1671452592,4881,"commit 5 ""project tempo changes affect waveclip stretch ratios"" has another conflict. the commit comment tells me you may knowingly cause assertion violations. that should be avoided even in an intermediate commit if it's not hard. can you tell me which asserts might be the problem?",0,0,0,0.901591956615448,0.9740997552871704,0.9791429042816162,0.0,accept,unanimous_agreement
1673036112,4881,"catching my breath now, i'm done with the first difficult commit ""project tempo changes affect waveclip stretch ratios"", except that i didn't reexamine every `getvisiblesamplecount`, `timetosamples`, `samplestotime` to convince myself of the completeness of the necessary changes.",0,0,1,0.9132766723632812,0.8262404799461365,0.6433146595954895,0.0,accept,majority_agreement
1678623283,4881,"as far as i recall this wasn't something trivial to fix. calculations in `fillwhere` not accounting for stretching leading to wrong sample indices i think, and then some `std::clamp` complaining about being given inconsistent limits.",-1,0,0,0.9297299981117249,0.8101706504821777,0.9001189470291138,0.0,accept,majority_agreement
1679262150,4881,"as per -licameli 's wish, i broke down this pr in smaller ones. these are #5040 to #5045. closing this one.",0,0,0,0.9822367429733276,0.971668541431427,0.9892563819885254,0.0,accept,unanimous_agreement
1679263603,4881,-licameli i see you posted new comments. will address them on the relevant branches.,0,0,0,0.9577940106391908,0.9613028168678284,0.9865526556968688,0.0,accept,unanimous_agreement
1178858297,3176,"on macos: 1. record and count to ten aloud. 2. open sidebar and add audynamicsprocessor (an example with an output meter) 3. play, then press the gear wheel to open the dialog (or, press the gear first and then play) 4. observe that the output metering does not work in master now, at step 3 you can only press the gear first before playing (the point of this pr is to overcome that limitation) but in master, there is some updating of the output meter (not at a fast enough rate, but that's another problem to figure out).",0,0,0,0.9584405422210692,0.9810658097267152,0.9927924871444702,0.0,accept,unanimous_agreement
1178897619,3176,"i'm not sure if i follow you. this pr provides a fix for a major ux issue, i do not see how is it related to output metering. current ux makes real-time effects pretty much useless",-1,-1,-1,0.7442193031311035,0.9640299677848816,0.8878117203712463,-1.0,accept,unanimous_agreement
1178903564,3176,"btw following you steps i observe that output metering works (very slow, yes)",0,0,0,0.9652157425880432,0.8888574242591858,0.9875820875167848,0.0,accept,unanimous_agreement
1178921310,3176,"i said it works, but slowly, in master yet not at all in your branch. are you agreeing with all that?",0,0,0,0.9771054983139038,0.9424089193344116,0.9864107966423036,0.0,accept,unanimous_agreement
1178930634,3176,i understand the reason of the problem and thinking of a solution now,0,0,0,0.9593924283981324,0.9491128921508788,0.9494591355323792,0.0,accept,unanimous_agreement
1178959364,3176,i have my own thoughts about solution but have turned attention to other reviews since identifying the problem and haven't written them down precisely.,0,0,0,0.7885500192642212,0.8340368866920471,0.9494553804397584,0.0,accept,unanimous_agreement
1178961181,3176,"general idea: some parts of realtimeeffect state that are not now copied, should be put in a structure managed by a `shared_ptr` which is copied. this includes the pointer to the instance. the complications with clientdata and effectsettingsaccesstee may all be unnecessary. but i must look at it closer to make this precise and see if it all makes sense.",0,0,0,0.974492609500885,0.9883713126182556,0.9782366156578064,0.0,accept,unanimous_agreement
1179024497,3176,"yep, exactly the way i plan approaching it i still like the idea of ui to be attached separately, but this can be moved to be a part of realtimeeffectstate itself . the ui controller will be much more simple though. yep, that won't be needed, but i think keeping it ""public"" does not harm. the main question is still about the undo/redo stacks. right now ""copying"" instance has a side effect of preserving the effect settings in the undo stack. i'm not sure if it is a desired behavior provided that undo/redo for parameters is postponed and is not implement is several other daws at all. without undo/redo preservation i do not see much complexity required to fix the issue you brought up",0,0,1,0.6909127235412598,0.7454733848571777,0.5051649808883667,0.0,accept,majority_agreement
1192428999,3176,"not yet a complete review. i pushed a suggested nicer looking way (to me anyway) to implement ""do not set effect to be a controller...""",0,0,0,0.744766354560852,0.9001814126968384,0.961081087589264,0.0,accept,unanimous_agreement
1192440871,3176,"your commit introduces a new dependency for the `lib-components`, it now requires access to wxwindow. i'm still checking if it works at all.",0,0,0,0.983858287334442,0.9869349002838136,0.9925268888473512,0.0,accept,unanimous_agreement
1192447329,3176,so is it really worth introducing a new dependency just to remove on `if`? i say it is up to you.,0,0,0,0.9835604429244996,0.9877771139144896,0.9834838509559632,0.0,accept,unanimous_agreement
1192457464,3176,"oh my, how did i overlook that? good point: if lib-components should only use wxbase, then the defaulteffectuivalidator subclass should also be moved somewhere else, into audacity. however, actually lib-components and effectuiclientinterface is still a somewhat confused and confusing piece of the legacy code. there used to be several other badly named interface classes with unclear purpose that i figured out how to eliminate in this release. effectuiclientinterface is still one of those unsatisfying ones i haven't figured out how to clean up just yet.",1,0,-1,0.4591714739799499,0.5773963332176208,0.4362188875675201,,review,no_majority_disagreement
1192460093,3176,"to be fair, at some point we will need to have some façade for the event handlers anyway. so probably we can allow linking to `wxwidgets::core` here for now i am really confused about it, yes :-)",1,1,1,0.9399912357330322,0.974177360534668,0.6988786458969116,1.0,accept,unanimous_agreement
1192463796,3176,"you mention nyquist effects too now, which are also never realtime capable, but i don't see special treatment of them in this branch. nyquist and noisereduction are also the only effects that override showhostinterface specially, and one of your commits deletes a call to showhostinterface. so is this part of the explanation?",0,0,0,0.9773266911506652,0.9818910956382751,0.99006325006485,0.0,accept,unanimous_agreement
1192471705,3176,"looking on `int effect::showclientinterface` i think the reason is that noisereduction behaves very differently from other effects, including nyquist. i have no strong feelings about that change and i'm happy to remove it.",-1,1,1,0.5492503643035889,0.970866858959198,0.8720993995666504,1.0,accept,majority_agreement
1192474898,3176,"i will make another pr about the popping of event handlers, and you can rebase onto it if it is approved and merged. it will also move defaulteffectuivalidator to audacity.",0,0,0,0.9857674837112428,0.9749264121055604,0.9952488541603088,0.0,accept,unanimous_agreement
1192479969,3176,"hope i will see it soon, this pr will require vast amount of testing.",0,0,1,0.5966346263885498,0.5215092301368713,0.768028199672699,0.0,accept,majority_agreement
1192487127,3176,see #3276,0,0,0,0.983752965927124,0.976793885231018,0.9944732785224916,0.0,accept,unanimous_agreement
1192496698,3176,"well, that was really quick, thank you, paul!",1,1,1,0.9906964302062988,0.9957733750343324,0.9939801692962646,1.0,accept,unanimous_agreement
1192497890,3176,"the proper complementary pushing and popping was a detail i recall having doubts about, and i'm glad to have reviewed and settled it to my satisfaction now.",1,1,1,0.9283332824707032,0.9742743372917176,0.913402259349823,1.0,accept,unanimous_agreement
1192708881,3176,i have rebased and force-pushed. i removed `showclientinterface` override as well.,0,0,0,0.9859629273414612,0.9896592497825624,0.9960683584213256,0.0,accept,unanimous_agreement
1195299720,3176,"this completes a round of review of the lines of code changed, but now i need to reread the bullet points in the issue and consider whether they were all addressed.",0,0,0,0.9848846197128296,0.9880734086036682,0.9824424982070924,0.0,accept,unanimous_agreement
1195307506,3176,"please consider the *expected* design, not the one currently implemented for the effect ui dialog.",0,0,0,0.9858770370483398,0.9908626079559326,0.9917814135551452,0.0,accept,unanimous_agreement
1197934730,3176,i have fixed the issues found during the previous run,0,0,0,0.98372483253479,0.983520209789276,0.9904926419258118,0.0,accept,unanimous_agreement
1198670475,3176,"it's not true that edits that push the undo stack make the non-modal dialog disappear, but it seems any undo or redo makes it disappear even if ""the same"" track with ""the same"" state still exists. is that acceptable to design and qa? i don't know. i won't block the merge for that, but i do want the dependency cycle problem addressed.",0,0,0,0.9593337178230286,0.738272488117218,0.9767101407051086,0.0,accept,unanimous_agreement
1198688647,3176,"break, also, the dependency of `projectwindow` on `realtimeeffectpanel` (a dependency made earlier when the panel was introduced, not by you) and that cycle shrinks, not to one, but still excluding the new file added in 3.2, which is then not in a cycle with anything else. how to do that? it needs some manoeuvres with `globalhook` probably, that i might figure out in stabilization or for patch release. so don't you worry about that one small addition to the cycle up in the ui layer. but please do unblock the extraction of lib-audio-io.",0,0,0,0.9639915227890016,0.961671769618988,0.9594938158988952,0.0,accept,unanimous_agreement
1205394521,3176,"some thoughts: if mmainsettings is moved into the shared state, then there is no need for noninterfering and the related templates to avoid false sharing, which simplifies the macos build problem. but i think it should not be moved into the shared state. if you keep copying it as before, then it will be possible for a state's settings to be different at different points of undo history. even if there are not distinct undo/redo items just for changes of settings, it may be an improvement to call modifystate whenever the non-modal dialog closes. this is done when you change the power button states. observe how it works. make some edit, and then toggle power. undo and redo. what do you expect for power button state? what you get is how you last left the button, before the undo; not the button as it was when the undo state was first pushed on the stack. modifystate is also used for things like changes of the selected times.",0,0,0,0.9704810380935668,0.9831010699272156,0.9053033590316772,0.0,accept,unanimous_agreement
1205396615,3176,that is separate from the lifetime problems that must be addressed to avoid the crashes in idle time for lv2 effects.,0,0,0,0.9815607070922852,0.9772321581840516,0.984855592250824,0.0,accept,unanimous_agreement
1205426269,3176,"maybe do the opposite, though: put worker settings into shared state. undo history has versions of main settings, which is copied by the copy constructor of the state, but doesn't need multiple worker settings just taking up space. then no need for `sharednoninterfering` or `noninterfering`.",0,0,0,0.9883120656013488,0.9923811554908752,0.9861658811569214,0.0,accept,unanimous_agreement
1205432792,3176,"should `mid` and `mplugin` remain in shared state? yes. there is no need to reassign them after a state is made. replacement of one effect with another is implemented as construction of a new `realtimeeffectstate` with its own different, new shared state.",0,0,0,0.9881623387336732,0.9931578040122986,0.9941251277923584,0.0,accept,unanimous_agreement
1205433599,3176,"i'm not sure if i like your idea on project history. as a user - this is not a behavior i would expect. i close a non modal dialog, press ctrl-z, and everything is reverted without my knowledge about that. please, let's agree that changes to effect settings do not affect project history for now, we will return to it after 3.2.",0,-1,-1,0.764809787273407,0.5934244990348816,0.9439303278923036,-1.0,accept,majority_agreement
1205436625,3176,"my proposal stands - i think that all of the state should be shared. i just need your confirmation, because you have designed this system and better understand possible problems that will occur due to this change",0,0,0,0.803016185760498,0.8807587623596191,0.9318519830703736,0.0,accept,unanimous_agreement
1205480173,3176,"this is a question to put to design, really not for either of us to decide unless the implementation difficulties are simply too great, but i think they would not be. i did the power buttons deliberately as they are with leo's agreement. however the matter can be ignored for the purpose of this pull request and revisited as a separate issue.",0,0,0,0.8652065992355347,0.9620446562767028,0.9681361317634584,0.0,accept,unanimous_agreement
1205492886,3176,"i missed where exactly you proposed that all state be shared -- but that would include worker settings, unlike in the version i reviewed. yes, i think that may be right -- excepting perhaps the main settings -- and could solve the assertion violation that happened for lv2 idle. so the undo/redo history will surely include the changes of composition of the list -- adding, removing, replacing, permuting the states. but there would be no more weak pointer in the effectsettingsaccess object that could expire because of replacetrack. instead it could hold another shared_ptr to sharedstate. i'm going to review again all that exists in the present master version of realtimeeffectstate to be sure this would work.",0,0,0,0.9552413821220398,0.9673383235931396,0.9710487723350524,0.0,accept,unanimous_agreement
1205521420,3176,"if main and worker settings remain in the same structure, whether the shared or the unshared state -- then you should use `noninterfering`.",0,0,0,0.9884979128837584,0.993596076965332,0.9937828183174132,0.0,accept,unanimous_agreement
1205526757,3176,power buttons are different: 1. you revert your last action. this is not true for the rest of the settings. effect can have 50 parameters easily and ctrl-z will revert all changes to all 50 parameters. 2. you see the result. in this case - the action is completely hidden from user. consider that you change settings in you ide and they are reverted when you press ctrl-z after closing the window. the case that effect settings bypass the project history has been already discussed a lot. please let's not spend more time on it.,0,0,0,0.7550519108772278,0.715828001499176,0.9154484272003174,0.0,accept,unanimous_agreement
1205530295,3176,"i'm not convinced that the issue has been settled knowingly by designers. there was a specification for undo/redo history strings from setting changes in the original design. i think a *different* issue card could be opened for this an reconsidered in 3.3. however the easy thing for now is not to address the issue (even if not forgetting the issue either), and we will agree to do the easiest thing for now, so that we do get the non-modality.",0,0,0,0.88226318359375,0.8826852440834045,0.7809186577796936,0.0,accept,unanimous_agreement
1205531226,3176,"this is *not* the other question of the esc key, which was knowingly settled in favor of doing nothing about it.",0,0,0,0.9097667336463928,0.9677037000656128,0.8690427541732788,0.0,accept,unanimous_agreement
1205604540,3176,i would say it is likely that any reference to undo/redo in the design was not properly considered. probably a throwaway line - although i can't find it myself.,0,0,0,0.9576916694641112,0.9679388403892516,0.9719476699829102,0.0,accept,unanimous_agreement
1213281546,3176,please don't,-1,0,-1,0.6556960344314575,0.7333187460899353,0.9873398542404176,-1.0,accept,majority_agreement
1213530462,3176,"remaining problem (at least): - generate noise - add an effect to the stack - click the gear - undo expect: the dialog should disappear, because the effect is no longer in the track's stack, even though the track still exists. the dialog now holds a `shared_ptr` to state, referred to elsewhere only be redo states. the dialog remains open and won't have a dangling pointer, but it presents dials that have no influence on the sound when you play back.",0,0,0,0.9736157655715942,0.9729852676391602,0.9778710603713988,0.0,accept,unanimous_agreement
1214169676,3176,"maybe this is a solution for all the undo problems, which won't need trackid after all: - intercept the track deletions that happen when popping undo state, as you do now, and remember those tracks. - then the event comes from the undo manager, after the current tracklist in the project is repopulated. - find all realtimeeffectstateui that are showing, and ""reachable"" from the old tracks. meaning, of course, you can visit the states in their realtimeeffectlists and find them. - find all that are reachable from the new list of tracks. - close the uis in the first set and not the second. then this is enough to hide uis either in case undo removes the track, or undo leaves (some state of) the track in the project but the track no longer has the realtimeeffectstate any more.",0,0,0,0.9469494819641112,0.990670680999756,0.938348948955536,0.0,accept,unanimous_agreement
1214382985,3176,"all proposed changes are implemented, -licameli",0,0,0,0.9844538569450378,0.9766273498535156,0.9896710515022278,0.0,accept,unanimous_agreement
1682205933,5041,"i just bisected a bug to the commit ""make waveform display work again"", but don't fully understand it yet. - empty project - make stereo track - select some range of time later than 0 - generate > noise observe: the channels appear misaligned.",0,0,0,0.6897016167640686,0.6164426207542419,0.97993141412735,0.0,accept,unanimous_agreement
1682209060,5041,that appears to be only a display problem. real playback is correct.,0,0,0,0.984703779220581,0.9793822765350342,0.9895344376564026,0.0,accept,unanimous_agreement
1682492151,5041,-licameli i cannot reproduce it. if you could figure it out that'd be great.,1,1,1,0.8490942716598511,0.8852831125259399,0.6032058596611023,1.0,accept,unanimous_agreement
1689783683,5041,"you might do this still, or not",0,0,0,0.9770142436027528,0.9841545820236206,0.9698712825775146,0.0,accept,unanimous_agreement
1689848961,5041,now that is my complete round of review! i think the points raised will be easy to resolve and the repeat round will be fast.,1,1,1,0.9142824411392212,0.9459457397460938,0.9869627356529236,1.0,accept,unanimous_agreement
1689878312,5041,approved! please squash all commits after 560bc7dfcb903c393e03f2580fedb33b9ea1be9b into one.,0,1,0,0.94037663936615,0.6976096630096436,0.5255420804023743,0.0,accept,majority_agreement
1689979096,5041,i have combined the qa checklists from two prs.,0,0,0,0.9869950413703918,0.9880339503288268,0.9944092631340028,0.0,accept,unanimous_agreement
1690255389,5041,"found issues : - when time-stretching from the left side (the beginning) of the clip, then dragging the new, time-stretched clip back to the zero time mark and playing the clip, it freezes for a few seconds before starting the playback. the subsequent attempts to play resulted in no stuttering. it also seems that the higher the stretch ratio is, the longer it waits before actually playing the track: [a link] (a non-related to this pr issue logged as #5088) - when shrinking a 1-minute clip to the minimum length, playback also starts after a short pause a couple of seconds long. also, when shrinking a 1-minute mono clip to the minimum length, duplicating it, making it into a stereo track, and hitting play, the pause time seems to double in time - deadlock when placing two clips with different stretch ratios next to each other and then pressing z on the keyboard (= at zero crossings): [a link] - when mixing-and-rendering a time-stretched clip (to a new track) and then measuring the contrast (_analyze > contrast_) or the rms value (_analyze > measure rms_) on both, the mixed-and-rendered one always appears to be a few db quieter than the original time-stretched one: [a link] - also noticed that when playing from the cursor immediately after stretching a clip, playback starts with a slight delay of maybe half a second as opposed to regular playback as well as all subsequent playbacks on the stretched clip that start immediately - when importing a stereo file (wav/mp3) and adding some envelope points, visually only the left channel seems to be affected, even though in fact both left and right channel amplitudes are affected: ![a link] - when stretching a clip using some extreme stretch ratios (e.g. stretching a 30-second mono chirp up to 12 hours), attempting to play the clip causes deadlock. we perhaps should introduce upper boundaries for the stretch factor - stretching a clip on a track that is part of a sync lock group doesn't cause other tracks of this group to shift in time as well; this is gonna be logged as a separate issue and is yet to be discussed with the design team, so please disregard this one - beat finder analyzer fails on a time-stretched clip, e.g. a shrunk rhythm track: [a link] - beat finder may cause deadlock when applied on a clip that is stretched by changing the tempo to a lower value: [a link] - poor processing of synthetic tones, such as chirp. when stretched and then mixed and rendered, it has louder peaks than the original: - in a sync-locked track group, time-stretching a clip doesn't cause other tracks of the group to shift in time. logged as [a link] - occasionally, the uploaded to audio.com version of the stretched file would have a different length than the one in the project; this happens rarely and under certain specific circumstances that i'm yet unable to figure out - when copying a shrunk clip and pasting it alongside, then rendering the sequence of two clips, the left and the right halves of the resulting clip look differently (see the images below); the issue is fixed now in the most recent version of the branch though. before: after:",0,0,0,0.9133718609809875,0.947053611278534,0.9679694175720216,0.0,accept,unanimous_agreement
1692972178,5041,"thanks a lot for your findings so far. this is already in 3.3.3 :grimacing_face: please try the exact same on the current release, using trimming instead of stretching. the reason : before trimming, you select the entire clip. during trimming, the selection stays the same. when you shift the clip left, it also shifts the selection to the left, past the zero mark. and when you press play, it plays the selecting region, i.e. starting at second -10 ... imo this _is_ a strange behaviour, that _could_ be acceptable if the option to see past the zero mark is checked, but probably not if it isn't, right? hasn't anyone complained about that so far? ?",1,1,-1,0.8613676428794861,0.9840059876441956,0.9874659180641174,1.0,accept,majority_agreement
1693097518,5041,staffpad's time stretcher doesn't seem to like the way we configure it and extremely low stretch ratios. it may be a simple fix. wip.,0,-1,0,0.7127288579940796,0.8057556748390198,0.5435667037963867,0.0,accept,majority_agreement
1693121998,5041,:ok_hand: logged as #5088,0,0,0,0.9826923608779908,0.9396146535873412,0.9656487703323364,0.0,accept,unanimous_agreement
1693291102,5041,perhaps i should examine the problem with envelope display. recently i merged to master some changes in envelopes. are you sure nothing was wrong already in master?,0,0,0,0.9770129919052124,0.9851341247558594,0.9831082224845886,0.0,accept,unanimous_agreement
1693299781,5041,"yes, current `master` isn't affected, i.e. envelopes of both channels of a stereo track can be edited simultaneously.",0,0,0,0.987525224685669,0.9930441975593568,0.9938858151435852,0.0,accept,unanimous_agreement
1695841932,5041,"i re-approve this branch with the new commits, to the extent i understand it (this excludes changes inside the staffpad library)",0,0,0,0.9829522371292114,0.9859482049942015,0.9930753707885742,0.0,accept,unanimous_agreement
1695856269,5041,"time stretching will modify the samples, and so we cannot expect the exact same contrast before and after rendering. then the follow-up question is: should we display the value for the raw data (as now) or the stretching-rendered result ? i'm not sure that the former would be preferrable. something similar happens with real-time effects: select e.g. bass & treble, reducing both bands by several dbs. the contrast-command result is that of the raw audio. if you mix and render, and run contrast again, you get a different result. so i'd leave it as it is. ?",0,0,0,0.9570512771606444,0.9412098526954652,0.9288403391838074,0.0,accept,unanimous_agreement
1695884463,5041,"i'm not sure. maybe we have discovered a subtle bug for the staffpad guys to figure out. i think you could prove that transforming one fft window, changing phases only, and then doing ifft, should leave rms unchanged. but that does neglect the complications of windowing functions, overlap-add, etc. still i would hope that time stretching of a sustained tone should at least preserve rms with some cancelling-out of these effects over many windows.",0,-1,0,0.9239945411682128,0.6559337973594666,0.8294080495834351,0.0,accept,majority_agreement
1696353670,5041,"that's correct, modifying the phases of the components of a signal doesn't change its rms. also, i shared pictures on discord of the effect of the time stretcher on a square wave. the waveform is greatly affected, but the rms stays the same - roughly. looking closer you can see it oscillating. that could be one reason. the other reason could be delay. sp's stretcher reports a delay value that should be reviewed. we discard that many samples at the beginning of the output, but i've seen, for strong stretch ratios, signs that this may be an underestimate or overestimate, depending on the stretch direction. this could lead to discarded samples, affecting the analysis result - and other more critical problems, like truncated boundaries. seems not be noticeable at typical ratios and we may get away with it for now, though.",0,0,0,0.955123484134674,0.9385000467300416,0.9693796038627625,0.0,accept,unanimous_agreement
1696940206,5041,"i'm not sure how to reproduce that. a quick attempt didn't succeed. the number of tracks, sample rate, length, stretch ratios, all could play a role. maybe make a project available for me?",-1,-1,0,0.5400749444961548,0.804436445236206,0.7752785086631775,-1.0,accept,majority_agreement
1696956241,5041,"-licameli provided a fix with commit 1468879. just tested it, works fine.",1,0,0,0.6959063410758972,0.8351284265518188,0.7778647541999817,0.0,accept,majority_agreement
1697560832,5041,"since * the need for such drastic outward stretching is very, very unlikely, * a fix in the staffpad library isn't easy (it'd mean supporting analysis hop sizes of less than 1 sample), * setting up limits would take some, if so not much, development time, we agreed together with eventually to let it come as a bug if it ever gets reported.",0,0,0,0.8562315702438354,0.903863787651062,0.977182686328888,0.0,accept,unanimous_agreement
1697588192,5041,"when a waveform's components' phases relationship change (which is inherent to pitch-preserving time stretching), the shape of the waveform changes, too. for synthetic, complex waveforms with distinctive shapes such as square, triangle or sawtooth waves, this is very noticeable. it comes with a change of peak values (but rms should be preserved, at least roughly), which is partly what we observe here. that said, we've identified with and a pattern, whereby compressing a clip lowers its rms, and expanding it, increases its rms. for typical, musical usage of time stretching this is probably small enough not to be noticeable, but an improvement here would be welcome, possibly as patch release. the fact that louder peaks may cause clipping upon playback is something we decided not to do anything about. clip indicators are there to make the user aware of it. doing anything ourselves proactively would change characteristics of the waveform in likely unwanted ways. like -licameli said, it's the maths of it - let the user decide how to deal with it.",0,0,0,0.8224844932556152,0.9687927961349488,0.96768057346344,0.0,accept,unanimous_agreement
1697610897,5041,"you know that there is a checkmark item in the view menu that paints the track red wherever it clips? this is useful and i have wished it were the default. if the stretch algorithm calculates sample values out of the [-1, 1] bounds, still those numbers are preserved if in 32 bit float format, and even persist in the .aup3 file. it is still possible to normalize or compress or limit the result to get back a track that does not clip. experienced users may just have to learn this and be aware.",0,0,1,0.9200248122215272,0.9707111120224,0.678070068359375,0.0,accept,majority_agreement
1698226164,5041,"yes, leo showed the clipping markers. normalizing or even just lowering the gain, and, for display, zooming out vertically on the level ruler.",0,0,0,0.9853034019470216,0.9743832945823668,0.9902888536453248,0.0,accept,unanimous_agreement
1698667637,5041,"beat finder problems are effect-related, and will be fixed in 5-of-6. please ignore for now. i tested on that other branch, and it works.",0,0,0,0.9780282378196716,0.9847190380096436,0.959864616394043,0.0,accept,unanimous_agreement
1698809880,5041,"all your boxes are checked. comments to some of those: ... or louder, depending on the stretch direction (squeezing -> quieter, expanding -> louder). as we agreed together with , this will probably be subject for a patch release and should not block this release. please ignore for now, will be fixed with the pr that fixes destructive effects. could not reproduce this. comes with the pre-processing of clips stretched to large amounts : squeezed and a lot of input has to be analyzed to output just a few samples, expanded and the synthesis will first output lots of near-zero values that must be discarded. this takes time, nothing we can do about it without delving in the staffpad algorithm and risk breaking things while optimizing. i expect this lag for ""normal"" ratios not to be noticeable.",0,0,0,0.8981591463088989,0.8747779726982117,0.8811773061752319,0.0,accept,unanimous_agreement
1702387317,5041,thanks -licameli for contributing and pushing this forward !,1,1,1,0.9812824726104736,0.936024844646454,0.9880712032318116,1.0,accept,unanimous_agreement
1702505088,5041,"tested: - all checklist items - plot spectrum applied to an extremely stretched-out clip now doesn't cause the freeze - the freeze when using at zero crossings is now fixed - the mixer board issue is gone - the right channel of a stereo track ignoring the envelope points is fixed as well out of scope of this pr: - stretched clips are quieter (logged as #5123) and clipping ([a link] - beat finder issues (will be addressed in ""5 of 6"" pr) - extremely shrunk clip causes delay and stutter when played back (the ""limitation"" of the algorithm; see 's comment above) - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link] - [a link]",0,0,0,0.9413534998893738,0.9922000765800476,0.9534285068511964,0.0,accept,unanimous_agreement
881335854,1207,"i have cherry-picked and merged parts of this pull request. i mentioned a few points that are still unresolved, i don't approve the edit cursor change yet, and i must still review all the label track changes. please rebase your branch onto recent master and force-push it again.",0,0,0,0.977661430835724,0.9825170636177064,0.9890011548995972,0.0,accept,unanimous_agreement
970204212,2121,"i pushed a suggested commit, please review that!",0,0,0,0.946115493774414,0.6575441956520081,0.9683628678321838,0.0,accept,unanimous_agreement
970230294,2121,"i've left that out to see if i can see a measurable difference in performance and i've observed none. still, that commit is a welcome addition, thank you!",1,1,1,0.9890108704566956,0.9929359555244446,0.9915593266487122,1.0,accept,unanimous_agreement
972513228,2121,"something is definitly wrong with autosave now. do these steps: 1. run audacity; generate noise; force-quit audacity (such as with the debugger) 2. restart audacity; recover files; you should get the noise back. 3. force-quit again; restart again; recover again. expected result: the second recovery works. what i observe: varying crash-y symptoms suggestive of a memory overwrite. i think you must recover twice to get the bug, and i think it happens only starting at the commit ""use the fast stream reader (still, reading from memory)"". of course it may be hard to be sure, when there is a memory overwrite.",0,0,0,0.802868664264679,0.8567564487457275,0.8085790872573853,0.0,accept,unanimous_agreement
972672802,2121,"there was an issue with recovering a project, that never was saved. i do not observe the issue you described though",0,0,0,0.7714893817901611,0.735194742679596,0.9671931266784668,0.0,accept,unanimous_agreement
972729744,2121,"which issue? if it happens, it surely is an issue to fix. the unsaved data might be a long recording. i know i saw this problem, and i find it reliably in my macos debug build of this branch, though the exact symptoms are various. i'm not satisfied until there is more understanding.",-1,0,-1,0.5159302353858948,0.7132093906402588,0.5376353859901428,-1.0,accept,majority_agreement
972739264,2121,"your latest change to loadproject may have made the problem go away, so it seems with a few tries, although i don't know why.",0,0,0,0.923243522644043,0.8563652634620667,0.9895837903022766,0.0,accept,unanimous_agreement
972743450,2121,"i do not observe any problems with the latest build on macos, not in release or debug builds. i think there can be an issue in showerror",0,0,0,0.9734206199645996,0.879266619682312,0.9726297855377196,0.0,accept,unanimous_agreement
972767424,2121,"class `xmlutf8bufferwriter` became unused at ""decode bxml directly, without intermediate stage"" so should the class be deleted? sad all that hard work obsoleted so soon.",-1,-1,-1,0.9818317890167236,0.977944791316986,0.9883660078048706,-1.0,accept,unanimous_agreement
972769114,2121,"i just need to step through projectfileio::loadproject to be sure i understand all the changes in there, and i will approve if i think nothing is wrong, although the unexplained random problems i saw give me a bit of doubt that some problem was missed.",0,0,0,0.9354501366615297,0.9231884479522704,0.9645147919654846,0.0,accept,unanimous_agreement
972773943,2121,"to be fair, i think it's xmlstringwriter that will go away at some point, and xmlwriter interface will be adapted to match xmlutf8bufferwriter. there is still room for performance gains in serialization, that can be achieved by removing `const wxstring &name` from the writer interface :-) and i expect much easier pr for that!",1,1,1,0.987098515033722,0.9952594637870787,0.9889670014381408,1.0,accept,unanimous_agreement
972810368,2121,"well, that was epic!",1,1,1,0.989753007888794,0.9235821962356568,0.9827407002449036,1.0,accept,unanimous_agreement
833998049,836,is this going to be optional / opt-in? integrating an open-source tool with google services will make a lot of people quite unhappy and overall just lose trust on it.,-1,-1,-1,0.970931112766266,0.8073543906211853,0.9243667721748352,-1.0,accept,unanimous_agreement
834002118,836,i don't think this sends data to a google server. iiuc breakpad requires the project using it to set up their own server.,0,0,0,0.93625670671463,0.9320333003997804,0.9810313582420348,0.0,accept,unanimous_agreement
834019696,836,another :-1: here. why the sudden interest in adding google dependencies for analytics and user tracking?,0,-1,-1,0.7929325699806213,0.8700191378593445,0.8198384046554565,-1.0,accept,majority_agreement
834031514,836,"well it's gonna be self-hosted so i'm not sure how bad this is, at least it won't be sending data directly to google",-1,-1,-1,0.8005512356758118,0.880297064781189,0.614486575126648,-1.0,accept,unanimous_agreement
834077208,836,"i don't see this being particularly useful, automatic crash handlers in oss is a rarity and crashes in software like audacity tend to be pretty easily reproducible as there's not much going on so the gain from getting dumps would be minimal. also can we talk about how this adds 800+ new files? why? importing the breakpad library this way is fucking stupid.",-1,-1,-1,0.9890815019607544,0.9855334162712096,0.9944608211517334,-1.0,accept,unanimous_agreement
834118315,836,"automatic crash reporting is very useful. most users won't go through the trouble of learning how to use gdb to make a good bug report. but yes, please stop vendoring dependencies. that has collateral impact beyond audacity.",0,1,0,0.7601101994514465,0.6703069806098938,0.6008466482162476,0.0,accept,majority_agreement
834635280,836,can this be turned off?,0,0,0,0.9876225590705872,0.990839421749115,0.9941798448562622,0.0,accept,unanimous_agreement
834648847,836,"it is not even on yet. there is no need to turn it off once it is merged though, it can actually be quite useful. i had wrong ideas initially about this, was not sure about implications of using breakpad. this one does not need to rely on google servers. if you really want nothing to do with google, you might as well stop using the web. upcoming quic/http3 is basically a google creation, so the web will be served on a protocol engineered at google.",0,0,0,0.8411890268325806,0.8049561977386475,0.6945128440856934,0.0,accept,unanimous_agreement
835305585,836,if only that were the case - a good example is p1 bug 2700 which was not easily reproducible - and there have been many others over the years (i took over as the main qa tester following the death of gale andrews). and very few users bother to (or even know how to) send crash logs to us sadly.,-1,-1,-1,0.7453140616416931,0.941515326499939,0.94766765832901,-1.0,accept,unanimous_agreement
835371102,836,"i would appreciate a toggle that is built-in to audacity, or, that could be changed prior to compiling audacity, so that end-users can disable this functionality if they wish to do so. i fully understand the importance of crash reporting, and making it automatic helps to streamline the crash report submission process. but. that shouldn't mean that the option to disable such functionality shouldn't be included. i value my privacy and if i decide that i don't want to share crash logs with the audacity development team then that decision should be down to me, and not the developers of audacity. it is my hardware, and my system, and i want to have the choice to decide whether or not my system reports crashes or not. i hope that you will listen to my feedback and consider it quite heavily when deciding how to further proceed with these commits. thank you for taking the time to read what i have to say, and have a good day. toglk.",1,1,0,0.9001260995864868,0.8381966948509216,0.6006768345832825,1.0,accept,majority_agreement
835382634,836,"in due course when a build becomes available i will be qa testing this. one thing i will be looking for is an option in the crash report for sending or not sending a crash report. i, for example, almost never send crash reports to microsoft - as i can opt out of that at crash-time (most of mine are deliberate qa crashes anyway to test resilience and recovery - and bug fixes.)",0,0,0,0.9519069790840148,0.9712679386138916,0.973196029663086,0.0,accept,unanimous_agreement
835384905,836,"i am generally pro breakpad. if its between this and #835 i choose this. its library shown to have a lot of benefits. incidentally steam uses it in their client, and i think they have had a lot of success with it.",1,1,1,0.6426705718040466,0.8601662516593933,0.9715078473091124,1.0,accept,unanimous_agreement
835388245,836,"yeah from what i can tell with some brief research, this one actually seems fine since it doesn't appear (on first glance?) to send anything to google. from what i can tell, it requires the developer to have their own server for minidump files to be sent to. ...which begs the question as to why they can't run telemetry stuff on their own servers but *can* run crash reporting stuff. hm. either way, i think the core concern here isn't privacy but stuff more strictly related to the development of audacity itself (which i obviously can't as easily speak for) obviously anything google coming near a foss project is not ideal but as igbc said, if something *must* be added that's bearing that brand name then this is arguably the better one (outside of the ideal option of ""none"" of course).",-1,0,0,0.7181877493858337,0.5602583885192871,0.7707163691520691,0.0,accept,majority_agreement
835389068,836,anyone ever consider this is a bait and switch? they got us angry at analytics so we'd be ok with breakpad :grinning_squinting_face: ?,-1,0,-1,0.9410913586616516,0.8494719862937927,0.8894925713539124,-1.0,accept,majority_agreement
835389890,836,"hah, that's a fun thought. i'd agree but this one popped up on the same day only 4 hours after the telemetry pr, which probably isn't enough time besides this is serving a completely different purpose anyway",1,1,1,0.9546988010406494,0.9912763833999634,0.9867082834243774,1.0,accept,unanimous_agreement
835390946,836,yea sadly its clear their plan was to install both. clearly they want a near clickstream from this program. its very marketing adjacent. ` `,-1,-1,-1,0.9290831089019777,0.975902497768402,0.9867892861366272,-1.0,accept,unanimous_agreement
835395746,836,"please observe that a crash report is sent only if the cmake variable crash_report_url is defined, but it is not defined in this pull request.",0,0,0,0.9836335778236388,0.9948731064796448,0.993073046207428,0.0,accept,unanimous_agreement
835405081,836,crash reporting will be enabled only for the rc builds. it is technically impossible to do it otherwise anyway. sending the generated crash report will be an opt-in. the report will be sent to the self hosted sentry instance.,0,0,0,0.9853469133377076,0.9874926805496216,0.993110418319702,0.0,accept,unanimous_agreement
835603408,836,"why only rc builds, seems like there could be valuable reports out in the wild in release builds. heaven knows the audio world has some wacky machine configurations.",-1,-1,0,0.8024699687957764,0.9878281354904176,0.7806179523468018,-1.0,accept,majority_agreement
839788875,836,"and this is exactly why this is a problem - if people can't use the web anymore without using google protocols or software, then we don't have a free and open web anymore. the same is true for my favorite audio editing software. all of my four albums were produced with audacity. there must be a way to get proper crash reports without giving the biggest technology monopoly even more power.",-1,-1,-1,0.87826007604599,0.7858344316482544,0.6980495452880859,-1.0,accept,unanimous_agreement
849501934,836,"as far as i know, the breakpad is deprecated and will not evolve, for example, it will not support new types of os and processors. so, is recommended to use crashpad [a link]",0,0,0,0.9852054715156556,0.9848633408546448,0.9874890446662904,0.0,accept,unanimous_agreement
849537678,836,isn't crashpad distributed under apache license 2.0 (which is incompatible with gplv2)?,0,0,0,0.984304130077362,0.9916892051696776,0.9933052659034728,0.0,accept,unanimous_agreement
849734829,836,"got it what the problem is, thank you.",1,1,1,0.6131702661514282,0.933205246925354,0.9560543298721312,1.0,accept,unanimous_agreement
857997823,836,"i'm still asking for fixes for internationalization. among my many comments here, i also suggested improvements in comments, and also the source code tree reorganization (making the crashreporter folder less nested). i would still like those changes, but i won't let them delay approval.",0,0,0,0.8632778525352478,0.8921682238578796,0.9473615288734436,0.0,accept,unanimous_agreement
1579502074,4771,"if my reviewers think this is worthwhile pursuing, the next steps would include: * let all clients of `wavetrack` adopt this new api, * remove `sampletrackcache` and all related code, * consider unit-testing",0,0,0,0.968333899974823,0.9874740839004515,0.9868819117546082,0.0,accept,unanimous_agreement
1580992785,4771,"-licameli i rebased that branch onto paul's `mixer-does-not-use-track` branch. maybe there was a smarter way but, to keep the diff to my own changes, i opened a new pr from my branch onto paul's. here's the link : [a link] . -licameli i guess you could add dmitry and vitaly as reviewers - i couldn't.",0,0,0,0.9474210143089294,0.9517659544944764,0.9519895315170288,0.0,accept,unanimous_agreement
1586174774,4771,don't make pull requests against my fork please. that will only make more confusion. make all pull requests against audacity/audacity and we can have just one conversation page like this one in which we find all related comments all have made. i do not object to force pushes of this evolving project. i still need to change the foundations for you to build on correctly.,-1,0,-1,0.5096767544746399,0.7663286924362183,0.8022555112838745,-1.0,accept,majority_agreement
1586180008,4771,"general remarks about the new commit ""cachingwidesamplesequence decorator"". i like it better now but still don't want to review it completely. i still think i should continue preparing other foundational work for you to review, and you should rebase onto that, and only then should i do a complete review. at first i was very displeased to see lots of change in audioio.* which will only conflict with the next refactoring i need to do, adding lots of changed lines of code, before i had completely understood the first commit. but now i see the commit comment says that all the changes in mixersource.cpp are reverted. that may be good. i had not yet understood all those changes but i thought it would be better to find a solution that does not change lib-mixer. so really if i haven't understood the first commit fully, i can forget about it, but should instead look at the squash of the two commits. there is now no need for `sampletrackstuff` to be defined in lib-mixer. it can instead be defined in sequence.h. that leaves lib-mixer almost unchanged, but not quite: still you add `getsampletrack` to `widesamplesequence`. i don't like that -- lib-mixer mentioning a class defined in lib-sample-track, which is not one of its dependencies. it compiles, because there is only a forward declaration of the class, but still it is questionable for lower level libraries to mention types defined in higher level libraries. you make lib-audio-io accept the decorated `widesamplesequence` objects constructed at higher levels without needing to know the implementation details. that is goo. but lib-audio-io still depends on `sampletrack`, and therefore, this questionable workaround of `getsampletrack` is needed, to let it find that interface from `widesamplesequence`. remember what i have said: really i want to make lib-audio-io have no dependency on lib-track at all. let me first complete that, so you can review it, then rebase this work onto that. no changes to lib-audio-io should be needed after what i do.",-1,-1,1,0.7128719687461853,0.7267044186592102,0.5980625152587891,-1.0,accept,majority_agreement
1586761637,4771,i admit that it didn't prove helpful.,-1,0,-1,0.820673942565918,0.4124944806098938,0.7477135062217712,-1.0,accept,majority_agreement
1600787595,4771,this pr is based on #4795. if you wish to review please only those commits with me face :d,1,1,1,0.9791210889816284,0.9889745712280272,0.9930042624473572,1.0,accept,unanimous_agreement
1600934935,4771,"i compared some aspects of performance before and after this pr: * real-time performance : can play an audacity project with as many as 1024 stereo, 146-second-long tracks without glitches, both before and after this pr. * memory usage : audacity project with 4 stereo., 146-second-long tracks in spectrum display mode. memory requirements decrease by 10% with this pr, from 231 to 212mb.",0,0,0,0.9213714599609376,0.9896343946456908,0.9446024298667908,0.0,accept,unanimous_agreement
1604011990,4771,i have now completed a round of review.,0,0,0,0.9754902124404908,0.9512348175048828,0.9926544427871704,0.0,accept,unanimous_agreement
1604046283,4771,thanks a lot!,1,1,1,0.9747129678726196,0.9709142446517944,0.974849820137024,1.0,accept,unanimous_agreement
1604124536,4771,i'm done with addressing comments to -licameli 's first round of review. awaiting round 2.,0,0,0,0.9821516275405884,0.7445160150527954,0.8412845134735107,0.0,accept,unanimous_agreement
1604447179,4771,"the proof relies on `audiosegmentsampleview::copy` returning not more than its `buffersize` argument. the comment on that function is sufficient, if you look for it. it's enough.",0,0,0,0.9849427938461304,0.9869453310966492,0.9922020435333252,0.0,accept,unanimous_agreement
1604450498,4771,of course i meant to say... it's not an excuse for not improving practice!,-1,-1,0,0.8996466994285583,0.8623850345611572,0.8597670793533325,-1.0,accept,majority_agreement
1604455688,4771,"a sufficient fix for a real bug; so now, please comment in the header that the origin of the argument for `waveclip::getfloatsampleview` is in fact the play start.",0,0,0,0.9841603636741638,0.985291600227356,0.9909756779670716,0.0,accept,unanimous_agreement
1604505617,4771,"i make a number of suggestions in this round, to improve documentations and (in one place) proper argument types. i left two boxes un-resolved from the previous round. clean it up for final merge if you like, but i none of this is important enough to delay the movement of the card right on the board.",0,0,0,0.9484989047050476,0.9591906070709229,0.9784390330314636,0.0,accept,unanimous_agreement
1609190455,4771,tested.,0,0,0,0.9742198586463928,0.9789679646492004,0.990415334701538,0.0,accept,unanimous_agreement
1096682594,2668,some issues were observed when testing the solution. - #2808 - #2809 - #2810,0,0,0,0.9858670830726624,0.9884148836135864,0.9651780128479004,0.0,accept,unanimous_agreement
1126109738,2668,"linux build is failing, needs `#include ` for std::memmove",0,0,0,0.8762779831886292,0.954703450202942,0.9072365760803224,0.0,accept,unanimous_agreement
1126993082,2668,this round of review is complete. i am satisfied with the much improved large scale structure of interactions. there are a few must-fix errors. resolve them and this can be approved.,0,1,1,0.7599794864654541,0.8915358781814575,0.9499930739402772,1.0,accept,majority_agreement
1129734396,2668,"language change only happens if the user uses the preferences dialog, which can't happen during application initialization. i wouldn't worry. anyway i see you take the acceptably simple way out -- you just use `debug`. still let's remember this discussion. lowering the initialization of locale into some other place in lib- might not be needed yet but lookds easy and like the right thing to do in principle. more generally, many miscellaneous things happening in audacityapp.cpp could use reexamination for movement elsewhere.",0,1,0,0.7490289211273193,0.6538900136947632,0.8588085174560547,0.0,accept,majority_agreement
1129738181,2668,"experiment will tell! if ever my separation of modules (not libraries) proceeds, which allows pieces of audacity functionality to be loaded only selectively -- then it might also be easy to suppress the loading of modules at startup time when in the plugin host process, and that would reduce the memory footprint and static initialization code.",0,0,0,0.8307518362998962,0.9715691804885864,0.977586269378662,0.0,accept,unanimous_agreement
1129750205,2668,but my suggestion was to access members through `lck->` instead of implicitly with captured `this` see `undomanager::enqueuemessage` for an example i wrote,0,0,0,0.9841644167900084,0.9915231466293336,0.994510054588318,0.0,accept,unanimous_agreement
1129760573,2668,"in that case the other `yield` could be kept for better performance, with a comment explaining it. it's an easy tuning change to make later if we like.",0,0,0,0.9529536366462708,0.9777401685714722,0.9917213320732116,0.0,accept,unanimous_agreement
1129765447,2668,new issue opened. (not yet a necessity for 3.2.),0,0,0,0.9795711040496826,0.9879856705665588,0.9882857799530028,0.0,accept,unanimous_agreement
1129771117,2668,"shuttlegui was invented to let us avoid worrying about many details in the use of wxwidgets. as i explained, it didn't go far enough for open-endedness, platform neutrality, declarativity, and recombination with generalized variables for holding control values. but, it's a start. anyway might take on the task of rewriting this small dialog with shuttlegui soon.",0,0,0,0.9598253965377808,0.9579242467880248,0.8914909362792969,0.0,accept,unanimous_agreement
1129775638,2668,the one conversation i left un-resolved above is the detail about swapping of strings out of `std::optional` in a more efficient way. unimportant. let's merge this! a very satisfying achievement!,1,1,1,0.9909892678260804,0.99467933177948,0.9935250282287598,1.0,accept,unanimous_agreement
1594580102,4797,"as mentioned in the description, this pr is based on -licameli 's current #4746; you may (should) ignore his commits. before going through the commits, i recommend taking a look at `./libraries/lib-stretching-sequence/readme.md`, which presents the rationale for the newly introduced methods in `widesamplesequence` as well as the `lib-stretching-sequence` implementation.",0,0,0,0.9871320724487304,0.986208200454712,0.9930857419967652,0.0,accept,unanimous_agreement
1595728248,4797,"i don't understand all but here are some things to change. - the internal cursor, if really necessary, should be a hidden implementation detail of `stretchingsequence`. - `resetcursor` is called (outside `stretchingsequence`) only in `mixandrender.cpp` immediately after construction. eliminate that. if it isn't needed for export, i think it is also not needed here. - `wavetrack` has no need to override the new functions for the cursors. those overrides are unreachable. - `lib-mixer` should not be changed at all. - the remaining change there after doing the previous is to add `clipinterface`. instead put that in `lib-stretching-sequence`. let `lib-wave-track` depend on that -- in other words, inverting the dependency from what the first attempt did - don't deprecate the overload of `get` taking channel number and buffers. i think it will still be needed for painting code which will still need that pattern of ""channel-major, clip-minor"" access to the data going ""against the grain"" of the new data organization.",0,0,0,0.9568111300468444,0.9823180437088012,0.9649876952171326,0.0,accept,unanimous_agreement
1597001838,4797,"thanks paul for your timely review. although possible for this pr, i'd rather not. `mixersource` will need to call this to change position or direction of play when looping (in `mixersource::reposition`) and scrubbing.",1,1,1,0.9449638724327089,0.9727708697319032,0.9760638475418092,1.0,accept,unanimous_agreement
1597014552,4797,works for me. done.,0,0,0,0.8787649869918823,0.7606797814369202,0.9062429666519164,0.0,accept,unanimous_agreement
1597029740,4797,"i still don't imagine that, after `sampletrackcache` is removed, anything other than `mixersource` will need a continuity of samples across clips. waveform as well as spectrum painting look like they do (or at least could) access data from the clips directly. but i may be wrong, i don't mind removing the deprecation and later remove that method altogether if i turn out to be right. (if i'm right we might not need a `wavetrack` at all anymore. except for some `stretchingsequence` methods that only forward calls to `mwavetrack`, `wavetrack` isn't an interface `stretchingsequence` needs.)",-1,0,0,0.8024840354919434,0.9270567893981934,0.9265084862709044,0.0,accept,majority_agreement
1597107953,4797,"i dislike any disturbance of lib-mixer interfaces. is it possible to avoid that by letting the decorator instead deduce the need for a change of its cursor from the pattern of access in the `get` calls? but i also dislike the very notion of an internal cursor, unless there is a very strong reason for it. i have not yet reviewed in enough detail to understand the reason. is it because the time stretching algorithm has to maintain some internal state that depends on previous samples?",-1,-1,-1,0.9788818359375,0.9691858887672424,0.8840546607971191,-1.0,accept,unanimous_agreement
1597186205,4797,"yes, the mere action of reading out some output of the time stretcher modifies its state. (hence `getnext` is a non-const method.) i explained the need for a cursor to the best of my ability in this [a link]. i hope this helps convincing you. (hint: look for the ""display the rich diff"" button for that file in github to see the pictures :) )",1,1,1,0.7965248823165894,0.9811712503433228,0.984662652015686,1.0,accept,unanimous_agreement
1602391119,4797,"it is possible, and this is how `stretchingsequence` implements legacy `get`. `getnext` does the maintenance of the read position for the client, so this is done in one place, clients simply cannot use it wrongly and it can be tested once and for all (see call in `section(""resetcursor"", ""reconstructs segment sequence when expected"")`, stretchingsequencetest.cpp). for this reason, after `sampletrackcache` is removed, i'd like `mixersource` to use `getnext`, even if it possibly still could use legacy `get`, and one way or another have the possibility to indicate a change of direction. my hope was that we could also remove legacy `get`, but spectrum display code uses it. (i am skeptical that this is a good thing, though : that code draws spectra clip by clip, and so first asks for clip boundaries before querying the corresponding samples onto the track. i can't see why this wouldn't be possible by just asking samples from the clips themselves, but it's not the time for me to check.) most pragmatic is, at least for now, to leave this api, too.",0,0,0,0.9749413728713988,0.9930036664009094,0.992780864238739,0.0,accept,unanimous_agreement
1608031472,4797,now reconsidering the long commit.,0,0,0,0.9699071049690248,0.9613928198814392,0.9353014230728148,0.0,accept,unanimous_agreement
1609870913,4797,"okay, i see my critiques of yesterday mostly resolved to my satisfaction; i reiterated two still unresolved; i added more comments about what was rewritten. i am glad to see you did the work to accomodate the ""channel-major"" access pattern to caches as needed. intermediate commits are not all compilable and free of known bugs (the backwards scrubbing). i won't hold you to the rule. i see nothing yet to delay approval, with just suggestions that you can implement as you wish with a rebase. i still must finish a complete review of the big commit, then likely will approve it.",1,1,1,0.860924243927002,0.9860308170318604,0.9170615673065186,1.0,accept,unanimous_agreement
1610944939,4797,comments addressed in squashed commits. hoping for a green build and qa round ...,0,1,0,0.907861828804016,0.4172146618366241,0.6982332468032837,0.0,accept,majority_agreement
1621577115,4797,"moving back to `to do` for two reasons: - **wrong mixing-and-rendering behavior**: when duplicating a piece of a mono clip, then making these two mono tracks into a stereo track, mixing-and-rendering it, the resulting track's right channel has wrong data. compare: [a link] vs recent `master`: [a link] - **crash when duplicating a tiny portion of a mono track** surrounded by silence > merging two mono tracks into a stereo track > mixing-and-rendering: [a link] [a link]",-1,0,0,0.7219987511634827,0.922203540802002,0.9714053869247437,0.0,accept,majority_agreement
1625570166,4797,tested: - all bullet points on the list of things to be checked; - the fix of the previously discovered crash with mixing-and-renderinig.,0,0,0,0.981257438659668,0.9877918362617492,0.9817631840705872,0.0,accept,unanimous_agreement
1706194642,5138,"i am going through the qa checklist for the original 5-of-6 pr, trying (almost) each item on both branches. i'll make separate comments for separate observations.",0,0,0,0.9766334891319276,0.9725953936576844,0.9800625443458556,0.0,accept,unanimous_agreement
1706199704,5138,"paulstretch: 1. stretch a clip, 2. set preferences to editing a clip can move other clips, 3. select some region inside the clip and apply paulstretch to a factor of 10. i get such result on this branch: ![a link] there shouldn't be the gap. #5044 doesn't suffer this problem. if the checkbox ""edit a clip can move other clips"" isn't checked, this experiment works, on condition of course that the stretch factor <= 1.",-1,0,0,0.4274434745311737,0.9606949687004088,0.8662174940109253,0.0,accept,majority_agreement
1706200372,5138,auto duck: works for neither this or the original branch.,0,0,0,0.984204351902008,0.972049117088318,0.9927161335945128,0.0,accept,unanimous_agreement
1706207995,5138,"1. select a region on some stretched clip: ![a link] 2. generate silence. on the original branch, the program crashes. on this branch, no crash, but unexpected result : ![a link] this is if the ""edit a clip can move other clips"" is checked. without it, in debug, `assert(target.gettrimleft() == 0);` fails in `wavetrack::clearandpasteone`.",-1,0,0,0.8979167938232422,0.9742913842201232,0.8302075266838074,0.0,accept,majority_agreement
1706219935,5138,"noise reduction: on both branches, generating the noise profile stretch-renders the selected region and creates a clip (without creating an undo item): ![a link] now i go back one step in the undo history (undoing whatever i did before generating the noise profile) and redo. noise profile should still be in memory (?) but my undo/redo got rid of the unwanted rendered clip. now i apply noise reduction. on this branch, i get the same spurious clip pattern as when generating silence: ![a link] on the original branch, it works.",-1,0,0,0.8750187754631042,0.9492828249931335,0.8753928542137146,0.0,accept,majority_agreement
1706226481,5138,"graphic eq fails on this branch: ![a link] the gap shouldn't be there. another effect of the eq submenu, bass and treble, works, though.",-1,0,-1,0.9636994004249572,0.9121323823928832,0.8706335425376892,-1.0,accept,majority_agreement
1706234401,5138,effects that yield the spurious-clip pattern seen in the generating silence case: * generating silence * applying noise suppression * high-pass filter * change tempo * change pitch * nyquist noise gate,0,0,0,0.9715906977653505,0.986117660999298,0.9920228719711304,0.0,accept,unanimous_agreement
1706263125,5138,mixing stretched stereo track to mono yields silence (on both branches),0,0,0,0.9805112481117249,0.9856961965560912,0.984329104423523,0.0,accept,unanimous_agreement
1706266551,5138,truncate silence: works on this branch but not on the original branch (doesn't seem to pre-render),0,0,0,0.9839783310890198,0.981554388999939,0.9868370294570924,0.0,accept,unanimous_agreement
1706340608,5138,"now i know the rationale of this pr : get the destructive effects working, cherry-picking only the necessary part of 4-of-6 to make this work, i.e., `waveclip::applystretchratio`. [a link] introduced the `targetratio` argument to that method, not necessary for this pr, but we ought not to forget it when repairing copy-paste later on if this pr makes it to master.",0,0,0,0.9809096455574036,0.9859097003936768,0.988832712173462,0.0,accept,unanimous_agreement
1707043575,5138,rebased unchanged onto recent master,0,0,0,0.9871107339859008,0.9755653142929076,0.993630826473236,0.0,accept,unanimous_agreement
1707139479,5138,fixed intermediate commit that failed to build,0,0,0,0.9609358906745912,0.9828982353210448,0.9864978194236756,0.0,accept,unanimous_agreement
1707186583,5138,new commit fixes at least some of the problems when editing a clip can move other clips,0,0,0,0.9863081574440002,0.9611232876777648,0.9852741360664368,0.0,accept,unanimous_agreement
1707187306,5138,"this branch does not include all of the 6th of 6. right, don't forget the rest of that one.",0,0,0,0.9681074023246764,0.9793773293495178,0.9853737354278564,0.0,accept,unanimous_agreement
1707745354,5138,this looks good now.,1,1,1,0.8096415400505066,0.9399412274360656,0.8140770196914673,1.0,accept,unanimous_agreement
1707761296,5138,"-licameli more detail: without stretching : ![a link] if i stretch the clip on the lower track, though, applying auto-duck to the upper track does nothing.",-1,0,-1,0.9823786616325378,0.6871294975280762,0.9434656500816344,-1.0,accept,majority_agreement
1707765416,5138,now it doesn't matter whether edit-can-move or not : the assert always fails.,0,0,0,0.9564156532287598,0.9833004474639891,0.936842441558838,0.0,accept,unanimous_agreement
1707767177,5138,this works now.,0,0,0,0.9811636805534364,0.9660248160362244,0.8980942368507385,0.0,accept,unanimous_agreement
1707773346,5138,"these still don't work, at least silence, ns (but you're working on this one -licameli ), high-pass and change pitch. haven't tried the others, but i reckon they also don't work.",0,0,0,0.889926016330719,0.7016892433166504,0.8418877124786377,0.0,accept,unanimous_agreement
1707847059,5138,"last evening i studied that complicated function clearandpasteone. there may be an explanation as with the bug that shifted clips too far right: wrong inclusiveness or exclusiveness of the endpoints of a test for whether a point is in an interval, introduced when 2 of 6 was merged. if so it would be good to understand just where this subtle problem is, not just hide it behind the 4 of 6 commit, which i think should be a logically independent fix of a different problem.",0,0,0,0.9111686944961548,0.9635574817657472,0.950794279575348,0.0,accept,unanimous_agreement
1708118857,5138,"i think we can ignore this for now. generating a tone with the selected region over a clip means is done as follows: create an empty clip, write the generated tone into it, clear the selected region and insert the tone in it. since this involves copy-pasting clips onto one another, it will be repaired in the 4-of-6 pr.",0,0,0,0.9836411476135254,0.992297112941742,0.9871835708618164,0.0,accept,unanimous_agreement
1708355709,5138,"i disagree: the assertion should be understood and fixed. i have added a fix. you might see `// precondition satisfied because... ??` in two places, recording doubts i had about some stuff, that now i have resolved after deeper study of the new complexities vitaly added to that function.",0,0,0,0.5380589365959167,0.8003543615341187,0.8544043898582458,0.0,accept,unanimous_agreement
1708574906,5138,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1708582202,5138,"i wonder if this is in common with the un-corrected mixing of stereo to mono. for reasons i didn't figure out, apparently there are zeroes read from the stretched track instead of the proper values.",0,0,0,0.6949001550674438,0.7797563672065735,0.957056760787964,0.0,accept,unanimous_agreement
1708583809,5138,have you tried again with the latest changes?,0,0,0,0.9832363724708556,0.9905919432640076,0.9935702085494996,0.0,accept,unanimous_agreement
1708589072,5138,"`getfloats` is called directly on the un-selected control track. i changed that function, recall, to fail if there is any stretch in the specified interval. so i think you will observe the same failure in master.",0,0,0,0.9877501130104064,0.9899770617485046,0.9929758310317992,0.0,accept,unanimous_agreement
1708591585,5138,i think the easy fix for autoduck is to make a temporary rendering of the control track during process() and use that instead. can you write and push a commit to do that?,0,0,0,0.9863395690917968,0.9897258877754213,0.9858457446098328,0.0,accept,unanimous_agreement
1708755658,5138,"i'm testing every place under src/effect where `clearandpaste` is used. project tempo is 120 and 4/4 time. i generate 4 bars of noise in a mono track, stretch out to 6, select from 2 to 4, then apply an effect. - change speed - high-pass filter (nyquist.cpp) - generate silence (generator.cpp) - noise reduction, step 2 - tone generator (hits pertrackeffect) - change tempo, high quality on (sbsmseffect) - change tempo, high quality off (soundtoucheffect) in all of these, overlapping clips result. that's bad. i expect the same for other nyquist effects, chirp, noise, change pitch, and the sliding pitch shift which visit the same functions. but for any other effect, this pr makes an improvement over the master branch behavior.",0,0,0,0.9365248680114746,0.9786835312843324,0.9826900959014891,0.0,accept,unanimous_agreement
1710316816,5138,rebased onto recent master and resolved conflicts,0,0,0,0.9848836660385132,0.9840643405914308,0.9939806461334229,0.0,accept,unanimous_agreement
1710924878,5138,"if you understood my last criticisms of #5139, then you will understand my dislike of the proposed complications for the analysis phase of noise reduction. if the selection for analysis happens to span clips of different stretch, then there may be mis-weighting of things when combining results. admittedly this is very unlikely for users to do, who use noise reduction intelligently (selecting only a small sufficient duration). but on the other hand, for just that reason, i think the pursuit of this supposed efficiency isn’t worth it either. i would keep my simple fix: just render the stretch if needed, only on the selection, likely to be short, and simply avoid the side effect on tracks by not committing the effectoutputtracks object.",-1,0,-1,0.7089788913726807,0.6891584992408752,0.5302950143814087,-1.0,accept,majority_agreement
1711363389,5138,"referring to my comment in the spectrum-analysis pr : [a link] the experiment i did there is i think more likely to happen in the noise reduction use case: the selection is likely to be at the start of a clip, where there is background noise but speech hasn't started, and unfortunately this is where the algorithm is in a transient phase. the difference in spectrum characteristic is arguably not dramatic, but used as a profile it might not perform as well when used in the processing of other parts. on the other hand, one could argue that the profile selection will probably be used to process the same clip, and since we know the rms is unfortunately different before and after rendering the stretch, it's safer to take stretch-rendered data as profile for the processing of data that will also be stretch-rendered. now i've put all my arguments forth, and will let you decide. it's your baby after all.",0,0,0,0.8097772598266602,0.9737551212310792,0.9725296497344972,0.0,accept,unanimous_agreement
1713591482,5138,"pushed another commit to fix the ""silence audio"" command. generate tone, stretch clip, select region and ""silence audio"" (ctrl+l) before fix (possible result, you may get the ""internal error"" message too): ![a link] after fix: ![a link]",-1,0,0,0.9072771072387696,0.992521584033966,0.9768694043159484,0.0,accept,majority_agreement
1715575571,5138,"tested. found issues: - when clicking either **cancel** or **stop** in the **rendering time-stretched audio** dialog, progress hangs for a while but finishes in the background anyway, so basically neither of these two buttons is functional - when applying ""repair"" effect on a selection of max. 128 samples, it creates a spurious unwanted clip with gaps on each side:",0,0,0,0.9029259085655212,0.9230394959449768,0.9232141375541688,0.0,accept,unanimous_agreement
1715801682,5138,rebased onto recent master and sqaushed the fixup for noise reduction.,0,0,0,0.9851020574569702,0.988766610622406,0.9943755865097046,0.0,accept,unanimous_agreement
1715969855,5138,rebased again to recent master and added commits to disable the repair effect on stretched clips.,0,0,0,0.9866630434989928,0.9910705089569092,0.9944866299629213,0.0,accept,unanimous_agreement
1717282771,5138,- the repair effect is disabled for stretched/shrunk clips - the issue with non-op progress dialog buttons is now fixed in the most recent commit of this pr -licameli,0,0,0,0.9853335022926332,0.9918266534805298,0.9862574934959412,0.0,accept,unanimous_agreement
1720088831,5138,like what -- you mean other effects behave correctly when there is a stretching error? if any behave wrongly (as loudness did) i should know it and fix it and you should withhold approval until i do.,0,0,0,0.9316187500953674,0.8289249539375305,0.9760994911193848,0.0,accept,unanimous_agreement
1720097403,5138,"would that be a regression, though ? on master, and i suspect on 3.3.3, too, some effects may fail, modify the content partially ? and then commit the result.",0,0,0,0.986389935016632,0.992760181427002,0.978182315826416,0.0,accept,unanimous_agreement
1720100581,5138,rebased unchanged onto recent master,0,0,0,0.9871107339859008,0.9755653142929076,0.993630826473236,0.0,accept,unanimous_agreement
1720103881,5138,the failure of stretching should be propagated so that the effect fails. loudness was failing to do that. do others fail to do that?,-1,0,0,0.8355748057365417,0.8185482025146484,0.9877025485038756,0.0,accept,majority_agreement
1720136471,5138,"pardon me, i must have recalled wrongly: looked again at your commit where you check the return value of `wavetrack::set`. loudness is now the only one i see that didn't make use of `false`. feel free to double-check.",0,0,0,0.5495074987411499,0.7623732686042786,0.9080637097358704,0.0,accept,unanimous_agreement
1721242677,5138,"found issues: - when stretching/shrinking audio and trying to silence the selection by ctrl (cmd) + l, it does so in a different place of the clip: [a link] - trim silence effect fails: [a link]",0,0,0,0.824776828289032,0.9758451581001282,0.9797706007957458,0.0,accept,unanimous_agreement
1721338681,5138,"the ""silence audio"" command not working is known and fixed in that other pr, #5182.",0,0,0,0.9840643405914308,0.9946211576461792,0.9909760355949402,0.0,accept,unanimous_agreement
1722475235,5138,rebased onto recent master with some squashing and permuting of commits. added two more commits.,0,0,0,0.9876846075057985,0.939744234085083,0.992822766304016,0.0,accept,unanimous_agreement
1722477302,5138,"more qa checkboxes, since we discovered there are interactions with sync lock",0,0,0,0.9867683053016664,0.9879343509674072,0.9924181699752808,0.0,accept,unanimous_agreement
1723125987,5138,force-pushed once more with one commit inserted first in the sequence to fix crashes in sync-lock,0,0,0,0.986752152442932,0.9931625127792358,0.9882232546806335,0.0,accept,unanimous_agreement
1725011111,5138,tested,0,0,0,0.9697903394699096,0.957400381565094,0.7421080470085144,0.0,accept,unanimous_agreement
1195333596,3278,"in my fetch of your latest force-push, there is still failure to build on macos at the second commit.",0,0,0,0.9562354683876038,0.9682623744010924,0.9827579855918884,0.0,accept,unanimous_agreement
1196966245,3278,"please note: ""effect inherits pertrackeffect not statefulpertrackeffect"" is specified originally as part of step 4; but once i changed that inheritance, the code would not build until i implemented the most parts of step 5. - this is why it is part of step 5.",0,0,0,0.9878061413764954,0.9916995763778688,0.9938129186630248,0.0,accept,unanimous_agreement
1198483080,3278,"""removed unnecessary calls to resetmoduleandhandle"" might be squashed earlier",0,0,0,0.9852096438407898,0.9937039017677308,0.9942155480384828,0.0,accept,unanimous_agreement
1198487610,3278,"the problem, as i explained before, was that i omitted before part of what needed to be done in step 4. that is, move `processfinalize` also into the instance. your step 5.1 simply deletes that function from the effect but does not restore the equivalent into the instance. that may be losing an important side effect. so i can't accept this pull request yet.",0,0,0,0.9336338043212892,0.8812745809555054,0.910121500492096,0.0,accept,unanimous_agreement
1199678029,3278,"i redid step 4. from scratch - hopefully it is not too complicated, i could not split it into subparts.",0,0,0,0.9645365476608276,0.8764580488204956,0.9579383730888368,0.0,accept,unanimous_agreement
1201026569,3278,"i wrote earlier ""also in step 4, the poweron() in buildfancy() should be changed to call it on the instance, not on this. pass the instance into buildfancy() from populateui()."" the latest push doesn't do this any more. please restore that change.",0,0,0,0.980976402759552,0.9938912391662598,0.9927789568901062,0.0,accept,unanimous_agreement
1202714855,3278,"ok, restored",0,0,0,0.976975679397583,0.9134178757667542,0.9918569326400756,0.0,accept,unanimous_agreement
1202811880,3278,"all of what we discussed yesterday is now in the last push i did, commit 4.",0,0,0,0.9836288094520568,0.9840528964996338,0.9922979474067688,0.0,accept,unanimous_agreement
1203030225,3278,"the latest push looks good, but it awaits completion with step 5. a few comments: - `vsteffectvalidator::mintance` might be private. - i was surprised to see `audiomaster` moved into `vstinstancebase`. i thought at first, that's wrong, it should remain in the wrapper, and the validator may need to use it too. but your comments suggest, we will split the `audiomaster` function into multiple functions, and pass different functions to `pluginmain`. i now think that's a good alternative solution too. - `processblockb ` doesn't need to be separated from `processblock ` as a member function of `vstinstancebase`, now that slaves are also instances. (but not so, yet, for the initialize and finalize functions.) - where is `vsteffectinstance::mnumchannels` used? i can't find it. you might just delete that, and the functions that get and set it. - `callsetchunk` (which has two overloads) is no longer called anywhere! (and the four-argument overload in fact became unused already at commit 2df527f6d72c92c5cf5c8cc679ac6122a03c4649). so, just delete those, and rename the `callsetchunkb` functions as `callsetchunk`. - i think `vstinstancebase::automate` is wrong... i think the `vstinstance` needs to override it, and call `callsetparameter` (not b), and so, the instance needs, transitionally, a reference to the array of slaves. - why is `mtimeinfo` still in the effect class? only the instance and the slaves, also instances, need it. once you address the point about `processblockb`, this will become clearer. remove it from the effect. please do an interactive rebase addressing all of these, force push it, and then proceed to step 5.",1,1,1,0.7410939335823059,0.7572393417358398,0.9344325065612792,1.0,accept,unanimous_agreement
1203667942,3278,"`mtimeinfo` is actually in the instancebase class, not the effect class; it is referenced by: - `gettimeinfo()` called from the vst callback - `getsamplerate()` called from the vst callback - `vsteffect::vsteffect` as long as the vst callback is called for the effect too, i can not move `mtimeinfo` in the instance only. i actually wonder if i can move it there even after i split the vst callback in two parts (one for the effect, one for the instance) because maybe the callback for the effect will still need to call `gettimeinfo` and/or `getsamplerate`? this because the vst gui might want to draw something that depends on the samplerate (think of a band equalizer for instance)",0,0,0,0.6145245432853699,0.9781292080879213,0.9844772815704346,0.0,accept,unanimous_agreement
1203753452,3278,"i thought we decided it is not needed in the effect. if for gettimeinfo and getsamplerate, the effect can simply inherit the trivial implementations, then mtimeinfo can belong to instance only.",0,0,0,0.9873939752578736,0.9905885457992554,0.9905981421470642,0.0,accept,unanimous_agreement
1203804466,3278,"if experiment shows that those cases in audiomaster are not reached for the effect object, but only for the instance, then the simplification of moving mtimeinfo out of effect could be done and would be desirable. but we might leave that until we do such experiment.",0,0,0,0.9851273894309998,0.9914244413375854,0.992602527141571,0.0,accept,unanimous_agreement
1203809495,3278,"i'd like to think out loud a bit now. automate is called from the vst callback, sometimes on the effect, sometimes on the instance. i put some breakpoints and i observed this: 1) when instantiating an effect --> `automate` is called on the effect, nothing happens because `mmaster` is null and `mslaves` is empty 2) when moving a slider on the effect gui --> as above 3) when pressing play --> `automate` is called on the instance 4) when clicking ""apply"" (i.e. destructive processing) --> `automate` is called first on the effect (`mmaster`=null `mslaves`={}) and then on the instance 5) when moving a slider while playing --> `automate` is called on the effect, `mmaster`=null but this time `mslaves` has one item my conclusions (but i might be wrong): a) we need both overrides of `automate `(for effect and instance), and when i will split the callback, both of them will need to call `automate `when requested to. b) `mmaster` can be removed (it is always nullptr in my tries above) c) i could do as you say, i.e. pass the array of slaves to the instance and have instance::automate call callsetparameter (not b) on them, but, is it really needed? without this, everything still works and it would be a temporary thing anyway",0,0,0,0.8801516890525818,0.9630247354507446,0.967115581035614,0.0,accept,unanimous_agreement
1204077864,3278,"did a little experiment: using a simple plugin like gain, `gettimeinfo()` is never reached, neither for the effect nor for the instance. but already using an equalizer plugin, at least `gettimeinfo()` is reached, and for the effect only. so i would say, at least `gettimeinfo()` should remain for the effect and return the actual mtimeinfo, and if we want to play it safe, also` getsamplerate()`.",0,0,0,0.9614054560661316,0.9875451922416688,0.9747260212898254,0.0,accept,unanimous_agreement
1210864250,3278,"a note about my commits for step 5. : i said earlier (and wrote in code comments) that i would split the vst callback function in two parts, one for the instance and one for the effect. since then i changed my mind and opted for a more conservative solution, which is: keep the vst callback in the wrapper and have it call virtual methods. i think doing so is cleaner and poses less risks of breaking things.",0,0,0,0.9011800289154052,0.8649737238883972,0.8344206213951111,0.0,accept,unanimous_agreement
1215735182,3278,"i'm still not satisfied. as i explain: both in automate(), and in onslider() (which will both ultimately go to the validator class), callsetparameter should be invoked, but not in `this`, but instead on an instance object. that is the instance stored in the minimal validator class now; and, until the validator is complete, the effect will keep a pointer to the active validator.",0,0,0,0.7630793452262878,0.9653502702713012,0.5190341472625732,0.0,accept,unanimous_agreement
1216341317,3278,"i can not do this because: 1) `::automate` comes in two versions: - `vstinstancebase::automate` which has no access to members of the effect (such as the pointer to the active validator) - `vsteffect::automate` it is actually calling callsetparameterb 2) i tried doing it in `::onslider`, but then it breaks this functionality: as i move sliders of the plain gui while realtime processing, i do not hear changes in the sound anymore.",0,0,0,0.9079049825668336,0.7805066108703613,0.9790530800819396,0.0,accept,unanimous_agreement
1222922394,3278,i am reviewing the latest force-push and so far i am satisfied with the 4.x steps. they can be squashed into one in your next force-push.,0,0,1,0.9286969900131226,0.9658715724945068,0.6275068521499634,0.0,accept,majority_agreement
1223856907,3278,"please rebase onto latest master, squash steps 4 into one, and squash steps 5 into another commit. address in step 5 the two reqeusts for change. then, this will be approved, and you will move on to the validator.",0,0,0,0.9843345284461976,0.9540006518363952,0.9923080205917358,0.0,accept,unanimous_agreement
1223887411,3278,"less important, `muselatency` might also move from wrapper to instance",0,0,0,0.9872174859046936,0.991907835006714,0.9843614101409912,0.0,accept,unanimous_agreement
1112848203,2867,this completes round one of review!,0,1,0,0.622927188873291,0.9302766919136048,0.708899199962616,0.0,accept,majority_agreement
1112937274,2867,"i have pushed the two promised commits onto this branch. if you rebase and force-push, perhaps they could be moved to the start of the commit sequence so you don't add and old style event handling code for the theme, only to change it again.",0,0,0,0.9866577982902528,0.9928134083747864,0.993786096572876,0.0,accept,unanimous_agreement
1113284121,2867,a third suggested commit added to the branch,0,0,0,0.9888098835945128,0.988667905330658,0.9953193068504332,0.0,accept,unanimous_agreement
1134817786,2867,in fact `tracklist::findbyid` is the convenient thing to use on undo or redo. use `track::getid` to find the value to store in the window.,0,0,0,0.985571026802063,0.9929352402687072,0.9945895671844482,0.0,accept,unanimous_agreement
1135776315,2867,"if the responses to undo and redo appear to work now, without any use of `trackid` or any subscription to undo manager changes, it is because you rely on coindicental track focus change messages -- those send from editmenus.cpp, right? i fell a bit uncomfortable with that. it seems a bit fragile, and it might be preferable that this panel should express its dependency on the current undo state directly, even if it requires a little more work. you are depending on things coded in editmenus.cpp for this window to work correctly, but the src/menus files should be tops of the dependency graph -- they depend on other things, but nothing depends on them. this isn't ""dependency"" in the really hard sense of link time, but dependency in a weaker sense. i might not insist on this fix to get this merged and testable. but i'm not wholly satisfied without it.",-1,-1,-1,0.5362527966499329,0.963002622127533,0.915433704853058,-1.0,accept,unanimous_agreement
1135802233,2867,"i pushed a small commit 93b60966a10d36998a990e467cd5d115b1e9d170 onto the branch, in case my point about a pure virtual having definition was unclear. this completes another round of review. i hope this converges today into something we merge and let qa test.",0,0,0,0.6998462080955505,0.938933253288269,0.5782666802406311,0.0,accept,unanimous_agreement
1135806963,2867,"one more thing -- did you resolve the point, that a click on the ""[add] effects"" button should reset the track focus? i don't see where that omission was fixed.",0,0,0,0.9832667112350464,0.9860463738441468,0.9877786040306092,0.0,accept,unanimous_agreement
801468758,759,"hi, thanks for the translations. i'll continue the review later on, but so far these translations are hardly an improvement over the current ones, moreover some of the previously correct translations are broken. i'd recommend a re-pass over the translations as a whole, and make sure that the ""audio"" context is preserved.",1,1,1,0.8116313219070435,0.7629817724227905,0.9569115042686462,1.0,accept,unanimous_agreement
801662932,759,"hello, i corrected some incorrect translations. i did not make much change in the current translation. the majority was to add accelerators. i fixed the translation of the most parts. i would appreciate it if you report the mistake i made, i would be considered a novice in the translation business. there are also 270 missing translation lines that are not in the .pot file but are available in the interface. these missing lines are present in the .po file but cannot be used. [a link]",0,1,1,0.872765839099884,0.9308099150657654,0.855703592300415,1.0,accept,majority_agreement
801782345,759,"i will continue reviewing later on. it will take a while, since i was able to barely review a quarter of the changes.",0,0,0,0.934971809387207,0.9583249092102052,0.9378026127815248,0.0,accept,unanimous_agreement
801873229,759,i corrected the wrong translations you warned [a link],0,0,0,0.925198495388031,0.6462119817733765,0.9887007474899292,0.0,accept,unanimous_agreement
801877324,759,"thanks for the corrections, i appreciate it. is it possible to commit your changes here for easier review?",1,1,1,0.9752569198608398,0.9838408827781676,0.9845871925354004,1.0,accept,unanimous_agreement
802638643,759,incorrect translation corrections [a link],0,0,0,0.7643406391143799,0.8042852878570557,0.816575288772583,0.0,accept,unanimous_agreement
1233188463,3432,my review of `lib-cloud-audiocom` and earlier commits is done.,0,0,0,0.9859742522239684,0.9878286123275756,0.9932396411895752,0.0,accept,unanimous_agreement
1234259431,3432,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1234913086,3432,"another omission you might fix: make a `attachedtoolbarmenuitem` in shareaudiotoolbar.cpp analogous with other toolbars, so that there is a new view > toolbars menu item.",0,0,0,0.9894176125526428,0.9949118494987488,0.9931294322013856,0.0,accept,unanimous_agreement
1235329701,3432,there will be additional changes added,0,0,0,0.980169951915741,0.984864056110382,0.9939236044883728,0.0,accept,unanimous_agreement
1235333843,3432,"ok, i'll merge my two little prs rather than yield to you now",0,0,0,0.9723709225654602,0.980461835861206,0.9092313051223756,0.0,accept,unanimous_agreement
1235621511,3432,"the hidden dependency is broken, so mod-pcm etc. might still be extracted -- good. the configuration of preferred types is stored in lib-cloud-audiocom and not in the ui layer. ok. otherwise i'm not sure i understand the other objections to my draft solution, or why there is an essential difference. why would it be so wrong in principle to combine the two abstract interfaces if in future the exportplugin interface could be demoted into a library too? the concrete implementations of exportplugin and associated cloudexporterplugin end up side-by-side anyway. and it's not even necessary, for cycle breaking, to demote the new cloudexporterplugin interface into a library. lib-cloud-audiocom depends on lib-cloud-upload -- but really only for mimetypeslist which is just a few type aliases. i don't know quite what you mean about the existing exporter framework being so difficult to rewrite. it is true that it has its own ""statefulness"" problem much like effects. each particular exporter has a set of global variables for preferred settings. is there some great need for a menu of ""presets"" for each exporter? would we store those in std::anys? ... finally my foolish question, why can't any file format you like be uploaded to cloud, then downloaded again to another audacity executable that can interpret the same format? why can't we have open-endedness here? i don't understand the technical limitation that the server would impose againt it.",0,0,0,0.7365878224372864,0.7617500424385071,0.7252734303474426,0.0,accept,unanimous_agreement
1235702193,3432,"well, this is wrong ... in principle. for example, it breaks isp, which is i in solid. i do not like the implementation i proposed either, but provided the current framework it will have to stay for now. hopefully, it would be removed one day. exportplugin should know nothing about the possibility of audio uploads. uploading is an optional feature. uploading depends on exporting, not vice versa. i can easily see how we need to extend those interfaces based on user testing, i do not want to change exportplugin interface to do that. you are correct, that implementations reside close to the plugins now, but that is not because i like it there. there is simply no other feasible options right now. to be fair i had never seen usage of `any` that solved problems instead of introducing ones. scripting language binding, commonly referred as a `good example`, are not using `any`. scripting languages have a very well defined set of types and bindings must know how to map the specific host language type into a scripting language type. `any` has virtually no use there. python has a stronger type system than c, so to speak. speaking of exporter configuration i am afraid that ffmpeg approach is the ""nessecary evil"". that is - we have a string identifier mapping a well defined variant, with values checked by a plugin for validity. plugin, on the other hand, provides a list of supported options with the constraints on them, so the ui can be built. using `any` as a configuration will not allow interface clients to supply configuration to the plugin unless we link against a specific plugin. however, i like the presets idea very much. audio.com is an audio sharing service. that is - it needs to know how to play and how to transcode the uploaded audio .",-1,-1,-1,0.8967681527137756,0.9370484948158264,0.8211700320243835,-1.0,accept,unanimous_agreement
1235719425,3432,"i'm not sure i understood all of the previous. std::any is surely a dangerous escape into typelessness, unlike std::variant, and not to be overused, but it does allow open-endedness as variant does not. i think it is the right tool for the job in the system of effects. there are ""producers"" of anys (effects doing makesettings) and ""consumers"" that can interpret them (instances) but in between a custodian that ""warehouses"" them (realtimeeffectstate). the middleman needs to belong to a lower level of the dependency graph, and not need to know a closed-ended variant of possibilities, which would violate ""d"". the middleman's job is to guarantee only that it gives the right anys back to the right parties that ask to use them and know how to interpret them.",0,0,0,0.6817958354949951,0.8770257830619812,0.84718918800354,0.0,accept,unanimous_agreement
1235744930,3432,"i do not agree, but i though we agreed to disagree here :-) there are significant limitations that will make implementing certain features expensive or not possible. on top of that, it makes debugging hard. so we are not on the same page here as well. (think of any feature that needs a list of parameters!) i'm not sure how d will be violated, but l is violated right now. d, as in dependency inversion, is very strict on l. otherwise it is impossible to make the system safe. i am not convinced yet that this middleman itself is needed and there is definitely no need for it in exporters :-) using similar approach for exporters will not solve the issue we are discussing right now.",1,1,1,0.5448049902915955,0.785082221031189,0.8838579058647156,1.0,accept,unanimous_agreement
1235764887,3432,i don’t understand what alternative you would suggest for the system of effects. effectsettings may have been stretched for too many purposes that should be separated — yes. the inter-thread communication could be simpler. i have ideas for that i would like to do next release. still see the need for real-time effect state to store some polymorphic data for the related stateless effect object to interpret and serialize and deserialize.,0,0,0,0.9632624983787536,0.850905179977417,0.8399314880371094,0.0,accept,unanimous_agreement
1235773417,3432,"this just means, that stateless effect is not serializable, the statefull effectinstance is. quite a complex topic to discuss on a train using a phone. can we discuss it sometimes later please?",0,0,0,0.7416062355041504,0.507663369178772,0.9771475195884703,0.0,accept,unanimous_agreement
934524358,1193,"thank you, edward. the merging of this work was done, but not using the github interface to do it.",1,1,1,0.9471003413200378,0.9373326301574708,0.9546523094177246,1.0,accept,unanimous_agreement
1271882058,1193,how does this work? i can't find any spectral data control panel,0,0,0,0.939549684524536,0.7363035678863525,0.9914535284042358,0.0,accept,unanimous_agreement
1271887991,1193,"it is not yet exposed to end users. if you build your own from source, you can modify experimental.cmake to get it",0,0,0,0.9849674105644226,0.9919447302818298,0.9918728470802308,0.0,accept,unanimous_agreement
1272001494,1193,after enabling **brush_tool** this error appears and the build fails (should i open another ticker?) [code block],0,0,0,0.9626234769821168,0.9817072749137878,0.9808186888694764,0.0,accept,unanimous_agreement
1272054881,1193,"please do. sorry, i'll get that fixed in the next-release branch.",-1,-1,-1,0.9879900813102722,0.9905319213867188,0.9921872615814208,-1.0,accept,unanimous_agreement
1611474835,4853,this pr is based on currently-in-qa [a link],0,0,0,0.9875507950782776,0.9867382049560548,0.9950252175331116,0.0,accept,unanimous_agreement
1611482097,4853,"message of second commit: whoever implements the listener must be able to use the `tracklist` to make sure all tracks of a project get the update, and to make sure newly added tracks also get the project tempo set. since lib-track and lib-numeric-format do not depend on one another, i have the source code itself implement the listener. my first approach during the early poc days was to have `lib-wave-track` depend on `lib-numeric-format`. it was a request from -licameli that i avoid this dependency and we came up with this solution. i still am not convinced that it is the wisest choice, though, since it comes at the cost of rather lots of synchronization code. also, at it stands i implement `projecttempolistenerinterface` in `src` itself, which means more work for the qt migration i suppose?",0,0,0,0.9230244755744934,0.9684988260269164,0.98274165391922,0.0,accept,unanimous_agreement
1611596798,4853,"actually, i'm questioning the need for this pr at all. `waveclip` has a stub `setprojecttempo` not doing anything yet. what will happen in future? you will store a `double`? is the intention that `waveclip`s will default their tempo to the project tempo, unless otherwise changed by the user for the individual clip? but why not simply store `optional `? you understand we can't have `wavetrack` or `waveclip` store back-pointers to the project or any attachment of the project, because copy-paste across projects would then have dangling pointers. but in all places where it matters to retrieve the clip ratio, arrange to supply the value from the project as context information. for instance, the stretching sequence decorator can be constructed with that value. `stretchingsequence::create` is now used in three places. in two, there is a `tracklist` available that can be queried for its project. the third is in `mixandrender` and the two callers of that have a `tracklist` so it would not be hard to add one argument for the value.",0,0,0,0.9116286635398864,0.8784798979759216,0.7316204309463501,0.0,accept,unanimous_agreement
1611607857,4853,"or put this another way -- can you make a bigger pr? show me how `waveclip::getstretchratio` becomes a real function and not just the stub returning 1.0 always. then i'd say, change it to take default tempo as an argument, figure out all other necessary changes in `lib-stretching-sequence` to supply that argument, and then working up the call stack, you would arrive at the uses of `stretchingsequence::create`. then maybe all this effort with publishers and listeners won't be needed, and we will have one less consistency invariant in the data structures that we would need to worry about preserving.",0,0,0,0.8540937900543213,0.9733616709709167,0.9848167300224304,0.0,accept,unanimous_agreement
1612018981,4853,"the stretch ratio (not only clip-specific, but that which takes project tempo into account too) isn't only needed during playback, but also for painting. and we must care to look at up-to-date project tempo values, too. that said, playback assumes constant project tempo (we want to disable the possibility of tempo change during playback), so your suggestion would probably work in this case. as for the painting, it's all in `src`, so yeah, looks like an up-to-date project tempo value can be queried for each painting pass. i'll try it out.",0,0,0,0.8697236180305481,0.9518290162086488,0.9756768345832824,0.0,accept,unanimous_agreement
1612035927,4853,"constant tempo during the playback is not the design choice, we just had no time to make the tempo and time signature variable. and even with tempo being constant for the whole project duration, i am not sure that changing the tempo during the playback is disabled now or should be disabled in the future. i haven't looked through the pr yet, so i don't know why there is a need for another publisher.",0,0,0,0.5782960057258606,0.8526601791381836,0.9580398201942444,0.0,accept,unanimous_agreement
1612057316,4853,"i can't think of anything ux-wise that should prevent tempo change during playback, but even with more time it seems to me that the implementation cost is not worth the additional convenience for the user. in any case, yes, we don't have time in this iteration. i believe this was mentioned during stand-up, there seemed to be a consensus that tempo change could be disabled during playback, and no one mentioned it should be done on the longer term. you'd be the first :)",1,1,1,0.9115495085716248,0.9902862906455994,0.9822548627853394,1.0,accept,unanimous_agreement
1612233455,4853,tempo change during playback might raise the problem of proper updates without race conditions when a worker thread needs to query the tempo. maybe `getstrerchratio` needs a context type that will contain a constant double in a first version but a virtual function to get the varying tempo in future and the override could use atomics.,0,0,0,0.9790934324264526,0.9867210388183594,0.9863328337669371,0.0,accept,unanimous_agreement
1612331811,4853,see also the trackartist structure and uses of trackartist::get. that's how other context information can be got into drawing routines. see trackpanel::drawtracks where things are set up in this context.,0,0,0,0.9815500974655152,0.9937719702720642,0.9931673407554626,0.0,accept,unanimous_agreement
1612718918,4853,"trying the project-tempo-passed-as-argument-when-needed approach ... there's a difficulty, that could be worth tackling. `waveclip` boundary getters and setters (`getplaystarttime`, `setsequencestarttime`, etc) use _seconds_. now consider situations such as this one : 1. user moves clip, which updates its boundary member variables. 2. user changes tempo. 3. painting wants to paint, which requires clip to report its time boundaries. the correct value would be `boundaryinseconds * tempowhenboundarywasset / currenttempo`. where do we get `tempowhenboundarywasset` ? possible approaches: * publisher approach: like i've been doing so far: each project tempo change is published to clip, which modifies its boundaries accordingly. this requires this pr. * projecttimesignature approach: similar to the publisher approach, except `lib-wave-track` depends on `lib-numeric-format`. * beat approach: clip boundaries are expressed in beats, as well as all its public methods. | | pros | cons | |--- | ------------- | ------------- | | **publisher** | * proven to work * likely fastest delivery | * need to maintain up-to-date values * rounding errors might build up (each tempo change implies a `*=` operation on those time values) | | **projecttimesignature** | * no need for a ""new publisher"" | * need to pass correct reference when copy-pasting, c.f. `sampleblockfactory` * maintenance of clip time boundaries is still needed | | **beat** | * clips don't worry about tempo changes * consistent with ui : project tempo changes modify position in time view, not b&m view -> might have unforeseen positive side-effect | * clients must know project tempo when asking these values (may not be a bad thing) * compatibility | **explanation about the compatibility problem of the beat approach** : old audacity projects store boundary-related clip member variables in seconds. to convert them in beats, the project tempo must be known. this information, available somewhere in the project file, will have to be communicated to the clip. backward compatibility (opening 3.4+ projects with older versions), if deemed important, could also be achieved by saving time values, in which case project tempo at save time will also have to be communicated. i have a goodish feeling about the beat approach. i'll give it a try, at least until new feedback arrives.",0,0,0,0.9273040890693665,0.9817523956298828,0.9778132438659668,0.0,accept,unanimous_agreement
1613117496,4853,my understanding of “beats” is that you normalize out any tempo information when modifying the clip. then only current tempo is needed. i think that may work better. maybe this pr should be closed and you will propose another that really stores new information in clips so i can better understand the whole.,0,0,0,0.9038594961166382,0.9386706948280334,0.961908757686615,0.0,accept,unanimous_agreement
1613313492,4853,modifying the project tempo also counts as clip modification (its boundaries).,0,0,0,0.9874171018600464,0.9887489080429076,0.991117000579834,0.0,accept,unanimous_agreement
1613361585,4853,closing this pr for now makes sense until new developments.,0,0,0,0.977173924446106,0.970902383327484,0.984911561012268,0.0,accept,unanimous_agreement
1613515366,4853,"it's quite thrilling ... hard to formulate simply and convincingly, even to myself. i think key to understand the problem is indeed that _one tempo change is all it takes_ to invalidate clip boundaries. _beats_ remain constant, seconds don't. imagine: 1. hey clip, set start time to 60s. 2. i'm going to change project tempo now ... 3. hey clip, what's your start time again ? clip cannot tell, unless it knows by how much the project tempo has changed between. it is _not_ sufficient (-licameli) for the client to know tempo in step 3 : the answer differs if all three following examples: a) tempo was 60bpm in 1 and is now 120bpm in 3 => answer is 30s b) tempo was 120 and is now 60 => answer is 120s c) tempo was 120 and is now 240 => answer is 30s. i've said this already earlier: the publisher approach makes sure that the tempo is known at any time, which enables giving the correct answer without changing the `waveclip` boundary-related methods - and there's many of them: * getsequencestarttime * setsequencestarttime * getplaystarttime * setplaystarttime * getplayendtime * setplayendtime * settrimleft * gettrimleft * settrimright * gettrimright * trimleft * trimright * trimleftto * trimrightto * offset * withinplayregion * beforeplaystarttime * afterplaystarttime i don't think i can give a better impression of what any alternative to the proposal in this pr would look like in terms of size. i, personally, would still prefer to have clips store their boundaries in beats. it might hurt now, but could bring good after.",1,1,-1,0.9636016488075256,0.9911367893218994,0.6376683115959167,1.0,accept,majority_agreement
1613532118,4853,"we must choose between the pain of redundant data stored in each clip, with the problems of invalidation. or the pain of changing all of those functions to accept ""wave clip context"", but then, boundaries become computed. i still feel inclined toward the second pain. once it is done, ""wave clip context"" can also be enlarged to carry other information, and we won't need other publishers and listeners.",-1,0,-1,0.5407631397247314,0.8056322336196899,0.7968058586120605,-1.0,accept,majority_agreement
1613540105,4853,"maybe the first will look like the lesser short-term pain, after all, but my intuition is that the second would be better for longer term maintainability.",0,0,0,0.865691602230072,0.8670028448104858,0.9247289299964904,0.0,accept,unanimous_agreement
1613541601,4853,"do we need a context other than audacityproject, though? i don't quite understand the problem now; i will chat with tomorrow.",0,0,0,0.949757754802704,0.7788387537002563,0.9739809632301332,0.0,accept,unanimous_agreement
1613693798,4853,"the context we need is `projecttimesignature`, an attachment to the audacity project in `lib-numeric-format`. that dependency graph node and `lib-wave-track`, where this context need is seen for the first time, have no inter-dependency, and -licameli is reluctant in establishing one.",0,0,0,0.9698749780654908,0.9818862676620485,0.9917045831680298,0.0,accept,unanimous_agreement
1613725844,4853,at least some daws seem to have options for the timebase. eg: [a link] [a link] is the plan for audacity not to have such options? or have i misunderstood what you have written?,0,0,0,0.9255406260490416,0.985499382019043,0.983146607875824,0.0,accept,unanimous_agreement
1613732428,4853,"as i understand, the primary concern of paul is that we cannot store any references to audacityproject in the clips due to copy/paste implementation details. this concern is very convincing :-)",1,1,1,0.956058144569397,0.9949926733970642,0.966780424118042,1.0,accept,unanimous_agreement
1613764561,4853,"that was a concern in 's prototype efforts. it's not my concern now, with this or the alternative proposals. a context passed whenever some computed result is needed allows the clip not to store a reference to the context object. but as said i don't like accumulating unnecessary dependencies. a context, which is not audacityproject& or any object within it, can itself be computed as needed upstairs in src/, where wide dependencies are acceptable, and passed by value as a struct. a problem is getting that context into all the right places must disturb much code. but the alternative of pushing redundant copies of project tempo information into each clip whenever there is a change -- seems questionable too, increasing the problems of keeping project data consistent.",-1,0,0,0.8531534075737,0.7506536841392517,0.7425983548164368,0.0,accept,majority_agreement
1614234791,4853,"there is the possibility of passing the correct `projecttimesignature` as argument to clip copy constructors, the way it already is done with `sampleblockfactory`. for the sake of completeness i'll add this option to the table.",0,0,0,0.9883604049682616,0.9911872744560242,0.9947423934936525,0.0,accept,unanimous_agreement
1614253818,4853,"i am strongly opposed to this solution. it will make audacity fragile and hard to extend, it immediately makes a new non-ui feature in audacity not available to qt. the dependence of `waveclip` (or rather of any `track`) on tempo is explicitly specified in product design. it can be made implicit in code, indeed, but this sounds like an enormous source of errors more than anything else. previously, when the need for such context occurred, you pushed hard against it and i agreed with you. i don't honestly understand how is this case different.",-1,-1,-1,0.96653014421463,0.9376500248908995,0.9521443843841552,-1.0,accept,unanimous_agreement
1614303424,4853,"trying to understand your concern, please correct me if i'm wrong. you mean `waveclip` storing boundaries (`mtrimleft`, `msequenceoffset`, etc.) as beats rather than seconds, implying tempo must be specified for these to become convertible to seconds and sample indices. could you give a concrete example? so far the identified places where `src` would have to pass the project tempo information is when the transport tracks are constructed for playback and rendering, as well as where painting (waveform and spectrum) is needed. aren't these places where tempo will be available, whether now or in qt?",0,0,0,0.8947048783302307,0.9226014614105223,0.9501909613609314,0.0,accept,unanimous_agreement
1614323965,4853,"no. why? i'm talking about introducing some external generic context with ""all we need to calculate the boundaries, drawing, and everything"". like `trackpaneldrawingcontext`, which is so generic that it even has a `void*` ""user data"" field! does it remove the dependency on tempo? it does not. playback will be lifted from the `src` tree, and drawing won't. where should we fill this ""externalized"" context? what should we do when the context extends? and we anticipate that it will extend. otherwise, we could just pass ""tempo"" value. but we have an example with effects already where we cannot have beats display because initially, we pass only the sample rate instead of a more general context.",0,0,0,0.9436702132225036,0.9025012850761414,0.7921141982078552,0.0,accept,unanimous_agreement
1614343885,4853,"this objection is not strong. it may only mean that the place where the context is built is not yet extracted into a higher level library. the library extraction effort is paused to get all this other work done. i would like to avoid lib-wave-track depending on more things. what if i concede that? then audacityproject& is enough context. design specifies desired program behavior. it does not specify any such implementation choice. remind me what you refer to. anyway if context is not used, and a “push” of tempo info into each clip really must be done, then a roundabout way of doing it as in the closed pr will be needed. but i can’t approve this pr without seeing and understanding more of the whole, and whether the alternative really makes more sense.",0,0,0,0.5849233269691467,0.7136245965957642,0.9424199461936952,0.0,accept,unanimous_agreement
1614364953,4853,"i refer to #4414 it explicitly depends on `lib-project-rate-interface` already. i understand your concern about `lib-numeric-format`, but i can easily extract projecttimesignature into another library. i don't expect that it will take more than 30 minutes. nor do i. we are very aligned on this. behavior specifies an explicit dependency on tempo. it can be hidden by introducing a transfer object of some kind (call it context), but it does not remove this dependency. failing to correctly specify the tempo will result in an error.",0,0,0,0.8752008676528931,0.9667180776596068,0.9599888324737548,0.0,accept,unanimous_agreement
1614366498,4853,"oh, ok. my concern for now is limited to tempo context. i still am not 100% sure that this is also something you see a problem with. you mention real-time effects, but i'm not too concerned that these need project tempo information.",-1,0,0,0.7315965294837952,0.7439232468605042,0.7373239398002625,0.0,accept,majority_agreement
1614369512,4853,"they do, regardless of the time stretch. we cannot allow using bars/beats for the duration in generators because they cannot access the time signature and tempo. there are plans, currently on hold, to fix that.",0,0,0,0.9804752469062804,0.97474867105484,0.9917141795158386,0.0,accept,unanimous_agreement
1614397756,4853,do you refer to my attempts to define effectcontext? the recently reviewed raii object for temporary effect output tracks was spun off from that other effort to remove state from effectbase.,0,0,0,0.9862985014915466,0.992782473564148,0.9939199686050416,0.0,accept,unanimous_agreement
1614400307,4853,exactly!,0,1,0,0.9351991415023804,0.955691933631897,0.984325647354126,0.0,accept,majority_agreement
1614406714,4853,"maybe that will after all look like the least difficult thing, if more dependency from lib-wave-track is allowed. but consider what i asked elsewhere about maybe under specified behavior of other kinds of tracks.",0,0,0,0.9722985625267028,0.9743860960006714,0.9773381948471068,0.0,accept,unanimous_agreement
1614412228,4853,"are you two thinking of the same thing? i think matthieu refers to the playback, not the ui, and for that we have the stretching decorator encapsulating the time stretch calculations.",0,0,0,0.9842565655708312,0.983215630054474,0.9908175468444824,0.0,accept,unanimous_agreement
1614412771,4853,"absolutely, let's raise it at the meeting today!",1,0,0,0.7689087390899658,0.9518426060676576,0.6004554629325867,0.0,accept,majority_agreement
1614415043,4853,i will be climbing a mountain now that there’s finally some good weather here,1,0,1,0.5126700401306152,0.8347316384315491,0.505212664604187,1.0,accept,majority_agreement
1615194636,4853,"trying out the beat approach. it turns out to be a very healthy exercise, insofar as it reveals that some methods now make little sense ... time values cannot index to specific positions in tracks or clips anymore without a tempo specified. it'd be like asking when a given sample must be played out without knowing the speed of the cursor. for clips, we still can have methods like `get(samplecount start, size_t length)`, since the left-trimmed part is actually a fraction of the raw data. we ignore that fraction of the raw samples, and start from there, reading unstretched, raw data. tracks are the arrangement of clips onto a timeline with beat units. as such, they _must_ return stretched data : it wouldn't make sense for the ui to show clip a lasting 1s, and then having it produce 2s worth of samples. `get(samplecount start, size_t len, ...` and the likes should therefore be banned from non-stretching-capable tracks. so, `wavetrack::get` : gone. (or `assert(false)` for now if it ever gets used.) `stretchingsequence` can stretch, so that's fine. the other is `cachingplayablesequence` : i think this whole class should be gone. without its `get` method it serves little purpose. the spectrum-display code should query the raw data on the clips directly (and stretch the display), using the `getsampleview` method the way `cachingplayablesequence` has been doing to ensure caching works. and then come destructive effects... on the one end, there's a `widesamplesource`, calling `wavetrack::get`, and on the other, a `widesamplesink`, calling `wavetrack::set`, with a per-track effect instance in between. i've argued already that `get` should go. `set` should go for the same reasons. what i think makes most sense instead is to have those source and sink classes handle clips directly too, in their order of appearance on the timeline, read _all_ samples (including those trim-hidden), process them, and write them back. silence is ignored in between, leading to clip a possibly ringing into clip b, but ringing already happens in a not very convincing way ux-wise. i'm not finished yet with that experiment. let's hope there are no more hurdles for it to reveal. paul pointed out the label-track case today, which also are arrangement of objects on a timeline now with beat units, though...",1,0,0,0.5421748757362366,0.92678040266037,0.5721532702445984,0.0,accept,majority_agreement
1615338747,4853,"eliminating wavetrack::get and wavetrack::set, and making mixer aware of clip boundaries, are radical ideas that i dont like. i need persuading.",-1,-1,-1,0.9478987455368042,0.9619370698928832,0.9682111144065856,-1.0,accept,unanimous_agreement
1615589796,4853,"what are you assuming about conservation of clip structure when rendering or applying a destructive effect? what was specified by the design team? mix and render has never preserved it. existing destructive effects do not do it consistently. if that change is not your idea alone but the design teams, i am very unhappy to learn about it now. i am thinking of implications and i don’t like them. but wavetracksink is not even used for all destructive effects, only those that inherit pertrackeffect. whatever you think you will accomplish by these changes will not apply to all destructive effects. i oppose changes for rendering too. rendering for export should be oblivious to clips, but just take streams of samples to mix into an audio file, which doesn’t have clips, and that means keeping the simple abstraction of sources. mixing and rendering to a track should not behave differently. it should give you the as-if-exported sound but still in a track. clip boundaries are lost.",-1,-1,-1,0.9861254096031188,0.9817432165145874,0.9845214486122132,-1.0,accept,unanimous_agreement
1615593186,4853,"i have a growing suspicion that we have fundamentally erred in assuming all time stretch should apply upstream of stacked effects. it seems to be creating too many problems. doing tempo stretch downstream, for drawing and playback and rendering, might cut through some problems. the stretch determined by clip handles could be a separate upstream stretch. yes, drawing of clips may need to avoid wavetrack::get, fetching straight from clips and taking the handle drag into account. but now i think tempo should be a separate thing, also in drawing context, available in drawing routines of all track types. mixing for export should also apply the tempo stretch as the last processing stage. mixing and rendering would omit that, so that the rendered track as played is exactly what would result from exporting the tracks instead. but i don’t see how to get this property if tempo stretch is upstream instead. time stretch for tempo would need to be done in audioio. that’s a lot of work messing with what is fed into those ring buffers. maybe multiple levels of ring buffers are needed! i’ll think of something. (do we also want dynamic variation of tempo during playback? more headache.) the problems of get and set in pertrackeffect may be unimportant because the sources and sinks are really sequential, not random access. wavetrack::set needs to exist still to implement the pencil tool, or maybe a direct waveclip::set. you zoom in until you see samples (though now some stretch is applied in drawing them), and you edit them directly. where wavetrack::set is still used in destructive effects, leave it alone. i don’t want universal preservation of clip structure suddenly imposed as a new surprise requirement. tempo stretch seems to me to want to be a high level project wide thing that is applied in the right contexts, and can be kept out of waveclip or any other track subtype.",-1,0,0,0.8336825370788574,0.8068345785140991,0.5161070227622986,0.0,accept,majority_agreement
1615689796,4853,"behavior relating to clip preservation would change in neither mix-and-rendering, export nor destructive effects. `widesequencesource` and `widesequencesink` would now deal with clips directly (or `clipinterface`, or whichever few methods they need from clips) and not with a `widesamplesequence`. their implementation wouldn't need to know where clips are on the ui representation, but could just process them one after the other, ignoring silence in between. this process would change the _contents_ of the clips, but not affect their _boundaries_ on tracks.",0,0,0,0.9790121912956238,0.9904446005821228,0.9906516075134276,0.0,accept,unanimous_agreement
1615691102,4853,"in the case of destructive effects, no stretching comes in to play.",0,0,0,0.978654444217682,0.9545655846595764,0.9679272174835204,0.0,accept,unanimous_agreement
1615705262,4853,"mix-and-render changes the clip boundaries by design (effectively by creating a single clip, dropping attached effects etc), i don't think that it is wise to change this behavior. probably i don't understand you correctly. fwtiw playback, rendering, and export could be viewed as the same process, but with different sinks, and for mix&render the sink is just a track. i am a bit confused. i don't think that there are commutative properties in effect application. wouldn't it make a destructive application result to be very different in some cases?",-1,-1,-1,0.8974371552467346,0.9548832178115844,0.6248646378517151,-1.0,accept,unanimous_agreement
1615720170,4853,"by destructive effects i've been meaning selecting a track, choosing an effect and applying it. this preserves clip boundaries now, and it still would with my suggestion.",0,0,0,0.91420978307724,0.6635299921035767,0.9813575744628906,0.0,accept,unanimous_agreement
1615741826,4853,"say you have a clip and stretch it by a ratio of 2. now apply an effect. there are two possibilities: 1. render an un-stretched clip : apply the effect a it is now, on the raw data. the result is still a clip with stretch ratio metadata 2. 2. render a stretched clip : apply the effect and stretch (or the other way round). the result is a clip with stretch ratio metadata 1. i have been suggesting 1. it is more conservative : stretch a clip by 2, apply gain, unstretch : it's as though you had never stretched. also, the sources and sinks used wouldn't need to have time-stretchers injected. does that un-confuse you?",0,0,0,0.9411265254020692,0.9531612396240234,0.9647876024246216,0.0,accept,unanimous_agreement
1615762061,4853,"design team’s requirements or your ideas? i suspect a lot of surprising consequences are not well thought out, such as the overlapping of clips, and restructuring every destructive effect to work this way is a bad surprise implying a lot of work no one budgeted.",-1,-1,0,0.8163545727729797,0.8583978414535522,0.6639117002487183,-1.0,accept,majority_agreement
1615771981,4853,"i think we need to separate clip stretching from project tempo, and do one, only one, of them well in this release. i have a growing alarm about overreach. i think tempo is the more valued thing, but my efforts have all been to support clip stretching. i think downstream application of tempo stretch is the right thing for various reasons, but the alternative was not given proper early consideration.",-1,0,-1,0.8975268602371216,0.7573385834693909,0.7380197048187256,-1.0,accept,majority_agreement
1615773210,4853,"and doing it downstream means messing with the data communicated between threads in audioio, and that is the large problem i should be figuring out. (and fixing the outstanding latency problems with it.)",-1,0,0,0.7256001830101013,0.7784441709518433,0.7740440368652344,0.0,accept,majority_agreement
1615803665,4853,"i don't see how this could be design's idea. the behavior doesn't change, whether with stretched clips or not.",0,0,0,0.767661452293396,0.5952261686325073,0.7549601793289185,0.0,accept,unanimous_agreement
1615842180,4853,"so it’s not a requirement, it’s your own idea, but you are incorrect that separately applied effects on each clip would give equivalent results for all effects. what does reverb do it you select a clip and some empty space after it?",0,0,0,0.972238838672638,0.6102004051208496,0.9799631237983704,0.0,accept,unanimous_agreement
1615854396,4853,this: ![a link],-1,0,0,0.6034412384033203,0.9772622585296632,0.9831296801567078,0.0,accept,majority_agreement
1615861652,4853,"... but that with delay: ![a link] that's new to me. i'm not too concerned that the source now has to know how much silence there is between each clip, but it also makes me realize that the parameters of timing-based effects (such as this one, a delay) must account for the stretch ratio. that'd need to be done on each timing-related effect one by one, would only (?) be a parameter change, but it may have other consequences. the alternative, indeed, is to do have the source apply time stretching - not the sink! or the effect's timing is messed up just as much. couldn't that work with a `stretchingsequence` ?",-1,-1,-1,0.8099172115325928,0.9009062051773072,0.7549760341644287,-1.0,accept,unanimous_agreement
1615865653,4853,"try it again, with a silent clip touching the other clip on the right.",0,0,0,0.9823135733604432,0.9415943026542664,0.987966239452362,0.0,accept,unanimous_agreement
1615867694,4853,"but i don’t like the ideas i’m hearing. im increasingly thinking the entire project needs a rethink. my refactorings for wide wave clips and tracks are not wasted work, and the new caching was not either, but i have doubts now whether the stretching decorator is right. downstream application of time stretch seems better to me. why wasn’t it considered? maybe because doing it upstream was easier to figure out for a convincing prototype. doing it down may need other less obvious work but the alternative should be considered.",-1,-1,-1,0.9744570851325988,0.8338181972503662,0.9313837885856628,-1.0,accept,unanimous_agreement
1615880783,4853,"the reverb of a leaks into b. so would it with the clip-by-clip approach i propose, as well as with a `stretchingsequence` used by the source.",0,0,0,0.987070381641388,0.9883334636688232,0.9918221831321716,0.0,accept,unanimous_agreement
1615881093,4853,"i'm not sure that a follow the terminology, but i think that the stretching should happen before any other effect. probably i'm wrong, can you please help with this?",-1,0,0,0.7673187851905823,0.5909402966499329,0.6510887145996094,0.0,accept,majority_agreement
1615883998,4853,"i'd say so too. timing-related effects would need to anticipate stretching to produce the wanted result. take slap-back echo, for example. apply it first, and stretch after, and you've stretched the slap-back time. or the effect would have to compensate for stretching upstream, which sounds ugly.",-1,-1,-1,0.9690810441970824,0.8895707130432129,0.9421125650405884,-1.0,accept,unanimous_agreement
1615885540,4853,you were one step ahead of me. later in this conversation i was writing sounds like a rule of thumb.,0,0,0,0.8038308024406433,0.8842855095863342,0.9387707114219666,0.0,accept,unanimous_agreement
1615885627,4853,"i can't imagine applying time stretching after effects. as and say, it seems sensible for it to be first in the chain.",0,0,0,0.9380537867546082,0.9512231945991516,0.963774800300598,0.0,accept,unanimous_agreement
1615887337,4853,"to be complete, possible would also be to time-stretch downstream of `wavetrack`, with a time-stretcher which changes its ratio on the fly. the effects would still come after, and we wouldn't have had the joint-stereo problem. i still feel better on a clip-based stretching instance, though, and have the guarantee that timing at the start of a clip doesn't depend on the stretcher's output until then. -licameli this was the main reason driving me to suggest this approach from the start.",0,0,0,0.5481088757514954,0.559424102306366,0.9588472843170166,0.0,accept,unanimous_agreement
1615909162,4853,"one argument for applying tempo stretch last: if you export, time stretch is applied in the resulting audio file. if you mix and render, you should get a track that plays back exactly as the exported audio. that means: we should precompute everything except the tempo stretch, because playback will apply it. this may not be possible if the stretch applies first in export.",0,0,0,0.9853531718254088,0.9915286302566528,0.9887802600860596,0.0,accept,unanimous_agreement
1615915006,4853,then i do not understand the proposal.,-1,0,0,0.7961938381195068,0.6761142015457153,0.730843722820282,0.0,accept,majority_agreement
1615917673,4853,is it what happens now? then i would call it bug and fix it.,0,0,0,0.7379478812217712,0.9273868203163148,0.9713492393493652,0.0,accept,unanimous_agreement
1615923336,4853,"i mean i assume it would happen and be a feature. whatever you play in audacity should be what goes into the export. we do that for the stacked effects, and would do it too for stretch. now honestly let me counter argue myself: if tempo stretch applies before other stacked effects, then a solution is that mix-and-render also applies the inverse of project tempo stretch as the last stage of transformation before re-storing the samples. then playback inserts tempo stretching upstream, which cancels this.",0,0,0,0.9282153844833374,0.909869372844696,0.9835630059242249,0.0,accept,unanimous_agreement
1615926710,4853,"but the counter counter is this: are we really sure that applying stretch by ratio r, then again by 1/r, is really an identity transformation in this implementation?",0,0,0,0.981842279434204,0.9847844839096068,0.9918614625930786,0.0,accept,unanimous_agreement
1615928055,4853,"i'm not sure i follow. mix-and-render, similar to playback, similar to export, applies time stretch first. however the resulting track (and it's single clip) is not time stretched. why do we need to do the reverse transform? yes, it will become very complicated when we allow to set the tempo curve, but right now this is not the case.",0,-1,0,0.8147322535514832,0.5350682735443115,0.7792239785194397,0.0,accept,majority_agreement
1615937957,4853,"isn’t the project tempo stretch applied to all tracks? then if rendered tracks, being in the same project, have had the tempo stretched baked into the data, the playback will insert the tempo stretch again unless somehow the rendered track cancels it.",0,0,0,0.9873982667922974,0.9937866926193236,0.9901469349861144,0.0,accept,unanimous_agreement
1615942630,4853,on the other other hand... a solution can be that every clip stores what the project tempo was at the time it was created. the stretch ratio depends on that and the current project tempo. or was that the idea all along? i was foolish then.,-1,-1,-1,0.7779534459114075,0.9709814786911012,0.7892879843711853,-1.0,accept,unanimous_agreement
1615949531,4853,"whatever we do decide, stretching before or after effects — i want to know that designers considered the alternatives and really have a strong preference, or are decidedly neutral about it and will leave it to development to choose an implementation. it seems it is not so: that martin is only now answering the question, and matthieu did not consider alternatives or is acting on assumptions about which is better, that i’m not persuaded of. if design is neutral, then i dislike matthieu’s proposals as introducing unnecessary complexities we might avoid. if design is not neutral, and at least some of these complexities are unavoidable, very well, we must accept them and make things work.",-1,-1,-1,0.90605628490448,0.6557844281196594,0.6042889356613159,-1.0,accept,unanimous_agreement
1615965992,4853,"i think martin has strongly asserted that time stretching should be applied first. i don't think that it makes sense to do it other way around. i feel that this oversight is similar to one with effect settings window modality. it was assumed to be obvious so it never was explicitly stated. for sample tracks, the amount of stretch is a property of a clip. within a track clips can have different stretching coefficients.",0,0,0,0.9500438570976256,0.9779706597328186,0.9540042281150818,0.0,accept,unanimous_agreement
1615975218,4853,"maybe it’s obvious to others. but i’d like martin to speak for himself. i may not understand the use cases. what i do know is that if project tempo can be applied after all else, then it can cut through a lot of implementation difficulty. (ignore what i said about render and export: i now think that can work with either choice.) this is not the same problem as stretching each clip by a different adjusted ratio. and i want to ask again, whether we should commit to doing only one of these in this release — either tempo adjustment (which was the purpose stated in this pr title) or clip adjustment (which is not) — in case we can’t solve all the difficulties of both on time.",0,0,0,0.7334945797920227,0.808972179889679,0.7788314819335938,0.0,accept,unanimous_agreement
1615977581,4853,"to avoid the risk of committing to a course of action without fully agreeing (because i, for one might miss something), i'd suggest we have a little chat early next week. when talking about real-time effects, it's not very valuable to apply ts at the end of the effects chain. this is a production thing. if someone here is discussing destructive effects, then i worry there's some use case (or technical weirdness in audacity) i've failed to consider.",-1,0,-1,0.7814422249794006,0.5122070908546448,0.7074156999588013,-1.0,accept,majority_agreement
1616015844,4853,"so, destructive effects were not a topic in those design meetings yet that i skipped? i want so say: identify known problems with timing dependent destructive effects, to fix in next release. there is worrying scope creep getting discussed here, here dissipating our limited efforts. get all the other fundamentals done. leave destructives alone to behave however they will for this release.",0,0,0,0.6849576830863953,0.9082033038139344,0.5761789083480835,0.0,accept,unanimous_agreement
1616034162,4853,let's chat. the last thing i want to do is accidentally give the impression that some large chunk of work now needs to be done.,-1,-1,0,0.6646199226379395,0.5297040343284607,0.8665566444396973,-1.0,accept,majority_agreement
1616051900,4853,"time-stretching a clip by a factor of 2 and then again by a factor of 2 yields a result different from time-stretching that clip once by a factor of 4. likewise, -licameli, since you asked: stretching by 2 and then by 0.5 doesn't restore the original. quality suffers from each pass. our time-stretcher may be excellent, it's not perfect : there still is some amount of widening and smearing. therefore, the approach we're undertaking is the best from a quality point of view. each clip's stretch ratio is the product of its individual stretch ratio (modifiable with the handles) and of the ratio `originaltempo / projecttempo`, allowing only just one time-stretching pass. -licameli this pr is only just about bringing the project tempo information to the clips. their own, ""handle"" stretch ratio is easy to get - that's the ticket we planned for vitaly.",0,0,0,0.491270899772644,0.8726410865783691,0.8851748108863831,0.0,accept,unanimous_agreement
1616052669,4853,what is `originaltempo`? -licameli you guessed right : it's the project tempo when the clip is dropped. it is on the roadmap (at least informally) to improve this by reading tempo metadata or detecting is by analyzing the signal.,0,0,0,0.9869357943534852,0.9884655475616456,0.9921849370002748,0.0,accept,unanimous_agreement
1616053994,4853,"yes, i didn’t raise the question of repeated stretching causing degraded quality but i thought of it. stretching for project tempo and for handles should be adjacent in the stack of processing, whether upstream or down, and combined into one. i was thinking about how to implement it all downstream, very differently from the stretching decorator. but if that really is a non-starter from a design standpoint , okay forget it. reopen this pull request, under a new number so we can restart the conversation thread. put more in it if you can — enough that i see what new data a waveclip really stores and updates.",0,0,0,0.8632187843322754,0.895466148853302,0.963575839996338,0.0,accept,unanimous_agreement
1616599710,4853,"about the problems of destructive effects: i emphasize again, do not attempt a solution as you outlined it. i think too many individual built in effects will need too much rewriting. it will distract from more fundamental problems of this feature that are still not moving through review and test. it will likely conflict with many of the other rewrites i’m trying to do to support joint stereo. but i did have an idea for an alternative solution that i want to explain...",-1,-1,0,0.8228157162666321,0.7773412466049194,0.8060097098350525,-1.0,accept,majority_agreement
1616600761,4853,"whenever an effect or other editing operation must paste into a wavetrack, map the given time to the correct clip. then first transform that clip with time stretch, and reset its stored stretch information to unit stretch ratio. then proceed as in old code. i think this way would be more local in code modifications of class wavetrack, will not disturb its interface, and will leave much other code undisturbed. do similar with set() except for the pencil tool.",0,0,0,0.9819366335868835,0.978341579437256,0.9882110953330994,0.0,accept,unanimous_agreement
1002200367,2224,"hello , are you planning to continue work on this?",0,0,0,0.9770836234092712,0.9432716369628906,0.992021143436432,0.0,accept,unanimous_agreement
1002220837,2224,"hello, sorry, i know that i am late( i had no idea about audio channels, samples, sample rate etc. so had to study it first), but i am still working on it.. the `importwavpack.cpp` file is almost ready, except the `importwavpackfilehandle::import` function which is partly complete. for example i pushed all the `channels` to `outtracks`. but it's taking time because ~i am not sure what to do with the `samplesread` decoded with `wavpackunpacksamples` as in the `importflac.cpp` file, i saw that channels were directly pushed to `outtracks`, but in `importogg.cpp` file, the read samples were appended to channels. also in `import.cpp` and `projectfilemanager.cpp`(i forgot the exact name but it was something similar), it looked like only those `tracks` were used. basically, i am confused that if only channels created with `wavetrackfactory` and `samplerate` are enough or i need to somehow append the decoded samples to the channels.~ (edit : sorry i misunderstood it, now seems to be clear) hopefully i will be able complete in 1 or 2 days. thanks...",-1,-1,-1,0.9856529235839844,0.9884153604507446,0.967085599899292,-1.0,accept,unanimous_agreement
1099136838,2224,"hi sorry for the delay! can you please rebase onto the latest master, squash you changes into a single commit and force push?",-1,-1,-1,0.9898651242256165,0.9929216504096984,0.9953274726867676,-1.0,accept,unanimous_agreement
1099148552,2224,"i would like to see a rebase too, but not necessarily a squash to one commit, if the intermediate steps are really useful for review of the new feature in sensible incremental steps, and not just corrections of mistakes.",0,0,0,0.9743481874465942,0.953525722026825,0.9754636287689208,0.0,accept,unanimous_agreement
1099384618,2224,"no issues! :) yeah, actually, i added new commits after the previous commit is bug-free ( i mean, after resolving the bugs i encountered related to that particular feature/implementation, so may not be ""bug-free"" ). so, each commit mostly represents a new feature/file. for example, the first commit is about integrating wavpack and creating a file containing all the necessary class details, the second commit implements all the `importplugin` and `importfilehandle` class methods, and the third commit is to read tags, etc.",1,1,1,0.9799180626869202,0.9943687319755554,0.9953559637069702,1.0,accept,unanimous_agreement
1157452320,2224,"hi ! sorry for this long delay. i have crafted a commit, that should resolve your ci issues [a link] can you please cherry pick it in your branch and rebase everything onto the latest master?",-1,-1,-1,0.9903419017791748,0.9931432008743286,0.993850827217102,-1.0,accept,unanimous_agreement
1157955712,2224,all checks passed! thank you!,1,1,1,0.9856589436531068,0.994083821773529,0.9944672584533693,1.0,accept,unanimous_agreement
1160445181,2224,"i have replaced `fileio` with `wxfile` as seeking to the first block of the file was required. i have tested the wavpack files generated from audacity with vlc media player. now, it seems to work correctly as it is now allowing seeking and the audio length is also shown. also, i have addressed the changes you asked me to make. the latest commit is now ready for another review.",0,0,0,0.965777575969696,0.6772799491882324,0.8509835004806519,0.0,accept,unanimous_agreement
1161636658,2224,"ok then, i will commit and push the remaining exportwavpack changes along with importwavpack changes.",0,0,0,0.9877970814704896,0.9888006448745728,0.9943728446960448,0.0,accept,unanimous_agreement
1165629234,2224,can you please add subhradeep chakraborty to the aboutdialog?,0,0,0,0.9842700958251952,0.9939246773719788,0.9953709244728088,0.0,accept,unanimous_agreement
1568304039,4746,"some questions : * `mixersource` already used to be a collection of tracks, one per channel, * iteration over the channels used to be done in `::acquire`, now it is one stack level below, in `mixsamerate` or `mixvariablerates`, * in the future, `sampleframesequence` will provide multi-channel audio data, and the channel iteration in `mixersource` can be removed.",0,0,0,0.9860481023788452,0.9946182370185852,0.9900963306427002,0.0,accept,unanimous_agreement
1582392493,4746,"names changed since you wrote this, otherwise its a correct summary.",0,0,0,0.9842580556869508,0.9864040613174438,0.9892107248306274,0.0,accept,unanimous_agreement
1585873620,4746,"in anticipation of the merge of #4742 soon, i have rebased this branch onto that one, and made only the changes needed for conflict resolution. the commit ""segregate widesamplesequence from the sampletrack interface..."" is still the first one proper to this new branch, and only that one and later ones should be reviewed.",0,0,0,0.9784139394760132,0.9924671053886414,0.9931921362876892,0.0,accept,unanimous_agreement
1586260170,4746,"force pushed again, with some new and fixup commits inserted to address your comments.",0,0,0,0.984825074672699,0.9891954660415648,0.991001546382904,0.0,accept,unanimous_agreement
1587378053,4746,the latest force-push only squashes the fixup commits and edits some commit comments.,0,0,0,0.9850910902023317,0.989014446735382,0.9918848276138306,0.0,accept,unanimous_agreement
1588685537,4746,"pushed back to ""in progress"" because export is broken : ![a link] the mono track was exported to stereo, and a 4-second chunk is clipped to -1.",-1,0,-1,0.5499134659767151,0.5364235639572144,0.9928396940231324,-1.0,accept,majority_agreement
1590073259,4746,"here is the problem i see during mix-and-render: ![a link] the lower track is the rendering of the upper track. i was debugging this because i have a branch based on this one (for the stretching decorator) and thought i was doing a mistake, but by reverting i could verify that the problem came from elsewhere. i suspect the `sampletrackcache` to be passing incorrect pointers to the wavetrack. i also verified that it is not on current master (0ec7ab2908f2acb5759323e1f5b5f345698e3d1b)",-1,0,0,0.9647594094276428,0.9168606996536256,0.7756450772285461,0.0,accept,majority_agreement
1590871576,4746,[a link] was it this commit that you built? describe exact steps to reproduce. probably the bug is in sampletrackcacke. i confirmed that i could reproduce the bug in export and that it was fixed.,0,0,0,0.9883643388748168,0.9866502285003662,0.9924944639205932,0.0,accept,unanimous_agreement
1591155393,4746,"rebased once more after #4792 was merged, so now only 23 commits",0,0,0,0.9867430925369264,0.9887612462043762,0.9921751618385316,0.0,accept,unanimous_agreement
1591354770,4746,a second fixup corrects the error in rendering,0,0,0,0.9863570928573608,0.9662014245986938,0.9948723912239076,0.0,accept,unanimous_agreement
1591525537,4746,"rebased onto more recent master, and squashed",0,0,0,0.9817481637001038,0.9809951186180116,0.9899402260780334,0.0,accept,unanimous_agreement
1594452969,4746,"moving back to in progress. when mixing-and-rendering a stereo track with any built-in or third-party effect in the sidebar, audacity freezes (macos) or crashes (windows). no issues with exporting. -licameli",0,0,0,0.941155970096588,0.9837815761566162,0.9834476709365844,0.0,accept,unanimous_agreement
1594482974,4746,i observe that mixing and rendering crashes even with no effect stack. was that bug introduced by this branch or by an earlier merged pr?,0,0,0,0.9434902667999268,0.9524301886558532,0.9819208979606628,0.0,accept,unanimous_agreement
1594489308,4746,"if you refer to the wide wave clip pr #4742 – no, it shows no issues with mixing-and-rendering both with and without effect stack. so it seems that the problem was introduced by this branch.",0,0,0,0.9837011694908142,0.9915664792060852,0.9902616143226624,0.0,accept,unanimous_agreement
1594490642,4746,"i observe not only a crash, but the recovery file is also somehow corrupted to cause a crash if you restart and try to recover.",0,0,0,0.9641214609146118,0.9340814352035522,0.9399174451828004,0.0,accept,unanimous_agreement
1594498819,4746,"i don't see the crash when trying to recover, but weirdly enough in addition to the stereo track i also have a mono track in the recovered project which isn't supposed to be there.",-1,-1,-1,0.6971467733383179,0.9268429279327391,0.9311881065368652,-1.0,accept,unanimous_agreement
1594804951,4746,"rebased onto recent master, with a new fixup that removes a mistaken assertion from an earlier pr, which was violated when you mix stereo to mono. i am still investigating the bug in rendering.",0,0,0,0.9336318969726562,0.9267313480377196,0.98796147108078,0.0,accept,unanimous_agreement
1601138896,4746,"tested on macos 13.0, windows 11 vm and ubuntu 22.04 vm. what was tested: - all bullet points on the list of things to be checked - cases with mismatched left and right channel lengths, such as mixing-and-rendering, export, playback - made sure that all previously found bugs introduced by this pr were fixed",0,0,0,0.9779991507530212,0.9937015771865844,0.9792746901512146,0.0,accept,unanimous_agreement
1971587834,6068,you need a windows build fix,0,0,0,0.9876105785369872,0.9790034890174866,0.9904395341873168,0.0,accept,unanimous_agreement
1971624404,6068,"i have a segmentation fault on the staffpadtimeandpitch unit-test, which i can't reproduce locally :/",-1,-1,-1,0.9252970814704896,0.9908376336097716,0.9950065612792968,-1.0,accept,unanimous_agreement
1972839913,6068,found what the problem was - memory alignment. pushed a fix commit with an explanation. thanks unit tests :folded_hands:,1,1,1,0.9726515412330629,0.9437187314033508,0.9941942095756532,1.0,accept,unanimous_agreement
1991209076,6068,"thanks a lot for your comments :red_heart: i just pushed commits to address them, feel free to re-review.",1,1,1,0.9863857626914978,0.9926168322563172,0.9953435063362122,1.0,accept,unanimous_agreement
1991218459,6068,just force-pushed after rebase without other changes.,0,0,0,0.9801464676856996,0.9827924370765686,0.975247859954834,0.0,accept,unanimous_agreement
1991221534,6068,: has reviewed the dsp part of this pr. would you be so kind to review the rest?,0,0,0,0.9188631772994996,0.9913455247879028,0.9166605472564696,0.0,accept,unanimous_agreement
1992294160,6068,"not strictly speaking: `formantshifter` only sees the abstract api. i stopped my experimentational wandering when i reached this solution, despite it mixing up both logging and configuration responsibilities. i admit that it's not perfect, but i thought it could be tolerated and further clean-up work be spared. i don't really mind addressing this, if you still see it as a must. i provided an answer to your question around optimization earlier in this conversation.",0,0,0,0.7873944640159607,0.6119546890258789,0.605251133441925,0.0,accept,unanimous_agreement
1999394523,6068,"please note, that tests have failed,",0,0,0,0.9638189673423768,0.9541179537773132,0.9874087572097778,0.0,accept,unanimous_agreement
2003612120,6068,"the discovered bugs are macos only: 1. while playing, an attempt to change the clip's pitch by entering any non-zero semitones/cents value causes audacity to freeze; 2. while playing, if semitones/cents value is other than zero and formant preservation is on, an attempt to disable formant preservation causes a freeze as well; 3. while playing, if the pitch and speed dialog is opened, an attempt to close the dialog causes a freeze.",0,0,0,0.9458803534507751,0.9749719500541688,0.9895620942115784,0.0,accept,unanimous_agreement
2004509624,6068,"thank you, i didn't get thread safety right and for some reason it still worked on windows. the last commit addresses this.",1,1,1,0.6751132607460022,0.7847761511802673,0.7505835294723511,1.0,accept,unanimous_agreement
1607879419,4668,"rebase on recent master, no other changes",0,0,0,0.9865179657936096,0.974230170249939,0.9929745197296144,0.0,accept,unanimous_agreement
1623595387,4668,"all issues from the [a link] were addressed i added constraints to ffmpeg and mp2 exporters, no other encoder seem to specify them if i didn't miss anything: options lineup, multiple metadata editing, new timer record dialog export",0,0,0,0.9863437414169312,0.9832792282104492,0.9939291477203368,0.0,accept,unanimous_agreement
1623608700,4668,"have you had a look at: [a link] ? one possible solution to issue 1, would be to make the current selection radio button the last of the three buttons, though i guess that probably isn't the most logical order. (this is assuming the the current selection radio button is the only one that may be disabled.) issue 3 has been fixed.",0,0,0,0.98441743850708,0.9907091856002808,0.9677401781082152,0.0,accept,unanimous_agreement
1624200531,4668,"not yet, will try to fix issues you mentioned, thanks! could you please also take a look at issue 6?",1,1,1,0.969064474105835,0.9771395325660706,0.9825321435928344,1.0,accept,unanimous_agreement
1634351976,4668,"#4819 fixed regarding [a link] - i removed ""force export to mono"" as it now duplicates ""mono"" checkbox. keys are assigned to major controls",0,0,0,0.9880500435829164,0.9928076267242432,0.9896933436393738,0.0,accept,unanimous_agreement
1634431330,4668,two of the access keys are difficult to see: 1. folder: using d would be better than l. 2. custom mapping: using a would be better than g. in addition i'm still very concerned about the keyboard navigation of the radio buttons for the export range - see: [a link] see also: [a link],-1,0,-1,0.8246160745620728,0.8977072238922119,0.8486911058425903,-1.0,accept,majority_agreement
1634618281,4668,testing on w10 with vitaly's latest branch build: audacity-win-3.4.0-alpha-20230713+e7f58dd-x64 #4819 is properly fixed: a) the new dialog appears b) there is no crash when accessing the export dialog(s) for the automated export c) the timer record works and exports properly,0,0,0,0.9176875948905944,0.9847854375839232,0.9185272455215454,0.0,accept,unanimous_agreement
1635737221,4668,see also [a link] - is happy with changing the order of the export range radio buttons to get round this bug.,0,1,0,0.7055664658546448,0.6495543718338013,0.8944700956344604,0.0,accept,majority_agreement
1636742744,4668,". thanks for changing the order. noticed that the accessibility name of the multiple files radio button is still ""export split in parts"", and so needs changing to ""export multiple files"".",1,1,1,0.9589518904685974,0.883553147315979,0.9773709774017334,1.0,accept,unanimous_agreement
1636802897,4668,actually in 's latest branch build: audacity-win-3.4.0-alpha-20230713+e7f58dd-x64 it is already **multiple files** ![a link],0,0,0,0.937353789806366,0.978074312210083,0.9918102622032166,0.0,accept,unanimous_agreement
1637583026,4668,"by ""accessibility name"" of the radio button i was referring to the name of the radio button read by screen readers. sometimes it's helpful if this name is different from the visible name. in this case the text ""export range"" is not automatically read by screen readers, so it's helpful to add the word export to the accessibility name. just use narrator to see what's going on in this case (windows + ctrl + enter to start or stop).",0,0,0,0.9658191800117492,0.9831085801124572,0.9865065813064576,0.0,accept,unanimous_agreement
1637669282,4668,thanks! fixed,1,1,1,0.9678161144256592,0.99091774225235,0.990587592124939,1.0,accept,unanimous_agreement
1641990489,4668,". only just noticed that there are a couple of other accessibility names that need setting. when the format is set to custom ffmpeg export, there are two text controls: current format and current codec. these currently have empty accessible names. windowaccessible is automatically set as the accessible object for text controls in shuttlegui, so all that is needed is to set the accessible name for these text controls (like you did for sliders).",0,0,0,0.9777201414108276,0.9914154410362244,0.9529399275779724,0.0,accept,unanimous_agreement
1645462140,4668,"testing on w1- with 's latest branch build: audacity-win-3.4.0-alpha-20230713+e7f58dd-x64 using my clearly obvious wide-panned stereo track - tack 1 from sgt. pepper's lonely hearts club band. i looks, and sounds, as though the stereo output from mp3 export is **true stereo** . s0 it looks like we have lost the option for **joint stereo** that we da in the <p3 export dialog we had in earlier audacity versions: ![a link]",-1,-1,0,0.96382474899292,0.3705869913101196,0.5261881947517395,-1.0,accept,majority_agreement
1645474690,4668,in an earlier version of vita;'s new export we has a field for **channel mode** which has now disappeared in the later versions: ![a link],-1,0,0,0.9447030425071716,0.9918164610862732,0.9443188309669496,0.0,accept,majority_agreement
1645487984,4668,"it actually set to `joint_stereo` now, there is a discussion on that topic above. it seems like lame can switch between m/s and stereo when it's set to `joint_stereo` mode",0,0,0,0.6473795175552368,0.9920361638069152,0.7515963315963745,0.0,accept,unanimous_agreement
1645491166,4668,in which case i am **_very_** concerned at the loss of proper stereo where the two channels are encoded separately and independently. that is certainly the way i have always configured my many mp3 exports over the years.,-1,0,-1,0.7180169224739075,0.928548276424408,0.7447147369384766,-1.0,accept,majority_agreement
1645526314,4668,i've put up an explanation in #4940,0,0,0,0.985312044620514,0.98388010263443,0.9945130348205566,0.0,accept,unanimous_agreement
1645624498,4668,ack i've updated the draft manual page for this.,0,0,0,0.9856598377227784,0.960623562335968,0.9929929971694946,0.0,accept,unanimous_agreement
1645652380,4668,discussion transferred to #4940,0,0,0,0.9874247908592224,0.9913181066513062,0.9931502938270568,0.0,accept,unanimous_agreement
1645703888,4668,let's please continue this discussion in [a link] and leave this thread for the code reviewy bits,0,0,0,0.9862701296806335,0.9729962944984436,0.9913321733474731,0.0,accept,unanimous_agreement
1649308047,4668,few notes for testing: 1) exporting via macro and cloud upload use same export routines 2) transport->record->timer record uses simplified export audio dialog (it's not mentioned in figma),0,0,0,0.9802170991897584,0.9944456815719604,0.9845661520957948,0.0,accept,unanimous_agreement
1660792892,4668,new commit added that fixes #4959,0,0,0,0.9875137209892272,0.9922989010810852,0.9823970794677734,0.0,accept,unanimous_agreement
1660841379,4668,last commit approved.,0,0,0,0.9782164096832277,0.9897674918174744,0.9742996692657472,0.0,accept,unanimous_agreement
1551547514,4701,"windows builds are failing, don't know why, it compiles locally and there is no apparent error message. hopefully someone will recognize the error ?",-1,0,-1,0.6022314429283142,0.6361724734306335,0.7452477216720581,-1.0,accept,majority_agreement
1551858352,4701,- [x] test in stereo,0,0,0,0.9664435386657716,0.991413712501526,0.9919976592063904,0.0,accept,unanimous_agreement
1563480412,4701,"github says there is a conflicting file, but it's easily fixed.",0,0,0,0.9865497946739196,0.9594776034355164,0.9909622073173524,0.0,accept,unanimous_agreement
1563493479,4701,"the commits in this branch are not all buildable. i'm doing my own rebase onto master locally, and squashing the build fixes for myself, so each builds, then i will examine more closely.",0,0,0,0.8857358694076538,0.6548622846603394,0.986578106880188,0.0,accept,unanimous_agreement
1569830809,4701,i wonder why no jobs were run for the pr,0,0,-1,0.8452437520027161,0.933773159980774,0.7508286237716675,0.0,accept,majority_agreement
1569890511,4701,"i guess because of this, sent to me over email : ""[github] you've used 100% of included services for the saintmatthieu account""",0,0,0,0.9174879789352416,0.7864387631416321,0.970340609550476,0.0,accept,unanimous_agreement
1569919121,4701,"that is odd, i can see that your fork is public, and audacity itself is public. github has no limits for open-source projects.",-1,-1,-1,0.603308379650116,0.9594274163246156,0.8646584153175354,-1.0,accept,unanimous_agreement
1569958155,4701,"ah, i think i know. i made a private fork of something public that had jobs. maybe now it's disabling it for all my repos, public ones included. i don't need that private repo, will delete it and see what happens.",0,0,0,0.9196445941925048,0.5669392943382263,0.9345421195030212,0.0,accept,unanimous_agreement
1569968626,4701,just rebased and jobs are running now.,0,0,0,0.980678141117096,0.9824517369270324,0.9930891394615172,0.0,accept,unanimous_agreement
1571722796,4701,just rebased my time-stretching poc branch onto the head of this one. still integrates and works fine. just awaiting your green light now.,0,1,0,0.5116068720817566,0.8027151226997375,0.5666085481643677,0.0,accept,majority_agreement
1681910850,5042,"this morning i came to remember maybe my very first experience of audacity. it was at the national university of ireland, maynooth, in the computer music introductory module. i remember the lecturer saying ""and you can even draw the samples with the pencil"". i must have been impressed to still remember it - it was in 2005-2006. great educational tool. -licameli",1,1,1,0.9821414947509766,0.9927569031715392,0.990755259990692,1.0,accept,unanimous_agreement
1696572603,5042,"would you believe i hadn’t heard of, less used it, before december 2012?",0,0,0,0.9416127800941468,0.9783645272254944,0.8979758024215698,0.0,accept,unanimous_agreement
1702884882,5042,"-licameli just pushed [a link], addressing all your comments.",0,0,0,0.9858860969543456,0.9756699204444884,0.9918171763420104,0.0,accept,unanimous_agreement
1719194855,5042,`getsamples` (not a new function) should also comment that `start` is relative to play start `getfloatattime` should comment that `t` is relative to play start,0,0,0,0.9872322082519532,0.994474709033966,0.9944708347320556,0.0,accept,unanimous_agreement
1719310058,5042,done with this round of review! i await a rebase onto #5138 and conflict resolution.,0,1,1,0.8253796100616455,0.8798741102218628,0.932761549949646,1.0,accept,majority_agreement
1723343594,5042,-licameli finished addressing your comments.,0,0,0,0.9793297648429872,0.9459576606750488,0.986153244972229,0.0,accept,unanimous_agreement
1725340986,5042,finished this review round,0,0,0,0.9558150768280028,0.981736421585083,0.9848568439483644,0.0,accept,unanimous_agreement
1727266419,5042,"i was wrong about the first use: if `t` is past the end boundary of the clip, `effectiveend` can indeed be greater than `effectivestart`. i couldn't reproduce this situation by trying even drag-drawing across several minuscule clips, but changing the value of `t` in the debugger showed it was possible. thank you. will push a safety check.",1,1,1,0.8872798085212708,0.9551096558570862,0.977327048778534,1.0,accept,unanimous_agreement
1727268225,5042,unit-testing would have been useful to find out i was wrong earlier.,0,0,0,0.9763715863227844,0.9882233738899232,0.93843811750412,0.0,accept,unanimous_agreement
1727563896,5042,"i see and approve the latest three commits. correct spelling of ""rectangle"" in the last commit comment. but there are conflicts with master.",0,0,0,0.98078453540802,0.9826177954673768,0.989935576915741,0.0,accept,unanimous_agreement
1727593553,5042,thanks for the speedy review.,1,1,1,0.8285521864891052,0.7903671860694885,0.5861467123031616,1.0,accept,unanimous_agreement
1731573096,5042,"tested. found issues: #5231 also, i've discovered that when using the pencil tool on adjacent clips, then stretching them and mixing and rendering the track, it produces a waveform that looks different from the pre-mixed-and-rendered state: [a link] [a link] [a link] in some cases, it looks like it simply gets inverted, while the other examples don't quite look like it. despite this mismatch doesn't look particularly good to me, this might be insignificant and i reckon should not delay the merge.",0,0,0,0.8645772337913513,0.9588122367858888,0.9168980121612548,0.0,accept,unanimous_agreement
1731601545,5042,"i agree that the rendering doesn't look great. there are two upcoming fixes that could improve this: a more accurate delay estimation #5206, and solving the indeterministic behaviour you found #5210. but i'm confident that this limitation isn't related to drawing. drawing modifies the samples as expected. only the rendering of the result isn't necessarily as expected :d",1,1,1,0.9033071398735046,0.927532970905304,0.9907262325286864,1.0,accept,unanimous_agreement
852656377,830,we're still interested in this proposal. please see more discussion at the audacity forum.,0,0,0,0.9367651343345642,0.9418714046478271,0.865498960018158,0.0,accept,unanimous_agreement
853029046,830,"-licameli rebased commit at recent upstream master branch. tbh, i'm not fully satisfied with cla. but i belive that commercial profit and support can boost imporvement on oss. so i signed at the cla anyway. i just wish audacity would remain free, open and be **much greater** than now. :grinning_face:",-1,0,1,0.646937370300293,0.8464886546134949,0.9513887763023376,,review,no_majority_disagreement
853302878,830,"as for that, i share those hopes. i not only hope so, i expect so, from what i know. though that is on the understanding that code of the audacity audio editor ""remaining free"" is consistent with the possibility of a dual sub-licensing of parts of it that the cla leaves open.",0,0,1,0.8301734328269958,0.7897623777389526,0.6906654238700867,0.0,accept,majority_agreement
856336759,830,-licameli ping,0,0,0,0.9635222554206848,0.9637470841407776,0.9711549282073976,0.0,accept,unanimous_agreement
856609924,830,i have not forgotten this! i will write more today.,1,0,1,0.8930509686470032,0.5669021606445312,0.9852238893508912,1.0,accept,majority_agreement
859609792,830,i just tested on w10 with dofuuz's latest build and i see that we now have the changed color descriptions in spectrogram preferences as we discussed. thanks for sorting that. ![a link],1,1,1,0.99001944065094,0.9831660985946656,0.9958791732788086,1.0,accept,unanimous_agreement
859610327,830,i tested with pure spectrogram and with multi-view dor the new and alternative colorways,0,0,0,0.981391429901123,0.9822576642036438,0.9907367825508118,0.0,accept,unanimous_agreement
859611926,830,"thanks, peter. did you also observe the changes in set track visuals? a choice replaces what was only a checkbox for grayscale.",1,1,1,0.7710012197494507,0.7226184010505676,0.9411147236824036,1.0,accept,unanimous_agreement
859617200,830,"paul, i assume you mean from the tcp - in which case yes, i have been playing with that too and all looks fine.",0,0,0,0.8651557564735413,0.9080596566200256,0.981451690196991,0.0,accept,unanimous_agreement
859620339,830,"no, i refer to one of the macro commands. see #969",0,0,0,0.9880965948104858,0.990978479385376,0.9936153888702391,0.0,accept,unanimous_agreement
861164424,830,"i'm pleased with these changes to address my points. each commit builds. i am satisfied too now with changes in acolor.cpp. (i might suggest that the names in acolorresources.h could be made static, to have no linkage and spare a little space in symbol tables.) but i do not want the change in experimental.h. it leaves no visual indication of sync lock in a spectrogram. if you think this change is very important, than i think some alternative solution should be sought. the sync lock tiles might be painted more than once (as they are in waveform view). they might be repainted last, with transparency. perhaps you fill follow up this implementation suggestion. so to summarize: please rebase onto most master, and omit the change to experimental.cmake. then i will approve it and merge it!",1,1,1,0.925377607345581,0.9794121384620668,0.9553433060646056,1.0,accept,unanimous_agreement
861173140,830,"removing transparency from spectrogram is important fix! without the change, new colormap gonna lose its power. i'll find if there are easy and nice fix for this situation...",1,1,1,0.935982584953308,0.7406076192855835,0.9366117119789124,1.0,accept,unanimous_agreement
861203172,830,"but even in current audacity there is very poor visual indication of sync-lock in a spectrogram ... the example image below was made with 3.0.2 ![a link] this image flatters the real-life situation a) it is (at least) double real-life size - much harder to see in audacity on-screen b) i deliberately greatly reduced the amplitude of the left half of the selction, note that in the right half of the selection in the spectrogarm track the clocks are barely visible at all. i thought we had a bugzilla entry for this, but i can't find it. maybe we should be logging one ...",0,-1,0,0.5134056210517883,0.6587536931037903,0.7944881319999695,0.0,accept,majority_agreement
861274917,830,i logged this as p3 bug #2806 [a link] spectrogram view has poor/inadequate visual cues to show sync-lock selection and remember that this is not a result of the new spectrogram colorway - it's always been like this.,0,0,0,0.7615602016448975,0.6710918545722961,0.9742039442062378,0.0,accept,unanimous_agreement
861446617,830,"as your branch is now, there is no indication at all of sync lock, rather than the existing one, poor though that might be. why do you think removing transparency of the spectrogram is very important? in my own trials building your branch, i did not think it looked bad either with or without it. would you consider merging the branch with transparency, but opening an issue to correct the problems? i see your example in ""obstacles."" [a link]",0,0,0,0.8674754500389099,0.4974520802497864,0.9517683386802672,0.0,accept,unanimous_agreement
861456344,830,"i don't think that losing the sync-lock ""clocks"" in spectrogram view is a problem. even with ""classic"" spectrogram view they are barely visible with real world audio, and imo they are little more than visual clutter when they are. waveform view, or multi-view are far better suited to temporal editing. i'd rather have a clearer view of the spectrogram in track spectrogram view than overlaid information that is irrelevant to ""spectral"" editing.",0,0,0,0.8021647334098816,0.9436292052268982,0.8960081934928894,0.0,accept,unanimous_agreement
861466558,830,![a link] ↑ new color with `spectrogram_overlay` transparency. clock background on 4th track is almost not visible. transparency makes the visual totally different from what i intended(accurate and pretty). background becomes brighter than some of foreground. there are some grain around black which should not appear. it means loss of accuracy. overall color becomes desaturated. not pretty. bringing clock overlay on top of spectrogram [a link] might be the fix. but basically i have same opinion with .,-1,-1,-1,0.4824391305446625,0.7436320185661316,0.5811872482299805,-1.0,accept,unanimous_agreement
861466852,830,"if we want to keep the clocks but also make spectrogram non-transparent, then i think a solution is to draw the clocks with transparency, not the track, and paint the clocks later. if we lose all of the clocks in spectral view, arguably that's a regression. but maybe steve and peter would agree not to treat it as such. are there examples of clocks on the spectrogram in the manual? if so they would be one more thing to change in manual images. i think the objection that clocks are clutter for spectral editing is irrelevant. the track that you do interact with, for spectral editing, never shows the clocks. the clocks indicate what part of another track will be affected, if the track you do interact with changes its length with insertion or deletion. spectral editing doesn't do that, but other edits do.",0,0,0,0.8792186975479126,0.9375697374343872,0.9591075778007508,0.0,accept,unanimous_agreement
861468919,830,"how did you do that ""like this"" picture? did you change audacity source code to do it?",0,0,0,0.8747978210449219,0.9860342144966124,0.994136929512024,0.0,accept,unanimous_agreement
861469589,830,no. i used image editor.,0,0,0,0.9851092100143432,0.9799179434776306,0.989662766456604,0.0,accept,unanimous_agreement
861494911,830,"it's not really our call any more - but i would certainly be happy with the way it si now with the closcks invisible on the spectrogram (i agree with steve's views above that a) they've been largely unvisible on soectrograms anyway and b) other views are better for temporal editing) so if muse qa and rm agree (dmitry, martin, jouni) i would vote for this - and this would then let me close p3 bug 2806. as far as i can recall no user has ever complained about the clocks on spectrograms - porr visibiliy of or lack thereof.",0,1,0,0.4896090030670166,0.8925215005874634,0.7587302923202515,0.0,accept,majority_agreement
861549576,830,"i would leave bug 2806 open. but we need to get a release out very soon, and these new colors will be a banner feature, and i don't want this detail to block it. maybe myungchul will even write the fix easily. i outlined how we might to do it. repaint the clocks, after the spectrum, making the clocks the transparency.",0,0,0,0.9162718653678894,0.8963434100151062,0.9521605968475342,0.0,accept,unanimous_agreement
861609491,830,"![a link] ↑ in development screenshot, left: light theme, right: dark theme fortunately, it seems like the fix is not hard to implement. i'll push commit after some cleanup in couple of days. for now, i have to sleep:sleeping_face: to adjust color and transparency of clock overlay, we need to edit theme image. i won't do this. i think the clock should be gray, 50% transparent.",-1,0,1,0.7143623232841492,0.6257874965667725,0.965993881225586,,review,no_majority_disagreement
861618111,830,"thanks for trying the clocks dofuuz, but from a user perspective i would much prefer to not have the clocks. when using track spectrogram view and sync-lock, i would have to temporarily turn off sync-lock to remove the distraction of the clocks. that's more work for the user, and a needless distraction from their workflow. the user can already see if sync-lock is on by looking for the clock in the control panel on the left hand end of the track - which is how users have had to work (with zero complaints) when using the ""classic"" spectrogram color scheme. with qa hat on, usability trumps consistency. now that i can see what it looks like with the new color scheme + clocks (thank you), i would say that it is significantly worse than not having the clocks showing in spectrograms. steve",1,1,1,0.8680856823921204,0.9754019379615784,0.8909953236579895,1.0,accept,unanimous_agreement
861648200,830,"thank you, steve. you have a strong opinion about the clocks. i do not have a strong opinion about them -- which is why i brought the matter up: in the absence of strong opinions, the presumption should be conservatism about the application's behavior, changing only what one needs to change for the really new feature. in this case, hiding the clocks was not the intention of the feature, but a side-effect of trying to achieve something else, the non-transparency that improved spectrogram appearance. however, given your remarks now, i find no reason left to delay the merger of this pull request. if someone really wants to overrule the elimination of the clocks, let them raise an issue.",1,1,1,0.8549765348434448,0.9406423568725586,0.9435980319976808,1.0,accept,unanimous_agreement
861659708,830,merged! the residual issue about the clocks -- if anyone insists on keeping them -- is already at: [a link],0,0,0,0.9633278846740724,0.8058714866638184,0.8411630392074585,0.0,accept,unanimous_agreement
861912635,830,"great:grinning_squinting_face: we can implement sync-lock overlay later, if there are anyone complain about it.",1,1,1,0.9863249659538268,0.9601829051971436,0.986329972743988,1.0,accept,unanimous_agreement
863368442,830,"dofuuz, do you wish to be listed in the credits dialog of the next version? if so, how exactly should we spell your name? (in hangul too if you like.)",0,0,0,0.9586304426193236,0.9718100428581238,0.9920876622200012,0.0,accept,unanimous_agreement
863634816,830,-licameli yes. list me as myungchul keum thanks:grinning_squinting_face:,1,1,1,0.9637660384178162,0.8394721746444702,0.9775526523590088,1.0,accept,unanimous_agreement
863921860,830,"i have updated the website credits page adding keum to the ""contributors"" [a link] i cannot update the in-app credits. thanks for your work on this keum/dofuuz :grinning_squinting_face:",1,1,1,0.9786639213562012,0.9831748604774476,0.9933028221130372,1.0,accept,unanimous_agreement
864428089,830,"please help, we want to be sure that it is correct to alphabetize that under k and not m!",0,0,0,0.7908582091331482,0.5298548340797424,0.8542312383651733,0.0,accept,unanimous_agreement
864639369,830,keum is my family name.,0,0,0,0.9704568982124328,0.9795491099357604,0.9285860657691956,0.0,accept,unanimous_agreement
864945672,830,thanks for that clarification dofuuz ( myungchul) - i have adjusted that ordering in the website credits: [a link] th latest 3/.0.3 alpha already has the correct alphabetic ordering. peter.,1,1,1,0.954346001148224,0.9746267795562744,0.967055320739746,1.0,accept,unanimous_agreement
857973805,966,i will await resolution of points i raised before continuing review.,0,0,0,0.9687974452972412,0.9782920479774476,0.9889023900032043,0.0,accept,unanimous_agreement
862870490,966,"before anything else: again, please simplify the commit history. make one simple, straight branch. do not include merge commits. rebase or cherry-pick one of the branches onto the other. you could do [code block] and then, rebase onto more recent master and force-push. you might also do git rebase -i and make some of these commits fixups so the history is shorter.",0,0,0,0.9762285351753236,0.979200839996338,0.9908272624015808,0.0,accept,unanimous_agreement
1127854928,2941,"tested on macos 12.3.1 monterey with branch build: audacity-macos-3.2.0-alpha-20220516+4592471-x86_64 i can't test on windows as those are not building artifacts. i see the new cogwheel ""audacity audio setup toolbar"" - can't test the options on mac as there are no options to switch to. ![a link] afaict (limited on mac) the **cogwheel>audio settings** dialog and the **cogwheel>input settings** both seem to interact correctly with the devices preferences. **this begs a question:** do we really need devices preferences now that we have the cogwheel since there seems to be total overlap between the new ""**audio settings - devices**"" dialog and the **devices prefs** dialog? flagging and as a ux/design issue. i note that the device toolbar has been removed entirely (_replaced by the new toolbar in the view>toolbars menu_). i assume that this is intentional? -------------------------------------- **my initial feedback** is that i think the cogwheel is a good replacement for the device toolbar especially as it appears to be ""enabled"" by default. i like the fact that it is a lot more economical in terms of screen real-estate occupied.of note is that in the early versions of audacity dominic mazzoni did not have a device toolbar, just devices prefs.",0,0,1,0.7832661867141724,0.9828197956085204,0.6050912141799927,0.0,accept,majority_agreement
1127883848,2941,"no, this was a miscommunication. the device toolbar is supposed to be just hidden, not completely removed.",0,0,0,0.826077401638031,0.9414953589439392,0.954118311405182,0.0,accept,unanimous_agreement
1127889972,2941,so that would give the user **_three_** ways to make the same settings - that seems a little ott. i can see that you might want to keep it hidden by default just so that users used to having a device toolbar can still have one - but it is somewhat redundant. the only advantage that it has is that (when enabled) it always shows the user what the basic devices settings are.,0,0,0,0.8911623954772949,0.8783560991287231,0.829340398311615,0.0,accept,unanimous_agreement
1127908172,2941,"perhaps we're being overly cautious. i'm worried about all those tutorials that show people how to record from their laptop, etc. i'll need to **really call this out** in our release video.",-1,-1,-1,0.9816282391548156,0.9486320614814758,0.9644267559051514,-1.0,accept,unanimous_agreement
1127921430,2941,"but since you'll be hiding the device toolbar by default a lot of those users will still be fretting ... so yes a ""good call out"" in the release video will be a good idea.",1,0,0,0.5488867163658142,0.6914255619049072,0.9138652086257936,0.0,accept,majority_agreement
1127979237,2941,"i see that this is still listed as ""work in progress"", but in case it's helpful, it's not working correctly for me. if the ""output device"" and/or ""input device"" are set to non-default settings in the main ""cog wheel"" menu, then setting the devices in either of ""cog > audio settings"" or ""preferences > devices"" have no effect. testing with the ubuntu 20.04 appimage on xubuntu 20.04.",0,0,0,0.9835631847381592,0.932162344455719,0.9890301823616028,0.0,accept,unanimous_agreement
1128849250,2941,testing on w10 with latest branch build i) the interaction between the cogwheel audio setup and the devices preferences is not working for the input and output devices 2) that interaction seems to work ok for the host - and for buffer length and latency compensation 3) a nomenclature **_inconsistency_** has been introduced the first entry on the cogwheel menu is called **driver type** - this has always been **host** in the app and documentation ![a link] in preferences it is **host** ![a link] and even in cogwheel>audio settings... it is **host** too ![a link] so the inconsistency exists even within the new cogwheel setup 4) note too that there is a nomenclature difference/inconsistency between a) preferences & audio settings dialogs which use **playback device** and **recording device** b) whereas the cogwheel menu uses **output device** and **input device** for the same things,0,0,0,0.8000171184539795,0.9887841939926147,0.9468997716903688,0.0,accept,unanimous_agreement
1128901495,2941,5) making a device setting in the cogwheel does not stick - it reverts to default: 1. purge audacity settings folder (for ootb default factory settings) 2. launch latest cogwheel branch audacity-win-3.2.0-alpha-20220516+465d3ee-x64-msvc2022 3. observe in both cogwheel and pref s the default playback an recording devices match and are the default 4. in cogwheel change the recording device to be the non-default **stereo mix** ymmv 5. exit the cogwheel 6. click again the cogwheel 7. note that the stereo mix has not stuck and the input device has reverted to the default the same happens if i set either the input device or output device to be the non-deafults: microsoft sound mapper... and i note that the same is now true if i use prefs rather than the cogwheel (this is a **_regression_** on 3.1.3 and earlier) _it basically looks like cogwheel-audacity is basically ignoring any settings the user makes in prefs or cogwheel for the input and output devices and always reverts to the defaults._,0,0,0,0.9680209159851074,0.99012953042984,0.9935985803604126,0.0,accept,unanimous_agreement
1128952578,2941,- can you make all the changes to strings that has raised (basically returning to what audacity already uses)?,0,0,0,0.9866979718208312,0.9933527708053588,0.9944610595703124,0.0,accept,unanimous_agreement
1128956996,2941,"- nice spot about those settings being ignored. - i think we'll need to fix this too and make sure that whatever place you do it, the setting is reflected everywhere else. i've recorded a little video to demonstrate. basically, the preferences are just being ignored. [a link] it almost seems like the 'device' toolbar is the 'king' here and the options in preferences are subordinate.",1,1,1,0.8714737892150879,0.9631800055503844,0.808692216873169,1.0,accept,unanimous_agreement
1128975333,2941,"yes. [a link] if you compare with deaa3f you will see that in the older 3.2.0 alpha version, changing the recording / playback devices in preferences updates the device toolbar settings, and vice versa.",0,0,0,0.9880416393280028,0.9931932091712952,0.9925962090492249,0.0,accept,unanimous_agreement
1128989429,2941,"if the device toolbar is to be retained (as you said earlier) then perhaps you can add a menu item to the cogwheel menu for showing/hiding device toolbar ? that would be less cumbersome than going to view>toolbars - and should be more ""discoverable"".",0,0,0,0.9748246669769288,0.9919602274894714,0.9928072690963744,0.0,accept,unanimous_agreement
1129028286,2941,testing on w10 with the latest branch build: audacity-win-3.2.0-alpha-20220517+5d5623f-x64-msvc2022 1) i find that if i make a change to a non-default device using cogwheel>audio settings dialog then the change does not stick and stays at default device. 2) but if i use cogwheel > input device then to make then change than it douse stick - and it shows as changed in prefs 3) i still find that changes i make in devices for the i/o devices still do not stick and revert/stay defaults 4) the strings have not been changed as requested,0,0,0,0.9126070141792296,0.988342583179474,0.9736855626106262,0.0,accept,unanimous_agreement
1129047693,2941,i would say we should get it functioning properly first and then test it a bit before doing that. i have no idea how much of an impact this change may make.,-1,-1,0,0.6937335729598999,0.5510608553886414,0.9436287879943848,-1.0,accept,majority_agreement
1129858055,2941,done with my first round of review of this draft,0,0,0,0.9760251045227052,0.95554119348526,0.9850400686264038,0.0,accept,unanimous_agreement
1129865709,2941,it is not specific to this pr. it appears to be broken on master as well.,0,0,0,0.9823896884918212,0.9205058813095092,0.9858506321907043,0.0,accept,unanimous_agreement
1129870334,2941,"ok, understood. well, we should fix it before release separately then. thanks!",1,1,1,0.979319989681244,0.9950201511383056,0.9925590753555298,1.0,accept,unanimous_agreement
1129872087,2941,confirmed on w10 with latest alpha 3.2.0 master: audacity-win-3.2.0-alpha-20220516+465d3ee-x64-msvc2022 i will log a new github issue for this.,0,0,0,0.9808041453361512,0.97954261302948,0.9922397136688232,0.0,accept,unanimous_agreement
1129874377,2941,"- might it not have been simpler if **cogwheel>audio settings...** had just invoked **devices preferences** rather than creating a whole new dialog for it, since that new dialog duplicates everything that devices prefs does? or is the plan to remove devices preferences from the prefs settings in favor of the new cogwheel dialog?",0,0,0,0.980566382408142,0.994598388671875,0.9849448800086976,0.0,accept,unanimous_agreement
1129895812,2941,let's discuss all that later. and probably best discussed in discord too to avoid making poor kit and paul's head spin :),1,1,1,0.9577434062957764,0.9908326268196106,0.982772707939148,1.0,accept,unanimous_agreement
1129910078,2941,done: **devices prefs ignores user settings for changes of i/o devices** #2948,0,0,0,0.9851565361022948,0.9903736114501952,0.9937283992767334,0.0,accept,unanimous_agreement
1130246504,2941,can i please suggest that the cogwheel toolbar is moved across leftwards so that it is adjacent to the transport toolbar (as it relates to what goes on in the transport toolbar: ![a link],-1,0,0,0.9537380933761596,0.9773362278938292,0.5385604500770569,0.0,accept,majority_agreement
1130270627,2941,"this cog button is actually unfinished. it is meant to have the words 'audio setup' under it and look like this: the point being that users can easily identify its function - especially those who are used to the device toolbar. otherwise, i'd agree!",0,1,1,0.6529171466827393,0.7871152758598328,0.5528351068496704,1.0,accept,majority_agreement
1130271861,2941,"we're ultimately planning for a layout that looks a bit like this (wip) this would be after we've found a way to eliminate all the modes, apart from the envelope tool, which would still need to be there.",0,0,0,0.9779437780380248,0.9768127202987672,0.9889999032020568,0.0,accept,unanimous_agreement
1130387031,2941,"oh that's a shame i've already gotten to like mr, coggy ... folk are very used to seeing cogwheels for setup stuff. and yes i like that new layout look",-1,-1,-1,0.9844145774841307,0.9927553534507751,0.9797637462615968,-1.0,accept,unanimous_agreement
1130402409,2941,giving him a name like '**mr coggy**' is a wonderful tactic to make me feel guilty about changing him.,1,-1,-1,0.945375919342041,0.4874913096427917,0.9199257493019104,-1.0,accept,majority_agreement
1130481358,2941,would you rather have mr clippy?,0,0,0,0.96712988615036,0.9904106855392456,0.9756195545196532,0.0,accept,unanimous_agreement
1130535705,2941,"i'm lovin' mr coggy - my mystery-shopper does too we both feel that he gives an immediate modern idiom twist to audacity's old-fashioned gui. it's a knowing twist that says ""yeah we know the gui looks ancient - but we can fix it!"" - a pointer to the future the gui/guis yet to come ,,,",1,-1,1,0.7919580340385437,0.8800702691078186,0.9793856143951416,1.0,accept,majority_agreement
1130575409,2941,"martin's ""audio setup"" button is much less ambiguous than a cog icon. while the gear / cog icon has become familiar to most in relation to ""settings"", there's no indication that it has anything to do with _audio_ settings until you actually use it. in terms of visual language, the gear / cog icon is vague.",0,0,0,0.976340353488922,0.9079009294509888,0.9755263924598694,0.0,accept,unanimous_agreement
1131366462,2941,"perhaps then we could consider retaining mr coggy but re-purposing it as a more ""discoverable"" way of invoking preferences. in that role it could perhaps become a single height button.",0,0,0,0.980587899684906,0.985803246498108,0.9846912026405334,0.0,accept,unanimous_agreement
1131391683,2941,"""it looks like you're trying to record a podcast! want help with that?""",-1,0,0,0.7004866600036621,0.8751686811447144,0.8512750267982483,0.0,accept,majority_agreement
1135940753,2941,"as per the testing for issue: **devices prefs ignores user settings for changes of i/o devices** #2948 testing on w10 with 's branch build: audio setup rework build audacity #1369 changes there seem to have had an impact on this issue too _(the three ways of setting devices should be all linked in step)_ a) original steps 1-7 and new steps 1-12 now appear to work correctly with the user's settings properly persisting b) changes made in devices prefs ripple through to the device toolbar and the cogwheel settings c) changes made in the cogwheel settings ripple through to the device toolbar and devices prefs d) changes made in the device toolbar ripple through to the cogwheel settings and devices prefs i note too that the nomenclature in cogwheel>audio settings has now changed to the standard, long-standing, audacity terms. **_but_** we still have a regression residual where the default channels is now **1 (mono)** and not **2 (stereo)**",0,0,0,0.9716421961784364,0.9914156794548036,0.9901782274246216,0.0,accept,unanimous_agreement
1137484116,2941,testing on macos 12.3.1 monterey with kit's latest branch build: audacity-macos-3.2.0-alpha-20220525+4bdb8f8-x86_64 [a link] note that i can't test on w10 as the windows builds failed i cannot test non-default changes on mac as i only have a single option for the i/o devices and host. **_but_** i note that we still have the regression residual where the default channels is now **1 (mono)** and not **2 (stereo)** and now with the device toolbar hidden/disabled by default it is not immediately obvious that this is the case. _and rip mr coggy - i'm missing him already_ ...,0,0,0,0.9507011771202089,0.98173588514328,0.9928292632102966,0.0,accept,unanimous_agreement
1138778501,2941,testing on w10 with kit's latest branch build: audacity-win-3.2.0-alpha-20220526+15d701b-x64 we still have the regression residual where the default channels is now **1 (mono)** and not **2 (stereo)**. 1. purge the audacity settings folder 2. launch audacity-win-3.2.0-alpha-20220526+15d701b-x64 3. click on audio setup 4. click on recording channels 5. observe: default is **1 (mono)** and now with the device toolbar hidden/disabled by default it is not immediately obvious that this is the case.,0,0,0,0.9802629351615906,0.9921964406967164,0.992482841014862,0.0,accept,unanimous_agreement
1138840659,2941,"- since this is a separate issue that was not introduced in this pr, won't be fixing it here. just so you know!",0,1,0,0.7899541258811951,0.5790894627571106,0.6819398403167725,0.0,accept,majority_agreement
1138853088,2941,but testing with that latest master alpha this is not the case - with that the default is **still 2 (stereo)**,0,0,0,0.9803981184959412,0.9922330379486084,0.9923702478408812,0.0,accept,unanimous_agreement
1143517453,2941,"the items on the main audio setup menu (host, playback device, etc) should have access keys.",0,0,0,0.9875084757804872,0.9939129948616028,0.9936097860336304,0.0,accept,unanimous_agreement
1143547615,2941,"testing on my zurich w11 laptop with kit's latest branch build: audacity-win-3.2.0-alpha-20220601+f8b50f1-x64 a) the default settinf for channels is now reverted to ""2 (stereo)"" b) the adio settings and devices pefs abnd device toolbar all stay in lock-step together when a user makes changes in any one of the three. so looking good to me on w11",1,1,1,0.9821120500564576,0.9562522172927856,0.8941532969474792,1.0,accept,unanimous_agreement
1143549281,2941,they appear to have these when i test 's latest brabch build on w11: audacity-win-3.2.0-alpha-20220601+f8b50f1-x64,0,0,0,0.9818747639656068,0.9891487956047058,0.990931749343872,0.0,accept,unanimous_agreement
1143558986,2941,lack of access keys: ![a link],-1,-1,-1,0.9796567559242249,0.6090763807296753,0.9910956621170044,-1.0,accept,unanimous_agreement
1143722455,2941,oh i see what you mean now - i was looking at the dialog not the menu: ![a link],-1,0,1,0.938610315322876,0.884211003780365,0.9524496793746948,,review,no_majority_disagreement
1143979444,2941,"another anomaly with settings, in master and also in this branch: be sure it's fixed in the final version! - delete audacity.cfg, start, exit. - start again, go to quality settings, choose 48000 for rate, press ok. - don't exit, but ctrl+n to open a new project. observe: 44100 in the project rate drop-down in the selection bar at bottom of screen; but expect: 48000. and if your record, you get a 44.1 khz track, not 48. ### update by i confirm this is the case in the latest 3.2.0 master audacity-win-3.2.0-alpha-20220601+e71f24b-x64-msvc2022 a) the manual clearly states: so audacity should change the project rate and the rate of newly recorded tracks in the new project window b) it is less clear to me what one should expect in the original project window - the manual states: so it is clear that the project rate is unchanged by the preferences change in the original projct - what is unclear (undefined) is that any newly recorded track in the original project will be recorded at the unchanged project rate and not the rate set in quality preferences. since this is an issue in master i will log this as a new issue. **logged: new project does not take its project rate from qualty preferences #3017** ### further update further testing shows that in a project (in this case the original project) any newly recorded track is recorded at whatever the user sets or changes their project rate to be in the selection toolbar. so whatever is in the selection toolbar for project rate at any time is independent of what the setting is in the quality preferences. the quality preferences is _**only**_ ever used at launch time to set the project rate (but should be used for a ctrl+n new project, according to the manual anyway). i'm not convinced that this loose linkage is readily ""discoverable"" - it takes a careful rtfm to grasp this.",0,0,0,0.6187002658843994,0.9538492560386658,0.9300585389137268,0.0,accept,unanimous_agreement
1143996149,2941,"another anomaly, not in master but in this branch: - delete audacity.cfg, start. - open interface preferences, and change the db range to 120. ok. - genearate noise, right-click in the vertical ruler, and choose db. observe: -60 at the mid-line but expect: -120. my study of the source tells me there are no other anomalies. ### update from confirmed on w11 a) latest 3.2.0 alpha master works correctly - unlike this branch b) note that this also affects the displayed range in the meters too and not just the vertical scale",0,0,0,0.9243752360343932,0.967402458190918,0.9705818891525269,0.0,accept,unanimous_agreement
1453551031,4384,excellent! but still a draft. what is missing?,1,1,1,0.9851410388946532,0.9950239658355712,0.9971984624862672,1.0,accept,unanimous_agreement
1453557953,4384,"export parameters should replace global prefs and break dependency on shuttlegui, direct invocations of message dialogs still happening during export process, import and export process is still happening in the main thread ... i'll update parent ticket so it would be easier to understand the progress. and i think it make sense to keep it draft, so that qa team could avoid testing it multiple times",0,0,0,0.943610429763794,0.9631462693214417,0.9888392090797424,0.0,accept,unanimous_agreement
1453580630,4384,failing builds,-1,0,-1,0.8495069742202759,0.7409785389900208,0.5174261927604675,-1.0,accept,majority_agreement
1464091922,4384,this round of review is complete!,1,1,0,0.802107572555542,0.5026513934135437,0.8632712364196777,1.0,accept,majority_agreement
1469929815,4384,that's all for the first new commit,0,0,0,0.9805980920791626,0.9786369800567628,0.9835912585258484,0.0,accept,unanimous_agreement
1578387706,4384,"i just tried to open a wav file through the file>recent menu, which yielded ![a link] ; maybe i'll find out that it's intended, but i'm skeptical.",-1,0,-1,0.7928280234336853,0.8047597408294678,0.915283203125,-1.0,accept,majority_agreement
1578820454,4384,"problem clarified (thanks ) : i was only building the audacity target, the modules were never built. using ""build all"" solved it. should we leave it at that or to make the dll builds a pre-condition to building the audacity target in cmake?",1,1,1,0.5113596320152283,0.7369850277900696,0.9100149869918824,1.0,accept,unanimous_agreement
1676938321,4384,closed in favor of [a link],0,0,0,0.9859719276428224,0.9888366460800172,0.9894366264343262,0.0,accept,unanimous_agreement
1221592329,3396,"i did stepping through in the debugger and now i understand that `flushsettings` and then `storesettings` in `validateui` puts complete state into `effectsettings`, then `processinitialize` causes `fetchsettings` to complete the copy of state correctly into another instance object.",0,0,0,0.9883249998092652,0.9918217062950134,0.9924863576889038,0.0,accept,unanimous_agreement
1221593936,3396,i just noticed one `todo` can be easily fixed: `vst3effect::loadpreset` can now be `const` and the ugly `const_cast` at line 232 can be removed.,0,0,0,0.9753252863883972,0.9869400858879088,0.8901322484016418,0.0,accept,unanimous_agreement
1221598834,3396,"i'm almost approving this commit. please see all the comments above that i did not yet mark resolved. i would like to have some explanation of why base64 conversion was not working as expected. also see the points about updateui. i did some experiments, exporting a custom preset, then trying to switch between defaults and importing my preset, using the sidebar dialog, during play and while not playing. this does not yet work properly. we might decide it's good enough for alpha release without this, but you are right that we must ""send changes via icomponenthandler"".",0,1,0,0.7609534859657288,0.7488982081413269,0.584455668926239,0.0,accept,majority_agreement
1221600405,3396,"besides those two important points, there is the suggestion that a map to optionals might be better. i can demonstrate a problem that i think would be fixed by this. with valhalla supermassive, i use default settings, click ""mix"" and then, during play, click and drag that dial, then release. i can get the dial to fluctuate between two different values, sometimes very different values, and hear the playback switching between them.",0,0,0,0.957148253917694,0.950480043888092,0.9675735235214232,0.0,accept,unanimous_agreement
1221600449,3396,"really then, that is three important points. there are other recent points i made that are only suggestions.",0,0,0,0.9623201489448548,0.8337028622627258,0.9759082794189452,0.0,accept,unanimous_agreement
1222393071,3396,"second commit comment has a spelling error in ""redundant"" third commit ""moving some of components into vst3wrapper"" now fails to build!",-1,-1,0,0.7691493630409241,0.7586895227432251,0.9839355945587158,-1.0,accept,majority_agreement
1222404807,3396,"another commit comment misspells ""actual""",0,0,0,0.9190260767936708,0.9601127505302428,0.972749650478363,0.0,accept,unanimous_agreement
1222409453,3396,your new last commit makes a much simpler fix for the problem of fluctuating settings. now i feel silly that i didn't think of it!,-1,-1,-1,0.9885517358779908,0.9929494857788086,0.9946183562278748,-1.0,accept,unanimous_agreement
2082135837,6359,"as in, it doesn't honor the micro-fades preference?",0,0,0,0.9681293964385986,0.9654731154441832,0.9850466251373292,0.0,accept,unanimous_agreement
2082414381,6359,"when playing a mono clip, only the left channel is playing audio:",0,0,0,0.9814634323120116,0.985343873500824,0.9913729429244996,0.0,accept,unanimous_agreement
2104747376,6359,"i have completed a review of changes in audioio.cpp. if my contribution of per track meters is also wanted, there is a lot of needed work to make these compatible. i may volunteer my own very different rewrite of audioio.cpp to support a master channel in the right way. i understand that: - the sequence of transformations on individual tracks includes time warping (for time track), muting (of individual tracks), effects (stacked on single tracks), panning, in that order. - then you mix tracks and apply the master stack, on the producer side of the ringbuffer. (as for individual stacks. we must avoid who knows what computations in opaque code, on the low-latency consumer side.) - micro-fading is still applied on the consumer side. - there are only one or two ringbuffers corresponding to the device output channels. the old version, without a master stack, differed in these ways: - there was a ringbuffer for each wavechannel. - applying mute and pan, and mixing of the ringbuffer outputs, was done on the consumer side. questions might arise about subtle differences of results, moving the muting before the effect processing. (is it better with your change? have you tried muting a track with a reverb, during play -- which before, would just mute it at once, but after, might instead produce the decaying tail of what was unmuted?) also, whether pan should apply before a per-track effect or after: it might make a difference for certain effects like reverbs that are not simple ltis but might work in terms of mid and side channels. (, opinion?) more later...",0,0,0,0.623033881187439,0.957291305065155,0.8814444541931152,0.0,accept,unanimous_agreement
2107765303,6359,"more: the existing ring buffers should not be removed. ring buffers for the master mix should be added. the consumer thread should take equal samples out of all of them. only the samples from the master mix are stored in the output buffer of the audio io callback. this allows future development to send the buffers of pre-mixed per-track data inter-thread, back to the master thread for drawing. see `sendvuinputmeterdata` and `sendvuoutputmeterdata` which now do such inter-thread communication: but i would need to send other buffers too. my thinking is this: the consumer thread needs to have access to intermediate states of calculation of the mix samples, corresponding in time to the ultimate output. those intermediates should be sent to other code that performs graphical display, keeping as closely synchronized as possible with the real-time playback. that synchronization will not be perfect, given the reality of frame refresh rates. still, the latency of the ringbuffer itself should be accounted for in that drawing update. sending the per-track information to the main thread more directly from the producer thread would make less perfect synchronization of the display. therefore, more data should be travelling through ring buffers from the high-throughput but variable-latency producer thread, to the more regularly updating consumer thread.",0,0,0,0.9456769227981568,0.9852458834648132,0.9867674708366394,0.0,accept,unanimous_agreement
2111587483,6359,-licameli good point about reverb. i confirm that muting a track may not instantly mute the sound but any effect with a tail will continue ringing. it may sound better but i don't think this is the wanted behaviour: muting is muting. what if the effect is a long echo ? ?,1,1,1,0.6531515717506409,0.7909532189369202,0.7860642671585083,1.0,accept,unanimous_agreement
2111592889,6359,"about panning before or after, yes, if the effect is non lti, this would make a difference. if there is one place for panning and gain, i think it should be where it is a the moment, after the effect stack. i guess other daws do it that way, too (or may have also a ""pre-gain""), and if a non lti effect such as a compressor comes in, it will come with its own pre-processing gain parameter. a mid/side encoding/decoding operation is a linear operation, though, so in that particular case it should not make a difference.",0,0,0,0.967060089111328,0.9874797463417052,0.981958031654358,0.0,accept,unanimous_agreement
2114951687,6359,i disapprove. please wait to see my alternative that will be compatible with oerctrack meters. expext it today.,-1,-1,-1,0.8003033995628357,0.8601342439651489,0.9703722596168518,-1.0,accept,unanimous_agreement
2115329003,6359,"approving for now. my purpose is not to override -licameli's disapproval, because maybe his alternative makes this very complex logic easier ? i'll leave up to to decide but i don't want to block qa anymore.",0,0,0,0.8591988682746887,0.547684907913208,0.593780517578125,0.0,accept,unanimous_agreement
2115341961,6359,"let it merge then: but my pr will begin with reversion of all the changes in audioio.cpp (not of other ui changes) and then a more careful stepwise rewrite. qa will likely need to re-test everything involving sound quality, but not the ui changes.",0,0,0,0.966849446296692,0.9799491763114928,0.9929776787757874,0.0,accept,unanimous_agreement
2117510228,6359,"found issues: 1. when a user adds [a link] to the master effects, and uses the built-in bypass feature, the audio played back is panned 100% to left, instead of stereo playback. 2. when a user adds kilohearts distortion plugin to the master effects, and playbacks some audio, full scale noise can be heard for a second after playback has been initialized. 3. if a user has added any master effects, and enabled them, the effects are not applied to files on file export (i am not sure what to expect here, should master effects render when they are enabled?)",0,0,0,0.9430439472198486,0.975784182548523,0.8187674283981323,0.0,accept,unanimous_agreement
2117558304,6359,yes!,0,1,1,0.8127877116203308,0.7005663514137268,0.4961845874786377,1.0,accept,majority_agreement
2117561488,6359,"my changes are more complicated than expected. however, i might be fixing long standing problems with effect latencies. search for issues with “latency”",0,0,0,0.8140315413475037,0.5074734091758728,0.950788915157318,0.0,accept,unanimous_agreement
2117614528,6359,looking into the export/render problem.,0,0,0,0.9822518825531006,0.980255961418152,0.9840463995933532,0.0,accept,unanimous_agreement
2119869587,6359,". serious accessibility issue, logged here: [a link]",-1,-1,-1,0.806077241897583,0.9795042872428894,0.961313247680664,-1.0,accept,unanimous_agreement
2119903740,6359,". another accessibility issue, logged here: [a link]",0,0,0,0.9856141209602356,0.9744749665260316,0.9802142381668092,0.0,accept,unanimous_agreement
2125362139,6359,completed review of commits :+1:,1,1,1,0.6534424424171448,0.6044593453407288,0.9903969764709472,1.0,accept,unanimous_agreement
915730636,1614,"this round of review is now complete! the overall approach is sound, but i flagged many details that need attention. none of these is difficult by itself.",1,1,1,0.8821123838424683,0.961735188961029,0.9862127304077148,1.0,accept,unanimous_agreement
929092855,1679,"i see this is rebased onto more recent master now. i like the more detailed explanation in commit comments. in commit comments, if you write more than one line, then always make the second line blank, and after it, use line breaks at about 80 columns.",1,1,1,0.7669537663459778,0.9254683256149292,0.6437566876411438,1.0,accept,unanimous_agreement
933436337,1679,"at last, i consider this review complete!",1,1,1,0.6552591323852539,0.7266312837600708,0.949028491973877,1.0,accept,unanimous_agreement
1869629697,5818,have you addressed the issue with zoom levels where min and max have the same sign?,0,0,0,0.988798201084137,0.9879536628723145,0.9937915205955504,0.0,accept,unanimous_agreement
1870094918,5818,i've attempted to fix that but not sure that it was correct: ![a link] ![a link],-1,0,0,0.9468380212783812,0.8672757148742676,0.561160147190094,0.0,accept,majority_agreement
1870103599,5818,"linux build is failing. is this only about waveform painting? if so, rename it all as lin-waveform-paint. or maybe lib-waveform-geometry if the library will also handle any hit testing. the painting and hit testing for anything painted on the screen should be kept together. painting maps some thing to pixel x and y coordinates, while hit testing must know the inverse of the same mapping.",-1,0,0,0.6062668561935425,0.990275740623474,0.6466742157936096,0.0,accept,majority_agreement
1870107894,5818,"i strongly disagree. these topics are irrelevant most of the time, and definitely irrelevant here.",-1,-1,-1,0.9228367209434508,0.866425096988678,0.941062331199646,-1.0,accept,unanimous_agreement
1870112880,5818,"`lib-wave-track-paint` is a green library providing a way to build visuals for wave tracks. right now, only waveform painting has been migrated to this library. neither vitaly nor i ever migrated the ""green"" part of the spectrogram painting. this can be done, however.",0,0,0,0.971780002117157,0.9924126267433168,0.9688483476638794,0.0,accept,unanimous_agreement
1870129237,5818,"trying to fix that... right now it has only waveform image generation part. as you mentioned it could provide geomentry data that will be useful for hit testing and in that case `lib-waveform-geometry` could be an option too. it could indeed provide geometry information for hit testing purpose, as hit testing itself usually refers to platform or framework specific code, i think. but there is nothing to hit test right now. this library does not provide any means to draw ""lollipops"" or envelopes that can be manipulated.",0,0,0,0.94395512342453,0.9672057032585144,0.9487929940223694,0.0,accept,unanimous_agreement
1870135083,5818,"i strongly disagree. this is a lower-level library, that is only responsible for helping the waveformview to **paint** given the zoominfo, selection, and screen bounds. it is not responsible for interactions and it should be kept that way.",-1,-1,-1,0.7150878310203552,0.612274706363678,0.787140965461731,-1.0,accept,unanimous_agreement
1870208788,5818,"no, don't make it responsible completely for interactions. however the association between pixel coordinates and things in the data model ought to be defined in one place. a mapping of things to pixels required for painting, and its inverse mapping, should be defined together and kept consistent. so maybe what i want to argue is that lib-waveform-geometry would be separated from a painting library and do only such coordinate transformations. lib-waveform-painting could depend on it, and hit testing would also depend on it, but neither of those two would depend on the other. my opinion about spectrogram is that it is a completely different association of things with pixels, at least in the y coordinate, and would have its own separate libraries.",0,0,0,0.8502994775772095,0.9310896992683412,0.9805607795715332,0.0,accept,unanimous_agreement
1870213113,5818,"zoominfo is still used to achieve this purpose. this library provides the way to cache imagery, required to draw wavetrack. spectrograms are no different in this aspect. the way how the specific bitmap is generated can be lifted away from the library, resulting in 3 libraries: caching, waveform bitmap generation, and spectrogram image generation.",0,0,0,0.9817236661911012,0.9921654462814332,0.9877353310585022,0.0,accept,unanimous_agreement
1870226702,5818,"yes, the association x-coordinate with time is common to spectrum and waveform views, and is already in lib-screen-geometry which does not even depend on wxbase. the two kinds of views define very different meanings for y-coordinates however and would have completely different paint procedures, in the detailed use of that caching and blitting layer. really i must go beyond my simple reaction to the pull request title and really review it to see what's really there. i'm still waking up.",-1,-1,0,0.7871748805046082,0.9297789335250854,0.8700985312461853,-1.0,accept,majority_agreement
1871121357,5818,"i would like the review to pause, for now, -licameli 1. it was not agreed yet that we need it for 3.5 or for audacity 3 at all. 2. most of the comments are related to disliking names. this brings an enormous cognitive load when reading the comments. 3. likely the part you are looking at now can be omitted. 4. the next commit is enourmous. unless we agree first on some basic ideas i expect the review to span hundreds of comments again. i would like to avoid that. 5. i don't remember the details of the code, so i can't respond to the comments. if martin and yana would approve moving this pr forward, we will clean it up with vitaly first and discuss the ideas on the dev call first.",0,-1,-1,0.542934775352478,0.51053786277771,0.6255354881286621,-1.0,accept,majority_agreement
1871130220,5818,"all right, i will stop. but please note: there is more than just naming to object to. i think there are real off-by-one errors in the bounding box class.",0,0,0,0.9461914896965028,0.8649066090583801,0.951012134552002,0.0,accept,unanimous_agreement
1871147681,5818,"i agree, there are errors for sure.",0,0,0,0.9648913145065308,0.941124439239502,0.9415802359580994,0.0,accept,unanimous_agreement
1871447058,5818,"i'm not reviewing, just noting other thoughts while compiling something else. there is a need to distinguish point and vector. surely rectangle stores a point for top left, and boundingbox for top left and bottom right. i didn't review size completely, but it too has some strangeness (like multiplication of two sizes, why?). maybe size should become the vector class and a rectangle can be defined by a point and a diagonal vector. but should rectangles be ""oriented"" (with possibly negative area) or just have non-negative area always? -- then maybe rectangle should instead always canonicalize itself to have a diagonal with non-negative components, and the corner as the real top-left.",-1,0,0,0.5656782984733582,0.9036206603050232,0.8618403673171997,0.0,accept,majority_agreement
1871508549,5818,"there is a common terminology in ui toolkits, where point has some vector-like properties. you can observe similar properties with qpoint and wxpoint. there is absolutely no need to distinguish points and vectors unless the ultimate goal is to teach students about doing dimensions in c++. i don't recall the concept of ""point"" in math though. they are pretty much the synonyms, used interchangeably. usually rendering engines call such structures ""vectors"" and ui toolkit ""points"". i think that ""point"" is used in ui for the last 40 years or so. we can rename it to vector, just to save time on this code review, but i'd rather not. i am hard against having both points and vectors. it will create lots of mess in the code for very little and strictly academic (?) reason. we are writing software, not a research paper. it must be fast, readable, and maintainble. both vector and points may have component by component division, even if it makes little sense from the mathematical perspective. they are not multiplicative inverses, but from the programming point of view they can be useful. for example , when you need to represent a different scale on different axises. in fact, this operation is implemented in hardware both for cpus and gpus. defining a rectangle is quite complex topic indeed. that is why there are two different definitions in this library alone. however, the way how rectangle is defined is never about defining the most correct one from the math point of view. it's about convince and performance. i don't think that we need aabb for the sake of this pr. they were used in code that was further 10x faster than this. that's it, 100x faster than audacity is now. however, i think that point (with vector properties, sorry), size, and rect as (point, size) could be useful overall. i agree, that there is a better place for them now than lib-graphics. they surely need better unit test coverage. i would love to have adequate color class too. wxcolour is quite heavy and not too useful. to summarize, i don't like renaming points to vectors, but i don't care much. i will stand hard against adding vectors on top of the points or defining rectangles using diagonals.",0,0,0,0.8778601884841919,0.974876344203949,0.939257025718689,0.0,accept,unanimous_agreement
1871677505,5818,the standard library distinguishes time points from durations in chrono. it does not affect the performance of compiled code but it makes distinctions between variables that allow programming errors to be caught at compile time and increases confidence in correctness of code that does compile. what i suggest is simply analogous to that.,0,0,0,0.982332170009613,0.9831960201263428,0.9909544587135316,0.0,accept,unanimous_agreement
1871692389,5818,affine space is a different mathematical notion from vector space. one has points with no distinguished origin. the other describes displacements in an affine space. [a link],0,0,0,0.9628199338912964,0.9868769645690918,0.9889377355575562,0.0,accept,unanimous_agreement
1871885925,5818,"to be able to describe a point in affine space you need to have a basis. when you have a basis vectors and points are pretty much the synonyms. i don't see how std::chrono and points as defined in ui are related. chrono attaches units to the durations and time_points have implementation defined basis, unknown to the user in principle. both concerns are critical to chrono. at the same time chrono is very verbose and rarely used in extensive computations. in graphics, we always have a well defined basis for the screen space. we don't need to attach units to the points (this is not true for typography or for physics, but we are not doing a physics library). the vectors and points are the synonyms in this case. there is absolutely no need to separate between them except making the point (no pun intended). i won't change my opinion. in case the discussion about this topic will take too much time, this pr will be dropped and qpoint (with vector properties!) will be used for the needs of the qt version of the audacity.",0,0,0,0.7511571049690247,0.9615679383277892,0.8456848859786987,0.0,accept,unanimous_agreement
1871893801,5818,"you asked my opinion in review and i gave it. i would design these classes differently. points and vectors may have a common representation but they do not have the same algebra. a static type distinction between them can catch errors at compile time and also make the signatures of functions more informative. just as we distinguish different types of identifier rather than pass naked strings around, or use enumerations — similarly there are number pairs used for different purposes and i would distinguish them. a point is a position in a geometric space. a vector is not, but is a displacement from point to point. scaling a vector is meaningful. scaling a point is not.",0,0,0,0.9278019070625304,0.9469907879829408,0.9751978516578674,0.0,accept,unanimous_agreement
1871929568,5818,"and i have strong reasons to disagree with you. i'm unsure how to read this, but i will stress again: we are not doing academic papers, and we are not implementing an abstract concept. we don't. there are 2 cases in the code where taggedidentifier is used, and urlstring is a clearly a bad example of one. it is not used in the code anymore; i have forgotten to remove it. otherwise, we just use identifier. it gives no better type-safety over the raw strings. we have exactly one type-safe identifier: normalizedkeystring. is it an identifier at all? i don't know, but that feels a bit wrong. we rarely use them, preferring identifiers, which are essentially strings and are not type-safe. gosh, we have places where `any` is used. we are constantly dependent on a global state. we have so many places that need attention right now, so why waste time and mental resources on discussing points vs vectors, irrelevant to the use case they are designed for? this statement is wrong when we are talking about gui of any kind. at least, since the first release of android :-) --- i honestly feel that we are in the ""snapping"" pr space again. however, that pr was critical because it was fixing the functionality required for release, which was implemented wrong. this one is not. i have no time, or energy, or will to discuss this topic.",-1,-1,-1,0.9419502019882202,0.970237672328949,0.9557382464408876,-1.0,accept,unanimous_agreement
925471307,1623,"one more push of commits, and some in-line comments and questions, and this completes my review! act on my suggestions as you wish, force push once more, and i will make one quick check of what you did and likely approve this and move on!",1,1,1,0.7613427639007568,0.9829923510551452,0.9333369731903076,1.0,accept,unanimous_agreement
926220674,1623,i missed the infinite loops with getnextcodec() and getnextoutputformat()! i see how you corrected them. was it testing that discovered it?,0,-1,0,0.7934404015541077,0.9210293292999268,0.8829896450042725,0.0,accept,majority_agreement
926659004,1623,"i re-approve the latest force-push! only small suggestions: exportffmpeg::initcodecs should be a private member function, to prove the safety of the new pointer dereference in it just from examining the class in isolation. the copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated, at least informally, in the header files of the class as preconditions. and that's all!",0,1,0,0.5639192461967468,0.9425807595252992,0.5555800795555115,0.0,accept,majority_agreement
926832583,1623,:partying_face: :party_popper: :high_voltage: :fire: :rocket: :clinking_beer_mugs:,1,0,1,0.5232581496238708,0.9795993566513062,0.6258907318115234,1.0,accept,majority_agreement
932045372,1623,might this also resolve #1794 ?,0,0,0,0.987898886203766,0.9943384528160096,0.993315041065216,0.0,accept,unanimous_agreement
932083511,1623,awesome!,1,1,1,0.991037368774414,0.9946492314338684,0.9943788647651672,1.0,accept,unanimous_agreement
856305704,952,"summary of my re-review: besides minor matters, i think the important things are (1) fix the cmake function not to depend on environment and (2) consider whether we might get overreporting of irrelevant information in case of writing fileexceptions.",0,0,0,0.965692400932312,0.9767521023750304,0.9123464822769164,0.0,accept,unanimous_agreement
856812665,952,"fix ""too"" and ""imitate"" in comments, add doc comments for anonymizedmessage, and it's good to merge. i see all ""error_opening_sound_device"" are done.",0,0,0,0.8308433294296265,0.7640076279640198,0.6411728262901306,0.0,accept,unanimous_agreement
1178479328,3183,that's enough for this round of review!,1,1,1,0.9067108631134032,0.8111575245857239,0.4957503080368042,1.0,accept,unanimous_agreement
1182998830,3183,"i am examining the latest force-push. the commit ""added makesettings"" does not build because it uses `getsettings` which is not defined. the next commit repairs that.",0,0,0,0.968363881111145,0.9919741749763488,0.9911098480224608,0.0,accept,unanimous_agreement
1183011873,3183,still incomplete in the commit that defines `transferdatatowindow`: remove `refreshparameters` from `loaduserpreset` `doloadfactorypreset` and `importpresets`,0,0,0,0.9867619276046752,0.9954516291618348,0.9945831894874572,0.0,accept,unanimous_agreement
1183283099,3183,"not wrong, but not necessary, just to hide mention of the member maeffect inside the function vsteffect::loadparameters. right, and necessary, to use maeffect somewhere if a ""chunk"" must be reinterpreted as a settings object. it's then a scratch handle. but, i think that if loadparameters takes the other path that does not use the chunks, then it is not necessary to use a scratch handle, not necessary to define `storecommandparameters` or then to use `fetchsettings`. on that path, a direct conversion can be done from strings stored in the config file into values in the map in effectsettings.",0,0,0,0.98029226064682,0.9897115230560304,0.9718641042709352,0.0,accept,unanimous_agreement
1183309842,3183,"it should be a translator, but sometimes needs a scratch handle, as with the paht that uses chunks. but not the rest. you wrote `storecommandparameters` which uses a handle but unnecessarily. don't add the function, but just adapt loadsettings to interpret `parms` and update a map. there is no need to retain `storecommandparameters`. change `loadsettings` to avoid use of a handle and iterate over the config file. well you did that already. but also, do not change the convention previously used to name the keys associated with the values. maybe what you misunderstand is that `loadparameters`, which is used by `loaduserpreset`, is also intended as a translator only. side effect on a scratch handle for the interpretation of chunks is unavoidable as part of interpretation. but on other paths, it is not important to keep whatever side effects used to happen.",0,0,0,0.9544422030448914,0.9725510478019714,0.9740807414054872,0.0,accept,unanimous_agreement
1184132246,3183,"ok, now fixed",0,0,0,0.9838797450065612,0.847865641117096,0.9038548469543456,0.0,accept,unanimous_agreement
1184514734,3183,"right, done",0,0,0,0.9631369709968568,0.9163886308670044,0.9782338738441468,0.0,accept,unanimous_agreement
1184518466,3183,i surely misunderstood that! i have now fixed things in this way.,-1,-1,-1,0.9775627851486206,0.98186993598938,0.9904347658157348,-1.0,accept,unanimous_agreement
1184547512,3183,"regarding the incompatibility with keys like ""parm_%d"": that kind of key is used when for some reason the handle will not be able to return proper parameter names (e.g. ""gain""). i now fixed this by having this code [code block] both in ::foreachparameter and in ::loadsettings.",0,0,0,0.986351728439331,0.990250289440155,0.9931491017341614,0.0,accept,unanimous_agreement
1184738785,3183,"commit 7c469cdd604c3b44a6b8252ce8562da7d9689519 had almost acceptable versions of `savesettings` and `loadsettings` -- except for the problem of preserving the formatting of the keys. `savesettings` from that commit can now be used verbatim, because the change in `foreachparameter` corrected the keys.",0,0,0,0.9897884130477904,0.994964361190796,0.9830218553543092,0.0,accept,unanimous_agreement
1185460836,3183,"i modified commit 6.2 in the way i think you specified - basically `savesettings` and `loadsettings` are the same as in the commit you pointed out, belonging to the previous iteration. the switching of the key to the parm_%d in case the handle can not provide alphabetic names for keys is now done exclusively in `foreachparameter` - i guess this is right? btw, you said: but in that commit, neither loadsettings or savesettings were calling them? or maybe i am missing something",0,0,0,0.9698136448860168,0.9856369495391846,0.9713393449783324,0.0,accept,unanimous_agreement
1185478435,3183,"true, the previous version did not do that.",0,0,0,0.9362914562225342,0.9781489968299866,0.9903929829597472,0.0,accept,unanimous_agreement
2110637912,6395,"when changing parameters during playback, abrupt volume changes of high amplitude occur: (warning: it may get loud) [a link]",-1,0,0,0.8439887762069702,0.9545249938964844,0.9815497994422911,0.0,accept,majority_agreement
2110810298,6395,"was reporting this [a link] for a chirp and with other parameters, too. i expect this to happen. we do not have any kind of parameter change smoothing in place, so it does so in steps. in this particular case, you are changine the threshold for the limiter, which is like changing the input gain.",0,0,0,0.9728452563285828,0.9874882698059082,0.990625023841858,0.0,accept,unanimous_agreement
2112085388,6395,"testing on w11 with 's latest branch build: audacity-win-3.6.0-alpha-20240514+2d767ac-x64 this shows that with both the new effects the **presets and settings** fail to work: a) the **factory presets/default** fails to restore the default settings, b) whilst the user can set and recall a user preset, these also fail to apply when invoked. _this is technically a regression on 3.5.1 behavior with the old, replaced, effects._",0,0,0,0.9580169320106506,0.991860330104828,0.989343285560608,0.0,accept,unanimous_agreement
2114334140,6395,"thanks for your report! on my side it's also buggy, but less so: changing an effect parameter by applying a preset does not update the slider positions. everything else works, though. could you double-check if this is consistent with your experience? fix commit pushed.",1,1,1,0.9540245532989502,0.9724199771881104,0.9910100698471068,1.0,accept,unanimous_agreement
2115138409,6395,"testing on w11 with your two latest branch builds; audacity-win-3.6.0-alpha-20240516+b7b392b-x64 and audacity-win-3.6.0-alpha-20240516+13bcfb5-x64 i confirm that a) the default slider settings get restored (slider positions) with the use of the factory >default b) the user can set a user preset and when recalled it restores the users slider positions so looks like this works properly now. i can't really vouch for the actual accuracy in use of compressor or limirter as i have no real experience of using such effects - you might want to approach for that. ------------------------------------------------------------------------------------------------------------------- one thing i do note is that the dialogs for the new replacement effects are narrower than the ones they replace - the upshot being that the sliders are narrower than previously. this can be mitigated by expanded the dialog rightwards with click&drag on its right edge **_but_** i am un-convinced that this will be readily ""discoverable"" by many users.",0,0,0,0.6097022294998169,0.9801911115646362,0.8533552885055542,0.0,accept,unanimous_agreement
2115555579,6395,am i testing the correct version? i am using audacity 3.6.0-alpha commit id: 4e4fdb but the new limiter does not behave like any other limiter i've ever used.,0,0,0,0.922859787940979,0.9856926202774048,0.962001383304596,0.0,accept,unanimous_agreement
2115571797,6395,that's the correct version. i'm listening :),1,1,1,0.9735663533210754,0.9962140917778016,0.8646544814109802,1.0,accept,unanimous_agreement
2115642737,6395,"an ""ideal"" (but impossible) limiter prevents the audio from going above a specified threshold level, without affecting audio below that level (other than optional makeup gain), and without introducing distortion. easiest to demonstrate with a generated test tone, though it also applies to real-world audio. here is a 10 second 2khz sine tone, which fades up to a peak level of 0db over 5 seconds, then fades back down to silence: ![a link] after limiting to -5db (chosen to match the new limiter default), i would expect the waveform to look similar to this: ![a link] using the new limiter with default settings, the result looks like this: ![a link] which, after normalizing to 0db looks like this: ![a link]",-1,0,0,0.9101981520652772,0.9677390456199646,0.7353360652923584,0.0,accept,majority_agreement
2115677889,6395,"strange. i get this: ![a link] that was, like you, with default settings: ![a link] that looks correct to me.",-1,0,-1,0.981979250907898,0.8891940712928772,0.9900296330451964,-1.0,accept,majority_agreement
2115697355,6395,"that does not look like a sine wave. i'm guessing it is a square wave, but even so i don't get that result. (i am using the ubuntu 22.04 appimage on ubuntu 22.04)",0,0,0,0.907334327697754,0.8955792784690857,0.9725266098976136,0.0,accept,unanimous_agreement
2115698951,6395,"i cannot reproduce your post-normalization case either. the way this thing works is somewhat similar to the waves l2, the avid pro limiter and various other mastering limiters. the idea of these is that you have a ceiling (which we call ""make-up target"") which already would be a normalized output to whatever you set as your target - assuming material actually hits the threshold. for the case where you don't want any make-up, the target and threshold need to be identical.",0,0,0,0.974478840827942,0.9093478322029114,0.9853160977363586,0.0,accept,unanimous_agreement
2115770713,6395,also tested the same appimage in a clean install of debian in virtualbox and i get the same result.,0,0,0,0.9855095744132996,0.9894365072250366,0.9929952025413512,0.0,accept,unanimous_agreement
2115825329,6395,"right, it was with a square wave. now with a sine: ![a link] any way you could try the exact same on another os ? looks like we have a problem on linux.",-1,0,0,0.9175310134887696,0.9237945675849916,0.702415406703949,0.0,accept,majority_agreement
2116385500,6395,"curiously, on one attempt the effect did change the dynamics, but much more than it should have. i have not been able to repeat this. when i try now, if i set the threshold and make-up target to the same value, the effect does nothing (effectively a no-op).",0,0,0,0.5052850246429443,0.967243492603302,0.5274394750595093,0.0,accept,unanimous_agreement
2117046421,6395,"thanks for your early report, , has confirmed [a link]. looking into this.",1,1,1,0.8275186419487,0.9350205659866332,0.895770251750946,1.0,accept,unanimous_agreement
2117048716,6395,"(ubuntu 22.04) i also see a wrong result after applying limiter with the default parameters to a sine tone with fade in & fade out, although different from 's one: ![a link]",-1,0,-1,0.98507958650589,0.8729293346405029,0.9610527157783508,-1.0,accept,majority_agreement
2117140450,6395,"i was using `abs` instead of `std::abs`, which on linux takes an `int` argument ... fix pushed, please would you give it another shot once the build is ready ?",0,0,0,0.9856917262077332,0.9859765768051147,0.989674150943756,0.0,accept,unanimous_agreement
2117160364,6395,"when resizing the window during playback, the graph drawing stops until the lmb is released: [a link]",0,0,0,0.9825817346572876,0.9901004433631896,0.995740532875061,0.0,accept,unanimous_agreement
2117163304,6395,"yeah, i haven't found how to solve this. i don't get updates when resizing is under way (wxwidgets stuff). at best i could get the straight line to disappear. then it'd look like when you bypass and un-bypass.",0,-1,0,0.8907874822616577,0.8117033243179321,0.9274039268493652,0.0,accept,majority_agreement
2117285689,6395,actually that was an easy fix. please re-test when latest build is ready.,0,0,0,0.748492956161499,0.6445693969726562,0.8488034009933472,0.0,accept,unanimous_agreement
2117402022,6395,testing with commit id: d40c0e i am still seeing the same bug.,0,0,0,0.749366819858551,0.7368674278259277,0.9804004430770874,0.0,accept,unanimous_agreement
2117459263,6395,i beg your pardon: i messed up force-pushing from different machines. [a link] is the fix commit.,-1,-1,-1,0.947539210319519,0.7914556860923767,0.7335686683654785,-1.0,accept,unanimous_agreement
2117506846,6395,testing on w11 with: audacity-win-3.6.0-alpha-20240517+d40c0e6-x64 like i get a break when the dilaog is resized until the lmb is released. but unlike my break is blank withou the joing line that he has: ![a link],-1,0,-1,0.970103681087494,0.94662743806839,0.6376952528953552,-1.0,accept,majority_agreement
2117523667,6395,"yes. the fact that you don't see a line is the improvement brought by 8c2b772cd3aa0e554c9186e2de15a0a6deca1227. i don't think i can possibly get the data updates during resizing, as this seems to block the main thread, where the updates otherwise happen.",0,0,0,0.9668593406677246,0.9664099812507628,0.9862647652626038,0.0,accept,unanimous_agreement
2117697169,6395,"yes, i think it's better with the blank rather than the line. i'm pretty sure folk can live with that, resizing the dialog is not something most users will be doing a lot of.",0,0,0,0.8660233020782471,0.9075176119804382,0.9227128028869628,0.0,accept,unanimous_agreement
2117907095,6395,"ok, that one works, though it introduces a lot more distortion than the nyquist limiter, even with the ""hard limit"" algorithm. the distortion is particularly noticeable on the 3rd harmonic.",0,0,0,0.9729026556015016,0.984982132911682,0.9775732755661012,0.0,accept,unanimous_agreement
2118097592,6395,"during playback, when moving one of the following: **threshold**, **attack** or **release** in the compressor effect, it produces abrupt volume changes. the limiter effect doesn't have such a problem anymore. check this out: [a link] i think this is pretty serious, so i'd like this to be fixed within this pr. however, given the circumstances, i'd want to know what you guys think about it and whether we would want to address this in the next patch release also, i understand this isn't going to be an easy fix, is it?",0,0,-1,0.4734268188476562,0.6936537623405457,0.928354561328888,0.0,accept,majority_agreement
2118120038,6395,oof. yeah that's pretty bad.,-1,-1,-1,0.9879785776138306,0.9916054010391236,0.9947715401649476,-1.0,accept,unanimous_agreement
2118240186,6395,"thanks , it is a bug you caught indeed. note that each time you change the release time, the graph shows the actual attenuation goes back to zero before it converges back towards the target, in a time lapse that i suspect equals your look-ahead (120ms). the mistake i did was to reset the look-ahead state when any parameter gets changed. fix was easy and is pushed. i hope it does the job.",1,1,1,0.9345299601554872,0.9890233278274536,0.989244818687439,1.0,accept,unanimous_agreement
2120085600,6395,"i've discovered that the graph isn't being painted as long as the ""presets & settings"" menu is opened. and then when the menu is closed, a straight line is painted all over the gap. could you fix that?",0,0,0,0.9861184358596802,0.9529579877853394,0.9884838461875916,0.0,accept,unanimous_agreement
2120124390,6395,". in the compressor dialog, the panel containing the transfer function doesn't need to be in the tab order. cf autoduck effect, where in autoduck.h, the class definition for the panel it uses includes the following lines: [code block]",0,0,0,0.9861160516738892,0.9936356544494628,0.9894592761993408,0.0,accept,unanimous_agreement
2122084950,6395,looking into this ...,0,0,0,0.8715084791183472,0.9272610545158386,0.8419907093048096,0.0,accept,unanimous_agreement
2122272667,6395,"just pushed a few commits that alleviate but don't eliminate the problem. what you should now see when closing the menu is a gap, like you do after resizing the graph. it seems to me that the main thread gets blocked rather easily on windows. opening a menu, moving the window, resizing it ... and the data transfer from audio to main thread relies on the main thread being fast, or there is data loss. this explains why the graph isn't deterministic. maybe there is a more reliable way of transmitting the data, i will have to look into this, but not in this pr anymore.",0,-1,0,0.7705572247505188,0.5653014183044434,0.9740841388702391,0.0,accept,majority_agreement
2122286350,6395,"beautiful, thank you!",1,1,1,0.9885815978050232,0.9957194924354552,0.9965540170669556,1.0,accept,unanimous_agreement
2133701522,6395,"testing on w10 with 's latest master alpha build for 3.6.0: audacity-win-3.6.0-alpha-20240527+5f8ee46-x64-msvc2022 the graph now looks continuous: a) when the ""presets and settings"" menu is opened b) when parameter sliders are moved and the lmb is later released",0,0,0,0.9656125903129578,0.9882423281669616,0.9862207174301147,0.0,accept,unanimous_agreement
1159991935,3088,"is there anything left on my side, that is blocking this pr or are we just waiting for someone to review this?",0,0,0,0.8643932342529297,0.9739207029342652,0.9777734875679016,0.0,accept,unanimous_agreement
1160044428,3088,"i think the main blocker for this was the weekend :) the review is already inside our kanban board, so crsib will look at it soon",1,1,1,0.9858362674713136,0.994368612766266,0.9918137788772584,1.0,accept,unanimous_agreement
1160455295,3088,"ptal. i've implemented the 4 xdg base directories. currently, all 4 directories default back to `~/.audacity-data` if it already exists and to `getuserdatadir` on windows. (for backwards compatibility) also, i completely removed the `filelayout_xdg` logic since it would only affect `config` and we would still need to implement the xdg logic manually for `cache`, `data` and `state`, at which point there is no reason to use `getuserconfigdir` only for `config`. for now, `cache` and `state` aren't used anywhere. if you have any suggestions regarding which other old `datadir()` calls should be replaced with `cache`, `config` or `state`, feel free to point them out. i am not too familiar with the various audacity `xml` files, so i don't know, which of them should go to `config` or `data` or `state` etc.",0,0,0,0.9803362488746644,0.990326464176178,0.9615849256515504,0.0,accept,unanimous_agreement
1160462868,3088,here are some files/directories that currently still use `datadir()`: - lastlog.txt - genres.txt - journal.txt - journallog.txt - eqcurves.xml - eqdefaultcurves.xml - eqbackup.xml - ffmpeg_presets.xml - chains - macros - nrp - plug-ins - theme i might have missed some.,0,0,0,0.9835633039474488,0.9922242164611816,0.9901298880577089,0.0,accept,unanimous_agreement
1160482524,3088,"oops. i don't have a windows/mac machine, so i missed a typo. sorry, can you approve the ci/cd again.",-1,-1,-1,0.9906347393989564,0.9921941757202148,0.9953566193580629,-1.0,accept,unanimous_agreement
1160513869,3088,"hmm, usually only one approval is needed. anyway, the job is running now",0,0,0,0.9808839559555054,0.9219754338264464,0.9631872773170472,0.0,accept,unanimous_agreement
1160557296,3088,"instead of having to do all the path manipulation and environment variable checks manually, i think it would be better to just use the glib functions to retrieve the appropriate directories: * `xdg_state_home` -> `get_user_state_dir()` * `xdg_config_home` -> `get_user_config_dir()` * `xdg_cache_home` -> `get_user_cache_dir()` * `xdg_data_home` -> `get_user_data_dir()` these will then handle testing the environment variable for existence and forming the default path if it doesn't exist. also, having it keep using the old directory if it exists doesn't seem very user-friendly to me. if it does that, then documentation becomes more complicated because it has to deal with 2 possible directories, and downstream bug reports could become more complex with having to explain this. it would be better in my opinion to just do a single transition to the new directory and remove the old one.",0,0,0,0.9693353772163392,0.9921600222587584,0.9879639148712158,0.0,accept,unanimous_agreement
1160589952,3088,"can you clarify, what do you mean by ""transition""? do you suggest, that we 1) detect, if `~/.audacity-data` exists, and automatically move the files to their new locations or 2) just ignore `~/.audacity-data` and the user must manually migrate it after updating audacity option (1) would be very hard to get right, because the single `~/.audacity-data` directory must be split between the 4 xdg directories. also, this is a (potentially) destructive and non-reversible operation (if something goes wrong, the user can't just downgrade their audacity version to get back to a working condition). p.s. sure, using glib sounds reasonable, i'll try refactoring it to use glib in a bit. btw, these functions return `gchar`. it seems to be just a typedef of `char`, but do you know, if we can rely on that being true for all platforms/versions?",0,0,0,0.922215700149536,0.8969326019287109,0.9817696213722228,0.0,accept,unanimous_agreement
1160725924,3088,"i've refactored the code to use `glib` and `get_user_*_dir()`, but it seems that `glib` is normally not used for building `libraries/` so i had to manually add `glib` to `libraries/lib-files/cmakelists.txt`. i am not sure, if i did that right (i just copy-pasted that line from `src/cmakelists.txt`).",0,0,0,0.969947099685669,0.9782699346542358,0.973134458065033,0.0,accept,unanimous_agreement
1161456037,3088,linux build has failed as well!,-1,-1,0,0.8979490995407104,0.9205362200737,0.7263401746749878,-1.0,accept,majority_agreement
1161488617,3088,"yeah. it seems that ci uses an older glib version, that doesn't have `g_get_user_state_dir`. it seems to be only available since 2.71.1. what do you think we should do: 1) update required glib version 2) remove `filenames::statedir` and `state` from `dirtarget` 3) don't use glib at all and revert to manually checking the environment variables",0,0,0,0.968331813812256,0.987326443195343,0.975852072238922,0.0,accept,unanimous_agreement
1161494177,3088,"we will not upgrade glib version on ci any time soon, as it will break appimage for users on older gnu/linux versions. otherwise it's your call",0,0,0,0.9639440178871156,0.9738478064537048,0.9840306043624878,0.0,accept,unanimous_agreement
1161500506,3088,"requested to use glib requested to add `state` please decide, which request should be reverted. :sweat_smile: i would generally prefer to just remove the glib dependency and revert to manual env lookup, but this is a weak preference.",0,0,1,0.5722600817680359,0.9837713837623596,0.9406689405441284,0.0,accept,majority_agreement
1161509243,3088,"me too, to be fair.",0,0,0,0.7849941849708557,0.8808072209358215,0.949779450893402,0.0,accept,unanimous_agreement
1161524684,3088,"if you really want to use the state directory, then more work would be needed probably. the xdg state directory was only added to the spec last year, so there may be issues with the base directories not existing on older systems, so you need to ensure the entire directory path exists, not just the audacity subdirectory. doesn't appimage bundle its dependencies into the image?",0,0,0,0.9861378073692322,0.9931829571723938,0.9913629293441772,0.0,accept,unanimous_agreement
1161530471,3088,"currently, the code calls `filenames::mkdir` that uses `wxfilename::mkdir` with `wxpath_mkdir_full` [code block] so that shouldn't be an issue.",0,0,0,0.9896498918533324,0.9942650198936462,0.9878746867179872,0.0,accept,unanimous_agreement
1164031430,3088,"so, what's the conclusion here? is there anything else i can do to get this pr accepted?",0,0,0,0.9721307754516602,0.988410234451294,0.9885979890823364,0.0,accept,unanimous_agreement
1164130962,3088,i'll do a hopefully final round today,0,0,0,0.8736450672149658,0.950800895690918,0.9805205464363098,0.0,accept,unanimous_agreement
1164416336,3088,"can you approve the ci again, please.",0,0,0,0.9814465045928956,0.9903700947761536,0.9938350915908812,0.0,accept,unanimous_agreement
1165624833,3088,can you please add ruro to the aboutdialog?,0,0,0,0.9881729483604432,0.9935872554779052,0.9959269165992736,0.0,accept,unanimous_agreement
1900617422,5874,"sorry for the single large commit. there was a lot of trials before i came to that solution, and with the many api changes i'd have to rewrite integration with the older interfaces to break this down.",-1,-1,-1,0.9880450367927552,0.9923003911972046,0.990518033504486,-1.0,accept,unanimous_agreement
1908155495,5874,rebased after merging speed improvement pr.,0,0,0,0.9852195978164672,0.9844750165939332,0.9908124804496764,0.0,accept,unanimous_agreement
1919196982,5874,"addressed the most critical of your comments, you may do another review iteration.",0,0,0,0.9671626687049866,0.9755232334136964,0.9634665250778198,0.0,accept,unanimous_agreement
1927050487,5874,"when importing multiple loops at once, i'm getting wrong results basically in two different ways: 1. in some cases (when importing [a link], for example), one of the loops is stretched by the wrong amount. however, when importing this exact loop all by itself, it gets auto-stretched correctly, following the project's tempo. 2. in some other cases (e.g. when importing [a link], it not only detects the tempo incorrectly but also fails to stretch the remaining parts to match that tempo.",-1,0,0,0.5024977326393127,0.8366397023200989,0.8398375511169434,0.0,accept,majority_agreement
1927201760,5874,"i don't know how much of the problems you've found this covered, but at least some of it: there already is a bug on master. 1. import 100_vintagedrums_03_tl.wavv, it gets correctly auto-detected. 2. import jbk_170_brk_full_drums_stig_v1.wav, this one too. 3. import again 100_vintagedrums_03_tl.wav: it gets detected as 170. if the 2nd file hadn't metadata, there wouldn't be a problem. it's my fault, i have to fix this, but it should provide a separate fix. would you mind re-testing these two problems with files that have no metadata, just their bpm in the title? to be 100% sure that they don't have metadata, you may re-export your loops from audacity.",0,0,0,0.9412146210670472,0.9500072598457336,0.9734284281730652,0.0,accept,unanimous_agreement
1927224675,5874,dedicated ticket for that issue: [a link],0,0,0,0.9816188216209412,0.9908716082572936,0.9940738081932068,0.0,accept,unanimous_agreement
1928701816,5874,"i haven't followed this discussion, but i'm reminded of your attempts to use `std::for_each` with an execution policy. did you make that work, at least for windows, and did it really save time?",-1,0,0,0.8234817981719971,0.9799354672431946,0.9692742228507996,0.0,accept,majority_agreement
1928917199,5874,"no i haven't. behaviour of the progress bar was strange, and i haven't looked further into that.",-1,0,0,0.8694605827331543,0.5499842762947083,0.6150649785995483,0.0,accept,majority_agreement
1102656440,2831,"steve agrees with me about not breaking macros, so changing localized names independently from internal names. i reviewed how nyquist parses names, and it does not make this similarly easy to do -- to update a localized name while not changing the identifier that macros might be using. i intend to change nyquist.cpp and i can push that commit onto vitaly's branch. then the .ny files can update certain localized nyquist effect names as leo prefers them, but without the compatibility problem. meanwhile, exploring the source for steve harris' ladspa plug-ins, i found this bit about the terminology of its simple inversion effect: [code block]",0,0,0,0.8682648539543152,0.9220322370529176,0.9734679460525512,0.0,accept,unanimous_agreement
1102666167,2831,"vitaly and i are disagreeing about the proposed implementation. in this first attempt, the tree that leo specified is essentially replicated in one place in the source code. i don't find that acceptable. instead, i say category information should be associated with each individual effect in the code that defines that effect. the code that builds the effect menu should iterate all effects and gather their category information in a generalized way according to some new extension of the effect interface, then sort them without special hardcoded information about any one effect. i have pointed out that certainly in the case of nyquist effects, some other nyquist programmer wanting to extend audacity should have means to specify in the .ny file how to categorize that effect, without rebuilding audacity. i say build into audacity now the code that interprets a new kind of special nyquist comment, then use that comment in .ny files.",-1,0,-1,0.9140893220901488,0.6936680674552917,0.5242358446121216,-1.0,accept,majority_agreement
1102717441,2831,"i think extra effort is needed for open-endedness. if you really do want to go beyond my incomplete suggestion, i would encourage it. the value returned by the new virtual function of effect would not be of an enumeration type. it would be a componentinterfacesymbol pairing an identifier and a translatablestring. effect.h could have extern declaration of some componentinterfacesymbol constants commonly used, including the ones specified in the issue. but pluginmenus.cpp would not require the returned values to be from this limited set of choices. what i described would not provide a way to order the categories extrinsically. but if agrees that a rule like major sort by the localization of the category name is acceptable, then that's enough.",0,0,0,0.9598422050476074,0.96261066198349,0.9202225804328918,0.0,accept,unanimous_agreement
1149685124,2831,i'm done with this round of review. there are some things to fix but the basic design is good.,0,1,1,0.563321053981781,0.7609071135520935,0.9479758739471436,1.0,accept,majority_agreement
1151013946,2831,"in the recent pr update i've also attemted to fix the issue metioned in the discrord channel about bundled effects being grouped by publisher, as well as other issues metioned by -licameli in this thread earlier",0,0,0,0.9868035912513732,0.9862743020057678,0.9914870262145996,0.0,accept,unanimous_agreement
1151061722,2831,"testing on w10 with you latest branch audacity-win-3.2.0-alpha-20220609+fa94517-x64 a) if i purge the audacity settings folder (for ootb factory settings - new install) then i no longer see ""steve daulton"" menu entries. b) if i upgrade to your latest branch from 3.1.3 or latest 3.2.0 master then i **_do_** see the ""steve daulton"" entries in the analyze and tools menus. c) if after b) i do a reset configuration then i _**still**_ see the ""steve daulton"" entries in the analyze and tools menus. given that **many** of the installers/users of 3.2.0 will be upgraders, it is probably important to fix b)",0,0,0,0.940989911556244,0.9914345741271972,0.9920576214790344,0.0,accept,unanimous_agreement
1152105091,2831,"testing on w10 with 's latest branch build audacity-win-3.2.0-alpha-20220609+831286a-x64 ### 1) analyze menu following an upgrade from 3.1.3 to this branch build there is no longer a ""steve daulton"" menu entry in the analyze menu - but note that the two steve daulton plug-ins are duplicated in the analyze menu: ![a link] ### 2) tools menu following an upgrade from 3.1.3 to this branch build the tools menu still has a ""steve daulton"" menu entry - and here too the sub-menu items are duplicated: ![a link]",1,0,0,0.5064272880554199,0.9878435134887696,0.9825690984725952,0.0,accept,majority_agreement
1152108779,2831,"-licameli - i could do that but at the moment this is only a developer branch build it is not in master yet. normally we only log bugs that are in the master builds. but if you really want i can break with _""tradition""_ and log this issue against 's branch build, please advise. _btw this may be an issue if multiple versions of audacity are installed - but primarily it's an issue for anyone with a single version of audacity upgrading from an earlier audacity version to 3.2.0_",0,0,0,0.933832585811615,0.9812344908714294,0.90911602973938,0.0,accept,unanimous_agreement
1152717224,2831,it happens even if there is only a single instance of audacity installed at the same location as the older version?,0,0,0,0.9741955399513244,0.991430938243866,0.9910549521446228,0.0,accept,unanimous_agreement
1152902698,2831,"- so i tested on my wife's pc simulating an upgrade from 3.1.3 to your 3.2.0 branch and all looks good when i do that. for the ""normal"" upgrading user with a single audacity version all seems fine. 1. the existing and only version of audacity on that pc was 3/1/3 installed in the default location c:\program files\audacity 2. i upgraded to 3.1.3 - using the exe 3. then installed your branch build (zip not exe) 4. observe: the egat menus: ### effect menu ![a link] ### analyze menu ![a link] ### generate menu ![a link] ### tools menu ![a link] so no sign of ""steve daulton"" menu entries and no duplicate entries. ### reversion i also simulated a user who upgrades to 3.2.0, doesn't like it for whatever reason, and downgrades back to 3.1.3 (or earlier). all is fine with the older menu structure for the egats",1,1,1,0.950189769268036,0.900089681148529,0.7262302041053772,1.0,accept,unanimous_agreement
1152912171,2831,"peter removed our last doubts. i merged the branch, although i broke my usual rule that branches should be rebased first onto latest master. vitaly is taking time off for two weeks and i didn't want this to wait.",0,0,0,0.7690656781196594,0.6811130046844482,0.9456340670585632,0.0,accept,unanimous_agreement
1710432398,5139,"i missed that commit on 2-of-6. i looked at it again, but couldn't figure out the reason behind it ? for the spectrum analyzer it seems simpler to me to be returned a `samplecount` and then check whether this exceeded the maximum allowed number of samples.",0,0,0,0.911347270011902,0.9778873324394226,0.9807978272438048,0.0,accept,unanimous_agreement
1710542180,5139,i wrote a longer comment but the github page ate it,0,0,0,0.978209912776947,0.9051275253295898,0.9814629554748536,0.0,accept,unanimous_agreement
1710545259,5139,"that's really annoying. i wrote a careful long line comment and chose ""request changes"" from the top right but it lost my long comment.",-1,-1,-1,0.9913612008094788,0.9931433200836182,0.9935564398765564,-1.0,accept,unanimous_agreement
1710557316,5139,"who said things should be as simple as possible, but not simpler? this is a case of ""not simpler.""",0,0,0,0.7409766316413879,0.9537088871002196,0.9343823194503784,0.0,accept,unanimous_agreement
1710896715,5139,"here is a test case: make neighboring clips of equal duration. generate a tone in one and a tone of another frequency and the same amplitude in the other. no stretches yet. select all and plot spectrum. see two peaks equally high. (not two spikes, because of the realities of spectral leakage, unless you use rectangular windows and choose frequencies as exact multiples of the inverse of the sample window duration. you might also like to choose linear, not log frequency scale.) ...",0,0,0,0.9691250920295716,0.9754503965377808,0.9767281413078308,0.0,accept,unanimous_agreement
1710900560,5139,"... if that is the control, the experimental would be two clips that sound the same as the control as played, but have unequal stretches. for instance make the first clip half as long as in the control but stretch it to 2x duration, with the second clip as before. then plot spectrum. what would you see? i think you should see nearly the same plot, but i predict you will see unequal heights. a clip stretched more will be under-weighted and another stretched less or compressed, over-.",0,0,0,0.9400765895843506,0.5945727229118347,0.9138610363006592,0.0,accept,unanimous_agreement
1710902686,5139,"so maybe this bug fix allows some data to be plotted instead of nothing, but it’s bogus. what should be done? - ignore this as an unlikely use case? - detect clip stretch mismatch and display an error rather than bogus data? - do the hard work of more proper weighting of values? if the last, maybe the way to do it is make a spectrum analyst for each clip separately, then write something that makes the correct weighted sums of several analyst results as one analyst object to be used later in plotting.",0,0,0,0.6394556164741516,0.9441958665847778,0.9808635711669922,0.0,accept,unanimous_agreement
1710919949,5139,"yet another possibility: downgrade the priority of this bug, if in fact, present master doesn’t freeze but only fails to plot anything. then kick the can down to a later release. or just detect failure of `getfloats` and give the user an error dialog explaining the problem, instead of the quiet failure to show any data, or showing bogus data.",0,0,0,0.8136453032493591,0.914371907711029,0.9821684956550598,0.0,accept,unanimous_agreement
1711251202,5139,"i believe p4 is already a pretty fair priority for it, but i definitely agree that it can be kicked down to the later release",1,0,0,0.6612455248832703,0.8687494397163391,0.8884385228157043,0.0,accept,majority_agreement
1711313926,5139,"yes, in that case, the result would be obviously unexpected.",0,0,0,0.9497950673103333,0.5480636358261108,0.938911199569702,0.0,accept,unanimous_agreement
1711317303,5139,"now i read all your comments till the last. i say we merge this. it's imperfect, but at least it will work if you change project tempo and analyse over several clips. then let's see if complains come our way.",0,-1,0,0.9066227078437804,0.505942702293396,0.8533362746238708,0.0,accept,majority_agreement
1711326388,5139,i do not approve this for merge.,-1,0,0,0.7682929635047913,0.6372578740119934,0.8288009762763977,0.0,accept,majority_agreement
1711338150,5139,this bug has low priority. it is not a crash or freeze bug. rebasing 4th of 6 into the effect changes or refactoring tasks are far more important.,0,0,0,0.9467342495918274,0.944036066532135,0.8482423424720764,0.0,accept,unanimous_agreement
1711352248,5139,i regret that. the work is now done and it does bring an improvement. splitting hairs was more time consuming - although leading to interesting discussions.,-1,-1,-1,0.9844538569450378,0.5903264284133911,0.9533270597457886,-1.0,accept,unanimous_agreement
1711388259,5139,reasoning about the correctness of the changes you propose is my duty. i did it. i'm not satisfied.,-1,-1,-1,0.9167512059211732,0.8193686604499817,0.9267702102661132,-1.0,accept,unanimous_agreement
1712473388,5139,testing on w10 with 's branch build for this: audacity-win-3.4.0-alpha-20230908+519eafe-x64 when i now try to run plot spectrum on a stretched clip i get this error message. ![a link] i find that message very opaque and unhelpful to the user. now i figured out that if i rendered the stretched track then i would be able to plot the spectrum - but that's _**only**_ as a result of the discussions i had with matthieu on thursday. maybe the error message could suggest that the user renders the track and then retries.,-1,-1,-1,0.976084530353546,0.8950611352920532,0.8315920233726501,-1.0,accept,unanimous_agreement
1717304106,5139,note that this pr would benefit from the [a link] commit in #5138 : then we'd know for sure whether it's because of stretched data or not.,0,0,0,0.9881249666213988,0.9851709008216858,0.9934096932411194,0.0,accept,unanimous_agreement
1719145924,5139,"tested. on macos, after a proper error message is displayed, a blank **frequency analysis** dialog is displayed that cannot be dismissed:",0,0,0,0.985827088356018,0.9809834361076356,0.988663613796234,0.0,accept,unanimous_agreement
1723427681,5139,tested,0,0,0,0.9697903394699096,0.957400381565094,0.7421080470085144,0.0,accept,unanimous_agreement
1825727707,5570,"of course, i'll do a proper squash before merging. thank you!",1,1,1,0.981138288974762,0.9845513701438904,0.9898502826690674,1.0,accept,unanimous_agreement
1828353489,5570,"#### 1) when importing a loop after another loop with a different tempo, stretching is applied 1. in a clean project, import a loop of 136 bpm 2. click ""yes"" in the appeared dialog 3. observe: the project tempo is set to 136 bpm 4. close the track 5. import a loop of 89 bpm 6. click ""yes"" in the appeared dialog 7. observe: the project tempo is set to 89 bpm (which is correct), but the 50% stretching is applied to the clip #### 2) when auto-stretching an imported loop, the algorithm doesn't seem to take into account its stretch ratio 1. set the project tempo to 90 bpm 2. import a [a link] 3. click ""no"" in the music import dialog 4. observe: the loop's speed is 70% (70.3125% to be precise) 5. with snapping enabled, shrink the loop to fit exactly 2 bars 6. observe: the loop's speed is now 140.625% 7. compare stretch ratios – 1.422 vs 1.406 thus, it was supposed to go with the lesser one – 1.406 – which in this particular case would mean it should've **shrunk** the clip to 2 bars @ 90 bpm, not expanded it up to 4 bars @ 90 bpm. #### 3) undo resets the stretch ratio when undo-ing 1. set the project tempo to 120 bpm 2. import a clip of 90 bpm 3. in the music import dialog, click no 4. observe: the clip is shrunk (133% speed) 5. by holding alt (option), drag the edge of the clip and release to shrink or stretch the clip even more 6. ctrl (cmd) + z actual result: back to 100% speed exp. result: 133% speed #### 4) when importing a clip and auto-stretching it, the imported clip retains its original length and speed until you hover the mouse over the clip's title bar 1. import a clip that has a tempo different from the project's one 2. click no in the music import dialog in order to perform auto-stretching 3. observe: no speed value at the top right corner of the clip's title bar 4. hover over the clip's title bar 5. observe: now the speed value pops up and the clip shrinks (expands) instantaneously [a link]",0,0,0,0.9171334505081176,0.9869481325149536,0.9872811436653136,0.0,accept,unanimous_agreement
1831475562,5570,"the problems you reported should be fixed now. i also simplified the regex and made it more conservative, too. essentially, ""bpm"" (case-insensitive) must be found after the bpm value (will add something to the qa list). if this is not the case, i'm working on a dsp-based plan b anyway, which would give a second chance for these files to be tempo-detected. thanks, those were all good catches.",1,1,1,0.9580302834510804,0.9535729289054872,0.98531973361969,1.0,accept,unanimous_agreement
1831904650,5570,"**music import** preference isn't working now in the updated branch. regardless of the selected option in the music imports section, a musical file is imported as a regular audio file.",0,0,0,0.9864062666893004,0.9917638301849364,0.9770233035087584,0.0,accept,unanimous_agreement
1831927208,5570,"i just tried it again, and it works for me. could it be because the file you import doesn't have ""bpm"" in its title? [a link]",0,0,0,0.9791879057884216,0.9531638026237488,0.9843377470970154,0.0,accept,unanimous_agreement
1833350761,5570,"just realizing that i've only been doing tempo detection when only one file is imported at a time. i'd keep the multiple-file import in a follow-up ticket, because the desired behaviour isn't so simple. if the user has set her preference to either auto-configure or do-nothing, then i suppose the behaviour would be almost as it is now, i.e., either do nothing or switch to b&m and auto-stretch, not touching the project tempo. if the preference is on ask-me-each-time, though, the dialog might need be changed. also, the preference's wording might need be generalized.",0,0,0,0.9450860023498536,0.966593861579895,0.9552161693572998,0.0,accept,unanimous_agreement
1833366100,5570,follow-up ticket regarding multiple-file import: [a link],0,0,0,0.9846707582473756,0.9833070039749146,0.9960581064224244,0.0,accept,unanimous_agreement
1838986898,5570,"- in beats and measures mode, when selecting ""no"" in the music import dialog, the imported clip gets auto-stretched. ctrl-z should then undo the import, rather than undoing the auto-stretching of the clip: [a link] - in minutes and seconds mode, when selecting ""no"" in the music import dialog, the imported clip isn't auto-stretched. ctrl-z should then undo the import right off. currently, the first attempt to ctrl-z doesn't do anything (the menu entry is ""undo automatic music configuration""), and only the second one undoes the import: [a link] this doesn't work on macos. cmd + fn + f6 should enter tabulation mode, but it doesn't.",0,0,0,0.968469738960266,0.9852044582366944,0.9809088706970216,0.0,accept,unanimous_agreement
1840307532,5570,"just pushed a fix for both bullet points 1 and 2. as discussed and clarified, the tab-traversing item is actually only relevant to windows ; i wasn't aware such functionality wasn't available on mac. cheers!",1,1,1,0.9864206314086914,0.9929347634315492,0.9950709342956544,1.0,accept,unanimous_agreement
1840546250,5570,tested,0,0,0,0.9697903394699096,0.957400381565094,0.7421080470085144,0.0,accept,unanimous_agreement
1867479241,5570,-licameli i'm addressing your comments on #5791.,0,0,0,0.9845821261405944,0.9699413776397704,0.9738203287124634,0.0,accept,unanimous_agreement
1978874461,6094,rebased unchanged onto updated dependency,0,0,0,0.987637996673584,0.9874918460845948,0.9942604303359984,0.0,accept,unanimous_agreement
1980980352,6094,rebased unchanged onto updated dependency,0,0,0,0.987637996673584,0.9874918460845948,0.9942604303359984,0.0,accept,unanimous_agreement
1981029250,6094,is destination master already ?,0,0,0,0.9881104230880736,0.992511510848999,0.9938481450080872,0.0,accept,unanimous_agreement
1981083237,6094,i corrected the base branch,0,0,0,0.9865869879722596,0.9758853316307068,0.9916845560073853,0.0,accept,unanimous_agreement
1981323169,6094,"the known crash bisects to 3fa777844e0bdee147d5d6f8a8b7dfff109eef85 i hoped i could remove those complications, and i verified that generating stereo pluck words. but mono pluck crashes, as does tone or noise either mono or stereo.",0,0,0,0.9402201175689696,0.94383043050766,0.9911593794822692,0.0,accept,unanimous_agreement
1981658454,6094,"please re-commence review of the commit sequence from the beginning and dismiss your first review if satisfied that there are no crashes. but it’s not done yet. expect more steps in this transformation. yet i think that at last, this will be the last pr of this big fix of the foundations.",0,0,0,0.9382646679878236,0.9692373871803284,0.951842188835144,0.0,accept,unanimous_agreement
1983152161,6094,"reviewed up to ""wavechannel no longer contains waveclipholders..."" inclusively.",0,0,0,0.9827420115470886,0.9835323095321656,0.993794322013855,0.0,accept,unanimous_agreement
1983893089,6094,rebased onto updated base branch. some minor changes removing extraneous semicolons and improving commit comments. the commit adding swapchannels and makenarrow was removed. one commit adding some assertions was added.,0,0,0,0.9866570830345154,0.9832100868225098,0.9815265536308287,0.0,accept,unanimous_agreement
1987286133,6094,"apologies for all the force-pushes. please review at least from ""the width of a widechannelgroupinterval is not immutable"" onward.",-1,0,-1,0.9142716526985168,0.9832682013511658,0.8944066762924194,-1.0,accept,majority_agreement
1988910087,6094,"sorry, more commits to review. i decided there is something still unsatisfactory in transactions. it's not strictly part of the clip restructuring but it's not correctly exception-safe. also 's debugging of import performance calls to our attention, the need to avoid unnecessary transactions.",-1,-1,-1,0.9741644263267516,0.9913066029548644,0.9753207564353944,-1.0,accept,unanimous_agreement
1989013561,6094,let's leave that alone. at least one place where compilation will fail is where `widesamplesource` is constructed in `pertrackeffect.cpp`. `widesamplesource` lives in `lib-mixer` which doesn't know `lib-wave-track` but uses the `widesamplesequence` abstraction.,0,0,0,0.9846087098121644,0.9937238097190856,0.9866397976875304,0.0,accept,unanimous_agreement
1989037200,6094,i found this in your `stretchingsequenceintegrationtest.cpp` [code block] you can decide what to do about it later,0,0,0,0.9867078065872192,0.9911231994628906,0.9931204319000244,0.0,accept,unanimous_agreement
1991546851,6094,i have fixed the infinite recursion.,0,0,0,0.9805377125740052,0.5238373875617981,0.9889792203903198,0.0,accept,unanimous_agreement
1991606728,6094,force pushed onto updated base branch,0,0,0,0.986333429813385,0.9923046231269836,0.9933912754058838,0.0,accept,unanimous_agreement
1992243484,6094,force-push with some squashing,0,0,0,0.9771949648857116,0.9834538698196412,0.8246998190879822,0.0,accept,unanimous_agreement
1205109984,3229,will you soon fix build failures?,0,0,0,0.968825101852417,0.9862200021743774,0.992210865020752,0.0,accept,unanimous_agreement
1225587075,3229,i'm done!,1,1,1,0.6226689219474792,0.8650074005126953,0.7979955077171326,1.0,accept,unanimous_agreement
1227393112,3229,"i see you have force-pushed some changes, but this is not yet rebased onto recent master, and i understand there will be conflicts to resolve.",0,0,0,0.959281325340271,0.9814618229866028,0.989527463912964,0.0,accept,unanimous_agreement
1952546660,5980,"you have a small typo vitaly - it should say di**s**abled ![a link] plus the consistency>spelling page in the manual (and on manual pages) has long had ""**built-in**"", not ""builtin"" or ""built in"" ![a link] ------------------------------------------------------------------------------------------------------- but otherwise all seems to work fine",0,0,0,0.5987570881843567,0.9160441160202026,0.6109439730644226,0.0,accept,unanimous_agreement
1966391672,5980,last branch update aims to fix compilation and keyboard navigation issues on platforms other than win. remaining accessibility problems are yet to be fixed,0,0,0,0.9828063249588012,0.9834121465682985,0.9885789155960084,0.0,accept,unanimous_agreement
1966626215,5980,testing on w10 with 's latest branch build: audacity-win-3.5.0-alpha-20240227+067c5e1-x64 the list of egats is still not in strict alphabetical order - rather it has alphabetically ordered subsections. a) this makes it harder to use. b) it is not really necessary as the user can filter by type to see the subsections.,0,0,0,0.9720120429992676,0.9921562671661376,0.987753689289093,0.0,accept,unanimous_agreement
1966806406,5980,testing on w10 with 's latest branch build: audacity-win-3.5.0-alpha-20240227+95f0559-x64 that looks better to me now with proper alphabetic ordering. ![a link],1,0,1,0.530480146408081,0.920517921447754,0.8841295838356018,1.0,accept,majority_agreement
1971224746,5980,"testing on w10 with 's latest branch build for this: audacity-win-3.5.0-alpha-20240229+0df2b93-x64 i see we now have an additional filter for category (type of egat) the cute thing is that the default setting you get for category depends on the way you get to the plugin manager, so coming from **effect>plugin manager** will default to category **effect** and similar for the other egat categories. _i just hope that users are curious enough to explore the category filter and realize that there is still an **all** category choice._",1,1,1,0.936537742614746,0.843666672706604,0.9529748558998108,1.0,accept,unanimous_agreement
1983190805,5980,"testing on w10 with 's latest branch: audacity-win-3.5.0-alpha-20240306+c6c5a1c-x64 a) the cycling based on initial letter now seems good b) if you are lower in the list that the first letter you type it will go back and find the egats starting with that letter ------------------------------------------------------------------------------------------------- but i observe a small oddity with the alphabetic ordering of the list. a couple of my vst/vst3 plugins are out of order at the bottom of the list. this does not appear to be a vst/vst3 problem per se as i have other vst/vst3 plugins further up the list which are in the correct alphabetic order. ![a link] interestingly though if i use ""i"" or ""m"" as my first letter it cycles through the correctly ordered ones and then these out of order ones at the bottom and then cycles back up.",0,0,0,0.6548634767532349,0.7246671319007874,0.7933021187782288,0.0,accept,unanimous_agreement
1985475978,5980,". having c as the access key for category has created a duplicate, as cancel also uses c. suggest you change the access key of category to a. also as noted above by , the alphabetic ordering should not be case sensitive.",0,0,0,0.986718475818634,0.9901228547096252,0.9812456369400024,0.0,accept,unanimous_agreement
1985649918,5980,"ahhhh, so that was the problem - thanks",1,1,1,0.91987943649292,0.9768532514572144,0.966436505317688,1.0,accept,unanimous_agreement
1985778620,5980,this dialog is going to be the closest thing to perfection we have in this app,0,0,1,0.8264181017875671,0.906793773174286,0.5485001802444458,0.0,accept,majority_agreement
1985784330,5980,i'm certainly liking it a lot :-),1,1,1,0.9922946691513062,0.991943359375,0.9915846586227416,1.0,accept,unanimous_agreement
1988877315,5980,testing on w10 with 's latest branch for this: audacity-win-3.5.0-alpha-20240311+dcc70d2-x64 the alphabetic ordering now properly ignores case: ![a link],-1,0,0,0.8325002193450928,0.9902136921882628,0.9685270190238952,0.0,accept,majority_agreement
1991694746,5980,"these two issues can be reliably reproduced: #### 1. on windows, when clicking into a checkbox to enable a plugin/effect, it wrongly clicks in a different row: [a link] #### 2. on macos, when double-clicking on an empty row in the plugin manager, audacity crashes. ___ #### 3. audacity crashes after having disabled some built-in effect(s), then switching the category to generator and trying to rescan. ##### example 1: [a link] ##### example 2: [a link] #### 4. audacity may also freeze sometimes with or without the ""audacity support data"" dialog popping up when performing pretty much the same set of actions, i.e.: 1. effect > plugin manager 2. disable one-two effects 3. click rescan 4. click cancel to abort scanning 5. click ok to dismiss the dialog 6. select category: generator 7. click rescan ##### example 1 [a link] ##### example 2 [a link] #### 5. and lastly, much more rarely audacity may freeze when canceling scanning. for this one, i don't have a screen recording.",0,0,0,0.9470401406288148,0.9686359167099,0.9879899621009828,0.0,accept,unanimous_agreement
1991995813,5980,"i cannot reproduce this on w10 _well, i can if i have run older versions and get multiple copies of the same egat - buut not if i clear the audacity settings folder before launching the latest branch build for this._",0,0,0,0.9743977785110474,0.8669610619544983,0.9832524061203004,0.0,accept,unanimous_agreement
1991999148,5980,i cannot reproduce this on w10,0,0,0,0.9442771673202516,0.8936751484870911,0.9829597473144532,0.0,accept,unanimous_agreement
1992010377,5980,i can never get to the **cancel** button on the **rescan** dialog anything like quickly enough - so i find myself unable to test this.,-1,0,0,0.9499174356460572,0.5886834859848022,0.9035140872001648,0.0,accept,majority_agreement
1998064354,5980,"nice catch! when i was debugging this issue i've found out that to reproduce this you'll need to have multiple rows with equal values in the column and enable sorting for this column. ""type"" is a best option.",1,1,1,0.986283004283905,0.9851513504981996,0.9944444298744202,1.0,accept,unanimous_agreement
1998384156,5980,it seem that all 2-5 crashes/freezes may have same origin. at least i could reproduce any of 3-5 after i caught and fixed second issue.,0,0,0,0.9843324422836304,0.9730369448661804,0.9853832721710204,0.0,accept,unanimous_agreement
1999263060,5980,"testing on w10 with 's latest branch build for this: audacity-win-3.5.0-alpha-20240314+cfb3b3a-x64 the list of **types** has had ""effects"" trimmed from them as per 's request and ""native audacity"" is there for audacity supplied egats (thanks for that) ![a link]",1,1,1,0.7287164330482483,0.9200707674026488,0.981663465499878,1.0,accept,unanimous_agreement
1999735245,5980,"testing on w10 with 's latest branch build for this: audacity-win-3.5.0-alpha-20240314+cfb3b3a-x64 a few posts ago in this thread requested that in the type field we should lose the term ""effect"" from the type listings as not all egats are effects. and this is now done as reported above. **but** in the egat lists the non-effect egats show as ""**built-in effects**"" in their path listing: ![a link]",-1,0,0,0.7121844291687012,0.9833479523658752,0.9715193510055542,0.0,accept,majority_agreement
2011886707,5980,"testing on w10 with 's latest branch build for this: audacity-win-3.5.0-alpha-20240320+4f4b2e0-x64 from a user and usability perspective all seems fine but with one small oddity/niggle - and that is the behavior of the space-bar shortcut with multiple selections (basically it acts as a toggle). a) if you select a single egat in the displayed list and press the space-bar it toggles the enabled/disabled status of that selected egat. all well and good and as expected. b) but if you make a selection of multiple egats in the displayed list (with shift or ctrl modified selection) and press the space-bar it toggles the entire selection based on the status of the **last** egat that you select- rather than toggling the status of each individual egat in the list based on its current status (and it is topmost not the first one you select). **is this intended and desired behavior ?** is it what a user would expect ? i would have thought that most users would expect a toggle of existing status for all selected egats _(my ""mystery-shopper"" thought so too when i ran this past her)_. - what would vi users expect in this case ? btw if you make a multiple egat selection with a shift modified click to select a contiguous range of egats, then the toggle is based on the status of the whichever egat you clicked on second to make the contiguous selection. ----------------------------------------------------------------------- str 1. effect > plugin manager 2. set type filter to native audacity 3. observe: classic filters is the only disabled entry 4. click on classic filters to select it 5. ctrl+click on auto duck and bass&treble to select those too 6. press the space-bar: 7. observe all three become un-selected i.e. classic filters does _**not**_ toggle ---------------------------------------------------------------------------------- i partly ask this question as the editor of the manual as this existing behavior is somewhat tricksy to explain.",1,0,1,0.9664466381072998,0.6595020890235901,0.6648033261299133,1.0,accept,majority_agreement
1563331212,4723,"and that almost completes a round of review... ... just one thought i have now is that anticipatory pre-fetching of the next block by a background thread could be a further enhancement. just entertain that thought for now as a bonus project, that might speed up rendering for instance, but it may not be essential to get tolerable performance in realtime.",0,0,0,0.889481246471405,0.7907319664955139,0.831608235836029,0.0,accept,unanimous_agreement
1563531345,4723,"i've been thinking more about this. i'm not convinced this will work. in the old caching, the caches were external to the track, and spectrogram drawing or mixersource controlled their lifetimes. the invalidation problem did not exist, because in those contexts it could be assumed that the contents of the track would not be changing in the lifetime of the caches. furthermore, it was possible for different code to access the same wavetrack in different places, but different caches would exist to take advantage of the different patterns of locality. for instance, a track might be playing or looping, while a changing display (such as, spectrogram with pinned play head, or a change of zoom during play) might require a different loop over the blocks concurrently. and yes, concurrently -- there really were multiple threads involved. but putting an internal cursor into the sequence object has all the disadvantage of non-thread-safety; even if synchronized, different fetches from different threads would repeatedly miss the cache; and without a way to destroy the caches early, extra problem of invalidation exists. so we need a very different solution that still allows the caches to be external to the sequence, and yet, lets mixersource control cache lifetimes although it is in lib-sample-track and can't depend on lib-wave-track where sequence lives. but how? i can explain.",0,-1,0,0.9273261427879332,0.5743054151535034,0.5283608436584473,0.0,accept,majority_agreement
1563545023,4723,"1. sequence exposes a function that returns a cache object, and the caller determines its lifetime. 2. (if ever longer lifetimes are needed, such that invalidation becomes a problem, then sequence can be a publisher and the caches can subscribe. but don't do that until it's really necessary, and then be sure there aren't multithreading problems.) 3. `sequence::get` (the overload not taking a first int argument) takes an optional pointer to cache defaulting to nullptr, and uses it if it isn't null. 4. this extra argument propagates up the stack in changes of arguments of waveclip::getsamples(). 5. wavetrack can construct multiple sequence caches (one for each of its clips, storing them in a hash map from clip addresses) and call that single object a cache, and return it to the caller. wavetrack::get(), if given a pointer to a cache from outside, can pass the correct sub-cache to the correct clip as needed. 6. sampletrack can have a new pure virtual function, `makecache`, returning `x` , and its virtual function `get` can take an optional pointer to `x`, defaulting to nullptr. i just explained in 5 how these pure virtuals are overridden. 7. what type is `x`? i think it's a good job for `std::any` -- that's just a polymorphic holder of anything that can be copied and destroyed. `wavetrack::getsamples` packs the box, somebody else (even in lib-sample-track) can hold onto the box, or destroy it, without needing to know what's in it, and then `wavetrack::get` uses `std::any_cast` to look inside the box again. 8. then construct the caches exactly where `sampletrackcache` was constructed before, destroy them exactly where the old caches were destroyed, and wherever the old caches were used, pass the new caches to `sampletrack::get()`.",0,0,0,0.9708840250968932,0.9921179413795472,0.9866051077842712,0.0,accept,unanimous_agreement
1563564074,4723,"also some afterthought about `wavetrack::getidealblocksize()`: the side effect it might have had as a non-const function was unimportant, and is possible quite wrong in case the non-const function shadows the const one and becomes more widely used. it could have a side effect of making a new, empty clip. don't do it. just delete that function. and then, what purpose is still served by the old, and const, `getmaxblocksize` ? it is, to hint a a good size for fetching some wavetrack data for a sequential march through a long stretch of track duration, for instance in many of the effects. maybe it's just not important to have this function. those places could just allocate something fixed, like a megabyte. if they later add caches for efficiency or pre-fetching (they aren't cached now, and would not be if you followed my suggestions above strictly), it wouldn't really bring any advantage to tune the effect's buffer size to match the internal buffers of the cache. but there is no harm in keeping the function either, so let it remain and all the existing calls to it.",0,0,0,0.8558951616287231,0.9539965391159058,0.9673823714256288,0.0,accept,unanimous_agreement
1563886244,4723,i will veto that and you know it well.,0,0,-1,0.972110390663147,0.9622249603271484,0.5933815836906433,0.0,accept,majority_agreement
1563921957,4723,explain your alternative.,0,0,0,0.9749130606651306,0.9839999079704284,0.9893174767494202,0.0,accept,unanimous_agreement
1563943746,4723,std::any was used without objections here [a link],0,0,0,0.9839089512825012,0.9836265444755554,0.994847059249878,0.0,accept,unanimous_agreement
1563958332,4723,"but we are solving different problems here, aren't we? i see this as ""excessive complication for the problem."" especially because it needs propagation `up the stack in changes of arguments of *`. i see it as a much more invasive approach. this is a huge red flag in your proposal. so it cannot be even expressed in type? the user needs to know what is safe to use to manipulate it or where to pass it? it cannot be verified by a compiler? a big, strong no. i had more trouble with `effectsetting` than i asked already. i know that i was not alone. we've been talking through it for a very long time, and i have been largely ignored. so now i will be pushing hard against any such code, which is something i told you before too. js gets type, python gets type, and audacity written in c++ erases types randomly because it's fun and because the committee decides to take `std::any` into the standard. (still not the worst thing that slipped into the std lib, just look at `std::async`) if there are cases where you find per clip/per track caches to be required make an appropriate cache and read using it, do not pass it to the track or clip. this is irrelevant to this problem anyway; we must efficiently satisfy around-the-border reads, which is only the problem with sqlite-based sample blocks. dropping the cache because the caller decided it no longer needs it is a very weird pattern. but again, it still can be done. you can have more than one cache. your cpu has **three** just to satisfy reads. easy. do not use `std::any`. i am really frustrated that i have to cover this again, but while i have never seen a good excuse to use `std::any` (that includes ""what if you need a cache that can store anything by a key""), there are numerous problems it causes: 1. compiler is no longer your friend. it is now the responsibility of the developer to validate types. 2. it violates lsp, and i have a very strong opinion that l is the single most important letter in solid. without l it just makes no sense. 3. it makes debugging intrusive and hard. 4. it breaks all kinds of features that use the knowledge of the code model: code completion, refactoring, static analysis, etc. i was not happy, and i told you that during the review. however, that specific case was nothing more than a scope guard, the returned object was never meant to be used, so i allowed it. it could've been done differently and if i knew that it would be used as an argument for yet another `effectsetting` i would've pushed to do it differently.",-1,-1,-1,0.8658517599105835,0.9529407620429992,0.834496796131134,-1.0,accept,unanimous_agreement
1564121330,4723,"on top of that - `std::any` is not polymorphic. it won't be possible to use different caching policies unless they are implemented within the same cache, so the proposed approach is closed for extension, forcing you to **modify** existing implementation if one needs to extend the behavior.",0,0,0,0.9796084761619568,0.9933252334594728,0.9831255078315736,0.0,accept,unanimous_agreement
1564175124,4723,"-licameli thanks for your constructive review. i did think of multithreading, and yes, i wouldn't leave this code as-is given this possibility. about the cache lifetime issue, i admit the scenario of a project with many small clips (which would happen if a user concatenates several clip instances of the same underlying data to make a looping track) would require far more memory than necessary. i'm open to alternative approaches and am looking at yours with interest. comments/questions coming up.",1,1,1,0.9408340454101562,0.9411423802375792,0.9832586050033568,1.0,accept,unanimous_agreement
1564179127,4723,"two things only are required. the cache can be destroyed when no longer needed. the cache can be passed back to the object that produced it which then interprets it. i foresee no further requirements. no example of a third was given. std::any is sufficient. unique pointer to an ad hoc abstract base class with a virtual destructor could do it too, avoiding std::any but just needing more keystrokes. it addresses the present problems compatibly with library dependencies. i still don’t know what alternative is offered.",0,0,0,0.9388223886489868,0.9710832238197328,0.9752296209335328,0.0,accept,unanimous_agreement
1564222335,4723,"std::any is wrong. why this complexity with passing random objects back and forth? there is a need for a cache with a specific lifetime? create a cache, point it to the data source, and **read from the cache**. that's how caching works. not by passing the cache back to the data source. if it was possible to foresee all the possibilities and requirements - software won't be needed. but this is not the case. ""i do not see now"" does not mean such a case won't occur tomorrow. introducing rigid and overcomplicated code ""just because"" is not something that we need to continue to do. please focus not only on breaking library dependencies. the code should be maintainable and readable first. `std::any` hides dependencies and result in bad code. there is a cache already that suits your needs. it is orthogonal to what was needed for the abandoned graphics pr and to what stretching needs. so leave it this way. do not try to invent a single cache to rule them all, this won't work. in the end, you almost give the answer yourself. if you need a cache that returns you the samples for the given range - **explicitly** define the contract. not with ""comments"", not with `std::any`. explicitly.",-1,0,0,0.8748350739479065,0.8369992971420288,0.5259413123130798,0.0,accept,majority_agreement
1564305241,4723,"i am not the one who first said we should remove the existing cache from spectrogram drawing code. matthieu proposed doing that, and for a good reason. a cache needs to be upstream of the time-stretching processing for performance reasons, and time stretching may need to be calcuated even by drawing code too if we want to remap the display to account for it. i'm not convinced that `std::any` is a tool in the kit that should never to be considered, with proper knowledge of its tradeoffs -- but in this case it was admittedly a reluctant compromise. i thought there was a need to change the sampletrack abstract interface to introduce caches as context arguments. if that can be avoided, while also getting the thread safety, and correctness, and avoidance of excessive allocation -- then that's all to the better, and after more sleep and a chat with matthieu, we are forming some outline of how to do that. so please no more debate about `any`. i'll talk about the next ideas.",-1,0,0,0.4869104325771332,0.8462734222412109,0.8580889701843262,0.0,accept,majority_agreement
1564313688,4723,"i'm preparing a long comment, please wait.",0,-1,0,0.8565523624420166,0.6341520547866821,0.8639525771141052,0.0,accept,majority_agreement
1564557526,4723,"sorry for unintentional close. some study now convinces me that the really acceptable solution must first wait on some other restructuring i need to do (even without cache restructuring) in audioio.cpp. so expect a pr from me instead, on which to rebase all of this.",-1,-1,-1,0.9891114830970764,0.9894726872444152,0.9869117736816406,-1.0,accept,unanimous_agreement
1564581155,4723,"-licameli following up on our conversation today, here's pseudo code of the weak_ptr approach : [code block]",0,0,0,0.9817502498626708,0.96034437417984,0.9901262521743774,0.0,accept,unanimous_agreement
1564604341,4723,"i don't see where you use the weak pointer types in the pseudocode, but i get the general idea. there is more to think about, to manage type safety, efficiency, and putting a bound on the memory the cache may occupy at one time. there is also still the problem of lifting the construction and lifetime management of these caches to an appropriate place, so that lib-sample-track and lib-audio-graph don't need any mention of the caches in their interfaces -- as in the my last proposal. which i find a not wholly satisfying compromise just because of this intrusion in the sampletrack interface. and that problem is what makes me want to pause this while i figure out some other restructuring. i need also to do things in audioio.cpp so that it doesn't use tracklist.",0,0,0,0.8609548807144165,0.9472088813781738,0.9369279146194458,0.0,accept,unanimous_agreement
1564657214,4723,"i realize that, in my draft above, each `waveclip` holds on to one or more `sqlitesampleblock::byteptr`, meaning many clips would mean lots of memory. trying again, this time moving the holders to `sampletrack` implementation level. if the `sampletrack` clients query small audio chunks at a time, which is typical and convenient, then there'd be typically one, sometimes two, strong references to `sqlitesampleblock::byteptr` per track at all time, which would be totally acceptable memory wise. i think that'd address your concern, -licameli, of [code block] it's not perfect that the clients of `sequence` need knowledge of the caching mechanism to use it properly, there may be room for improvement there.",0,1,0,0.9029601216316224,0.6574509143829346,0.9503490924835204,0.0,accept,majority_agreement
1564659403,4723,"mention of the caches in their interface doesn't bother me so much. it would still be an improvement from what we currently have api wise because much easier to use, i expect.",0,0,0,0.8190324306488037,0.8199777007102966,0.9156264662742616,0.0,accept,unanimous_agreement
1564662626,4723,"... we probably don't even have to mention ""cache"" in the returned audio containers. i'm more bothered (although not that much) by the clients having to make sure they do not drop a shared pointer before acquiring a new one. but maybe we can return a more intelligent object that takes care of this.",-1,0,0,0.9098610877990724,0.8498423099517822,0.5372734069824219,0.0,accept,majority_agreement
1564854669,4723,i don't understand why we need a per-block sample cache.,0,-1,0,0.8095455169677734,0.6092333197593689,0.5325009822845459,0.0,accept,majority_agreement
1565156786,4723,"i doubted the idea too at first, but now i see advantages: the cache aligns perfectly to block boundaries, and immutability means no need for invalidation logic. maybe the cache data are held by seqblock and not the sampleblock itself. if the mutable sequence changes, a seqblock can be destroyed and free its cache. maybe sequence can implement an lru policy with a bound on total cache size (or block count) to evict some cache from memory and avoid too much memory usage. doing that mru cache update with thread safety would present some difficulty but i think it could be overcome. these ideas aren’t firmed up yet. we are exploring alternatives and need various ideas.",0,0,0,0.8735175132751465,0.9616724252700806,0.6073138117790222,0.0,accept,unanimous_agreement
1567799633,4723,"-licameli pointed out that this wasn't thread-safe. looks like we need yet some rather different solution. we are evaluating ideas, but this one looks unlikely to be carried through. declining.",-1,-1,-1,0.567513108253479,0.7420202493667603,0.7249402403831482,-1.0,accept,unanimous_agreement
1916746723,5900,"i see messages crossed about observer. you made simplifications, not exactly as i suggested, and i hope you agree it's all more understandable now. can you answer my questions about thread safety? the subscriptions may be created and destroyed only in the main thread, and that includes destruction of either the publisher or the subscriber before the other. publication on another thread is safe if that is so.",0,0,0,0.9625034928321838,0.8407449126243591,0.645766019821167,0.0,accept,unanimous_agreement
1916769669,5900,i would move `centshiftchange` into `clipsegment.h` and then `waveclip` could publish that type and simply pass a function to `subscribe` without the extra lambda adaptor. it's minor though.,0,0,0,0.9833096861839294,0.992850661277771,0.9920946955680848,0.0,accept,unanimous_agreement
1916781291,5900,"all right, i see no real blocker. i dislike the now increasing involvement of pitch and stretch notions in lib-wave-track, where they should be extraneous, but that restructuring is for later. assuming too that the thread safety of observer is correct, and that you will squash it into fewer commits -- i can approve it",-1,-1,0,0.9583390355110168,0.6927160024642944,0.6383787989616394,-1.0,accept,majority_agreement
1917706142,5900,"1. when opening up the pitch & speed dialog and entering a new value, a strange ""-24"" pops up in the text box at random. furthermore, after the text box is cleared and the new value is entered, it gets increased by 1: [a link] also, i've observed that every time i put the cursor in the ""cents"" text box and press backspace, the semitones value decreases by 1: [a link] 2. not sure if anything at all should be done about it, but during testing, i've observed somewhat deteriorating quality at higher values. it becomes more obvious from around 20+ semitones up. at this point, the sound becomes quite unusable while the competitor's algorithm yields a much cleaner result. tested on one-shots, drum loops, bass loops and vocals. here's an example of such deterioration: [a link] this isn't too critical since it manifests itself at higher (although not extreme) values but still smth worth to be aware of. (tbc)",-1,0,0,0.5173056721687317,0.8880325555801392,0.6678330302238464,0.0,accept,majority_agreement
1918723223,5900,"tweaks pushed, hope they improve ux. about 2., i allowed pitch shifting to such extreme ratios because the weird resulting sounds might be interesting to the users at an educational and experimental level, and maybe useful in the creation of weird atmospheres. when we have tempo curves, i can imagine that one might want to slowly drop or raise the pitch to something increasingly unrecognizable. ideally of course, it'd pitch up and down more realistically, but the amount of work involved in improving this is completely unknown. i'm confident that the technology will be very useful as it is. one potential area of improvement is formant preservation: when shifting voice, one quickly gets into a chipmunk effect. i just created an issue for this: [a link] maybe this will address some of the limitations you've noticed ? (could you please share your examples using google drive instead?)",1,-1,1,0.8728321194648743,0.5331850647926331,0.7167388200759888,1.0,accept,majority_agreement
1921064330,5900,"1. it seems that the upper/lower boundaries aren't in place when pitch-shifting using alt (option) + ↑/↓. after reaching a value of a couple of hundred, an attempt to play back causes audacity to freeze. 2. on macos, quitting the pitch & speed dialog by esc doesn't restore the previous pitch value and submits the entered value instead; clicking cancel, though, doesn't work as it should either: it resets the current pitch value to zero.",0,0,0,0.929512619972229,0.938124179840088,0.9804633259773254,0.0,accept,unanimous_agreement
1921207660,5900,i omitted the problem of aliasing and imaging. this may also explain the lower quality you noticed. i created another ticket for that: [a link],0,0,0,0.9830406308174132,0.9859764575958252,0.9932757616043092,0.0,accept,unanimous_agreement
1925322835,5900,"testing on w10 with 's latest branch for this: audacity-win-3.5.0-alpha-20240202+81dc5f9-x64-msvc2022 pitch and speed changing appears to work while audacity is playing - but there are some issues of note: 1) when audacity is playing and you hover the cursor over the clip-handle drag bar the cursor icon that you get is a **white no-entry** icon - to me this implies that no action is available but clicking on it still brings up the drag-bar context menu, including the **pitch and speed** command. this is **_not_** introduced as part of this change - the same occurs in 3.4.2 2) when audacity is playing the **clip speed %** in the **pitch and speed** dialog is grayed-out and unavailable. this is _**not**_ the case when the command is invoked while audacity is not playing. ![a link] 3) the **pitch and speed** context menu :command has a much reduced ui compared to the **effect > pitch and tempo > change speed and pitch** menu command: ![a link] 4) i was really expecting the **change speed and pitch** effect to be a further audacity command that would now be available in the real-time effects stack - and not just a clip-handle context menu. 5) in the clip-handle context menu command dialog for **pitch and speed** - you appear to be able to change pitch and speed independently. this appears to contrast with what happens with the **effect > pitch and tempo > change speed and pitch** menu command.",0,0,0,0.9480682015419006,0.9790552258491516,0.9822951555252076,0.0,accept,unanimous_agreement
1925325732,5900,"perhaps most importantly: 6) this pr states that the dynamic pitch change in the clip being played is ""non-destructive"". but testing shows that the pitch change is actually applied destructively (the change goes on the undo/history stack). ![a link] and undo/redo can be applied.",0,0,0,0.8823341727256775,0.9899957180023192,0.9861612319946288,0.0,accept,unanimous_agreement
1925343793,5900,7) the dialog seems un- necessarily wide ![a link],0,0,0,0.8830792307853699,0.8964790105819702,0.9749355912208556,0.0,accept,unanimous_agreement
1925350442,5900,"8) in the old clip-handle context menu the command was **change speed** - in the new menu it is just **pitch and speed**. surely it would be better to add back the ""**change**"" and make the new command be **change pitch and speed** a) for clarity of purpose (""does what it says on the tin"") b) to differentiate from the **render pitch and speed** just beneath it ![a link]",1,0,0,0.5510884523391724,0.979498565196991,0.9913508892059326,0.0,accept,majority_agreement
1925351772,5900,i have updated the manual for the changes as they currently are - but retained p1s just in case further changes are effected.,0,0,0,0.9839304089546204,0.9903113842010498,0.9935415983200072,0.0,accept,unanimous_agreement
888245568,1377,"your approach is founded on a memory of the origin of a channel as ""aligned"" or not, rather than computing it as needed. i would prefer that you compute alignment as needed. defining the condition will take some work. you must sort clips of each channel, becauase they are not necessarily in sorted order, and they you must iterate corresponding clips comparing start and end times. (probably with a tolerance: let times differ by 1/(2*rate)) this is extra work, and extra calculation, but i believe the calculation will be small in practice because clips will be few. the advantage is greater confidence that there are not surprising corner cases where things will not work as expected. for instance: i just made a mono track, duplicated it, then made a stereo track from them. the affordance of the right channel did not disappear as expected in your branch. it would under this other approach. there are also other commands like ""swap stereo tracks."" this did not produce the expected result. it would if aligned-ness is computed instead of stored.",0,0,0,0.8804531693458557,0.9450055360794068,0.9617287516593932,0.0,accept,unanimous_agreement
888279855,1377,"i don't agree with that. i've considered that possibility, but the problem is that matching clips isn't enough, the result should be cached anyway. moreover the first case isn't valid, this behaviour was requested. the second case should be fixed. also i see a problem with definition of matching clips: it will probably change in the nearest feature.",0,0,0,0.856299102306366,0.8612706065177917,0.5360729098320007,0.0,accept,unanimous_agreement
888307713,1377,"if ""matching clips is not enough,"" what is your more precise description of the criterion? you are guessing it will ""probably"" change, but that is speculation. even if it does change, defining it in one place in a test seems to me to be the less fragile approach. more lines of code to implement the complicated test, but fewer places in the code will need changes to guarantee the consistency of the cache with changes of the track. caches are useful but problematic when there are many things that could happen to invalidate them.",0,0,0,0.9116559028625488,0.9232547879219056,0.944300889968872,0.0,accept,unanimous_agreement
888333440,1377,"it is described here [a link] the check you propose is actually answers the question we don't need to answer (are clips aligned or not?). from the description of the task i understand that the sequence of track transformation determines whether the track should be considered ""aligned"" or not. consider case when user have stereo track with misalligned clips, then user makes them aligned by dragging. should we consider track aligned now? if yes, then affordance should disappear, if no then user can split stereo track and merge it back to get completely another appearance (this was my question for designers). and as i understand the currently implemented behaviour is exactly what was requested (except second scenario you've provided).",0,0,0,0.9543008804321288,0.9682567715644836,0.9847951531410216,0.0,accept,unanimous_agreement
888344119,1377,"you are right that you tried to implement literally what is now in the text box in the first picture at that issue. really i think that specification should be disputed and corrected. so, let's raise this at the next design review. i believe that if mono tracks have aligned clips according to the numerical criteria, then they should merge into a stereo track without the second affordance area.",0,0,0,0.9115976095199584,0.9656011462211608,0.9653047323226928,0.0,accept,unanimous_agreement
902602775,1377,the branch needs a rebase and force-push and conflict resolution.,0,0,0,0.9712371230125428,0.9911768436431884,0.9580487608909608,0.0,accept,unanimous_agreement
1679063067,5027,rebased unchanged onto updated #5008,0,0,0,0.9856113195419312,0.9894021153450012,0.9926196932792664,0.0,accept,unanimous_agreement
1683861171,5027,"-licameli an issue when using the noise reduction effect: - have a stereo/mono track - select a short region of ~100ms - effect > noise reduction - click ""get noise profile"" - observe act. result: ![a link]",-1,0,0,0.5740350484848022,0.974422812461853,0.7344894409179688,0.0,accept,majority_agreement
1683935406,5027,see this comment in the other pr that this one depends on: [a link],0,0,0,0.9825904965400696,0.9781619310379028,0.9954946041107178,0.0,accept,unanimous_agreement
1683936710,5027,"so i already fixed this in #5008 which is under test still. but this branch was not rebased onto that updated branch. when i do that and rebuild, the problem should disappear.",0,0,0,0.9833567142486572,0.9728819131851196,0.9900452494621276,0.0,accept,unanimous_agreement
1686163232,5027,"-licameli moving back to in progress: - when swapping stereo channels, the clip name disappears **before:** **after:** - when copying a region of the clip with some envelope points and pasting it into the same clip, envelop points get messed up **before:** **after:**",-1,0,0,0.8820114731788635,0.982973337173462,0.9704683423042296,0.0,accept,majority_agreement
1686178815,5027,i think you fill find the problem with clip names should be mentioned at pr #5008 but is not the fault of new commits proper to this branch.,0,0,0,0.9860159754753112,0.9878161549568176,0.9766830801963806,0.0,accept,unanimous_agreement
1686571724,5027,rebased onto updated #5008. the problem with track names should be fixed.,0,0,0,0.984454870223999,0.9875869750976562,0.9941036105155944,0.0,accept,unanimous_agreement
1686762535,5027,i suspect commit 33318a421544fcadbf753271500d3bb5b238ba99 introduced the bug.,0,0,0,0.9712725281715392,0.9673648476600648,0.9836607575416564,0.0,accept,unanimous_agreement
1687944883,5027,rebase unchanged onto recent master,0,0,0,0.9873803853988647,0.9707323908805848,0.9933335185050964,0.0,accept,unanimous_agreement
1688176380,5027,tested,0,0,0,0.9697903394699096,0.957400381565094,0.7421080470085144,0.0,accept,unanimous_agreement
1950242762,5965,rebased unchanged,0,0,0,0.9862441420555116,0.9605920314788818,0.9912455677986144,0.0,accept,unanimous_agreement
1951328325,5965,"another rebase, with no change except one easy conflict resolution with 6110c4f5e73d90c367ba606c7a47bd8352c0f7c3",0,0,0,0.9805241823196412,0.9760435223579408,0.9797536730766296,0.0,accept,unanimous_agreement
1952955192,5965,rebased to updated dependency branch,0,0,0,0.9875736832618712,0.9900387525558472,0.994999885559082,0.0,accept,unanimous_agreement
1956447363,5965,"rebased, squashed some fix-ups, added a new first commit in the sequence",0,0,0,0.9869035482406616,0.983807384967804,0.9879959225654602,0.0,accept,unanimous_agreement
1961053912,5965,"looking at `class widechannelgroupinterval : public channelgroupinterval`, i'm wondering what need there is to distinguish the two. a channel _group_ is necessarily wide, isn't it?",0,0,0,0.981202244758606,0.9878469705581664,0.9813989996910096,0.0,accept,unanimous_agreement
1961348402,5965,rebased onto updated wave-clip-refactoring. made the newly merged in handle classes compile. removed the extraneous file.,0,0,0,0.9848474860191344,0.9923985600471495,0.994731307029724,0.0,accept,unanimous_agreement
1961753972,5965,two new commits which may resolve some of the problems you found.,0,0,0,0.9838107824325562,0.9548354744911194,0.9906548857688904,0.0,accept,unanimous_agreement
1963889476,5965,rebased unchaged to updated base branch,0,0,0,0.9874684810638428,0.9890193343162536,0.9941352605819702,0.0,accept,unanimous_agreement
1972349672,5965,"merged master to wave-clip-refactoring, then rebased this with some squashing, and added to the qa checklist",0,0,0,0.9883566498756408,0.9835135340690612,0.9903873801231384,0.0,accept,unanimous_agreement
1976759900,5965,"i discovered a problem, maybe noticeable only in debug builds. generate or record some sound, then use reverse effect. an assertion is violated. i also observe that tracks can have duplicate shared pointers to a clip.",0,0,0,0.9531610012054444,0.6568531394004822,0.9754675030708312,0.0,accept,unanimous_agreement
1976774239,5965,should be aware - he currently is actively testing this card.,0,0,0,0.9791364669799804,0.951464295387268,0.9892992973327636,0.0,accept,unanimous_agreement
1976846284,5965,please look at the two newest commits i'm afraid you might need to retest it all to be very sure,0,-1,0,0.6912441849708557,0.7415961623191833,0.7165189981460571,0.0,accept,majority_agreement
1096508598,2801,"i pushed some of the requested changes. i still have to fully understand why settings are not saved and recalled in commits 1, 2 & 3. so far i understood this: in those commits, the base class of echo is temporarily set to `effectwithsettings ` i put a breakpoint in void `shuttlegetautomation::define`; before and after those 3 commits, i see there that the values coming in, are the actual values set in the gui; with either of those 3 commits, i do not (they'd be the last saved ones) maybe this has to do with fetchparameters returning something wrong when the base class is `effectwithsettings `?",0,0,0,0.9502431750297546,0.9877569675445556,0.9868419766426086,0.0,accept,unanimous_agreement
1096608448,2801,"let's be satisfied with persistency of settings in the final commit, even if it fails in the intermediate commits. i think the reason for failure is that makesettings() is redefined when you use the base class effectwithsettings, so effectmanager is storing a real settings object instead of an empty `any`. then there are calls to savesettings and loadsettings which really use that object. but while effectecho is not yet really stateless, it is still using its own internal copy of the settings instead of the one stored in effectmanager.",0,0,0,0.9792327284812928,0.985824465751648,0.986838161945343,0.0,accept,unanimous_agreement
1096618504,2801,"i see now, thanks for the explanation. what do you think is left to do here? would you like me to reduce the number of steps from 4 to 3, like you hinted before?",1,0,1,0.8785840272903442,0.7033712267875671,0.9556459784507751,1.0,accept,majority_agreement
1097752082,2801,"the last push you see is after i rebased on branch `more-stateless-effect-utilities`, in order to try using `effectwithsettingsbase` to preserve settings in intermediate transformation steps (i.e. 1-2-3) but what i found out is that to preserve settings, i do not need that class. i just needed to correct fetchparameters to return the right address of the settings, and leave it there for all 3 intermediate steps. i verified it works for all 3 intermediate steps, and the 4th step works too.",0,0,0,0.9813241362571716,0.9724830985069276,0.9855506420135498,0.0,accept,unanimous_agreement
1097964846,2801,"i'm not persuaded that the transitional steps are really all correct. they may run the effect without crashing, but i think that at step 3, the effect does not apply the correct values. i could approve the pr anyway if the final result is correct, but i would prefer that you understand the intermediate steps well enough to know why bugs do or don't exist in them.",0,0,0,0.8877527117729187,0.9026018977165222,0.5770525932312012,0.0,accept,unanimous_agreement
1098054294,2801,"the third step does not apply settings correctly. it might also be useful to use the manage button to save a named preset. then verify that it is correctly retrieved when you load it, in each intermediate step. to make the intermediate steps strictly correct, you should not use effectsettings arguments of the instance, and should store a reference not a copy of settings in the validator, until the last commit changes that. you should not use effectwithsettings until the last commit, where you remove the msettings member of the effect.",0,0,0,0.9864941835403442,0.9937925934791564,0.9937918782234192,0.0,accept,unanimous_agreement
1098055811,2801,"my transformation of ladspa to statelessness does as i described, with other work too so there are more commits. i also don’t need effectwithsettingsbase at any point.",0,0,0,0.964049994945526,0.9427703022956848,0.9912256598472596,0.0,accept,unanimous_agreement
1098060872,2801,this also means the places where the validator uses getsettings are not added until the last commit.,0,0,0,0.9881168603897096,0.9893823862075806,0.9937508702278136,0.0,accept,unanimous_agreement
1098152914,2801,"i confirm that step 3 does not apply the chosen settings. i will edit each commit now, following these directives: a) for steps 1-3, inherit from statefulpertrackeffect b) for step 4, inherit from effectwithsettings c) in steps 1-3, have a msettings as a member of echo, and use exclusively that one d) in steps 1-3 in the validator, use a reference to the the settings, not a copy, but then in step 4 turn it to a copy is the above what you meant? it is not really clear to me how in step 3 i can access the effect's msettings member from within the instance - with a downcast to effectecho of the instance's mprocessor member?",0,0,0,0.9410406947135924,0.9850257039070128,0.9907955527305604,0.0,accept,unanimous_agreement
1098161008,2801,"you understand correctly. static_cast of mprocessor is what i do too in the stateless-ladspa-effects branch. be sure msettings is deleted from the effect in the last commit, which will force you to make the other needed changes so that it continues to compile.",0,0,0,0.9869900345802308,0.9888939261436462,0.9812000393867492,0.0,accept,unanimous_agreement
1098335889,2801,"some changes to the last agreed plan: step 2 could not inherit `statefulpertrackeffect` but had to inherit `effectwithsettings ` - otherwise validator implementations have no access to `getsettings()` step 3 could not inherit `statefulpertrackeffect` but had to inherit `effectwithsettings ` - otherwise there are no calls to the instance's process*** methods tests - preservation of last used settings: all steps pass - switching between user presets: steps 1-2-3 pass, step 4 shows a **bug**: when having two user presets a and b in the list, clicking once on one of them is not enough to change the values, the preset must be clicked twice. is this bug due to an error in assembling final step 4, or is the bug in the framework? i will have to inspect this tomorrow but if you have a hint, it is welcome!",0,0,0,0.9215348362922668,0.9925668239593506,0.9272012710571288,0.0,accept,unanimous_agreement
1098954808,2801,"i could reproduce the bug i noticed with the two user presets with dtmfgen too, so i conclude the cause is in the framework. i opened issue [a link] for that.",0,0,0,0.9878333806991576,0.9894144535064696,0.99255108833313,0.0,accept,unanimous_agreement
1098981984,2801,no. getsettings() should not be used until the last step. i think i said that already. the parts of the validator code that use getsettings should wait until step 4 to be added. no. inheritance of the class changes only in the last step.,0,0,0,0.9784946441650392,0.9926003813743592,0.9886698722839355,0.0,accept,unanimous_agreement
1099022405,2801,"alright, i can make step 2 still inherit `statefulpertrackeffect` if i comment out the calls to getsettings, not a big problem there. but... to make step3 inherit statefulpertrackeffect - i would have to leave processinitialize, processfinalize and processblock still belong to the effect and not to the instance. that's ok actually, it is just a little more work postponed to step 4. i found the preset switching bug also in dtmfgen, i opened this issue for it: [a link]",0,0,0,0.9215291738510132,0.8195672035217285,0.8425031304359436,0.0,accept,unanimous_agreement
1099056351,2801,are you sure the problem is in the framework? could it be a bug that already existed in 3.1?,0,0,0,0.9817558526992798,0.99319589138031,0.9868292212486268,0.0,accept,unanimous_agreement
1099072368,2801,the bug isn't present in 3.1.3,0,0,0,0.9822110533714294,0.9858466982841492,0.9847223162651062,0.0,accept,unanimous_agreement
1099081110,2801,oops i was wrong when i said step 3 can not inherit statefulpertrackeffect - it can! i will now read your other comments and act on them.,-1,-1,-1,0.9836723208427428,0.9504969716072084,0.9847649335861206,-1.0,accept,unanimous_agreement
1099145845,2801,can you or write up an issue with exact steps please?,0,0,0,0.9871341586112976,0.9931437969207764,0.992170751094818,0.0,accept,unanimous_agreement
1099258942,2801,"yes, it is at [a link]",0,0,0,0.9870680570602416,0.9890711307525636,0.9928826093673706,0.0,accept,unanimous_agreement
1099260896,2801,"i think i addressed the last round of requests; all 4 steps tested ok, with the exception of the bug happening at step 4, also happening in the dtmfgenerator - see issue at [a link] updated 4-steps guide: [a link]",0,0,0,0.9782761931419371,0.9354888200759888,0.9121487736701964,0.0,accept,unanimous_agreement
1099560419,2801,"at last this sequence looks like a transformation that is correct at every step. i will merge it because you will be away for a few days. i hope you can write a revised outline describing the procedure for transforming an effect, which you can repeat with other effects.",0,0,0,0.9014922380447388,0.8809744715690613,0.7666957974433899,0.0,accept,unanimous_agreement
1102261043,2801,"thanks for the merge! i already attached the revised outline in my previous comment here, but i think i will add it to the repository - a simple pr will follow for that.",1,1,1,0.986741840839386,0.9871066212654114,0.99028742313385,1.0,accept,unanimous_agreement
1723741379,5193,"windows build errors: `d:\a\audacity\audacity\src\import\importraw.cpp(224,1): error c2440: 'initializing': cannot convert from 'int' to 'size_t &' [d:\a\audacity\audacity\.build.x32\src\audacity.vcxproj]` `d:\a\audacity\audacity\src\import\importraw.cpp(229,1): error c2440: 'initializing': cannot convert from 'int' to 'size_t &' [d:\a\audacity\audacity\.build.x32\src\audacity.vcxproj]` `d:\a\audacity\audacity\src\import\importraw.cpp(221,26): error c2664: 'void importutils::foreachchannel(tracklist &,const std::function &)': cannot convert argument 2 from 'importraw:: ' to 'const std::function &' [d:\a\audacity\audacity\.build.x32\src\audacity.vcxproj]`",0,0,0,0.9261186718940736,0.9925535321235656,0.9934790134429932,0.0,accept,unanimous_agreement
1725313351,5193,finished a round of review,0,0,0,0.9673954248428344,0.9867457747459412,0.9770941138267516,0.0,accept,unanimous_agreement
1725745277,5193,"i would also like to see a rebase that squashes my last two commits as fixups on earlier ones. ""fix windows build"" fixes ""eliminate `importutils::maketracks`"" ""fix recording into stereo"" fixes ""don't assume correspondence of channels and recordablesequences""",0,0,0,0.9861229658126832,0.9911751747131348,0.9860872626304626,0.0,accept,unanimous_agreement
1726413126,5193,all the builds are failing,-1,0,0,0.5036944150924683,0.793982207775116,0.8807357549667358,0.0,accept,majority_agreement
1727435081,5193,rebased onto fixed master,0,0,0,0.9880973100662231,0.9846083521842957,0.9940332770347596,0.0,accept,unanimous_agreement
1727544822,5193,"please rebase and reword one of my commit comments ""recordablesequences are really wide and correspond with channels"" should say channel groups, not channels",0,0,0,0.9531274437904358,0.9563673734664916,0.990406334400177,0.0,accept,unanimous_agreement
1731892395,5193,ogg import crash fix & rebase,0,-1,0,0.9878729581832886,0.6890945434570312,0.971873104572296,0.0,accept,majority_agreement
1731925927,5193,attempted to fix recording to stereo fix,0,0,0,0.9767915606498718,0.9567726850509644,0.9745835661888124,0.0,accept,unanimous_agreement
1733732512,5193,rebased,0,0,0,0.9831162095069884,0.9435001611709596,0.9767982959747314,0.0,accept,unanimous_agreement
1191323742,3258,"some updates in early commits in the force-push onto latest master, in case they were reviewed already: - corrected too-strong assertion in buffers::discard - source::produce is not `const` but adds postcondition that it does not change `remaining()` - where i introduce `effectstage`, constructor takes additional `buffers&`, no `connect` function after - fix erors in sampletracksource::produce where i strengthen the postcondition and there are changes of commit comments. last commit still isn't all right.",0,0,0,0.9510701298713684,0.9883503913879396,0.9318665862083436,0.0,accept,unanimous_agreement
1196582976,3258,un-drafted at last!,0,0,0,0.8525404930114746,0.656674861907959,0.7948280572891235,0.0,accept,unanimous_agreement
1197981693,3258,tell me more about how you made that happen. was that the assertion in sampletracksource or effectstage?,0,0,0,0.9767380356788636,0.983382761478424,0.9932115077972412,0.0,accept,unanimous_agreement
1197995876,3258,"i generate *stereo* (is it relevant? i don't really know) chirp, select a part of it and try to apply berzerk. the first assertions is in `pertrackeffect::processtrack`: `assert(curblocksize <= blocksize);` if you skip it - assertion in effectstage::produce is triggered.",0,0,0,0.9814987778663636,0.9928900003433228,0.9926179051399232,0.0,accept,unanimous_agreement
1198013826,3258,"the plug-in is itself a generator, or you generated first and applied an effect?",0,0,0,0.9864631295204164,0.9923703670501708,0.992585837841034,0.0,accept,unanimous_agreement
1198020027,3258,"i just pushed more assertions of postconditions, which should cause the first assertion sooner.",0,0,0,0.9809480905532836,0.9735469222068788,0.9603977799415588,0.0,accept,unanimous_agreement
1198027290,3258,i generated first,0,0,0,0.9826653003692628,0.949600636959076,0.9911559820175172,0.0,accept,unanimous_agreement
1198037336,3258,"yes actually i think i broke the case of generator plug-ins, but fixed it with another commit",0,0,0,0.9820313453674316,0.8903465270996094,0.9896050691604614,0.0,accept,unanimous_agreement
1198048101,3258,"commit 744f696e7120aa0db0c79b2f04d16dcef5ca7da8 may fix the reported symptoms now. i have accumulated a few small commits since your tests, which you should review, then i will rebase and squash them onto previous commits.",0,0,0,0.9813717603683472,0.9819730520248412,0.9900875687599182,0.0,accept,unanimous_agreement
1198389378,3258,"some general comments about the source and sink interfaces. see the looping task in processtrack. the task is between a source and a sink. to make progress, it must, in very general terms: - acquire an empty buffer from its sink (the loop begins in that state) -- ""sink.reserve"" - acquire a full buffer from its source -- ""source.produce"" - transform from source to sink (no-op because it's just in-place production into outbuffer) - release the buffer acquired from source -- ""source.advance"" or some better name (""source.recycle""?) - release the buffer acquired from sink -- ""sink.consume"" when we implement a concurrent pipeline in the future, there will be multiple concurrent tasks like this, each with an upstream ""source"" and downstream ""sink"". each buffer between tasks would have two blocks. each buffer has two associated semaphores, one signaled by the upstream task, one by the down. all the semaphores can count up to two. so each middle task will see two upstream semaphores and two down. effectstage::produce would instead become another task, and instead of returning, it would ""release"" a filled buffer of ready data back to its downstream. that's the sink.consume operation. (don't like the name?...) the downstream task would be unblocked from acquiring a full buffer, which is source.produce. (... but see how the names complement.) meanwhile the stage may be able to do work on the other block of the downstream buffer if it is free, concurrently with its downstream doing the transformation before releasing the buffer again. before the effect stage can do any of that, it must first ""sink.reserve"" an empy buffer from downstream. (all the semaphores that count free space begin with value 2, so initial progress can happen). it must also aquire data from upstream (that is already called ""source.produce""; there is an initial pipeline filling from ultimate source, in which not all cores are active yet). when all done, the stage must also ""source.advance"" to ""recycle"" the buffer space to its upstream again so its upstream is unblocked again from ""sink.reserve"" and can make more progress. maybe produce/consume can then be understood as complementary operations of cooperating tasks. the other two operations need some nice complementary names too, and maybe reserve/recycle isn't clear, so suggest better please. as for wavetracksink -- the conservative transformation i did here doesn't change its behavior of accumulating blocks until the buffer is full and only then writing them out, and so the function names seem strange. but maybe this isn't really achieving significant economies, and instead a rewrite for concurrency would really make consume act eagerly rather than have reserve make space lazily. the implementation can be changed under the interface.",0,0,0,0.974528968334198,0.9899907112121582,0.982740581035614,0.0,accept,unanimous_agreement
1198397365,3258,"do you know anything about the four-stoke piston engine? i was wondering if there is a sort of analogy... - exhaust = reserve - intake = produce - compress = recycle ? (:sparkles: -plug) - power! (consume) and we want all the cylinders to keep firing all the time. but if i used the names in the first column, you would doubtless find it all even stranger.",0,0,0,0.8008518218994141,0.8994256258010864,0.8389769196510315,0.0,accept,unanimous_agreement
1198402092,3258,anyway.. maybe just acquire and release in each of the interfaces would be simplest.,0,0,0,0.9818620085716248,0.988926649093628,0.9824411273002625,0.0,accept,unanimous_agreement
1198436213,3258,probably the comment on source/sink should go somewhere in code,0,0,0,0.9870827198028564,0.9931180477142334,0.9874210357666016,0.0,accept,unanimous_agreement
1198825936,3258,"pushed again, with some name changes of functions and squashes of fixes; also last commit introduces audiograph::task",0,0,0,0.9829970598220824,0.9893952012062072,0.9916306138038636,0.0,accept,unanimous_agreement
846471056,918,i am wondering this as well. will developers be able to build with the same builds of libraries locally that the official builds use?,0,-1,0,0.914016842842102,0.5765761137008667,0.9173206090927124,0.0,accept,majority_agreement
846471614,918,these libraries seem to be abandoned for many years. wrote a [a link] which may come in handy for you. maybe you could fork these old libraries and host them under the audacity github organization?,0,0,0,0.936234414577484,0.9823054075241088,0.9560608863830566,0.0,accept,unanimous_agreement
846528508,918,"-ing it is already available :) the packages list is empty, because of some artifactory limitations i wasn't able to overcome - it simply doesn't list packages with anonymous access. you can browse the list here: [a link] or you can run [code block] and play with wxwidgets build using: [code block] we will have to :-) we have important patches in the build tree. likely i will do that early on monday",1,1,1,0.9667221903800964,0.9956231713294984,0.9922733902931212,1.0,accept,unanimous_agreement
846591839,918,"so does this branch make cmake automatically download the library binaries from artifactory? if so, please document that and how to disable it.",0,0,0,0.9889999032020568,0.993672490119934,0.994967520236969,0.0,accept,unanimous_agreement
846626816,918,"-ing you mean you always want to build libraries from source? ok, that's not a problem. for package-maintainer-like cases, it is possible to share conan cache, but given that they will be forcing everything to system libraries, i don't think that it is much of an issue really.",0,0,0,0.8928707242012024,0.9589572548866272,0.9306114315986632,0.0,accept,unanimous_agreement
846635214,918,"i don't want to build the entire dependency graph from source. the default behavior i expect from a build system is to first search the system for dependencies. i think this should be the same whether building audacity locally or packaging it. i also want to be able to use the exact dependencies locally that are used for the official builds, which should be opt in. the documentation distinguishes between ""local"" and ""system"" libraries. i understand what ""system"" libraries mean, but how does conan fit into this? does conan automatically download builds of ""local"" libraries?",0,0,0,0.9426029324531556,0.9514085054397584,0.9344002604484558,0.0,accept,unanimous_agreement
846920048,918,"this behavior can be activated using `-daudacity_lib_preference=system`. however, as i've mentioned earlier, this can be dangerous because there could be libraries with _official_ recipes from `conan.io` that will link to the conan provided zlib (or any other library), and you will have issues with the build. this is why this behavior is opt-in, not opt-out. if you turn library preference to **system** and you have the matching library installed and properly configured by the system maintainers the conan won't be used for the library at all. however, this will generally require you to install all the libraries and patched pkg-config files (if you are running ubuntu) for the dependencies, that are using conan - **local** will use conan provided library. that means that the recipe for the library will be downloaded from `conan.io` or our artifactory. if there are cached binaries for your system settings - the cached binaries will be downloaded. otherwise, the dependency will be built locally on your machine. in both cases, your local cache will be checked first.",0,0,0,0.9611749053001404,0.9888684749603271,0.9502161741256714,0.0,accept,unanimous_agreement
846927351,918,"i'm still confused. does `system` use conan as a fallback if the library is not found on the system? i suggest renaming `local` to `conan`. to me, `local` implies that no network connections will be made.",0,-1,-1,0.8654566407203674,0.7234494686126709,0.5655831098556519,-1.0,accept,majority_agreement
846930598,918,"this is documented in this pull request, but i will further clarify it in the next commit. there is an option, that will force only using the system libraries. by default, if there is no system library - some fallback will be used. this pr does not replace all of the dependencies. this option can be renamed to **vendored**, but this will be confusing as well. the option will be renamed to conan when the work on dependencies is complete",0,0,0,0.8858762979507446,0.99161958694458,0.9760586023330688,0.0,accept,unanimous_agreement
1044285779,2565,i'm done with a round of review. i await your answers.,0,0,0,0.9579173922538756,0.792361855506897,0.8305377960205078,0.0,accept,unanimous_agreement
1044313664,2565,"see this, about difference between `setbackgroundcolour` and `setownbackgroundcolour` [a link] i build with modification to show the effecs panel, and i can confirm that the background color updates correctly with theme change. the separator is draggable. there is a limiting left position, but it can be dragged right as far as the edge of the window, crowding out the track panel.",0,0,0,0.986622989177704,0.9888207912445068,0.9896871447563172,0.0,accept,unanimous_agreement
1044381506,2565,"the documentation seems to be a bit outdated, because in the source code you'll find this: [code block]",0,0,0,0.8099485635757446,0.8293577432632446,0.9652078747749328,0.0,accept,unanimous_agreement
1044477463,2565,"i informally approve the changes. do you wish to merge this pr now (i would recommend it) or wait to complete it with a button for showing and hiding the sidebar? if you wait, then change the top comment to un-link it from the issue, which it does not completely resolve.",0,0,0,0.978545069694519,0.978685975074768,0.9859374165534972,0.0,accept,unanimous_agreement
1045138717,2565,"-licameli i've added 3 new commits with ""effects"" track panel button.",0,0,0,0.977880835533142,0.9621819257736206,0.990541398525238,0.0,accept,unanimous_agreement
1049893838,2565,"the issues is, nominally, to enable a showing and hiding of the side panel. i tried it, and the new button does show the side bar, but i expected it might hide it if i pressed it again, but not so. there is no way to hide it again, it appears. but i expect is so easily fixed as not to be a reason to withhold approval.",0,0,0,0.9366471171379088,0.9663146138191224,0.979486346244812,0.0,accept,unanimous_agreement
1772243225,5398,"some comments about this pr that may help the understanding: * `waveclip` still being mono, it cannot be stretch-rendered independently from it's other channel. `wavetrack::interval` is now the place where this is done. * the `staffpadtimeandpitch` processor needs a source and a sink. the sink sample size being different than the source, we cannot have the same `interval` being at once source and sink. hence the approach consisting of creating an empty copy, using it as sink, and afterwards copying over the envelope.",0,0,0,0.97749924659729,0.9909560084342957,0.9818890690803528,0.0,accept,unanimous_agreement
1772246603,5398,"cutlines are not preserved. at the moment we have a (tiny?) bug on 3.4: enable cutlines, stretch a clip, cut a portion of it, render stretching: the red line is still visible, and clicking it still makes it disappear, but does not expand anything. with this pr at least the red line isn't present anymore. i suppose it's okay to postpone the implementation of this to after this pr if product think they're worthwhile preserving. if yes, the cutlines would probably have to be stretch-rendered, too ...",0,0,0,0.950850546360016,0.9344927668571472,0.9349116683006288,0.0,accept,unanimous_agreement
1772294355,5398,about cutlines: just logged an issue: #5401,0,0,0,0.9439073204994202,0.987392246723175,0.9931596517562866,0.0,accept,unanimous_agreement
1777093438,5398,"this completes a round of review. i think the sample formats must surely be fixed, and also preserving the project tempo in the clip may be desirable.",0,0,0,0.9722684621810912,0.9707249402999878,0.9449414610862732,0.0,accept,unanimous_agreement
1777674238,5398,"envelopes: is it correct just to copy the envelope into the replacement clips, or do they have to be stretched too, as is done in waveclip::onprojecttempochange?",0,0,0,0.9875677824020386,0.9948145747184752,0.9945673942565918,0.0,accept,unanimous_agreement
1777753626,5398,"stretch-rendering should not affect the timing of envelopes, and envelope points, like `mtrimleft` and the likes, are updated on each shrink or expand operation. so we're good :thumbs_up:",1,1,1,0.8922559022903442,0.9725260734558104,0.9865413904190063,1.0,accept,unanimous_agreement
1777767143,5398,well i'm adding a qa checkbox anyway,0,0,0,0.9813775420188904,0.9820382595062256,0.992506206035614,0.0,accept,unanimous_agreement
1777767257,5398,"i see you added a qa item, thanks.",1,1,1,0.8169214725494385,0.9319883584976196,0.9124151468276978,1.0,accept,unanimous_agreement
1780629099,5398,"i forgot to do that, thank you.",0,1,1,0.5469709038734436,0.8454375267028809,0.8635635375976562,1.0,accept,majority_agreement
1782688221,5398,just pushed a fix for [a link] found by (thank you!),1,1,1,0.9654846787452698,0.9338881969451904,0.9653964638710022,1.0,accept,unanimous_agreement
1782721628,5398,"-licameli - when rendering the clip that has trimmed envelope points and then dragging that clip, the trimmed envelope points re-appear: [a link]",0,0,0,0.9858481884002686,0.988161325454712,0.9913320541381836,0.0,accept,unanimous_agreement
1782722745,5398,this video is linked in my previous comment.,0,0,0,0.9824991226196288,0.988768458366394,0.994742512702942,0.0,accept,unanimous_agreement
1782851468,5398,"-licameli 1. add some envelope points at the beginning of the clip 2. shrink/stretch the clip 3. trim away the envelope points 4. right-click and select ""render clip stretching"" 5. try to add more envelope points on the resulting clip actual result: only one envelope point can be added, at the very beginning of the clip [a link]",0,0,0,0.9764411449432372,0.98851215839386,0.9798072576522828,0.0,accept,unanimous_agreement
1783027097,5398,reapproved,0,0,0,0.9795325398445128,0.9723716974258424,0.9887143969535828,0.0,accept,unanimous_agreement
1783027098,5398,reapproved,0,0,0,0.9795325398445128,0.9723716974258424,0.9887143969535828,0.0,accept,unanimous_agreement
1784691451,5398,tested,0,0,0,0.9697903394699096,0.957400381565094,0.7421080470085144,0.0,accept,unanimous_agreement
1033288574,2536,"wow! this is wonderful. thanks for figuring all of this out. i have not approved all yet -- i want to read and understand all of audacitytesting.cmake. very likely those cmake functions will need enhancement with more options. journal tests may need to run with a certain prior environment setup, such as having a particular audacity.cfg file already in place at startup, and then the environment would need cleanup after the test. ctest gives you the means to do such things by defining setup and teardown commands as ""test"" too in a certain dependency graph. we may also want to associate labels with test so we can filter them and run subsets. but all that can be future work and no reason to delay this.",1,1,1,0.9922695159912108,0.9955040812492372,0.9951347708702089,1.0,accept,unanimous_agreement
1044375973,2536,i'm trying it in the xcode build but i don't yet see how to build the tests.,0,0,0,0.8990594744682312,0.9597670435905457,0.9857446551322936,0.0,accept,unanimous_agreement
1044377629,2536,i couldn't build the tests because reconfiguring at the command line failed: [code block],0,0,0,0.8395169377326965,0.9726476073265076,0.9721574783325196,0.0,accept,unanimous_agreement
1044380487,2536,"oh forget that! the directory tests was a bit of junk just on my own file system, from my own experiements with tests.",-1,-1,-1,0.9687362909317015,0.9366117715835572,0.9836676120758056,-1.0,accept,unanimous_agreement
1044380862,2536,"this looks to be your local issue, lib-strings doesn't have tests directory. i think this is a leftover from the time you explored ctest",0,0,0,0.9779855012893676,0.8435971140861511,0.9906215667724608,0.0,accept,unanimous_agreement
1044381896,2536,ok now i see tests in the xcode browser. waiting to build and run them.,0,0,0,0.9831451177597046,0.9757261872291564,0.9875414967536926,0.0,accept,unanimous_agreement
1044382648,2536,there are all those ci build failures however,0,0,0,0.9772735238075256,0.9821834564208984,0.9724062085151672,0.0,accept,unanimous_agreement
1044383368,2536,gosh python world is sad :-( [a link],-1,-1,-1,0.9909365773200988,0.9935717582702636,0.9960197806358336,-1.0,accept,unanimous_agreement
1044384122,2536,"""error: the process '/users/runner/hostedtoolcache/python/3.10.2/x64/bin/conan' failed with exit code 1"" i was glancing quickly at that, and misread the word ""headache"" in there",-1,0,0,0.6705357432365417,0.6496021151542664,0.97771155834198,0.0,accept,majority_agreement
1044385626,2536,some third-party library broke half of the world again... and i had issues with it when i was doing offline linux builds as well. it is simply improperly packaged.,-1,-1,-1,0.9471459984779358,0.8953070640563965,0.962187111377716,-1.0,accept,unanimous_agreement
1044390745,2536,"i have built the tests in xcode, and confirmed that build fails if i edit the test program to have a syntax error. now i added `require(false)` and i want to observe the consequences of a test failure. how?",0,0,0,0.9760381579399108,0.9877673387527466,0.9766725301742554,0.0,accept,unanimous_agreement
1044395301,2536,"aha, i see run_tests great, i see test outputs. now we might consider what other ctest options or stderr messages from audacity might make this display more understandable.",1,0,1,0.918777346611023,0.4983976185321808,0.987722873687744,1.0,accept,majority_agreement
1044396256,2536,there are different ways: 1. you can select a specific test as a run target on xcode (if you want to debug the failure) 2. you can build run_tests,0,0,0,0.9841781258583068,0.9942435622215272,0.9938730001449584,0.0,accept,unanimous_agreement
1044399155,2536,"the journal sanity test makes a lot of spam, and so will every journal test: [code block] let's have an issue to clean that up",0,0,0,0.6867209672927856,0.8561062216758728,0.8940834999084473,0.0,accept,unanimous_agreement
1044407625,2536,"for unit tests, avoid fixtures for sure, but for the high level journal tests, fixtures could make sense.",0,0,0,0.9850252270698548,0.9911537766456604,0.9615855813026428,0.0,accept,unanimous_agreement
1044413072,2536,"but again, consider journal tests. maybe we will want those to write stuff to stderr to be filtered, and we will want to define success and failure some other way based on outputs. might use capabilities like that.",0,0,0,0.9726693630218506,0.9886777997016908,0.986912488937378,0.0,accept,unanimous_agreement
1044417551,2536,"well, `add_journal_test` will be modified accordingly then :) like we can say `add_journal_test( fail.txt expect_fail )` or similar.",1,1,1,0.978133738040924,0.9775474071502686,0.9864630103111268,1.0,accept,unanimous_agreement
1044419973,2536,"1. good, i have confirmed that i can put a break in a test executable and hit it in the debugger.",1,1,1,0.6120002865791321,0.7181684374809265,0.8792287707328796,1.0,accept,unanimous_agreement
1044458649,2536,:partying_face:,0,0,0,0.9438759684562684,0.9843850135803224,0.9041956067085266,0.0,accept,unanimous_agreement
1944557583,5952,"the build fails, in both commits. remember `-daudacity_use_pch=no` in your cmake variables.",0,0,0,0.9471983313560486,0.988247573375702,0.989936113357544,0.0,accept,unanimous_agreement
1944725317,5952,"i fix the build, try to run it, generate noise -- and there is a crash.",0,0,0,0.5336637496948242,0.6234913468360901,0.9573951363563538,0.0,accept,unanimous_agreement
1944743607,5952,so it was at least in a debug build.,0,0,0,0.986335039138794,0.9903558492660522,0.9857391715049744,0.0,accept,unanimous_agreement
1945622915,5952,"-licameli thanks for your comments and help, i just pushed fixes. i moved back this ticket to the progress column because of [a link]",1,1,1,0.9600613713264464,0.9819153547286988,0.9825133681297302,1.0,accept,unanimous_agreement
1945760811,5952,the ci builds still fail,0,0,0,0.8768868446350098,0.8901548981666565,0.499492734670639,0.0,accept,unanimous_agreement
1946055941,5952,the build is still failing,0,-1,0,0.5908130407333374,0.5599743127822876,0.7532966732978821,0.0,accept,majority_agreement
1946058814,5952,you still need ` ` in wavecliputilities,0,0,0,0.9857518076896667,0.9932303428649902,0.9943068623542786,0.0,accept,unanimous_agreement
1946062386,5952,and the last commit causes new compilation errors,0,0,0,0.9030198454856871,0.9667705297470092,0.936576247215271,0.0,accept,unanimous_agreement
1959566668,5952,![a link] [a link] this has not been fixed by this pr. the issue is still present on linux.,0,0,0,0.9185973405838012,0.9855748414993286,0.9375243782997132,0.0,accept,unanimous_agreement
1147756897,3030,"still unchecked in the issue is the box ""(like [a link] rewrite export and saving of presets, using storesettings on the ""scratch"" handles in the effect object"" will you add a commit for that, or is it unclear how to proceed?",0,0,0,0.9759096503257751,0.9699761867523192,0.9904375672340392,0.0,accept,unanimous_agreement
1147768194,3030,this completes a round of review,0,0,0,0.9796636700630188,0.9867204427719116,0.9850472211837769,0.0,accept,unanimous_agreement
1148749404,3030,"`savesettings` and `loadsettings` should not use `foreachparameter` after all, but iterate over the map (when saving) or, as in vitaly's original, iterate over the config file (when loading). i'm reversing what i said before, but in fact approving a point you raised a few weeks ago. this is what i ended up doing in #3034 which fixes bugs recently introduced into audiounits.",0,0,0,0.9803025722503662,0.9840651154518129,0.988711714744568,0.0,accept,unanimous_agreement
1151351470,3030,"to do this job, i need to know what are the user steps to perform which would trigger `savesettings` and `loadsettings`. i still have no idea how to do it. i remember vaguely that they'd be called when using audacity's macro system, which i could not reproduce, or that they could be triggered after some pr from vitaly would be merged, but i have no idea how. another thing that would help me, is to know the name and location of the file that `savesettings` writes to and `loadsettings` reads from. finally, vitaly's original code (and my changes too, up until now) would save/load the settings using `makeautomationparameterkey`, which uses not only the parameter's numeric id but also its ""shorttitle"" or its ""title"" - which i guess is a descriptive text. if i we want/need to keep doing things this way, then i also must extend the vst3settings map definition to accomodate this descriptive string, kind of what was done for the audiounits wrapper in a recent approved pr. should i do this? or are numeric ids enough, to build the key for the key-values pairs in the file?",0,0,0,0.6884118318557739,0.8298037648200989,0.8124833703041077,0.0,accept,unanimous_agreement
1151720590,3030,"to exercise `savesettings` and `loadsettings`, i think you can use the button that says ""manage"" (for plain ui) or shows the ""hamburger"" icon (for fancy ui) and save a user preset, then load the same again. or you can modify your build so that `supportsrealtime` is true for vst3 -- not expecting all else to work, but it will allow you to make an audacity project with an effect stack in a track, save it, then reopen it.",0,0,0,0.9676740765571594,0.9894121289253236,0.9907602071762084,0.0,accept,unanimous_agreement
1155281569,3030,closing this pr and moving to #3070,0,0,0,0.9855082631111144,0.9807637929916382,0.9933079481124878,0.0,accept,unanimous_agreement
1259285145,3696,"i'm not sure what the current design spec is for this, but what is read by screen readers is different from my initial suggestion: [a link] what i was expecting was that when you tabbed to the button containing the playback/recording icon and the slider, screen readers would read something like ""record meter peak -30db button"", and ""recording volume slider -4db"", respectively. however, what gets read by nvda when tabbing to the button and slider is: ""record button"", and ""record meter peak -60 db slider 46"" respectively. i think the current implementation is less clear and more confusing compared to what i was expecting. there are also some issues to do which how the slider is read when its value is changed, but these are secondary to the above issue.",0,0,0,0.9476546049118042,0.8452211022377014,0.9011737108230592,0.0,accept,unanimous_agreement
1260620044,3696,". given that the scale for the recording volume slider presented visually is wrong ([a link] i think it would be better if the values of the volume slider read by screen readers were in the range 0 to 100, rather than incorrect ones in the range -60db to 0db. i think that would be far less confusing. what do you think?",0,0,0,0.8963541984558105,0.8448580503463745,0.8713673949241638,0.0,accept,unanimous_agreement
1263581171,3696,"edit: ignore my previous comment. actually, i think we should still display the meter the way it is for recording. however, we should display a % value while dragging the slider - and i think this should be passed to the screen reader too.",0,0,0,0.9630879759788512,0.9880231618881226,0.9866451621055604,0.0,accept,unanimous_agreement
1266697471,3696,"i've updated a pr, can you please tell if it's alright now?",0,0,0,0.9592980742454528,0.9815971851348876,0.9931361675262452,0.0,accept,unanimous_agreement
1267275190,3696,"my days! i am really struggling to figure out how to tab to the record volume slider (using macos) in order to change it and hear a screenreader :frowning_face_with_open_mouth:. is it mainly a windows thing? need tutorial! apart from that two quick points: when changing the slider i can see a colon before the %. so it says **:77%**. i suppose it should say **recording volume: 77%**. the same with the play volume too. when i hover over the 'add effect' button, voice over (macos) calls it a 'taste'. (!) are we aware of this strangeness? i guess this should be raised as a separate issue. i was just curious if anyone had any thoughts.",-1,-1,-1,0.9532163739204408,0.990300178527832,0.991734504699707,-1.0,accept,unanimous_agreement
1268397874,3696,"just to let you know that i've started to have a look at this. it clearly isn't complete, and i'll add detailed comments soon.",0,0,0,0.9582507014274596,0.918796956539154,0.8750945329666138,0.0,accept,unanimous_agreement
1271649248,3696,"some comments on the volume sliders: 1. the names of the sliders are currently ""record meter"" and ""play meter"". they are not meters! in 3.1.3 the names of the sliders in the mixer bar were ""recording volume"" and ""playback volume"". the current names should be changed to something similar to those in 3.1.3. 2. the step sizes for the arrow keys and page up/down keys are too big. they should be the same as in 3.1.3: step size of 1 percent for arrow keys, 20% for page up/down. 3. when as slider is the focus, the value of the slider is read by the screen reader periodically, for no good reason. this is caused by the value change event created in meterpanel::updateslidercontrol(). the creation of this event should be removed from this function. 4. when the sliders are changed using the keyboard, the new value is not read by screen readers. i presume that adding the creation of a value change event at some suitable point in meterpanel::setmixer() would fix that. comments on the class meterax: 1. this looks like it's only been partly changed to be appropriate to the sliders - for example, meterax::getname() is still the code from when this was a meter, not a slider. (code along these lines will be needed for the accessibility of the meter buttons ). 2. asliderax provides a good template for what meterax should be like. note that asliderax::getname() isn't actually needed, as windowaccessible::getname() does the same thing. 3. currently the behaviour of some of the member functions of meterax depends on the value of meterpanel::maccsilent, however this no longer needs to be the case, now that meterax represents a slider. meterpanel::maccsilent was introduced at commit 3d420e01, and may well be needed for the accessibility of the meter buttons. i'll add some comments on the meter buttons shortly.",0,0,0,0.9100669622421264,0.9873228669166564,0.9024358987808228,0.0,accept,unanimous_agreement
1272119855,3696,i'm done with this round of review.,0,0,0,0.9739940166473388,0.9430570006370544,0.8809769749641418,0.0,accept,unanimous_agreement
1274649115,3696,"some comments on the meter buttons. the names of these buttons read by screen readers does not get updated to reflect the updated peak, whether their is monitoring, and whether there has been clipping. one way of fixing this would be as follows: - derive a class from abutton, say called meterbutton, and use it instead of abutton in this toolbar. - in the meterbutton class override the function wxstring getname() const, and in this function return a string with the same contents as the string produced by meterax::getname(). (meterax now represents a slider, so meterax::getname() should be removed). with respect to fully transferring the fix in commit [a link] once the accessibility names of the buttons are correct, i can check whether anything further needs doing about this. there may need to be a minor modification to abuttonax to give it a silent mode.",0,0,0,0.974964678287506,0.9891397356987,0.9884688258171082,0.0,accept,unanimous_agreement
1274804383,3696,"testing with commit 700256 on macos - i can tab to the sliders - after pressing vo+shift+down arrow to interact with one, i can use the arrow keys to change the value of the slider - voiceover does not automatically read the new value of the slider when it is changed - don't think it's ever done this for sliders in audacity.",0,0,0,0.8412686586380005,0.9845442175865172,0.9884673953056335,0.0,accept,unanimous_agreement
1275761496,3696,"another way of fixing it would be: - derive a class from abuttonax, say meterbuttonax, and set this as the accessible for the abutton in this toolbar. - in the meterbuttonax class override the function wxaccstatus abuttonax::getname, and in this function create a string with the same contents as the string created by meterax::getname(). (meterax now represents a slider, so meterax::getname() should be removed). again, there may need to be some minor fixes to fully transfer the fix in commit [a link]",0,0,0,0.9811450839042664,0.994690716266632,0.99435555934906,0.0,accept,unanimous_agreement
1285384025,3696,"testing on w19 with vitaly's branch: audacity-win-3.2.2-alpha-20221018+915aba6-x64 in this branch build: a) the sliders on the meter toolbars now have the value of the current position b) the tool-tip nicely updates when the slider is moved ![a link] david, are these readable by screen readers? my tests with nvda seems to indicate that this is ok, but i am no accessibility expert.",1,0,0,0.6414434909820557,0.8250312209129333,0.8006226420402527,0.0,accept,majority_agreement
1286768246,3696,"comments on the meter buttons in the latest commit: - if the meter is clipped, this is not read by a screen reader. in bool meterpanel::isclipping() const, it should be mbar[c].clipping, not mbar[c].isclipping, as in the old meterax::getname(). - when appropriate, the screen reader should read ""monitoring"" or ""active"", but not both, as in the old meterax::getname(). - the accessibility name does not include the current peak level, as in the old meterax::getname(). in metertoolbar::populate(), the accessibility names of the buttons should just be set to ""record meter"" and ""playback meter"", as the peak level should be included in meterbuttonax::getname(). - when the button is pressed by pressing enter, there is an unwanted ""beep"" indicating an invalid action. see also [a link]",0,0,0,0.9787181615829468,0.995200514793396,0.9882792234420776,0.0,accept,unanimous_agreement
1287012872,3696,"and since vitaly's branch build audacity-win-3.2.2-alpha-20221018+915aba6-x64 [a link] at least fixes: #3810 hovertext tooltips for recording and playback sliders no longer show the values and this is a **_very_** useful improvement for users, is there any chance that we could pull this fix right now (for 3.2.2) while the further important accessibility issues that raises can be dealt with separately - leaving this pr thread and #3230 still open - while closing off #3810. bearing in mind that #3810 is a recent regression issue introduced in 3.2.0 with the new combined meter/mixer toolbars. ?",0,0,1,0.5366867184638977,0.9430755376815796,0.5659899115562439,0.0,accept,majority_agreement
1288661398,3696,"you may well be aware of this already, but there's a comment in void meterpanel::onkeydown(wxkeyevent &evt) about avoiding a beep.",0,0,0,0.9825232028961182,0.9917706251144408,0.9920382499694824,0.0,accept,unanimous_agreement
1291925036,3696,do i understand correctly that button name should include **peak hold** value and the slider should include **peak** value (`decibelscalecutoff`)?,0,0,0,0.9899327754974364,0.9948746562004088,0.9923874139785768,0.0,accept,unanimous_agreement
1291983393,3696,"- the slider should not include the peak value. - the button name should include the peak hold value, as it did in the old meterax::getname(). (and the order of phases that make up the name should remain the same.) snippet of old code: float peak = 0.; bool clipped = false; for (unsigned int i = 0; i < m->mnumbars; i++) { peak = wxmax(peak, m->mbar[i].peakpeakhold); if (m->mbar[i].clipping) clipped = true; } if (m->mdb) *name += wxt("" "") + wxstring::format(_("" peak %2.f db""), (peak * m->mdbrange) - m->mdbrange); else *name += wxt("" "") + wxstring::format(_("" peak %.2f ""), peak); if (clipped) *name += wxt("" "") + _("" clipped ""); }",0,0,0,0.982917845249176,0.99365234375,0.9915278553962708,0.0,accept,unanimous_agreement
1305388209,3696,"-licameli . i know you're busy, but could you review this. i may want to submit a fix for another bug, and want to avoid conflicts when it's merged.",0,-1,0,0.9218279123306274,0.6417214274406433,0.6557801961898804,0.0,accept,majority_agreement
1305470245,3696,very nearly done,0,-1,0,0.9389963150024414,0.7591837048530579,0.7049157023429871,0.0,accept,majority_agreement
1306989752,3696,so now this has been approved by -licameli and - how does this get pulled so it can be tested in a 2.3.3 alpha or beta?,0,0,0,0.9842481017112732,0.9148972630500792,0.9948051571846008,0.0,accept,unanimous_agreement
1307106922,3696,"did yet complete testing it, right?",0,0,0,0.9827916026115416,0.9843788743019104,0.9931071400642396,0.0,accept,unanimous_agreement
1307216751,3696,not yet.,0,0,0,0.7735316157341003,0.9529916644096376,0.87675541639328,0.0,accept,unanimous_agreement
1308611679,3696,note that latest 3.3.0 alpha: audacity-win-3.3.0-alpha-20221109+fe50013-x64-msvc2022 does **_not_** yet have thus merged in. looks good on latest 3.2.2.beta: audacity-win-3.2.2-beta-20221109+f0bb347-x64-msvc2022,1,0,0,0.9046286344528198,0.9165471792221068,0.6249624490737915,0.0,accept,majority_agreement
1619005357,4867,first round of review is done. not approved yet.,0,0,0,0.9665566682815552,0.9853813052177428,0.99005788564682,0.0,accept,unanimous_agreement
1619432976,4867,"i've noticed a problem. 1. i create a label track, add a label at time t=1. 2. i half the project tempo, the label goes to t=2, as expected. 3. i undo with ctrl+z : now the label is at time t=0.5. haven't verified this, but i guess this is because the label track is copied for undo purposes. when undoing, it replaces the track modified in the last step. that would fit: 1. i create a label track, ... 2. i half the project tempo, ... => and ""undo-list"" label track is created beforehand, with label at t=1. 3. i undo ... => the track in the undo list replaces the project's track, with label at t=1, but then the time-signature restorer calls onprojecttempochange. so the original label position is restored, but then time-stretched. don't know the solution yet.",0,0,0,0.7898519039154053,0.9403420686721802,0.7300283312797546,0.0,accept,unanimous_agreement
1619449318,4867,"looks like i solved it, but it'll be worthwhile reviewing with care.",0,0,1,0.6389150023460388,0.6980557441711426,0.5309139490127563,0.0,accept,majority_agreement
1619924346,4867,i am more confident now.,0,0,0,0.8613427877426147,0.8568181395530701,0.5372439026832581,0.0,accept,unanimous_agreement
1620015314,4867,is there now only one commit?,0,0,0,0.9788772463798524,0.9884387850761414,0.9873812198638916,0.0,accept,unanimous_agreement
1620031385,4867,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
1620065505,4867,"now that projecttempolistener.h is gone, you might also put all of that class inside the anonymous namespace, making the symbol tables a tiny bit smaller and link time a tiny bit less. remembering this in similar cases might have some cumulative effect. don't ask me to quantify.",0,0,0,0.9757062196731568,0.9258171319961548,0.9820661544799804,0.0,accept,unanimous_agreement
1620081562,4867,"it's good enough to merge now. compilation is fixed. suggestions only to use the anonymous namespace, and skip the needless construction step. update the pr or issue description with what qa should test. the expectation is that three of the four track types update themselves correctly for changes of project tempo, and also that undo and redo work -- and also, cut-copy-paste, even between projects.",1,0,0,0.5332851409912109,0.8333023190498352,0.9041494131088256,0.0,accept,majority_agreement
1620083156,4867,persistency too should be on the qa checklist,0,0,0,0.9863166213035583,0.9918245673179626,0.9929072856903076,0.0,accept,unanimous_agreement
1628843008,4867,-licameli could you please rebase this pr on the more recent `master` (containing the fix for that error of having mismatched sample rates when opening a project) so that i could make sure that persistency works?,0,0,0,0.9876664876937866,0.9935194849967957,0.9923385381698608,0.0,accept,unanimous_agreement
1628858186,4867,"i did that, and resolved its conflicts with my recently merged work. persistency of project tempo in the clips is not yet implemented in this pull request.",0,0,0,0.9816107749938964,0.9938719272613524,0.9925105571746826,0.0,accept,unanimous_agreement
1628862219,4867,"what is expected to work, is that note, label, and time tracks correctly adjust how they are drawn as project tempo changes. the work for wave tracks isn't yet here.",0,0,0,0.9840866923332214,0.9938029050827026,0.991303563117981,0.0,accept,unanimous_agreement
1826759930,5685,here we can see that there is slight clipping of the negative going waveform in the right channel: ![a link],-1,0,-1,0.9460719227790833,0.9870570302009584,0.3765514194965362,-1.0,accept,majority_agreement
1826761382,5685,"what's an appropriate level to set the limiter threshold? ![a link] looking more closely at the peaks, i think i may need a bit of compression before applying the limiter. ![a link]",0,0,0,0.7220371961593628,0.9681479334831238,0.5899332761764526,0.0,accept,unanimous_agreement
1826762142,5685,fixing the vertical scale might be useful. ![a link] ![a link],1,0,1,0.5009089708328247,0.984348714351654,0.8819277882575989,1.0,accept,majority_agreement
1827898147,5685,"i think the big plus-sign cursor for advanced vertical zooming in spectrogram view looks most odd, cheap-and-tatty rather than carefully crafted. maybe it's just too big? but basically i don't see what was wrong withe the old cursor, the magnifying glass. ----------------------------------------------------------------------- in spectrogram view it can shrink to a very thin bar with no reticules or numbers at high v-zoom levels: ![a link]",0,-1,-1,0.6681374907493591,0.8326796293258667,0.9816796779632568,-1.0,accept,majority_agreement
1828177292,5685,"i did some testing on old versions - and it appears that advanced vertical zooming was present from at least 1.2.6 onwards, so dominic implemented that very early on. and in those days it was only waveforms, no spectrogram views back then. a) the cursor back then was the little magnifying glass with the plus sign in it (which changed to a magnifying glass with a minus sign when you you used shift modified left click to reverse the vertical zoom. b) you could specify the vertical range to be zoomed with the click and drag in the vertical scale c) there was no right-click context menu d) but the vertical zooming with a left mouse button click in the vertical scale could be used many times - and it centred on where the cursor was in the vertical scale. in contrast the simple non-advanced context menu zoom in on the waveform seems to be limited to just one zoom in in this branch _(this limitation is not new it is in 3.4.2 and 2.4.2, so we have lost functionality there c.f. 1.2.6)_ e) in 1.2.6 the vertical scale was handled well even with a lot of zooming in and i think that is absolutely right in that it was only ""advanced"" vertical zooming for many years and many versions of audacity. and is was only later when james introduced the new ""simple"" vertical zooming accessed from the vertical scale context menu that the old logstanding vertical zoom acquired the label ""advanced"" ### tl;dr **i would would _strongly_ like to see advanced vertical zooming retained for waveforms as well as spectrograms.**",0,0,0,0.860044002532959,0.9835535287857056,0.9777405261993408,0.0,accept,unanimous_agreement
1828500689,5685,"having a separate normal zoom and advanced zoom is an extremely poor allocation of functionality. another example of this are cut lines, which, despite having been introduced in 2006 iirc, have a mere 23 mentions in the forum. having these features and having them off by default adds a *lot* of complication for no real benefit for the *vast* majority of users. for spectrograms, steve was able to [a link] how the drag-to-zoom plays well into our other tools, namely the drag-to-make-box selection. hence why this pr enables it for that use by default. for waveforms, i do not see this this level of usefulness for the drag-to-zoom feature. what i do see however is a lack of functionality: if you have a recording or a stem at -10 or -20db or so, it currently is very hard to quickly zoom in while keeping the 0-line centered. this pr makes this much more used feature a lot faster. note that ctrl+scroll and shift+scroll are still possible and may be used to create all of the situations shown in this thread. for neither view i see a good argument to keep click-to-zoom-in, shift-click-to zoom-out or shift-right-click-to-reset. the former is *way* too easy to trigger accidentally and the latter two are stupidly hard to discover. just imagine, you just recorded something, accidentally clicked the vertical ruler and now it *looks* like your waveform is hopelessly off-center and clipping hard, and ctrl+z deletes the recording you just made. that's extremely panic-inducing, and we will not keep it, and certainly not by default. magnifying cursor implies click-to-zoom (compare to how browsers behave when viewing an image in a new tab). i use the default crosshair cursor here (which, aside, would be the correct one for the box selection in the spectrogram as well). but what i really need is a rotated i-beam-looking thing, or something else which is pretty clearly a horizontal line. that's a bug in my branch, i'll fix it. use ctrl+scroll in the meantime.",-1,0,-1,0.904329240322113,0.6504902839660645,0.864557683467865,-1.0,accept,majority_agreement
1828584467,5685,"actually, i can't reproduce it. right-click > zoom in happily zooms in again and again for me.",0,-1,0,0.717587411403656,0.6004009246826172,0.5983641147613525,0.0,accept,majority_agreement
1829721008,5685,"rather that removing functionality that close to a quarter of responders to your own survey say that they use, maybe it would be better to redesign it in a way that is more discoverable and less prone to accidental clicking. for example, some audio apps use explicit zoom / pan controls on the track that operate in a similar way to scroll bars and are designed to look like zoom / pan controls. by the way, testing [a link] on linux, because the ""advanced vertical zooming"" option is still available in the menu but non-function in any of the track waveform views, i predict that if audacity is released like this, there will be a lot of people thinking that it is yet another thing that is broken. personally, i think that the way that ""advanced vertical zooming"" was implemented (up to and including 3.4.2) is sub-optimal for the reasons that you describe. i also think that advanced vertical zooming is a very valuable feature for advanced audio editing that must be retained. in my opinion, this pull request should be closed and an ""enhancement"" issue drafted for a better implementation of current functionality.",0,0,0,0.9673330783843994,0.9752962589263916,0.9805741906166076,0.0,accept,unanimous_agreement
1829734581,5685,[a link] is the companion pr which removes the preferences.,0,0,0,0.986887514591217,0.9913523197174072,0.9947649240493774,0.0,accept,unanimous_agreement
1831805019,5685,"the zoom got unbroken now. using ctrl+scroll and shift+scroll, you can do all the advanced zooming you want now, plus keep the benefit of it centering around 0 if you never offset the view.",0,0,0,0.947826087474823,0.974395990371704,0.987756848335266,0.0,accept,unanimous_agreement
1831890186,5685,"testing on w10 with latest branch for this: audacity-win-3.5.0-alpha-20231129+dd45d48-x64 in the vertical scale context menu in spectrogram view what is the difference between **zoom to fit** and **reset zoom** ? ![a link] in contrast, i note that waveform view only has **reset zoom**",0,0,0,0.9300551414489746,0.9927297234535216,0.989083170890808,0.0,accept,unanimous_agreement
1831918158,5685,"i don't need to zoom asymmetrically on the waveform very frequently, but as in the examples above, i do sometimes need to do so. will i still be able to do that when i need to?",0,0,0,0.9685459136962892,0.9234207272529602,0.9813909530639648,0.0,accept,unanimous_agreement
1831968279,5685,"definitely yes. ctrl+scroll zooms in and out, shift+scroll moves the wave up and down.",0,0,0,0.9046855568885804,0.9718433618545532,0.9632786512374878,0.0,accept,unanimous_agreement
1831975884,5685,"fwiw, i find that a lot more cumbersome than just click and drag, especially with the db scale where there are three different mouse-wheel actions.",-1,-1,-1,0.9441566467285156,0.7332872152328491,0.8309460282325745,-1.0,accept,unanimous_agreement
1831989780,5685,"one goes to half the sample rate of the track, one goes to ""normal"" zoom (i think 20k?). there's a noticable difference between them if you go into the >48k sample rates, but for 44.1k it's very similar.",0,0,0,0.980160117149353,0.9084426164627076,0.9682214856147766,0.0,accept,unanimous_agreement
1832492012,5685,"also known as the nyquist frequency, beyond which, any higher frequency content you might have sampled is aliased. (study rising square wave chirps, contrasting square with square, no alias. the overtones of the perfect square wave are ""bouncing off the ceiling"". but square, no alias only sums lower terms of the fourier series, making a wave not exactly square.) here you see the ""gibbs effect"" at the start of the second chirp -- a certain mathematically unavoidable overshooting that happens when you truncate the fourier series. > one goes to ""normal"" zoom (i think 20k?). there's a noticable difference between them if you go into the >48k sample rates, but for 44.1k it's very similar.",0,0,0,0.9642484784126282,0.9568526148796082,0.9752410650253296,0.0,accept,unanimous_agreement
1832513121,5685,"oh yeah -- i forgot this commit 3142060 where i changed default spectrogram preferences according to martin's wishes. but for long before that, maximum frequency preference defaulted to 8000 hz not 20000. zoom reset readjusts the top of the scale to whatever that preference is (but strangely, not the bottom -- which will be 0 for linear or 1 for logarithmic). zoom to fit goes up to nyquist.",0,0,0,0.9267774224281312,0.9444364309310912,0.967112362384796,0.0,accept,unanimous_agreement
1832518458,5685,"incidentally too, individual tracks may have differently adjusted spectrogram settings unlike the defaults in preferences. but i think it's not wholly satisfactory how all of that works. there is a ""use preferences"" checkbox to reset all to defaults. but maybe you would want to do the opposite? assign the settings of this track as new defaults? there is also no way to have a track override just some of the settings but keeping all others the same as the preferences. explore this and see what i mean. maybe it's matter for another enhancement request.",0,0,0,0.9391568303108216,0.788622260093689,0.9547381401062012,0.0,accept,unanimous_agreement
1832582850,5685,"i'm pleased to see you start figuring out more substantial c++ changes, leo. about the mouse wheel actions: there is shift+wheel, and ctrl+wheel (or pinch and spread on a touch pad), but did you observe that the latter can also be shift-modified too? that causes, for log db view only, another change: variation of the bottom of the db scale. consider whether you like that, or want to rebind it, or mention it in tool tips. i'm also reminded that i find the fineness of mouse wheel control for these things a bit unsatisfactory.",1,1,1,0.9540870189666748,0.8666269183158875,0.9056544303894044,1.0,accept,unanimous_agreement
1833609398,5685,"actually it's not tooltips, it's status bar messages, which are easier to overlook, but still it is something.",0,0,0,0.9621332287788392,0.9740448594093324,0.9789486527442932,0.0,accept,unanimous_agreement
1833618156,5685,"or did you decide otherwise because those shortcuts are not mentioned in the status bar message, which is already long?",0,0,0,0.9855672121047974,0.9895482063293456,0.9910707473754884,0.0,accept,unanimous_agreement
1833647482,5685,testing on w10 with 's latest branch: audacity-win-3.5.0-alpha-20231130+9817f6c-x64 i am somewhat surprised to find that while the vertical click&drag to define a vertical zoom region - we still have it retained in the note (midi) tracks. i'm still finding the ability to zoom to a vs click&drag vertical region a loss yes you can achieve the same or similar efffect with ctrl and shift modified mouse-wheel actions - but i find those a _**lot**_ more fiddly - with more clicking _(if gale andrews were still alive he'd be complaining about his rsi)_.,-1,0,-1,0.6411948800086975,0.6604581475257874,0.6835559606552124,-1.0,accept,majority_agreement
1838725191,5685,this is very poor. you have removed functionality that even your own survey indicates is regularly used.,-1,-1,-1,0.9333063364028932,0.989130973815918,0.966924786567688,-1.0,accept,unanimous_agreement
1838759068,5685,i have not removed functionality. i have removed a certain kind of interaction.,0,0,0,0.8898128271102905,0.948127031326294,0.9891111254692078,0.0,accept,unanimous_agreement
1838818415,5685,"consider this simple project: ![a link] 1) i find it odd and inconsistent that when i hover my cursor over the bottom two, the spectrogram and the note track i get a cursor that allows me to still ckick&drag a spread for the vertical zoom. 2) note that the spready cursor icon is different for both use cases - a further inconsistency a) the big plus sign for spectrogram b) the old magnifying glass for the note track i do like the new v-zoomy menu structure - but i am failing to see why it is really necessary to remove the spready vertocal zoom selection for only the waveform view. **audacity has had that click&drag vertical zoom selection for over 20 years in the 1.2.x series.**",-1,-1,-1,0.9728450179100036,0.671108603477478,0.936625361442566,-1.0,accept,unanimous_agreement
1838893198,5685,i'll rephrase: this is very poor. you have removed _a certain kind of interaction_ that even your own survey indicates is regularly used.,-1,-1,-1,0.9470638036727904,0.9576775431632996,0.7491556406021118,-1.0,accept,unanimous_agreement
1839162342,5685,i've updated the manual for these changes,0,0,0,0.9814110398292542,0.9833336472511292,0.9927845001220704,0.0,accept,unanimous_agreement
1133648532,2957,"i have made some suggestions for change. consider this round one of review. i see this draft pull request is incomplete. `storesettings` is defined but not yet used. to complete the analogy with the first phase of statelessness for audiounits, we should also see savesettings and loadsettings use only the intermediate vst3effectsettings.",0,0,0,0.9804090261459352,0.980006754398346,0.9874293208122252,0.0,accept,unanimous_agreement
1135867008,2957,"none of the boxes in [a link] are yet ticked off, and some of these small commits are fixes of previous ones. i think it's time for an interative rebase onto latest master, and also that the sequence of commits should address the checkboxes in the suggested sequence. and as discussed, let's make a small commit before any others, to fix the error in registry paths that pietro identified.",0,0,0,0.985484778881073,0.9913375377655028,0.989053189754486,0.0,accept,unanimous_agreement
1141685032,2957,"this pr has been superseded by [a link] too, so i am closing it.",0,0,0,0.9448869228363036,0.9863629937171936,0.992787778377533,0.0,accept,unanimous_agreement
1565311985,4739,testing on w10 with -licameli 's branch build: audacity-win-3.4.0-alpha-20230526+4a8eda0-x64 i confirm that the behavior reported in #4737 is now blocked in this branch build: ![a link] **track format** but note carefully that this fix does not block the creation of a stereo track from two single tracks each with a different **sample format**. i tried with a 16-bit track and a 32-bit track - they could be merged into a single stereo track at 16-bit _(the 16-bit track was the upper track)._ and when split again they both reverted to their original bit formats 16-bit and 32-bit.,0,0,0,0.5601741075515747,0.9821581840515136,0.9789288640022278,0.0,accept,unanimous_agreement
1565600100,4739,"thanks. yes, i should do other work to disallow mismatch of sample widths. did i do the right thing for rates? an alternative to the prohibition might be a quiet resampling of the lesser rate to the greater. likewise for widths: the narrower might quietly change to match the wider. no dither would be needed, but storage requirements of the saved project might increase. so should a join of channels with mismatched formats fail too with an error? a third possibility (with either rates or channels) would be to ask the user.",0,0,1,0.5146574974060059,0.6497881412506104,0.8818991780281067,0.0,accept,majority_agreement
1566032870,4739,"well i like it throwing the error - but i'm no expert in such matters. _i have written to dominic to ask if he allowed this deliberately for some reason._ folk already complain a lot about storage requirements increasing ... i would have thought so that could also work - but would be complex if both rate and format were mismatched. but i would suggest that as a first step simple error trap(s) and error report(s) are fine. but you may need a third message for where both the rate and the format are mismatched. _**the preferred approach is really a decision for the muse design team, deciding if they prefer the simple error(s) or a corrective dialog.**_",1,1,0,0.8218603134155273,0.435543954372406,0.6735450029373169,1.0,accept,majority_agreement
1566086136,4739,"- can we investigate a little bit what we should do here to be as gracefully and friendly to the user as possible? i feel we should try to make a decision about this. a part of me thinks that we should just do this and not ask the user any questions. however, there's going to be more to it than that methinks. a discussion for our design meeting, i feel!",1,1,1,0.9494958519935608,0.5269885659217834,0.5361567139625549,1.0,accept,unanimous_agreement
1566116715,4739,"resampling is generally lossy, i'm not sure that implicit resampling is a good idea",-1,-1,-1,0.5059814453125,0.784542977809906,0.5180462598800659,-1.0,accept,unanimous_agreement
1566140664,4739,a very good point dmitry,1,1,1,0.9828081727027892,0.9939267039299012,0.9902557730674744,1.0,accept,unanimous_agreement
1566151916,4739,"remember the user might attempt to make a stereo track interactively, or there might be files saved before 3.4 that the user tries to load into new audacity. whatever the resolution (disallow, fix quietly, or ask), the work of detecting the condition is necessary and i put that effort in for the rates, but not yet for the formats. actually, format mismatch between channels, with no rate mismatch, might be a tolerable thing with all the data restructuring, not presenting significant trouble for the time stretching calculations we need to do, but it's all the same a weird thing to do.",0,-1,-1,0.9138914942741394,0.574910581111908,0.9558670520782472,-1.0,accept,majority_agreement
1566159151,4739,a good point paul. so would you error trap that and offer to fix it by up-sampling to the higher of the two rates?,1,1,1,0.9309676885604858,0.8486538529396057,0.945742130279541,1.0,accept,unanimous_agreement
1566167798,4739,i'm coming to the conclusion that i cannot solve this with a single sentence :) thanks all. we'll need to give it some proper thought. perhaps explicit prompts are the way to go.,1,1,1,0.9892690777778624,0.9944779872894288,0.9967746138572692,1.0,accept,unanimous_agreement
1566193837,4739,"is that really so? if there is in fact no frequency content above 1/2 of the lesser sample rate (the lesser of two nyquist frequencies), i think the sampling theorem tells us that theoretically you could down-sample from the from the higher rate to the lower, then up-sample again, without loss. practical calculations would truncate the tails of sinc functions though.",0,0,0,0.9780014753341676,0.9829314351081848,0.9890150427818298,0.0,accept,unanimous_agreement
1566227637,4739,"there's no inherent loss, but calculation is expensive. an old smith and gossett paper did an error analysis and said you need something like 50 multiply/adds and 50 accurate estimates of the sinc function to get 16-bit resolution (so even more for 20 or 24 bits). you can estimate the sinc function with interpolated table lookup, but that's two memory accesses, a float to int conversion (usually this is expensive) and additional float operations (times 50 or however many points you use) so it's much worse than just 50 multiply/adds. i don't think there are any tricks to do fast interpolated lookups. on the other hand, i think macos uses implicit sample rate conversion in core audio so that you can open an output device at any sample rate even while the device is playing a stream at some other rate. i wouldn't be surprised if they cut corners on conversion, and i strongly believe software sampling synthesizers do not do such high-quality conversion since the worst case numerically (e.g. full amplitude at 20khz) is not something you'll find in listenable audio, so you can normally get away with fewer points (i.e. a more truncated sync function). i don't know what's common practice, and people i've asked told me the details were trade secrets.",-1,0,0,0.6310240626335144,0.7598336935043335,0.9084387421607972,0.0,accept,majority_agreement
1566315083,4739,"thanks, roger! so, there is theory but then there is practice... and so quiet resampling is probably not a thing we should do and it isn’t what i did in this pull request.",1,1,1,0.9387022256851196,0.962074339389801,0.9934948086738586,1.0,accept,unanimous_agreement
1566728286,4739,not to mention that it would further increase the storage requirements!,0,0,0,0.9498480558395386,0.91208815574646,0.9273815155029296,0.0,accept,unanimous_agreement
1566746674,4739,"my guess on how most users would feel about the negative side effects of the various solutions : * quality loss: unaware, indifferent * memory increase: unaware, understanding * error pop-up: perplexed, annoyed, clueless i therefore would favour the silent conversion (both sampling-rate and bit-depth wise). whatever user is aware of the quality loss is probably tech savy and will find a way around it, or look a default behaviour she could change.",-1,-1,0,0.7368857860565186,0.7313894033432007,0.8301919102668762,-1.0,accept,majority_agreement
1566753497,4739,"they are most certainly frustrated by the storage requirements, so definitely aware and not so understanding. resampling a track will effectively keep the old track on your drive before you close audacity (or even after, if you are unlucky), followed by a slow (and storage space demanding!) compaction. trying to join two tracks with different sample rates sounds like a very rare corner case. i would much prefer to have a descriptive error message here, probably coupled with ""resample to xxx"" button.",-1,-1,-1,0.9746495485305786,0.7347517013549805,0.7465683817863464,-1.0,accept,unanimous_agreement
1566764608,4739,"dmitry is right here : we see many cases/complaints on the forum (and here on github) about the ballooning sizes of projects - so to add to this with hidden automatic resampling seem absolutely not the right thing to do. and in the light of roger's comments _(and dmitry's earlier comments in this thread - and 's too)_ - i **_fully_** support dmitry's approach here - which is basically the approach that -licameli was originally pursuing with this pr ""fiix"".",0,0,0,0.9004234671592712,0.9613686800003052,0.867868185043335,0.0,accept,unanimous_agreement
1566783322,4739,"true, but if a user wants to do this, gets the error message and knows how to solve the problem, she will probably proceed with resampling manually, resulting in the same memory increase, no?",0,0,0,0.983712673187256,0.9555553197860718,0.986650824546814,0.0,accept,unanimous_agreement
1566784837,4739,a good decision. but note that we also have to deal with mis-matched formats - but -licameli is already aware of that. and consideration needs to be given to paul's earlier point about old projects already containing such stereo tracks with mis-matched rates and/or formats.,1,0,1,0.7426756024360657,0.9544276595115662,0.9528562426567078,1.0,accept,majority_agreement
1566786988,4739,"but it won't be implicit. on top of that, the user may want to resample to a lower rate, not to a higher one. or just to pan tracks accordingly (in case there are no plans to apply a stereo effect)",0,0,0,0.9832553863525392,0.9794488549232484,0.9890402555465698,0.0,accept,unanimous_agreement
1566805943,4739,"i like the panning idea, and suggest that the error message one way or another indicates this workaround.",1,1,1,0.8810597062110901,0.9685195088386536,0.6983402371406555,1.0,accept,unanimous_agreement
1567948421,4739,"i've been discussing this with dominic mazzoni, the godfather of audacity. his basic view",0,1,0,0.8142624497413635,0.925842821598053,0.9034745693206788,0.0,accept,majority_agreement
1568602678,4739,"testing on w10 with -licameli 's branch build the use case of ""attempting to load a project (made previously) with mismatching rates in a stereo track"". i confirm that this is indeed blocked by paul's branch build as -miller-audacity reported in #4737 but, the error message i get is: ![a link] this message is not helpful at all to the user: **a) they would need to guess that they could manually fix this:** 1. open it in an earlier version of audacity 2. examine each stereo track in turn by splitting to mono, examining the tcp 3. resample requisite tracks to match sample rates 4. rejoin the mono tracks as stereo tracks 5. save the project 6. reopen project in latest audacity **b) audacity offers no repair help** most folk are going to struggle to guess or even implement the a) manual fix. so while we seem to have agreed we should just block such mismatched stereo track creation in 3.4.0 onwards with no automatic resampling - i think a _**good**_ case can be made for offering automatic resampling of channels in stereo tracks as part of the above error message. not many users are going to guess/intuit the step required for the a) manual fix - and i'm pretty sure we wouldn't want to put those manual steps in an error message.",-1,0,0,0.7623394727706909,0.9558965563774108,0.7954883575439453,0.0,accept,majority_agreement
1570094036,4739,rebased onto recent master; one commit added to change error messages; otherwise unchanged.,0,0,0,0.9875147342681884,0.9848586320877076,0.9939963817596436,0.0,accept,unanimous_agreement
1571706198,4739,added one commit to fix the first of two problems described at [a link],0,0,0,0.9886504411697388,0.9917715191841124,0.9950473308563232,0.0,accept,unanimous_agreement
1571860161,4739,should i wait a bit for review this time?),0,0,0,0.6652079820632935,0.9821151494979858,0.9864420890808104,0.0,accept,unanimous_agreement
1571860804,4739,"two more commits. one more review, please. addressing the other problem in ryan's comment. the work to make higher-level file consistency checks work properly, incidental to disallowing the sample rate mismatch -- it wasn't complete. thanks -miller-audacity , and i don't agree with leaving the problem to be fixed later.",1,0,1,0.6979098916053772,0.5540947914123535,0.8624952435493469,1.0,accept,majority_agreement
1571863271,4739,"absolutely no problem with that :-) i was just joking a bit, sorry :-)",1,1,1,0.9547722339630128,0.7210252285003662,0.9958757758140564,1.0,accept,unanimous_agreement
1571894623,4739,please note the build failures. i think the fix is trivial - tentativeconnection should be exported,0,0,0,0.9796969294548036,0.9590347409248352,0.9916218519210817,0.0,accept,unanimous_agreement
1571950325,4739,sorry,-1,-1,1,0.9871875047683716,0.9823289513587952,0.6406954526901245,-1.0,accept,majority_agreement
1573381835,4739,"these are the revised error messages that and team discussed and agreed on and are in -licameli 's latest branch build note that neither method of resampling is discussed here in these messages - it is up to the user tro decide whetherbtoi use te tcp dropdown or resample tracks from the menu, nor any other workaround like panning and i think that is a good and right decision as otherwise the error messages become too long an overburdened and end up being tl;dr.",0,0,1,0.668332040309906,0.9719431400299072,0.7858683466911316,0.0,accept,majority_agreement
1573407955,4739,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
1581453769,4739,"three added commits! not only completing fixes for the problems -miller-audacity identified with saved files, with non-default sample rate, in a stereo track. but also fixing (what qa won't detect using release builds) some assertion violations. and the rest, one more round of review, please!",0,1,1,0.7318906188011169,0.979570746421814,0.9092509150505066,1.0,accept,majority_agreement
1582095834,4739,testing on w10 with -licameli 's branch: audacity-win-3.4.0-alpha-20230607+5830faf-x64 ### 1. making a mismatched stereo track this remains blocked by the revised error message: ![a link] ### 2. splitting a stereo track splitting to stereo and mono remain different with a) split to stereo producing panned-left & panned-right tracks b) split to mono producing two center-panned tracks ### 3. project opening with a mismatched stereo track a project made and saved in 3.3.2 with a stereo track with mis-matched sample rates cannot be opened in paul's branch: ![a link] ### 4. ryan's issue -miller-audacity reported in #4737 i confirm that paul's new branch also fixes this issue - the project reopens correctly: a) with no error message b) with the stereo track at the changed sample rate i tested by: i) resampling from the track control panel dropdown menu ii) tracks > resample ### 5. initial import still changes the project rate audacity still **_silently_** changes the project rate if the first imported track's rate does not match the existing project sample rate. this is issue #4448 which is now exacerbated as the project sample rate is no longer displayed on the main audacity window in the selection toolbar.,0,0,0,0.8527918457984924,0.990580141544342,0.993176817893982,0.0,accept,unanimous_agreement
1558767352,2805,- [ ] there are track selection commands whose implementation were modified by `264ea9f`. i couldn't find them anywhere in the ui so don't know how to test this but i suppose it is testable.,0,0,0,0.982107937335968,0.9882802963256836,0.9910972118377686,0.0,accept,unanimous_agreement
1558780996,2805,-licameli in the test list you mention - [ ] why specifically to mono? selectness should also be replicated.,0,0,0,0.9880706071853638,0.9922025203704834,0.9895449280738832,0.0,accept,unanimous_agreement
1558856029,2805,thanks for the `playabletrack.h` clean-up.,1,1,1,0.7546008825302124,0.5623936653137207,0.8781783580780029,1.0,accept,unanimous_agreement
1558911929,2805,- [x] i built `a95e16c` and crashed it by opening a mono wav file. ![a link] it's 100% reproducible but i can't hit any of the breakpoints i set over writings of `mstates` before it crashes. also happens just creating a new empty track.,0,0,-1,0.8481698632240295,0.8740466237068176,0.6037679314613342,0.0,accept,majority_agreement
1558982477,2805,"set status to ""request changes"" essentially for the crash. there's not much i can test until it's fixed. not sure if the rest of my comments should result in changes yet, awaiting your replies for that.",0,-1,0,0.908693552017212,0.6528187990188599,0.8767716288566589,0.0,accept,majority_agreement
1559530691,2805,"i updated the top comment to mention selected state too. ""why specifically to mono?"" i don't understand, what other kind of splitting is there?",0,0,0,0.9351948499679564,0.9669288992881776,0.9851287603378296,0.0,accept,unanimous_agreement
1559720725,2805,"we know the fix for the crash now. i pushed it, and also some of your less important suggested changes.",0,0,0,0.9845341444015504,0.976070761680603,0.9858766794204712,0.0,accept,unanimous_agreement
1560484438,2805,"i meant ""split stereo track"" as opposed to ""split stereo to mono"", but actually the former looks just like the latter, with hard left-right panning. please ignore.",0,0,0,0.7645570635795593,0.8820210099220276,0.8741198182106018,0.0,accept,unanimous_agreement
1560592567,2805,"there remains a `wavetrack::attachments::registeredfactory`, namely in `wavetracklocation`. just glancing at it looks like it has to do with cut lines and merge points. still not sure what that is and if it makes sense to still have this data on a per-channel basis or if it also should be grouped in `channelgroupdata`.",0,0,0,0.8958231210708618,0.9503111243247986,0.9340040683746338,0.0,accept,unanimous_agreement
1560598168,2805,"there remain calls to * `tracklist::channels(track).size()` in normalize.cpp, line 177, * `tracklist::channels(ptrack).size()` in wavetrackcontrols, line 1031.",0,0,0,0.9866535067558287,0.995124876499176,0.9950243830680848,0.0,accept,unanimous_agreement
1560599168,2805,"sorry, i thought ""close with comment"" would finalize my review, not close the pr :grinning_face_with_sweat:",-1,-1,-1,0.9898070693016052,0.9884230494499208,0.9543226957321168,-1.0,accept,unanimous_agreement
1560859650,2805,"that is a different attachment place, unlike the group data. cut line locations are still inherently per-channel rather than per-track, until i really do the reorganization of clips to contain multiple sequences. until then, it is possible that cut lines in opposite channels are at different times. the time to reorganize this is not yet now.",0,0,0,0.9634584188461304,0.9627302885055542,0.9874308109283448,0.0,accept,unanimous_agreement
1560883322,2805,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1561358093,2805,"interactively rebased onto latest master, squashing some fix-ups. not expecting anything to behave differently in the next build.",0,0,0,0.8533140420913696,0.9087287783622742,0.9689772725105286,0.0,accept,unanimous_agreement
1601797624,4795,"rebased onto recent master, with only minor changes for review feedback",0,0,0,0.9812937378883362,0.9840006828308104,0.9879934787750244,0.0,accept,unanimous_agreement
1875707276,5839,see above about the inconsistency of a comment with its function. i think the code is correct but the comment is not. distributor really must begin with trusted distributor. correct?,0,0,0,0.9854276776313782,0.9821673631668092,0.9910366535186768,0.0,accept,unanimous_agreement
1875711292,5839,"ok i see that's outdated. i approve, up to commit 4f7c6e0b455b28b840ee1048cab37482d55b79f0",0,0,0,0.96540504693985,0.924279808998108,0.9708133935928344,0.0,accept,unanimous_agreement
1877049798,5839,"pushed a commit that creates a test utility, to allow qa edit the acid and distributedby tags of wav files, necessary for testing.",0,0,0,0.9877412915229796,0.9935495257377625,0.9946826100349426,0.0,accept,unanimous_agreement
1877119344,5839,`typedef struct sndfile_tag sndfile ;`,0,0,0,0.9862501621246338,0.9908879995346068,0.9903912544250488,0.0,accept,unanimous_agreement
1878604317,5839,"banners should be in recently added files, and the recent commits don't all build, so should be squashed in the final result. otherwise, i must examine the new test utility.",0,0,0,0.985844612121582,0.9884958267211914,0.9934725761413574,0.0,accept,unanimous_agreement
1878635170,5839,i caught up reviewing recent commits and made some suggestions but nothing is blocking,0,0,0,0.9441022276878356,0.8230796456336975,0.9819743037223816,0.0,accept,unanimous_agreement
1883875055,5839,-licameli another round of review please? the commits i pushed today are not trivial.,0,0,0,0.9133918285369872,0.945502758026123,0.9393792748451232,0.0,accept,unanimous_agreement
1887584813,5839,"thanks for helping me out! do you have an idea why the ""adapt tag-writing utility to support new use cases."" commit broke it? it doesn't add new library dependencies ...",1,1,1,0.9648728966712952,0.9767125248908995,0.9912931323051452,1.0,accept,unanimous_agreement
1340939455,4033,"tested this on w10 with vvitaly's latest branch build: audacity-win-3.3.0-alpha-20221206+9c91e83-x64-msvc2022 this works fine when you copy a clip from one project to another ![a link] a) but can we **_please_** also have this dialog and option when copying clips within a project thereby helping to avoid the over-bloated projects that may users have complained about. b) it is unclear to me whether or not the user's choice for ""**selected only**"" or ""**whole**"" is sticky and retained/remembered if they have ticked the ""**don't show me this again**"" check-box. c) if the user has checked the ""**don't show me this again**"" check-box - then there appears to be no way for the user to set this dialog to be displayed again (except with a **tools > reset configuration** which may be way more drastic than the user requires). _there appears to be no preference setting or command to control the display/hiding pf this dialog_ flagging both these as ux/design issues to",0,0,0,0.669762372970581,0.9660640954971312,0.965046763420105,0.0,accept,unanimous_agreement
1340947474,4033,"### update the message looks good - but the copy fails to work if i copy a short selection to another project with this build choosing ""selected only"" a) the length of the selection is ok for the copy b) no audio is copied - just a selection ![a link] the copy works fine if i choose the ""**whole**"" option",1,0,1,0.8850656747817993,0.8798980116844177,0.8635457754135132,1.0,accept,majority_agreement
1341042674,4033,"if you copy within a project, a ""shallow copy"" is created. the copy is still referencing the same data as the original, just displaying it a second time. making a ""deep copy"" would actually duplicate the data and bloat the project.",0,0,0,0.95070219039917,0.9151264429092408,0.9680842757225036,0.0,accept,unanimous_agreement
1348672621,4033,"there are some issues for users of screen readers: 1. concerning the text for the radio buttons using both in preferences and the dialog. for each of the radio buttons, there needs to be a full stop at the end of the first line, otherwise screen readers read it without a pause between the end of the first line and the start of the second. eg it should be: selected audio only. only the selected portion of the source clip will be pasted. 2. in preferences, the text ""paste audio from other audacity project as"" is not automatically read by screen readers. my suggestion is to have this text as the text used by startstatic (ie the group box), replacing pasted audio. it will then be read by screen readers. 3. in the dialog box, the two radio buttons and text box need access keys, eg, m, s and r. 4. in preferences, the three new radio buttons need access keys, eg, a, c, and k.",0,0,0,0.8620996475219727,0.96872740983963,0.9643250703811646,0.0,accept,unanimous_agreement
1424486379,4033,"testing on w10- with vitaly's latest branch build for this: a) the copy properly honor's the user's request to either copy the whole smart clip ot just the selection b) the displayed data size does _**not**_ change when toggling between the two copy forms - i would expect the smart clip data size to be much larger than the simple selection size. c) the ""**don't ask each time**"" and the ""**ask each time**"" settings work as intended when used fro either the copy dialog or tracks behaviors preferences d) if ask every time is ""on"" then the copy dialog properly remembers the users last-used choice for the copy. e) i note that the default is to set to copy the whole smart clip - is that intentional? f) at default settings the dialog for tracks behaviors preferences is now not quite long enough for the new text: ![a link]",0,0,0,0.8917023539543152,0.9905872941017152,0.9568244218826294,0.0,accept,unanimous_agreement
1425729530,4033,1 commit added that removes 'x' button from progress dialog when hide close and cancel button flags are used. accessibility improvements.,0,0,0,0.9699817895889282,0.9938011765480042,0.7338101267814636,0.0,accept,unanimous_agreement
1426109468,4033,"testing on 's latest branch build: audacity-win-3.3.0-alpha-20230210+429a3c0-x64 i confirm that the copy dialog no longer has the ""x"" to cancel the process but consider this use case 1. generate a five hour chirp to simulate a long recording project 2. select a three minute ""song"" 3. ctrl+n to open a new project 4. ctrl+v to paste the entire smart clip in (the default setting in the dialog) 5. observe: this takes 2min 24secs on my machine with _**no**_ longer any ability to interrupt this if you make a mistake and intended only to copy in just the selection (which takes less than a second) 0t's like watching paint dry as you wait ! removing the ""x"" cancel as a ""fix"" seems a very kludgy approach and poor ux.",0,0,0,0.9400814175605774,0.9826520681381226,0.989772617816925,0.0,accept,unanimous_agreement
1429816003,4033,"and it's been so before dialog was added. the major problem is that i can't suggest a solution that doesn't require deep changes in the code and those changes should be discussed with and -licameli first, i guess",0,0,0,0.9480605125427246,0.9669798016548156,0.78461754322052,0.0,accept,unanimous_agreement
1429901778,4033,"for me the lack of a **cancel** button or **x** is a relatively minor residual. i will just be **_very_** happy that users who want to copy a small selection from a large clip in one project to a different project will now be able to copy just the selected audio data and _**not**_ the whole shebang of the ""smart clip"". so i'm _**really**_ hoping that this fix gets pulled into master for 3.3.0 _and then later -licameli anf can worry about how to provide cancel functionality._",1,1,1,0.8109811544418335,0.7000054717063904,0.9262791275978088,1.0,accept,unanimous_agreement
1434593299,4033,"see sqlitesampleblockfactory::onbeginpurge not directly applicable here, but `sampleblock` has already exposed ways to hook some of its operations. perhaps we could temporarily inject a similar callback for creation of blocks, which could poll the cancel button of a progress dialog, then throw an exception.",0,0,0,0.9876428842544556,0.9921169877052308,0.9928281903266908,0.0,accept,unanimous_agreement
1434687955,4033,"can you rebase and resolve conflicts first, before i review again?",0,0,0,0.9871279001235962,0.99033385515213,0.9913340210914612,0.0,accept,unanimous_agreement
1436960115,4033,"testing with 's latest branch build: audacity-win-3.3.0-alpha-20230220+b954cc7-x64 i note that we still have the single word ""**anytime**"" in the clip copy dialog and in tracks behaviors prefs - and not ""**any time**"" or ""**at any time**"" as we (-licameli ) discussed at the end of last week. also note that the tracks behaviors prefs dialog is till not long enough vertically: ![a link]",-1,0,0,0.7471123933792114,0.9310316443443298,0.7599639892578125,0.0,accept,majority_agreement
1437548844,4033,to all who worked on this issue - thank you! :smiley:,1,1,1,0.9879607558250428,0.9960532188415528,0.996945321559906,1.0,accept,unanimous_agreement
1438748520,4033,i have updated the tracks behaviors preferences page with the new behavior [a link] ![a link],0,0,0,0.9692915678024292,0.9722042679786682,0.5736661553382874,0.0,accept,unanimous_agreement
1402461047,4171,"i have finished a round of review. the windows builds are still failing, so you must fix that. the question above about `settrack` and `resettrack` are the only unresolved doubt i have. otherwise all else is just suggestion and so this is *almost* approved.",0,0,0,0.9312136173248292,0.9409555196762084,0.6494013071060181,0.0,accept,unanimous_agreement
1402463581,4171,the windows build failure is because of a duplicate symbol: [code block] ... which i think you can fix just with one more `extern template` declaration at the second commit.,0,0,0,0.8482416868209839,0.9884248971939088,0.991767644882202,0.0,accept,unanimous_agreement
1429753912,4171,"branch was rebased and few new commits were added, starting from [a link]",0,0,0,0.9856961965560912,0.9912981986999512,0.994875967502594,0.0,accept,unanimous_agreement
1453698849,4171,"testing on w11 with vitaly's latest branch build: audacity-win-3.3.0-alpha-20230303+0edee49-x64 i note that the default setttings for the **effect menu** and the **realtime effects** are different. is this intentional, by design, or are they supposed to be the same by default? the functionality of setting various options seems to work, though i have very few additional plugins, just vst and vst3 versions of izotope vinyl. i do like that you can now acess the **plugin manager** from this prefs pane. and i also like the nomenclature change from **default** to **category** in the display options list. _i have added a p1 to the manual for when this gets pulled into master - but i won't be able to do this over the next 8 days or so as i'm off-grid skiing away from t'interweb mostly._ ![a link]",1,0,1,0.7535668015480042,0.578861653804779,0.6882040500640869,1.0,accept,majority_agreement
1453978651,4171,"yes, they are different by design",0,0,0,0.9759036302566528,0.9503635168075562,0.9859429597854614,0.0,accept,unanimous_agreement
1820733705,5653,i think you wrote enough to convince me to redraft this.,0,0,0,0.9639694690704346,0.9461018443107604,0.8520358204841614,0.0,accept,unanimous_agreement
1826827742,5653,rebased to recent `audacity/wave-clip-refactoring` and resolved an easy conflict,0,0,0,0.983751893043518,0.9901650547981262,0.989112675189972,0.0,accept,unanimous_agreement
1828272904,5653,"rebased to updated base branch. no changes, no conflicts.",0,0,0,0.9706271290779114,0.9836663007736206,0.9901254177093506,0.0,accept,unanimous_agreement
1829887542,5653,"if a user has a **non-default** color for a stereo track, and then: 1. swaps stereo channels - the audio track reverts back to default color (blue) 2. splits stereo track - the last audio track reverts back to default color (blue) 3. splts track to mono - the last audio track reverts back to default color (blue) this behaviour has been changed from the last release version. if a user has non-default colors for 2 mono tracks, the behaviours for joining and mixing and rendering are not changed from the last release version.",0,0,0,0.9852890372276306,0.993187427520752,0.9929163455963136,0.0,accept,unanimous_agreement
1829945652,5653,"generating indeed does use the wave track color, but recording into said track still preserves the default track color (blue). pictured: recording preserve default blue color, generated audio preserves custom color defined by the user. ![a link]",0,0,0,0.8746702075004578,0.9778279662132264,0.9409018754959106,0.0,accept,unanimous_agreement
1829994677,5653,"another issue: if a user opens a project with differently coloured clips within one track, one of the channels will be reverted back to default color. take a look at the last track in the project. how it was saved in your branch build: ![a link] how it was opened in current release version: ![a link]",-1,0,0,0.9157527089118958,0.985834777355194,0.9756740927696228,0.0,accept,majority_agreement
1834035774,5653,"considering this problem, i now realize that this issue must depend first on fixing #5530",0,0,0,0.9705853462219238,0.959618091583252,0.982864499092102,0.0,accept,unanimous_agreement
1935857683,5653,"as you understood, ""cache"" is now a misnomer and the next commit renames them as ""attachments"" to waveclip. the are attached data on the clip getting certain notifications of events in the clip's lifetime. some attachment on waveclip removes the irrelevant mention of color from lib-wave-track which shouldn't be there. i did reuse existing waveclipwaveformcache to define the override of writexmlattrubutes. if you don't like it, it's easily done to make another class just to hold the color with its own registered factory. i didn't see that as necessary. i don't like it that clips are now mentioning stretches and pitch shifts (also serialized data) and would put them in waveclip attachments too.",0,0,0,0.9606111645698548,0.9535502195358276,0.9860047698020936,0.0,accept,unanimous_agreement
1936693456,5653,"force pushed with changes that separate the attachments for colors, from the other attachments that really perform only caching.",0,0,0,0.9813435673713684,0.986610472202301,0.9822729229927064,0.0,accept,unanimous_agreement
1940777854,5653,looks like you forgot to push.,0,0,0,0.8488923907279968,0.9436281323432922,0.6990230679512024,0.0,accept,unanimous_agreement
1946601526,5653,rebased without change to updated wave-clip-refactoring branch,0,0,0,0.9886123538017272,0.9929085969924928,0.9938841462135316,0.0,accept,unanimous_agreement
1948277239,5653,"doing this hard work once will make it easier the next time for the application to decorate waveclip non-intrusively with other information not essential the clip's purpose as a container of samples. already since i prepared this, waveclip got polluted with pitch shifting stuff that should instead use this mechanism.",0,0,0,0.9224287867546082,0.8448123931884766,0.9502192735671996,0.0,accept,unanimous_agreement
1948788253,5653,rebased without changes,0,0,0,0.981028378009796,0.9753291606903076,0.9913522005081176,0.0,accept,unanimous_agreement
1950066416,5653,one new commit for review,0,0,0,0.981804132461548,0.9877117276191713,0.991479516029358,0.0,accept,unanimous_agreement
1950071573,5653,rebased onto updated dependency branch,0,0,0,0.9880725145339966,0.991481065750122,0.9945924878120422,0.0,accept,unanimous_agreement
1952943179,5653,"rather than simply rewriting setwavecolorindex as interval-major, better to remove completely from lib-wave-track, any mention of extraneous display related things. some surprisingly roundabout solutions are needed with attached objects on wavetrack and waveclip, but they may prove useful in future to attach other extra information to tracks and clips non-intrusively.",0,0,0,0.9754822850227356,0.9871774911880492,0.9884890913963318,0.0,accept,unanimous_agreement
2653068252,8211,". in [a link] it states that ""it’s important to note that uuids, while random, are considered ‘personal information’ under gdpr."" however, in this pr, both on the opt in/out dialog, and in application preferences it states that audacity does not store any personal information. i'm confused.",0,-1,-1,0.5387488007545471,0.7948362231254578,0.9345061182975768,-1.0,accept,majority_agreement
2653091115,8211,anonimous is not the correct spelling of anonymous.,0,0,0,0.7380861639976501,0.9571264982223512,0.9040260910987854,0.0,accept,unanimous_agreement
2653102668,8211,"in application preferences, the send anonimous (anonymous) usage info check box is inside an ""update notifications"" group box, which having nothing to do with updates. also, this check box does not have an access key.",0,0,0,0.9854872226715088,0.98707914352417,0.9943300485610962,0.0,accept,unanimous_agreement
2653647525,8211,that's a good point. we should group it differently or rename the group box.,1,1,1,0.8714996576309204,0.692135751247406,0.9254359602928162,1.0,accept,unanimous_agreement
2654254185,8211,"thanks for the feedback! i have updated the message to be more correct: `audacity does not collect any personally identifiable information about you.` indeed! group name was renamed to ""network communications"" i fixed this too.",1,1,1,0.9826691150665284,0.9868767261505128,0.991860568523407,1.0,accept,unanimous_agreement
2655908475,8211,"this is comment is about wording, rather than code, and so is probably principally directed at this is part of the dialog about updates and sending anonymous data: ![a link] in plain language, the question being asked of the user is whether they are happy to send anonymous usage data. that audacity is using a uuid is a technical detail that explains for those who are interested how the data is kept anonymous. but audacity could generate an uuid and send no data. a button with the name ""disable sending anonymous usage data"" rather than ""disable uuid"" would be much more easily understood by most users.",-1,0,0,0.8744919896125793,0.9691604375839232,0.8632226586341858,0.0,accept,majority_agreement
2656034038,8211,it unfortunately also would be incorrect as update checking would remain enabled.,0,-1,0,0.7608125805854797,0.7121922373771667,0.6165935397148132,0.0,accept,majority_agreement
2656069318,8211,you mean because update checking also provides anonymous usage data?,0,0,0,0.9816418886184692,0.9929705262184144,0.9918290972709656,0.0,accept,unanimous_agreement
2656190613,8211,tested,0,0,0,0.9697903394699096,0.957400381565094,0.7421080470085144,0.0,accept,unanimous_agreement
2656806560,8211,"we could change it to 'don't send anonymous uuid', however, i kind of feel it won't make sense to anyone until they've read the description at the top, so we went for this more simplified version. although, in both cases, the option won't make sense to just about anyone if they don't read the text. also, just in case you were wondering - we decided to keep these notifications for update checking and uuid together because we think it'd get super annoying to have multiple back-to-back dialogs. most likely, the user would just spam the 'ok' button if we did that and be even less inclined to read each dialog. i guess i'm leaning towards leaving the button as is. there's also the issue of space / the buttons being really massive too. thoughts?",0,0,0,0.7093498706817627,0.6780328750610352,0.6713507771492004,0.0,accept,unanimous_agreement
2658720469,8211,". having the two options in one dialog makes sense. often opting in/out of options such as these is done using check boxes, rather than buttons. this removes the issue of problems of size of buttons whilst trying to make their purpose clearly understandable. my understanding is that the new option you are introducing is whether the user is happy with sending the information of how often this particular copy of audacity is being used, where this information is being sent anonymously. what i definitely don't understand is the section in the privacy document relating to audio.com: if a user is signed into audio.com, then they already know how often that user is using the service don't they. so i don't know what the purpose is. linking an uuid with personal information so that the uuid is no longer anonymous doesn't sound like a good idea to me. currently, if a user upgrades to 3.7.2 from a previous version, then this dialog doesn't open. i'm not sure whether this is by design or not. but if it did, then i think the user would be puzzled about why they are being asked about update checking again.",0,0,0,0.7128589153289795,0.969157874584198,0.8462648391723633,0.0,accept,unanimous_agreement
2659236947,8211,"first, given how we got buzzed a few years ago, we take a lot of time to be squeaky clean when it comes to gdpr and such, so if you spot any more unclear wording in the pp, please keep it coming. i'll send this to our lawyer to suggest a rewording for clarity. to your question, if you're on audio.com, you're obviously already signed in with your email and password. the uuid doesn't provide any additional personally identifying info because it's a randomly generated number. all it does is give us a better sense of overall retention and helps us understand the overall % of audacity sessions that include usage of audio.com. this simple detail tells us whether the combined service is healthy or not on a macro level. and just to be clear (for anyone reading who perhaps hasn't read the whole thread) - this is only if you choose to register on audio.com. --- about buttons vs checkbox: i have a lot of very boring things to say here about the inherent imbalance they cause one way or the other. we prefer a simple 'agree' 'don't agree' binary choice.",0,-1,0,0.7344908714294434,0.5247917771339417,0.5673205256462097,0.0,accept,majority_agreement
2659304834,8211,it would be helpful if you could explain exactly how you are going to calculate the overall % of audacity sessions that include usage of audio.com.,0,0,0,0.9380984902381896,0.9644699692726136,0.9878393411636353,0.0,accept,unanimous_agreement
2659877585,8211,let me rephrase - the overall % of those who opt in to the uuid. we can't know about those that don't.,0,0,0,0.9331979751586914,0.904918611049652,0.9813131093978882,0.0,accept,unanimous_agreement
2660934828,8211,"so is this right: you are wanting to calculate, for those who opt in to the uuid, the overall % of audacity sessions that include the usage of audio.com? as i've said above, an explanation of how you are going to calculate this would be helpful. if, for example, this involved audio.com being sent the uuid at the start of each session, then for those with an audio.com account that usage information would not be anonymous.",0,0,0,0.9725930094718932,0.9800568222999572,0.9893771409988404,0.0,accept,unanimous_agreement
2660966190,8211,"**one quick point on terminology:** regarding the message about uuids: under gdpr, a uuid alone is not classified as 'anonymous' data, even if collected without an ip address (and to clarify, we do not store an ip address with it). instead, it is considered pseudonymous data. for that reason, we avoid using the term ""anonymous"" when discussing the uuid. what we do state—accurately and in alignment with gdpr—is that we do not collect any personally identifying information (pii). **regarding the message itself:** the message is accurate for standard audacity usage. introducing details about what happens if a user later chooses to register on audio.com would overcomplicate the message to the point of making it very lengthy and unclear. instead, it makes more sense to provide additional details only when a user is introduced to an audio.com feature, by including a link to the audio.com privacy policy in all relevant places—which we already do. incidentally, we're expecting the revised audio.com privacy policy to be published next week. we're expecting to release at the end of this month.",0,0,0,0.8603426814079285,0.989621877670288,0.9166386723518372,0.0,accept,unanimous_agreement
2660988032,8211,"ah, hold on, i see what you're saying now. the text in this build is including the word 'anonymous' still. that's a mistake. - we need to revise that. i think the figma mockup had outdated text in it. i can't seem to get this pr working but i see its merged, so let me grab master and see what the text actually says now and we'll replace the 'anonymous' parts with a correct description.",0,-1,0,0.7479836940765381,0.7124671936035156,0.8292443752288818,0.0,accept,majority_agreement
2663367636,8211,"in section 6 of the pp, it states that: we delete: uuid data immediately if you choose to disable it at any point i understand by that: if i disable the option of sending usage information in preferences, then all of my prior usage data held by you will be deleted immediately. is that actually going to be true?",0,0,0,0.9794898629188538,0.9893269538879396,0.9899643063545228,0.0,accept,unanimous_agreement
2663427153,8211,hmmm. it seems unlikely to me that it would delete all historical data immediately if the feature was simply disabled in the ui. i'd just expect the uuid to no longer be sent from that point onwards. i've reached out to the folk who wrote the policy to confirm this.,0,0,0,0.9714658856391908,0.8553043603897095,0.9581974148750304,0.0,accept,unanimous_agreement
1914325959,5899,"you have 12 threads and just a 5x speedup. the good question is why, but i probably need to examine the rest of the pr.",0,0,0,0.9705089926719666,0.5855628848075867,0.9863539338111876,0.0,accept,unanimous_agreement
1914367720,5899,two old files were simply moved into lib-concurrency. the rest of the work is very recent. but it abstracts out for reuse the pattern that was applied in this experiment a year ago. [a link],0,0,0,0.9786664247512816,0.9804638028144836,0.9942723512649536,0.0,accept,unanimous_agreement
1914408727,5899,"speedup won't be ideal. there should be some serial component. or less than fully parallel, as in is the final merging step in which not all threads are doing work and there is inter-thread communication. you pointed out some cache ping-pong from false sharing. there is thread creation and destruction overhead because i didn't bother yet to invent or reuse a thread pool. there might be contention for a shared resource like the main memory bus or i/o. the estimated speedup was from 's regression test for tempo detection. in fact that test pulls entire files into big memory buffers first, then used to go sequentially through the memory, but now that can be fetched in a random-access way. the real-world tempo detection first creates a waveclip object, and then this parallelized version through the `miraudioreader` subclass will fetch sample blocks out of it, requiring database access.",0,0,0,0.9447941184043884,0.9256334900856018,0.9257542490959167,0.0,accept,unanimous_agreement
880305007,1295,"i force-pushed the branch in your origin! sorry if that was rude. but i permuted things in the file back to their original order, so there is a much smaller diff that is easier to review and understand. one difference i notice is the change of ""information"" to ""info"". but as with ""app"", i question whether we should use short colloquialisms. yet, not my call.",-1,-1,-1,0.987466275691986,0.9928115010261536,0.9836268424987792,-1.0,accept,unanimous_agreement
880305297,1295,"i'm now satisfied with aboutdialog.cpp, and you addressed the other points i raised. approved. and, i would like to merge this back to master soon.",0,1,1,0.8341843485832214,0.5890563130378723,0.9388529658317566,1.0,accept,majority_agreement
1857833850,5789,"code modification completed, please review again.",0,0,0,0.9817671179771424,0.9876533150672911,0.9939408302307128,0.0,accept,unanimous_agreement
1857974671,5789,"code reduce to 45 lines, please review.",0,0,0,0.9862939715385436,0.9828752279281616,0.9942159056663512,0.0,accept,unanimous_agreement
1859200170,5789,"testing on w10 with 's latest branch: audacity-win-3.5.0-alpha-20231215+5c2f507-x64 1) i note that this is **_not_** ""_does what it says on the tin_"" as expressed in the title of this thread. rather than pasting start and end selection time to the clipboard it actually pastes the two values in the selection toolbar - and these vary according to the display format the user has chosen a) start and end (default) b) start and length c) length and end d) length and center 2) i have managed somehow to extract enough samples to be able to post this test - but i am really none the wiser as to whet the ui is for pasting these values to the clipboard - not really ""discoverable"" at all afaict",0,0,0,0.8819659948348999,0.9878724813461304,0.9897232055664062,0.0,accept,unanimous_agreement
1859203761,5789,"that's not all, if you press the right mouse button on the time control, a menu will appear allowing you to choose more output formats. i counted 19 output formats. but don’t worry too much about side effects, because this small function only reads the string from the time control and writes it to the clipboard. the only side effect is that it will overwrite the current data of the clipboard, so i added a floating window in the system prompt bar. to prompt the user that the current data in the clipboard has changed. what you see in the time selection bar of the user interface is what you get in the clipboard, what you see is what you get, there are no implicit changes.",0,0,0,0.7911502718925476,0.8976571559906006,0.6699084043502808,0.0,accept,unanimous_agreement
1859208695,5789,"or left click on the little downward-pointing black triangle - _know colloquially as the ldpbt_ ;-) yes, i observed the message. are you overwriting a) the system clipboard or, b) the audacity clipboard? _and can you explain what the ui actually is to this confused person please._",0,1,1,0.7404510974884033,0.8957626819610596,0.9202232360839844,1.0,accept,majority_agreement
1859210092,5789,another way you could capture the start and end time of a selection is to give it a range label and then export labels to a text file. _possibly not so good of you already have a lot of labels._,0,0,0,0.5461176633834839,0.9714072942733764,0.9877809286117554,0.0,accept,unanimous_agreement
1860068325,5789,"you can press win+v shortcuts on windows 10 to see them in system clipboard but not paste them. i want to simplify my steps rather than make things more complicated, so exporting a text file and opening it in an editor is contrary to my idea. if i need to save the data, i'll paste it into my notepad and then ctrl+s to save. in fact, i have already done this. in my modified version notepad3 with name notepadee, i only need to press alt+2, and the contents of the audacity time selection box will be inserted into my notepad text. i can then save the data or perform time expression calculations. ![a link]",0,0,0,0.7814340591430664,0.9308173656463624,0.6169024705886841,0.0,accept,unanimous_agreement
1860232667,5789,what i mean is what do i have to do in audacity to get the selection toolbar contents copied to the clipboard?,0,0,0,0.7589095234870911,0.9855947494506836,0.990666925907135,0.0,accept,unanimous_agreement
1860266465,5789,"there are 3 ways currently: 1. main menu -> select -> copy selection timestamp 2. right click label ""selection"" on selection toolbar 3. ctrl+p open preferences, click shortcuts, search ""times"", set a shortcut to ""copy selection timestamp"".",0,0,0,0.9856591820716858,0.9939907789230348,0.9952444434165956,0.0,accept,unanimous_agreement
1860661517,5789,"rather than ""hiding"" it there - why not add it as an extra item to the menu you get when left-clicking the cog-wheel? does that seem sensible to you? apart from any other consideration right-click is more normally used as a gesture to summon a context menu. _it's certainly where i first went looking for it ..._ ![a link]",0,0,0,0.5666677951812744,0.9633259773254396,0.653268039226532,0.0,accept,unanimous_agreement
1861059785,5789,"if you put it there, you need 4 actions to complete this operation. move, click, move, click. and it will make the audio selection area lose focus. might as well click on the main menu to do this. my method is faster and requires only 2 actions, move and right click. considering that i also need to copy it to notepad, there are 4 keys including alt+tab and ctrl+v, or pure mouse actions also 4: move to notepad insert location, click, hold right mouse button and down gresture(paste), which require a total of 6 actions (8 actions using your method). since my notepadee has added the alt+2 function to do this, it only requires 4 actions in total, alt+tab, alt+2. i feel that if the operation is made too complex, i will be less interested in adding this small feature.",0,0,0,0.8603521585464478,0.9607245922088624,0.7505073547363281,0.0,accept,unanimous_agreement
1862481335,5789,"i think the issue we're running into here is that there's a discontinuity between ""feature which makes my life easier"" and ""feature which fits into audacity"". i totally see your point that right-clicking the label makes things very fast for you. however, in the context of audacity and its millions of users, there are different constraints in place, which require compromise. one of these constraints is learnability and intuitiveness of the app. peter had the intuitive sense to look inside the selections gear to look for a copy option, so that could be argued as a sensible place to put this option. there would be other places too which would work intuitively for some people (ie ctrl+c - except that it clashes with us not having scoped shortcuts for most things, selection menu, context menu on the time display itself), and unfortunately, right-clicking or double-clicking *the label* to copy something else is just not something intuitive. and it's also not learnable as it's completely invisible and also the only place in the entire app that would do right-click copy. in fact, it would be unique among all apps i'm aware of; the only thing that comes close is some terminals using right-click to *paste*. so unfortunately, right-click copy is blocking the merge here. again, the feature itself is a good fit for audacity, and if put on a shortcut, it's be pretty fast as well.",0,0,0,0.5579544901847839,0.9467957019805908,0.8983719944953918,0.0,accept,unanimous_agreement
1862520964,5789,"xterm use right click copy select text, cmd.exe also use right click copy select text. therefore, right-click copying is also a habitual operation for many users.",0,0,0,0.9512243866920472,0.9934606552124025,0.9843007922172546,0.0,accept,unanimous_agreement
1862540392,5789,"audacity is not a terminal program though, and most of its users have never opened a terminal.",0,0,0,0.9483832120895386,0.9522624015808104,0.9733730554580688,0.0,accept,unanimous_agreement
1862551360,5789,"i am not sure about this, but i think the right-click is no harm with the uses who do not use right-click copy, but it can bring convenience to users who are used to this kind of operation. it is harmless to one party and beneficial to the other party, so i prefer to retain this feature rather than remove it.",0,0,0,0.7937726378440857,0.8684423565864563,0.8553615212440491,0.0,accept,unanimous_agreement
1862890382,5789,"yes, it's harmless there - but as leo says it ain't ""discoverable there, especially limited to the ""selection"" text in the toolbar. perhaps if you increased the target for the right click then users who may think to try for a context menu will stumble across it ![a link] that's something i certainly tried and failed - it was only when i happened to be over the ""selection"" text when i right-clicked that i got to copy dialog - but i failed to infer that that was the small target area. ================================================= you can't extend the right-click target further rightwards in the tool as as right-clicking in the two number zones brings up a context menu for display type ![a link]",-1,-1,0,0.8085088133811951,0.931557297706604,0.9593862891197203,-1.0,accept,majority_agreement
1862995379,5789,"regarding the problem that it is difficult for users to find this right-click function, i think a mouse hover prompt can be added. when the mouse hovers over the ""selection"" label for a period of time, a floating tooltip will be given to prompt the user to right click to copy the timestamp. ![a link]",0,0,0,0.9250008463859558,0.9552984237670898,0.7639588117599487,0.0,accept,unanimous_agreement
1996991730,5789,"hi, where is it possible to get a version of audacity that has this feature? as a audacity user i completely agree with all your suggestions btw.",0,0,1,0.9758127927780152,0.6477298736572266,0.9024984836578368,0.0,accept,majority_agreement
1998866286,5789,"you can download official audacity 3.4.2 windows x64 [a link], and overwrite audacity.exe with my [a link], but this patch only have right/double click label ""selection"" on selection toolbar copy time string to clipboard feature, no menuitem and shortcut. i will make new patch if 3.5 release without this feature.",0,0,0,0.9783298373222352,0.9899579882621764,0.9943671822547911,0.0,accept,unanimous_agreement
2413257370,5789,hello! we just [a link] which makes this pr incompatible and/or obsolete as we're switching ui framework and reorganizing large parts of the codebase.,0,1,0,0.9542653560638428,0.9651911854743958,0.6365038752555847,0.0,accept,majority_agreement
852393374,948,i'm done. fix that one doc comment and i'm happy. squash it and merge it.,1,1,1,0.93328195810318,0.9525920152664183,0.4851939380168915,1.0,accept,unanimous_agreement
891482662,1323,squash these commits into one. then address my recent suggestions for checking that you re-enable update checking on all possible failure paths. that is all the change i will request.,0,0,0,0.9833729863166808,0.9421687722206116,0.9949457049369812,0.0,accept,unanimous_agreement
992701692,2261,"please rebase it once more, then create a merge commit.",0,0,0,0.9853283762931824,0.9882877469062804,0.9939967393875122,0.0,accept,unanimous_agreement
992783284,2261,"rebased, but i need an approve for this pr to merge",0,0,0,0.9821731448173524,0.9743176698684692,0.994882106781006,0.0,accept,unanimous_agreement
992921881,2261,"i'm sorry, i thought i had done that already.",-1,-1,-1,0.986703634262085,0.9897422790527344,0.9913710355758668,-1.0,accept,unanimous_agreement
992923714,2261,"that's my fault! i will probably remove the ""push invalidates review"" rule from branch protection rules",-1,-1,-1,0.9888219833374025,0.9860029220581056,0.9934688806533812,-1.0,accept,unanimous_agreement
992927890,2261,"was it that, or was it a dismissal of my stale review by vitaly, above?",0,0,0,0.8053761720657349,0.9875965118408204,0.9462488889694214,0.0,accept,unanimous_agreement
992928952,2261,vitaly pushed and that invalidated the review,0,0,0,0.9834014177322388,0.9052484631538392,0.9864588379859924,0.0,accept,unanimous_agreement
1141974472,3009,"there is one more checkbox in the list, not corresponding to a commit.",0,0,0,0.9852645993232728,0.9896211624145508,0.9939110279083252,0.0,accept,unanimous_agreement
1141975658,3009,the pr is failing to build on all operating systems. are you sure you disabled precompiled headers?,0,0,0,0.5494362711906433,0.8224575519561768,0.9838162064552308,0.0,accept,unanimous_agreement
1147159135,3009,"closing this, as a new pr at [a link] was opened to address the comments here.",0,0,0,0.9853925108909608,0.9919052124023438,0.9951303005218506,0.0,accept,unanimous_agreement
2277503921,7017,"i don't understand: `basiccommandsinterface` is the equivalent to my proposed `iaudacitycommand`, right ? then you propose this global `audacitywxcommandsinterface` ; but there are many implementations of `audacitycommand` and these aren't instantiated as singletons.",0,0,0,0.9373710751533508,0.980614960193634,0.9069825410842896,0.0,accept,unanimous_agreement
2277641725,7017,"no. with that approach no changes to `audacitycommand` is required. there will be only few changes in `effectsmanager` interface that remove dependency on ui framework, and command related logic should be moved into `audacitywxcommandsinterface`. example: [code block]",0,0,0,0.987649381160736,0.9950820207595824,0.9914963245391846,0.0,accept,unanimous_agreement
2284301436,7017,"i pushed a better fix for that problem. `doeffect` is in fact only concerned with the application of plugins of type `plugintypeeffect`. review of the places where it is used confirms this. hence, plugins of type `plugintypeaudacitycommand` should have no mention in `doeffect` whatsoever. you were the first to observe that `effectmanager` was concerned with plugins of both type `effect` and `audacitycommand`. in the commits i just pushed, i extract the methods that look for both effects and commands in another class, `effectandcommandmanager`, which can go in `src`. now there's no mention of commands in `lib-audacity-application-logic` anymore.",0,0,0,0.9198672771453856,0.9822933077812196,0.9399324655532836,0.0,accept,unanimous_agreement
1346050695,4053,"your attention, please, for the last commit of this sequence. i don't ask you to review all of this.",0,0,0,0.9283127188682556,0.8393126130104065,0.9069604873657228,0.0,accept,unanimous_agreement
1378702444,4053,wait! you are reviewing the part 2 pr before part 1!,0,1,0,0.9553627967834472,0.7964489459991455,0.927156388759613,0.0,accept,majority_agreement
1378703206,4053,i order the prs in the column of the project board to show which i want reviewed sooner.,0,0,0,0.9797180891036988,0.9866689443588256,0.9941315054893494,0.0,accept,unanimous_agreement
1378710456,4053,i am reviewing both because part 1 makes very little sense to me by itself. i wanted to see if further work will clarify my previous confusions - it did not.,-1,0,0,0.6954138875007629,0.9027202129364014,0.8397372364997864,0.0,accept,majority_agreement
1378713296,4053,and as i have mentioned earlier i find chains of prs to be much harder to review. chaining usually simply hides the final intention and causes confusion.,0,0,0,0.6813244223594666,0.8291372060775757,0.9747803807258606,0.0,accept,unanimous_agreement
1042867735,2561,"i'm done reviewing. please reconsider what happens to the audible track name for the screen reader. otherwise nothing is wrong with this, but i don't know from reading the issue, who specified or agreed to this change of behavior. please tell.",0,0,-1,0.919731616973877,0.8073779344558716,0.5180579423904419,0.0,accept,majority_agreement
1046800532,2561,"i approve the new changes that i see, with one suggestion for eliminating some repetition. but i'm not sure what is decided about the right thing to do for the screen reader, or if that is meant to be treated in another issue. i don't see a change in that part since the last discussion. was this supposed to be review ready?",0,0,0,0.9273738265037536,0.8720200657844543,0.7566624283790588,0.0,accept,unanimous_agreement
1047285299,2561,"eleminated code repetitions, and improved text for screen readers",0,0,0,0.9579344391822816,0.944643497467041,0.9811237454414368,0.0,accept,unanimous_agreement
1047670383,2561,"thanks for removing the initial ""track"" from the accessibility name - that's much better. however, the accessibility name for label tracks needs improving, as it contains too much repetition, which can be very annoying. using 3.1.3 or earlier, the acc name of a label track with a default name would be something like ""track 4 label track"" using your branch the acc name of a newly created label track is something like ""4 labels1 label track"". in this case ""label track"" does not need appending, as the name of the track makes it clear that it contains labels. using your branch, if a project is opened which was created with 3.1.3 or earlier, and there are existing label tracks, then the acc name of one of these label tracks is something like ""4 label track label track"". again, ""label track"" does not need appending. so the appending of ""label track"" should be conditional. something like ""label track"" is appended except in the cases where the track name contains the string ""label"" or the string ""labels"" (not sure if the second case has to be included, i'm not sure how some non-english languages handle plurals).",1,1,1,0.7571914792060852,0.6913254857063293,0.9716002345085144,1.0,accept,unanimous_agreement
1047724714,2561,"we can conditionally append ""label track"" to the name if it does not contain default name as its part. ""labels 1"" => ""labels 1"" ""my label"" => ""my label label track"" ""labels voice"" => ""labels voice"" is it ok? considering plural forms might overcomplicate things right now i believe.",0,0,0,0.9782655835151672,0.9925771355628968,0.992679476737976,0.0,accept,unanimous_agreement
1047815397,2561,"it's just about ok, but it would be better if label tracks created using 3.1.3 and earlier were not read as something like ""4 label track label track"". i'm not sure why you think it will overcomplicate things. the additional rule could just be if the name is ""label track"", then ""label track"" is not appended.",0,0,0,0.9695369005203248,0.9789103865623474,0.9523272514343262,0.0,accept,unanimous_agreement
1047829571,2561,"to avoid overcomplication and implement something that works for all languages -- i would say scan for a singular string only, using the translation of the old internationalized strings formerly appended to the names if the migration from older audacity versions matters. this would miss ""labels"". there could be some special english only logic for that. doing plurals in every language would be hard.",0,0,0,0.566538393497467,0.9761852622032166,0.9664929509162904,0.0,accept,unanimous_agreement
1048542648,2561,"the accessibility name of a label track is now fine - for both current and previous versions of the default track name, ""label track"" is not appended. thanks.",1,1,1,0.9194051027297974,0.9508286714553832,0.938098669052124,1.0,accept,unanimous_agreement
1159098127,3070,that's a round of review. i understand this is still incomplete. two other boxes at least still to check off.,0,0,0,0.9639864563941956,0.9398070573806764,0.9849759936332704,0.0,accept,unanimous_agreement
1168769609,3070,the commit that inserts calls to `fetchsettings` should also insert one at the end of `loaduserpreset`. i overlooked that in earlier rounds of review.,0,0,0,0.987295925617218,0.9936624765396118,0.9895273447036744,0.0,accept,unanimous_agreement
1170174990,3070,the latest version of the branch still has these omissions: - the commit that introduces call to `fetchsettings` still needs a call in `loaduserpreset`. - the `define makesettings` commit is only adding one boolen data member. (there was a more complete commit at 3af23e931425a532e790924ab8fcd8ae936aa661 in an earlier rebasing. something got lost.),0,0,0,0.9709051847457886,0.9865098595619202,0.9894551634788512,0.0,accept,unanimous_agreement
1825568327,5675,coincidentally preferences are a part of the program getting my attention now as a next frontier of refactoring to libraries. our drafts may conflict.,0,-1,0,0.6413928866386414,0.5444786548614502,0.9643661975860596,0.0,accept,majority_agreement
1825596557,5675,but note that audio can still be shifted left of zero. in fact one can shift it to be completely left of zero such that it now becomes irretrievable!,0,0,0,0.9547670483589172,0.95937180519104,0.9729219675064088,0.0,accept,unanimous_agreement
1825613644,5675,i have set p1s in the alpha manual for these potential changes,0,0,0,0.9850664138793944,0.989950716495514,0.9951879978179932,0.0,accept,unanimous_agreement
1825646100,5675,"so will ""advanced vertical zooming"" be ""always enabled"", or ""always disabled""? (i use ""advanced vertical zooming"" very frequently, especially in spectrogram view, and would consider it a serious usability regression if it were permanently disabled.)",0,0,0,0.9746413826942444,0.9835740327835084,0.936360478401184,0.0,accept,unanimous_agreement
1825667794,5675,"if i recall correctly, about 4 years ago, this feature was accidentally broken during refactoring, and there was an outcry from users that the loss of typing to create labels severely impacted their workflow. the feature is important for workflows such as transcribing.",0,0,0,0.968166172504425,0.7615508437156677,0.8994592428207397,0.0,accept,unanimous_agreement
1825676586,5675,"you could, while doing this also make it impossible to shift audio left of zero either a) just block it happening b) trim the clip from the left as a smart clip as it gets ""pushed past zero"" see this discussion thread: **why do we have negative time in audacity - do we need it? #4188**",0,0,0,0.8997644186019897,0.9485909342765808,0.9231163859367372,0.0,accept,unanimous_agreement
1825734929,5675,"testing shows that it retains the value that was set in earlier audacity usage. if you set it ""on"" in 3.4.2 and then upgrade to 's branch build then int will remain ""on"" and available in that branch build. btw the same is true for the other ""hidden"" settings - and even the removed ""solo"" button which also retains its ""none"" state in the branch if previously set that way in 3.4.2 or earlier.",0,0,0,0.9883618950843812,0.9950685501098632,0.9826799631118774,0.0,accept,unanimous_agreement
1825755535,5675,"while you're at it leo, in **interface** preferences a) i think **show timeline tooltips** is redundant these days - it doesn't seem to do any thing. the manual says of it but timeline quickplay is always on these days afaict - and i only see **click and drag to define a looping region** when i hover over the timeline - and that is regardless of the setting for this pref _ you are (or were) the timeline king - does this make sense to you?_ ------------------------------------------------------- b) **show scrub ruler:** the [a link] can be displayed or hidden using this setting. this is a very obscure bit of audacity functionality - and only one of three ways to access audacity's scrubbing. we could probably ""remove"" or ""hide"" it as part of this prefs trimming exercise _(note that it eats valuable screen real-estate)_. -licameli may disagree -------------------------------------------------------------------------------- i have added a p1 to the manual in case either of both of this is ""removed"" or ""hidden""",0,0,0,0.5530685186386108,0.9340254664421082,0.9652661681175232,0.0,accept,unanimous_agreement
1825762634,5675,"and in **warnings** preferences isn't **missing file name extension during export** redundant now? as i believe that in 3.4.2 you now always automatically add the appropriate extension if none is supplied? ----------------------------------------------------- i have added a p1 to the manual in case either of both of this is ""removed"" or ""hidden""",0,0,0,0.9730111956596376,0.9809360504150392,0.9953327775001526,0.0,accept,unanimous_agreement
1825783146,5675,"nb, a reason this is a draft and most settings are merely hidden is for this to gauge interest and have it be easily reversible in the case that it's not . i wanted to do some more surveys about these next week, thanks for the pointers to the other things, i'll add them into this later",0,0,1,0.6567879319190979,0.9816589951515198,0.9374765753746032,0.0,accept,majority_agreement
1825796684,5675,"i had guessed that to be the case (from the ""hidden"") _but note the persistence of these hidden settings from their use in earlier versions of audacity before upgrading._ thanks leo. ----------------------------------------------------------------------------------- btw i throughly approve of a) removing the ""**none**"" setting for the solo button b) removing **enable dragging selection edges** - i can see no use case for having that turned off with regard to **enable scrolling left of zero** i think it is dangerous to hide/remove that while the user can still push audio into negative time. i can see both **advanced vertical zooming** and **type to create a label** potentially being contentious. _don't forget the current furore over the removal of a command/shortcut for **export selected audio** in 3.4.2_",1,1,1,0.9740571975708008,0.9584305882453918,0.962647020816803,1.0,accept,unanimous_agreement
1825911356,5675,"very much past tense ;-) the ""show timeline tooltips"" setting in preferences is broken. (tested on linux with 3.4.2 appimage)",0,1,1,0.713155210018158,0.8930230736732483,0.9935209155082704,1.0,accept,majority_agreement
1825916838,5675,i seem to recall that it was totally changed when new looping was introduced.,0,0,0,0.963980793952942,0.9638068675994872,0.9835968613624572,0.0,accept,unanimous_agreement
1826009161,5675,"i agree with steve that if this is removed from preferences, i would rather default it on not off. there is a checkbox to turn in on also in one of the view submenus, but that is less obvious. some very useful scrolling and zooming of the vertical rulers of waveform and spectrogram views are governed by this. it used to be just the default until james decided otherwise. which i never really liked, as a user.",0,1,0,0.8291473984718323,0.7136858105659485,0.7565754055976868,0.0,accept,majority_agreement
1826018103,5675,"as for scrubbing, i’m proud of making it work in the audio engine, but i’m not attached to the ui design that never pleased everyone. actually scrubbing made code dependency tangles that i regret now...",-1,-1,-1,0.8975982069969177,0.9823665618896484,0.961722731590271,-1.0,accept,unanimous_agreement
1826051521,5675,"-licameli i see a good use case for advanced vertical scrolling in spectrogram view. i do not see a good use case for it in the waveform. in what situation do you not want 0 at the center in a waveform, or at the bottom in a half-wave?",0,0,0,0.9506446123123168,0.9592001438140868,0.8471025824546814,0.0,accept,unanimous_agreement
1826063003,5675,"if that is your opinion, which i might agree with. and you want to realize that in 3.5, it will need more work.",0,0,0,0.9464918971061708,0.9686722755432128,0.9760487675666808,0.0,accept,unanimous_agreement
1829396124,5675,"as it turns out, type-to-create-label is scoped to work only when a label track is in focus. given that's the case, i have absolutely no trouble with just having that functionality, without any setting for turning it off.",0,0,0,0.8782853484153748,0.9727961421012878,0.6710039377212524,0.0,accept,unanimous_agreement
1829420182,5675,"but for users who don't wish to make use of the type to create a label functionality, it's much more convenient for them to have an option to turn it off so that they can use all the single character and shift + single character shortcuts when a label track is the focus.",0,0,0,0.981562077999115,0.9917077422142028,0.9885717034339904,0.0,accept,unanimous_agreement
1829500421,5675,"do these users exist? i saw the mail threads regarding the introduction of direct typing in 2007 and then again a review in 2010 which introduced the preference, with you, peter, james and gale involved. between those dates, i see some talks about labels in the forum archives and some bug reports where the capture didn't work (for the letter z specifically), but i don't see any user complaints for the reverse - where they want to use a shortcut but get annoyed that a label appears instead. in the scope of this pr, i think it's useful to simply enable it by default and wait to see if anyone asks for it to be disabled. if a non-negligible amount of people appear, we can simply reinstate it for 3.5.1",0,0,0,0.7397564053535461,0.7206681370735168,0.9604712724685668,0.0,accept,unanimous_agreement
1829609318,5675,"users of screen readers? the option has been off by default since 2.3.2, over 4 years ago. the default was changed in this commit: f4aa75f4fc7b3e5c",0,0,0,0.986488163471222,0.9943812489509584,0.988929569721222,0.0,accept,unanimous_agreement
1829716442,5675,"i was unable to find complaints about this in the audacity4blind archive. maybe freelist's search function let me down here though. the discussion in audacity-quality that lead to this change also appears mostly academical. that said, type to create labels does feel awkward together with the ""use dialogs for labels"" setting and i'm tempted to tie it to that instead.",-1,-1,-1,0.9026071429252625,0.6798062324523926,0.7352718114852905,-1.0,accept,unanimous_agreement
1829758990,5675,- so how do you see that working leo?,0,0,0,0.9697299003601074,0.9801083207130432,0.988556444644928,0.0,accept,unanimous_agreement
1829768598,5675,"if you use the ""use dialogs"" setting, you have to summon the dialog via ctrl+b. if you don't have the setting active, then type to create labels is active.",0,0,0,0.9885043501853944,0.9924489259719848,0.9942051768302916,0.0,accept,unanimous_agreement
1831782048,5675,"after further consideration, i'll just not touch the type to create labels preference for the time being. a ""transscription workspace"" may have some merit down the line.",0,0,0,0.983135223388672,0.98876291513443,0.980240285396576,0.0,accept,unanimous_agreement
1832337986,5675,"is it planned to disable the shifting of clips left of zero? but maybe that would impair your ability to make small latency corrections. maybe would support that opinion? if we simply disable the scrolling of the view left of zero, are we certain that really resolves all the issues linked above that relate to negative time? i don't know how the change of scrolling behavior would fix a bug in playback. but i have not yet reviewed changes.",0,0,0,0.8956936597824097,0.8705317974090576,0.9721731543540956,0.0,accept,unanimous_agreement
1832382328,5675,"-licameli in this discussion thread: **why do we have negative time in audacity - do we need it? #4188** wrote: of those two i would tend to favor option 2 and note that that would similarly allow for the ""small latency corrections"" that paul raises as a use-case - and in a non-destructive way **_but_** without the necessity for audio in negative time _(which will now be forever invisible to the user form 3.5.0 onwards)_. leo also wrote at the time, in that discussion thread: and i remain _**strongly**_ minded to agree with him",0,0,0,0.7355483174324036,0.9649592638015748,0.8792203664779663,0.0,accept,unanimous_agreement
1832390943,5675,"personally i think that it would be better to allow ""zero"" on the timeline to be offset. not only would this allow ""small latency corrections"" to be made easily, but would also be handy for adding a ""count in"" before the start of the track. effectively you would have an ""absolute"" zero, which is the beginning of the track, and nothing is allowed before absolute zero, and there would be a ""local"" zero, which is where ""zero seconds"" / the ""start of the first bar"" are marked on the timeline. [code block] the amount of offset would be set by the user. for the benefit of novice users, the default offset could be zero, so that ""logical"" zero and ""absolute"" zero both occur at the start of the timeline. the minimum offset would be zero (""logical"" zero and ""absolute"" zero both occur at the start of the timeline). if the offset is adjusted, audio remains tied to the ""logical"" time. (this would mean that the offset can only be reduced when doing so does not put clips, notes or labels before absolute zero.)",0,0,0,0.9592235088348388,0.985557734966278,0.9655848145484924,0.0,accept,unanimous_agreement
2095469553,6306,". in limitereditor::populateorexchange, it would be better if the accessibility names of the sliders were just the names of the properties, rather than also including the units, eg, just threshold, knee width, etc. for these sliders, screen readers read a percentage value between 0 and 100. if units are included in the accessibility name, eg db, then the user may mistakenly assume that the percentage value is the value in db.",0,0,0,0.984403133392334,0.9934983253479004,0.9747676849365234,0.0,accept,unanimous_agreement
2097702272,6306,"thanks for pointing this out. on the other hand, the visual indication of the unit would be gone, and i haven't found an easy way of placing it somewhere else without affecting my current layout too much. i propose to keep an eye on this until the first version is merged and create a ticket then.",1,1,1,0.6757773160934448,0.8120661973953247,0.9504280090332032,1.0,accept,unanimous_agreement
2097709650,6306,closing in favour of #6395,0,0,0,0.9793514013290404,0.9910998940467834,0.9843167066574096,0.0,accept,unanimous_agreement
2097769443,6306,"i think the code i was referring to may have changed, so i'll have another look when the first version is merged, as you suggested.",0,0,0,0.9872213006019592,0.974367082118988,0.9873392581939696,0.0,accept,unanimous_agreement
2126508871,6306,". now that it is merged, i've created an issue for this: [a link]",0,0,0,0.9755992293357848,0.9449668526649476,0.991005539894104,0.0,accept,unanimous_agreement
2569028352,7978,"i took a look at the build, in this scenario widget should say 1 bar 1 beat 1 tick i believe",1,0,0,0.5531567931175232,0.926951825618744,0.9839328527450562,0.0,accept,majority_agreement
2569037469,7978,"[a link] yes, i think the `timecodemodel` class must allow the `beatsformattermode` to be settable, probably as a q_property. then the playback-toolbar instance should set it to time-point, and the instances in the different generators should set it to duration. then i guess -gabriel in the unit test, you could probably keep the existing case (which assumes time-point) after setting time-point, and add your new one after having set it to duration.",0,0,0,0.980344533920288,0.9737268090248108,0.9910747408866882,0.0,accept,unanimous_agreement
2569046289,7978,yes! i will rework this. thx.,1,1,1,0.81596839427948,0.9419599175453186,0.992651641368866,1.0,accept,unanimous_agreement
2569495807,7978,i addressed the comments above. ![a link] ![a link] ![a link],0,0,1,0.5719137787818909,0.9817424416542052,0.5295224189758301,0.0,accept,majority_agreement
942839786,1865,done reviewing,0,0,0,0.9794906973838806,0.9387550354003906,0.9855689406394958,0.0,accept,unanimous_agreement
947285284,1865,"maybe the generality is okay for ctrl+a and ctrl+c which do not need to push new undo items. but i have shown definite problems in case of paste. are there other problems to demonstrate with cut, too? maybe, i didn't experiment enough to decide that.",0,0,0,0.9484171271324158,0.9686824679374696,0.9353781938552856,0.0,accept,unanimous_agreement
947293997,1865,"some experiments with ctrl+x when text is selected in a label track box, will easily show that proper undo/redo handling was already an omission even in 3.0.3 and earlier. was paste already badly handled too?",0,0,0,0.9802367091178894,0.9733482003211976,0.9840930700302124,0.0,accept,unanimous_agreement
947297039,1865,"actually, dopastetext() used to handle the case of insertion of text at the edit cursor of a label, always correctly pushing the undo stack. but this pr causes a definite regression of that behavior, preempting dopastetext().",0,0,0,0.9860067367553712,0.9696141481399536,0.9916398525238036,0.0,accept,unanimous_agreement
947566015,1865,"yet another thing i overlooked, but the fix seems to be quite simple: move project history modification code to `labeltrackview::pastetext` and remove it from `onpastenewlabel`, `labeltrackview::oncontextmenu` (though history item text will change) and `dopastetext` becomes unneeded, so it can be removed. also, i've noticed that there is some gtk-specific code that does not modify undo history as well [code block] and it will be fixed too if the history modification code is moved to `labeltrackview::pastetext`, also `labeltrackview::cutselectedtext` may be fixed same way. do you think it would be better now to avoid changing existing code for labels, and add some workarounds to handle text shortcuts in wave track?",0,0,0,0.8479623794555664,0.9877532124519348,0.9534991383552552,0.0,accept,unanimous_agreement
1415849594,3996,i'm done reviewing. mostly good. but i had some questions.,0,1,1,0.7455171346664429,0.960189700126648,0.936789572238922,1.0,accept,majority_agreement
1419024084,3996,". it's great to see that this is being worked on so that keyboard users can access the factory presets of vst3 plugins: [a link] i've tested the plugin mentioned by that issue: [a link] and can confirm that the factory presets are now available. however, i've also tested with tdr kotelnikov ([a link] and tdr vos slickeq ([a link] and the presets are still not available for these. (they are using reaper.)",1,1,1,0.9576826691627502,0.9716999530792236,0.9898489713668824,1.0,accept,unanimous_agreement
1419041128,3996,"all my questions are resolve now, but, the latest run failed to build for ubuntu. but those looked like spurious failures caused by intermittent network problems, so just started a rerun of the failed jobs. if that passes, then this can be merge.",0,0,0,0.9307422041893004,0.9900492429733276,0.9878684878349304,0.0,accept,unanimous_agreement
1419396094,3996,"thanks! turns out that according to spec there is a violation of call sequence, and also it seems like plugin do not fully initialize parameter info structures, i'll try to workaround this",1,1,1,0.959403395652771,0.9802465438842772,0.9916242957115172,1.0,accept,unanimous_agreement
1419902732,3996,"you can use graillon free vst3 for vst3 program lists, we are actually getting support issues from audacity users :) [a link] (edit: oh, if couture worked then graillon will too)",1,1,1,0.8472003936767578,0.995352029800415,0.9946820139884948,1.0,accept,unanimous_agreement
1421106655,3996,"i've updated pr and plugins mentioned should also list factory programs in the ""settings & presets"" menu. though one issue remains - there could be more than one menu entry named 'defaults', and moreover they could be same, but i'm not sure what to do about it right now (the problem is that for some plugins that may be not true, i think)",0,0,0,0.8308596014976501,0.961515247821808,0.9297773838043212,0.0,accept,unanimous_agreement
1423924506,3996,". thanks, i can confirm that the problem with those two plugins is fixed. the issue with entries for defaults and default is a minor issue (i notice that it also occurs for vst2 plugins).",1,1,1,0.8625659346580505,0.5635398626327515,0.9797118306159972,1.0,accept,unanimous_agreement
1733507270,5239,quick design review won't hurt :-),1,1,1,0.9833457469940186,0.9949735403060912,0.9807834029197692,1.0,accept,unanimous_agreement
1733552743,5239,"i only skimmed this pr. i have mentioned that the pan and gain sliders show a dialog when you double-click on the slider thumb and that maybe that code could be reused, but i see this didn't happen. maybe they should be unified, replacing that old stuff with the new dialog, if it is in some way better?",0,0,0,0.9464079737663268,0.939400851726532,0.9460384249687196,0.0,accept,unanimous_agreement
1733576101,5239,"in the original design, this dialog was quite a bit more complex: 1. it had ""apply destructively"" button, which is now a menu entry instead 2. there was a check box ""adjust clip when changing project tempo"", but it is not a priority now. so, probably the dialog will be extended even for 3.4, if ux testing proves that this feature is important. i would've done it using the dialog used now, but there was some miscommunication with the design team and i have implemented the ""apply destructively"" button before i was told it should be done differently.",0,0,0,0.8410377502441406,0.9779449105262756,0.9619919061660768,0.0,accept,unanimous_agreement
1733615364,5239,"some feedback: * render clip stretching should be greyed out when the clip isn't stretched yet * when selecting partial or multiple stretched clips, the render option appears inoperable. in the case of multiple selected clips, i'd expect all to be rendered, in the case of a partial selection, i'd expect it to apply the stretching within the selection. as a fallback, having them greyed out when it can't apply works as well.",0,0,0,0.9574666023254396,0.9923656582832336,0.8200023770332336,0.0,accept,unanimous_agreement
1733645270,5239,"this is the same issue as with the ""rename clip"", i'm happy to discuss it after the su",1,1,1,0.9176512360572816,0.9931935667991638,0.5124784708023071,1.0,accept,unanimous_agreement
1733710433,5239,". thanks for the new commands on audio clips submenu. just a few minor points: 1. in the change speed dialog, the text box doesn't have an accessibility name. easily fixed. in void changeclipspeeddialog::populateorexchange(shuttlegui& s), just add the lines: [code block] before the line s.tienumerictextbox(...... (though i'm not sure whether ""%"" needs translating.) 2. in the change speed dialog, there is no visual indication of which is the default button (and the jaws screen reader doesn't know which button is the default). 3. the new entries on the audio clips submenu all need access keys. david.",1,1,1,0.967161238193512,0.8322030901908875,0.9852515459060668,1.0,accept,unanimous_agreement
1733781178,5239,really looking forward to enjoying all this on master!,1,1,1,0.9912214279174804,0.9909796714782716,0.9951373934745787,1.0,accept,unanimous_agreement
1733784527,5239,"if i have clips a and b one next to another, and slow-down a, i'd expect b (and all subsequent clips) to be shifted backwards if the ""editing a clip can move other clips"" preference is checked, right? currently i get the not-enough-room message.",0,0,0,0.9785171151161194,0.8567712306976318,0.8089576959609985,0.0,accept,unanimous_agreement
1733816425,5239,"this wasn't specified anywhere; probably you are right () if you want ""render selection"", not ""render clip"" - i will just drop that part from the pr. i'm not sure if we will include it in 3.4 (or ever). there was a bug in a predicate that controls menu visibility, it is corrected now.",0,0,0,0.9804236888885498,0.974488079547882,0.9912194609642028,0.0,accept,unanimous_agreement
1733950297,5239,two minor commits were added,0,0,0,0.9835799336433412,0.9901500940322876,0.9925825595855712,0.0,accept,unanimous_agreement
1734995942,5239,"hi! trying to change a clip's speed to 200%, nothing happens.",0,0,-1,0.7432865500450134,0.5319740176200867,0.7877643704414368,0.0,accept,majority_agreement
1734999390,5239,"i see there's a shortcut to rename clips, i'm jealous `:p` could we get one for speed changes, too? not necessarily in this pr, although that'd be convenient for testing.",-1,0,1,0.7078981399536133,0.3587083220481872,0.9919082522392272,,review,no_majority_disagreement
1735002686,5239,i think you can assign the shortcut in preferences,0,0,0,0.9879889488220216,0.9605359435081482,0.9916935563087464,0.0,accept,unanimous_agreement
1735004644,5239,i'm getting weird results: ![a link] then press enter and the clip gets 600%: ![a link],-1,-1,-1,0.9920530319213868,0.9742231369018556,0.9950941801071168,-1.0,accept,unanimous_agreement
1735019271,5239,i will take a look.,0,0,0,0.9734110236167908,0.937569499015808,0.934945821762085,0.0,accept,unanimous_agreement
1735094768,5239,"first review iteration complete. please let me know when the speed-change not taking clip offset problem has a fix. as for the possibility of moving clips right when expanding, i hope gets back to us soon, but i won't block qa if he doesn't.",0,0,0,0.9446131587028505,0.8315265774726868,0.6160345673561096,0.0,accept,unanimous_agreement
1735097733,5239,"oh well, it's an easy fix, let's prevent disturbance during my pizza break :d",1,1,1,0.9862262606620787,0.9263594150543212,0.9928911924362184,1.0,accept,unanimous_agreement
1735122256,5239,"a fix is added, rebased on the latest master unchanged otherwise",0,0,0,0.9879831075668336,0.9913962483406068,0.9954742789268494,0.0,accept,unanimous_agreement
1735335058,5239,"just an update on how 'render clip stretching' works with multiple stretched clips and selection within stretched clips. if a user has selected multiple stretched clips, and then accesses the clip menu - only one of the clips will be selected. if a user has selected a region within a clip, but not the entire clip, the user is forbidden from pressing 'render clip stretching'. hope this helps, somehow.",1,0,1,0.9378820061683656,0.9215616583824158,0.9749905467033386,1.0,accept,majority_agreement
1735336716,5239,"- please advise if this is fine, and this functionality can be considered to be behaving correctly.",0,0,0,0.939821481704712,0.8894585371017456,0.7524301409721375,0.0,accept,unanimous_agreement
1735351944,5239,advised with - he has said that the acceptance criteria is fulfilled as defined. moving [a link] to ready to merge. thanks!,1,1,1,0.9766525030136108,0.993436872959137,0.9881711006164552,1.0,accept,unanimous_agreement
1735416354,5239,"checks for this mr has been completed, you can merge it!",0,0,0,0.791340708732605,0.7555108666419983,0.8639612197875977,0.0,accept,unanimous_agreement
1191705618,3271,"i have examined every commit in the sequence and i'm almost done with review of this draft. now, general comments.",0,0,0,0.9718384146690368,0.8962216973304749,0.8570618629455566,0.0,accept,unanimous_agreement
1191745287,3271,"moving `load` without `loadcommon` into the wrapper seems wrong. why were you trying to do it? i think the answer is that you wanted to avoid moving some data members into the wrapper. but i don't think it is necessary to avoid that. the wrapper class contains an aeffect handle, and that is right. each instance needs a different handle, and there is another scratch handle for the plug-in itself. the later part of `loadcommon` assigns mvstversion, mname, mvendor, minteractive, maudioins, maudioouts, mmidiins, mmidiouts, and mautomatable. these things are all ""metadata"" about the plug-in itself, not state of instances of plug-ins. the first two are already in the wrapper class, but now you skip the assignment of them for the plug-in -- another reason this pr is in error. for the rest, there is no reason why they can't be in the wrapper too, like mname. what about the early part of loadcommon? it assigns mrealpath, mcurrenteffectid, mpluginmain in the wrapper, and mpath, mbundleref, mresource, mmodule in the effect. the latter things are (platform specific) resource handles that keep the shared library of foreign code loaded into the process for as long as necessary. again, either you miss the assignment of things that were already in the wrapper, or else, you avoid moving things into the wrapper that are not part of instance state. so, i simply don't see your purpose of the splitting of load(). keep this work: there could be this benefit of this reexamination of load(), though i don't think it is necessary for vst2 statelessness. the things assigned inside loadcommon() really need to be assigned only once. they could be moved into a structure managed by a `shared_ptr` and that pointer can be in the wrapper. the effect object does the work of loadcommon only once. when the effect makes an instance, or the instance makes a slave, then the shared pointer can simply be copied, and the discovery of things inside loadcommon would not need to be repeated.",0,0,0,0.928283989429474,0.9872740507125854,0.921316623687744,0.0,accept,unanimous_agreement
900234508,1482,"const-correctness is the wrong word -- i'm not cheating with c style casts or const_cast. unnecessarily non-const arguments is what you mean, for some predicates. fair point.",-1,-1,0,0.8633924722671509,0.8957418203353882,0.8646013736724854,-1.0,accept,majority_agreement
