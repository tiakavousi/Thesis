id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason
1688082107,737,probably needs splitting into two prs.,0,0,0,0.9724292159080504,0.9857797622680664,0.96633642911911,0.0,accept,unanimous_agreement
1690353247,737,now only fixes the linked issue. a separate pr dealing with option handling will be prepared later.,0,0,0,0.9870617985725404,0.991636335849762,0.99461430311203,0.0,accept,unanimous_agreement
1694750109,737,"the idea with the rewrite is that working directory isn't a ""real"" option, so it shouldn't cause different behaviour by itself. the behaviour of opening a new tab when invoked in a directory without a tab already open is also intentional. the rationale is that any command line invocation is done with the intention of open a tab or window, so it act as a ""weakened"" (it won't create a tab, if one in the current directory already exists) version of `-t`. if we are going to change the behaviour here, i would prefer that it's to drop the weakened `-t` for assuming a real one.",0,0,0,0.9659005999565125,0.9900717735290528,0.986362636089325,0.0,accept,unanimous_agreement
1695498851,737,not sure what this means. the `-w` and `-t` options do differ in that the former requires a following uri and the latter does not (it just adds a new default tab).,0,0,0,0.91152423620224,0.915900468826294,0.8325764536857605,0.0,accept,unanimous_agreement
1695515878,737,"again, i do not understand this. the change (and the whole pr) is about not opening *two* tabs when the user would expect only one. the change from `master` being discussed here is about when terminal is invoked without *any* options so the user is not requesting a new tab. usually it is because the user has forgotten terminal is already running so it should behave as if the user had just clicked on the dock icon again - i.e. it should just focus the existing window.",0,0,0,0.5812370777130127,0.810631275177002,0.8449596166610718,0.0,accept,unanimous_agreement
1695526752,737,"there is a case for reconsidering whether we need both `-w` and `-t` options or whether they should do the same or different things, bearing in mind we do not want to break existing scripts if we can help it. but i am not sure this pr is the place - i am just trying to make sure terminal continues to follow the information that the `-h` option gives while fixing the issue of unexpected extra tabs.",0,0,0,0.7366155982017517,0.8413780331611633,0.9700440168380736,0.0,accept,unanimous_agreement
1695542782,737,"elementary terminal is currently different from other terminals in that it has a ""follow-last-tab"" setting (unexposed) that is by default `false` so that additional tabs are by default opened at the user's home directory *not* the current directory. this complicates matters considerably. might be worth discussing whether that setting should continue to be supported or whether we should just emulate other major terminals. but that is for another pr.",0,0,0,0.6009653806686401,0.9453588724136353,0.9810985922813416,0.0,accept,unanimous_agreement
1695556255,737,"this would make commandline invocation different from invocation from the dock or app menu which both just focus an existing primary window, so i disagree. interestingly `gnome-terminal` *always* opens a new window when a primary window exists even when invoked with no options. `xterm` does the same. following that would probably simplify things but would need design team sign off.",0,0,0,0.9418169260025024,0.9598981142044068,0.975876808166504,0.0,accept,unanimous_agreement
1695939112,737,i'm going to have to ask you to look at that race issue in the testing of adding tabs i am afraid. i tried a few things but i do not fully understand the code :disappointed: even getting the `n_tabs` directly from `notebook` does not work. the `callback` is running before `mainwindow` even starts to add the tab. looks like `iterate_context` is not blocking for long enough for mainwindow to complete everything needed to add a tab. update: wait a minute i think i have been misinterpreting the logs - there are two calls to `option ()` within each test and i have been mistaking the output from one as belonging to the other. i think the problem is due to an unexpected tab being added in the test environment due to an attempt to restore tabs,-1,-1,-1,0.9869237542152404,0.9643686413764954,0.9950929880142212,-1.0,accept,unanimous_agreement
1695944298,737,not sure why we're getting the expected tab count in the `--execute` test but not the `new-tab` option test though :shrug:,-1,-1,-1,0.9144869446754456,0.9120627045631408,0.8809462189674377,-1.0,accept,unanimous_agreement
1696044360,737,"so it seems that for each call to `option ()` in the test environment, the application command_line function gets called *twice*? is this intended? it is not what happens when launching the application on the desktop. it results in unexpected numbers of tabs appearing (at least, different from real life).",0,0,0,0.9585166573524476,0.9666650295257568,0.9878267645835876,0.0,accept,unanimous_agreement
1696067130,737,"yes it does, that is the only way to test the options and actions without having interference of the command line. the first invocation override the default handler, so for the tests, the second invocation appears as if it was the first one. to be a little more clear: [code block] edit: oh, sorry, now i see, you say the second line in the overriden launching, it's needed because some of the test can only be properly tested in a secondary launching (like the new-window test), so it tries to act if the command_line was called with a already existent instance.",-1,-1,0,0.9761435985565186,0.94011789560318,0.9188023209571838,-1.0,accept,majority_agreement
1696153347,737,"i have found a fix for the tests by allowing the test to choose whether or not `command_line` is called with a `null` parameter before the test commandline. this defaults to ""yes"" but for the ""new-tab"" tests it needs to be ""no"" in order to get the ""expected"" result (i.e. the same as real life). i havent fully got to the bottom of it but there does seem to be a timing issue when adding a second tab to the existing window in the new tab test.",0,0,0,0.9118059277534484,0.9904394149780272,0.9715504050254822,0.0,accept,unanimous_agreement
1696155777,737,i'll have another look tomorrow - i've been down enough rabbit holes and followed enough red herrings today :stuck_out_tongue_closed_eyes:,-1,0,1,0.9654526710510254,0.9271750450134276,0.520112931728363,,review,no_majority_disagreement
1785754118,737,"closing as this has become too complicated/contentious. i'll try and find a simpler, if more limited, solution to the immediate issue of unwanted tabs being added every time the terminal is launched from the dock.",-1,0,0,0.6199091672897339,0.6141190528869629,0.5437322854995728,0.0,accept,majority_agreement
458205112,330,/ux needs an opinion on whether to hide or disable the menuitem. this does not seem to be covered in the hig. i think the general wisdom is to disable rather than hide in most cases?,0,0,0,0.9838025569915771,0.9632672667503356,0.9735012650489808,0.0,accept,unanimous_agreement
458243297,330,"i am not 100% sure of the context, but i'd say: if the context menu is for something you're clicking on, only showing the menu item when you're clicking on that thing makes sense. i.e. hiding makes more sense than disabling in that case. i think.",0,0,0,0.9047958850860596,0.948788285255432,0.9675202965736388,0.0,accept,unanimous_agreement
458480185,330,"i agree it should only appear in a selection context, not when secondary-clicking on the background say. so it only appear when the selection (or hovered item) is a web address (i.e it currently gets underlined)? that should be doable.",0,0,0,0.9773226976394652,0.9868467450141908,0.9817310571670532,0.0,accept,unanimous_agreement
458480482,330,: see ux team ruling on this ^ will you be able to progress this now? :-),1,1,1,0.9843677878379822,0.994025468826294,0.9930124878883362,1.0,accept,unanimous_agreement
572217065,330,i am going to try and progress this pr myself now as it has been left a while.,0,0,0,0.9140042066574096,0.9176981449127196,0.9837263226509094,0.0,accept,unanimous_agreement
572228813,330,"i have combined the two ""open in browser"" actions since they use the same command ultimately (`gtk.show_uri_on_window`) so there is no explicit control how it is shown and also because it looked odd that when clicking on a uri two different open in browser options were displayed. initially the item label changed depending on whether it was expected to use a web browser or a file browser but this was not possible in any elegant way when granite.accellabels are used since their labels are construct only. another factor is it seems excessive to have two different keyboard shortcuts and two actions leading to the same code. need design team comment on this though.",0,0,0,0.590985894203186,0.9479326605796814,0.6654138565063477,0.0,accept,unanimous_agreement
572690221,330,blocked until granite.accellabel supports variable text.,0,0,0,0.9726352095603944,0.9862573742866516,0.9904864430427552,0.0,accept,unanimous_agreement
577592821,330,variable label now supported in granite master but leaving blocked until released.,0,0,0,0.9883610606193542,0.9930271506309508,0.9940555095672609,0.0,accept,unanimous_agreement
609004009,330,new release of granite - unblocking.,0,0,0,0.9796302318572998,0.976477324962616,0.9853147268295288,0.0,accept,unanimous_agreement
609873689,330,"the latest changes allows opening the current selection in a browser without it needing an explicit scheme. so you can type e.g. `\home`, select it and press ` e` to open that directory in the file manager. the selection is not fully validated as a path as far as setting the action enabled is concerned (it must contain a `path.dir_separator_s`) but invalid paths just do nothing (apart from generate a terminal warning).",0,0,0,0.9816468358039856,0.989376187324524,0.9926151037216188,0.0,accept,unanimous_agreement
634554286,330,"thanks for the review - i haven't looked at this in a while but ""open in web browser"" should show with schemes such as ""http"" and ""https:"". most other remote schemes do open in the file manager though - i'll check it out and implement your other suggestions.",1,1,1,0.8618731498718262,0.9438449740409852,0.9505722522735596,1.0,accept,unanimous_agreement
634571625,330,there will be a delay until i can get a system set up that will actually build the latest terminal :-(,-1,-1,-1,0.9910532832145692,0.9783014059066772,0.9964137673377992,-1.0,accept,unanimous_agreement
637668950,330,"should be ok now - careless mistake. are there any other schemes, apart from http and https that should be opened in web browser rather than files?",-1,-1,-1,0.8638941049575806,0.5076524019241333,0.9648388624191284,-1.0,accept,unanimous_agreement
637698629,330,"i can confirm that ""open in web browser"" now shows correctly and works as expected, but it seems that ""show in file browser"" is now always insensitive. i guess in an ideal world we should probably be using `[a link] and `[a link] instead of trying to figure out what scheme does what manually",0,0,0,0.945856273174286,0.9887890219688416,0.9795233011245728,0.0,accept,unanimous_agreement
638031599,330,"thanks for the review. ""show in file browser"" should be sensitive if either * there is a selection and that selection is a valid path or * there is a link with a scheme file:/// under the cursor. good idea about `glib.appinf.get_default_for_uri_scheme()`. i'll see what i can do.",1,1,1,0.9688953757286072,0.9829896092414856,0.9879214763641356,1.0,accept,unanimous_agreement
638058670,330,"using `appinfo.get_default_for_uri_scheme ()` works but this has raised a number of problems (some of which were already present because this pr uses `gtk.show_uri_on_window ()` which uses the default app - not just web or file browser). * if you want the choice to be limited to ""web browser"" or ""file browser"" there seems to be no good way to determine, in all locales, whether the returned app is a web browser. * some schemes such as ""ftp"" that we probably want to open in files will by default open in the web browser. * some schemes such as ""mailto://"" that a user might want to open in a web browser if it is a webmail address will open in mail. * some returned apps e.g. that for ssh:// are neither web browser nor file browser. if you want to allow other apps and have their name in the menu: * not all apps have a translated name or generic name in all locales and the app name or id may not be meaningful if we want to stick to a simple web/file browser choice then we will have to stop using `gtk.show_uri_on_window ()` and use e.g. `appinfo.launch_uris ()`",0,0,0,0.9402406215667723,0.9871724843978882,0.9779141545295716,0.0,accept,unanimous_agreement
638462569,330,"in master, if there is no selection you can still show the pwd in the file browser which is extremely useful. it's probably not within the scope of terminal to decide the appropriate app that should be associated with a uri scheme. if we want files to handle ftp:// schemes, we should probably set that in the default-settings package. i think the way to account for users wanting to open something other than the default is to provide a full ""open in"" submenu that would list every app that handles that uri scheme. if we follow the same design scheme as files, i think this could be a separate pull request since we still show the default at the top level. there's an issue report for this feature: #422 can you explain what you mean about app names? i think we should just be able to do something like `""open in %s"".printf (appinfo.get_display_name ())` right? i believe this is what we do in other ""open in"" menus",0,0,0,0.6115472912788391,0.9540368914604188,0.960695743560791,0.0,accept,unanimous_agreement
639632342,330,"the latest commits should implement opening the current link, selection or working directory in the appropriate default application. as advised i have used appinfo.get_display_name () for the label. when the ""show in "" menu option is not enabled the description falls back to ""show in default application"" as this is what it will do when it is enabled. for simplicity the content type is guessed from the filename (if necessary). i am not sure how complex we want to get with this - replicating how files does it (i.e looking at the actual file attributes offering a way of changing the default), but that can be left for another pr if required.",0,0,0,0.8651658892631531,0.9742005467414856,0.987697184085846,0.0,accept,unanimous_agreement
639634503,330,do we want to show an error dialog if the uri fails to open in the default app?,0,0,0,0.966680943965912,0.9904516935348512,0.9916388392448424,0.0,accept,unanimous_agreement
1044375088,330,closing as the linked issue has been closed by another pr,0,0,0,0.9863770604133606,0.9935413599014282,0.994818150997162,0.0,accept,unanimous_agreement
847135658,584,"do you know what's the point of [a link], it sounds like a signal which should get emitted when the directory changes, but it seems to never get emitted and calling [a link] returns `null` on my machine. shouldn't it be technically possible to get notified whenever the cwd changes, without relying on continuously polling for it? similar how `get_shell_location` [a link] use the linux `/proc/ /cwd` file, should it be possible to set up an watcher using something like [a link] ? or maybe trace the `chdir` syscalls of the child processes?",0,0,0,0.9807257056236268,0.9875175356864928,0.9817841053009032,0.0,accept,unanimous_agreement
847150964,584,"thanks for the review! i thought i took out `save_open_terminals` - i intended to. it doesn't seem necessary when updating the labels. i originally only had the labels update when the user entered `return` then changed it to `contents_changed` so that if a script changed the cwd it was reflected in the labels. the updating is throttled by a timeout so i do not think it is particularly expensive. you are right that a better solution would to be notified of a cwd change rather than reacting to signals that `might` have changed the cwd (would still have to react to adding, removing and switching tabs though). i did not know how to do that but i'll look into your suggestions.",1,1,1,0.9411997199058532,0.98586905002594,0.984747052192688,1.0,accept,unanimous_agreement
847151852,584,isn't `/proc/` a virtual directory? so i don't know whether you can monitor it.,0,0,0,0.9062319993972778,0.9536118507385254,0.9873724579811096,0.0,accept,unanimous_agreement
847156532,584,oh yes :/ according to stackoverflow seems like [a link],-1,-1,-1,0.90582674741745,0.910458505153656,0.9958544969558716,-1.0,accept,unanimous_agreement
847181554,584,"imo, the easiest solution would be to implement `check_cwd_changed` function in the `terminalwidget`, which emits a `cwd_changed` signal if the cwd has changed. then you could register the `t.cwd_changed.connect (schedule_name_check);` and call `current_terminal.check_cwd_changed` every time enter is pressed. i think this way the code would be a little bit more self documenting, because it makes clear that the names has to be checked every time a terminal widget's cwd changes. and if in the future somebody comes up with some `posix/linux` magic, they just have to replace the logic of the `terminalwidget.cwd_changed` signal. but this way would not catch the case the cwd is changed by a script, but it would be an improvement over how mate terminal, gnome terminal or tilix handle it.",0,0,0,0.9718504548072816,0.9724248051643372,0.9688223004341124,0.0,accept,unanimous_agreement
847185999,584,the last commit reduces the cost of calling `schedule_name_check` rapidly. if two calls arrive within 500ms then the existing timeout just keeps running for another 250+ms. the call simply performs an int comparison and checks a boolean. i do not see a lot of advantage in creating a new terminal signal tbh instead of monitoring the existing terminal signals.,0,0,0,0.9251487851142884,0.9742252230644226,0.956416130065918,0.0,accept,unanimous_agreement
847186000,584,"if you rather want to cover all cases by using `contents_changed`, i would still move this logic to the `terminalwidget` and store the `cwd` into an instance variable and emit an `cwd_changed` if the `cwd` changes. this should scale better with a larger number of tabs because the `check_for_tabs_with_same_name` only has to run if one of the `terminalwidgets` cwd actually changes.",0,0,0,0.9872574210166932,0.9951462149620056,0.9928559064865112,0.0,accept,unanimous_agreement
847190318,584,but then you have each terminal running code everytime its contents changes instead of mainwindow. each terminal would have to connect to and process the `contents_changed` signal instead of mainwindow and *then* emit another signal which mainwindow has to process. i suppose it might be worth it as `check_for_tabs_with_same_name` is fairly expensive but does not run very often now.,0,0,0,0.9568272829055786,0.9661211967468262,0.9788343906402588,0.0,accept,unanimous_agreement
847193719,584,isn't the `contents_changed` a signal of the `terminalwidget`? to my understanding it gets emitted for each `terminalwidget` individually and each of them should process only if their contents change. any isn't it exactly the same in the current state of the pr?,0,0,0,0.9846768975257874,0.9931083917617798,0.9933096170425416,0.0,accept,unanimous_agreement
847194998,584,"`contents_changed` is a signal of `vte.terminal`, the terminalwidget does not do any processing on it currently so would have to connect to maintain a cwd property and decide whether to notify mainwindow.",0,0,0,0.9888351559638976,0.990993320941925,0.991891622543335,0.0,accept,unanimous_agreement
847197425,584,"yes, this is what i suggested. but if you don't like that, i could do a separate pr afterwards. the pr is probably still worth merging, as it is already a big improvement over the current state.",0,0,0,0.8952697515487671,0.9354267716407776,0.9299689531326294,0.0,accept,unanimous_agreement
847197479,584,it should be possible for mainwindow to maintain a cwd property on each terminal and ignore signals where it hasn't changed but it would mean calls to `get_shell_location ()` and comparison with the current cwd every time the contents changes - this is more expensive (and more code) than calling `schedule_name_check`.,0,0,0,0.9672905802726746,0.9919586181640624,0.9820592999458312,0.0,accept,unanimous_agreement
847198844,584,schedule_name_check calls the get_shell_location for all terminal widgets. so it should be much more expensive than a single call to get_shell_location. at least to my understanding of the code.,0,0,0,0.9715112447738647,0.9827547669410706,0.9816848635673524,0.0,accept,unanimous_agreement
847199309,584,one advantage of your approach is that it could be more responsive - it may not be necessary to throttle updating the labels. i'll give it a try.,0,0,0,0.8939869999885559,0.9045700430870056,0.812390923500061,0.0,accept,unanimous_agreement
847220459,584,i have to admit your way works at least as well and is more responsive :smile: because i removed the throttle. the only case it doesn't work (and probably the original didnt) is when you drag a tab out of a window - the remaining tab labels are not updated.,1,1,1,0.8535603284835815,0.9894291758537292,0.9920271039009094,1.0,accept,unanimous_agreement
847229278,584,you might like to look at [a link] for comparison. this uses a different method of disambiguation based on file functions which is a little simpler but in theory could result in one tab name being much longer than the other whereas my method ensures they are the same length.,0,0,0,0.9852103590965272,0.986527979373932,0.9924722909927368,0.0,accept,unanimous_agreement
847965060,584,thanks for your patience in collaborating on this! i don't particularly like connecting to `contents-changed` but at least the handler is now fairly inexpensive.,1,1,1,0.9856796860694884,0.9890804886817932,0.990922510623932,1.0,accept,unanimous_agreement
527714252,386,"hi, i would have some suggestions: 1. why not use the `button_press_event`? i think this would be more in line standard editors. 2. i have also noticed that this currently breaks the mouse support in vim. maybe this could be solved by checking if the terminal has a foreground process: [code block] 3. also when clicking during the blinking animation (particularly noticeable when the cursor is hidden), the cursor first appears at its initial position and then moves to the clicked position. i think this is because the `key_event` resets the visibility of the cursor. i think this is a bit irritating, i would therefore hide the cursor from the beginning of the first `key_event` till the end of the last `key_event`. 4. currently when clicking on a row which does not contain any text, the cursor is moved to the last possible location. i think in that case it would be useful to move the cursor only relative to the clicked column. this has the advantage, that if one accidentally clicks the row below the last text containing row, the cursor gets moved to the desired position.",0,0,0,0.8985514044761658,0.982650101184845,0.6640821099281311,0.0,accept,unanimous_agreement
529432117,386,thanks for the review! i think i used `button-release-event` because i was concerned about interfering with drag-select or drag-n-drop. would it solve any problem to use `button-press-event`? your other points are good ones - thanks - will address.,1,1,1,0.973077356815338,0.995288610458374,0.9953274726867676,1.0,accept,unanimous_agreement
529521823,386,"no, i just think it is the standard way to move the cursor. to avoid interfering with drag-select one could use: [code block]",0,0,0,0.9840743541717528,0.9867580533027648,0.9922836422920228,0.0,accept,unanimous_agreement
529855853,386,not sure why ci is failing for branch - the tests are timing out but this has happened sometimes in master too.,0,0,0,0.9124522805213928,0.9194020628929138,0.8957066535949707,0.0,accept,unanimous_agreement
529868863,386,seems terminal is not a drag source anyway so i have moved the logic to button-press-event. i have not found an issue yet.,0,0,0,0.939554750919342,0.97762131690979,0.9902601838111876,0.0,accept,unanimous_agreement
530019616,386,"- what is the rational behind `!get_has_selection ()` in `else if (event.button == gdk.button_primary && !get_has_selection () && !has_foreground_process ())`? this makes it necessary to click twice to move the cursor if text is selected. - selecting text above the current line now moves the cursor to the first possible position. this could be ruled out with: [code block] - your commit 2dfd129 which turns off the blinking does not fix **3.** anymore. **3.** could be fixed by setting the cursor color to the background color before the first `key_event` and set it back to the normal color after the last `key_event`: [code block] there is probably a better solution than using `timeout`, but one has to make sure that the `key_events` are already processed!",0,0,0,0.941381573677063,0.9933815002441406,0.993343472480774,0.0,accept,unanimous_agreement
530027991,386,i tried making the cursor invisible by setting it to background color before but it causes a similar issue when you click just after the cursor blinks on - it immediately disappears again. maybe slightly less jarring but not ideal. turning blinking off seemed the better solution but none i tried were ideal. also if the timeout expires just before the cursor is due to blink off then again the cursor will flash on and off. i am not sure this issue is worth the extra code complexity tbh.,0,0,-1,0.6424793004989624,0.8373326659202576,0.8858129382133484,0.0,accept,majority_agreement
530034615,386,i tried the color change method again and it works better your way - i didn't have the timeout when i did it before. so i have now used it. i have also taken on board your other suggestions - thanks!,1,1,1,0.9699349999427797,0.9952752590179444,0.993183434009552,1.0,accept,unanimous_agreement
530172696,386,"i would have some other minor suggestions. i have already implemented them in [a link] feel free to merge them if you agree. - the last commit makes it not possible to move the cursor for multi line commands. this could be solved by only moving relative to column if the clicked_row is below the last possible row. - i think it would be better if `get_cell_clicked` would also return `long` types. otherwise the values have to be casted back and forth if one passes them to another function of `vte.terminal` - i would keep ""turn off blink till the button_release"", as this is also common for text editors. (check the markdown editor of github.) - i would rename `c_row/c_col` to `current_row/current_col` and `p_row/p_col` to `clicked_row/clicked_col` - i would move [code block] to the top and initialize them at declaration. - i would check `event.button == gdk.button_primary` before `event.button == gdk.button_secondary`",0,0,0,0.8783462643623352,0.9723342061042786,0.9665517807006836,0.0,accept,unanimous_agreement
530276150,386,sounds good to me - i have merged your changes.,1,1,1,0.95780748128891,0.9417674541473388,0.9502434730529784,1.0,accept,unanimous_agreement
530294480,386,somtimes the blink gets turned off until a key is pressed - not sure why - investigating. hmm - seems to occur in master as well. maybe an upstream effect.,0,0,0,0.97898530960083,0.8621512055397034,0.9832202196121216,0.0,accept,unanimous_agreement
530602301,386,"- would maybe better to use [code block] instead of [code block] as this would not require the ""hard-coded"" 100ms value? - also when clicking the ""white space"" the cursor should not only move relative to the current col but also move to the last possible row. otherwise this could lead to unwanted behavior: ![a link] this could be implemented by synthesizing a `key.end` press and then moving the cursor relative within the last line. but this would require an additional await of the `key.end` press event, so maybe it is easier/better to just ignore clicks on the ""white space"" with: [code block]",-1,0,-1,0.8833416700363159,0.9872459173202516,0.6913446187973022,-1.0,accept,majority_agreement
532309212,386,"i tried synthesising gdk.key.end and it works on the first click but there does not seem any (simple, elegant) way of keeping track of the end of the commandline so there were problems on subsequent clicks. so i have ignored clicks on space as advised. also replaced hard-coded timeout - thanks.",0,1,1,0.680053174495697,0.907678246498108,0.9633399248123168,1.0,accept,majority_agreement
533086564,386,"after further testing i had to revert trying to be clever when clicking on empty space. it causes problems if the command is edited in the middle and then clicked at the end to continue for example - the cursor cannot be returned to the end (by clicking). i think it would be better to accept the original ""brute force"" approach where the cursor moves as far as possible if clicked outside the command as the lesser of two evils. a refinement can always be submitted later if found.",0,0,0,0.9290320873260498,0.9571291208267212,0.9496412873268129,0.0,accept,unanimous_agreement
533228934,386,"i also noticed that the condition `clicked_row < remembered_command_start_row` is not sufficient to rule out clicks on old output. this is because the `remembered_command_start_row` contains the position of the row in regard to all rows, while the `clicked_row` value is in regard to all visible rows. i think `get_cell_clicked` must be adjusted so that it returns the absolute row-number in terms off all rows. this could be down by introducing a new a new variable `int visible_row_start`. the `get_cell_clicked` could than be adjusted: [code block] the most naive approch to keep track of the row-number of the first visible line would be: [code block] but this logic breaks down when the window is resized :/",0,0,0,0.9756375551223756,0.989733874797821,0.9871326684951782,0.0,accept,unanimous_agreement
536293853,386,"not sure if its in the guidance yet, but dan and others now recommend using the named boolean constants to end event and source closures for readability/clarity. there is no technical advantage as far as i know, clearly, i haven't got used to it yet ;-)",1,1,1,0.6404407620429993,0.9644339680671692,0.977836847305298,1.0,accept,unanimous_agreement
536295621,386,i was aware of possible problems caused by scrolling/resizing but wanted to get a basic solution working first. i am beginning to think that the simplest solution to making terminal behave more like a text view is to have a hidden text view behind it and process all the text there!,-1,1,0,0.6080586314201355,0.8616589903831482,0.8918354511260986,,review,no_majority_disagreement
536297272,386,i think i have found a simpler solution for the scrolling/resizing problem.,0,0,0,0.9811500310897828,0.9597648978233336,0.8295919895172119,0.0,accept,unanimous_agreement
541344494,386,note: this does not currently work when the commandline is a url as the code launching that url takes priority. i am not minded to address that in the pr though.,0,0,0,0.602515697479248,0.9226247072219848,0.9914353489875792,0.0,accept,unanimous_agreement
548472937,386,"currently `remembered_command_start_row` is only remembered after the next key press event. this leads to the problem that clicks on output, which should be ignored by [code block] are registered, if in between the last return press and following *mouse-click* no other key press occured. i think the most elegant solution would be to remember the `remembered_command_start_row` as soon as the command returns. but this would need a new signal, which gets emitted when the foreground process exits. a simpler approach would be to call `remember_command_start_position` before doing the comparison: [code block]",0,0,0,0.9714510440826416,0.9896316528320312,0.9631441235542296,0.0,accept,unanimous_agreement
548578687,386,"as you now update remembered positions when the window is resized, shouldn't it be save to remove the `!resized &&`? [code block]",0,0,0,0.9880722761154176,0.9953259229660034,0.995492935180664,0.0,accept,unanimous_agreement
612459187,386,"any chance of another look at this? i have incorporated one of your suggestions. the one about `resized` i have not included, as this pr does not currently touch that code and as far as i can tell it does not fix any issue caused by this pr. if that is not the case please comment further.",0,0,0,0.9803001880645752,0.97975355386734,0.9853717684745787,0.0,accept,unanimous_agreement
612522582,386,"if i remember correctly, the reason i suggested to remove the `resized` check is, because currently there is an issue that the last output cannot be reliably copied if the window was resized. to my understanding this was fixed by your commit 5337b6b, which should make this check unnecessary. another thing i noticed: clicking on the prompt string should not move cursor to the beginning of the command. i often double-click the prompt string to copy the current working directory and this would unintentionally move the cursor to the beginning. #504 should solve this by checking: [code block] this should work correctly even for different prompt strings (the ps1 variable). i, for example, have a line break after the current working directory to prevent the line wrapping of longer commands. i made a simple graphic to show what i mean: ![a link] the commit [a link] has debug logs to check this. it might be a good idea to make this feature toggle-able and off by default, so more people can test it... i will use this branch for 1-2 more weeks and then try to give some more feedback.",0,0,0,0.9205756187438964,0.9832804203033448,0.9669022560119628,0.0,accept,unanimous_agreement
613414664,386,"just an idea: i found this [a link] where it says, that one also can use these escape sequences to move the cursor. [code block] i am not sure if this is actually less hacky than emulating a keypress. at least it is some kind of an interface ... **edit:** i found another [a link] which explains it in more detail: `\033` is the `esc` character in octal notation and `\033[` marks the beginning of the escape sequence. a, b, c and d can be used to move the cursor. pressing (or synthesizing) an arrow key actually sends the same sequence to the child process. so it is more or less the same but, cuts out the middleman (key press event). i think should be even possible to save the for-loop by passing a value to the sequence `esc[valuea`. --- i made a pr #504 which fixes the issue when clicking on the command prompt and uses the escape sequence instead of synthesizing the keypress.",0,0,0,0.722284734249115,0.839231550693512,0.6615304350852966,0.0,accept,unanimous_agreement
613453470,386,"i noticed a logical error in `remember_command_start_position`. the position is only remembered if the last key press was the return key or ctrl+c . but there are other possibilities to advance the prompt: for example when triggering the tab-completition by pressing the tab key twice or when pressing or ctrl+\\ . this leads to the problem, that the `remembered_start_row` is not always up-to-date and therefore not all mouse clicks above the current command prompt are ignored. a more reliable way to save the command_start_col/row is needed! a (hacky) solution would be to save the current position, then move the cursor to the beginning of the command, storing this position in `remembered_start_row/col` and moving the cursor back to its initial position.",0,0,0,0.9553903341293336,0.9890179634094238,0.9644541144371032,0.0,accept,unanimous_agreement
795130293,386,why did you close this?,0,0,0,0.9122685194015504,0.9662142395973206,0.9754974842071532,0.0,accept,unanimous_agreement
795605567,386,spring-cleaning old prs with no recent progress/interest from reviewers.,0,0,0,0.9749770760536194,0.965251088142395,0.8668732047080994,0.0,accept,unanimous_agreement
629396009,505,could i have a ruling on what the correct behaviour for new tabs is (i.e. default zoom or zoom of current tab)?,0,0,0,0.9862834215164183,0.992725133895874,0.9923877716064452,0.0,accept,unanimous_agreement
629401158,505,"yeah i'm kinda conflicted. i would say, if it's a new tab it should have the default zoom, but we don't have a way to set a default zoom separately so i'm kind of conflicted on this feature in the first place. :sweat_smile: one thing is that if you're duplicating a tab, we should _probably_ duplicate that tab's zoom level, too?",-1,-1,1,0.9812313914299012,0.9609767198562622,0.637932538986206,-1.0,accept,majority_agreement
629418511,505,"my feeling is that we should take the zoom level of the current tab both for ""new tab"" and ""duplicate tab"". i would guess in most cases users would choose a zoom level that is comfortable for them and stick with it for most tabs and only adjust it for certain outputs.",0,0,0,0.938116192817688,0.9683310389518738,0.977211594581604,0.0,accept,unanimous_agreement
629422043,505,"konsole has seperate zoom per tab but xfce terminal synchronises the zoom across tabs so ...(*shrug*). if you think this unlikely to be merged then i'll abandon it and mark the issue ""design conflict"". the respondent seemed quite fired up about it though.",-1,0,-1,0.5076335668563843,0.8499166965484619,0.6224072575569153,-1.0,accept,majority_agreement
629436902,505,"that's a good point that if you set a comfortable default, then we should just continue using that by default for new tabs. and then yeah, if you adjust a specific tab, it shouldn't affect the other open tabs. i am fine with that logic.",1,1,1,0.6634041666984558,0.8117169737815857,0.9461850523948668,1.0,accept,unanimous_agreement
629612347,505,"i have implemented using the last active tab zoom as the starting point for new and duplicate tabs and where ""remember-tabs"" is turned off. i have maintained the option to toggle this feature on and off, but now made the default as on (to be confirmed). i am still a bit unsure about what the correct action of the ""default zoom"" button should be. it is a bit unpredictable at the moment as it uses the ""zoom"" setting which, at the moment, is the zoom level of the active tab when the app was closed. alternatives would be always to use 100% zoom for this button, or to use it to restore the zoom at the moment the menu was opened - i.e. undo zoom changes.",-1,0,0,0.7833072543144226,0.7195641994476318,0.8194705843925476,0.0,accept,majority_agreement
629655490,505,"i think the expectation is that it always sets back to 100%, which is what browsers do.",0,0,0,0.980999231338501,0.9833664894104004,0.9768675565719604,0.0,accept,unanimous_agreement
629680869,505,"ok, i have implemented that.",0,0,0,0.9826462268829346,0.9706544280052184,0.9933806657791138,0.0,accept,unanimous_agreement
631030816,505,"ok, the sync-zoom stuff is gone :-)",1,1,0,0.9469591975212096,0.9623773097991944,0.6582978367805481,1.0,accept,majority_agreement
723227884,505,had to fix weird regression where terminals crashed if closed immediately after adjusting a tab zoom level. not obvious why this did not occur in master as the relevant code had not been changed by this pr. seems to be an obscure race where terminal attempts to save the position of `notebook.current` after it becomes `null` during a delete event. i guess the new code affected the winner of the race ...,-1,0,-1,0.949517786502838,0.6364284157752991,0.9654908180236816,-1.0,accept,majority_agreement
724572474,505,need to decide what a suitable max scale should be - just noticed i used 4.0 in one place and 5.0 in another. suggestions?,0,0,0,0.9734956622123718,0.9806350469589232,0.974968671798706,0.0,accept,unanimous_agreement
726303104,505,"yes, as i noted in a previous comment there are some discrepancies in the minimum and maximum zoom levels set in different places and asked what the best values would be. once ux team have adjudicated on that i'll ensure these values are consistently applied.",0,0,0,0.9844465851783752,0.9879307746887208,0.9903214573860168,0.0,accept,unanimous_agreement
726860848,505,i have decided to make a choice for zoom range myself - it is now 0.25 - 4.0 which seems more than sufficient to me.,0,0,0,0.9152703881263732,0.9770997166633606,0.960437834262848,0.0,accept,unanimous_agreement
1785815472,742,window.get_simple_action (mainwindow.action_zoom_font_in).activate (null); (other examples of this pattern are already used in the code) [a link],0,0,0,0.9867342710494996,0.9939992427825928,0.9932031631469728,0.0,accept,unanimous_agreement
1785879946,742,[a link] maybe would be a better solution to make again one function but with bool value `save_zooms` to avoid duplicated cycles though opened terminals. i think i processed all notes. thank you for reviewing.,1,1,1,0.9404546618461608,0.9127143621444702,0.9223423004150392,1.0,accept,unanimous_agreement
1786153868,742,"[a link] handle the situation when is opened first terminal, then second one, second one is closed and then is laptop rebooted. without this code would be saved tabs and tab-zooms from second terminal but should be from first one.",0,0,0,0.9897520542144777,0.975238561630249,0.9954466223716736,0.0,accept,unanimous_agreement
1787270804,742,i am fine with you merging the saving functions back into one with an extra parameter.,0,0,0,0.9640098214149476,0.9486660361289978,0.973297953605652,0.0,accept,unanimous_agreement
1787472693,742,"refactored to one function but with 2 bool parameters because i realized i do not know how to do that with only 1 - 1. state save only tabs, 2. state save only zooms, 3. state save both",0,0,0,0.9769576787948608,0.9744809865951538,0.968451738357544,0.0,accept,unanimous_agreement
1787480138,742,it could be done with an enum as a parameter but probably not worth it in this case.,0,0,0,0.9837639331817628,0.9836106300354004,0.9614095687866212,0.0,accept,unanimous_agreement
1788932342,742,one small thing i noticed - `save_opened_terminals ()` get called before `current_terminal` is set leading to the critical warning `gdouble vte_terminal_get_font_scale)vteterminal*): assertion vte_is_terminal(terminal) failed` (mainwindow lin 1361) other than that it seems to work well now!,0,0,1,0.8405444025993347,0.8813167214393616,0.6456916928291321,0.0,accept,majority_agreement
1789324524,742,need to fix ci workflow (or override) before can be merged.,0,0,0,0.9725024700164796,0.987950086593628,0.991326868534088,0.0,accept,unanimous_agreement
1789459189,742,i have pushed a pr to merge into this one that should fix the unit testing issue for now. the unit tests should probably be rewritten/extended to take continuous saving (or not) into account but that is complicated so can be left for another pr.,0,0,0,0.9630982875823976,0.9938346147537231,0.9914827346801758,0.0,accept,unanimous_agreement
1789615779,742,merged.,0,0,0,0.9752455949783324,0.9896859526634216,0.9631417989730836,0.0,accept,unanimous_agreement
696420046,542,"hey! thanks a lot for your review. i implemented almost all of your suggestions, see my comments above. i would _really_ like to include at least some predefined styles. i am pretty sure that many people would like to customize their terminal at least a little bit. on the other hand i assume that not all of these people (myself included) would put in the effort to enter an existing style color by color or even create a completely custom style from the ground up. maybe reducing the number of styles to the 10-20 most popular (by some measure) styles would be a good compromise? yeah, i am a bit torn about that. my thinking was that most people are not creating styles from the ground up and instead start with one of the existing styles and apply some minor tweaks to their liking. the way it is currently implemented allows that while also allowing the creation of a completely new style. i am not sure how we would allow both use cases if we would save the custom style. i am open to ideas!",1,1,1,0.9563753008842468,0.9919655323028564,0.9938031435012816,1.0,accept,unanimous_agreement
700305756,542,"hey sorry it took a while to follow up with a review here! this is looking really good. i think we can probably just try to get something in and iterate on it as we go. at the very least we need to make sure we actually have permission to redistribute any inluded styles. it doesn't look like the `gogh` repo contains any licensing information and several of these styles do not have a license, so they should be removed unless you'd like to contact the authors and ask them to publish a license. there are also several styles included that don't pass the contrast check, so i imagine we should remove those as well.",-1,1,-1,0.9433106780052184,0.8732280135154724,0.9174367785453796,-1.0,accept,majority_agreement
701688935,542,"hey, you are right. i trimmed the list down to 24 styles (including our three default and the one custom) and checked the licenses for the remaining ones: - 3024 | [a link] | public domain - dracula | [a link] | mit - gruvbox | [a link] | mit - monokai | [a link] | mit - nord | [a link] | mit - solarized | [a link] | mit - spacegray | [a link] | mit - summerfruit | [a link] | mit - tomorrow | [a link] | mit if i understand it correctly, the mit license should be compatible with the lgpl from this repo here, right? i am just not sure what the right place for the above list would be. some sort of credits file?",1,0,0,0.6670014262199402,0.928985595703125,0.8948625326156616,0.0,accept,majority_agreement
701729223,542,"for vendoring third-party styles into this codebase, a reference to the style, the commit it came from, and a copy of the license needs to be included for each vendored style. you probably will want to make those styles able to be read from configuration files that are installed into somewhere in `/usr/share` so that the appropriate documentation can be included along with the style configurations.",0,0,0,0.9885421991348268,0.9929777979850768,0.9924356341362,0.0,accept,unanimous_agreement
701731336,542,"to give a bit more detail of how _i_ suggest doing this: * break out the theme configurations into something like `/usr/share/io.elementary.terminal/themes/ /` directory * in that directory, a `theme.toml` and `license` file would be present. * the `theme.toml` file would include the actual style configuration and fields indicating where it was sourced from if it comes from somewhere else. * the `license` file would be a verbatim copy of the license text from the original source. if the style is unique to this codebase, then this file can be omitted and the `theme.toml` can indicate that it's an original theme.",0,0,0,0.9593846201896667,0.9910349249839784,0.9921861886978148,0.0,accept,unanimous_agreement
740832159,542,"hey , since this seems to have gotten a bit stuck on the licensing bit would you be interested in merging a version of this without the color schemes so we can get this feature in and then bring back some pre-loaded color schemes in a future branch?",0,0,0,0.9831014275550842,0.6791081428527832,0.989521861076355,0.0,accept,unanimous_agreement
753309115,542,that sounds like a good idea. i will give the suggestions by -kudo a shot and if it takes me too long i will reduce the merge request to the custom color scheme.,1,1,1,0.9159634709358216,0.9647448658943176,0.9584338665008544,1.0,accept,unanimous_agreement
780064481,542,"okay, i will close this in favor of #552",0,0,0,0.9811404943466188,0.9769455194473268,0.9792228937149048,0.0,accept,unanimous_agreement
341184099,160,i think it is simpler to bind the zoom property of the settings to the zoom_factor property of the terminalwidget.,0,0,0,0.9855639934539796,0.9794426560401917,0.9872766137123108,0.0,accept,unanimous_agreement
341185169,160,would that not force all terminals to have the same zoom level?,0,0,0,0.972056806087494,0.9879006147384644,0.9847625494003296,0.0,accept,unanimous_agreement
341186041,160,"do we think it would make sense for each tab to have its own zoom level? i think this makes sense as a global setting, personally. go go gadget /ux",0,0,0,0.7960395216941833,0.9757916927337646,0.9824566841125488,0.0,accept,unanimous_agreement
341193658,160,if you use bidirectional binding then the zoom-factors would be the same in each terminal. you could use a set binding flag and load the initial zoom-factor to allow individial adjustment. then the saved factor would be whichever was changed last. this is what files does at the moment. to save individual zoom-factors is more complicated ...,0,0,0,0.964243710041046,0.9693087339401244,0.9874840378761292,0.0,accept,unanimous_agreement
341194544,160,as the content of the terminals is only text then having differing font sizes in different terminals does not make much sense to me.,-1,0,0,0.7808138728141785,0.9167685508728028,0.8980308771133423,0.0,accept,majority_agreement
341206673,160,okay the zoom level is now shared between terminals.,0,0,0,0.9855513572692872,0.9870283603668212,0.992013156414032,0.0,accept,unanimous_agreement
341209418,160,"ok, ignore last review - i didn't realise you were still working.",-1,0,0,0.5752339363098145,0.7113877534866333,0.9881388545036316,0.0,accept,majority_agreement
341212591,160,"the idle add to correct the font seems really dodgy, but it needs it to work as the font is not defined until after construction... is there a better way to handle that?",-1,-1,-1,0.8985068202018738,0.974719226360321,0.9725965261459352,-1.0,accept,unanimous_agreement
341758907,160,"this is better, but does not protect against stupid numbers being entered directly into the setting using dconf-editor or the command-line. it could be argued that if users want to be stupid, let them, provided the app does not crash (and it doesnt - the text just disappears). however, i cannot really see the disadvantage of concentrating the range checking in one place. i agree that 40% and 250% are realistic usable limits on a standard dpi screen. i do not have hidpi but i guess modifying these by a factor of two (20% and 500%) seems reasonable to cover this.",0,0,0,0.8141012191772461,0.9068224430084229,0.8907049298286438,0.0,accept,unanimous_agreement
341937158,160,"i've moved the range checking to the set function, i added a 0.01 offset to the range checking due to floating point numbers.",0,0,0,0.988500952720642,0.9932281374931335,0.9950913190841676,0.0,accept,unanimous_agreement
316138785,125,can you explain what the intended change here is? is there an issue that this is intended to resolve?,0,0,0,0.9791892766952516,0.9856534600257874,0.9932241439819336,0.0,accept,unanimous_agreement
316178706,125,"unfortunately my knowledge is not very broad and i can make a mistake (if i have not already done that :) ) in the terminal widget (vte, gtk or the other, i'm not sure) have their own code to insert text from the clipboard by pressing the middle mouse button. because of this, you can insert non-secure commands without warning. this can be fixed by own 'middle mouse button pressing' signal handler for paste. i tested better and realized that my solution does not work on the restored tabs. i think that the beautiful solution will require a little refactoring (what i'm afraid and decided not to do so as not to spoil the existing code).",-1,1,1,0.6637585163116455,0.9575533866882324,0.6110060811042786,1.0,accept,majority_agreement
316438536,125,"i have carefully read code of the widgets. gtk.container automatically destroys the child widget. to avoid this, the child widget should be removed. my solution should fix #45, #88, #94, and links in restored tabs (they were not clickable)",0,0,0,0.974592387676239,0.9811893701553344,0.9891058802604676,0.0,accept,unanimous_agreement
317891015,125,i should revert 9a1ceb83ff1bd3cba2e28cfefe659914b66bb0f2 in this branch and create new pull request with this commit in new branch?,0,0,0,0.9870895743370056,0.994471788406372,0.9943654537200928,0.0,accept,unanimous_agreement
317894822,125,yeah it would be ideal.,0,0,0,0.6911680698394775,0.8893503546714783,0.6256701946258545,0.0,accept,unanimous_agreement
322396862,125,can you review my changes? they are incorrect or incomplete?,0,0,0,0.978904664516449,0.9608933925628662,0.9843053221702576,0.0,accept,unanimous_agreement
322431152,125,"ups, sorry, i forgot i reviewed this before. i will review it today / tomorrow. i removed the incomplete label.",-1,-1,-1,0.9865541458129884,0.9910804629325868,0.9870451092720032,-1.0,accept,unanimous_agreement
323031930,125,thank you for your comments. i fixed it.,1,1,1,0.8685947060585022,0.9318997859954834,0.976906716823578,1.0,accept,unanimous_agreement
332500752,125,fixed. all right now?,0,0,0,0.968259572982788,0.9780699610710144,0.9883362650871276,0.0,accept,unanimous_agreement
2182392701,760,"outstanding issue is a transparent gap between the tab bar and the header bar through which the desktop shows: ![a link] this occurs on x and on wayland, but does not occur in files and code which have very similar widgets. is this a styling issue or a difference in coding that i can't see?",-1,0,1,0.8090595602989197,0.7265747785568237,0.7034642696380615,,review,no_majority_disagreement
2182422983,760,"the problem seems to be due to the ""terminal-window"" styleclass previously applied to the grid containing the header and view. i have removed that class for now. i am not sure what it did or how to fix it.",-1,0,0,0.6303605437278748,0.6688067317008972,0.9745308756828308,0.0,accept,majority_agreement
2183454753,760,proposed a fix here :) [a link],1,1,1,0.6670064926147461,0.9954286813735962,0.9932742118835448,1.0,accept,unanimous_agreement
2186477381,760,"yes, you are right - terminalwidgets are not being destroyed when tabs are closed. i had similar issues a long time ago with files widgets and ended up just disconnecting the signals before closing. i'll see if i can find a better way here.",0,0,0,0.9556256532669068,0.94471275806427,0.9786797761917114,0.0,accept,unanimous_agreement
2186539817,760,"for the terminal_widget you can use the instance that's always passed in signal handlers (so something like `terminal_widget.child_exited.connect ((instance, any_other_variables_that_are_passed_to_the_signal_handler, ...) => {` which might be enough to break the cycle? atleast if the terminal widgets lifetime doesn't depend on `this`. if it does then the program local variable is still an issue so maybe add a property in the terminal widget for it? i'm not at all in codebase though so i'm not sure whether that makes any sense here :)",0,0,0,0.9510906338691713,0.97612327337265,0.9738255143165588,0.0,accept,unanimous_agreement
2186547930,760,i'm currently trying to write the logics behind this down maybe for inclusion in docs.vala.dev and for me to better understand it since it seems to be a pretty big problem especially in widget hierarchies so i'll leave it here might be completely wrong though :),-1,1,1,0.619324266910553,0.9491757154464722,0.7182732224464417,1.0,accept,majority_agreement
2187072660,760,"this branch breaks some of the tests (although in reality it behaves ok). i have been unable to find out what is going wrong. it appears to be a timing thing for the ""execute"" test - the number of tabs gets tested *before* the context iteration (?). putting debug messages in the code indicates that 5 tabs are indeed added by mainwindow but the test only sees one tab. i changed the closing down code in order to make the other tests run. if you have time i would be grateful for your input/investigation/fix :smile:",1,1,1,0.9535543322563172,0.989573061466217,0.9921411275863647,1.0,accept,unanimous_agreement
2187077654,760,for now i have used disconnection of terminal widget signals before closing in order for them to be destroyed. if you have a more elegant way please let me know. unfortunately some tests stopped working after doing that for obscure reasons. i have asked for help.,-1,-1,0,0.5878898501396179,0.7836780548095703,0.7816725373268127,-1.0,accept,majority_agreement
2187762192,760,"some things: 1. terminalwidget.program_string is never set, so `--execute` is broken (this is the reason for the test failure). 2. vte.terminal.child_exited will be called if the tabview is destroyed with tab opens (happens with the shutdown signal during the tests) and the close_page call inside it will cause a segfault, a extra `tw.tab.child == tw.parent` check should stop it from occurring. 3. the idle block during the `selected-page` notify is unnecessary and setting the tab tooltip there causes the `action/new-window` test to fail, it can be removed since the tooltip is already set during the tab construction and when the cwd changes. 4. `title = current_terminal.current_working_directory` is a regression as it doesn't respect the user/program defined title.",0,0,0,0.9718799591064452,0.979198694229126,0.9899071455001832,0.0,accept,unanimous_agreement
2189396388,760,"thanks for your helpful comments - i have tried to implement them. after those changes, the `action-quit` test was still not working (timing out) so i have have made some further changes to `tests/application.vala` that do allow it to pass. however, as you have a much deeper knowledge of what is going on these tests i would be grateful for your input. with regard to the window title, it now tracks the current terminal `window-title` property (read only). is that what is intended?",1,1,1,0.966509222984314,0.9697636961936952,0.975594699382782,1.0,accept,unanimous_agreement
2189401483,760,just noticed that the test pass in two of the builds but not in the development-target build. i have not idea why (it pass locally on os8),0,0,0,0.9188905358314514,0.9343459010124208,0.9834912419319152,0.0,accept,unanimous_agreement
2258770966,760,"is this ok to merge now, do you think?",0,0,0,0.9807853698730468,0.9891690015792848,0.9921214580535888,0.0,accept,unanimous_agreement
2259289605,760,thank you for this! could you add `src/widgets/terminalview.vala` to potfiles so that we can translate menu items?,1,1,1,0.9832727909088136,0.9513055682182312,0.9834271669387816,1.0,accept,unanimous_agreement
2260850923,760,done! sorry - i always forget to do that :frowning_face:,-1,-1,-1,0.9889689683914183,0.992625892162323,0.9959079027175904,-1.0,accept,unanimous_agreement
1256207327,687,what linter and config is being used?,0,0,0,0.9829041361808776,0.9882954359054564,0.993617057800293,0.0,accept,unanimous_agreement
1256534594,687,the linter is `vala-lint` with the default configuration. you can download and install locally from [a link] you can then check you code locally before committing.,0,0,0,0.9890823364257812,0.9927789568901062,0.9959140419960022,0.0,accept,unanimous_agreement
1256536717,687,"further info on elementary code style, which the linter enforces can be found here: [a link] there should probably be info about linting locally there but as yet it has not been added.",0,0,0,0.986332356929779,0.990702986717224,0.9943103790283204,0.0,accept,unanimous_agreement
1256786524,687,"i'm sorry to keep bugging you for simple questions, but i'm having an error with the linting that i can't understand. specifically, i received and error stating: [code block] the referenced line of code is `bool initialfound = next_search ();`. i can't understand why this declaration would be preceded with an underscore. for context, the line is in a try block, in a lambda, in the constructor. what is the rule that is triggering this to get that error?",-1,-1,-1,0.9886696338653564,0.983363151550293,0.9887980818748474,-1.0,accept,unanimous_agreement
1256862351,687,"in vala variables are named using snake_case, and `initialfound` should be `initial_found`",0,0,0,0.9880188703536988,0.9944692850112916,0.995385468006134,0.0,accept,unanimous_agreement
1257170668,687,"a side-effect of this change is that if, after the search, the terminal produces output containing the search term then the navigation buttons remain insensitive even if the cyclic search button is toggled. the search term has to be modified or re-entered in order to initiate a new search. a more convenient way of refreshing the search would be good. at least if the cyclic search button is toggled then the sensitivity of the navigation buttons should be revisited.",0,0,0,0.9700654745101928,0.9866154193878174,0.9779370427131652,0.0,accept,unanimous_agreement
1257210372,687,i completely agree that this is potentially undesirable behavior. is there an event emitted from the terminal that would indicate that additional content has been added? there are a few such edge cases that are not handled well. i feel that adding messaging to indicate that the end of search has been reached would be appropriate.,0,0,0,0.8957813382148743,0.9544112682342528,0.7395685315132141,0.0,accept,unanimous_agreement
1257235506,687,there is `vte.terminal.content-changed` signal. but you may need to throttle that so that a large number of searches are not performed unnecessarily when the content is changing rapidly. maybe better leave that for another pr.,0,0,0,0.9775300621986388,0.985261857509613,0.9921557903289796,0.0,accept,unanimous_agreement
2419238898,687,i looked into completing this but found that because of the way the terminal widget does search one hit at a time (unlike code which searches for all hits within scope) it is extremely difficult/impossible to set the search arrow sensitivities correctly all the time. i do not think it is worth spending more time on it tbh.,-1,-1,-1,0.8886316418647766,0.7259824275970459,0.9046367406845092,-1.0,accept,unanimous_agreement
508175626,265,fixed :-),1,1,1,0.8137578368186951,0.984812557697296,0.679787278175354,1.0,accept,unanimous_agreement
512778795,265,is this ok now?,0,0,0,0.9813687801361084,0.9887468218803406,0.9913357496261596,0.0,accept,unanimous_agreement
515671522,265,i have removed the unused parameter.,0,0,0,0.981709122657776,0.9864068627357484,0.9951747059822084,0.0,accept,unanimous_agreement
518181999,265,can you please check this pr?,0,0,0,0.979440689086914,0.9869693517684937,0.9944950938224792,0.0,accept,unanimous_agreement
570900275,265,"yesterday i got an update... ![screenshot from 2020-01-04 11-39-18[1]][1] now terminal behaves oddly: settings: - follow last tab is off - remember tabs is off result: - opens two tabs on launch from anywhere: (including slingshot, plank & shortcut super + t ) - sometimes the duplicate tab header / title is just a **`.`** (see the pictures below) opened from plank ![a link] opened from directory ![a link] i hope this can help in improvement of the fix.... [1]: [a link]",0,0,1,0.5686632990837097,0.5284277200698853,0.9851399064064026,0.0,accept,majority_agreement
572061857,265,oh and on more thing (you guys might have already figured out) opening from a file does not open a duplicate tab but instead opens a tab at home: first tab opened at correct location: ![a link] second tab opened at home: ![a link],-1,0,1,0.737134575843811,0.965112030506134,0.912369191646576,,review,no_majority_disagreement
572133182,265,seems like adam was good with this branch and i can confirm that it's behaving as expected. merging :) thanks for the fix!,1,1,1,0.991647481918335,0.996350884437561,0.9965280890464784,1.0,accept,unanimous_agreement
573281617,265,kudos! guys :party_popper: ... i just got an update... its fixed! thanks a lot!,1,1,1,0.9927071928977966,0.9959014058113098,0.9974568486213684,1.0,accept,unanimous_agreement
1172439896,662,![a link] ![a link],0,0,1,0.8253514766693115,0.9614991545677184,0.8964245915412903,0.0,accept,majority_agreement
1172446238,662,i would appreciate your comments on this. i added the extra labels as it didn't seem obvious to a new user why there were two very similar color buttons with only one label. the main flaw with this is that it is not possible to save a custom theme permanently - if you switch back to a builtin theme it overwrites your custom theme and you cannot return to it without rebuilding it. it might be better to fix that in a new pr as there is more than one possible solution - e.g. a new setting or a file in the user home.,0,1,1,0.506263017654419,0.8052560091018677,0.9135990738868712,1.0,accept,majority_agreement
1172457701,662,i see from the prior art in #418 that no-one else thinks the extra labels are necessary so i'll remove if required.,0,0,0,0.9857051372528076,0.9881964325904846,0.9909985065460204,0.0,accept,unanimous_agreement
1172458487,662,there are also some possible extra refinements like using palette colors for foreground/background but that can be done in another pr.,0,0,0,0.9873729348182678,0.9935396313667296,0.9946986436843872,0.0,accept,unanimous_agreement
1172666190,662,i think we should solve the issue of persisting the custom palette before exposing this toggle so that we don't have an immediately broken feature. we should probably make sure that the `palette` setting is only used to store values for the custom theme and that terminal is loading the palette for built-in themes from the theme class and not from gsettings,0,0,0,0.9800410866737366,0.9878140687942504,0.9828451871871948,0.0,accept,unanimous_agreement
1172894573,662,"yeh, that makes sense.",0,0,0,0.9401161074638368,0.91688334941864,0.9668689370155334,0.0,accept,unanimous_agreement
1173047752,662,"after merging master and making relevant changes, the custom theme now persists. i have moved the ""color palette"" header to before the background/foreground buttons because although the palette strictly speaking does not include these, to the average user they are just some more color settings. i have also changed the reset button to reset the foreground/background/cursor colors for the same reason. can importing/saving custom themes be left for a later pr, if required?",0,0,0,0.9831041097640992,0.9925798773765564,0.9876747131347656,0.0,accept,unanimous_agreement
1175397252,662,i have implemented your suggestion re fallback palette as it simplifies the code and the issue of possible invalid colors in the settings (presumably due to manual editing) is unlikely. we now fallback to a default palette if *any* of the custom colors are invalid rather than replacing only the invalid color.,0,0,0,0.9812068343162536,0.988298773765564,0.9560627937316896,0.0,accept,unanimous_agreement
1176493531,662,"ok, so you want to keep correcting individual colors; i'll revert to that. i just thought that this pretty unlikely to be required in practice so simplified it. i guess if we implementing importing customs themes it raises the risk of invalid colors being imported.",0,0,0,0.9548901915550232,0.9064360857009888,0.973864495754242,0.0,accept,unanimous_agreement
595194792,486,"congratulations on making your first contribution to elementary! if you put ""fixes #nnn"" in the description then the related issue is automatlically closed if the pr is merged into master. i have done this for you. i have made a few small code style points but a larger issue is that this does not work for processes that intercepts keystrokes and button presses on the terminal widget (i tried with htop although that has its own quit method). one possible solution would be to put the terminate process menuitem in the tab menu.",1,1,1,0.938318967819214,0.9939693212509156,0.992982029914856,1.0,accept,unanimous_agreement
597138226,486,i see you have moved the terminate process menuitem to the app menu rather than the tab menu. the problem with this is that there is not a direct connection between that menu and the tab to which the option applies. i think it would be more intuitive to have it in the tab menu (right-click on the tab of the relevant terminal). also you need to make sure the option appears (or is only sensitive) when there is a process to terminate. i'm going to flag this for ux team input with regard to the optimum placement of the option.,0,0,0,0.9766232967376708,0.9767752289772034,0.9752542972564696,0.0,accept,unanimous_agreement
597151449,486,"in order to add an item to the tab menu you will need to connect to the ""popped-up"" signal of the tab menu. as the tab is associated with the terminal after the terminal is created, you need to do this in mainwindow::create_tab (). for example: [code block] ideally the menu item label should include the name of the process to be terminated but that is not so easily obtained.",0,0,0,0.9872866272926332,0.99423086643219,0.9936989545822144,0.0,accept,unanimous_agreement
597161133,486,"i'd also like to mention /ux here for some additional thought on if a dialog is necessary here. we've never had a dialog when the user terminates a process using the keyboard shortcut. my gut reaction is that if we feel like the menuitem needs a dialog then the keyboard shortcut should as well. we warn when closing a tab about running process because of possible unintended consequences. but if a user is intentionally terminating a process, i'm not certain that it makes sense to ask if they're sure.",-1,-1,0,0.9329850673675536,0.6603543162345886,0.9695316553115844,-1.0,accept,majority_agreement
597167986,486,another issue i noticed was that if you terminal a process such as `htop` then the terminal is not cleared and behaves differently to a normal terminal in that (e.g.) scrolling on it injects characters. we probably want to keep any output of the process and subsequent input should (a) not overwrite the process output and (b) behave normally.,0,0,0,0.9546415209770204,0.96895033121109,0.9765793681144714,0.0,accept,unanimous_agreement
738134339,486,hi! are you still interested in working on this?,0,0,1,0.8583130240440369,0.670823335647583,0.8857946395874023,0.0,accept,majority_agreement
738137218,486,"re: having a dialog, i guess we can assume anyone running a process in the terminal probably knows what they are doing so probably need less hand holding that someone using a graphical app?",0,0,0,0.9761330485343932,0.9586462378501892,0.989697277545929,0.0,accept,unanimous_agreement
738302792,486,hi ! right now i can't work on this. maybe on 2 weeks i can look at it....,-1,-1,-1,0.4507309198379516,0.935753583908081,0.5776174068450928,-1.0,accept,unanimous_agreement
841387165,486,"converting to draft as there are outstanding issues, conflicts and no recent activity.",0,0,0,0.9590608477592468,0.9856953024864196,0.8448383808135986,0.0,accept,unanimous_agreement
1044378817,486,closing due to age and lack of activity,-1,0,0,0.6268876194953918,0.98160320520401,0.9037246704101562,0.0,accept,majority_agreement
299653401,87,"i still have to pull this and try it out, but from reading the comments and glancing through the code, i do have a thought: i'm unsure that disambiguation with `(1)`, `(2)`, etc. when the tabs are the exact same path is needed or wanted. if i duplicate a tab, i already have a spatial disambiguation of the tabs: their position on the tab bar. in this case, the location is actually identical, so i'd expect the labels to be identical. as soon as one of those tabs runs a command, we replace the title with with command run, so that helps track the state of the tab as well. the point of disambiguation is to prevent someone from thinking two _different_ directories are the same, not to make every tab globally unique.",0,0,0,0.9344069957733154,0.8674886226654053,0.9406633377075196,0.0,accept,unanimous_agreement
299653867,87,"ok, i can easily pull out that feature.",0,0,0,0.9855066537857056,0.9672320485115052,0.9939815402030944,0.0,accept,unanimous_agreement
299655881,87,"other than the `(1)` `(2)` thing, i think the behavior is an improvement. there are potentially some weird-ish edge cases, but i don't think they're blockers at all.",0,0,0,0.8670870661735535,0.9385072588920592,0.7806156277656555,0.0,accept,unanimous_agreement
299728870,87,i have changed the variable names as advised and made a slight improvement to the disambiguation function (removing an unnecessary parameter). i noticed a bug while testing but it turned out to be present in trunk. i'll raise an issue (if not already there),0,0,0,0.9814643263816832,0.9892956614494324,0.9658578634262084,0.0,accept,unanimous_agreement
2453508350,798,"this is pretty much this. my apologies - pretty much mentioned there was no official supported mean to toggle it back, and for once i thought it was easy enough to offer. i am quite new to all this, and not so sure about the lint - i only touched the one file. ![a link]",-1,-1,-1,0.9354295134544371,0.982135534286499,0.9920527935028076,-1.0,accept,unanimous_agreement
2453512106,798,"code looks good! to be picky, the unsafe dialog also now appears with ""doas"" in the command and (will) also work with dropped text so a more general description would be something like `show a warning dialog before pasting or dropping text that may be trying to gain administrative access or which contains multiple commands.` might be a bit too verbose though. thoughts?",1,1,1,0.977895975112915,0.9856699109077454,0.9862491488456726,1.0,accept,unanimous_agreement
2453514002,798,"valid nitpick. to be transparent, i went with the description from pantheon-tweaks, which expose the setting. would ""inserting"" work instead of ""pasting or dropping"" ? it isnt typed manually but ""inserted"" maybe instead of ""commands that may be trying to gain administrative access"" that would be ""administration commands"" ? since doas and sudo are used pretty much for administration - you dont really go anywhere in administration without. ""show a warning dialog when inserting administration commands or multiple commands at once""",0,0,-1,0.9810500741004944,0.9414745569229126,0.7710466384887695,0.0,accept,majority_agreement
2453516913,798,"""inserting"" was my first choice but i was worried that the reader might think the dialog would appear when entering administrative commands by typing as well. its probably ok together with translators note to make it clear that it only means pasting or dropping.",0,0,0,0.9048477411270142,0.8998175263404846,0.9575357437133788,0.0,accept,unanimous_agreement
2453518266,798,"i think it would be better to use ""paste"" than ""insert"" personally. a dnd operation could still be considered a ""paste"" but i think ""insert"" implies typing would also trigger it",0,0,0,0.9840396046638488,0.992096185684204,0.9850019812583924,0.0,accept,unanimous_agreement
2453518772,798,"""administrative commands"" could be good. i kinda like that! seems concise but clear",1,1,1,0.981758713722229,0.9898818135261536,0.9943244457244872,1.0,accept,unanimous_agreement
2453519103,798,"another possibility is to use the word ""privileged"".",0,0,0,0.9868576526641846,0.9920471906661988,0.9878407120704652,0.0,accept,unanimous_agreement
2454279133,798,my first pull request :') (sorry i know adding a toggle is the easiest thing in the world but i am proud),-1,-1,-1,0.6851256489753723,0.9925861954689026,0.9936810731887816,-1.0,accept,unanimous_agreement
1884751121,743,fixing ci ...,0,0,0,0.9581933617591858,0.8444365859031677,0.993572235107422,0.0,accept,unanimous_agreement
1891015848,743,"thanks for the detailed review. i have tried to address your comments. i have reduced the scope of this pr to not include path abbreviations. this will be addressed in a separate pr. if the behaviour is now as expected, please feel free to push a commit rearranging the code as you would like.",1,1,1,0.9281679391860962,0.9538684487342834,0.9403207302093506,1.0,accept,unanimous_agreement
1891024160,743,i have now pushed a possible fix for the relative path issue. after this commit both `io.elementary.terminal -w ../src` and `io.elementary.terminal --working-directory=../src` behave as expected.,0,0,0,0.987790822982788,0.9922295212745668,0.989809513092041,0.0,accept,unanimous_agreement
525828816,397,"-scott ok, thanks for the review - i'll not merge for now.",1,1,1,0.9060640335083008,0.9757660627365112,0.9277745485305786,1.0,accept,unanimous_agreement
554767447,397,-scott any chance of a re-review? :-),1,1,1,0.9745612144470216,0.991548240184784,0.9527994990348816,1.0,accept,unanimous_agreement
869456461,602,you do not seem to have fixed the tab label regression when no custom prompt?,0,0,0,0.9804091453552246,0.9868207573890686,0.9829261302947998,0.0,accept,unanimous_agreement
869857514,602,"i think i misunderstand you review. as i said before, the `window_title` is the same of the prompt because `.bashrc` set both the same by default, and i don't think it's a regression but what this pr do (use a xterm title if we have one). however, if it was about the label and title be the same, i can update the pr fixing that.",-1,0,0,0.5327264666557312,0.799202561378479,0.956630289554596,0.0,accept,majority_agreement
874269537,602,"this pr should only change the appearance of terminal sufficient only to fix the linked issue - that is the setting a custom window title from the command-line. it should not change the appearance in any other way. if you feel terminal behaves incorrectly in another way then you should raise another issue about that. you are right that terminal does not show tab labels the same way as e.g. mate terminal but that is, i think, by design.",0,0,0,0.951643705368042,0.9844367504119872,0.966925859451294,0.0,accept,unanimous_agreement
874294419,602,i did it this way because was how it worked before #584 when there was a title.,0,0,0,0.9736863970756532,0.992339849472046,0.9899773597717284,0.0,accept,unanimous_agreement
914465810,602,sorry for the delay in re-reviewing. i think this is now acceptable subject to resolution of the conflicts.,-1,-1,-1,0.9881834387779236,0.9917052984237672,0.9898058772087096,-1.0,accept,unanimous_agreement
914467239,602,note: i had to use `echo -ne '\033]2;this works\007'` to get the title to change - your issue did not use the `-e` flag - perhaps your shell is different?,0,0,0,0.9871025681495668,0.9922618865966796,0.994074285030365,0.0,accept,unanimous_agreement
914498924,602,"yeah, i'm using zsh and echo apply the escape characters automatically here, while bash needs the `-e` flag for that.",0,0,0,0.9874113202095032,0.9863878488540648,0.9891906976699828,0.0,accept,unanimous_agreement
614342287,504,"the last commit fixes an issue, where it was possible to lock the `cursor_blink_mode` to `off` when clicking very fast. this was because the `cursor_blink_mode` was restored in the button_release event. when two `button_press` events where processed in a row, the `previous_cursor_blink_mode` was set to `off`, which effectively locks the `cursor_blink_mode` to `off`. the solution is to make `previous_cursor_blink_mode` a local variable and restore it together with the `cursor_color`. another issue was that `gdk.threads_add_idle_full` does not wait for `feed_child`, so one has revert to a hard-coded 50ms second timeout. imo this is still a lesser ""evil""...",0,0,0,0.9854340553283693,0.9903028607368468,0.9886090755462646,0.0,accept,unanimous_agreement
614519031,504,"ok, i'll see if i can get it to work otherwise will merge as is. i am beginning to wonder whether the whole pr is going to get too hacky to get approved anyway :-( . a vte terminal is not designed to be used like a text editor i guess.",-1,-1,-1,0.989703357219696,0.990954339504242,0.9958653450012208,-1.0,accept,unanimous_agreement
614544284,504,"but is it really that hacky? **challenge:** 1. get the clicked cell in a reliable way. 2. move the cursor by *delta* cells. **implementation:** 1. the `get_cell_clicked` uses the `vadjustment` method of the `gtk.scrollable` to determine the clicked cell. i see no hack there. 2. to my understanding the escape sequences are the official ""api"" to move the cursor in a terminal. so i would argue that this is also not a hack, it's just a weird ""api"". the only thing that is a bit hacky is the code that avoids the flickering of the cursor. but the flickering is not specific to the click implementation. the flickering is always there, it is just more visible because the cursor is moved multiple positions at once. it for example also occurs when pressing the home or end keys to move the cursor. one could simply leave this code out and accept the flickering. but as there is a reliable way to avoid it, i think it is reasonable to keep it.",-1,-1,-1,0.9682088494300842,0.65504390001297,0.6708561778068542,-1.0,accept,unanimous_agreement
614546407,504,"i think the last outstanding problem is, that the current way of getting the `command_start_row/col` values (which are necessary to ignore clicks on output) is not super reliable. but this is also a general problem and not specific to this pr...",0,0,0,0.8293607831001282,0.7386310696601868,0.9627456665039062,0.0,accept,unanimous_agreement
614560009,504,"i removed the `idle.add`, which to my understanding should no longer be necessary, as the cursor is not moved via `key_press_events` anymore. revert this commit if i am wrong.",0,0,0,0.8900595903396606,0.9857931733131408,0.9922532439231871,0.0,accept,unanimous_agreement
614568263,504,"the last commit uses the `allow_hyperlink` to ignore clicks when window was not focused. it think this is necessary, because otherwise the cursor gets moved if one copies a command from somewhere and then focuses the terminal. maybe the variable should be renamed to `is_focused` or something if we also use it here.",0,0,0,0.9881269335746764,0.9885851740837096,0.9913963675498962,0.0,accept,unanimous_agreement
614571840,504,"well, its up to reviewers like tintou/danrabbit to decide that ultimately (referring to #386). once we are happy with it we should request a review from them.",0,0,0,0.799867570400238,0.98640114068985,0.9879369139671326,0.0,accept,unanimous_agreement
614574710,504,thanks for all your work on this anyway!,1,1,1,0.967791736125946,0.9673318266868592,0.9739556312561036,1.0,accept,unanimous_agreement
753030033,556,"the problem is that i fear that people (like me) would permanently disable the unsafepastedialog for the `sudo ...` paste, but then the warning for the multiline pastes would be disabled too, which may be unwanted. i think in the most cases you want to paste your sudo command, but not a multiline command, so it makes sense to seperate it. regarding the warning message: since a newline on the end alone would lead to an execution (not necessarily of multiple commands), what do you think of using **the pasted text contains newline characters and may be unintentionally executed** instead? **edit:** i noticed it is only the title of the dialog, do you think we should change that at all from **multiline paste blocked**? the text already gives an explanation. however, you're right, it would be more consistent with the unsafepastedialog.",-1,0,-1,0.9455490708351136,0.7290730476379395,0.8368542790412903,-1.0,accept,majority_agreement
753581426,556,i did now commit your suggestion regarding the text.,0,0,0,0.9843239784240724,0.971213698387146,0.9943020343780518,0.0,accept,unanimous_agreement
855282057,556,failing lint test - install io.elementary.vala-lint from [a link] and run `io.elementary.vala-lint -d ` to locate the problems.,0,0,0,0.9605513215065002,0.990920901298523,0.9572775959968568,0.0,accept,unanimous_agreement
855283149,556,"you're free to take over this pr, unfortunately it is unlikely that i have time to fix that this year.",-1,0,0,0.8804675340652466,0.8364812731742859,0.5297622084617615,0.0,accept,majority_agreement
855302872,556,"ok, thanks for letting us know. i'll try and finish it off sometime. thanks for the contribution. :smile:",1,1,1,0.9857709407806396,0.9949914813041688,0.9970681071281432,1.0,accept,unanimous_agreement
858972743,556,"i've created a pr based on this branch at [a link] that does the same thing while keeping them under one setting. i can see a small reason to keep them separate, but i think the intent was always to group various ""unsafe"" pastes under one setting—especially if we want to add a gui setting for it later.",0,0,0,0.965546488761902,0.98691987991333,0.988052487373352,0.0,accept,unanimous_agreement
1884600726,753,"thanks for the suggestion - can it be left for another pr? the current version of epiphay in 7.1 only has a ""maximise"" button in the headerbar. it does have a ""fullscreen""button in the appmenu though.",1,1,1,0.7128992676734924,0.8177095055580139,0.9209432005882264,1.0,accept,unanimous_agreement
1890463808,753,"you already implemented my suggestion. a fullscreen button in the menu would be good indeed, but that can be left to another pr.",0,0,0,0.6456249356269836,0.7979949116706848,0.9427698850631714,0.0,accept,unanimous_agreement
396074324,266,"interesting. does this mean that ctrl+c stops the foreground process if there is one, and copies if there is none? how does this interact with ctrl+c used to clear the current line in bash?",0,0,0,0.7827687859535217,0.9370790719985962,0.6473414897918701,0.0,accept,unanimous_agreement
396074452,266,but it will break the workflow for anyone who doesn’t use vim. the mental model went from * use ctrl-c/v top copy-paste to * ctrl-c/v only works in the shell which people will translate into ctrl-c/v works sometimes,0,0,0,0.9192215204238892,0.6488999724388123,0.5476024746894836,0.0,accept,unanimous_agreement
396076363,266,i suspected this might be too simplistic. maybe if terminalwindow processes keystrokes *after* the foreground process? then if the foreground process does not consume it will work normally. a new setting should be avoided if possible.,0,0,0,0.881458044052124,0.8565874695777893,0.9477394819259644,0.0,accept,unanimous_agreement
396198404,266,"it seems reasonable to me that when a foreground process is running the user expects keystrokes to interact with that, not the shell, and behave accordingly. whether ctrl+c copies or not will depend on what the process if and whether there is anything selected. in the terminal (without a foreground process), ctrl+c will copy if there is a selection, otherwise it will be passed the shell and (in the case of bash) clear the line (and end any foreground process). again, it seems reasonable that if there is a selection, the user expects keystrokes to interact with that.",0,0,0,0.9739294052124025,0.9908850789070128,0.9858946800231934,0.0,accept,unanimous_agreement
396207585,266,"any actual examples of where a foreground process is running in the shell (not a launched gui) and the user would expect keystrokes to be handled by terminal would be useful. if terminal processes keystrokes *after* the shell then various behaviours such as +[1-8] to change tab no longer work, (because the shell processes them) so i do not think that is a viable solution. if it helps, i can make this pr apply *only* to ` +v` (as mentioned in the issue description).",0,0,0,0.9216150045394896,0.989812195301056,0.9848899245262146,0.0,accept,unanimous_agreement
396228628,266,"sadly, this behavior is still immensely confusing because it's easy to select some text in a scrolling terminal and forget about it. no selected text is visible (because not all of shell log fits on the screen), but ctrl+c still inexplicably refuses to clear the line.",-1,-1,-1,0.974352478981018,0.9914427399635316,0.9607277512550354,-1.0,accept,unanimous_agreement
396230680,266,"actually no, it doesn't. there are cases when i want to paste into foreground process - mostly text input promts (ssh key generation and lots of others), text editors such as nano, etc.",0,0,0,0.976292610168457,0.9526023864746094,0.9879764914512634,0.0,accept,unanimous_agreement
396275218,266,"note that this pr does not suppress` +v` - it is passed onto the foreground process. there if the foreground process supports pasting with this key combination it should still work. it is questionable whether terminal should interfere with the ui of other processes although i can see the consistency argument. if the foreground process/shell swallows ` +v` it will not be possible for terminal to act on it afterwards anyway. is vim the only example of a foreground process that uses` +v` for something other than paste? if so i doubt it is justified exposing the natural-paste setting in the ui. i suppose, theoretically terminal could check whether the foreground process is vim and pass on ` -v` only in that case - but that is unlikely to be approved.",0,0,0,0.9802812933921814,0.9689620733261108,0.9842894673347472,0.0,accept,unanimous_agreement
396277823,266,i have confirmed that `nano` at least swallows ` +v` so i am coming to the conclusion there is no solution that will please everyone.,0,0,0,0.8116016983985901,0.9625358581542968,0.9012242555618286,0.0,accept,unanimous_agreement
448706082,266,there does not seem to be any clear conclusion regarding this pr so i will close it for now. feel free to reopen - i will not delete the branch for a while.,0,0,0,0.6978580355644226,0.946834683418274,0.9751063585281372,0.0,accept,unanimous_agreement
448729721,266,"i feel the only proper solution is to copy text on selecting it (and clearly communicating that the text was copied), dropping the selection after copying, and not special-casing ctrl+c key combination.",0,0,0,0.974314033985138,0.9644731879234314,0.9799005389213562,0.0,accept,unanimous_agreement
452623377,266,"i feel that this is the best solution even though `nano` swallows ` +v`. `nano`, `vim` and terminals have been around for years and they exist before the ` +v` convention for pasting. i understand that people not familiar with terminals would enjoy the ability to intuitively copy and paste text but i would argue that they would definitely not use `vim` or even `nano`. furthermore, terminals in windows definitely do not use the ` +c` ` +v` shortcuts for copying and pasting. i think cygwin uses ` + ` and who know what cmd uses (i still right click the application menu and go to edit > paste). finally, the gnome terminal uses ` + +v` for pasting and it works nicely overall. never came across a situation where it was a problem. you can even use it inside vim instead of configuring it to read data from the clipboard and using the cumbersome `""+p`.",1,0,0,0.5706338286399841,0.8332569003105164,0.7934790253639221,0.0,accept,majority_agreement
851993424,590,is it save to remove these lines? as far as i understand [a link]. [a link],0,0,0,0.9879064559936525,0.9881035685539246,0.9955500364303588,0.0,accept,unanimous_agreement
852020449,590,i would stick to the stated scope of the pr tbh if you want a quick merge.,0,0,0,0.9864237904548644,0.9918360114097596,0.9788572788238524,0.0,accept,unanimous_agreement
852021558,590,have you looked into replacing the `spawn_sync ()` function? (see my comment on slack). i couldn't get `spawn_async ()` to work - looks like the `.vapi` is wrong.,0,0,0,0.5976512432098389,0.9864978790283204,0.9899903535842896,0.0,accept,unanimous_agreement
852041331,590,"the `gtk_settings.gtk_menu_bar_accel` also throws a deprecation warning, therefore i considered it to be the same scope.",0,0,0,0.987988829612732,0.9915809035301208,0.9940844178199768,0.0,accept,unanimous_agreement
852044412,590,"tbh i intentionally left that out because i haven't used async in vala before. it works a bit different than in python, js or rust, the languages i happen to know :d i am only in the community slack. i suppose there is another one, but i am not part of it. so i couldn't see you comment.",0,-1,1,0.5833635330200195,0.5490875840187073,0.98768150806427,,review,no_majority_disagreement
852316575,590,i would be happy to send you an invite to the contributor slack. if you want to dm me on the community slack or have an email address i can send an invite link to. i can't seem to find you on the community slack,1,1,1,0.9105600118637084,0.9206419587135316,0.9644199013710022,1.0,accept,unanimous_agreement
2450053976,794,"the issue was marked critical, but the pr seems out of date - any eta for merging ?",0,0,0,0.9759474396705629,0.9796644449234008,0.9802830815315248,0.0,accept,unanimous_agreement
2451635622,794,"i marked it critical because the issue has theoretical security implications, but its not a new issue. i guess folks are focused on getting os8 released atm.",0,0,0,0.906240701675415,0.8465173840522766,0.952875792980194,0.0,accept,unanimous_agreement
2453495670,794,"oops! thanks for spotting that. now fixed. it occurred to me that if unsafe paste alert is turned off in the dialog, there is no way of turning it back on through the ui. am i right? if so that needs fixing but in another pr.",1,1,1,0.9567679166793824,0.9752671122550964,0.9737386107444764,1.0,accept,unanimous_agreement
2453505309,794,"i noticed that this pr was pasting the stripped text into the terminal whereas in master, the text was refetched from the clipboard. now the stripped text is only used for the dialog message as before.",0,0,0,0.9847601056098938,0.9731955528259276,0.9879250526428224,0.0,accept,unanimous_agreement
2453511575,794,"following your comment i did a pr for that. pantheon-tweaks always offered that option, im not sure why there was no toggle-back in first instance.",0,0,0,0.7443380951881409,0.9668132066726683,0.9653338193893432,0.0,accept,unanimous_agreement
516600939,390,this makes the text much more readable. has a decision been reached about this?,0,0,0,0.9668447375297546,0.9749924540519714,0.9868547916412354,0.0,accept,unanimous_agreement
535776934,390,"now that the neutral gtk style has been shipping for a while, it'd be great to get the terminal to match. right now it's off and it feels weird imho.",-1,-1,-1,0.9809268712997437,0.9902907013893129,0.98587566614151,-1.0,accept,unanimous_agreement
538614398,390,"since we've merged the stylesheet changes and this makes terminal match, i think we're good. :smile:",1,1,1,0.9883384108543396,0.9921042919158936,0.9961963891983032,1.0,accept,unanimous_agreement
456621367,349,"i'm also -1 on removing the `remove-tabs` setting.... seems like it's something that would be useful and not behind the privacy settings. maybe keep the same behavior that was before, and use the privacy setting as an override :)",1,1,1,0.6274982690811157,0.9713689088821412,0.9813559651374816,1.0,accept,unanimous_agreement
456659610,349,maybe using this could replace it :) [a link],1,1,1,0.941793978214264,0.995043158531189,0.8671665787696838,1.0,accept,unanimous_agreement
456764381,349,"-scott : thanks for the helpful review :-) it would make sense to use the granite function so i'll block this till that is merged. i take your point that our own ""remember-tabs"" setting could still be useful to stop this behaviour even if the privacy setting allowed it.",1,1,1,0.9920876622200012,0.9959251880645752,0.9963239431381226,1.0,accept,unanimous_agreement
458214138,349,need to wait for latest granite to be used by travis for this to pass ci.,0,0,0,0.9352359175682068,0.9855556488037108,0.9896376132965088,0.0,accept,unanimous_agreement
428055839,299,"i removed the changes to the po files. i'm not sure why they made the ci fail, though.",0,0,0,0.6126192212104797,0.7157707810401917,0.983746349811554,0.0,accept,unanimous_agreement
428226195,299,"it looks like ci is failing in master right now, so it's not your branch that's doing it.",-1,0,0,0.8098198771476746,0.9551958441734314,0.9676121473312378,0.0,accept,majority_agreement
428245916,299,"you're very welcome. i hope i can get involved even more, i really enjoy using elementaryos and hope it really takes off (number-of-happy-users-wise)!",1,1,1,0.9894110560417176,0.9958101511001588,0.9968206882476808,1.0,accept,unanimous_agreement
505524419,382,"this works as expected from the code - thanks. there is a question over where the menu should pop up; * at one corner (as in this pr) * at the pointer (as in e.g. mate terminal or files) * at the cursor (as in code) * somewhere else popping up at the cursor seems most logical for a text based app, although a little harder to achieve. i'll flag this for comment from /ux",1,1,1,0.5350320935249329,0.7337732315063477,0.980134904384613,1.0,accept,unanimous_agreement
505532760,382,"i agree text-cursor seems the most ideal, but i'm also not that opposed to on the mouse pointer or corner of the app.",0,0,0,0.8835977911949158,0.8739205002784729,0.9365738034248352,0.0,accept,unanimous_agreement
505592119,382,further investigation indicates that this is only a problem if you popup the meny at scale_factor = 1 and then change the scale_factor to 2 using the interactive debugger without restarting the program. so it may not be a serious problem in real life.,0,0,0,0.9703302383422852,0.9866902828216552,0.9844565987586976,0.0,accept,unanimous_agreement
505593373,382,here is a way to pop the menu up at the cursor: [code block] ```,0,0,0,0.9864152073860168,0.9901913404464722,0.995374858379364,0.0,accept,unanimous_agreement
505717219,382,"i made the change you have suggested. i was originally worried that putting it on the terminal carrot would make the menu not work when you scroll the window, but it just causes the terminal to scroll to the carrot which is good. one issue i did pick up is that the positioning stops working properly when the ""clear"" command is used, the menu is just placed at the bottom of the window. probably not a big issue though since it is still tied to the window.",0,0,1,0.7802128195762634,0.7820088863372803,0.8975421786308289,0.0,accept,majority_agreement
505953763,382,the positioning is also off if the menu key is pressed while a child process is running (e.g. man). i am not sure whether the context menu should be shown at all in this situation (although right-click still shows it).,0,0,0,0.930044412612915,0.9597347974777222,0.9844871163368224,0.0,accept,unanimous_agreement
505960059,382,"i think the problem with the `clear` command may be an upstream issue with vte-2.91 library. the row number returned by `get_cursor_position ()` is not updated even thought the cursor clearly moves. even after typing some more characters the result is not updated. if this is the case, then the best we can do is make sure the menu is not displayed outside the terminal window. on further investigation it is not really an upstream issue - the clear command just scrolls the window and the row position includes lines scrolled off the top of the screen.",0,0,0,0.9802832007408142,0.9801194071769714,0.9662947058677672,0.0,accept,unanimous_agreement
505977508,382,you can fix the `clear` issue like this: [code block],0,0,0,0.9885990619659424,0.9912012815475464,0.9952563643455504,0.0,accept,unanimous_agreement
505979001,382,this also fixes the child process issue except that if the cursor is at the bottom of the screen then the menu does not flip or slide to keep within the window. however that is also an issue in master so need not be fixed here.,0,0,0,0.987929344177246,0.9895971417427064,0.9936249256134032,0.0,accept,unanimous_agreement
563348975,431,i haven't tested this branch yet but i have concerns that it might break the copy paste when space actually matters (let's say editing something with nano) so i don't think that it's worth the cost if that's true.,-1,0,0,0.5791128873825073,0.9374352097511292,0.8774179816246033,0.0,accept,majority_agreement
696741677,431,"i would suggest at least reverting this to ""draft"" as there are some possible problems.",0,0,0,0.9776130318641664,0.9778413772583008,0.9568080902099608,0.0,accept,unanimous_agreement
1526050861,699,this seems like a good idea especially as `mainwindow.vala` is larger than i would like. could you fix the conflicts please?,1,0,1,0.8106045126914978,0.5141881704330444,0.9747214913368224,1.0,accept,majority_agreement
1606231007,699,", sorry for the delay in rebasing this, should be good to review. don't know what caused the ci error after the rebase, but with the `--print-errorlogs` option, it should be more easy to know what test case failed in the future.",-1,-1,-1,0.9857871532440186,0.9845157861709596,0.9889599084854126,-1.0,accept,unanimous_agreement
1607841385,699,despite the coding technicalities there do not seem to be any regressions in operation.,0,0,0,0.9793274998664856,0.9666465520858764,0.9814560413360596,0.0,accept,unanimous_agreement
1645457275,699,another regression with this is that the font scale is not set individually on each tab.,0,0,0,0.9756014943122864,0.9882835149765016,0.8891158699989319,0.0,accept,unanimous_agreement
1645771614,699,"i'm tempted to revert the actiongroup change for now, the widget won't be as self-contained as i would like, but would still make this a good start in reducing the mainwindow scope.",-1,-1,0,0.7192537188529968,0.799204409122467,0.9326096177101136,-1.0,accept,majority_agreement
1645776546,699,yes two smaller prs would be easier to review.,0,0,0,0.9794937968254088,0.9877279996871948,0.9866260290145874,0.0,accept,unanimous_agreement
965082747,638,"is it necessary to add another dependency (especially x11 specific)? is using ""get_server_time"" essential?",0,0,0,0.9853591918945312,0.9949470162391664,0.9935910701751708,0.0,accept,unanimous_agreement
967745300,638,unfortunately it seems `get_server_time` is essential. apparently `present_with_time` needs a timestamp to solve focus stealing and the only timestamp i passed to it that worked was this one. using regular datetime functions did not work and i found an answer in so that linked to this function.,-1,0,-1,0.6983473300933838,0.7911421060562134,0.5605927109718323,-1.0,accept,majority_agreement
981555688,638,might be worth delaying trying to fix this until [a link] is fixed. it should not be necessary to add that extra dependency.,0,0,0,0.9516791105270386,0.9858761429786682,0.9830827713012696,0.0,accept,unanimous_agreement
2322984561,638,need to find a solution that works on wayland.,0,0,0,0.961602509021759,0.990198254585266,0.9745746850967408,0.0,accept,unanimous_agreement
2326415689,638,"i think a dependency on `gdk-wayland-3.0` may be required to make it work under wayland. this should not be necessary under gtk4, so maybe better to wait for the gtk4 port to land to fix wayland? if so, maybe this can be merged so that it at least works on os7.1 and in ""compatability mode"".",0,0,0,0.9878413081169128,0.9937856197357178,0.9885807633399964,0.0,accept,unanimous_agreement
2331816871,638,"i think it should be fine for what the notification sever can do right now. we really need to have the gtk notification interface implemented there to have the true timestamp of the event, but that can be done later.",0,0,0,0.975596845149994,0.968017578125,0.8945654630661011,0.0,accept,unanimous_agreement
312473479,119,good point about the multi screen thing. this commit [a link] should address it by changing the calls of `gdk.screen.width ()` (which gets the default screen dimensions) to call `get_screen ().get_height ()` since this should return the screen on which the current window resides. how does that look? note the existing code here (for centering the window) might have multi screen issue for the same code usage: [a link],1,1,1,0.7500292658805847,0.7676858305931091,0.8913647532463074,1.0,accept,unanimous_agreement
312474682,119,that sounds better! i'll have to take a look on a hidpi display and a few different resolutions to make sure this works well.,1,1,1,0.952009916305542,0.9732266068458556,0.9518064260482788,1.0,accept,unanimous_agreement
312476513,119,"ok this branch is now ""ready for review"" , there's a known centering problem for multi display filed as a separate issue #121 which i'll try to work on shortly, if i can set up multi display for myself.",0,0,0,0.9857749938964844,0.967819094657898,0.9449030160903932,0.0,accept,unanimous_agreement
312478957,119,"i was able to get a multi monitor setup by connecting my tv and the latest commit [a link] should also address issue #121 so please test and let me know. it is working for me in my basic tests (opening first run, resizing and moving, then reopening) for hidpi, lodpi, single and dual monitor.",0,0,0,0.8391749858856201,0.7364173531532288,0.6214585304260254,0.0,accept,unanimous_agreement
313580614,119,"thank you . fyi i also tested on 3 computers with hidpi, multi monitor and 1080p and 1280x800 displays and all seem to look good to me :-) looking forward to the code review.",1,1,1,0.9924881458282472,0.9960994720458984,0.9967148303985596,1.0,accept,unanimous_agreement
359171559,196,"ok, fair enough.",0,1,0,0.9432280659675598,0.6251494288444519,0.9501385688781738,0.0,accept,majority_agreement
552118492,423,"while the pr fixes it if you don't change hidden settings, it still won't work if you select a custom font. though unlike code, terminal doesn't implement zooming via that preference. so, i wonder if this font should be special-cased to be applied even if a custom font is used.",0,0,0,0.929523468017578,0.8598264455795288,0.9411858916282654,0.0,accept,unanimous_agreement
554770222,423,"do we need to have a separate font setting for terminal, especially as it is not exposed in the ui? otherwise we would have to hard-code a check the specific name of the system monospace font against that used to conceal text.",0,0,0,0.9839977025985718,0.9847462177276612,0.9924991726875304,0.0,accept,unanimous_agreement
554776812,423,"rebased, also moved system gsettings creation into `application` to match the existing ones.",0,0,0,0.9887484312057496,0.9945656061172484,0.9950610995292664,0.0,accept,unanimous_agreement
554776896,423,"oh wait, actually pushed the correct one now.",0,0,0,0.8882486820220947,0.8859664797782898,0.9508475065231324,0.0,accept,unanimous_agreement
555219201,423,"i'm not sure i 100% understand the question, but the system monospace font is also used in code, for example, so i don't think a terminal-specific setting makes sense necessarily",0,0,-1,0.9279326796531676,0.7035809755325317,0.4985562562942505,0.0,accept,majority_agreement
555240211,423,"wel, code has a setting. and it's even exposed in the ui and is also used for zooming. terminal has a setting too, but it's only in gsettings. if you change that setting, conceal text won't work even with this fix, because, well, you explicitly requested a different font. so maybe that setting can just be removed? otherwise terminal will have to hardcode the redacted font to use it even if a custom font is selected.",0,0,0,0.9828708171844482,0.9805028438568116,0.9795429706573486,0.0,accept,unanimous_agreement
555442596,423,"ok, so the setting `io.elementary.terminal.settings.font` could be removed and the system monospace font always used? otherwise, for consistency we should expose the custom font setting in the ui, like code, and hack around the redacted font issue.",0,0,0,0.9891706109046936,0.9955081939697266,0.9914690852165222,0.0,accept,unanimous_agreement
567635162,423,added a line to appdata changelog.,0,0,0,0.9874261617660522,0.9916187524795532,0.9925644993782043,0.0,accept,unanimous_agreement
737847910,477,"on way of testing this is to create this script in a directory other than your home directory: [code block] navigate to this script in files and choose ""open in ... terminal"" from the context menu. with master the script runs with the home directory as the pwd. with this pr the script runs with the directory where the script is located as the pwd.",0,0,0,0.985262393951416,0.9917281866073608,0.994115114212036,0.0,accept,unanimous_agreement
738882651,477,i believe the message `[glib] setenv()/putenv() are not thread-safe and should not be used after threads are created` that is printed before and after any output from the command is due to an upstream bug.,0,0,0,0.9546294808387756,0.9824392795562744,0.9862124919891356,0.0,accept,unanimous_agreement
1044372427,477,closing due to age. a new pr may be submitted later.,0,0,0,0.9827070832252502,0.9823739528656006,0.9752410650253296,0.0,accept,unanimous_agreement
844163542,578,best to wait for the warning dialog to be merged before merging this as it is easier to accidentally trigger a shortcut.,0,0,0,0.9697754383087158,0.9873635172843932,0.9806021451950072,0.0,accept,unanimous_agreement
844271932,578,what do you feel about supporting `f5` as a shortcut for this (cf files and epiphany)?,0,0,0,0.9817424416542052,0.9919999837875366,0.9844571948051452,0.0,accept,unanimous_agreement
844303268,578,"sure, if the symmetry with files and epiphany is intended, adding f5 as alternative shortcut seams reasonable. i included it with the last commit. but this should probably not up to me to decide that :d i still find the symmetry somewhat misleading, because files and epiphany update/reload a given resource, while this action resets/restarts the shell. on concern is also that this action/shortcut could be misused to ""just clear"" the terminal screen.",0,0,1,0.8169980049133301,0.69614177942276,0.7209101319313049,0.0,accept,majority_agreement
844309513,578,"yes, i see what you are saying - that is why i was unsure about using ""reload"" for the menuitem :thinking:",0,0,0,0.9067350029945374,0.4687978029251098,0.5798706412315369,0.0,accept,unanimous_agreement
844312170,578,"the current shortcut ` r` is very similar to ` r` used in files for the ""refresh"" action so there could still be confusion.",0,0,0,0.9871371984481812,0.9851853847503662,0.9870920181274414,0.0,accept,unanimous_agreement
844318485,578,what about ` d` - this is used to exit the current shell anyway except it does not work natively when a process is running.,0,0,0,0.985451877117157,0.97584867477417,0.9922308325767516,0.0,accept,unanimous_agreement
844330658,578,"as far as i understand bash interprets ctrl d as the forth unicode character end of transmission (because **d** is the forth letter in the alphabet). i am not sure if this counts as a ""real"" shortcut. and in other command line programs like ""cat"" or ""netcat"" it can also be used to end the current input, but it does not exit the process. so i think ctrl d cannot be thought of as a universal exit shortcut. in my opinion the shift ctrl r and f5 shortcuts are fine, as it is conceptually somewhat similarity with reloading the browser or refreshing files. imo only the word ""reload"" is misleading here. but this is of course up to the /ux to decide that.",0,0,0,0.9282107353210448,0.97102552652359,0.9297665953636168,0.0,accept,unanimous_agreement
844358798,578,"ok, let's wait for their input.",0,0,0,0.9815137982368468,0.9677693247795104,0.9860324263572692,0.0,accept,unanimous_agreement
880911114,578,this looks like a 0 diff since we merged in the other branch with accel labels that included this,0,0,0,0.9855136275291444,0.9882574677467346,0.9916620254516602,0.0,accept,unanimous_agreement
953975801,633,i've added a check and made values hex based as to fall inline with other stylesheets.,0,0,0,0.9879735708236694,0.9914042949676514,0.9943195581436156,0.0,accept,unanimous_agreement
954908015,633,"thank you for the review. i need to familiarise myself a little bit better with the eos coding style, i've only just found the relevant documentation online for it.",1,1,1,0.8783270120620728,0.9366405606269836,0.9714728593826294,1.0,accept,unanimous_agreement
958897580,633,the logic here is still faulty and the opacity does not change until the settings are changed. would you like me to push a fix?,0,-1,0,0.9120708107948304,0.5043699741363525,0.7966435551643372,0.0,accept,majority_agreement
1095225332,633,looks like this pr would not be necessary if #552 were progressed.,0,0,0,0.9733768105506896,0.9917793869972228,0.9822977781295776,0.0,accept,unanimous_agreement
1178010462,633,hasn't had an update in a long time and now conflicts. superseded by [a link],0,0,0,0.856086790561676,0.9836705923080444,0.8982331156730652,0.0,accept,unanimous_agreement
1114184156,658,"terminal can already be closed with `alt + f4`, `ctrl + d` and `shift + ctrl + w`. see [a link] however, i can see that for consistency with `gnome-terminal` there is a case for adding another shortcut.",0,0,0,0.9890673756599426,0.99216228723526,0.993603765964508,0.0,accept,unanimous_agreement
1114185557,658,i think you need to check for ongoing child processes and also to save the app state before closing. see handler for the delete event.,0,0,0,0.9859547019004822,0.9895923137664796,0.9909845590591432,0.0,accept,unanimous_agreement
1114720334,658,"fixed your comments, thank you for remarks. ctrl + shift + w and ctrl + d close only one tab. this shortcut allows to close all tabs.",1,1,1,0.8518026471138,0.7361242175102234,0.9747788906097412,1.0,accept,unanimous_agreement
1115091052,658,"ah yes, sorry - i only had one tab open when i tried those shortcuts so the window closed as well.",-1,-1,-1,0.9858689308166504,0.989843487739563,0.9664629101753236,-1.0,accept,unanimous_agreement
1115227874,658,i have fixed a small lint error so that ci passes. you can check for lint locally by installing `vala-lint` from [a link],0,0,0,0.9870670437812804,0.9941447377204896,0.9781342148780824,0.0,accept,unanimous_agreement
1435734917,702,"i do not pretend to understand every aspect of this pr but it looks good and the test framework is impressive. however, when i install and run it from a different terminal app (i've tried xterm and blackbox) using no parameters, i get an immediate crash. the backtrace is : [code block]",1,1,1,0.914208173751831,0.532341718673706,0.938719928264618,1.0,accept,unanimous_agreement
1435735766,702,putting a null check in `\src\application.vala` line 120 stops the crash at least.,0,0,0,0.9791074395179749,0.9923235177993774,0.988879919052124,0.0,accept,unanimous_agreement
1435739827,702,"other observations so far when launching from `gnome-terminal` after compiling in the null check to stop crash: * using the `-h` works as expected and does not launch `io.elementary.terminal`. * using the `-v` option in a different terminal app opens `io.elementary.terminal` as well as returning the version . this does not happen with master branch. moreover, a new tab is opened at the current directory in addition to restoring saved tabs. * using `-n` and `-t` works as master. see issue `#498` which persists * using `-n` and `-t` (when an instance of `io.elementary.terminal` already running) works as master * using `-w` works as master. also restores saves tabs * using `-w` in combination with `-n` or `-t` works as master.",0,0,0,0.9851797819137572,0.9941826462745668,0.9800334572792052,0.0,accept,unanimous_agreement
1435743700,702,"* using`-e` flag works the same as in master, additional arguments ignored unless preceded by further flags * using `--execute=` flag works if there is no space after `=`. if there is a space then the app opens but no tab is created and no error message given. this differs from master, which gives a warning about spaces both in the launching terminal and in an additional tab in the launched terminal.",0,0,0,0.98563551902771,0.9915470480918884,0.9911311268806458,0.0,accept,unanimous_agreement
1435751745,702,as far as tested so far the `-x` flag works the same as master. further testing will be done later.,0,0,0,0.9880384206771852,0.9935922026634216,0.9915253520011902,0.0,accept,unanimous_agreement
1435758943,702,"the last commits should fix opening the terminal without arguments and the -v argument not returning. i would like to add test cases for them too, but i couldn't find a way to do that right now. about #498, it's out of scope for this pr. the issue is that the restoration code will create a tab in the home directory if no tab is to be restored. i'm working in cleanup this code and fix it in another branch. the new code ignores `-e` and `-x` if they are a empty line arguments. i don't really think crating a new tab with a warning is the best way to warn the user about it, we could either print a warning and return while in the local handling, or show a error dialog/notification if empty lines was sent to the primary instance.",0,0,0,0.5123093128204346,0.8972296118736267,0.9810550212860109,0.0,accept,unanimous_agreement
1436024814,702,"that's fine, i wasn't expecting it to be fixed in this pr. i agree that creating a new tab is not necessary. either a printed warning or a notification depending on means of calling would be good.",0,0,1,0.6746662259101868,0.8692566156387329,0.598038911819458,0.0,accept,majority_agreement
1436027587,702,"while `io.elementary.terminal -w ~/music` works, `io.elementary.terminal --working-directory=~/music` does not. however the same happens in master. `io.elementary.terminal --working-directory=/home/ /music` does work.",0,0,0,0.9846038222312928,0.9933264255523682,0.9936339855194092,0.0,accept,unanimous_agreement
1436031582,702,there is a slight difference between master and pr regarding the `-x` flag. running `io.elementary.terminal -x ls` from a directory other the home directory results in a new tab containing a listing of the current directory with this pr but with master it results in a listing of the home directory. i think the behaviour of this pr is more correct.,0,0,0,0.9837223887443542,0.9853591918945312,0.9855459928512572,0.0,accept,unanimous_agreement
2569160048,836,nice use of `git grep` - i was not familiar with that.,0,1,1,0.6511421203613281,0.8130312561988831,0.9495782852172852,1.0,accept,majority_agreement
395981547,263,does this still allow terminal applications that need the escape key (like vim) to function?,0,0,0,0.9863283038139344,0.9927453398704528,0.991450846195221,0.0,accept,unanimous_agreement
395981971,263,"apologies, that should have been something i could have tested myself. i can confirm that this pretty much breaks vim (making it even harder to exit :stuck_out_tongue: ) and presumably anything else that needs the escape key.",-1,0,-1,0.9547247886657716,0.9622660279273988,0.974944531917572,-1.0,accept,majority_agreement
395982226,263,"ok, thanks - i should have thought of that - i thought it was too easy!. i'll see if it can be fixed.",1,1,1,0.9827286601066588,0.9852091670036316,0.9893277287483216,1.0,accept,unanimous_agreement
395986722,263,i don't think audible feedback is necessary in this case,0,0,0,0.9615501761436462,0.8502568006515503,0.983234167098999,0.0,accept,unanimous_agreement
458481691,263,/ux what is the ruling on whether an audible feedback is needed when a key press is ignored?,0,0,0,0.9834923148155212,0.986234962940216,0.9881677031517028,0.0,accept,unanimous_agreement
458483408,263,"i guess that in any case it should honor the ""event sounds"" setting.",0,0,0,0.9854224920272828,0.983601987361908,0.9839091897010804,0.0,accept,unanimous_agreement
458630966,263,"we don't have strong conventions/written rules here as far as i know. i do think any time a keypress is ignored when it would normally perform some action it should `gdk.beep ()`, and that does respect the event sounds setting automatically.",0,0,0,0.956404745578766,0.9827125072479248,0.9837738275527954,0.0,accept,unanimous_agreement
498752124,263,withdrawing as no consensus as to whether this is correct approach after nearly a year.,0,0,0,0.582832396030426,0.9574247598648072,0.7993059754371643,0.0,accept,unanimous_agreement
428691669,262,"this seems to work as expected ux-wise, and is an awesome feature! i think it's fine that there's not a confirmation that it was copied, as copying doesn't usually show any sort of confirmation. same with scrolling to the top and not highlighting the selection: i think this behavior is fine. assuming the command was on one line should _probably_ be fixed before this is merged, though.",1,1,1,0.9857638478279114,0.9920862317085266,0.9964975714683532,1.0,accept,unanimous_agreement
439509645,262,"oops - i forgot the request to fix the multiline command limitation - feel free to revert if desired. i'll have a look at this asap. as i recall it was not straight forward. it may be simpler to restrict it to only copying the output, not the command.",0,-1,0,0.8022022247314453,0.8009256720542908,0.533467173576355,0.0,accept,majority_agreement
500078245,375,"i'm not sure whether this should be done in this pr, and this is a correct solution, but checking the window is fullscreen or not first will also fix #377. [code block]",0,0,0,0.91091126203537,0.9736287593841552,0.963143825531006,0.0,accept,unanimous_agreement
500080610,375,thanks for the tip! fixed,1,1,1,0.967714250087738,0.984475076198578,0.9877086877822876,1.0,accept,unanimous_agreement
573351078,461,"really need a complete review, overhaul of code related to opening new windows to see whether it can be simplified while still dealing with all different circumstances. or at least made clearer.",0,0,0,0.9433786869049072,0.969626247882843,0.8924976587295532,0.0,accept,unanimous_agreement
578178917,461,"unforunately not even this fix makes it good again. there are multiple issues. 1. the app tries to match an existing tab for the given workdir. if it finds it it simply switches to that tab instead of creating a new tab. suppose the already existing tab is running some command (top or whatever under /tmp). you start as `io.pantheon.terminal -e ls -w /tmp` the app will switch to the tab with the ""top"" command running and nothing happens. this is bad a needs to be fixed either, validate if the tab is running an ongoing command and if it is then create a new tab. if not, then switch to the tab and run the command. 2. suppose you want to open the same path in multiple tabs. currently this is not possible. one tab is running ""/tmp"" you start this `io.pantheon.terminal -w /tmp` the existing tab is used so i guess we need a new argument to force a new tab (-t) just like we have a new window. this would at least make it possible to preserve some old compatibility obviously, we want to work with the same window with multiple tabs. using multiple windows is not the issue here. it was all somewhat working in the previous version. what do you think?",-1,0,-1,0.8781536221504211,0.5084450244903564,0.9702463150024414,-1.0,accept,majority_agreement
578261851,461,"thanks for review! this pr is only meant to fix issues when using the `-e` and `-x` flags raised in #460 (and not cause any regressions). (1) i do agree that a tab that is running a process should be omitted from duplicate checking but i don't think terminal ever did that so perhaps should be put in a separate pr. (2) regarding forcing opening a duplicate tab from the commandline, again this might be useful to someone but is a bit of a corner case unless a process is running in which it would be addressed by fixing point (1). the behaviour of the master branch is also to not open duplicate tabs so this should be the subject of a separate issue/branch. when you say it ""was all somewhat working"" what version are you comparing this pr with?",1,1,1,0.959930181503296,0.9480097889900208,0.9873937368392944,1.0,accept,unanimous_agreement
578384610,461,"thank you for your response. yes, i kind of thought it would have to be new prs. i was not referring to any specific version, but the behavior. in some older version (1 month and more) i don't think any existing tabs were matched and always a new one was created. anyway, i am new to the code and made some changes and it works ok. i can push those prs. how hard and how long does it take to get those prs merged to the master? (i don't have much experience so i am asking). thank you again",1,1,1,0.9674407243728638,0.9771614074707032,0.9837191700935364,1.0,accept,unanimous_agreement
578528507,461,"good to hear you are starting to contribute code! the time it can take for prs to get reviewed, approved and merged varies enormously from hours to more than a year (if ever). it depends on how many changes are made, how critical they are and how easy to understand/test/review. that is why it is a good idea to make as few substantive changes as possible in each pr (something i do not always achieve!) and explain/comment them well. it also depends on how much of their time each of the relatively small number of reviewers can devote on any particular point in their lives and on which day(s). so patience is sometimes required.",1,1,1,0.9748101830482484,0.980969786643982,0.9916800856590272,1.0,accept,unanimous_agreement
578616734,461,"understood, thank you.",1,1,1,0.7723398208618164,0.9042266011238098,0.7960850596427917,1.0,accept,unanimous_agreement
578776154,461,made a small fix [a link],0,0,0,0.9882242679595948,0.9817511439323424,0.9948282837867736,0.0,accept,unanimous_agreement
774177454,461,timed out.,0,0,0,0.9829759001731871,0.7892991304397583,0.9814842939376832,0.0,accept,unanimous_agreement
1472358023,710,#709 is merged - a conflict needs to be resolved.,0,0,0,0.9670955538749696,0.9806442260742188,0.97957843542099,0.0,accept,unanimous_agreement
1498026786,710,"testing locally, the ci was falling because of the idle in `on_switch_page()` in the mainwindow class. #720 should fix it.",0,0,0,0.9861648082733154,0.9480860233306884,0.992176353931427,0.0,accept,unanimous_agreement
1498040134,710,"for me it was failing in the ""quit"" action test. i tried to fix it but failed. we could always leave that test out and fix it later if necesssary.",0,0,0,0.6822383403778076,0.8764861822128296,0.8375822901725769,0.0,accept,unanimous_agreement
1498889360,710,"#720 now merged ... but ci still failing :disappointed: however, ci passed locally :man_shrugging:",-1,-1,-1,0.9730749726295472,0.7097483277320862,0.9886596202850342,-1.0,accept,unanimous_agreement
1499587418,710,"hmm, contrary to my previous diagnosis the ci is (now) failing on the ""new-window"" action test. see #723",0,0,0,0.9128687977790833,0.9346497654914856,0.9721296429634094,0.0,accept,unanimous_agreement
1499647021,710,"the new-window test is fine, `glib.test.skip()` don't return by itself, so the assertion in the quit test got triggered.",0,0,0,0.951561152935028,0.9915372133255004,0.992938220500946,0.0,accept,unanimous_agreement
1570532508,730,is there a reason why the man page is in packaging instead of in the main source?,0,0,0,0.952398717403412,0.9901202917099,0.9927595853805542,0.0,accept,unanimous_agreement
1570602534,730,i am not sure of the technicalities but the source man page file seems to get compressed before getting put in `usr\share\man\man1` . there may be other requirements for `man` to work properly? it seems simpler for `deb` to handle it. is there an advantage in putting it in main source? the flatpaks i've tested do not seem to install man pages anyway.,0,0,0,0.9518585801124572,0.9532087445259094,0.9704957604408264,0.0,accept,unanimous_agreement
1570614752,730,"no idea, i was just curious if this was a legacy thing and if it might effect, for example, distribution on fedora for us to have this in packaging",0,0,0,0.9486964344978333,0.5986045002937317,0.93873929977417,0.0,accept,unanimous_agreement
1570619399,730,"it used to be more difficult (especially with cmake), but now meson [a link] so we can bring it back to the main repo",0,0,0,0.9791266918182372,0.9837415218353271,0.987527310848236,0.0,accept,unanimous_agreement
1570669126,730,"ah, i wasnt aware of the native meson support so using that makes sense to lessen deb specific stuff.",0,-1,0,0.8789833784103394,0.745557963848114,0.9791531562805176,0.0,accept,majority_agreement
1570721861,730,just tried out the meson install_man function and it works as expected (not compressing the file) but if there is a compressed file already installed by deb present then that is shown by preference. not sure what to do about that.,0,0,-1,0.5947635173797607,0.96078622341156,0.5445435643196106,0.0,accept,majority_agreement
1570801590,730,"if you used my patch i'm happy that i could contribute but i failed was half asleep. forgot to add the proper -- commands for the new options in the page. posting fix for my first patch if needed, unless you caught it. ```--- manpageupdate 2023-05-31 12:22:06.518553741 -0700 +++ new.io.elementary.terminal.1 2023-05-31 12:17:19.082819021 -0700 @@ -13,13 +13,13 @@ .br \-h "", "" \-\-help show help message and exit .tp -.br \-n "", "" \-\-help +.br \-n "", "" \-\-newwindow forces a new window .tp -.br \-t "", "" \-\-help +.br \-t "", "" \-\-newtab forces a new tab .tp -.br \-m "", "" \-\-minimized +.br \-m "", "" \-\-help starts terminal in a minimized state .tp .br \-v "", "" \-\-version",1,1,1,0.934934675693512,0.7899095416069031,0.9786133170127868,1.0,accept,unanimous_agreement
1571204527,730,"if you installed the software with a deb, you should update it with a deb and that will update the compressed file installed by the deb.",0,0,0,0.9892759323120116,0.9942400455474854,0.9944700002670288,0.0,accept,unanimous_agreement
2276754233,769,proposed [a link] to merge into this branch. fixes missing accels,0,0,0,0.9882442951202391,0.993763506412506,0.989591896533966,0.0,accept,unanimous_agreement
2334592660,786,"for gtk4, the idea was to use `gtk.widget.add_binding_signal()` to handle the shortcuts and remove the action. in the settingspopover, you can use a glib.signalgroup to connect the buttons to the `{decrease,increase}_font_size` signals in the vte.terminal.",0,0,0,0.9869324564933776,0.9949634075164796,0.9937993884086608,0.0,accept,unanimous_agreement
2334653884,786,"this is mainly to decrease the diff between the gtk3 and gtk4 versions by using code that works in both. after the initial port then the gtk4 version can be improved to use unique features of gtk4. however, it may not be worth having the intermediate step in this case?",0,0,0,0.9843249320983888,0.9932343363761902,0.9932284951210022,0.0,accept,unanimous_agreement
2336777320,786,do you recommend going straight to using `add_binding_signal` in the gtk4 port or have this intermediate step?,0,0,0,0.987185537815094,0.995450794696808,0.99458909034729,0.0,accept,unanimous_agreement
2341934405,786,"i'm not actually familiar with `add_binding_signal` or `glib.signalgroup` so i'm not sure i can give a meaningful opinion on what would be the easier path forward, sorry! so far what's in the main port branch isn't terribly difficult to review so either would probably be fine?",-1,-1,-1,0.9893310070037842,0.9927752017974854,0.9945201277732848,-1.0,accept,unanimous_agreement
2344162773,786,me neither but it looks like you can move a set of signal bindings in one instance of a class to another instance in one go. could be useful - otherwise you would have to bind to each terminal separately if you were to use signals instead of an action.,0,0,0,0.947819173336029,0.9672443866729736,0.9811522960662842,0.0,accept,unanimous_agreement
2344202322,786,"since neither of us are familiar with the new method, let's move forward with this way and then we can revisit it in the future",0,0,0,0.9611414670944214,0.9749516844749452,0.984150230884552,0.0,accept,unanimous_agreement
2344306540,786,just realized there is a much easier way to do this! i forgot that settingspopover already has a reference to the current terminal via its terminal_binding_group so we can just call its functions directly. i'll close this and propose a better pr.,1,1,1,0.5630171298980713,0.8844590187072754,0.8219452500343323,1.0,accept,unanimous_agreement
2508646042,813,"we don't support withdrawing notifications yet, do we? [a link]",0,0,0,0.8211584091186523,0.9879112243652344,0.9916131496429444,0.0,accept,unanimous_agreement
2508650892,813,"[a link], but it doesn't work across sessions yet. so if you restart in between it won't get cleared because the notification ids i think aren't restored",0,0,0,0.9806758165359496,0.9744672775268556,0.993220329284668,0.0,accept,unanimous_agreement
2517686878,813,"shouldn't we remove the ""process-completed"" tab icon as well when tab is focussed?",0,0,0,0.9844277501106262,0.9952710270881652,0.9942281246185304,0.0,accept,unanimous_agreement
2517800191,813,"works within same session. not sure if you want to fix the icon issue, which is kind of related, in this pr or later. do you want to wait for cross-session ability too? i am willing to approve if not.",0,0,0,0.9648786783218384,0.969119668006897,0.9664810299873352,0.0,accept,unanimous_agreement
356566041,190,"there may be a better solution, but if you insert a terminal message in `save_opened_terminals ()`, you will see that it is called twice every time you add or remove a terminal. if you do not change `schedule_name_check ()`, you probably do not need to save opened terminals both in `new_tab ()` and in `on_new_tab_added ()` (indirectly) for example. can you give an example of a case where the state is not saved unless you make these calls everywhere you have?",0,0,0,0.9850479364395142,0.9945057034492492,0.9914593696594238,0.0,accept,unanimous_agreement
356568748,190,i would also point out that saving the tab order is not an inherent function of disambiguating the tab names and therefore should be be called there by default - only when the name is actually changed.,0,0,0,0.9755057692527772,0.9917618036270142,0.984434187412262,0.0,accept,unanimous_agreement
358687379,190,"schedule name check is called when the name of the window changes, which likely means the location has changed so in order to update the saved state when terminals change location it needs to be called, it could be moved back to the signal handler but then loses the timeout that is probably useful in cases.",0,0,0,0.9876242876052856,0.9809274673461914,0.993725836277008,0.0,accept,unanimous_agreement
358697656,190,"ok, that seems reasonable - i'll approve now - thanks.",1,1,1,0.6864703297615051,0.9669199585914612,0.8948248624801636,1.0,accept,unanimous_agreement
352293842,180,cannot compile on juno: [code block] i don't think this is really a problem with this branch.,0,0,0,0.6341190934181213,0.9321367144584656,0.9817988276481628,0.0,accept,unanimous_agreement
356357290,180,failure to compile on juno due to a line unchanged by this pr therefore should not block review/merge.,0,0,0,0.8352876305580139,0.9730595350265504,0.9761147499084472,0.0,accept,unanimous_agreement
356701202,180,looks like this branch should be building on juno again due to fixes in master :),1,1,0,0.9315764307975768,0.9818902015686036,0.91730797290802,1.0,accept,majority_agreement
364413401,180,"this is not connected to any particular issue and i did not notice any difference in behaviour when executing apps from the command with the -e flag. as far as i recall, this was just to simplify the code by only having one function to launch processes.",0,0,0,0.980600893497467,0.98604553937912,0.9901302456855774,0.0,accept,unanimous_agreement
391032863,180,not essential,0,0,0,0.9247423410415648,0.7593327760696411,0.9898563623428344,0.0,accept,unanimous_agreement
394847439,253,"now it works good, except ""search"". looks like it even not exists in pot and po. so, can you also update them?",1,1,0,0.7974123954772949,0.7094690203666687,0.7318423986434937,1.0,accept,majority_agreement
394848544,253,"yes, i can, but not in this pr.",0,0,0,0.9724463224411012,0.979642927646637,0.990512192249298,0.0,accept,unanimous_agreement
679512373,533,i feel like there may be a conflict with vte stuff here? but i'm not sure. we should probably document what we consider reserved...,-1,0,0,0.7916829586029053,0.7367889285087585,0.911699652671814,0.0,accept,majority_agreement
680058787,533,"` tab` does not *seem* to do anything different from `tab` in vte.terminal, but i am not sure.",0,0,0,0.8924276232719421,0.9351723194122314,0.962960958480835,0.0,accept,unanimous_agreement
670174548,527,"hrm, this feels really weird to me. maybe because the padding is not even all the way around? but it feels like the sides are way too padded inside the terminal view itself.",-1,-1,-1,0.9821934700012208,0.98892480134964,0.9792739748954772,-1.0,accept,unanimous_agreement
670192562,527,yeah i can't see a way to pad the top and bottom without it affecting the scroll area which looks weird. maybe see if it grows on you. i could settle for 6px or 9px too. but the current padding is just so little,-1,-1,-1,0.6116087436676025,0.9833974242210388,0.9814090728759766,-1.0,accept,unanimous_agreement
671524481,527,"currently experimenting with `6px 12px` plus an undershoot. ![a link] for the undershoot to look right, you have to make sure it ends with the opaque color 6px from the end, so something like this: [code block] this does mean you lose the translucency on the undershoot, but it's subtle enough i think it would be fine. another alternative would be to drop translucency from the terminal altogether, but i don't think that's strictly necessary for this. we also have to consider how to get these values (i.e. `rgb(55, 55, 55)` or whatever the background color is) into css and keep them in sync when changing color schemes.",0,0,0,0.6479096412658691,0.9403563737869264,0.5795246958732605,0.0,accept,unanimous_agreement
758110135,557,"need input from design team as to whether the value of this function justifies lengthening the menu. (note, the same functionality can be achieved by pressing ` c` + ` v`).",0,0,0,0.9880373477935792,0.9926470518112184,0.9922624826431274,0.0,accept,unanimous_agreement
758112076,557,"unfortunately this is not fast enough. however, what i would really prefer would be ` ` (or something similar) instead of ` x`, but i was not sure if that is possible.",-1,-1,-1,0.9558375477790833,0.8177891373634338,0.9566376209259032,-1.0,accept,unanimous_agreement
758112279,557,also ` x` might be expected to cut the selected text (although this could only work on an uncompleted command),0,0,0,0.9884076714515686,0.993804931640625,0.9925421476364136,0.0,accept,unanimous_agreement
914519283,557,"there is already middle-click-paste to paste with current selection with the mouse (can be enabled under *settings -> mouse & touchpad -> clicking -> middle click paste*). this works in all applications, not only terminal. there is also the shift insert shortcut which pastes the current selection. i think this is implemented by vte.",0,0,0,0.981124997138977,0.9916232228279114,0.9845266342163086,0.0,accept,unanimous_agreement
914528429,557,i can confirm ` insert` works in terminal to paste the current selection into the commandline. are you content for this pr to be closed in view of the above comments?,0,0,0,0.9898732900619508,0.992923140525818,0.995262622833252,0.0,accept,unanimous_agreement
914575986,557,"yes, the pr can be closed :)",1,1,1,0.863774836063385,0.9896785020828248,0.5408164262771606,1.0,accept,unanimous_agreement
439502008,264,"i'm not sure about the specific shortcut, but i like the idea and direction here. i think the listed limitations are fine.",1,0,1,0.7161809802055359,0.5231114625930786,0.9520025849342346,1.0,accept,majority_agreement
439521875,264,"can you resolve conflicts, please?",0,0,0,0.9845761060714722,0.9895652532577516,0.989482283592224,0.0,accept,unanimous_agreement
440249282,264,-lemos conflicts resolved.,0,0,0,0.874652087688446,0.9821256399154664,0.92130708694458,0.0,accept,unanimous_agreement
1718926894,264,"is there a way to disable the up shortcut? it conflicts with the micro editor default shortcut to move lines around, so we can assume other apps may be impacted too. it would be nice if this feature could be turned off or at least the shortcut could be changed.",0,0,0,0.9598444700241088,0.989297091960907,0.9773075580596924,0.0,accept,unanimous_agreement
1727374228,264,would you mind opening a request issue regarding this? it is kind of related to #215 but it might be possible to special case this or change the shortcut to something else. am i right in thinking micro runs in the terminal like e.g. `nano`? it would make sense to disable the shortcut when there is a foreground process anyway.,0,0,0,0.9794628024101256,0.9747034907341005,0.9936231970787048,0.0,accept,unanimous_agreement
1950073714,264,"this hardcoded shortcut really bothers me. i have alt+up bound to `cd ..` in my setup, but there is currently no way to make it work in io.elementary.terminal. i might be forced to change to a different terminal emulator :cc which would be a pitty, because i otherwise like elementary's terminal a lot",-1,-1,-1,0.9810853004455566,0.989553689956665,0.98929625749588,-1.0,accept,unanimous_agreement
1950246821,264,i found this on stackoverflow ([a link] so it may be possible to discontinue implementing this shortcut ourselves in future. meanwhile it would be possible to change it to gnome terminal's choice (although there is always a possibility that someone will have customised those).,0,0,0,0.9870059490203856,0.991690754890442,0.99314945936203,0.0,accept,unanimous_agreement
2282180420,772,should zoomoverlay widget be merged into mainwindow now thereby losing a gtk.bin?,0,0,0,0.9821659922599792,0.9936009049415588,0.994126319885254,0.0,accept,unanimous_agreement
2294214597,772,sorry thought i responded to this. what do you think about using granite.overlaybar for this? [a link],-1,-1,-1,0.9872784614562988,0.9903039336204528,0.9909582138061525,-1.0,accept,unanimous_agreement
2294798739,772,looks like it would be appropriate - thanks. is granite-7 available on os7.1 though?,1,1,1,0.928186297416687,0.7983909845352173,0.9662185311317444,1.0,accept,unanimous_agreement
2294888858,772,it is! but granite-7 is just for gtk4 apps. this uses overlay bar from granite 6,1,0,1,0.5073966979980469,0.4570996165275574,0.9572604298591614,1.0,accept,majority_agreement
2295193873,772,"ok, sorry for the confusion. i think we would still have to use markup to get 24pt text though? are you ok with that size? i feel it needs to be more prominent than default text size if displayed over text.",-1,-1,-1,0.9893747568130492,0.988743543624878,0.974782407283783,-1.0,accept,unanimous_agreement
2295207224,772,i changed it to granite.overlaybar but then noticed you had already pushed a new pr! the main difference is that the size and position of the overlaid widget is not controllable so the vision of the op cannot be realized. however using the native granite widget has the advantage of being consistent with the files appearance when file items are selected. also fewer code lines.,0,0,0,0.9435070753097534,0.8865496516227722,0.9122879505157472,0.0,accept,unanimous_agreement
2345831729,788,confirmed that the changes made in the gtk4 branch are not needed here and not worth backporting so closing. sorry for the confusion.,-1,-1,-1,0.9882551431655884,0.9889578819274902,0.9903744459152222,-1.0,accept,unanimous_agreement
2346826566,788,looks like i misdiagnosed the problem with the gtk4 port - we do not need to maintain `control_pressed` and `shift_pressed` variables there either. but we do have to handle the native mode of copy-paste as well. just leaving it to the vte.terminal like we do here does not work.,0,0,0,0.897721529006958,0.7704774141311646,0.9740701913833618,0.0,accept,unanimous_agreement
2450048716,777,any eta for merging this bugfix ? the pr seems stale,0,0,0,0.6507906317710876,0.7629464864730835,0.9788041710853576,0.0,accept,unanimous_agreement
2453417989,777,thanks for the review. i have now addressed your comments.,1,1,1,0.8322833776473999,0.8373618125915527,0.910293459892273,1.0,accept,unanimous_agreement
2454822324,777,_**yes**_ thank you !,1,1,1,0.9822430610656738,0.9619479179382324,0.993870973587036,1.0,accept,unanimous_agreement
308667302,95,conflicted merge resolved but needs retesting to check for regressions as it was not straightforward.,0,0,0,0.914587378501892,0.9475433826446532,0.9585047960281372,0.0,accept,unanimous_agreement
313650836,95,high priority assigned as it is associated with a crash under some circumstances.,0,0,0,0.9814404249191284,0.9870540499687196,0.9702407121658324,0.0,accept,unanimous_agreement
318863769,95,those issues were resolved by a much simpler fix in [a link] closing.,0,0,0,0.9862457513809204,0.988784909248352,0.9886339902877808,0.0,accept,unanimous_agreement
386049721,234,"i don't think `-w` windows should behave differently from other terminal windows wrt. saving tabs. if i open my only terminal window via files, i would still expect it to store its tabs. likewise, if i open a second terminal window via plank and close the first one, i would expect the second window to save its tabs when i turn off the computer. i think that is how it works in browsers too.",0,0,0,0.9439359903335572,0.970085084438324,0.9636184573173524,0.0,accept,unanimous_agreement
386060368,234,"i am concerned that if, for example, you normally open terminal with a default set of tabs (potentially a significant number) and then temporarily open a single tab in another window from files, (which uses the -w parameter) while you have no other terminal window open, then when you close the window you will lose all your default tabs, possibly unexpectedly, and have to set them all up again. i think at least for second windows or windows from files, you should have to confirm overwriting the saved tab set. needs ux team input.",-1,0,-1,0.935724139213562,0.9484013319015504,0.6145721077919006,-1.0,accept,majority_agreement
386075268,234,"ah, i see. when launching terminal from files, you could prevent that issue by restoring the previous terminal window first, and then showing the files directory either in a new terminal window, or in a new tab in the existing window (again, similar to how browser tabs work). that way the `-w` window would never run in the absence of the main window, and it would then be up to the user which window they close first. i feel like state restoration <-> tab management might be worth a chapter in the human interface guidelines :) (also thinking about files + epiphany)",1,1,1,0.8696852326393127,0.9945322275161744,0.9846116900444032,1.0,accept,unanimous_agreement
395520672,234,i think i agree with that the best solution might be to assume a single-window workflow and restore tabs unless there is already another window open thoughts?,0,0,0,0.9754692316055298,0.9592803120613098,0.9699485898017884,0.0,accept,unanimous_agreement
395833530,234,i guess the smart thing to do in that case would be to check whether any of the restored tabs match the requested path and if so not to open another tab at that uri? otherwise #245 would not be fixed.,0,0,0,0.9650706052780152,0.989807903766632,0.976109743118286,0.0,accept,unanimous_agreement
396070198,234,new pr submitted addressing only #245. other issue closed.,0,0,0,0.9852307438850404,0.992501974105835,0.9935640692710876,0.0,accept,unanimous_agreement
444933700,333,"i would question whether this should be implemented (or not) in each relevant elementary app (e.g. code, files) separately or whether it should be implemented (in a way that can be overridden) in granite.widgets.dynamicnotebook?",0,0,0,0.9765648245811462,0.9953669309616088,0.98331218957901,0.0,accept,unanimous_agreement
444962636,333,"i think it would be better to add it over the dynamicnotebook, but quite not sure, like why they added the shortcut for travelling between tabs here rather than the dynamicnotebook?",0,0,0,0.9804949760437012,0.934633731842041,0.9720315337181092,0.0,accept,unanimous_agreement
458207433,333,"on reflection, i think there are problems implementing actions within granite itself so the pr's approach is probably ok.",0,0,0,0.9723581671714784,0.9824390411376952,0.962023377418518,0.0,accept,unanimous_agreement
458208019,333,"would you like to fix the conflict so that this pr can be progressed, thanks :-)",1,1,1,0.9890929460525512,0.9896995425224304,0.8563535213470459,1.0,accept,unanimous_agreement
458545263,333,"cool, i will do it soon :d",1,1,1,0.9906389713287354,0.9944732785224916,0.9960655570030212,1.0,accept,unanimous_agreement
464346228,333,"it's ready now :d i think i've done something stupid with fixing the conflicts, if so please tell me i will recreate the brach :$",-1,1,-1,0.6673074960708618,0.8698789477348328,0.9869917631149292,-1.0,accept,majority_agreement
515799301,391,"i don't know...in my opinion the neutral dark style of your previous branch is better for the eyes, and not only it is coherent with dark style across the os but it also better matches terminal icon. this one looks too blue-greenish.",0,-1,0,0.5798048973083496,0.9205880165100098,0.665355920791626,0.0,accept,majority_agreement
515799936,391,"we use solarized dark in code for syntax highlighting, and we were chatting about aligning the developer tools to use solarized for their dark styles. the neutral dark is a good default for the stylesheet since it affect content-creation and editing apps like photos and video editors, but that's less of a big deal with developer tools. i imagine we'd also update the terminal icon to match, like we did with the code icon and solarized light.",0,0,0,0.9216574430465698,0.9647191166877748,0.9653065800666808,0.0,accept,unanimous_agreement
516057129,391,"well, if solarized (both light and dark) is going to be the default style for developer tools i'm perfectly ok with this. my only concern is coherence across different apps. for example, this will require to update not only terminal icon but also dark ui for code (at the moment only the text view uses the solarized dark color scheme) and... if terminal and code then get a solarized dark ui their light counterparts, with default grey decorations, will look odd, wouldn't they?",0,0,-1,0.7629796266555786,0.9224032163619996,0.5180859565734863,0.0,accept,majority_agreement
516073150,391,"it’s _almost_ like this is a draft pr to experiment with things! :winking_face_with_tongue: yes, there are a lot of implications and we’ll need to decide what the scope is. i’m just pushing this up here in a draft pr instead of keeping it to myself on my machine.",-1,0,1,0.6787737607955933,0.5621563792228699,0.9438581466674804,,review,no_majority_disagreement
516109010,391,"this way too blue, i don't like it",-1,-1,-1,0.982925534248352,0.9854296445846558,0.99141263961792,-1.0,accept,unanimous_agreement
530541391,391,closing as it was an experiment but i don't see it getting merged,0,0,0,0.9234513640403748,0.9562605023384094,0.9850316047668456,0.0,accept,unanimous_agreement
838914338,468,"in order to shorten the review list, i am converting this to draft as there are conflicts, outstanding issues and no recent activity. is this something you still have time to work on?",0,0,0,0.9464712738990784,0.9887097477912904,0.9869873523712158,0.0,accept,unanimous_agreement
1044378060,468,closing due to age and lack of response,-1,0,0,0.5514249801635742,0.9834179282188416,0.8929061889648438,0.0,accept,majority_agreement
686176431,537,"hi ! i think i did what you suggest, but ould not check on master because `libhandy-1` . i checked on the last version before this dependence was introduced.",0,1,0,0.8324021100997925,0.4878835380077362,0.5070388317108154,0.0,accept,majority_agreement
686589066,537,"yes, what i am doing is to develop on ubuntu focal, pulling things from the elementary focal repositories as required. this is ok as long as your not working on styling issues. otherwise you probably need to install the prerelease version of elementary odin on a vm.",0,0,0,0.9835494756698608,0.9860926270484924,0.984489917755127,0.0,accept,unanimous_agreement
774148247,537,sorry for the slow review. are you still able to work on this?,-1,-1,-1,0.9880700707435608,0.992685079574585,0.995017945766449,-1.0,accept,unanimous_agreement
841385858,537,closing as no response to last question.,0,0,0,0.911895215511322,0.9862059950828552,0.9797802567481996,0.0,accept,unanimous_agreement
942458042,571,"thanks for having a go at this! i am not sure a fully capable terminal is possible in a flatpak as it is often used for low-level tinkering with the host system. see for example the following extract of the flatpak documentation: exceptions from the blacklist: /run/media these directories are mounted under /var/run/host: /etc, /usr the reason many of the directories are blacklisted is because they already exist in the sandbox such as /usr or are not usable in the sandbox. there are probably other limitations imposed by the sandbox but i am not an expert in flatpak. i do not know whether it would be useful (or even possible) to have a separate ""demo"" or ""lite"" version of terminal. needs input from the project leaders on that.",1,1,1,0.9423190355300904,0.9809632301330566,0.9878385066986084,1.0,accept,unanimous_agreement
942609642,571,my inclination is that terminal is not a good candidate for flatpak since it would be so limited for the things it's most suited for,0,0,0,0.5560862421989441,0.667826771736145,0.9265117645263672,0.0,accept,unanimous_agreement
942667303,571,"yes. this was more of a proof of concept than anything else, and i didn’t really test it thoroughly at the time. mainly i used it as an opportunity to learn how to do flatpak packaging. fwiw you could comment on issue #541, as well, since that was my impetus for doing this. also feel free to close this pr if it doesn’t seem like something worth pursuing (considering the limitations you’ve explained above).",1,0,0,0.5386776328086853,0.7737460732460022,0.8582481741905212,0.0,accept,majority_agreement
942670638,571,"regarding the limitations: it may still be worth shipping some sort of sandboxed terminal as a developer tool at some point, but the existing terminal application probably isn’t suitable for that purpose in its current manifestation. (i.e. i could imagine a fork of some of this code being useful within an ide, if that doesn’t exist already.)",0,0,0,0.9767966866493224,0.9909875988960266,0.9698173999786376,0.0,accept,unanimous_agreement
943262728,571,code does have a terminal plugin (derived directly from vte-91 not terminal) and at some point code is intended to be released as a flatpak i understand so issues of operating a terminal in a sandbox will have to be addressed there (if the plugin is kept). looks like danrabbit has already closed the linked issue so i will close this pr. thanks again for taking an interest though.,1,1,1,0.9690650701522828,0.5208483934402466,0.972369372844696,1.0,accept,unanimous_agreement
943333096,571,"fwiw the reason i was interested in this initially is that elementary terminal has a number of conveniences that gnome terminal lacks, and i wanted to use it on debian, but i just switched from debian to elementary os because my gnome installation bricked itself, and i just didn’t want to deal with the massive flexibility of debian (and the resulting ease of bricking one’s installation) anymore. so basically the conveniences of elementary terminal might be nice to have elsewhere, though i have yet to try elementary code.",0,0,0,0.8159075975418091,0.7820516228675842,0.6702172160148621,0.0,accept,unanimous_agreement
1233325905,680,"ok, thanks for the review - i'll rethink it.",0,1,1,0.5030600428581238,0.5759664177894592,0.8787884712219238,1.0,accept,majority_agreement
1235785360,680,"you can always create a new tab or switch tabs with the mouse. if we allow the foreground process to receive all key presses first (which seems necessary to fix the issue) then there is likely to be this issue, especially if the process eats the key event.",0,0,0,0.9855116605758668,0.9835458993911744,0.9893007874488832,0.0,accept,unanimous_agreement
1235788118,680,one solution may be to special case certain key combinations such as those that switch tabs or create a new tab? these would not be passed to the foreground process. let me know which actions should be special cased and i'll try and implement it.,0,0,0,0.9840293526649476,0.9846917986869812,0.9929129481315612,0.0,accept,unanimous_agreement
1235789847,680,it doesnt really make sense to perform a search on a tab that has a foreground process so it seems reasonable to make the searchbar insensitive when such a tab is focused?,0,0,0,0.5040894150733948,0.9453057050704956,0.9805669188499452,0.0,accept,unanimous_agreement
2233932017,680,closing as linked issue has been closed.,0,0,0,0.984182059764862,0.9916058778762816,0.9926937818527222,0.0,accept,unanimous_agreement
1837556867,751,how near are we to switching to gtk4? would it be better to leave this until switch is imminent so degradation of ui is minimised?,0,0,0,0.979200839996338,0.9894617199897766,0.9896615743637084,0.0,accept,unanimous_agreement
1837570376,751,"we don't have the gtk4 version of vte in jammy, so it would need to wait for once we are ""done"" with releases for os 7. i'm fine in waiting for it, this part of code won't have much changes, if any, until there.",0,0,0,0.918447196483612,0.9597777128219604,0.5224053859710693,0.0,accept,unanimous_agreement
1838570484,751,adding blocked label - waiting for gtk4 version of vte.,0,0,0,0.9529021382331848,0.9872020483016968,0.979434072971344,0.0,accept,unanimous_agreement
2264351911,751,"it seems like we can manually add accelerators with `set_attribute_value (""accel"", accel_string_goes_here);`",0,0,0,0.985740602016449,0.9942508935928344,0.9929448962211608,0.0,accept,unanimous_agreement
2267524350,751,"looks like the context menu is broken in master at the moment, so it might be better to proceed with this. might be possible work around the accelerator issue. i'll look into it.",0,0,0,0.981179416179657,0.979743719100952,0.980391263961792,0.0,accept,unanimous_agreement
2313613194,751,closing since #769 was merged,0,0,0,0.9805377125740052,0.9931837916374208,0.9927434921264648,0.0,accept,unanimous_agreement
2334817350,785,fixed! dunno why i thought `theme` was an object and not a string here but this seems to work perfectly,1,-1,1,0.848126232624054,0.7312605977058411,0.9866309762001038,1.0,accept,majority_agreement
313649884,105,added medium priority label as it is associated with broken functionality under some circumstances.,0,0,0,0.979756236076355,0.9848487973213196,0.9901033639907836,0.0,accept,unanimous_agreement
314597302,105,i believe we shouldn't do things like this. this could lead to some unwanted behaviour. in theory returning `false` should pass the event further to the terminal widget itself.,-1,0,0,0.7779335379600525,0.8731424808502197,0.9195311665534972,0.0,accept,majority_agreement
314733159,105,seeking a more elegant solution. just putting at the end of the keyhandler blocks effect of f11 and may cause other regressions.,0,0,0,0.9704738259315492,0.9532413482666016,0.9782228469848632,0.0,accept,unanimous_agreement
314823328,105,withdrawing since better solution submitted by donadigo.,0,0,0,0.9478111267089844,0.9895110726356506,0.9784689545631408,0.0,accept,unanimous_agreement
314825813,105,pr closed in favour of fix-f10-key,0,0,0,0.9876027703285216,0.9913444519042968,0.9877036809921264,0.0,accept,unanimous_agreement
355265518,189,has conflicts.,0,0,0,0.640083909034729,0.7127722501754761,0.6439696550369263,0.0,accept,unanimous_agreement
356571449,189,"this behaves differently to files - which does not restore tabs even if the new window is the first window to be opened (using plank ""new window"" option). i am not sure which is the desired behaviour but there should be consistency. needs design team input on this point. incidentally scratch/core restores tabs in both cases but crashes if initially launched from plank ""new window"".",0,0,0,0.905609369277954,0.9798452258110046,0.97127366065979,0.0,accept,unanimous_agreement
356571947,189,another issue is that if the new window is the last one to be closed then the original saved opened tabs are lost. again i am not sure what the desired behaviour is.,-1,-1,0,0.677932620048523,0.7665323615074158,0.8773581981658936,-1.0,accept,majority_agreement
356572982,189,"on reflection, i feel that the behaviour of this branch regarding plank is correct. the other issue can be left for another pr if change is desired.",0,0,0,0.9739262461662292,0.9777690172195436,0.826134204864502,0.0,accept,unanimous_agreement
321057467,129,it looks like you either didn't checkout or haven't restarted the terminal after compiling and installing.,0,0,0,0.9745888710021972,0.9807876348495485,0.986783504486084,0.0,accept,unanimous_agreement
321069800,129,"you are right. _started terminal from terminal_ :confused: but, checkbox looks still like it has a margin ![a link]",0,-1,-1,0.468709260225296,0.580262303352356,0.9858620166778564,-1.0,accept,majority_agreement
321070227,129,"this is going to happen on gtk 3.18 and nothing you can really do about it because the box-shadow is considered part of the allocation. in 3.22, shadows can be outside the allocation so that's why it's aligned on juno but not loki",0,0,0,0.9774486422538756,0.9897805452346802,0.9768980741500854,0.0,accept,unanimous_agreement
339070557,157,~~i was having trouble keeping the menu from breaking in my other branch so i just left those ones alone for now. i’ll come back to them once i figure out how to keep it from breaking :grimacing_face:~~ ah i misunderstood. yeah the way this is constructed seems very weird. there's a lot of room for improvement here for sure. it seems that adding these accelerators in the construct block causes issues because pantheonterminalapp seems to not be compatible with gtk.application,-1,-1,-1,0.9659926891326904,0.9915629625320436,0.9905688166618348,-1.0,accept,unanimous_agreement
339079160,157,"in files, the popup menu actions are handled separately by the widget (abstractdirectoryview) not the window. you are probably right to leave that to another branch as it needs some significant refactoring.",0,0,0,0.9878637194633484,0.9917607307434082,0.9917311072349548,0.0,accept,unanimous_agreement
564215549,432,from 's branch's additions: ![a link],-1,0,0,0.917670726776123,0.9661390781402588,0.7964900135993958,0.0,accept,majority_agreement
564227531,432,shorter copy: ![a link],-1,0,1,0.4893316030502319,0.9540348649024964,0.8746206164360046,,review,no_majority_disagreement
571470964,447,from #446: i started looking into this and it looks like there's a lot wrong with how windows are selected/created in response to options. i'll stick a pin in the pr and send some cleanups and through that sort all this out before coming back to this one.,0,0,0,0.8699186444282532,0.9144511818885804,0.9763656854629515,0.0,accept,unanimous_agreement
571551720,447,please do not let the scope of the pr increase unnecessarily as it will delay approval and merging.,-1,0,0,0.7565333843231201,0.947647511959076,0.915806770324707,0.0,accept,majority_agreement
571572148,447,"alright, then i won't bother refactoring at all, and will just make sure restored tabs are handled properly. the rest i'll save for other prs.",0,0,0,0.9693381786346436,0.9389100074768066,0.9874656796455384,0.0,accept,unanimous_agreement
571759848,447,"ok, that's the simplest implementation of `-n` i know how to do. have at it!",0,1,1,0.4927456974983215,0.9173587560653688,0.9320544004440308,1.0,accept,majority_agreement
565583098,435,wow summing delta is way more elegant than the solution i came up with elsewhere. definitely gonna steal that! one thing is that it doesn't look like this updates the zoom level in the menu :),1,1,1,0.9789903163909912,0.9937919974327089,0.9954397082328796,1.0,accept,unanimous_agreement
565624230,435,oops - forgot about updating the menu - thanks. this was more or less cut and pasted from files code.,1,1,-1,0.6814828515052795,0.6793176531791687,0.5492411255836487,1.0,accept,majority_agreement
727235003,547,"hm, gtk.eventcontrollerkey could be useful in other projects (e.g. files) as well i think :thinking:",0,-1,1,0.9735766649246216,0.4907711446285248,0.7959635257720947,,review,no_majority_disagreement
727236676,547,"yes, it is the future way to handle events and has been backported to gtk3 so that the transition to gtk4 can be prepared ( [a link] )",0,0,0,0.9859734773635864,0.9877585768699646,0.9933435916900636,0.0,accept,unanimous_agreement
727238895,547,"afaict, the key press event is not actually reaching the eventcontrollerkey.key_pressed controller :disappointed:",-1,0,-1,0.9799730181694032,0.9483643770217896,0.9903290271759032,-1.0,accept,majority_agreement
727246831,547,"it indeed only work if the widget has focus which isn't the case here, closing in favor of another solution.",0,0,0,0.9800950288772584,0.9861727356910706,0.9903314113616944,0.0,accept,unanimous_agreement
1095218690,552,is this something you would like to push ahead with? if so it would make other prs like #633 redundant.,0,0,0,0.978156566619873,0.9843191504478456,0.9926055669784546,0.0,accept,unanimous_agreement
1095236175,552,this would probably also affect prs #546 and #630.,0,0,0,0.9804404377937316,0.9919320940971376,0.9890678524971008,0.0,accept,unanimous_agreement
1095302251,552,"yeah if someone else wants to pick this up, feel free! i just haven't been able to revisit it for a while. since this is a pretty big branch, it probably makes sense to try to break it up into smaller cleanups that can be merged before adding full color scheme support",1,1,1,0.945356011390686,0.7998804450035095,0.8105883002281189,1.0,accept,unanimous_agreement
1176508286,552,can this pr be closed now?,0,0,0,0.9874361753463744,0.9929034113883972,0.994413435459137,0.0,accept,unanimous_agreement
1176523838,552,yes definitely,0,0,0,0.9434103965759276,0.9623836874961852,0.934330403804779,0.0,accept,unanimous_agreement
844267632,580,"there is this: [a link] which, hopefully can be extended to include the tab context menus",0,0,0,0.985396444797516,0.9919455647468568,0.9948969483375548,0.0,accept,unanimous_agreement
884726665,580,"hello, the f44d189 commit is too much. it interferes with basic terminal functionality. you cannot press f5 in midnight commander anymore and there are other downsides as well. isn't it enough to have the ctrl+shift+r to reload?",-1,-1,-1,0.922737956047058,0.9285494685173036,0.777746856212616,-1.0,accept,unanimous_agreement
884742054,580,`f5` was implemented to match the `reload` action shortcut in files. we should probably ignore it when a foreground process like midnight commander is running.,0,0,0,0.9874120950698853,0.994873821735382,0.9930754899978638,0.0,accept,unanimous_agreement
884758239,580,"yes, that would be nice. thank you",1,1,1,0.9723736047744752,0.9926565289497375,0.9834290146827698,1.0,accept,unanimous_agreement
851557855,589,i honestly don't understand how this caused the margin to be set on the terminal window...,-1,-1,-1,0.9582280516624452,0.9638546109199524,0.9348440170288086,-1.0,accept,unanimous_agreement
851564569,589,looking at the generated `mainwindow.c` it looks like [code block] gets compiled to [code block] while [code block] gets compiled to [code block],0,0,0,0.9834116101264954,0.9949094653129578,0.9938052892684937,0.0,accept,unanimous_agreement
851565794,589,that's [a link],0,0,0,0.9863860607147216,0.9896656274795532,0.994081437587738,0.0,accept,unanimous_agreement
851570670,589,ok i understand. `margin_start = margin_end = 12` is interpreted as `margin_start = (margin_end = 12)` where `(margin_end = 12)` sets the margin on the `mainwindow`.,0,0,0,0.9747126698493958,0.9941791296005248,0.990883767604828,0.0,accept,unanimous_agreement
1780784002,740,thanks for the improvements :smile:,1,1,1,0.9752630591392516,0.9953373670578004,0.9957373142242432,1.0,accept,unanimous_agreement
356820502,193,but what’s the goal of having the build system alter these files? it seems like making things complicated for no gain,0,-1,0,0.6123530268669128,0.583571195602417,0.5267395973205566,0.0,accept,majority_agreement
356824352,193,"the unnecessary complication is that this project is using 2 config files to accomplish what 1 could do, but i'd guess that's because this pre-dates the easy way being known or possible. that's not done in any of the other projects. the goal is the same as any other variable in code, centralize repetitious info and re-use it efficiently. i think it also helps readability because just seeing ""io.elementary.terminal"" all over the place doesn't give the same context as `exec_name` and `gettext_name`, because you know what that's talking about.",0,0,0,0.8811854720115662,0.9437024593353271,0.9371773600578308,0.0,accept,unanimous_agreement
356825403,193,"it's also making it a vapi instead of just a config.vala, which makes it overcomplicated.",0,0,0,0.836243748664856,0.7874638438224792,0.823488712310791,0.0,accept,unanimous_agreement
359936797,204,"i have done so, although i am noticing some unusual cursor behaviour with this. i am not sure if that is because of this commit or if it just makes it more visible.",0,-1,0,0.5138680934906006,0.5286563634872437,0.968627631664276,0.0,accept,majority_agreement
360072202,204,this effect can be fixed by grabbing focus in an idle loop rather than immediately inside the signal handler.,0,0,0,0.98384827375412,0.9911751747131348,0.9922528862953186,0.0,accept,unanimous_agreement
543336711,417,"the idea of theming is good. i think that terminal should have the ability to apply user defined styles. but fresh, after install terminal is ok with 3 initial themes.",1,1,1,0.9377987384796144,0.9291380643844604,0.9434285163879396,1.0,accept,unanimous_agreement
543339049,417,"""but fresh, after install terminal is ok with 3 initial themes."" what do you mean??",0,0,0,0.9766299724578856,0.6628180742263794,0.975194811820984,0.0,accept,unanimous_agreement
543899071,417,i just think that terminal doesn't need more themes. but needs mechanism that allows to add custom themes e.g. using dotfiles,0,0,0,0.9702965021133424,0.9509643912315368,0.9741805195808412,0.0,accept,unanimous_agreement
544020094,417,"we've already had a ticket for that, see #418.",0,0,0,0.9812657237052916,0.9927529096603394,0.9946781396865844,0.0,accept,unanimous_agreement
540103822,404,it was only working on fast clicks - if button release occurred more than 20ms after press then the hyperlink was followed. i have pushed an improved solution that works on any length click and also works if the focus is changed using the keyboard (e.g. ` `),0,0,0,0.971462070941925,0.9710386991500854,0.9903006553649902,0.0,accept,unanimous_agreement
570959963,446,"fyi, i am not expecting this to be merged, but i'm using it until #440 is fixed, and maybe someone else will find it useful.",0,0,0,0.5739445090293884,0.7392890453338623,0.6690744757652283,0.0,accept,unanimous_agreement
571091135,446,when this is installed you can create a custom shortcut which uses the new flag and reassigns `super + t` to get the behaviour you want.,0,0,0,0.9886000752449036,0.9920775294303894,0.9949570298194884,0.0,accept,unanimous_agreement
571335721,446,"closed by mistaked, reopened as #447.",0,0,0,0.9864702820777892,0.974539279937744,0.9723373651504515,0.0,accept,unanimous_agreement
572157176,448,"please could you resolve the conflict with master, thanks. also need to add some new release info to `data/io.elementary.terminal.appdata.xml.in`, under ""other updates"" i guess.",1,1,1,0.5683826804161072,0.8221315145492554,0.7863048315048218,1.0,accept,unanimous_agreement
573287003,448,rebased onto master/5.5.1.,0,0,0,0.9874792098999025,0.992450475692749,0.9947633743286132,0.0,accept,unanimous_agreement
629407256,448,please could you give a test case that produces different results in master in this pr?,0,0,0,0.9882045984268188,0.9922926425933838,0.99331396818161,0.0,accept,unanimous_agreement
696755343,448,closing as master seems to already work correctly and no counter-examples given. please feel free to reopen.,0,0,0,0.7859802842140198,0.972008466720581,0.6252044439315796,0.0,accept,unanimous_agreement
721398502,546,"the way to save and restore color schemes was pretty wild to follow, but this works within that—probably in a terrible way—to get this working at least. the behavior can be considered, and then we should probably clean a lot of the color scheme stuff up... feedback and help cleaning it up very welcome!",1,1,1,0.984286367893219,0.9895821809768676,0.9912258982658386,1.0,accept,unanimous_agreement
721400957,546,ah found some more bad things that i need to fix. :sweat_smile:,-1,-1,1,0.9071648716926576,0.6669408082962036,0.9902783036231996,-1.0,accept,majority_agreement
765648446,546,"i think this could use some refactoring still to be more clear, but it's _almost_ fully-functional. the one case i am still not handling is when `follow-system-style` is off and the style is mis-matched with the system, then `follow-system-style` is toggled on; for some reason, the background of the vte is not updated to match.",0,0,0,0.9816933274269104,0.9634335041046144,0.8938516974449158,0.0,accept,unanimous_agreement
1176523180,546,i attempted to merge master into this pr but i think it might be easier to start from scratch since substantial changes have been made to theme handling. do you agree?,0,0,0,0.965576946735382,0.9815173745155334,0.9754949808120728,0.0,accept,unanimous_agreement
