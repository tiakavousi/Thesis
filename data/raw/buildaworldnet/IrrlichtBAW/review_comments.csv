id,pr_number,user,created_at,body
317199142,358,devshgraphicsprogramming,2019-08-23T16:01:15Z,"you can just suck in the include files from core, io and asset 

no need for forward declarations"
317204001,358,devshgraphicsprogramming,2019-08-23T16:14:35Z,"list of extensions?

also where's your `IGPUShader` creation function?"
317204466,358,devshgraphicsprogramming,2019-08-23T16:15:45Z,why are you taking the entry point here? and stage?
317204823,358,devshgraphicsprogramming,2019-08-23T16:16:42Z,"`m_code` could store both SPIR-V and GLSL, using only `m_containsGLSL` to switch between them "
317207295,358,Crisspl,2019-08-23T16:23:23Z,"the less unnecessary `#include`s in header files, the lesser chance for circular deps"
317207429,358,Crisspl,2019-08-23T16:23:46Z,theres no list of extensions yet
317207820,358,Crisspl,2019-08-23T16:24:51Z,"hm, maybe i dont need to do this, i'll check"
317208019,358,Crisspl,2019-08-23T16:25:22Z,thats how it is ;)
317210769,358,devshgraphicsprogramming,2019-08-23T16:33:02Z,"well the rule is that core,io and asset shall not include anything from video namespace

`core::smart_refctd_ptr<T>` will break if T is forward declared but not defined."
317210924,358,devshgraphicsprogramming,2019-08-23T16:33:28Z,ok just make a stub struct/class
317211093,358,devshgraphicsprogramming,2019-08-23T16:33:57Z,you're gonna have that stuff in ISpecializationInfo/Data anyway right?
317211692,358,devshgraphicsprogramming,2019-08-23T16:35:40Z,"ok, so no need for an `std::stringc`, you can supply a utility function in `core::` to turn std::string&& into an `core::smart_refctd_ptr<core::ICPUBuffer>`

Bonus points if you use our ICPUBuffer derived class with allocator, so you could actually steal std::string's data + allocator"
317223646,358,Crisspl,2019-08-23T17:09:08Z,yea
317233950,358,devshgraphicsprogramming,2019-08-23T17:38:53Z,make override from io::IReadFile
317233970,358,devshgraphicsprogramming,2019-08-23T17:38:59Z,make override from io::IReadFile
317234639,358,devshgraphicsprogramming,2019-08-23T17:40:46Z,sure you want those public?
317235373,358,devshgraphicsprogramming,2019-08-23T17:42:42Z,why do you need the driver?
317254295,358,Crisspl,2019-08-23T18:32:12Z,"actually just for GLSL version.. so might as well get rid of that and put uint32_t parameter instead
(plus GL calls, but those are statics in COpenGLExtensionHandler so driver not really needed)"
317254438,358,Crisspl,2019-08-23T18:32:31Z,"well, yea"
317373024,358,devshgraphicsprogramming,2019-08-24T20:09:49Z,"kill this function, just let people set .Pipeline directly on materials"
317373047,358,devshgraphicsprogramming,2019-08-24T20:11:02Z,197+EST_COUNT*sizeof(const void*)
317373091,358,devshgraphicsprogramming,2019-08-24T20:12:17Z,the `IMaterialRenderer` class can get nuked.
317373109,358,devshgraphicsprogramming,2019-08-24T20:12:51Z,"don't comment out, use
```
#ifndef NEW_SHADERS
#endif
```

and #define NEW_SHADERS in irr compile config."
317373126,358,devshgraphicsprogramming,2019-08-24T20:13:39Z,nuke IGPUProgrammingServices
317373166,358,devshgraphicsprogramming,2019-08-24T20:15:27Z,"nuke E_MATERIAL_TYPE, but add the old 4 default shader combos as IGPUMaterials to IAssetManager's CPUtoGPU object cache and add associated ICPU* objects for them"
317373205,358,devshgraphicsprogramming,2019-08-24T20:17:23Z,"nuke callbacks, add a 256-byte aligned (move around parts of SMaterial as necessary to achieve 0 compiler padding + 256 byte alignment) uint8_t[128] array that will be then used for fetching push-constant data"
317373281,358,devshgraphicsprogramming,2019-08-24T20:20:10Z,I think it just called the appropriate call-back... see the definitions of `OnUnsetMaterial`
317373294,358,devshgraphicsprogramming,2019-08-24T20:20:41Z,did this do anything else other than call the callback?
317373322,358,devshgraphicsprogramming,2019-08-24T20:21:39Z,"would have  been a check for matching pipelines, basically can't change shader in the middle of xform feedback"
317373383,358,devshgraphicsprogramming,2019-08-24T20:24:31Z,in the future: sort by pipeline pointer
317373612,358,devshgraphicsprogramming,2019-08-24T20:36:10Z,ok but what do you need the version for?
320399762,358,devshgraphicsprogramming,2019-09-03T17:50:34Z,dont you need a different directive for Vulkan GLSL ?
320400981,358,devshgraphicsprogramming,2019-09-03T17:53:11Z,how does shaderc compile this without descriptor sets?
320401125,358,devshgraphicsprogramming,2019-09-03T17:53:33Z,"nice catch, is this also in my cleanup branch?"
320406453,358,Crisspl,2019-09-03T18:06:02Z,"nah, it's my fault from prev commit or something"
320406683,358,Crisspl,2019-09-03T18:06:41Z,if set is not specified than set=0 if that's what u mean
320406869,358,Crisspl,2019-09-03T18:07:11Z,hm?
320954820,358,Crisspl,2019-09-04T20:17:40Z,i think this is quite useful because it sets pipeline on all meshbuffers of mesh scene node
320955151,358,Crisspl,2019-09-04T20:18:28Z,what? i dont get it
320955552,358,Crisspl,2019-09-04T20:19:29Z,so what should i do with transform feedback? i mean this `NEW_MESHES` is not a solution
320956189,358,Crisspl,2019-09-04T20:21:02Z,is transform feedback non-optionally used in irrbaw somewhere behind the scenes? i have no idea about transform feedback
320956753,358,Crisspl,2019-09-04T20:22:22Z,"now after we decided to do pipelines etc, they should be 4x IGPUGraphicPipelines. right?"
320957363,358,Crisspl,2019-09-04T20:23:47Z,where should this uint8_t[128] live when we get rid of SMaterial?
320958097,358,Crisspl,2019-09-04T20:25:39Z,"from COpenGLSLmaterialRenderer:
```
    Driver->setBasicRenderStates(material, lastMaterial, resetAllRenderstates);

	if (material.Pipeline != lastMaterial.Pipeline || resetAllRenderstates)
	{
		if (BaseMaterial==EMT_TRANSPARENT_ADD_COLOR)
			glBlendFunc(GL_SRC_ALPHA, GL_ONE);
        else if (BaseMaterial==EMT_TRANSPARENT_ALPHA_CHANNEL||BaseMaterial==EMT_TRANSPARENT_VERTEX_ALPHA)
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	}
```"
323639400,358,devshgraphicsprogramming,2019-09-12T09:20:41Z,yes please
323641639,358,devshgraphicsprogramming,2019-09-12T09:25:44Z,there needs to be a query for driver feature if input attachments are supported on the GPU backend (only some OpenGL cards have this)
323641802,358,devshgraphicsprogramming,2019-09-12T09:26:07Z,we only support combined image samplers (with immutable samplers)
323642465,358,devshgraphicsprogramming,2019-09-12T09:27:39Z,"you have to provide the layouts at creation time with GPU objects, after that they're immutable"
323642589,358,devshgraphicsprogramming,2019-09-12T09:27:55Z,"only CPU object can have a setter, but do please add a getter to the parent class"
323643437,358,devshgraphicsprogramming,2019-09-12T09:29:42Z,here you can add setters and mutators
323643718,358,devshgraphicsprogramming,2019-09-12T09:30:19Z,need push constant ranges
323644432,358,devshgraphicsprogramming,2019-09-12T09:31:57Z,can `smart_refctd_dynamic_array` be NULL ?
323644748,358,devshgraphicsprogramming,2019-09-12T09:32:38Z,remove line loop and any other types not supported.
323644826,358,devshgraphicsprogramming,2019-09-12T09:32:45Z,add them
323646720,358,devshgraphicsprogramming,2019-09-12T09:36:43Z,"split this struct into 
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkVertexInputAttributeDescription.html
and
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkVertexInputBindingDescription.html

remove the `enabled` field"
323646817,358,devshgraphicsprogramming,2019-09-12T09:36:55Z,make sure `E_FORMAT` has a sizeof 4
323647360,358,devshgraphicsprogramming,2019-09-12T09:38:13Z,"only these are supported
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPrimitiveTopology.html"
323647463,358,devshgraphicsprogramming,2019-09-12T09:38:27Z,if enum could match that'd be awesome
323647638,358,devshgraphicsprogramming,2019-09-12T09:38:54Z,move old enum to legacy baw-format namespace (will need when converting blobs)
323647715,358,devshgraphicsprogramming,2019-09-12T09:39:03Z,E_PRIMITIVE_TOPOLOGY
323650045,358,devshgraphicsprogramming,2019-09-12T09:44:38Z,you can keep the `enabled` field in a separate array outside the struct but inside the layout.
323650450,358,devshgraphicsprogramming,2019-09-12T09:45:28Z,`perInstance` should match the flag from the vulkan struct in size and value.
323651178,358,devshgraphicsprogramming,2019-09-12T09:47:14Z,watch out for the size of `bool`
323653705,358,devshgraphicsprogramming,2019-09-12T09:53:00Z,"duplicate struct see:
https://github.com/buildaworldnet/IrrlichtBAW/pull/358/files/9be19a93a96b4b4a7b5e8ca08bb4a0499a0627cb..d3614c83502d55a0874029064eb163ba092c3056#r323653894
"
323653894,358,devshgraphicsprogramming,2019-09-12T09:53:28Z,"duplicate struct see:
https://github.com/buildaworldnet/IrrlichtBAW/pull/358/files/9be19a93a96b4b4a7b5e8ca08bb4a0499a0627cb..d3614c83502d55a0874029064eb163ba092c3056#r323653705"
323661503,358,devshgraphicsprogramming,2019-09-12T10:11:59Z,"encode anisotropy as a power of 2, so 3 bits needed only"
323679796,358,Crisspl,2019-09-12T11:01:33Z,what about it?
323682403,358,devshgraphicsprogramming,2019-09-12T11:09:25Z,provide a function to serialize and deserialize that bitfield struct... also check its size to be = 4 bytes
323682788,358,devshgraphicsprogramming,2019-09-12T11:10:40Z,I would make this struct private and provide getters/setters (because we dont want direct manipulation of bitfields
323682893,358,devshgraphicsprogramming,2019-09-12T11:10:58Z,also want type checking when setting bitfields
323691191,358,devshgraphicsprogramming,2019-09-12T11:34:29Z,"I'd keep the `enabled` vertex input and binding paramter separate, also use `EVAI_COUNT` instead of `16`"
323691813,358,devshgraphicsprogramming,2019-09-12T11:36:12Z,use enum count or something instead of just `5`
323692028,358,devshgraphicsprogramming,2019-09-12T11:36:46Z,keep link to parent pipeline (if any)
323692237,358,devshgraphicsprogramming,2019-09-12T11:37:16Z,might have to do that in derived classes.
323692568,358,devshgraphicsprogramming,2019-09-12T11:38:11Z,inherit from IPipeline for `mAllowDerivatives` and `mDisableOptimizations`
323692940,358,devshgraphicsprogramming,2019-09-12T11:39:12Z,move these to the end
323693181,358,devshgraphicsprogramming,2019-09-12T11:39:49Z,`static_assert` the size (for .baw serialization)
323693218,358,devshgraphicsprogramming,2019-09-12T11:39:55Z,`static_assert` the size (for .baw serialization)
323693454,358,devshgraphicsprogramming,2019-09-12T11:40:33Z,`static_assert` the size (for .baw serialization) and pack the struct
323693567,358,devshgraphicsprogramming,2019-09-12T11:40:51Z,use typed/sized enums in declarations
323693736,358,devshgraphicsprogramming,2019-09-12T11:41:21Z,change bools to bitfields?
323694796,358,devshgraphicsprogramming,2019-09-12T11:44:30Z,or at least in order grouped similar to vulkan structs we'll copy these into
323695152,358,devshgraphicsprogramming,2019-09-12T11:45:30Z,setters/getters (type checking) + serialization/deserialization to uint32_t for .baw
323695364,358,devshgraphicsprogramming,2019-09-12T11:46:10Z,replace the 8 with some meaningful constant name
323695699,358,devshgraphicsprogramming,2019-09-12T11:47:07Z,are you sure there are not more blend ops?
323696001,358,devshgraphicsprogramming,2019-09-12T11:47:54Z,could pack bool + enum into one uint32_t
323696065,358,devshgraphicsprogramming,2019-09-12T11:48:05Z,`static_assert` the size (for .baw serialization)
323696980,358,devshgraphicsprogramming,2019-09-12T11:50:39Z,"samplers will be created on a private IDriver cache (because of OpenGL we cant have true ""sampler"" objects that can be bound)."
323697812,358,devshgraphicsprogramming,2019-09-12T11:52:47Z,"I'd replace this with a `raw-pointer` + count, then rely on copying, not moving (to avoid malloc fragmentation)"
323698049,358,devshgraphicsprogramming,2019-09-12T11:53:17Z,plain begin and end iterator as input
323701101,358,devshgraphicsprogramming,2019-09-12T12:01:00Z,"I'd split this into two arrays, one for `SBinding` and one for `SSamplerParams` that the items in `SBinding` will point to if needed (if type is a combined image sampler with immutable samplers)

Because it won't be an array possibly containing arrays, it will be easier and faster to serialize/deserialize for .baw"
323703046,358,devshgraphicsprogramming,2019-09-12T12:06:20Z,"IDriver needs following methods:
- updateDescriptorSet

IVideoDriver can host the following for the time being:
- Allocate Descriptor Sets
- Bind Descriptor Sets
- Free Descriptor Sets"
323705793,358,devshgraphicsprogramming,2019-09-12T12:14:04Z,I'm killing it
323707594,358,devshgraphicsprogramming,2019-09-12T12:18:54Z,"`#ifndef` is a great solution ;) lets you know something is broken

Transform feedback is used for instancing + block stealing"
323707995,358,devshgraphicsprogramming,2019-09-12T12:19:58Z,"3x RenderpassIndependentGraphicsPipelines, the EMT_TRANSPARENT_VERTEX_ALPHA can go die."
323708120,358,devshgraphicsprogramming,2019-09-12T12:20:16Z,to the IMeshBuffer
323709071,358,devshgraphicsprogramming,2019-09-12T12:22:58Z,ok the IGPURenderPassIndependentPipeline will set this shit from now on.
323710156,358,devshgraphicsprogramming,2019-09-12T12:25:48Z,"I legit thought you need an `#extension` directive to declare this is a Vulkan shader, so you can use `gl_InstanceIndex` instead of `gl_InstanceID`"
323710400,358,devshgraphicsprogramming,2019-09-12T12:26:30Z,do shaders with `set=` qualifiers so its clear to users
323711816,358,devshgraphicsprogramming,2019-09-12T12:29:57Z,could add CRTP `PipelineType` for an `m_parentPipeline`
323712059,358,devshgraphicsprogramming,2019-09-12T12:30:34Z,that comes from `EVAI_COUNT` or did you remove `E_VERTEX_ATTRIBUTE_ID` ?
323714118,358,devshgraphicsprogramming,2019-09-12T12:35:28Z,"you need to use the `IRR_INLINE_STATIC_CONSTEXPR`macro, otherwise GCC freaks out"
323714246,358,devshgraphicsprogramming,2019-09-12T12:35:43Z,or not with CRTP
323715130,358,devshgraphicsprogramming,2019-09-12T12:37:55Z,"I'd like to have this struct be:
1. Packed
2. Take up a well defined amount of memory"
323715292,358,devshgraphicsprogramming,2019-09-12T12:38:18Z,"I'd still keep the enabled vertex input and binding paramter separate,"
323715881,358,devshgraphicsprogramming,2019-09-12T12:39:29Z,need mutators
323727531,358,devshgraphicsprogramming,2019-09-12T13:04:45Z,"We need an actual `IBufferView` + `ICPUBufferView : public IBufferView, public IAsset` and  `IGPUBufferView : public IBufferView`

In https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/IVirtualTexture.h
- Nuke `IVirtualTexture`
- Move all of its functionality into `IRenderableVirtualTexture`
- Rename the file but don't move it out of `./include`
- Replace every mention of `IVirtualTexture` in the engine with `IRenderableVirtualTexture`

Nuke 
https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/ITextureBufferObject.h
https://github.com/buildaworldnet/IrrlichtBAW/blob/master/source/Irrlicht/COpenGLTextureBufferObject.h
and replace them with
- IBufferView
- ICPUBufferView
- IGPUBufferView
- COpenGLBufferView 

Those can go into appropriate `./include/irr` and `./src` folders"
323731624,358,devshgraphicsprogramming,2019-09-12T13:13:02Z,"I have a compact storage idea:
1. Derive CPU and GPU  Textures, Buffers and BufferViews from an empty base abstract class `IDescriptor`
2. Derive `SDescriptor*Info` (and provide static_casting getters) from
```cpp
class IDescriptorInfo
{
   protected:
      IDescriptorInfo() = default;
      virtual ~IDescriptorInfo() = default;

      core::smart_refctd_ptr<IDescriptor> desc;
};
```
3. Only store one `core::smart_refctd_dynamic_array<IDescriptorInfo>` and static cast the `->data()` pointer as required depending on `descriptorType` "
323732020,358,devshgraphicsprogramming,2019-09-12T13:13:54Z,just delete the thing
323732386,358,devshgraphicsprogramming,2019-09-12T13:14:37Z,nuke all this
323732859,358,devshgraphicsprogramming,2019-09-12T13:15:37Z,smart pointer maybe?
323733295,358,devshgraphicsprogramming,2019-09-12T13:16:33Z,nuke this whole file
323733451,358,devshgraphicsprogramming,2019-09-12T13:16:50Z,nuke this whole file
323733594,358,devshgraphicsprogramming,2019-09-12T13:17:08Z,nuke whole file
323734727,358,devshgraphicsprogramming,2019-09-12T13:19:28Z,?
323742028,358,Crisspl,2019-09-12T13:33:29Z,what actually m_parentPipeline is? I skipped it in current code for now
323746448,358,Crisspl,2019-09-12T13:41:36Z,">the items in SBinding will point to if needed 

hm? how? i dont understand"
323747753,358,Crisspl,2019-09-12T13:43:57Z,a lot of extension-specific ones https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkBlendOp.html
323753680,358,Crisspl,2019-09-12T13:54:23Z,it's kinda weird because `offset` and `stride` are separated and `binding` is doubled..
323754582,358,Crisspl,2019-09-12T13:56:03Z,please elaborate on this
323789399,358,Crisspl,2019-09-12T14:57:45Z,">Rename the file but don't move it out of ./include

hm? which file?"
323814081,358,devshgraphicsprogramming,2019-09-12T15:42:35Z,"pointer to a pipeline that you can derive from, in Vulkan it doesn't actually tie the things together, its just supposed to make the creation quicker.

So think about validation, or shared shaders with same specialization, etc. 
Its essentially using an already created object as cache.

Maybe its not even necessary to hold the pointer to parent after creation/construction."
323814240,358,devshgraphicsprogramming,2019-09-12T15:42:51Z,IVirtualTexture
323817636,358,devshgraphicsprogramming,2019-09-12T15:49:14Z,"in Vulkan the layout contains information about the byte-ranges of push constant storage used (and by which shader)

Not the actual data to use nor backing storage for it, just an array of ranges (so the implementation can compute how much data needs to be reserved for a pipeline, and do some mappings, hopefully to registers).

For OpenGL we don't specifically need to know about the ranges used (since we always provide only 128 bytes of storage), but for Vulkan its mandatory.

Plus who knows? This sort of info may make the mapping between byte-offset to OpenGL non-UBO uniform easier!"
323820399,358,devshgraphicsprogramming,2019-09-12T15:54:38Z,"Its not really duplicated. Ok so you have

Attribute slot (vertex input ID) <-> Buffer Binding (API buffer input ID) <-> Buffer

This basically means that there's a switchboard for buffer connections. The duplication isnt really a duplication, first its a mapping of attribute input slot to binding, and then binding to buffer input.

I.e. you can predeclare that UV, Color, etc. attributes at inputs 1,2 come from buffer binding 1 with different offset and stride and Position+Normal attributes at inputs 0,3 come from buffer binding 0 with different offset and stride.

This is also why there is a relative-offset field, so you can use the same buffer binding for different attributes.

This allows for less API talk and faster switching (less validation). Possibly even vertex cache improvements on shitty half-assed implemententations.

Instead of the current system where its 1 buffer binding per 1 attribute "
323821392,358,devshgraphicsprogramming,2019-09-12T15:56:30Z,"you're missing `EBO_MAX`

Also reserve the correct amount of bits (in the raster struct) for all the extension-specific enums to come in the future."
323831000,358,devshgraphicsprogramming,2019-09-12T16:18:01Z,"```cpp
template<typename ConstIteratorType>
IDescriptorSetLayout::IDescriptorSetLayout(const ConstIteratorType& begin, const ConstIteratorType& end)
{
   size_t bindingCount = std::distance(_begin,_end);
   m_bindings = core::make_refctd_dynamic_array<SBinding>(bindingCount);
   // copy bindings and count immutable samplers
   size_t immSamplerCount = 0ull;
   auto outIt = m_bindings->begin();
   for (auto it=_begin; it!=_end; it++)
   {
      auto& output = *(outIt++);
      output = *it;
      if (it->type==EDT_COMBINED_IMAGE_SAMPLER && it->samplers)
      {
         // compute offset
         output.samplers = reinterpret_cast<SSamplerParams*>(nullptr)+immSamplerCount;
      }
   }

   m_samplers = core::make_smart_refctd_array<SSamplerParams>(immSamplerCount);
   auto outIt = m_bindings->begin();
   for (auto it=_begin; it!=_end; it++)
   {
      if (it->type==EDT_COMBINED_IMAGE_SAMPLER && it->samplers)
      {
         outIt->samplers += m_samplers.data();
         std::copy(it->samplers,it->samplers+it->count,outIt->samplers);
      }
      outIt++;
   }
}
```"
323859785,358,Crisspl,2019-09-12T17:26:22Z,spirv-cross needs it for downcompilation (it makes `#version` directive with it)
323926776,358,devshgraphicsprogramming,2019-09-12T20:08:38Z,can you just pass the version instead of the whole driver?
324160301,358,Crisspl,2019-09-13T12:02:06Z,also maybe you could explain it to me because i can find the info.. whats going on about that there can be more than one immutable samplers in one binding? How are they used if there are more than one?
324204192,358,Crisspl,2019-09-13T13:53:48Z,ah nvm XD i guess imm samples count must be equal to descriptor count (within binding)
324205151,358,devshgraphicsprogramming,2019-09-13T13:55:47Z,"> i guess imm samples count must be equal to descriptor count (within binding)

Yes exactly."
324208809,358,Crisspl,2019-09-13T14:03:57Z,hm do we want to have the same enum values as in Vulkan's enum?
324210325,358,devshgraphicsprogramming,2019-09-13T14:07:26Z,"nah, just enough bits to be able to store that amount of distinct enums"
324416115,358,devshgraphicsprogramming,2019-09-14T07:43:34Z,"do we have a query for supported formats for TBO?

Also call it `addBufferView`"
324416130,358,devshgraphicsprogramming,2019-09-14T07:44:05Z,why did we need `IDriver::remove*` functions in the first place and just not be able to `drop()` stuff?
324419832,358,devshgraphicsprogramming,2019-09-14T10:13:13Z,"you don't need a refcounted array here, just let people set it to plain pointers. You won't be holding that array after the function returns.

Only use refcounted pointers if you will hold the pointee after function returns."
324419867,358,devshgraphicsprogramming,2019-09-14T10:14:54Z,"you can already do the copy of attributes `type`,`count`,`stageFlags` in this loop and compute the first half of the offset as well."
324419910,358,devshgraphicsprogramming,2019-09-14T10:16:56Z,"isn't the syntax `core::make_refctd_dynamic_array<SPushConstantRange>` ?

Did I fuck up that function?"
324421016,358,devshgraphicsprogramming,2019-09-14T11:03:11Z,"make sure sizeof is 4, or use typed uint32_t enums"
324421081,358,devshgraphicsprogramming,2019-09-14T11:05:21Z,missing location and binding field (only one of tem can be implicit)
324421111,358,devshgraphicsprogramming,2019-09-14T11:06:18Z,"you dont have a `binding` field, that's necessary"
324421160,358,devshgraphicsprogramming,2019-09-14T11:07:54Z,"there's no need for a malloc'ed array, just store a `uint16_t enabledBindingFlags;` next to `enabledAttribFlags`
the max binding count is 16."
324421183,358,devshgraphicsprogramming,2019-09-14T11:08:21Z,anonymouse struct and serialize/deserialize methods
324421187,358,devshgraphicsprogramming,2019-09-14T11:08:36Z,you need more bits for the future blend ops
324421369,358,devshgraphicsprogramming,2019-09-14T11:15:03Z,ok we cant support separable sample from image
324421377,358,devshgraphicsprogramming,2019-09-14T11:15:25Z,cant support image/texture without smapler
324421397,358,devshgraphicsprogramming,2019-09-14T11:16:04Z,"we can support this in two ways:
- Descriptor set with immutable sampler
- Descriptor set with combined image+sampler"
324421573,358,devshgraphicsprogramming,2019-09-14T11:23:42Z,"don't set a max anymore, on anything"
324421576,358,devshgraphicsprogramming,2019-09-14T11:23:54Z,let us query
324421586,358,devshgraphicsprogramming,2019-09-14T11:24:21Z,"if you're gonna grab and drop things, use smart ptr"
324421647,358,devshgraphicsprogramming,2019-09-14T11:27:03Z,"`IVulkanPrebaked`is not correct cause descriptor set is mutable after creation (just not after bind, and there are extensions that take this constraint away)

Also don't use virtual inheritance when not needed"
324421665,358,devshgraphicsprogramming,2019-09-14T11:27:57Z,"same for the other objects.

Remember we want to use `EXT_descriptor_indexing` in the future."
324421684,358,devshgraphicsprogramming,2019-09-14T11:28:56Z,why havent we nuked this entire file yet?
324421688,358,devshgraphicsprogramming,2019-09-14T11:29:01Z,why havent we nuked this entire file yet?
324421694,358,devshgraphicsprogramming,2019-09-14T11:29:09Z,why havent we nuked this entire file yet?
324421720,358,devshgraphicsprogramming,2019-09-14T11:29:45Z,`.get()` ?
324421733,358,devshgraphicsprogramming,2019-09-14T11:30:21Z,EVTT_BUFFER_OBJECT should disappear from the engine
324421754,358,devshgraphicsprogramming,2019-09-14T11:31:26Z,"now that we have descriptor sets, this thing can be replaced in its entirety

(remember about the layout compatibility rules from vulkan spec!)"
324421834,358,devshgraphicsprogramming,2019-09-14T11:34:51Z,"http://vulkan-spec-chunked.ahcox.com/ch13s02.html
"
324421860,358,devshgraphicsprogramming,2019-09-14T11:36:05Z,"Also, there needs to be two separate caches in `CNullDriver` one for compute and one for graphics pipeline (changing descriptors on one shouldn't influence the other), but COpenGLDriver must make it play with the fact that there are no separate bind points for graphics and compute (changing the set changes both)"
324421931,358,devshgraphicsprogramming,2019-09-14T11:39:52Z,"This file/class shouldn't exist, there's no such thing as a ""Storage Image"" object in Vulkan, its just a binding in the descriptor set.
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorImageInfo.html

I know you need to create `ImageView`  OpenGL objects, but like VAOs they are non shareable between contexts, so need a driver-wide cache for them :(  with the key being `pair<IRenderableVirtualTexture*,GLuint/*Texture ID*/>` 

There is however a `ImageView` (same as Texture View in OpenGL) but thats my responsibility to implement."
324422061,358,devshgraphicsprogramming,2019-09-14T11:45:07Z,no a buffer view is not a texture!
324422137,358,devshgraphicsprogramming,2019-09-14T11:48:13Z,"~rebindRevalidate used to recreate the binding between the TBO object and a buffer that's changed on the OpenGL side, now if you detect a change you should just remove the TBO object , recreate it with the changes and then update the descriptor set (the descriptor set layout must be created with allow update after bind).~

Never mind, this is the driver not the skinned mesh.

I would recommend nuking `SAuxContext::setActiveTexture` and similar, then just introducing a `SAuxContext::setGraphicsPipeline`, `SAuxContext::setComputePipeline`, and `SAuxContext::setDescriptorSet`."
324422438,358,devshgraphicsprogramming,2019-09-14T12:00:45Z,(only in OpenGL and under the hood)
324430291,358,Crisspl,2019-09-14T16:51:17Z,"yea, it's temporary solution. But now I think that I can make only CopenglBufferView inherit from irenderablevirtualtexture. It has to be be like this because of SAuxContext::setActiveTexture()"
324430365,358,Crisspl,2019-09-14T16:53:50Z,this file shouldn't exist anyway
324430517,358,Crisspl,2019-09-14T16:57:56Z,">don't set a max anymore, on anything

what about vertex attrib buffer bindings (described by params in pipeline) in meshbuffer? Should there still be limit of 16 and relation binding_num=attrib_num?"
324430653,358,Crisspl,2019-09-14T17:02:16Z,so we still want to have max vertex attrib buffer bindings limit of 16?
324430688,358,Crisspl,2019-09-14T17:03:33Z,binding field is redundant because index in the array is supposed to denote binding num
324430740,358,Crisspl,2019-09-14T17:04:59Z,"nah, it's not :c"
324430808,358,Crisspl,2019-09-14T17:07:01Z,"hm, right, thanks"
324430848,358,Crisspl,2019-09-14T17:08:12Z,because they're cached in cnulldriver and remove*() removes the object from cache
324430881,358,Crisspl,2019-09-14T17:08:55Z,"nah, but there should be such. I'll make later"
324440354,358,devshgraphicsprogramming,2019-09-14T22:48:22Z,nuke `SAuxContext::setActiveTexture()`
324440359,358,devshgraphicsprogramming,2019-09-14T22:48:39Z,+1
324440386,358,devshgraphicsprogramming,2019-09-14T22:50:11Z,"As per our discord conversation, I do not believe there should ba a cache of already created objects... especially if they are actually shareable.

There's probably no reason for this cache to exist.
Or other caches."
324440392,358,devshgraphicsprogramming,2019-09-14T22:50:31Z,lemme know when changed.
324440396,358,devshgraphicsprogramming,2019-09-14T22:50:48Z,so I fucked up ?
324440409,358,devshgraphicsprogramming,2019-09-14T22:51:27Z,"nope, the index in the array denotes the `location` not the binding (which buffer binding provides the attribute for the current location)"
324440421,358,devshgraphicsprogramming,2019-09-14T22:51:58Z,"theoretically they could be different (one lower, one higher) but they are usually not so."
324440442,358,devshgraphicsprogramming,2019-09-14T22:53:06Z,"yes, vertex attrib buffer bindings are not descriptors. Neither are subpass inputs (really).

Other bindings with `EXT_descriptor_indexing` you could have 512k textures bound at once."
324440448,358,devshgraphicsprogramming,2019-09-14T22:53:23Z,IDescriptorSet ?
324467401,358,Crisspl,2019-09-15T15:03:36Z,"yes, its not mine. Mine is in include/irr/asset"
324467546,358,Crisspl,2019-09-15T15:06:40Z,so there still limit of 16 attrib buffer bindings? then why array index cannot denote binding num?
324467676,358,Crisspl,2019-09-15T15:10:09Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r324440409
until now we had convention that binding_num=location (attrib num). so why would we drop this if nothing changes here?"
324477803,358,devshgraphicsprogramming,2019-09-15T19:38:48Z,"sorry, it must be an abomination created by me"
324477827,358,devshgraphicsprogramming,2019-09-15T19:39:17Z,">until now we had convention that binding_num=location (attrib num). so why would we drop this if nothing changes here? 

This will no longer be our contention"
324477844,358,devshgraphicsprogramming,2019-09-15T19:39:36Z,"> so there still limit of 16 attrib buffer bindings? then why array index cannot denote binding num?

Faster buffer rebinding, probably better hardware cache usage."
324607370,358,Crisspl,2019-09-16T10:42:26Z,why actually?
324615222,358,devshgraphicsprogramming,2019-09-16T11:04:02Z,"because you'll be setting the entire descriptor set at once, and the descriptors bound in previous bindings determine the GL-bindings of the textures you'll be setting as the result "
324617611,358,Crisspl,2019-09-16T11:11:11Z,"apparently, if you wanted it differently. See your code with usage of it: https://github.com/Crisspl/IrrlichtBAW/blob/shaders/include/irr/video/IGPUObjectFromAssetConverter.h#L44"
324621497,358,devshgraphicsprogramming,2019-09-16T11:21:58Z,"I think I've fucked up slightly

would have been more sane to use`core::make_refctd_dynamic_array<core::smart_refctd_ptr<typename video::asset_traits<AssetType>::GPUObjectType> >` on that particular line and throughout the engine"
324622278,358,devshgraphicsprogramming,2019-09-16T11:24:22Z,"actually no I didn't fuck up, had to have it like that so `make_refctd_dynamic_array` could be used to create both `smart_refctd_dynamic_array` and `refctd_dynamic_array`s
"
324728435,358,devshgraphicsprogramming,2019-09-16T15:06:22Z,these could be uint8_t and some others
324728515,358,devshgraphicsprogramming,2019-09-16T15:06:32Z,any reason not to?
324729606,358,devshgraphicsprogramming,2019-09-16T15:08:22Z,"actually will be 6, because bitfield can't straddle type boundaries"
324735490,358,devshgraphicsprogramming,2019-09-16T15:19:42Z,"remember there is also a per-meshbuffer buffer binding offset to be implemented
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkCmdBindVertexBuffers.html"
324736048,358,devshgraphicsprogramming,2019-09-16T15:20:47Z,call this field `relativeoffset` also could fit this and `binding` in a `uint16_t` because there are limits for each value much lower than 64k
324744669,358,devshgraphicsprogramming,2019-09-16T15:37:16Z,need offsets as well
324747401,358,devshgraphicsprogramming,2019-09-16T15:42:42Z,handle ID > MAX
324747453,358,devshgraphicsprogramming,2019-09-16T15:42:47Z,handle ID > MAX
324750913,358,devshgraphicsprogramming,2019-09-16T15:49:30Z,alignas to AVX512
324751323,358,devshgraphicsprogramming,2019-09-16T15:50:22Z,why the push constants only in IGPUMeshBuffer and not ICPUMeshBuffer ?
324861734,358,Crisspl,2019-09-16T20:06:58Z,because they're dynamic thing (most likely changes very often) so i think exporting them (as asset to file) is rather pointless
324889042,358,devshgraphicsprogramming,2019-09-16T21:14:48Z,keeping a cache with a key of raw-pointer will necessitate ICPUShaders letting know the `CShaderIntrospector` that they're being destroyed... maybe a smart pointer would be better (but then you need methods to kill the cache entries)
324890213,358,devshgraphicsprogramming,2019-09-16T21:17:49Z,I don't want to see grab and drops in the engine anymore
324890240,358,devshgraphicsprogramming,2019-09-16T21:17:53Z,I don't want to see grab and drops in the engine anymore
324890812,358,devshgraphicsprogramming,2019-09-16T21:19:26Z,why isn't `doIntrospection` returning a `core::smart_refctd_ptr<CIntrospectionData>`  right away?
324893003,358,devshgraphicsprogramming,2019-09-16T21:25:06Z,"`asset` namespace violation (cannot depend on `video`)... just analyse whether the SPIR-V had debug info and `assert` that it did.

Also doesn't the requirement that debug info is available make it impossible to use .spv pulled off the web?"
324893390,358,devshgraphicsprogramming,2019-09-16T21:26:09Z,pass the version instead of whole driver... also should the Version be a static var of `COpenGLExtensionHandler` ?
324893921,358,devshgraphicsprogramming,2019-09-16T21:27:38Z,actually you need to introspect if the layout qualifier `row_major` applies to that particular push_constant
324894203,358,devshgraphicsprogramming,2019-09-16T21:28:22Z,"`vector` is a malloc, use an `std::array` with an upper bound in size"
324894309,358,devshgraphicsprogramming,2019-09-16T21:28:38Z,or some stack scratch space
324894445,358,devshgraphicsprogramming,2019-09-16T21:28:55Z,dont use vector
324897190,358,devshgraphicsprogramming,2019-09-16T21:36:54Z,"remember that if `top.name` is the name of a variable thats an array you need to query for `top.name+""[0]""`"
324897866,358,devshgraphicsprogramming,2019-09-16T21:38:57Z,find out if the offsets into the push_constant range need to be somehow aligned for the types (on the GLSL side) and put some assertions here
324898078,358,devshgraphicsprogramming,2019-09-16T21:39:34Z,how are the uniforms sorted? by location or by offset in pc-range?
324907070,358,devshgraphicsprogramming,2019-09-16T22:07:56Z,"there's probably no harm in being able serializing them... plus actually their use can be very very static (non-dynamic)

Because of a desire to re-use command buffers, and once recorded PCs can't change (have to record another cmd buffer), so I'd actually see them being used for super high-frequency (less overhead than dynamic UBO offset) but small and static (for the mesh) data, such as ObjectIDs, material IDs, colors, booleans, and other switches."
324934255,358,Crisspl,2019-09-17T00:05:03Z,"I would if someone could give me upper bound :P really, is there any expectable?"
324934356,358,Crisspl,2019-09-17T00:05:35Z,"oh, right, thx"
324934699,358,Crisspl,2019-09-17T00:07:16Z,"_pcData is supposed to be already offset'd range of those 128 bytes, but not sure if I understand u correctly"
324934986,358,Crisspl,2019-09-17T00:08:50Z,"I haven't tried to make them sorted anyhow, but seems like they are in order they appear in uniform block, so location"
324935434,358,Crisspl,2019-09-17T00:11:13Z,"yea, I thought about that, but left it for tomorrow. Actually there are spv decorations for it, it's nice. I'll add to introspection data"
324935818,358,Crisspl,2019-09-17T00:13:21Z,"k
>also should the Version be a static var of COpenGLExtensionHandler

I don't like global vars so ill make a parameter for it anyway"
324936331,358,Crisspl,2019-09-17T00:15:51Z,">Also doesn't the requirement that debug info is available make it impossible to use .spv pulled off the web?

yes, I wrote it in the docs in iglslcompiler, but there's no other way to set push constants in opengl backend"
324936534,358,Crisspl,2019-09-17T00:16:48Z,because it doesn't need to.. no greater purpose really
324937120,358,Crisspl,2019-09-17T00:20:07Z,"well, pointer is just an integer and introspector isn't trying to access pointed address. There's no need of knowing whether the ICPUShader actually exist"
325040305,358,devshgraphicsprogramming,2019-09-17T08:26:31Z,128 bytes?
325040874,358,devshgraphicsprogramming,2019-09-17T08:27:50Z,"Im pretty sure that the `col` pointer needs to have ome sort of alignment before you pass it to setUniform, i.e. 4 bytes or something"
325040979,358,devshgraphicsprogramming,2019-09-17T08:28:02Z,I'd sort them
325041219,358,devshgraphicsprogramming,2019-09-17T08:28:32Z,+1
325041793,358,devshgraphicsprogramming,2019-09-17T08:29:52Z,"yes, you can just make the production of debug data default to true + assert or fail to produce the opengl gpu shader if introspection tells us there are push constants but no debug data to know their names."
325042034,358,devshgraphicsprogramming,2019-09-17T08:30:27Z,preventing memleaks?
325042669,358,devshgraphicsprogramming,2019-09-17T08:31:50Z,"you do realize that if I create,drop and recreate ICPUShader I may end up with the same pointer but different shader contents ?"
325173349,358,Crisspl,2019-09-17T13:42:34Z,so max size of 4x4 matrix array is 2? i dont get it
325185538,358,Crisspl,2019-09-17T14:03:36Z,">also could fit this and binding in a uint16_t because there are limits for each value much lower than 64k

most of these are 32bits because i'm trying to make them look as close as possible to Vulkan's structs"
325186306,358,Crisspl,2019-09-17T14:04:50Z,"hm, yea, so ill better make introspector hold them"
325215968,358,devshgraphicsprogramming,2019-09-17T14:54:10Z,"yes, if our max size of push constant data supported by the engine is 128, then you can have max 2 matrices."
325216492,358,devshgraphicsprogramming,2019-09-17T14:55:02Z,then you also need functions to purge this cache (so creating ICPUShader does not create actual memory leaks)
325216996,358,devshgraphicsprogramming,2019-09-17T14:55:52Z,we won't be able to `memcpy` this into a vulkan struct anyway cause `E_FORMAT` doesn't match `VkFormat`
325256303,358,Crisspl,2019-09-17T16:06:30Z,"i was thinking totally in abstraction of this.. Ok, doable if we have some global constant with max push constants bytesize"
325263786,358,devshgraphicsprogramming,2019-09-17T16:21:34Z,"yeah best that way, so no alloc here, this is the hot loop"
325266560,358,devshgraphicsprogramming,2019-09-17T16:27:31Z,"can we precompute these name strings, don't want any alloc calls in `setUniformsImitatingPushConstants`"
325266699,358,devshgraphicsprogramming,2019-09-17T16:27:50Z,can we actually precompute as much as possible?
325266799,358,devshgraphicsprogramming,2019-09-17T16:28:04Z,why is this happenning every time we want to set push constants?
325280801,358,devshgraphicsprogramming,2019-09-17T16:59:11Z,alignas(64) and switch places with other members (so we're not wasting lot of space on padding)
325287109,358,Crisspl,2019-09-17T17:14:12Z,"it's not, it's in `buildUniformList()`"
325287555,358,Crisspl,2019-09-17T17:15:14Z,"they're precomputed, it's in `buildUniformList()`"
325300157,358,devshgraphicsprogramming,2019-09-17T17:43:25Z,ah ok github messed up
325421920,358,Crisspl,2019-09-17T23:03:12Z,tell me what d you think about this
325421968,358,Crisspl,2019-09-17T23:03:26Z,and what do you think about this
325539427,358,devshgraphicsprogramming,2019-09-18T08:14:51Z,"why do you need this cache in the first place?

make a `removeFromCache(COpenGLSpecializedShader)` and `clearCache()`"
325545068,358,devshgraphicsprogramming,2019-09-18T08:27:47Z,maybe make a `clone` method to create a new shader handle?
325551315,358,devshgraphicsprogramming,2019-09-18T08:41:59Z,@Crisspl ?
325551329,358,devshgraphicsprogramming,2019-09-18T08:42:01Z,@Crisspl ?
325568207,358,devshgraphicsprogramming,2019-09-18T09:17:30Z,"Actually Shader Objects are special, they can be shared.

So you can create and delete copies on different contexts than you're using, plus you can transfer the object from a dead context to a live context.

So technically speaking you don't really need a cache, just a mapping from live context to a shader slot (or some uint in range from 0 to `SCreationParameters::AxuGLContexts-1`) that will never change for a live context due to intialization and deinitialization of other contexts.

I used to have (in previous revisions) an ID assignment routine here to get this sort of mapping
https://github.com/buildaworldnet/IrrlichtBAW/blob/master/source/Irrlicht/COpenGLDriver.cpp#L465"
325571256,358,devshgraphicsprogramming,2019-09-18T09:24:09Z,"there might not be a need for such a cache after all, just an array of handles inside COpenGLSpecializedShader, that ""hopefully"" get a deferred intialization (if not you can create all copies at once)"
325707974,358,Crisspl,2019-09-18T14:26:52Z,"ok, it makes stuff easier. However theres going to be similar problems with VAOs, pipelines and FBOs. Also: for the ones aforementioned we have to make sure that once created GL object by thread A, gets deleted by thread A. So i think we might need per-thread/ctx refcounting inside some `COpenGL*` objects (pipeline, framebuffer). That way we could guarantee that GL object is being deleted in the same thread which created it as long as user makes proper amount of drops in relation to grabs. What troubles me is what if the last ref is held by cpu->gpu cache and most likely will be dropped in IAssetManager's destructor when app terminates.."
325708902,358,Crisspl,2019-09-18T14:28:28Z,"wait, when actually SAuxContext is being destroyed?"
325711309,358,Crisspl,2019-09-18T14:32:41Z,Or rather: when SAuxContext::ctx is being destroyed?
325711468,358,devshgraphicsprogramming,2019-09-18T14:32:58Z,"> wait, when actually SAuxContext is being destroyed?

When you call `COpenGLDriver::deinitAuxGLContexts` from the thread associated with `SAuxContexts`"
325715797,358,devshgraphicsprogramming,2019-09-18T14:40:19Z,"> So i think we might need per-thread/ctx refcounting inside some COpenGL* objects (pipeline, framebuffer). That way we could guarantee that GL object is being deleted in the same thread which created it as long as user makes proper amount of drops in relation to grabs. What troubles me is what if the last ref is held by cpu->gpu cache and most likely will be dropped in IAssetManager's destructor when app terminates..

For all cases but per-context shader copies.

This is why its best to cache `<GPUObjectHash,OpenGLHandle>` not `<GPUObjectPtr,OpenGLHandle>` because:
- you only care that the hash matches (multiple GPU objects can share the same OpenGL object)
- you don't care about mutability concerns (object changes = hash changes, you don't give a fuck)
- you don't care about lifetime of an object (object dies, caches object stays)

You can then periodically clear this cache according to LRU policy, you just set the max count of objects, if you get above that when retrieving an object, just delete the old ones + provide a function to clear these caches."
325716500,358,devshgraphicsprogramming,2019-09-18T14:41:24Z,"make this a driver method, may use this for other stuff."
325719732,358,devshgraphicsprogramming,2019-09-18T14:46:46Z,"as in get the ID

I see it working like this
```
COpenGLDriver* driver;
auto id = driver->getContextID(std::thread::id); /* or SAuxContext::contextID */
GLuint shaderHandle = specialized_shader->getGLnameForCtxID(id);
```

otherwise I see this becoming a problem when contexts are created and destroyed.

Btw main context will always be ID = 0  so first compilation (not from binary) can be stored there"
325720309,358,devshgraphicsprogramming,2019-09-18T14:47:33Z,this mutex can go to `COpenGLDriver`... oh wait it already has one when you're trying to get  the correct `SAuxContext`
325721054,358,devshgraphicsprogramming,2019-09-18T14:48:32Z,a plain and length-immutable `GLuint* mGLnames` would be more appropriate
325727423,358,Crisspl,2019-09-18T14:59:02Z,"yea, but i dont have to block whole `getThreadContext()` just to get one GL name from one specific shader. It's shader-local for a reason"
325729633,358,Crisspl,2019-09-18T15:02:31Z,"it's shader-local for a reason, i cant make it driver method because it searches shader's member array"
325732056,358,devshgraphicsprogramming,2019-09-18T15:06:31Z,lets have a global ID between 0 and the max context count-1 that is assinged to context 
326038144,358,devshgraphicsprogramming,2019-09-19T08:00:48Z,"this class shouldn't be making the OpenGL pipeline object... since its per-thread, just store/compute the hash and refcount the stages etc. hooked up to it"
326169899,358,Crisspl,2019-09-19T13:21:21Z,"(it's not my file, all mine lives in include/irr/...)
However.. there is VkImage https://vulkan.lunarg.com/doc/view/1.0.33.0/linux/vkspec.chunked/ch11s03.html and we need some class describing such binding (texture object + something `VkImageCreateInfo`-like) in order to bind ""storage images"" (GLSL's `image2D` etc). Otherwise we can't know miplevel and layer to bind."
326430928,358,Crisspl,2019-09-20T00:18:04Z,"yea, thats comfy. I wonder if hash for pipelines could be just 5 bits (present/absent shader stage) and treat it similarly to like VAOs are treated now (that is: 1) find VAO with matching active attribs and divisors; 2) rebind index and vertex buffers (modify GL vao state) ) ? That would mean max of 32 possible hash values (actually even less) so no need for any LRU cache"
326549334,358,devshgraphicsprogramming,2019-09-20T09:36:49Z,"Ok so nuke this file, its probably one of my stubs.

Also you don't need a VkImageCreateInfo, just `vkDescriptorImageInfo`
http://vulkan-spec-chunked.ahcox.com/ch13s02.html"
326553356,358,devshgraphicsprogramming,2019-09-20T09:46:56Z,"You can ignore ImageLayout for now, but take a loot into this:
- If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView and imageLayout members of any given element of pImageInfo must be a valid VkImageView and VkImageLayout, respectively 
- If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of any given element of pImageInfo must have been created with the identity swizzle

Basically in Vulkan, you cannot use a texture (VkImage) directly, only via ImageViews (OpenGL Texture Views). This allows you to use ARB_multibind for storage images because the mip level and layer is always 0 ;)

Create a stub `asset::ImageView`,`asset::ICPUImageView` and `video::IGPUImageView` but only as a stub... I'll sort it out later in  #148 and https://github.com/buildaworldnet/IrrlichtBAW/projects/15"
326553862,358,devshgraphicsprogramming,2019-09-20T09:48:17Z,"no, it cant be like that. because VAO does not give a shit about which buffer is bound (cause they'll be rebound all the time).

Pipeline very much gives a shit about which shaders are bound (lots and lots of validation)"
326555063,358,devshgraphicsprogramming,2019-09-20T09:51:19Z,"well it can help create, but nothing more"
326556113,358,devshgraphicsprogramming,2019-09-20T09:54:11Z,"wrong chain of inheritance, make a `class asset::IBuffer : public core::IBuffer, public asset::IDescriptor {};`"
326556229,358,devshgraphicsprogramming,2019-09-20T09:54:32Z,"you probably have an uncomitted file, can't find it in the tree"
326556594,358,devshgraphicsprogramming,2019-09-20T09:55:27Z,"this is only temporary, I'll have to add an `IImageView` class"
326556799,358,devshgraphicsprogramming,2019-09-20T09:55:57Z,"yeah, about that chain of inheritance"
326556897,358,devshgraphicsprogramming,2019-09-20T09:56:15Z,also temporary
326557321,358,devshgraphicsprogramming,2019-09-20T09:57:22Z,"nope, not all at once, do a 
`setActiveDescriptorSet(uint32_t index, const COpenGLDescriptorSet* descSet)`"
326557597,358,devshgraphicsprogramming,2019-09-20T09:57:59Z,"can use multibind actually, as we'll force the usage of texture views"
326557789,358,devshgraphicsprogramming,2019-09-20T09:58:29Z,nuke set active texture
326557890,358,devshgraphicsprogramming,2019-09-20T09:58:42Z,"sampler objects are actually shareable, so nuke."
326561994,358,devshgraphicsprogramming,2019-09-20T10:09:56Z,union?
326562404,358,devshgraphicsprogramming,2019-09-20T10:10:57Z,you can introduce sampler object (in OpenGL its shareable)
326562822,358,devshgraphicsprogramming,2019-09-20T10:12:01Z,"try not to ever use random integer literals, even if you know what they mean... constexpr is the shit."
326564884,358,devshgraphicsprogramming,2019-09-20T10:17:47Z,"there's a thing called dynamic UBO and SSBO in vulkan, you bind the buffers to descriptor sets (already baked in) but are able to change the offsets at runtime with very little overhead when you bind the sets to the commandbuffer / pipeline"
326566259,358,devshgraphicsprogramming,2019-09-20T10:21:43Z,"its not, layer and levels can be 0 if you use a texture view. `layered` is always true for ARB_multibind and the shader itself declares the access and format."
326566376,358,devshgraphicsprogramming,2019-09-20T10:22:00Z,can use same struct as `SMultibindTextures`
326568009,358,devshgraphicsprogramming,2019-09-20T10:27:04Z,need to support dynamic uniform and storage buffers in the whole engine!
326568161,358,devshgraphicsprogramming,2019-09-20T10:27:31Z,missing storage image and storage texel buffer
326720106,358,devshgraphicsprogramming,2019-09-20T17:01:41Z,you need a `virtual getType` and a descriptor type enum
326720330,358,devshgraphicsprogramming,2019-09-20T17:02:23Z,you need a common base class for `ICPUTextureView` and `IGPUTextureView` that will inherit from `IDescriptor`
326720773,358,devshgraphicsprogramming,2019-09-20T17:03:46Z,"yes, only from `COpenGLBufferView`"
326920717,358,Crisspl,2019-09-22T21:36:32Z,"not a good idea because resources can be bound to more than one descriptor types. Especially buffers: ssbo, ubo, dynamic ssbo, dynamic ubo"
326920758,358,Crisspl,2019-09-22T21:37:42Z,Now descriptor type is in IDescriptorSet::SWriteDescriptorSet::descriptorType and it's sufficient for this
326996142,358,devshgraphicsprogramming,2019-09-23T08:28:15Z,"maybe try to reorganise so scene comes last, buffer view and texture before  descriptor layout,  descriptor layout before pipeline layout, and descriptor set after pipeline layout, then the pipelines"
326996286,358,devshgraphicsprogramming,2019-09-23T08:28:37Z,`1ull`
326996673,358,devshgraphicsprogramming,2019-09-23T08:29:30Z,@Crisspl still need those mutators so we can actually mutate the contents
326997184,358,devshgraphicsprogramming,2019-09-23T08:30:50Z,@Crisspl need an `ITextureView` at leat as a stub
326997498,358,devshgraphicsprogramming,2019-09-23T08:31:42Z,"the size is only the creation parameters (mip range, layer range, format, and handle to actual texture to create view from, have I missed anything?)"
326998675,358,devshgraphicsprogramming,2019-09-23T08:35:01Z,"First check if `ds` is actually different to previously bound (just check by pointer), then you can proceed.

then check for compatible layouts and the descriptor set preservation rules... unset higher indices if necessary. Handle a `null` that is empty descriptor set case."
326998749,358,devshgraphicsprogramming,2019-09-23T08:35:12Z,if null you need to unbind everything.
327009887,358,devshgraphicsprogramming,2019-09-23T09:01:46Z,"> not a good idea because resources can be bound to more than one descriptor types. Especially buffers: ssbo, ubo, dynamic ssbo, dynamic ubo

Ok"
327012827,358,devshgraphicsprogramming,2019-09-23T09:09:17Z,"here's a way to do it #25 

Ideally you want to protect every OpenGL call that is likely to happen every frame (so almost all done by COpenGLDriver) with `if (nextValue!=currentValue)` so that you're not pounding OpenGL calls pointlessly.

When you want to change OpenGL state (current pipeline, ROP params, VAO, VAO input buffers, etc. ), dont actually change it straight away, have a deferred change mechanism.

Obviously there are a few exceptions that cannot be done like this, most notably setting framebuffers and push constants (these need to be immediate, not deferred). Sidenote, framebuffer change is a big call with big cost, so users will be careful not to call it recklessly.

Basically you want to avoid a performance penalty when user or implementation sets descriptor bindings to null, and then binds own descriptor sets. Same for VAO, and VAO buffer bindings, etc.
Because what would happen, is first (probably multiple) `extGlBind*(0)` calls before a bind call that actually binds an object.

What you want to do, is to track some of the state (not all OpenGL state) that is relevant to things you're going to be deferring.
So you have a current-state (last flushed) cache, and a next-state cache (values that you will set to if `flushState` is called). Then when your `setActiveDescriptorSet` and similar calls take place, you modify the ""next-state"" (which holds opengl values you will change to).
This means that while your smart pointers to front irr API objects may change, etc. OpenGL will not be called until it is time. Only when you call `flushState` will you check if next OpenGL values are different from current OpenGL values and call the OpenGL functions if necessary, then update the current state values.

**Don't worry about OpenGL objects being deleted while having their handles on ""next-state"" thats a user error.**

Implement a `SAuxContext::flushState(SAuxContext::GL_STATE_BITS, COpenGLState* optOutCurrentState)` that will change the current state to next-state and fill out the COpenGLState (already in the engine) class/struct with appropriate data (so it doesn't need to `glGet` query it).

Expose an `IDriver::flushAllState()` that will call `SAuxContext::flushState(SAuxContext::GSB_ALL,nullptr)` under the hood. People won't usually have to call that, as push constants, {multi}dispatch{indirect} and {multi}draw{indirect} will do it under the hood for them. 

My proposal for the flags is (you should also flush/update the OpenGL state in the order of the flags, most costly to least)
```cpp
enum GL_STATE_BITS
{
   // has to be flushed before constants are pushed (before `extGlProgramUniform*`)
   GSB_PIPELINE=0x1u,
   // (all stancil, depth, etc state) change just before draw
   GSB_RASTER_PARAMETERS=0x2u,
   // we want the two to happen together and just before a draw (set VAO first, then binding)
   GSB_VAO_AND_VERTEX_INPUT=0x4u,
   // flush just before (indirect)dispatch or (multi)(indirect)draw, textures and samplers first, then storage image, then SSBO, finally UBO
   GSB_DESCRIPTOR_SETS=0x8u,
   // flush everything
   GSB_ALL=~0x0u
};
```

Also a `SAuxContext::notifyOfState(const COpenGLState& externallyChangedState)` could be useful for interop with middlewares (set the current state cache to that which is reported)."
327014646,358,devshgraphicsprogramming,2019-09-23T09:13:49Z,"no, no, no, no, no

dynamic offset is NOT part of the descriptor set state

you pass dynamic offsets in when you bind descriptor set in a command buffer (IVideoDriver for now)"
327016798,358,devshgraphicsprogramming,2019-09-23T09:19:17Z,"you apply the extra offset when binding the descriptor set in `COpenGLDriver` not here, because the dynamic offset is not part of the descriptor set state!"
327371976,358,devshgraphicsprogramming,2019-09-23T23:27:28Z,Vulkan has no polygon offset? How are we going to do shadows?
327372780,358,devshgraphicsprogramming,2019-09-23T23:31:09Z,"dont fuck around with this optimization, if I change every other buffer in a set of 32, you'll be calling multibind 16 times.

If you really need to optimize then try and trim the front and the back of the range"
327372892,358,devshgraphicsprogramming,2019-09-23T23:31:43Z,try and find ONE first and ONE count for ONE call
327372920,358,devshgraphicsprogramming,2019-09-23T23:31:49Z,same comment as for the buffer multibind
327372976,358,devshgraphicsprogramming,2019-09-23T23:32:03Z,same as for the buffer multibind
327373094,358,devshgraphicsprogramming,2019-09-23T23:32:42Z,most of this is in my rather cumbersome `COpenGLState` class
327373300,358,devshgraphicsprogramming,2019-09-23T23:33:44Z,dont use constant literals for all the array sizes
327373751,358,devshgraphicsprogramming,2019-09-23T23:35:44Z,"the number of available bind points on high-end cards for those is absolutely huge, don't store bound textures, just store descriptor set pointers."
327373884,358,devshgraphicsprogramming,2019-09-23T23:36:29Z,"Actually storing and shadowing all the bindpoints might be a huge overhead, just store descriptor set pointers and multibind everything if desc-set changes"
327374064,358,devshgraphicsprogramming,2019-09-23T23:37:22Z,@Crisspl introduce sampler objects (make descriptor set layout {immutable} and descriptor sets {combined image} take the object instead of SSamplerParams) and nuke this
327378060,358,Crisspl,2019-09-23T23:55:50Z,"ofc it has, it's a todo because in OpenGL it's scattered on 3 glEnable-s"
327378908,358,Crisspl,2019-09-24T00:00:26Z,"this one is a little tricky, that's why im creating extra `texTagets` array here. For example: if previously in tex unit X was 2D texture and now we're going to bind 3D texture to tex unit X (or unbind anything - that is ""bind"" 0) i have to unbind texture 2D first and then bind the new one."
327389923,358,Crisspl,2019-09-24T01:05:17Z,"yea, I was going to do it for quite some time. I wanted to do it today, but will be tomorrow "
327392368,358,Crisspl,2019-09-24T01:20:38Z,yea that's why I called it dirty
327560167,358,devshgraphicsprogramming,2019-09-24T11:24:49Z,provide a `operator<` you are going to have so few elements in the cache that `unordered_map` will be slower than `map`
327560671,358,devshgraphicsprogramming,2019-09-24T11:26:13Z,you can put this in `attribFormatAndComponentCount` as special value `ECF_UNKNOWN`
327561076,358,devshgraphicsprogramming,2019-09-24T11:27:19Z,we could experiment yes vs no
327561163,358,devshgraphicsprogramming,2019-09-24T11:27:33Z,but my guess is to include
328008471,358,devshgraphicsprogramming,2019-09-25T09:01:09Z,why do you even need these arrays?
328009156,358,devshgraphicsprogramming,2019-09-25T09:02:38Z,"smart refcounted pointer, you dont want the system to go tits up because it was dropped because reference was not being held onto while its still set as current or next"
328009251,358,devshgraphicsprogramming,2019-09-25T09:02:50Z,wait why?
328009416,358,devshgraphicsprogramming,2019-09-25T09:03:12Z,why is it s veector and not a map?
328011398,358,devshgraphicsprogramming,2019-09-25T09:07:56Z,@Crisspl TODO
328011674,358,devshgraphicsprogramming,2019-09-25T09:08:36Z,@Crisspl TODO
328011874,358,devshgraphicsprogramming,2019-09-25T09:09:08Z,@Crisspl nuked yet?
328012094,358,devshgraphicsprogramming,2019-09-25T09:09:37Z,@Crisspl TODO
328012789,358,devshgraphicsprogramming,2019-09-25T09:11:08Z,"@Crisspl could sort by pipeline shaders, then raster parameters, then descriptor set pointers"
328012902,358,devshgraphicsprogramming,2019-09-25T09:11:24Z,@Crisspl  r.f.c.?
328012997,358,devshgraphicsprogramming,2019-09-25T09:11:34Z,@Crisspl TODO
328013363,358,devshgraphicsprogramming,2019-09-25T09:12:21Z,@Crisspl TODO.
328013414,358,devshgraphicsprogramming,2019-09-25T09:12:28Z,@Crisspl todo
328013468,358,devshgraphicsprogramming,2019-09-25T09:12:36Z,@Crisspl todo
328013886,358,devshgraphicsprogramming,2019-09-25T09:13:33Z,@Crisspl could pack this whole thing into a uint16_t
328014002,358,devshgraphicsprogramming,2019-09-25T09:13:47Z,@Crisspl ?
328014112,358,devshgraphicsprogramming,2019-09-25T09:14:01Z,@Crisspl reorder.
328014382,358,devshgraphicsprogramming,2019-09-25T09:14:36Z,"I'd use 1ull here, because no idea what happens if we do `uint64_t::operator>>=(uint32_t)`"
328014679,358,devshgraphicsprogramming,2019-09-25T09:15:14Z,how does this play now with the state cache?
328014701,358,devshgraphicsprogramming,2019-09-25T09:15:17Z,how does this play now with the state cache?
328014929,358,devshgraphicsprogramming,2019-09-25T09:15:48Z,`GSB_PIPELINE` and `GSB_RASTER_PARAMETERS` can be replaced by one `GSB_PIPELINE_AND_RASTER_PARAMETERS`
328015062,358,devshgraphicsprogramming,2019-09-25T09:16:06Z,@Crisspl !?
328015122,358,devshgraphicsprogramming,2019-09-25T09:16:16Z,@Crisspl !?
328015225,358,devshgraphicsprogramming,2019-09-25T09:16:28Z,lol
328015332,358,devshgraphicsprogramming,2019-09-25T09:16:40Z,did you get around to doing it?
328019139,358,Crisspl,2019-09-25T09:24:59Z,its how it was
328019203,358,Crisspl,2019-09-25T09:25:07Z,its how it was
328019708,358,Crisspl,2019-09-25T09:26:14Z,just read the code
328045812,358,devshgraphicsprogramming,2019-09-25T10:27:56Z,ARB_multi_bind no longer gives a shit about the target.
328047151,358,devshgraphicsprogramming,2019-09-25T10:31:31Z,Only Intel Haswell on Windows 8 and below doesn't have this extension. You can add it to the required extension list.
328047506,358,devshgraphicsprogramming,2019-09-25T10:32:23Z,@Crisspl done?
328047846,358,devshgraphicsprogramming,2019-09-25T10:33:22Z,we dont need this name array
328047980,358,devshgraphicsprogramming,2019-09-25T10:33:40Z,can you reorder those bitfields so they make sense?
328048118,358,Crisspl,2019-09-25T10:34:04Z,"nice, that simplifies stuff"
328048564,358,devshgraphicsprogramming,2019-09-25T10:35:23Z,add `SSsamplerParams` inline inside `ISampler` (could be `ISampler::Params`)
328048720,358,devshgraphicsprogramming,2019-09-25T10:35:53Z,ok now its a function to serialize and deserialize `asset::ICPUSampler`
328048926,358,devshgraphicsprogramming,2019-09-25T10:36:28Z,those enums should really be defined inside `ISampler`
328049147,358,devshgraphicsprogramming,2019-09-25T10:37:02Z,i think these extensions are already core in OpenGL 4.3
328049177,358,devshgraphicsprogramming,2019-09-25T10:37:06Z,i think these extensions are already core in OpenGL 4.3
328093541,358,Crisspl,2019-09-25T12:31:50Z,"yea, but user doesn't bind descriptor sets. They're taken from 4 places in the engine (global,camera,scenenode,meshbuffer) and bound automatically. That's why i came up with an idea to have dynamic offsets in IDescriptorSet"
328100808,358,Crisspl,2019-09-25T12:47:27Z,"yea, im enabling/disabling all 3"
328101072,358,Crisspl,2019-09-25T12:48:01Z,"(in opengl theres 1 for each polygon mode: point, line, fill)"
328102484,358,Crisspl,2019-09-25T12:51:04Z,yea
328102765,358,Crisspl,2019-09-25T12:51:39Z,currently including strides
328103280,358,Crisspl,2019-09-25T12:52:42Z,"we dont need this whole file, going to be ""nuked"""
328105442,358,Crisspl,2019-09-25T12:57:16Z,since 4.4 (`GL_MIRROR_CLAMP_TO_EDGE`)
328108038,358,Crisspl,2019-09-25T13:02:42Z,cant find any info about `GL_MIRROR_CLAMP_TO_BORDER_EXT` support so probably never got to core
328170852,358,devshgraphicsprogramming,2019-09-25T14:53:17Z,"ofc user can bind descirptor set
`IVideoDriver::bindDescriptorSets()`
would have to be indentical to command buffer op in vulkan
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkCmdBindDescriptorSets.html"
328171120,358,devshgraphicsprogramming,2019-09-25T14:53:43Z,you can actually kill the emulation code for that.
328171595,358,devshgraphicsprogramming,2019-09-25T14:54:32Z,still explain?
328171848,358,devshgraphicsprogramming,2019-09-25T14:54:59Z,lets not have these maximums anymore
328172097,358,devshgraphicsprogramming,2019-09-25T14:55:22Z,this makes me happy
328172184,358,devshgraphicsprogramming,2019-09-25T14:55:31Z,any reason not to improve on it?
328172372,358,devshgraphicsprogramming,2019-09-25T14:55:51Z,ok leave as is
328173684,358,devshgraphicsprogramming,2019-09-25T14:58:05Z,remind me what's the true parameter?
328187412,358,Crisspl,2019-09-25T15:21:59Z,ok now im confused about the design
328188519,358,Crisspl,2019-09-25T15:24:04Z,so that i can call multibind call just once and instantly also unbind anything other than current descriptor sets' descriptors
328190436,358,Crisspl,2019-09-25T15:27:19Z,`exitOnFirstDelete` regarding LRU cache
328192607,358,Crisspl,2019-09-25T15:31:21Z,dont you think vector is best here? (allocates much less often)
328272506,358,devshgraphicsprogramming,2019-09-25T18:22:19Z,you no longer need to cache samplers
328272677,358,devshgraphicsprogramming,2019-09-25T18:22:39Z,if you don't have DSA use generate instead
328272722,358,devshgraphicsprogramming,2019-09-25T18:22:46Z,you can delete this function
328273256,358,devshgraphicsprogramming,2019-09-25T18:23:57Z,does IGPUDescriptorSet hold onto the interface object refcounted pointers that provide these values?
328281249,358,devshgraphicsprogramming,2019-09-25T18:41:45Z,"ah yes, nice"
328282420,358,devshgraphicsprogramming,2019-09-25T18:44:23Z,parameter buffer also needed (GL_PARAMETER_BUFFER) and a driver feature query (some externsion or GL 4.6)
328283089,358,devshgraphicsprogramming,2019-09-25T18:45:58Z,is line 2031 your attempt at vulkan pipeline compatibility rules?
328283500,358,devshgraphicsprogramming,2019-09-25T18:46:52Z,"why are you binding the full ranges!?

Only bind the range you need (at descriptor set granularity OFC), you've went from one extreme to the other."
328284031,358,devshgraphicsprogramming,2019-09-25T18:48:06Z,"I'd rather pay for max 4 multibinds (1 per set), rather than have a dynamic allocation here every frame.

These maximums will either be too small, or large enough to overflow a stack."
328290070,358,devshgraphicsprogramming,2019-09-25T19:02:05Z,"the bottleneck is not cache population, but fast retrieval."
328291230,358,devshgraphicsprogramming,2019-09-25T19:04:57Z,"So its binary insertion sorted vector-based cache, vs map<> based cache

If cache will be large enough not to LRU evict any VAOs in a frame on average scenes, then vector can stay.

But other resources wil definitely need a map<>"
328295732,358,devshgraphicsprogramming,2019-09-25T19:16:41Z,@Crisspl and?
328297124,358,devshgraphicsprogramming,2019-09-25T19:20:22Z,"@Crisspl  ?
"
328297160,358,devshgraphicsprogramming,2019-09-25T19:20:28Z,@Crisspl ?
328297233,358,devshgraphicsprogramming,2019-09-25T19:20:41Z,file nuked yet?
328297429,358,devshgraphicsprogramming,2019-09-25T19:21:08Z,"This is file created by me, I think it needs to die

there might be similar stubs around the `include` directory"
328297496,358,devshgraphicsprogramming,2019-09-25T19:21:21Z,@Crisspl ?
328297523,358,devshgraphicsprogramming,2019-09-25T19:21:24Z,@Crisspl ?
328297634,358,devshgraphicsprogramming,2019-09-25T19:21:40Z,@Crisspl ?
328297681,358,devshgraphicsprogramming,2019-09-25T19:21:46Z,@Crisspl ?
328298001,358,devshgraphicsprogramming,2019-09-25T19:22:32Z,@Crisspl ?
328298041,358,devshgraphicsprogramming,2019-09-25T19:22:38Z,@Crisspl ?
328298098,358,devshgraphicsprogramming,2019-09-25T19:22:44Z,@Crisspl ?
328298239,358,devshgraphicsprogramming,2019-09-25T19:23:01Z,@Crisspl ?
328298351,358,devshgraphicsprogramming,2019-09-25T19:23:17Z,@Crisspl ?
328298377,358,devshgraphicsprogramming,2019-09-25T19:23:20Z,@Crisspl ?
328298451,358,devshgraphicsprogramming,2019-09-25T19:23:29Z,@Crisspl ?
328298535,358,devshgraphicsprogramming,2019-09-25T19:23:40Z,@Crisspl ?
328298914,358,devshgraphicsprogramming,2019-09-25T19:24:35Z,@Crisspl ?
328299027,358,devshgraphicsprogramming,2019-09-25T19:24:55Z,@Crisspl ?
328299091,358,devshgraphicsprogramming,2019-09-25T19:25:05Z,@Crisspl done?
328299148,358,devshgraphicsprogramming,2019-09-25T19:25:13Z,@Crisspl ?
328299300,358,devshgraphicsprogramming,2019-09-25T19:25:35Z,@Crisspl look at the vulkan command buffer operation
328299508,358,devshgraphicsprogramming,2019-09-25T19:26:06Z,@Crisspl ?
328318607,358,Crisspl,2019-09-25T20:13:45Z,do i have to unbind previous bindings?
328319832,358,Crisspl,2019-09-25T20:16:41Z,its done
328322390,358,Crisspl,2019-09-25T20:23:01Z,"because ill do it later, why do you so much want to nuke files now at the moment? XD "
328327094,358,Crisspl,2019-09-25T20:34:07Z,whats the difference really
328327385,358,Crisspl,2019-09-25T20:34:44Z,this grab is needed here
328327744,358,Crisspl,2019-09-25T20:35:30Z,renamed long ago
328327979,358,Crisspl,2019-09-25T20:36:03Z,this drop is needed here
328328375,358,Crisspl,2019-09-25T20:36:58Z,i havent seen anywhere such requirement
328328891,358,Crisspl,2019-09-25T20:38:07Z,this look completely different now
328329011,358,Crisspl,2019-09-25T20:38:24Z,in upcoming commit
328329210,358,Crisspl,2019-09-25T20:38:52Z,ok
328329575,358,Crisspl,2019-09-25T20:39:39Z,"no idea why, but will do some time"
328329742,358,Crisspl,2019-09-25T20:39:57Z,y
328330025,358,Crisspl,2019-09-25T20:40:34Z,is it question? idk what i can say here
328368814,358,devshgraphicsprogramming,2019-09-25T22:35:53Z,"why arent you dealing with smart pointers in the first place?
"
328369421,358,devshgraphicsprogramming,2019-09-25T22:38:21Z,less code = make code review easier
328369552,358,Crisspl,2019-09-25T22:38:48Z,read the code and u'll know why im doing this
328369560,358,devshgraphicsprogramming,2019-09-25T22:38:50Z,space taken by enum in structs
328369705,358,devshgraphicsprogramming,2019-09-25T22:39:22Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328368814
"
328370067,358,devshgraphicsprogramming,2019-09-25T22:40:46Z,id assume that an opengl function taking a type T will fuck up if pointer is not aligned to alingof(T) would be nice to at least have an assert
328370224,358,devshgraphicsprogramming,2019-09-25T22:41:22Z,how doo you remove stuff from caches that are not VAOs ?
328370437,358,devshgraphicsprogramming,2019-09-25T22:42:14Z,"same issue as here
https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328329575"
328371246,358,Crisspl,2019-09-25T22:45:39Z,"COpenGLSpecializedShader has its object-local cache for <ctxID,GLname> as we talked few days before, and theres no other than vao caches in COpenGLDriver/SAuxCtx created by me. There will be cache for pipelines though ofc.. And deletion will look same as it lloks for vaos, so in `COpenGLDriver::cleanUpContextBeforeDelete()`"
328371583,358,devshgraphicsprogramming,2019-09-25T22:47:05Z,"`IVideoDriver::setDescriptorSets` needs to take a(n):
- enum graphics vs compute
- pipeline layout
- first desc set ix
- desc set count
- up to 4 desc sets
- dynamic offset count
- dynamic offset array pointer

Excerpt from spec:

>If any of the sets being bound include dynamic uniform or storage buffers, then pDynamicOffsets includes one element for each array element in each dynamic descriptor type binding in each set. Values are taken from pDynamicOffsets in an order such that all entries for set N come before set N+1; within a set, entries are ordered by the binding numbers in the descriptor set layouts; and within a binding array, elements are in order. dynamicOffsetCount must equal the total number of dynamic descriptors in the sets being bound.

> The effective offset used for dynamic uniform and storage buffer bindings is the sum of the relative offset taken from pDynamicOffsets, and the base address of the buffer plus base offset in the descriptor set. The range of the dynamic uniform and storage buffer bindings is the buffer range as specified in the descriptor set.

> Each of the pDescriptorSets must be compatible with the pipeline layout specified by layout. The layout used to program the bindings must also be compatible with the pipeline used in subsequent graphics or compute commands, as defined in the Pipeline Layout Compatibility section.
"
328372535,358,devshgraphicsprogramming,2019-09-25T22:50:46Z,elaborate?
328372548,358,Crisspl,2019-09-25T22:50:51Z,"yea, but now i dont see point of those descriptor sets in [global],camera,scenenode,meshbuf if user has API to bind them directly"
328373320,358,devshgraphicsprogramming,2019-09-25T22:54:06Z,"the point of 
> descriptor sets in [global],camera,scenenode,meshbuf
is to make the `scene` namespace usable

`video` namespace must be independent of `scene`

this  is so we can have things like instanved scene nodes while having total access to the OpenGL 4.3-4.6 and Vulkan API ( have our cake and eat it)"
328374770,358,Crisspl,2019-09-25T23:00:44Z,"example:
we have bound desc set which occupies SSBO binding points 0,1,2
another desc set is going to be bound at the same index which occupies just SSBO binding point 0. Do i have to unbind SSBOs from binding points 1 and 2?"
328375385,358,devshgraphicsprogramming,2019-09-25T23:03:19Z,best try and nuke it... AFAIK its irrlicht's poor counterpart to our state flush
328375630,358,devshgraphicsprogramming,2019-09-25T23:04:30Z,correct buffer clears on opengl wont take place if write masks are not enabled
328375657,358,Crisspl,2019-09-25T23:04:37Z,"scene namespace requires video namespace, so it is usable without ""[global],camera,scenenode,meshbuf"" if there is API to bind descriptor sets.
Also: how engine decides which descriptor sets to bind? those from scenenode, meshbuffer, etc.. or the ones explicitly bound by user with API?"
328375699,358,devshgraphicsprogramming,2019-09-25T23:04:48Z,also necessar for color clears
328375749,358,devshgraphicsprogramming,2019-09-25T23:05:02Z,its just a flush afaik
328376086,358,devshgraphicsprogramming,2019-09-25T23:06:32Z,"just like `setMaterial`
SceneNode::render() sets the `setMaterial` by default, if user comes in and does their own `setMaterial` then we use that."
328376468,358,devshgraphicsprogramming,2019-09-25T23:08:17Z,"""[global],camera,scenenode,meshbuf"" this stuff I only want to be considered at the `scene` namespace level.

Remember `SMaterial` in meshbuffers? nothing in `video` set the material from meshbuffer for you!

`setMaterial` had to be called before `draw`, `draw` did not automagically set the material for you from the meshbuffer, even though the meshbuffer had it!"
328376793,358,devshgraphicsprogramming,2019-09-25T23:09:52Z,why switch and not an array like above?
328376890,358,devshgraphicsprogramming,2019-09-25T23:10:25Z,const static
328377673,358,devshgraphicsprogramming,2019-09-25T23:14:09Z,"I think resetRenderStates used to mean, flush state to default first chance you get

Basically ResetRenderStates=true would be the equivalent of setting the next graphics pipeline state to its default values (although thats crazy inefficient and pointless most of the time)"
328377728,358,devshgraphicsprogramming,2019-09-25T23:14:24Z,set next graphics state to default.
328381145,358,devshgraphicsprogramming,2019-09-25T23:30:06Z,"yes you do, but it still comes out at 5 multibinds top.

This is why, descriptor sets N, N+1, ... will be disturbed by pipeline compatibility rules if the cumulative total of OpenGL bindpoint (UBO, SSBO) bindings will be different for descriptor set N .

Hence first A>=0 decriptor sets will be undisturbed, then B>=0 descriptor sets starting at index A will be disturbed (replaced by null descriptor set), then C>=0 descriptor sets starting at index A+B will be replaced, then D>=0 descriptor sets starting at index A+B+c will be disturbed.

A particular set can only stay wholly bound or wholly disturbed.
`A` needs to equal a *contiguous* subset starting at 0 of ""identically defined"" sets common in previous and current pipeline. So range A and B each must encompass whole descriptor sets in the current pipeline layout (not the old), C naturally encompasses whole descriptor sets by definition, whereas D encompasses the difference between the end of the old total binding range and new total binding range. Note that D>0 if and only if current pipeline layout has more descriptors of a particular type than the old pipeline layout.

Is it clear?

You just need the previous pipeline layout to figure out the indices and the ranges."
328381469,358,devshgraphicsprogramming,2019-09-25T23:31:34Z,"flush of a current state set to the default state

was actually to implicitly enable depth and color masks as well as disable rasterizer discard ( a few things that would mess with framebuffer clearing and blitting)"
328381569,358,devshgraphicsprogramming,2019-09-25T23:31:58Z,the optimize comment is about the fact that not everything really needed to be reset to default
328382478,358,Crisspl,2019-09-25T23:35:53Z,it comes down to this https://github.com/buildaworldnet/IrrlichtBAW/blob/master/source/Irrlicht/COpenGLSLMaterialRenderer.cpp#L229
328383597,358,Crisspl,2019-09-25T23:41:34Z,"so its just setting a few blending parameters. Is it even worth doing anything? especially hen we dont have `E_MATERIAL_TYPE` (`EMT_*`) any more ? + you sure it means ""reset to default"" and not ""run some GL calls again no matter what""?"
328449492,358,devshgraphicsprogramming,2019-09-26T06:17:33Z,"it means reset to default. its to avoid a nasty suprise when clearing the Color and Depth/Stencil attachments.

You can read glClearBuffer* and `glBlit*` documentation and see that `glEnable(GL_RASTERIZER_DISCARD)` as well as depth,stenil,and color masks affect which channels get cleared if any (`glClearBuffer*` actually gets treated like a render call).

The parameter here used to be ""reset everything to default"" but it as obviously overkill.

Alternatively instead of resetting this stuff here, you could reset it in the Clear and Blit functions (then reset back to the original in the next draw)."
328450032,358,devshgraphicsprogramming,2019-09-26T06:19:34Z,killed the `MATERIAL_MAX_TEXTURES` variable?
328451222,358,devshgraphicsprogramming,2019-09-26T06:23:09Z,"will you also clear the pipeline cache same as VAO when you get too much in cache?

also what about framebuffer cache?"
328451668,358,devshgraphicsprogramming,2019-09-26T06:25:03Z,this would be unbind all descriptor sets
328452065,358,devshgraphicsprogramming,2019-09-26T06:26:54Z,"frambufferSRGB is always true, and non debatable (shouldn't even be in the state)"
328452186,358,devshgraphicsprogramming,2019-09-26T06:27:16Z,"we should set this to always true, and non debatable (shouldn't even be in the state)"
328452268,358,devshgraphicsprogramming,2019-09-26T06:27:25Z," is always true, and non debatable (shouldn't even be in the state)"
328452416,358,devshgraphicsprogramming,2019-09-26T06:27:57Z,"We use DSA style clears, so shouldn't track this"
328452568,358,devshgraphicsprogramming,2019-09-26T06:28:29Z,"if you do what you do in `clearZBuffer` in all other clear functions, then this is not needed anymore"
328453222,358,devshgraphicsprogramming,2019-09-26T06:30:39Z,@Crisspl ?
328629700,358,Crisspl,2019-09-26T14:00:33Z,did you mean false? It was set to hardcoded false (`glDisable(GL_DITHER)`) when i saw it tomorrow
328630202,358,Crisspl,2019-09-26T14:01:28Z,yea
329347605,358,devshgraphicsprogramming,2019-09-29T10:14:53Z,"yes, but I set it to false a long time ago before I understood the probable benefits."
329348145,358,devshgraphicsprogramming,2019-09-29T10:27:23Z,"you can nuke `E_4X3_TRANSFORMATION_STATE` and `E_PROJECTION_TRANSFORMATION_STATE`

and just do a built-in include with the default definition of a per-camera and per-scene node descriptor set (UBOs only really)"
329348189,358,devshgraphicsprogramming,2019-09-29T10:29:04Z,you can also kill all `draw2D*` functions
329348401,358,devshgraphicsprogramming,2019-09-29T10:36:17Z,rasterParams is our pseudo-Vulkan struct right?
329348409,358,devshgraphicsprogramming,2019-09-29T10:36:37Z,`GL_PARAMETER_BUFFER`
329348441,358,devshgraphicsprogramming,2019-09-29T10:38:14Z,"when your function takes a smart refcounted pointer (especially in constructors) that you'll be keeping hold of, make functions that only take r-value references.

This stops ontructor/desctructor being called, an atomic operation and freezing of the core."
329348528,358,devshgraphicsprogramming,2019-09-29T10:39:24Z,why do you stil need this storage?
329348548,358,devshgraphicsprogramming,2019-09-29T10:40:08Z,you can do bind new and unbind old at the same time.
329348586,358,devshgraphicsprogramming,2019-09-29T10:41:45Z,why would it be necessary to unbind completely before setting new samplers and textures
329348628,358,devshgraphicsprogramming,2019-09-29T10:43:20Z,"https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_shader_image_load_store.txt

``` Accepted by the <pname> parameter of GetBooleanv, GetIntegerv,
    GetFloatv, GetDoublev, and GetInteger64v:

        MAX_IMAGE_UNITS                                 0x8F38
        MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS   0x8F39
        MAX_IMAGE_SAMPLES                               0x906D
        MAX_VERTEX_IMAGE_UNIFORMS                       0x90CA
        MAX_TESS_CONTROL_IMAGE_UNIFORMS                 0x90CB
        MAX_TESS_EVALUATION_IMAGE_UNIFORMS              0x90CC
        MAX_GEOMETRY_IMAGE_UNIFORMS                     0x90CD
        MAX_FRAGMENT_IMAGE_UNIFORMS                     0x90CE
        MAX_COMBINED_IMAGE_UNIFORMS                     0x90CF
```"
329587787,358,Crisspl,2019-09-30T13:51:05Z,"yea, but forces caller to drop ownership :/"
329588197,358,Crisspl,2019-09-30T13:51:59Z,"nah, rasterParams is member of SOpenGLState"
329918649,358,devshgraphicsprogramming,2019-10-01T07:46:26Z,"not really, it forces the programmer to do an explicit copy
```
core::smart_refctd_ptr<IGPUPipelineLayout> pointerIWantToShare;
new COpenGLRenderpassIndependentPipeline(core::smart_refct_ptr(pointerIWantToShare),...);
```

Then when you see this in the code (Especially when you actually write it) it will painfully stand out that there will be a `LOCK` instruction, and an atomic integer operation will be carried out (otherwise a programmer unfamiliar with the engine could be blissfully ignorant and pass smart pointers by copy ctor or copy assignment thinking they have little cost)."
329919368,358,devshgraphicsprogramming,2019-10-01T07:48:28Z,Can you give me a list of things like `multisampleEnable` that are in your `SOpenGLState` and not in our pseudo-Vulkan struct?
330019506,358,Crisspl,2019-10-01T12:07:07Z,"everything from multisampleEnable down to primitiveRestartEnable, just those few things"
332614547,358,devshgraphicsprogramming,2019-10-08T16:35:22Z,why are we still keeping this .cpp file around?
332624669,358,Crisspl,2019-10-08T16:57:39Z,"yea, it should be deleted too"
332869226,358,devshgraphicsprogramming,2019-10-09T07:42:54Z,@Crisspl still a TODO
332872340,358,devshgraphicsprogramming,2019-10-09T07:50:31Z,"maybe just instead of 1 pointer per each shader type, accept an array (or begin/end) of core::smart_refctd_ptr<IGPUSpecializedShader> by r-value or something?

Then stages could be provided automatically, you'd just have to check if they are present.

There will be more shader types in Vulkan (mesh and raytracing)"
332873530,358,devshgraphicsprogramming,2019-10-09T07:53:58Z,"you can bank on reqTBOAlignment being a PoT (assert if its not when retrieving it), so you can use one of the fast `isAligned` functions from core::"
332874945,358,devshgraphicsprogramming,2019-10-09T07:57:30Z,@Crisspl still a TODO but maybe in another branch/PR
332877493,358,devshgraphicsprogramming,2019-10-09T08:03:56Z,"We need a way to set individual descriptors on the `ICPUDescriptorSet` (mutators), the layout can stay fixed/immutable."
332878067,358,devshgraphicsprogramming,2019-10-09T08:05:26Z,something that hopefully takes `SWriteDescriptorSet`
332878486,358,devshgraphicsprogramming,2019-10-09T08:06:34Z,r-value array or iterator pair to move from would have been saner
332878705,358,devshgraphicsprogramming,2019-10-09T08:07:10Z,you can remove that comment now XD
332879056,358,devshgraphicsprogramming,2019-10-09T08:08:06Z,I'm not sure that we need the other _MAX_ down here on the next 10 lines
332879816,358,devshgraphicsprogramming,2019-10-09T08:10:14Z,?
332879910,358,devshgraphicsprogramming,2019-10-09T08:10:26Z,status?
332879984,358,devshgraphicsprogramming,2019-10-09T08:10:41Z,progress?
332880026,358,devshgraphicsprogramming,2019-10-09T08:10:48Z,?
332880131,358,devshgraphicsprogramming,2019-10-09T08:11:04Z,@Crisspl still a TODO.
332880892,358,devshgraphicsprogramming,2019-10-09T08:12:48Z,"changing layout might actually be painful, but you should be able mutate which shaders are attached + params"
332880971,358,devshgraphicsprogramming,2019-10-09T08:13:03Z,@Crisspl about that query?
332881543,358,devshgraphicsprogramming,2019-10-09T08:14:24Z,ok actually we might not need those mutators for layout objects.
332881622,358,devshgraphicsprogramming,2019-10-09T08:14:37Z,aaand?
332881898,358,devshgraphicsprogramming,2019-10-09T08:15:22Z,shouldn't be using `bool` in things we want to dump to memory
332882468,358,devshgraphicsprogramming,2019-10-09T08:16:49Z,@Crisspl status?
332882811,358,devshgraphicsprogramming,2019-10-09T08:17:41Z,@Crisspl still no parent
332883021,358,devshgraphicsprogramming,2019-10-09T08:18:08Z,@Crisspl TODO.
332883072,358,devshgraphicsprogramming,2019-10-09T08:18:17Z,@Crisspl TODO.
332883153,358,devshgraphicsprogramming,2019-10-09T08:18:27Z,@Crisspl TODO.
332883198,358,devshgraphicsprogramming,2019-10-09T08:18:33Z,@Crisspl TODO.
332883222,358,devshgraphicsprogramming,2019-10-09T08:18:37Z,@Crisspl TODO.
332883251,358,devshgraphicsprogramming,2019-10-09T08:18:40Z,@Crisspl TODO.
332883349,358,devshgraphicsprogramming,2019-10-09T08:18:54Z,@Crisspl TODO.
332883482,358,devshgraphicsprogramming,2019-10-09T08:19:12Z,@Crisspl TODO.
332883510,358,devshgraphicsprogramming,2019-10-09T08:19:16Z,@Crisspl TODO.
332884402,358,devshgraphicsprogramming,2019-10-09T08:21:20Z,"@Crisspl you should not make a full descriptor set (together with contents) via the constructor.

On vulkan you have to `updateDescriptorSet` after creating.

The CPU object should also have mutators and those should be used instead of the constructor to fill the object."
332884484,358,devshgraphicsprogramming,2019-10-09T08:21:31Z,@Crisspl TODO.
332884587,358,devshgraphicsprogramming,2019-10-09T08:21:45Z,@Crisspl TODO.
332891762,358,devshgraphicsprogramming,2019-10-09T08:38:09Z,@Crisspl TODO
332891860,358,devshgraphicsprogramming,2019-10-09T08:38:22Z,"@Crisspl TODO
"
332892682,358,devshgraphicsprogramming,2019-10-09T08:40:19Z,"@Crisspl only this enum can stay, the one above and below must go until transition to Vulkan-only"
332897508,358,devshgraphicsprogramming,2019-10-09T08:51:12Z,@Crisspl TODO.
332897590,358,devshgraphicsprogramming,2019-10-09T08:51:22Z,@Crisspl TODO.
332898775,358,devshgraphicsprogramming,2019-10-09T08:54:05Z,change to `core::smart_refctd_ptr<const asset::ICPUShader>` (smart pointer can be init to nullptr) it will still work the same way as all your grabs and drops
333068781,358,devshgraphicsprogramming,2019-10-09T15:06:13Z,@Crisspl still need to nuke the transformation state stuff (just provide a built-in GLSL include with a default descriptor set)
333077096,358,devshgraphicsprogramming,2019-10-09T15:20:31Z,"[epic.txt](https://github.com/buildaworldnet/IrrlichtBAW/files/3708060/epic.txt)
[epicGLSL.txt](https://github.com/buildaworldnet/IrrlichtBAW/files/3708061/epicGLSL.txt)
List of extensions you can check.

You can add `virtual const std::string* getSupportedGLSLExtensionsBegin() const = 0;` and  `virtual const std::string* getSupportedGLSLExtensionsEnd() const = 0;` methods to `IVideoCapabilityReporter` that will give you the lists of `GL_` extensions supported (beware different on OpenGL and Vulkan, also `SPV_` extensions don't actually have a `SPV_` prefix for GLSL source being compiled, they are `GL_`)

Then `createSPIRVFromGLSL` could take a pair of iterators for the extension strings to stick in as defines"
333088196,358,devshgraphicsprogramming,2019-10-09T15:40:28Z,@Crisspl status?
333088427,358,devshgraphicsprogramming,2019-10-09T15:40:55Z,"see my latest comment on the latest commit, "
333089100,358,devshgraphicsprogramming,2019-10-09T15:42:13Z,"gonna mark this resolved, because its  duplicate of the https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r324890213 
thread."
333089689,358,devshgraphicsprogramming,2019-10-09T15:43:19Z,please do an alignment check.
333089945,358,devshgraphicsprogramming,2019-10-09T15:43:43Z,@Crisspl status?
333091447,358,devshgraphicsprogramming,2019-10-09T15:46:30Z,@Crisspl hows the move going?
333091639,358,devshgraphicsprogramming,2019-10-09T15:46:52Z,@Crisspl TODO.
333091844,358,devshgraphicsprogramming,2019-10-09T15:47:15Z,@Crisspl TODO.
333095773,358,devshgraphicsprogramming,2019-10-09T15:54:27Z,"I wonder if we could template the common part ( count assets, create dynamic result array, eliminate duplicates and create redirects, get gpu objects from assets)"
333102870,358,devshgraphicsprogramming,2019-10-09T16:08:08Z,I'm not understanding the purpose of this loop
333103527,358,devshgraphicsprogramming,2019-10-09T16:09:36Z,but what if you have a combined image + sampler binding without an immutable sampler ?
333104079,358,devshgraphicsprogramming,2019-10-09T16:10:46Z,what's so different about `IGPUDescriptorSetLayout::SBinding` from `ICPUDescriptorSetLayout::SBinding` ???
333104734,358,devshgraphicsprogramming,2019-10-09T16:12:10Z,@Crisspl request for comment.
333105119,358,devshgraphicsprogramming,2019-10-09T16:12:59Z,our engine default is reverse Z
333105617,358,devshgraphicsprogramming,2019-10-09T16:14:04Z,engine default is Vulkan default.
333105752,358,devshgraphicsprogramming,2019-10-09T16:14:24Z,@Crisspl where is this function now?
333106348,358,devshgraphicsprogramming,2019-10-09T16:15:46Z,@Crisspl TODO.
333106419,358,devshgraphicsprogramming,2019-10-09T16:15:56Z,@Crisspl TODO.
333106527,358,devshgraphicsprogramming,2019-10-09T16:16:10Z,@Crisspl TODO.
333106639,358,devshgraphicsprogramming,2019-10-09T16:16:25Z,@Crisspl ?
333106844,358,devshgraphicsprogramming,2019-10-09T16:16:51Z,@Crisspl status?
333124807,358,Crisspl,2019-10-09T16:57:18Z,"its not engine default, its openGL default"
333125163,358,Crisspl,2019-10-09T16:58:06Z,GPUSampler vs CPUSampler
333125805,358,Crisspl,2019-10-09T16:59:40Z,compute maxes of array sizes so i dont have to reallocate mem
333126466,358,Crisspl,2019-10-09T17:01:05Z,then theres no immutable sampler.. idk what you're asking really
333166345,358,devshgraphicsprogramming,2019-10-09T18:29:19Z,where did the implementation of `bindDescriptorSets` go?
333166590,358,devshgraphicsprogramming,2019-10-09T18:29:50Z,@Crisspl unified the enum?
333167641,358,devshgraphicsprogramming,2019-10-09T18:32:08Z,"@Crisspl can we implement 
https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328371583
properly for the pipelines?"
333169527,358,devshgraphicsprogramming,2019-10-09T18:36:05Z,@Crisspl this little issue needs to be resolved ASAP its screwing with overall design
333171354,358,devshgraphicsprogramming,2019-10-09T18:40:09Z,@Crisspl status on other resource caches?
333171428,358,devshgraphicsprogramming,2019-10-09T18:40:18Z,@Crisspl TODO.
333172705,358,devshgraphicsprogramming,2019-10-09T18:42:48Z,@Crisspl  TODO.
333177817,358,devshgraphicsprogramming,2019-10-09T18:53:45Z,doesn't skinned meshbuffer inherit from this?
333178554,358,devshgraphicsprogramming,2019-10-09T18:55:15Z,ok but what about the immutable samper stuff?
333179561,358,devshgraphicsprogramming,2019-10-09T18:57:28Z,so your code supports both immutable and mutable combined sampler (an image/texture + sampler pair) ?
333179782,358,devshgraphicsprogramming,2019-10-09T18:57:59Z,so that whole expensive loop is just because the immutable CPU sampler needs to be swapped for a GPU sampler?
333180086,358,devshgraphicsprogramming,2019-10-09T18:58:34Z,"ok, but where are you setting our defaults?"
333180937,358,devshgraphicsprogramming,2019-10-09T19:00:23Z,just compare pointers
333181175,358,devshgraphicsprogramming,2019-10-09T19:00:58Z,or does Vulkan spec say otherwise? (pretty sure it really cares about object handles to immutalbe samplers being identical)
333188510,358,devshgraphicsprogramming,2019-10-09T19:18:34Z,you need to compare field by field.
333189296,358,devshgraphicsprogramming,2019-10-09T19:20:31Z,@Crisspl still need the driver feature queries for these things
333190383,358,devshgraphicsprogramming,2019-10-09T19:23:10Z,"wait what!?

you got it wrong, Vulkan counts from index 0 not backwards!

loop should be `for (uint32_t i=0u; i<compatibilityLimit; i++)`"
333191149,358,Crisspl,2019-10-09T19:25:04Z,well yea ofc but obviously mutable sampler is in descriptor set
333192456,358,Crisspl,2019-10-09T19:28:11Z,"same place as it was before, COpenGLDriver::initDriver() or something like this"
333192789,358,devshgraphicsprogramming,2019-10-09T19:29:03Z,"maybe make `uint32_t _dynOffsetCount, const uint32_t* _dynOffsets` into just a smart refctd array passed by r-value, then add a smart refcounted dynamic array member `dynamicOffsets[4]` to `nextState`

This shouldn't ever be a problem as if layout changes (is incompatible) then the dynamic offsets will be dropped, its 100% the case that if the dynamic offset arrays are different lengths the pipelines will be incompatible.

you can still compare the contents of two identical length dynamic offset arrays, and decide whether to refresh the bindings or not.

OR

you can just keep a copy of the offset array (base offset + dynamic) for multibind of buffers (you'll recompute every `bindDescriptorSets`) but only ever fire off the multibind if something changes"
333193442,358,devshgraphicsprogramming,2019-10-09T19:30:44Z,The use of `std::copy` and stack arrays is still pointless here.
333193548,358,Crisspl,2019-10-09T19:31:01Z,"vulkan just says that descriptor sets has to be ""identically defined"" and not sure what this means. But you might be right that immutable samplers names has to be the same"
333204559,358,devshgraphicsprogramming,2019-10-09T19:58:10Z,"@Crisspl this is still an issue in the latest commit. To recap only the following are possible:

# Everything changes

Then you do 1 multibind per resource type X (UBO,SSBO,Texture) with `count = previous pipeline layout total count of resource of type X across all descriptor sets`, since you're unbinding all array/pointer parameters to OpenGL multibind functions can be `nullptr`

# N (>0) descriptor sets stay the same (after validation rules)

There are two stages to this, bind new and unbind old.

## Bind New 

Nullptr (no descriptor) counts as a ""new"" descriptor binding.

Then you do 1 multibind per resource type X per new descriptor set bound, with `first = previous pipeline layout total count of resource of type X across descriptor sets in slots [0,N)`  the pointer/array parameters shall be sourced **directly** from precomputed (if desc. set nullptr, then parameters are nullptr) arrays inside the new descriptor sets in slots [N, N + New Descriptor Set Count] 

## Unbind Old

For every resource type X, you take the difference between `previous pipeline layout total count of resource of type X across all descriptor sets` and `new pipeline layout total count of resource of type X across all descriptor sets`

If the difference is positive (previous layout had more bindings, then you do 1 multibind per resource type X (UBO,SSBO,Texture) with `first = previous pipeline layout total count of resource of type X across all descriptor sets` and `count = the above mentioned difference`, since you're unbinding all array/pointer parameters to OpenGL multibind functions can be `nullptr`"
333205661,358,devshgraphicsprogramming,2019-10-09T20:01:02Z,@Crisspl all the other `COpenGLDriver::clear*` need similar state setting
333206042,358,devshgraphicsprogramming,2019-10-09T20:02:06Z,you also need to disable rasterizer discard state
333206262,358,devshgraphicsprogramming,2019-10-09T20:02:39Z,@Crisspl maybe best to reset in Clear and Blit functions  (then reset back to the original in the next draw).
333206391,358,devshgraphicsprogramming,2019-10-09T20:02:59Z,@Crisspl r.f.c.?
333206504,358,devshgraphicsprogramming,2019-10-09T20:03:16Z,@Crisspl  ?
333207234,358,devshgraphicsprogramming,2019-10-09T20:05:04Z,@Crisspl are we bothering with `removeAllTextures` and `removeAllMultisampleTextures` ?
333207573,358,devshgraphicsprogramming,2019-10-09T20:05:57Z,please enable dither @Crisspl 
333207974,358,devshgraphicsprogramming,2019-10-09T20:06:57Z,@Crisspl multisample enable is always true whenever the pipeline says its using more than 1 sample
333210074,358,devshgraphicsprogramming,2019-10-09T20:12:09Z,"and vulkan dictates that the pipeline must declare the same number of samples as the framebuffer attachment it will draw to

So yes, OIT example will be broken (Vulkan does not allow drawing to multisample target with multisample disabled to abuse it for OIT) until we expose the user configurable sample locations extension:
- https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VK_EXT_sample_locations
- https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VK_AMD_programmable_sample_locations
- https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_sample_locations.txt
- https://www.khronos.org/registry/OpenGL/extensions/NV/NV_sample_locations.txt
- https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_sample_positions.txt"
333210662,358,devshgraphicsprogramming,2019-10-09T20:13:30Z,why are you tracking `clipControl` ?
333211148,358,devshgraphicsprogramming,2019-10-09T20:14:31Z,"@Crisspl TODO.
https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328375630"
333211479,358,devshgraphicsprogramming,2019-10-09T20:15:18Z,why do you track `primitiveRestartEnable` and `depthRange` ?
333211734,358,devshgraphicsprogramming,2019-10-09T20:15:54Z,see https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r333204559
333211796,358,devshgraphicsprogramming,2019-10-09T20:16:01Z,see https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r333204559
333211862,358,devshgraphicsprogramming,2019-10-09T20:16:10Z,see https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r333204559
333217960,358,devshgraphicsprogramming,2019-10-09T20:30:24Z,enable
333218797,358,Crisspl,2019-10-09T20:32:24Z,you sure? as for now it's been disabled https://github.com/Crisspl/IrrlichtBAW/blob/master/source/Irrlicht/COpenGLDriver.cpp#L993
333237449,358,devshgraphicsprogramming,2019-10-09T21:16:22Z,"yes I'm sure, this stuff could help with 6bit (g-sync) displays"
333238174,358,devshgraphicsprogramming,2019-10-09T21:18:25Z,resolved.
333238326,358,devshgraphicsprogramming,2019-10-09T21:18:49Z,ok it just looked a bit like it was designed for immutable sampler only.
333238520,358,devshgraphicsprogramming,2019-10-09T21:19:21Z,I think comparing handles is more strict so less likely to run into problems that way.
333275271,358,Crisspl,2019-10-09T23:27:34Z,"well now when i think more about this, i think its completely fucked approach. `bindGraphicsPipeline()` shouldnt touch descriptor sets at all, and `bindDescriptorSets()` should get extra param `_pipelineLayout` (just like Vulkan function has). However vulkan spec says 

>When binding a descriptor set (see Descriptor Set Binding) to set number N, if **the previously bound descriptor sets for sets zero through N-1 were all bound using compatible pipeline layouts** (...)

i cant know which pipeline layout was used to bind descriptor set unless we have a requirement that before every call to `bindGraphicsPipeline()` must go *maximum* of 1 call to `bindDescriptorSets()` (then i know that all bound descriptor sets were bound with pipeline layout compatible with layout of currently bound pipeline)
This seems far more tricky than i thought at first look.. and im not sure i understand it correctly"
333283036,358,Crisspl,2019-10-10T00:04:41Z,"probably yes, I cant see other reason now"
333403665,358,devshgraphicsprogramming,2019-10-10T08:57:20Z,"> `bindGraphicsPipeline()` shouldnt touch descriptor sets at all

As much as I would like that to be the case, its the behaviour under the Vulkan spec.

> and `bindDescriptorSets()` should get extra param `_pipelineLayout`

That is also a valid approach.

> i cant know which pipeline layout was used to bind descriptor set unless we have a requirement that before every call to bindGraphicsPipeline() must go maximum of 1 call to bindDescriptorSets() (then i know that all bound descriptor sets were bound with pipeline layout compatible with layout of currently bound pipeline)

Well in my current proposal if `bindGraphicsPipeline` call unbinds no longer compatible descriptor sets (but without flushing state) then by the time you come around with `bindDescriptorSets` you are 100% sure that any non-null bound descriptor sets are compatible with the currently bound pipeline.

Its a similar situation to calling something akin to `bindDescriptorSets(....,driver->getCurrentPipeline()->getLayout)` , vulkan only takes the pipeline layout parameter to bind descriptor sets to count the hardware binding indices properly for OpenGL ES 3.2 class hardware."
333649741,358,Crisspl,2019-10-10T17:40:25Z,theres no gpu skinned meshbuffer
333653191,358,Crisspl,2019-10-10T17:48:09Z,me too thats why i leaved them :P
333655923,358,Crisspl,2019-10-10T17:54:11Z,you mean remove this enum val?
333660421,358,Crisspl,2019-10-10T18:04:02Z,yes
333665041,358,Crisspl,2019-10-10T18:14:13Z,">I'd use 1ull here, because no idea what happens if we do uint64_t::operator>>=(uint32_t)

i dont understand your doubts really, shift by number greater than type's bit-length is UB anyway so it could be uint8_t just as well (since theres no such long type in c++)"
333666345,358,Crisspl,2019-10-10T18:17:11Z,part of `flushState()`
333667677,358,Crisspl,2019-10-10T18:20:08Z,"will do that while making pipeline cache in CopenglDriver, in plans for tomorrow"
333668986,358,Crisspl,2019-10-10T18:22:51Z,"framebuffer cache totally not important right now since it just works, todo when things will be working
>will you also clear the pipeline cache same as VAO when you get too much in cache?

not sure if it can be done the same if pipeline cache is going to be map (not vector)"
333672283,358,Crisspl,2019-10-10T18:30:08Z,i dont know which comment goes to which commit
333672539,358,Crisspl,2019-10-10T18:30:37Z,but i think i get which one u mean
333672959,358,Crisspl,2019-10-10T18:31:35Z,done
333676206,358,Crisspl,2019-10-10T18:39:01Z,"`primitiveRestartEnable` because it depends on pipeline
`depthRange` - not sure, most likely it was in your state tracker or used somewhere.. idk"
333676667,358,Crisspl,2019-10-10T18:40:06Z,"i dont see how ""built-in GLSL include with a default descriptor set"" and ""transformation state stuff"" are substitutes?"
333680372,358,devshgraphicsprogramming,2019-10-10T18:48:31Z,">` primitiveRestartEnable` because it depends on pipeline

How does it depend on the pipeline?

P.S. Don't track and concern yourself with `depthRange`."
333681895,358,devshgraphicsprogramming,2019-10-10T18:52:20Z,you're correct.
333682179,358,Crisspl,2019-10-10T18:52:57Z,what has to be enabled/disabled for stencil clears to work? and for color clears as well? something beside write masks?
333682567,358,Crisspl,2019-10-10T18:53:48Z,i guess i should bring back state from before clear?
333682833,358,Crisspl,2019-10-10T18:54:24Z,">why are you tracking clipControl ?

not sure if needed"
333688709,358,Crisspl,2019-10-10T19:07:38Z,i dont know what u mean
333754318,358,Crisspl,2019-10-10T22:02:53Z,"SPrimitiveAssemblyParams::primitiveRestartEnable and SPrimitiveAssemblyParams is obviously member of IRenderpassIndependentPipeline, corresponds to `VkPipelineInputAssemblyStateCreateInfo::primitiveRestartEnable` which is member of `VkGraphicsPipelineCreateInfo `"
333882980,358,devshgraphicsprogramming,2019-10-11T08:32:27Z,"disable:
- rasterizer discard
- scissor test


enable:
- color write mask (color clear)
- depth write mask (depth clear)
- stencil write mask both front and back (stencil clear)"
333883275,358,devshgraphicsprogramming,2019-10-11T08:33:11Z,kill them
333884610,358,devshgraphicsprogramming,2019-10-11T08:36:44Z,since textures and multisample textures are share-able there should be no reason for us to track them in the driver.
333884936,358,devshgraphicsprogramming,2019-10-11T08:37:38Z,@Crisspl lets not track it then
333887559,358,devshgraphicsprogramming,2019-10-11T08:44:33Z,"setting and bringing back state is what the clear itself is supposed to do.

I don't think there's any reason anymore for the `setRenderTarget` to do anything."
333900318,358,devshgraphicsprogramming,2019-10-11T09:17:00Z,"wait, what why?"
333900897,358,devshgraphicsprogramming,2019-10-11T09:18:20Z,its wrong... again
333905318,358,devshgraphicsprogramming,2019-10-11T09:29:13Z,remove `EDT_SAMPLER` and `EDT_SAMPLED_IMAGE`
333914570,358,devshgraphicsprogramming,2019-10-11T09:52:09Z,"First replace everything with `matrix***SIMD` types, then

# For people and parts of the engine only using the `video` namespace

`whatever/path/we/have/for/builtins/DefaultCameraData.glsl`
```glsl
struct DefaultCameraData
{
    mat4x3 view;
    mat4x3 viewInverse;
    mat4 proj;
    mat4 projInverse;
    mat4 projView;
    mat4 projViewInverse;
};
```
`whatever/path/we/have/for/builtins/DefaultSceneNodeData.glsl`
```glsl
struct DefaultSceneNodeData
{
    mat4x3 view;
    mat4x3 viewInverse;
    mat4 proj;
    mat4 projInverse;
    mat4 projView;
    mat4 projViewInverse;
};
```

`whatever/path/we/have/for/builtins/defaultCameraUBO/location/${loc}.glsl`
```glsl
#include ""whatever/path/we/have/for/builtins/DefaultCameraData.glsl""
layout(set=1, location=${loc}, row_major) DefaultPerViewUBO
{
    DefaultCameraData data;
} defaultPerViewUBO;
```
`whatever/path/we/have/for/builtins/defaultSceneNodeUBO/location/${loc}.glsl`
```glsl
#include ""whatever/path/we/have/for/builtins/DefaultSceneNodeData.glsl""
layout(set=1, location=${loc}, row_major) DefaultPerSceneNodeUBO
{
    DefaultSceneNodeData data[];
} defaultPerSceneNodeUBO;
```

Then people will need to know to push new data (via streaming update or upload everything up-front then rebind at different offset before every draw).

# Fixing the `scene` namespace

Will be piss-easy. We allow each scene node to hold a descriptor set + offsets, and also the scene manager (the global desc set).

```cpp
class ISceneNode
{
...
setDescriptorSet(...) {}
getDescriptorSet(...) {}
setDynamicOffsets(...) {}
getDynamicOffsets(...) {}
...
IGPUDescriptorSet* descSet;
core::refctd_dynamic_array<uint32_t> dynamicOffsets;
...
}
```

Now the difference is that during the override of `ISceneNode::render()` the camera scene node will bind its descriptor set to slot 1, but a regular scene node will bind to slot 2.

Any meshbufferscenenode will take the descriptor set + dynamic offsets attached to a meshbuffer and bind it to slot 3, as well as push the constants just before the draw.

And obviously `ISceneManager::drawAll()` shall begin by binding descriptor set to slot 0.


## How the data will be updated

We will need a `scene::DescriptorSetUpdater` class and a default instantiation of it that will run after `ISceneNode::OnAnimate()` is finished, think of it like an animation call-back.

I see a method like `scene::DescriptorSetUpdater::update(scene::ISceneNode*,video::IGPUDescriptorSet*,core::smart_refctd_dynamic_array<uint32_t>* offsets)`

The default one for cameras will stream update the buffer in location 0 at offset assigned with the matrices as expected by the `DefaultPerViewUBO`.

The default one for mesh scene nodes will do the same for `DefaultPerSceneNodeUBO`.

User can derive and make a different descriptor-set-updater.

I plan to replace this prototype with something much faster when I come to do #96 and bucket-rendering."
333914880,358,devshgraphicsprogramming,2019-10-11T09:52:59Z,"ok, cool then I can resolve."
333915833,358,devshgraphicsprogramming,2019-10-11T09:55:40Z,"I can't see where in the code you're purging that cache, it just grows without bound."
333916397,358,devshgraphicsprogramming,2019-10-11T09:57:12Z,"well the vector is sorted by hash, so the LRU removal is unfortunately a linear search XD

Not sure you could do any worse with a map"
333918544,358,devshgraphicsprogramming,2019-10-11T10:02:55Z,"Marking as resolved because I want to move the discussion to an issue #376
"
333918812,358,devshgraphicsprogramming,2019-10-11T10:03:53Z,"@Crisspl this is resolved, but useful to review for the two biggest unresolves in the whole PR.

Moving conversation to #376 
"
333919070,358,devshgraphicsprogramming,2019-10-11T10:04:41Z,"kinda resolved, but not quite, moving to #376 "
333919288,358,devshgraphicsprogramming,2019-10-11T10:05:18Z,see #376 
333938872,358,Crisspl,2019-10-11T11:04:01Z,i meant key type is now smart_refctd_ptr
333973151,358,Crisspl,2019-10-11T12:47:29Z,idk what i meant by this really. Now i simplified it to what you wrote here https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r333204559 but optimized a little (if prev and curr pipeline layouts are compatible for set N and `currState.set[N]==nextState.set[N]` then binding set N would be redundant)
334028646,358,devshgraphicsprogramming,2019-10-11T14:46:30Z,"Had slight Vulkan spec clarification, written down in #376 "
334029290,358,devshgraphicsprogramming,2019-10-11T14:47:42Z,I think we agreed that we need `ARB_multi_bind` from now on.
334029752,358,devshgraphicsprogramming,2019-10-11T14:48:42Z,We need to talk this over in person (Call) and come to some sort of a conclusion in #376 
334030129,358,devshgraphicsprogramming,2019-10-11T14:49:33Z,great but need to be able to purge the cache totally as well as have the engine purge it periodically.
334066621,358,Crisspl,2019-10-11T16:07:48Z,">have the engine purge it periodically.

CShaderIntrospector isnt supposed to be one global object. It's not even refcounted. See how its used in COpenGLDriver::createGPUSpecializedShader()"
334066809,358,Crisspl,2019-10-11T16:08:18Z,yea it's just not used
334074158,358,devshgraphicsprogramming,2019-10-11T16:27:51Z,ok that clears it up for me
334074346,358,devshgraphicsprogramming,2019-10-11T16:28:22Z,kill it
334256075,358,devshgraphicsprogramming,2019-10-12T22:58:23Z,"yeah maybe we should make an exception (and allow for copy ctoring), otherwise this will be bugprone 101"
334256080,358,devshgraphicsprogramming,2019-10-12T22:58:54Z,I would put the generic tracking here.
334416227,358,devshgraphicsprogramming,2019-10-14T10:27:02Z,seriously.
334416723,358,devshgraphicsprogramming,2019-10-14T10:28:32Z,not quite (they are combined maxes across all pipeline stages) but they aren't obscene.
334418111,358,devshgraphicsprogramming,2019-10-14T10:32:34Z,I'd actually move that up to CNull driver.
334420738,358,devshgraphicsprogramming,2019-10-14T10:40:49Z,just make sure we never glUseProgram and we'll be ok.
334438041,358,devshgraphicsprogramming,2019-10-14T11:35:01Z,need setShader and other [raster] params (but layout is immutable)
334517945,358,Crisspl,2019-10-14T14:44:46Z,that would require dividing GL state tracking (which is per-context) into COpenGLDriver and CNullDriver.. Practically undoable
334519389,358,Crisspl,2019-10-14T14:47:40Z,resolved
334519526,358,Crisspl,2019-10-14T14:47:55Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r334517945
"
334519715,358,Crisspl,2019-10-14T14:48:16Z,glUseProgram we'll be used for compute pipelines
334520171,358,Crisspl,2019-10-14T14:49:08Z,resolved
334520302,358,Crisspl,2019-10-14T14:49:22Z,"resolved
"
334520790,358,Crisspl,2019-10-14T14:50:20Z,resolved
334520880,358,Crisspl,2019-10-14T14:50:29Z,resolved
334520972,358,Crisspl,2019-10-14T14:50:40Z,resolved
334522504,358,Crisspl,2019-10-14T14:53:46Z,"resolved (it's GL default, not our default)"
334522787,358,Crisspl,2019-10-14T14:54:20Z,resolved
334522872,358,Crisspl,2019-10-14T14:54:31Z,resolved https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r333191149
334524145,358,Crisspl,2019-10-14T14:57:13Z,resolved
334524246,358,Crisspl,2019-10-14T14:57:25Z,resolved
334524595,358,devshgraphicsprogramming,2019-10-14T14:58:13Z,then only set to 0 if compute pipeline was used before after last flush.
334525016,358,Crisspl,2019-10-14T14:59:04Z,resolved
334525064,358,devshgraphicsprogramming,2019-10-14T14:59:09Z,"ok, but can you put some of the code (as a static protected function) or in some sort of a base to the state tracking object into CNullDriver namespace?"
334525714,358,devshgraphicsprogramming,2019-10-14T15:00:27Z,"basically the code that decides whether to throw out a descriptor set is pretty generic and will be needed in Vulkan, would be sad to have it buried deep in COpenGLDriver"
334525829,358,Crisspl,2019-10-14T15:00:39Z,resolved
334525967,358,Crisspl,2019-10-14T15:00:56Z,resolved
334526101,358,Crisspl,2019-10-14T15:01:11Z,resolved
334526375,358,Crisspl,2019-10-14T15:01:46Z,resolved
334526499,358,Crisspl,2019-10-14T15:02:01Z,resolved
334528427,358,Crisspl,2019-10-14T15:06:02Z,resolved
334528784,358,Crisspl,2019-10-14T15:06:39Z,">multisample enable is always true whenever the pipeline says its using more than 1 sample

resolved"
334528899,358,Crisspl,2019-10-14T15:06:50Z,resolved
334528988,358,Crisspl,2019-10-14T15:07:00Z,resolved
334529622,358,Crisspl,2019-10-14T15:08:21Z,resolved
334534516,358,Crisspl,2019-10-14T15:18:44Z,resolved
334535540,358,Crisspl,2019-10-14T15:21:06Z,resolved
334536363,358,Crisspl,2019-10-14T15:23:00Z,"yes, resolved"
334536446,358,Crisspl,2019-10-14T15:23:10Z,resolved
334536521,358,Crisspl,2019-10-14T15:23:19Z,resolved
334536588,358,Crisspl,2019-10-14T15:23:29Z,resolved
334536953,358,Crisspl,2019-10-14T15:24:17Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328105442
"
334537148,358,Crisspl,2019-10-14T15:24:41Z,resolved
334537218,358,Crisspl,2019-10-14T15:24:50Z,resolved
334537577,358,Crisspl,2019-10-14T15:25:34Z,pipeline cache partially done
334537706,358,Crisspl,2019-10-14T15:25:52Z,resolved
334537798,358,Crisspl,2019-10-14T15:26:03Z,resolved
334537858,358,Crisspl,2019-10-14T15:26:11Z,resolved
334537913,358,Crisspl,2019-10-14T15:26:20Z,resolved
334538163,358,Crisspl,2019-10-14T15:26:53Z,"decided to use vector, resolved"
334538253,358,Crisspl,2019-10-14T15:27:03Z,resolved
334538337,358,Crisspl,2019-10-14T15:27:12Z,resolved
334538529,358,Crisspl,2019-10-14T15:27:38Z,resolved
334538763,358,Crisspl,2019-10-14T15:28:09Z,resolved
334539504,358,Crisspl,2019-10-14T15:29:44Z,resolved
334539754,358,Crisspl,2019-10-14T15:30:16Z,to implement when it's actually getting done
334540289,358,Crisspl,2019-10-14T15:31:25Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328047980
334540370,358,Crisspl,2019-10-14T15:31:37Z,resolved
334540533,358,Crisspl,2019-10-14T15:31:59Z,resolved
334540761,358,Crisspl,2019-10-14T15:32:32Z,resolved
334540800,358,Crisspl,2019-10-14T15:32:38Z,resolved
334540908,358,Crisspl,2019-10-14T15:32:50Z,resolved
334541002,358,Crisspl,2019-10-14T15:33:02Z,resolved
334541050,358,Crisspl,2019-10-14T15:33:09Z,resolved
334541083,358,Crisspl,2019-10-14T15:33:15Z,resolved
334541129,358,Crisspl,2019-10-14T15:33:21Z,resolved
334541241,358,Crisspl,2019-10-14T15:33:34Z,resolved
334541322,358,Crisspl,2019-10-14T15:33:44Z,resolved
334541765,358,Crisspl,2019-10-14T15:34:48Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r326556799
334542083,358,Crisspl,2019-10-14T15:35:37Z,resolved
334542189,358,Crisspl,2019-10-14T15:35:50Z,resolved
334542333,358,Crisspl,2019-10-14T15:36:06Z,resolved
334542570,358,Crisspl,2019-10-14T15:36:40Z,"using std::array<GLuint,5>"
334542726,358,Crisspl,2019-10-14T15:37:03Z,resolved
334542868,358,Crisspl,2019-10-14T15:37:21Z,resolved
334543190,358,Crisspl,2019-10-14T15:37:55Z,resolved
334543222,358,Crisspl,2019-10-14T15:38:01Z,resolved
334543322,358,Crisspl,2019-10-14T15:38:14Z,resolved
334543824,358,Crisspl,2019-10-14T15:39:21Z,"resolved however when i looked in spirv-cross code i couldnt see actually gathering this decoration from spv, needs testing"
334544377,358,Crisspl,2019-10-14T15:40:32Z,resolved
334544525,358,Crisspl,2019-10-14T15:40:51Z,resolved
334544723,358,Crisspl,2019-10-14T15:41:17Z,resolved
334544835,358,Crisspl,2019-10-14T15:41:35Z,resolved
334544969,358,Crisspl,2019-10-14T15:41:51Z,resolved
334545037,358,Crisspl,2019-10-14T15:42:03Z,resolved
334545075,358,Crisspl,2019-10-14T15:42:07Z,resolved
334545263,358,Crisspl,2019-10-14T15:42:30Z,resolved
334545606,358,Crisspl,2019-10-14T15:43:07Z,resolved
334545744,358,Crisspl,2019-10-14T15:43:27Z,resolved
334545904,358,Crisspl,2019-10-14T15:43:52Z,resolved
334546474,358,Crisspl,2019-10-14T15:45:09Z,resolved
334546761,358,Crisspl,2019-10-14T15:45:45Z,resolved
334546820,358,Crisspl,2019-10-14T15:45:54Z,nuked resolved
334547011,358,Crisspl,2019-10-14T15:46:18Z,nuked resolved
334547043,358,Crisspl,2019-10-14T15:46:24Z,nuked resolved
334547077,358,Crisspl,2019-10-14T15:46:29Z,y resolved
334547308,358,Crisspl,2019-10-14T15:47:02Z,resolved
334547400,358,Crisspl,2019-10-14T15:47:14Z,resolved
334547560,358,Crisspl,2019-10-14T15:47:39Z,resolved
334547609,358,Crisspl,2019-10-14T15:47:46Z,resolved
334547630,358,Crisspl,2019-10-14T15:47:49Z,resolved
334547703,358,Crisspl,2019-10-14T15:48:00Z,resolved
334547921,358,Crisspl,2019-10-14T15:48:31Z,">serialize/deserialize methods

will be done when doing BAW format update"
334548274,358,Crisspl,2019-10-14T15:49:18Z,resolved
334548333,358,Crisspl,2019-10-14T15:49:25Z,resolved
334549243,358,Crisspl,2019-10-14T15:51:31Z,resolved
334549894,358,Crisspl,2019-10-14T15:53:01Z,resolved
334550052,358,Crisspl,2019-10-14T15:53:24Z,resolved
334550119,358,Crisspl,2019-10-14T15:53:34Z,resolved
334550144,358,Crisspl,2019-10-14T15:53:37Z,resolved
334550162,358,Crisspl,2019-10-14T15:53:40Z,resolved
334550207,358,Crisspl,2019-10-14T15:53:45Z,resolved
334550230,358,Crisspl,2019-10-14T15:53:49Z,resolved
334550282,358,Crisspl,2019-10-14T15:53:54Z,resolved
334550373,358,Crisspl,2019-10-14T15:54:08Z,resolved
334550548,358,Crisspl,2019-10-14T15:54:36Z,resolved
334550770,358,Crisspl,2019-10-14T15:55:10Z,resolved
334551198,358,Crisspl,2019-10-14T15:56:12Z,resolved
334551357,358,Crisspl,2019-10-14T15:56:33Z,removed E_VERTEX_ATTRIBUTE_ID 
334552428,358,Crisspl,2019-10-14T15:59:14Z,resolved
334552610,358,Crisspl,2019-10-14T15:59:36Z,resolved
334553321,358,Crisspl,2019-10-14T16:01:20Z,resolved
334554246,358,Crisspl,2019-10-14T16:03:40Z,resolved used `PACK_STRUCT`
334554402,358,Crisspl,2019-10-14T16:04:02Z,resolved
334554443,358,Crisspl,2019-10-14T16:04:09Z,resolved
334554529,358,Crisspl,2019-10-14T16:04:25Z,will be done when updating baw format
334554623,358,Crisspl,2019-10-14T16:04:40Z,resolved
334554650,358,Crisspl,2019-10-14T16:04:46Z,resolved
334554780,358,Crisspl,2019-10-14T16:05:07Z,resolved
334554797,358,Crisspl,2019-10-14T16:05:11Z,resolved
334554912,358,Crisspl,2019-10-14T16:05:24Z,resolved (PACK_STRUCT)
334555175,358,Crisspl,2019-10-14T16:06:08Z,resolved
334555295,358,Crisspl,2019-10-14T16:06:23Z,resolved
334555741,358,Crisspl,2019-10-14T16:07:35Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r323711816
334555806,358,Crisspl,2019-10-14T16:07:47Z,resolved
334556171,358,Crisspl,2019-10-14T16:08:47Z,resolved
334556764,358,Crisspl,2019-10-14T16:10:22Z,">because we dont want direct manipulation of bitfields

thats what bitfields are for, i dont understand"
334556934,358,Crisspl,2019-10-14T16:10:48Z,when baw format gets updated
334557748,358,Crisspl,2019-10-14T16:12:56Z,"resolved, changed to uint8_t"
334557794,358,Crisspl,2019-10-14T16:13:05Z,resolved
334557819,358,Crisspl,2019-10-14T16:13:09Z,resolved
334557972,358,Crisspl,2019-10-14T16:13:35Z,when baw formats gets updated
334559172,358,Crisspl,2019-10-14T16:16:51Z,"4 bits for binding, 8 bits for format, 12+ bits for relOffset,
may pack into uint32_t but not sure about cross-platform max for relOffset"
334559288,358,Crisspl,2019-10-14T16:17:05Z,resolved
334559321,358,Crisspl,2019-10-14T16:17:11Z,resolved
334559389,358,Crisspl,2019-10-14T16:17:22Z,resolved
334559637,358,Crisspl,2019-10-14T16:17:58Z,resolved
334559690,358,Crisspl,2019-10-14T16:18:08Z,resolved
334560027,358,Crisspl,2019-10-14T16:19:06Z,resolved
334562283,358,Crisspl,2019-10-14T16:24:44Z,resolved
334562780,358,Crisspl,2019-10-14T16:26:03Z,not relevant since this example doesnt really exist in any offcial form
334563353,358,Crisspl,2019-10-14T16:27:28Z,what #extension? i dont know whats going on
334564068,358,Crisspl,2019-10-14T16:29:14Z,sort what? whats going on? theres no pipeline ptr in there anyway. seriously WHAT
334564899,358,Crisspl,2019-10-14T16:31:29Z,"none of this exist yet, will be done as one of last things"
334564968,358,Crisspl,2019-10-14T16:31:41Z,y resoled
334565348,358,Crisspl,2019-10-14T16:32:40Z,resolved nuked long ago
334565455,358,Crisspl,2019-10-14T16:32:59Z,resolved
334717739,358,devshgraphicsprogramming,2019-10-15T01:12:54Z,relOffset max is 2047 on everything except for CAD cards
334717831,358,devshgraphicsprogramming,2019-10-15T01:13:35Z,"You'd be suprised how many times PACK_STRUCT fucked up for me under MSVC, still need an assert."
334717952,358,devshgraphicsprogramming,2019-10-15T01:14:18Z,"struct takes 1+1+4 bytes, but member requires 4 byte alignment (ARM), make tessPatchVertCount a uint16_t"
334718028,358,devshgraphicsprogramming,2019-10-15T01:14:51Z,this can have a pretty non-standard size. need that assert
334718061,358,devshgraphicsprogramming,2019-10-15T01:15:04Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/358/files/f4148b8def2d8f96350958f0e0152aa6d876f819..3fcdc84309e85f36268cdbc55644aa7f836a9e83#r334718028
334718197,358,devshgraphicsprogramming,2019-10-15T01:15:46Z,we should remove the indexed functions
334720188,358,devshgraphicsprogramming,2019-10-15T01:29:00Z,"instead of sorting on the material associated with the first meshbuffer in the node, sort by graphics pipeline of the first meshbuffer (most significant are bound shaders [geometry>tessellation>fragment>vertex], then raster params, then anything else)."
334720419,358,devshgraphicsprogramming,2019-10-15T01:30:36Z,"all right, but lets keep them very separate from all of the engine, maybe lets move `E_MATERIAL_TYPE` into `IVideoDriver` and have a function `getBuiltInSpecializedShader(E_SHADER_STAGE,E_MATERIAL_TYPE)`"
334721591,358,devshgraphicsprogramming,2019-10-15T01:37:44Z,`KHR_vulkan_glsl` ?
334721821,358,devshgraphicsprogramming,2019-10-15T01:39:23Z,!? we should really be explicitly specifying sets
334724256,358,devshgraphicsprogramming,2019-10-15T01:55:14Z,how so?
334947273,358,devshgraphicsprogramming,2019-10-15T13:22:37Z,the order of those is upside down and all over the place
334953592,358,devshgraphicsprogramming,2019-10-15T13:33:59Z,"This needs specifying a bit @AnastaZIuk, finally the level is defined as number of -> chains between root (the one that shall be returned by `IAssetManager::getAsset` to the user) and the currently loaded asset.

Stuff that comes together from a single resource (file) like a Mesh->MeshBuffer->GraphicsPipeline->Shaders will only be cached at the highest level local to the file (the root relative to file) so in this case the `Mesh`."
334959271,358,Crisspl,2019-10-15T13:43:43Z,"yea, in todo for those issues we talked yesterday, will be done today"
334959763,358,Crisspl,2019-10-15T13:44:34Z,do you want me to add something to these docs because I'm not sure?
335027875,358,devshgraphicsprogramming,2019-10-15T15:35:24Z,nope @AnastaZluk only.
335060955,358,Crisspl,2019-10-15T16:39:29Z,resolved
335061632,358,Crisspl,2019-10-15T16:40:58Z,same thing as https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r332878486
335067917,358,Crisspl,2019-10-15T16:54:41Z,resolved
335072770,358,Crisspl,2019-10-15T17:06:04Z,"i think it's already there
`EDF_MULTI_DRAW_INDIRECT_COUNT`
https://github.com/Crisspl/IrrlichtBAW/blob/shaders/source/Irrlicht/COpenGLDriver.cpp#L1743"
335072850,358,devshgraphicsprogramming,2019-10-15T17:06:14Z,iterator pair?
335072862,358,Crisspl,2019-10-15T17:06:16Z,resolved?
335073001,358,Crisspl,2019-10-15T17:06:33Z,look at docs
335073143,358,devshgraphicsprogramming,2019-10-15T17:06:56Z,"dont assume you'll get 5 in order, in Vulkan there are 14 shader types that come in different combos
"
335077607,358,Crisspl,2019-10-15T17:17:09Z,resolved
335079370,358,devshgraphicsprogramming,2019-10-15T17:21:16Z,"I understand why its an array of 5, but thats not future proof."
335080003,358,Crisspl,2019-10-15T17:22:42Z,resolved
335085355,358,Crisspl,2019-10-15T17:34:08Z,why not? all you have to do is to adjust value of SHADER_STAGE_COUNT.
335086400,358,Crisspl,2019-10-15T17:36:30Z,resolved
335098987,358,devshgraphicsprogramming,2019-10-15T18:04:38Z,"Because its absolutely pointless to shove a full array of 14 elements down this pointer when you're only going to use 6 maximum, also its:
A. Unsized (when I look at code suggestions in the IDE its not apparent how many elements this function needs)
B. putting the shaders in wrong order will fuck everything up, despite the fact that `IGPUSpecializedShader` knows its own stage and entry point."
335100639,358,devshgraphicsprogramming,2019-10-15T18:08:20Z,IBuffer is staying in `core::`
335100756,358,devshgraphicsprogramming,2019-10-15T18:08:38Z,undo this
335100895,358,devshgraphicsprogramming,2019-10-15T18:09:01Z,"where it was, its a IBuffer only thing"
335101656,358,devshgraphicsprogramming,2019-10-15T18:10:46Z,"core::IBuffer needs to stay in `core` its used for low level refcounted memory managment.

ICPU and IGPU Buffer need a common base on top of core::IBuffer not moving of IBuffer our of core."
335103960,358,Crisspl,2019-10-15T18:15:42Z,but i had to change namespace of IBuffer from core to asset
335104142,358,Crisspl,2019-10-15T18:16:03Z,i cant stay in core because it has to derive from asset::IDescriptor
335104816,358,devshgraphicsprogramming,2019-10-15T18:17:32Z,"either make an exception for IBuffer (needs to be in `core`) or create a intermediate class in the inheritance chain between `IGPUBuffer`,`ICPUBuffer` and `IBuffer`"
335109822,358,Crisspl,2019-10-15T18:28:11Z,resolved
335115351,358,Crisspl,2019-10-15T18:40:23Z,resolved
335121080,358,Crisspl,2019-10-15T18:52:53Z,resolved
335123202,358,Crisspl,2019-10-15T18:57:59Z,what are they called in opengl? i cant find any info
335148457,358,Crisspl,2019-10-15T20:00:14Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328375630
335148508,358,Crisspl,2019-10-15T20:00:22Z,resolved
335148558,358,Crisspl,2019-10-15T20:00:29Z,resolved
335148742,358,Crisspl,2019-10-15T20:00:54Z,TODO `clearScreen()` see comments
335148971,358,Crisspl,2019-10-15T20:01:31Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r328449492
335223575,358,Crisspl,2019-10-15T23:41:29Z,resolved
335223671,358,Crisspl,2019-10-15T23:41:53Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r332878486
335223710,358,Crisspl,2019-10-15T23:42:00Z,resolved again
335555046,358,devshgraphicsprogramming,2019-10-16T15:39:51Z,and?
335556611,358,devshgraphicsprogramming,2019-10-16T15:42:35Z,isnt this in specialization info already?
335557194,358,devshgraphicsprogramming,2019-10-16T15:43:42Z,@AnastaZIuk would you be so kind and update the docs?
335558163,358,devshgraphicsprogramming,2019-10-16T15:45:22Z,these also need the mask state reset from above ^^
335558239,358,devshgraphicsprogramming,2019-10-16T15:45:30Z,same
335558439,358,devshgraphicsprogramming,2019-10-16T15:45:48Z,status?
335558539,358,devshgraphicsprogramming,2019-10-16T15:45:57Z,@Crisspl ?
335562731,358,devshgraphicsprogramming,2019-10-16T15:53:33Z,"they're not called anything, they don't exist AFAIK

There are some things under OpenGL
https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_shader_framebuffer_fetch.txt
https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_shader_framebuffer_fetch_non_coherent.txt

and 
EXT_shader_pixel_local_storage


Should have a number of `EVDF_` extra enums (already some for tessellation shaders etc) for input attachments, subgroup operations, etc."
335656513,358,Crisspl,2019-10-16T19:04:09Z,it is but GPU specialized shader doesnt hold its specialization data 
335658488,358,Crisspl,2019-10-16T19:08:59Z,when COpenGL compute pipelines come
335660717,358,Crisspl,2019-10-16T19:14:27Z,"nah, i dont think, it goes through shaderc first, not fed to GL directly at this form"
335661584,358,Crisspl,2019-10-16T19:16:34Z,"its not a working example, dont even look at this code"
335662297,358,Crisspl,2019-10-16T19:18:08Z,"ICPUdescriptorSet returns non-const ptr to its contents (descriptors/SWriteDescriptorSet), so they're mutable"
335662908,358,Crisspl,2019-10-16T19:19:37Z,"how can i have support query for something that doesnt exist XD
also the 2nd link is not working"
335663820,358,Crisspl,2019-10-16T19:21:42Z,according to GL wiki it's 2048
335666555,358,Crisspl,2019-10-16T19:28:13Z,resolved
335688609,358,Crisspl,2019-10-16T20:19:31Z,resolved
335688644,358,Crisspl,2019-10-16T20:19:35Z,resolved
335688689,358,Crisspl,2019-10-16T20:19:40Z,resolved
335695049,358,Crisspl,2019-10-16T20:33:55Z,"yea, but it's useless isn't it? I'd have to use `vector` instead of our `smart_refctd_dynamic_array` and/or create some weird `friend`ships between driver and descriptor set classes...."
336068779,358,devshgraphicsprogramming,2019-10-17T15:17:35Z,"ok, I understand"
336071351,358,devshgraphicsprogramming,2019-10-17T15:21:52Z,explain?
336076268,358,devshgraphicsprogramming,2019-10-17T15:30:24Z,"> how can i have support query for something that doesnt exist XD

Does not exist officially, but you can use the extensions to achieve the same effect with those extensions.

> 2nd link is not working

https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_shader_framebuffer_fetch.txt

contains the spec for EXT_shader_framebuffer_fetch_non_coherent."
336078203,358,devshgraphicsprogramming,2019-10-17T15:33:55Z,"> I'd have to use vector instead of our smart_refctd_dynamic_array

Why? you know up-front how many descriptors will be in a DescriptorSet.

> create some weird friendships between driver and descriptor set classes....

Not really, just do
```cpp
type COpenGLDriver::updateDescriptorSet(IGPUDescriptorSet* set, Args... args)
{
   // `updateDescriptorSet` only defined in COpenGLDescriptorSet not in IGPUDescriptorSet
   return static_cast<COpenGLDescriptorSet*>(set)->updateDescriptorSet(args...);
}
```"
336078690,358,devshgraphicsprogramming,2019-10-17T15:34:46Z,all right have it be 2048 so 13 bits
336082133,358,devshgraphicsprogramming,2019-10-17T15:41:06Z,wait don't we know the `_descriptorCount` from `_layout`
336086185,358,devshgraphicsprogramming,2019-10-17T15:48:34Z,@AnastaZIuk  for future reference.
336086946,358,devshgraphicsprogramming,2019-10-17T15:50:02Z,@AnastaZIuk for reference
336088102,358,devshgraphicsprogramming,2019-10-17T15:52:09Z,"hmmm would be useful to have identical function in ICPUDescriptorSet and IGPUDescriptorSet similar to

https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkUpdateDescriptorSets.html"
336088568,358,devshgraphicsprogramming,2019-10-17T15:53:04Z,done?
336092311,358,devshgraphicsprogramming,2019-10-17T16:00:25Z,"Actually scratch that, best thing would be a function common to IGPU and ICPU DescriptorSet, overriding `IDescriptorSet::updateDescriptorSet`... yes in that case it would be exceptionally OK to keep a pointer to `IDriver` or `COpenGLDriver*` in the GPU object implementation.

https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkUpdateDescriptorSets.html"
336130788,358,Crisspl,2019-10-17T17:24:24Z,yea long ago
336131861,358,Crisspl,2019-10-17T17:26:46Z,"> yes in that case it would be exceptionally OK to keep a pointer to IDriver or COpenGLDriver* in the GPU object implementation.

but for what? for what driver would be used?"
336135628,358,Crisspl,2019-10-17T17:35:37Z,">Why? you know up-front how many descriptors will be in a DescriptorSet.

yea, i dont understand concept of updating descriptor sets.. So first i allocate empty descriptor set and then fill it with descriptors? And i must update it only once because number of descriptors is known in the moment of allocation? And i cant update it any more? It's completely useless API then."
336136171,358,Crisspl,2019-10-17T17:36:51Z,"hm,right"
336182715,358,Crisspl,2019-10-17T19:19:06Z,"read this commit's diff https://github.com/buildaworldnet/IrrlichtBAW/pull/358/commits/f0f24c05d32254c555cab669ce77e50fca8531bf
pipeline hash has to be removed from context's cache"
336347327,358,devshgraphicsprogramming,2019-10-18T07:11:42Z,"ok but this necessitates that I remove the `IGPURenderpassIndependentPipeline` with the same thread that created the cache entry.

This is unlike the old VAO where I could create `IGPUMeshDataFormatDesc` and remove it on any thread, the hard limit of total VAO could (plus a global clear function) would take care of removal."
336349501,358,Crisspl,2019-10-18T07:18:48Z,">ok but this necessitates that I remove the IGPURenderpassIndependentPipeline with the same thread that created the cache entry.

yes, that's what docs say

>(2nd paragraph)

This is one I don't understand at all. Why are you talking about mesh data format desc and what vao has to do with all this?
"
336351052,358,devshgraphicsprogramming,2019-10-18T07:23:38Z,"> but for what? for what driver would be used?

Mostly for the Vulkan implementation since you need a `VkDevice` parameter to `vkUpdateDescriptorSets`.

> yea, i dont understand concept of updating descriptor sets.. So first i allocate empty descriptor set and then fill it with descriptors?

You can fill it with descriptors 1 binding at a time (or several) see the struct 
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkWriteDescriptorSet.html
or you can copy from other descriptor sets (or several)
https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkCopyDescriptorSet.html

You can update at any binding if you look at the above structs

> And i must update it only once because number of descriptors is known in the moment of allocation?

Nope you can update as many times as you like, see the structs above. Order of update doesn't matter as long as the updates don't overlap/overwrite.

> And i cant update it any more? It's completely useless API then.

The CPU version you can update as much as you like, the GPU version you can update until you bind it before a draw for the first time, or you create it with an extension that allows for ""update after bind"". But main logic here under Vulkan is that you cannot update the descriptor set while its being used for drawing, before or after is fine."
336351500,358,Crisspl,2019-10-18T07:25:03Z,ah ok I got the English syntax now XD the point of removing calling this `remove` function is that pipeline's shaders GL names might be reused once shaders gets destroyed. So there is a possibility that some new pipeline would get the same hash while the old pipeline's hash still exist in the cache. This would end up in finding pipeline GL name consisting of not-anymore existing shaders (invalid GL names)
336351563,358,devshgraphicsprogramming,2019-10-18T07:25:13Z,"> This is one I don't understand at all. Why are you talking about mesh data format desc and what vao has to do with all this?

Because my old API didn't have this threading requirement and thats how I want the new one to be."
336352018,358,devshgraphicsprogramming,2019-10-18T07:26:42Z,ah indeed.
336355667,358,Crisspl,2019-10-18T07:38:25Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/358#discussion_r336351500 do you get it now?
336358770,358,devshgraphicsprogramming,2019-10-18T07:47:34Z,"> the point of removing calling this remove function is that pipeline's shaders GL names might be reused once shaders gets destroyed.

But if you're using smart_refctd_ptr in the per-context pipeline cache the old shaders (and their GL names) will not be destroyed until you remove the pipeline (and drop the shaders) hence you won't be able to get the same GL handles as long as the pipeline is in the cache."
336487668,358,Crisspl,2019-10-18T13:22:27Z,"going that way, hash for pipeline can be just `smart_refctd_ptr<COpenGLRenderpassIndependentPipeline>`"
336571131,358,devshgraphicsprogramming,2019-10-18T16:20:45Z,"> going that way, hash for pipeline can be just

That will lead to pointless copious amounts of PRogram Pipeline and VAO objects under OpenGL ?"
336584935,358,devshgraphicsprogramming,2019-10-18T16:56:57Z,@Crisspl latest commit does this?
336591021,358,Crisspl,2019-10-18T17:12:58Z,yea
336628103,358,Crisspl,2019-10-18T18:44:03Z,hm nice extensions
336686549,358,devshgraphicsprogramming,2019-10-18T21:42:48Z,very nice and sxy.
336686719,358,devshgraphicsprogramming,2019-10-18T21:43:32Z,you need to check for all of them!
336686813,358,devshgraphicsprogramming,2019-10-18T21:43:55Z,with an ||
336687119,358,devshgraphicsprogramming,2019-10-18T21:44:45Z,what about framebuffer_fetch and the others I listed!?
336687324,358,devshgraphicsprogramming,2019-10-18T21:45:34Z,"@Crisspl can you back these comments up somewhere, I'm scared I'll have to go over it again in the near future when you fix `irr::scene`"
336687432,358,devshgraphicsprogramming,2019-10-18T21:46:02Z,@Crisspl TODO.
336687870,358,devshgraphicsprogramming,2019-10-18T21:47:33Z,@Crisspl TODO and relevant to the question of how you're caching pipelines.
336688303,358,devshgraphicsprogramming,2019-10-18T21:49:24Z,"@Crisspl can you back these comments up somewhere, I'm scared I'll have to go over it again in the near future when you fix `irr::scene`

@AnastaZIuk read this thread, relevaant to the loader refactor."
336688438,358,devshgraphicsprogramming,2019-10-18T21:50:02Z,@Crisspl TODO.
336688975,358,devshgraphicsprogramming,2019-10-18T21:52:24Z,@Crisspl want compute pipelines in this PR
336689022,358,devshgraphicsprogramming,2019-10-18T21:52:37Z,@AnastaZIuk ?
336877131,358,devshgraphicsprogramming,2019-10-21T07:51:02Z,"I'd use a smart refctd array, this could crash badly if I kill the driver (close device)"
336878881,358,devshgraphicsprogramming,2019-10-21T07:55:40Z,"I don't think anyone needs the `lastValidated` field anymore, since gfx pipeline is immutable now, so vertex formats, shaders, etc. can't change.

Unless you're trying to avoid vertex buffer binds (hard optimization)"
336879107,358,devshgraphicsprogramming,2019-10-21T07:56:17Z,"freeUp before insert, you might save a realloc."
336882388,358,devshgraphicsprogramming,2019-10-21T08:05:17Z,aren't you supposed to have a `!_pipeline`  in the if statement?
336893949,358,devshgraphicsprogramming,2019-10-21T08:34:30Z,the VAO cache can drop to 512
336900477,358,devshgraphicsprogramming,2019-10-21T08:49:24Z,or 1k
336922927,358,devshgraphicsprogramming,2019-10-21T09:39:20Z,"I think those are only supported (relevant) if you have GL 4.6 and can feed spir-v directly to OpenGL

>  This extension requires ARB_gl_spirv.

You can query and record, but shouldn't be using `COpenGLExtensionHandler::SPIR_Vextensions` for anything right now."
336963099,358,devshgraphicsprogramming,2019-10-21T11:22:34Z,@Crisspl still a TODO
336967696,358,AnastaZIuk,2019-10-21T11:35:47Z,"I would for sure, I'm sorry I didn't see it then"
337016069,358,AnastaZIuk,2019-10-21T13:26:48Z,@devshgraphicsprogramming done
337053053,358,Crisspl,2019-10-21T14:33:54Z,yea fixed in commit yesterday
337054373,358,Crisspl,2019-10-21T14:36:13Z,"actually it's ""last bound"" time-stamp or whatever ReallocationCounter gives, need for lru-like thing"
337168733,358,devshgraphicsprogramming,2019-10-21T18:22:08Z,ah ok.
337221657,358,Crisspl,2019-10-21T20:24:58Z,"just uncommented it now because im not touching scene nodes now, everything there is broken now so i could #ifndef NEW_SHADERS just as well"
337399840,358,devshgraphicsprogramming,2019-10-22T08:59:39Z,ok
337869058,358,devshgraphicsprogramming,2019-10-23T06:31:27Z,"actually mesh->meshbuffer->pipeline->descriptorset->imageview would make it 4,
5 would be for `IMAGE_HIERARCHYLEVELS_BELOW`"
337871227,358,devshgraphicsprogramming,2019-10-23T06:40:05Z,@Crisspl TODO in next PR
385882121,424,devshgraphicsprogramming,2020-02-28T19:32:10Z,"The rules surrounding IEEE754 support in GPUs are a bit murky, it could wipe out your bit patterns on INFS, NANs, and denormallized numbers, so I'd store `uint` here and if needed do a `uintBitsToFloat`"
385883820,424,devshgraphicsprogramming,2020-02-28T19:36:06Z,"also I'd put the reflectance straight after bitfields, THEN alpha (so other materials can have less dummies)"
385883906,424,devshgraphicsprogramming,2020-02-28T19:36:15Z,see https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files?file-filters%5B%5D=.h#r385883820
385884863,424,devshgraphicsprogramming,2020-02-28T19:38:11Z,"I know that Mitsuba considers a non-PBR override (constant reflectance and transmittance) of the Dielectric Material the same BSDF, but we should dump that into a special case separate from an actual PBR Dielectric"
385885355,424,devshgraphicsprogramming,2020-02-28T19:39:19Z,we could actually error out if reflectance or transmittance is being used... no reason to support non PBR BSDFs.
385886128,424,devshgraphicsprogramming,2020-02-28T19:41:03Z,precompute a single value `eta`
385887000,424,devshgraphicsprogramming,2020-02-28T19:42:59Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files?file-filters%5B%5D=.h#r385885355
385888293,424,devshgraphicsprogramming,2020-02-28T19:46:02Z,"Precompute a single `eta` value (factor out the external ior)

you could store them in the yzw components instead of xyz, so then the first 4 bytes could be the `bitfields` (then put your `alpha` parameters last)"
385891125,424,devshgraphicsprogramming,2020-02-28T19:51:35Z,"actually discord convo supersedes all ""member layout suggestions"""
385892692,424,devshgraphicsprogramming,2020-02-28T19:53:39Z,"actually discord convo supersedes all ""member layout suggestions"""
385893189,424,devshgraphicsprogramming,2020-02-28T19:54:20Z,see my comment about sticking to PBR
385893515,424,devshgraphicsprogramming,2020-02-28T19:55:06Z,PBR
385893769,424,devshgraphicsprogramming,2020-02-28T19:55:39Z,I allow you to error out on phong
385893891,424,devshgraphicsprogramming,2020-02-28T19:55:53Z,PBR
385894521,424,devshgraphicsprogramming,2020-02-28T19:57:14Z,"make twosided a bit flag, instead of a separate BSDF"
385896228,424,devshgraphicsprogramming,2020-02-28T20:01:10Z,decompose a mixture BSDF into a chain of Blend BSDFs with constant (non texture) weights
385899939,424,devshgraphicsprogramming,2020-02-28T20:09:44Z,"upgrade the SBlend BSDF to have a 3-channel weight (packed into RGB19E7 - our custom format for replacing vec3).

then you can decompose the Mask BSDF as a (textured) blend BSDF between the ""fully transparent BSDF"" (delta distribution centered around the transmission direction [negative of viewer direction], divided by absolute value of the cosine between the normal and outgoing direction) and the child of the original mask BSDF"
386046862,424,Crisspl,2020-02-29T18:38:23Z,">then you can decompose the Mask BSDF as a (textured) blend BSDF between the ""fully transparent BSDF (...)""

not really because mask BSDF gives per-channel opacity (idk what that means but.. yea XD)"
386246373,424,devshgraphicsprogramming,2020-03-02T08:17:09Z,"well, upgrade the ""blend"" BSDF to do a 3-channel blend ;)"
386246672,424,devshgraphicsprogramming,2020-03-02T08:18:06Z,"put this in core, where the rgb9e5, rg11b10f and half-float compressors are"
386249162,424,devshgraphicsprogramming,2020-03-02T08:24:57Z,"this is wrong, you need to get the highest exponent first, then adjust all the other mantissa values to be ""in that exponent""

See 
https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_shared_exponent.txt"
386249579,424,devshgraphicsprogramming,2020-03-02T08:25:59Z,"this is dangerous, nobody knows what's going to be in `_node->diffuse.alpha.value.type`"
386250299,424,devshgraphicsprogramming,2020-03-02T08:27:47Z,dangerous if have wrong NDF.
386250338,424,devshgraphicsprogramming,2020-03-02T08:27:52Z,dangerous if have wrong NDF.
386253285,424,devshgraphicsprogramming,2020-03-02T08:34:44Z,"that will backfire since vec2 (`reflectance`) cannot straddle a `vec4` boundary
(put reflectance before roughness)

P.S. I thought roughness could be a texture as well as a float?"
386254216,424,devshgraphicsprogramming,2020-03-02T08:36:57Z,"you need a single dummy, because `vec2` won't go on a 4byte offset, only 8 byte or 16 byte"
386255145,424,devshgraphicsprogramming,2020-03-02T08:39:10Z,to obtain a single `eta`  value divide the internal ior by external ior
386255316,424,devshgraphicsprogramming,2020-03-02T08:39:37Z,this applies to almost every single fallthrough in this switch
386255922,424,devshgraphicsprogramming,2020-03-02T08:41:09Z,"add a `intBitsToFloat`,`uintBitsToFloat`, `floatBitsToInt` and `floatBitsToUint` to the `irr::core::` namespace as template functions in `glslFunctions.h` and `.tcc`"
386256137,424,devshgraphicsprogramming,2020-03-02T08:41:39Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424/commits/cd187102c123a760dbb37a94242581b40da0dcd0#r386255145
386257234,424,devshgraphicsprogramming,2020-03-02T08:44:18Z,bitfield (but propagate down through children)
386257969,424,devshgraphicsprogramming,2020-03-02T08:45:56Z,"uint64_t and you need a dummy in front, these are `vec2`s"
386258368,424,devshgraphicsprogramming,2020-03-02T08:46:48Z,single eta
386258761,424,devshgraphicsprogramming,2020-03-02T08:47:47Z,`vec2` would imply padding here
386263063,424,Crisspl,2020-03-02T08:56:50Z,"I removed all the paddings because GLSL representation will be a struct of a few uvec4s as you suggested. So that everything is packed as possible. I just thought wouldn't it be better if one member didn't lie in just one uvec4 (not in between since I need >1 fetches then).

>I thought roughness could be a texture as well as a float?

yes, single-floats are uint32[2] for my convenience to easier access lower 32 bits (where the float is stored)"
386296771,424,devshgraphicsprogramming,2020-03-02T10:02:30Z,"yeah, about this, for efficient computation it would make more sense to:

1) Find unique trees (different roots)
2) For every tree, do post-order traversal on the CPU to figure out the order in which BSDF nodes would get evaluated

For establishing the normal to use for shading:
3) error out if more than one (can be the same over and over) `bumpmap` bsdf node gets used in the tree (we don't want to be wasting time on that)
4) record normal tangent frames (max 2, and first one is the smooth non displaced one) to be used for shading and evaluate them at the start of the `bsdf_` functions (all the angles and cosines)
5) for every node in the BSDF tree tag which shading normal tangent frame its going to be using (only need 1 bit).

For the `bsdf_sample` functions:
6) You don't need a stack, every single time you hit a blend BSDF node, you will pick the left or right child according to the `sample.x` and the proportion of the left to right child blend weight, then you will sample the child with `sample.x = (sample.x-pre_cdf)/chosen_pdf; sample.xy = sample.yx;` (rescaled random numbers) and bump the output value by `1.0/chosen_pdf` iteratively until you hit a leaf node.

For the bsdf_eval function:
7) when popping the BSDF node from the post-order traversal stack in hte CPU offline preprocessing step, find out the max-stack-size (for all trees, so you can only define that value via specialization constant after you've constructed all the BSDF trees) for the UberShader (with assumption that a parent Blend node moves the resultant value onto the stack replacing the leftmost child).
8) For every tree, record the nodes in the order they would have gotten **popped off the stack** and record the offset in the per-invocation-local-stack where they would have stored their result (for the blend node, do not store children indices, but stack-offsets to consume)."
386297865,424,devshgraphicsprogramming,2020-03-02T10:04:47Z,"> yes, single-floats are uint32[2] for my convenience to easier access lower 32 bits (where the float is stored)

Good idea."
386298862,424,devshgraphicsprogramming,2020-03-02T10:06:38Z,"i.e. if it was an actual `BlendBSDF` then use a RRRA swizzle on the sampler, if it was a `MaskBSDF` then use a RGBA swizzle"
386485318,424,Crisspl,2020-03-02T16:03:24Z,"ah, good point"
387492244,424,devshgraphicsprogramming,2020-03-04T07:39:46Z,"remind me again, why no different opcode for rough vs. non rough?"
387492427,424,devshgraphicsprogramming,2020-03-04T07:40:18Z,mask we can turn into a bit-option just like twosided
387713115,424,Crisspl,2020-03-04T14:47:11Z,"hm, yea, you reminded me that i need one more bit for specifying smooth/lambertian. So it could be another bsdf type just as well.. i'll make separate opcodes for rough variants"
387750424,424,Crisspl,2020-03-04T15:40:58Z,mask is getting translated into blend with fully transparent bsdf
387855992,424,devshgraphicsprogramming,2020-03-04T18:35:17Z,I think it will be cheaper to just make it into a bitfield option and stick the RGB19E7 weight / bindless texture handle at the very end of the BSDF parameter table.
387856237,424,devshgraphicsprogramming,2020-03-04T18:35:42Z,smooth vs. rough... lambertian is a whole different thing
387900570,424,devshgraphicsprogramming,2020-03-04T19:56:59Z,"wait, what's doing on here?"
387900688,424,devshgraphicsprogramming,2020-03-04T19:57:14Z,this is the bumpmap bsdf not coating?
387904126,424,devshgraphicsprogramming,2020-03-04T20:03:34Z,"ekhm bsdfs with no children will attempt to push their non-existent children, because of your weird `visited` design.

You can use two stacks, its not a sin (at least all the bsdf table entries will be there first before you start emitting instructions)
https://www.geeksforgeeks.org/iterative-postorder-traversal/
"
388034579,424,devshgraphicsprogramming,2020-03-05T01:40:21Z,you can use ordinary registers for normals (vec3 is a vec3 after all)
388035104,424,devshgraphicsprogramming,2020-03-05T01:42:15Z,"one more note, it would be ideal if the top level BSDF always wrote its result to Register 0"
389303127,424,devshgraphicsprogramming,2020-03-07T18:42:46Z," textures are not allowed to be > 32k

either make x,y, into uint16_t,

OR

pack the whole offset into `uint32_t` and then provide template functions (for different amount of bits allocated to X,Y and Layer coordinates)"
389305888,424,devshgraphicsprogramming,2020-03-07T19:26:01Z,"we have a file with these already I think... if not make an include in `irr/core` for 2D and 3D (in 8bit, 16bit and 32bit variants) morton code stuff (using `core::vectorSIMDu`)"
389306281,424,devshgraphicsprogramming,2020-03-07T19:33:28Z,"no need for an `E_FORMAT` you'd just need an `E_FORMAT_CLASS` (one enum for all binary compatible formats)

You need to decide if `_szxy` means all the pixels used by the texture or just along one dimension, because the way you've passed it to `reserved_size` implies that its actually the whole texture.

I'd rather specify arguments the user can't ""fuck up"", so
`uint32_t pageCountBits=13u, uint32_t pageLayers=4, uint32_t pageSizeBitsInTexelBlocks=8u`

then page size in texel blocks : `1u<<pageSizeBitsInTexelBlocks==256u`
then total bytes under managment: `(asset::getTexetBlockSize(_format_class)*pageLayers)<<(pageCountBits+pageSizeBitsInTexelBlocks)`


P.S. Megatexture size does not need to be 16k, can be 8k, basically only needs to be as big as the singular biggest texture you're doing to put into it. Layers are more useful in controlling the granularity of the memory pool, since it would otherwise grow exponentially."
389306353,424,devshgraphicsprogramming,2020-03-07T19:34:47Z,"I'd split the allocation logic from the texture packing logic into two different classes that later come together (we might want to re-use the packing logic for on-line GPU resource streaming, with no intermediate CPU objects).

Also we will re-use the packer for real Virtual Texturing (you need to pack the virtual addresses into one virtual texture) and the megaimg will never exist then."
389306538,424,devshgraphicsprogramming,2020-03-07T19:37:43Z,"you can make it sized
```cpp
auto halfSize = pageCountBits>>1u;
{1u<<(pageCountBits-halfSize),1u<<halfSize,1u}
```

then you have slightly more increments of megatexture size"
389306572,424,devshgraphicsprogramming,2020-03-07T19:38:08Z,you can allow for multiple layers
389307875,424,devshgraphicsprogramming,2020-03-07T19:57:32Z,"inheritance and specialization is also a solution
"
389310046,424,devshgraphicsprogramming,2020-03-07T20:31:12Z,in an ideal world you'd only need to check that format class is compatible.
389310409,424,devshgraphicsprogramming,2020-03-07T20:36:35Z,"This will get you better packing
```cpp
core::vectorSIMDu32 extentInPages = (extent+pageSize-1u)/pageSize;
uint32_t mortonEnd = core::xyToMorton(extentInPages-core::vectorSIMDu32(1u))+1u; // one past last pixel
uint32_t pgCnt = core::roundUpToPoT(mortonEnd); // will make sure we have a full Z-square or two Z side by side
```"
389310437,424,devshgraphicsprogramming,2020-03-07T20:37:10Z,"don't assert, handle failure properly, you are likely to fail with such a fragmentation-prone allocator."
389310577,424,devshgraphicsprogramming,2020-03-07T20:39:06Z,"split allocation of offsets from copying of texture data (so we can use the same packer for CPU packing, GPU packing, and VT)"
392337953,424,devshgraphicsprogramming,2020-03-13T16:31:33Z,"you need to inherit from generalpurpose, inheritance not composition.

And you definitely don't want ot be using linear allocator (we want to use this and support adding and removing squares at runtime => in the far future)."
392338582,424,devshgraphicsprogramming,2020-03-13T16:32:39Z,and a 2D layer
392355843,424,devshgraphicsprogramming,2020-03-13T17:01:04Z,"you want this to be given to the `CTexturePacker` constructor, since depending on the anisotropic filter you want to use the packed textures with, the padding can be between 0 and 9 (half of max anisotropy, +1 if using bilinear filter)"
392356548,424,devshgraphicsprogramming,2020-03-13T17:02:24Z,"if you want a shorthand for allocation make a utility function, but this will no longer be an address allocator if it doesn't conform to the function signatures address_allocator_trais expect."
392357798,424,devshgraphicsprogramming,2020-03-13T17:04:42Z,page size does not need to be power-of-two
392357906,424,devshgraphicsprogramming,2020-03-13T17:04:57Z,"also the x,y is counted in pages, not virtual pixels"
392358197,424,devshgraphicsprogramming,2020-03-13T17:05:29Z,page size can be any rectangle you like.
392359050,424,devshgraphicsprogramming,2020-03-13T17:07:08Z,"split out this part, let there be an `ITexturePacker` and a `ICPUTexturePacker` (`IGPUTexturePacker` to come in the future)"
392359965,424,devshgraphicsprogramming,2020-03-13T17:08:54Z,"quick question, is `imageExtent` counting texels or texel blocks?"
392361103,424,devshgraphicsprogramming,2020-03-13T17:11:06Z,"format class not format, generally speaking textures of the same texel block size are compatible with each other for use in ImageViews"
392361849,424,devshgraphicsprogramming,2020-03-13T17:12:38Z,"pack an ICPUImage subresource, the struct that ICPUImageView uses for its creation (so we don't always have to pack the entire image)"
392365180,424,devshgraphicsprogramming,2020-03-13T17:18:43Z,"nope, convert texture size to page extents while rounding up, THEN round Up to Power of Two (but the page size)
```cpp
uint32_t pageSize[2];
pageSize[0] = (extent.width+m_pgSz[0]-1u)/m_pgSz[0];
pageSize[1] = (extent.height+m_pgSz[1]-1u)/m_pgSz[1];

// then obtain one-past the end morton code but in pages.
auto allocSizeAndAlignment = 0x1u<<(core::findMSB(core::morton2d_encode_x(pageSize[0]-1u)|core::morton2d_encode_y(pageSize[1]-1u))+1);
```"
392365446,424,devshgraphicsprogramming,2020-03-13T17:19:11Z,that's allowed to happen (failed allocation) return an invalid texture offset.
392365776,424,devshgraphicsprogramming,2020-03-13T17:19:45Z,"since it will be 64bit anyway, you can use the last 16bits to hold a valid allocation flag."
392367084,424,devshgraphicsprogramming,2020-03-13T17:22:04Z,you also need the page table which shall be an image view of format EF_R32UI 
392367607,424,devshgraphicsprogramming,2020-03-13T17:23:03Z,I think @AnastaZIuk has made a utility function for copying between layers specified as regions of two textures and uses it in GLI Loader/Writer.
392369455,424,devshgraphicsprogramming,2020-03-13T17:26:22Z,"at this point, you want to call a second allocator (the Pool Allocator which has bins of sizeof(uint32_t) and as many bins as you have tiles in the PhysicalAddressTexture)

You `multi_alloc` as many tiles as the texture actually has (not the PoT rounded up count), and you need to fill up the page table texels with the Pool Address Allocated addresses."
392370611,424,devshgraphicsprogramming,2020-03-13T17:28:30Z,individual tiles should be copied one-by-one into the PhysicalAddressTexture
392370968,424,devshgraphicsprogramming,2020-03-13T17:29:09Z,I'd rather call it `PhysicalAddressTexture` since it won't be that big ;)
392600554,424,devshgraphicsprogramming,2020-03-14T16:27:53Z,"ok with latest ideas on how to handle mip-chains, the equation should be
```cpp
uint32_t rnd = core::roundUpToPoT((std::max(extent.width,extent.height)+m_pgSzxy-1u)/m_pgSzxy);
uint32_t pgCnt = rnd*rnd;
```"
392600780,424,devshgraphicsprogramming,2020-03-14T16:31:08Z,take the max number of mip levels as a parameter (this will also determine the max texture size you can allocate/pack (`MaxTextureSize=m_pgSzxy<<(mipLevels-1u)`)
392600893,424,devshgraphicsprogramming,2020-03-14T16:32:46Z,"only ICPUTexturePacker needs to have the page table in CPU memory
(GPU version will most likely work, by queuing up the allocations and deallocations in a dynamic `core::vector` and passing that as an SSBO toa compute shader that will update the pages on a GPU-resident-only page table texture)"
392601268,424,devshgraphicsprogramming,2020-03-14T16:37:45Z,"you're going to be returning just one offset, we can infer the rest via simple mipmapping equation."
392601557,424,devshgraphicsprogramming,2020-03-14T16:40:26Z,"you only allocate the virtual address once (for the base mip-map level only) since the texture allocation will be PoT, so all other mip-map layers can be inferred."
392601789,424,devshgraphicsprogramming,2020-03-14T16:43:40Z,"also make the function virtual, CPU and GPU part will differ in how they handle page table uploads (or make the page table upload function pure virtual)"
392601818,424,devshgraphicsprogramming,2020-03-14T16:44:03Z,can't you get the offset and other stuff from your page table image's region spec?
392602092,424,devshgraphicsprogramming,2020-03-14T16:48:39Z,maybe do one straight from `STexOffset`
392603766,424,Crisspl,2020-03-14T17:12:45Z,wouldnt then at least half of allocated space be unused?
392612385,424,devshgraphicsprogramming,2020-03-14T19:19:55Z,you want an `isValid` function because alloc returns an `STexOffset` 
392612655,424,devshgraphicsprogramming,2020-03-14T19:23:52Z,"maybe make the template
`template<typename T, size_t bitDepth=sizeof(T)*8u>`

so the ""range"" is independent of type (useful for having fast mortons for small quadtrees)"
392612670,424,devshgraphicsprogramming,2020-03-14T19:24:18Z,encode would be useful too
392612697,424,devshgraphicsprogramming,2020-03-14T19:24:43Z,configurability?
392612717,424,devshgraphicsprogramming,2020-03-14T19:25:05Z,now it can't ;)
392612889,424,devshgraphicsprogramming,2020-03-14T19:27:12Z,"yeah now page size needs to be PoT due to mip-tail issues, however `_tilesPerDim` only need to be a multiple of 2^`(maxMipLevel-pageTileMipTailSize)`

P.S. where `maxMipLevel=log2(MaxAllocatableTextureSize)`"
392612981,424,devshgraphicsprogramming,2020-03-14T19:28:40Z,still upholding my comment about format class
392613005,424,devshgraphicsprogramming,2020-03-14T19:29:07Z,you need to be able to handle allocation failure
392614167,424,devshgraphicsprogramming,2020-03-14T19:46:38Z,"Well, no why? the page table is a regular texture.

If you allocate a texture which is (16,16) pages, then due to morton code + alignment it can only have an offset that is a multiple of its size ;)

hence possible offset you'd get allocated in the base mip would be (0/8/16/24/32/....,0/8/16/24/32/....)

The remaining mip level offsets you can infer by dividing th base leve offset by `exp2(mipLevel)` , because of magical alignment and the quadtree-like structure you will never suffer from integer truncation.

Obviously when you get to the 1x1 page tile level, you stop needing to worry about the remaining mip levels (we'll make sure the next 2 contiguous pages get allocated for a mip tail) just make sure you mark that page table entry with the `TAIL_BIT` flag (which still leaves you with enough bits to address 2*1024*1024*1024 separate physical pages, which is insane - or 32k if you use 16bit physical table pointers which would still allow you to keep 512 Megapixels resident in memory with a 128x128 page tile)."
392631203,424,Crisspl,2020-03-15T00:46:08Z,"ah, you're talking about page table. This code here is allocation of tiles into physical texture"
392654793,424,devshgraphicsprogramming,2020-03-15T09:08:10Z,"Square address allocator is for virtual address

PoolAddressAllocator with no alignment at all is for physical pages and the only value being saves should be a uint16_t ;)"
392656420,424,Crisspl,2020-03-15T09:31:48Z,"oh, allocation is done a lot different than you wanted it then XD Actually now i see more sense to it. Luckily it's no problem to change it"
392825456,424,devshgraphicsprogramming,2020-03-16T07:22:00Z,~just store it as `uint16_t[2]` to make life easier~
392825783,424,devshgraphicsprogramming,2020-03-16T07:23:08Z,waaait.... `STexOffset` is a offset into virtual UV space (page table).... you don't store the `uint16_t` offset pair here... that goes into the page table!
392826080,424,devshgraphicsprogramming,2020-03-16T07:24:03Z,`STexOffset` is still supposed to be 32bit and use full precision here ;)
392826450,424,devshgraphicsprogramming,2020-03-16T07:25:13Z,"Make the `x()`, `y()` and `layer()` functions of `STexOffset` be handled via the texture packer (so it can pass through the bit allocation)"
392846113,424,devshgraphicsprogramming,2020-03-16T08:17:09Z,only need to be multiple (different in each dimension) of max-allocatable texture size (which itself needs to be PoT and square)
392872752,424,devshgraphicsprogramming,2020-03-16T09:11:12Z,"this will always happen, the texture will always have a mip-tail < pageSize

unless its clipped, easy to figure out

`any((_img->getMipSize(_subres.baseMipLevel+_subres.levelCount-1u) < m_pgSzxy_as_vectorSIMDu) & mask1100)`

"
392873520,424,devshgraphicsprogramming,2020-03-16T09:12:32Z,it doesn't get allocated in a different place in VT atlas
392873910,424,devshgraphicsprogramming,2020-03-16T09:13:11Z,no need for `Layer` in the name (since every layer will have the same size)
392883219,424,devshgraphicsprogramming,2020-03-16T09:30:06Z,wrong the offsets into the padded physical texture are stored at the pixels of the page table
392884987,424,devshgraphicsprogramming,2020-03-16T09:33:17Z,"the virtual address range can have a completely independent number of layers, and also there's no reason to have more than 1 (because even a 16kx16k texture will give you crazy virtual texcoord range)"
392889528,424,devshgraphicsprogramming,2020-03-16T09:41:16Z,"`core::findMSB(core::min(_tilesPerDim,(core::roundUpToPoT(MaxAllocatableTextureSize)+m_pgSzxy-1u)/m_pgSzxy)))+1`"
392890259,424,devshgraphicsprogramming,2020-03-16T09:42:31Z,uze a proper sizeof() instead of an integer literal
392890365,424,devshgraphicsprogramming,2020-03-16T09:42:41Z,again
392941547,424,devshgraphicsprogramming,2020-03-16T11:07:02Z,"yeah this is screwed, cause `STexOffset` is not supposed to store that"
392970622,424,Crisspl,2020-03-16T12:08:36Z,"now page table and physical addr texture both have the same number of pages (texels in case of page tab) and layers, so STexOffset can represent both things. However ofc u're right that numbers of pages in physical addr tex and in page table could be completely independent"
392971829,424,devshgraphicsprogramming,2020-03-16T12:10:54Z,"arent you supposed to compute that while taking the padding into account?

like in `physAddrTexLayerSz` or `pageCoords` ?"
392973162,424,Crisspl,2020-03-16T12:13:45Z,"nah, it's `src_` (i.e. into image being packed) offset, there's no padding"
392975190,424,Crisspl,2020-03-16T12:17:44Z,so now i use STexOffset to represent page-wise address/offset into physical addr tex (what is stored in page table texels) AND texel-wise offset into page table (then upper 16 bits are unused ofc)
392978554,424,Crisspl,2020-03-16T12:23:26Z,"well, i think it has to be PoT for allocation of squares with morton codes to work fine"
392980223,424,devshgraphicsprogramming,2020-03-16T12:25:34Z,"yeah thats the wrong thing going into the page table,

I think i'll stop reviewing the commit here."
392980874,424,devshgraphicsprogramming,2020-03-16T12:26:22Z,"again, `STexOffset` is not your page pointer (doesn't hold the mip-tail pointer in high bits)."
392984478,424,Crisspl,2020-03-16T12:30:48Z,"> unless its clipped

thats why theres this `if ` :P"
392985026,424,Crisspl,2020-03-16T12:31:27Z,? i dont understand
392986032,424,Crisspl,2020-03-16T12:32:35Z,what does it have to do with this code?
392987814,424,Crisspl,2020-03-16T12:34:45Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r392975190
392990301,424,Crisspl,2020-03-16T12:37:36Z,"you probably shouldnt even review this commit, look at state of code from last commit"
392990986,424,Crisspl,2020-03-16T12:38:29Z,why are you telling me what my code is and what isnt XD
392991645,424,Crisspl,2020-03-16T12:39:16Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r392970622
393032945,424,devshgraphicsprogramming,2020-03-16T13:46:16Z,you don't need this variable anymore it seems?
393033495,424,devshgraphicsprogramming,2020-03-16T13:47:10Z,"> so now i use STexOffset to represent page-wise address/offset into physical addr tex (what is stored in page table texels) AND texel-wise offset into page table (then upper 16 bits are unused ofc)

Don't do that, its confusing. Separate types."
393034286,424,Crisspl,2020-03-16T13:48:24Z,"yea, thx"
393040001,424,devshgraphicsprogramming,2020-03-16T13:56:54Z,"> However ofc u're right that numbers of pages in physical addr tex and in page table could be completely independent

its useful to have a full 32bit Virtual Texture Offset, because then youre megatexture can be `2^(31 + pageSizeLog2*pageDimensions)` texels in size which becomes really fun  once streaming is implemented (page size of 1024 could allow a 64M x 32M texture which would be enough to store the whole of the Earth with resolution of 0.25m by 0.25m pixels)"
393041946,424,devshgraphicsprogramming,2020-03-16T13:59:41Z,"ah shit you're kind of right

for morton code it needs to be either

`xDim(1<<tilesPerDimLog2), yDim(1<<tilesPerDimLog2)`
or
`xDim(1<<(tilesPerDimLog2+1)), yDim(1<<tilesPerDimLog2)`"
393042611,424,devshgraphicsprogramming,2020-03-16T14:00:43Z,I don't think that `levelCount` if and logic behind calculating it works out the same.
393043046,424,devshgraphicsprogramming,2020-03-16T14:01:26Z,the last page for the mip-tail it does not need a separate offset in the Virtual Address space
393044535,424,devshgraphicsprogramming,2020-03-16T14:03:31Z,"the fact that you were using `STexOffset` as the input to this function and I'm under the impression that `STexOffset` is what you get back from the `alloc(ICPUImage,Subresource)` function when you ask the Packer to place an image and its mipmap chain in the virtual address space"
393044795,424,devshgraphicsprogramming,2020-03-16T14:03:54Z,"ah ok, didn't notice it was `src`"
393052614,424,Crisspl,2020-03-16T14:14:47Z,"> `xDim(1<<tilesPerDimLog2), yDim(1<<tilesPerDimLog2)`

how it is now since `1<<tilesPerDimLog2` is `tilesPerDim`

> `xDim(1<<(tilesPerDimLog2+1)), yDim(1<<tilesPerDimLog2)`

it's not even square"
393055082,424,Crisspl,2020-03-16T14:17:05Z,"ah, so it's just the confusion from me using STexOffset for both things"
393074188,424,devshgraphicsprogramming,2020-03-16T14:38:53Z,still need one
393076884,424,devshgraphicsprogramming,2020-03-16T14:42:34Z,"> it's not even square

Yes morton codes work with textures that have an aspect ratio of 1:1 or 2:1"
393077538,424,devshgraphicsprogramming,2020-03-16T14:43:28Z,"Because its  Z-order and the Z covers the X first so its possible to have a 2:1 ratio domain.

In 3D Morton code works with 2:1:1, 2:2:1 and 1:1:1"
393077783,424,devshgraphicsprogramming,2020-03-16T14:43:47Z,looks like it
393089903,424,devshgraphicsprogramming,2020-03-16T15:00:31Z,check for failed allocation
393090543,424,devshgraphicsprogramming,2020-03-16T15:01:25Z,why use a loop to determine `levelCount` ?
393094620,424,devshgraphicsprogramming,2020-03-16T15:07:03Z,"if `i+m_pgSzxyLog2+1>=_subres.levelCount` then allocate two pages instead of one (obviously make sure you quit the 3 loops as soon as possible, so you don't hit this multiple times)"
393099694,424,devshgraphicsprogramming,2020-03-16T15:14:32Z,"also its more efficient to allocate addresses from the pool up to 1000 thousand at a time (stack for temporary address storage and function input arguments) using `core::address_allocator_traits<PoolAddressAllocatorTYPE>::multi_alloc(m_pageAllocator,...)`"
393100483,424,devshgraphicsprogramming,2020-03-16T15:15:39Z,why are you now returning a 128bit value instead of a 32bit?
393101734,424,devshgraphicsprogramming,2020-03-16T15:17:29Z,"dont call it `STexOffset` if this is your pointer to the physical storage page

a name TextureOffset is only allowed to name the offset into virtual address space"
393102763,424,devshgraphicsprogramming,2020-03-16T15:18:56Z,"you can't use 0 to be the ""no mip tail value"" because the valid range of page addresses is [0,MAX) only values past the MAX are allowed to be used to denote ""invalid"""
393103104,424,devshgraphicsprogramming,2020-03-16T15:19:25Z,`(_offset.addr&(0xffffu<<16))!=invalid_addr`
393133767,424,Crisspl,2020-03-16T16:02:02Z,"because why not, bitdepth doesnt matter as long as its sufficient for all values"
394636034,424,devshgraphicsprogramming,2020-03-18T20:59:03Z,something really inconsistent is going on with your use of `_subsquareSz` across alloc and free
394636972,424,devshgraphicsprogramming,2020-03-18T21:00:50Z,if you're going down the virtual function route in `ITexturePacker` then the type for `alloc` and `free` needs to be `IImage` not `ICPUImage`
394637700,424,devshgraphicsprogramming,2020-03-18T21:02:16Z,you can share all this between `ICPUTexturePacker` and a future `IGPUTexturePacker` by declaring it all in `ITexturePacker`
394639611,424,devshgraphicsprogramming,2020-03-18T21:06:11Z,lets not use constant literals unless they are blatantly obvious
394640172,424,devshgraphicsprogramming,2020-03-18T21:07:26Z,I thought there as a simple equation for getting this without having to resort to a trial&error loop
394640581,424,devshgraphicsprogramming,2020-03-18T21:08:15Z,this function is different for 2d and 3d I'd suppose
394640883,424,devshgraphicsprogramming,2020-03-18T21:08:48Z,?
394649773,424,devshgraphicsprogramming,2020-03-18T21:27:54Z,still relevant
394649873,424,devshgraphicsprogramming,2020-03-18T21:28:05Z,still relevant
394650261,424,devshgraphicsprogramming,2020-03-18T21:28:49Z,still relevant
394650304,424,devshgraphicsprogramming,2020-03-18T21:28:54Z,still relevant
394650787,424,devshgraphicsprogramming,2020-03-18T21:29:55Z,still relevant
394650993,424,devshgraphicsprogramming,2020-03-18T21:30:25Z,"yeah, but when they get copied over make sure shaders use 64bit as input/storage"
394651338,424,devshgraphicsprogramming,2020-03-18T21:31:09Z,whats the status now?
394652299,424,devshgraphicsprogramming,2020-03-18T21:33:19Z,ok latest version looks good.
394655105,424,devshgraphicsprogramming,2020-03-18T21:39:46Z,"nice stuff, really like the new API of this commit

one suggestion... make the `width` and `height` store a unorm 16 unsigned ratio of `originalTextureSize/maxAllocatableTextureSize` then we can easily work out the scaling factor for uvs in the virtual texture

`pgTab_x` and y should be unorm offsets in virtual UV space, they will be 100% accurate as you require each dimension of virtual page table to be a Power of Two"
394655949,424,devshgraphicsprogramming,2020-03-18T21:41:40Z,"debug break if, not assert"
394656261,424,devshgraphicsprogramming,2020-03-18T21:42:23Z,goes into the SContext!
394691606,424,Crisspl,2020-03-18T23:14:20Z,"no, why?"
394691849,424,Crisspl,2020-03-18T23:15:05Z,"right, thx"
394692249,424,Crisspl,2020-03-18T23:16:29Z,"ofc, i have only 2d functions"
394692729,424,Crisspl,2020-03-18T23:17:53Z,i dont understand
394693356,424,Crisspl,2020-03-18T23:19:56Z,"> core::address_allocator_traits<PoolAddressAllocatorTYPE>::multi_alloc

ah, thats how u do multi_alloc"
394693666,424,Crisspl,2020-03-18T23:21:00Z,"it is, thats why `if constexpr`s are there"
394860979,424,devshgraphicsprogramming,2020-03-19T08:31:52Z,"one place uses the `_subsquareSz` as normal and `free` squares it instead?

Also see my comment about this class not being a proper address allocator because it doesn't conform to the API"
394866289,424,devshgraphicsprogramming,2020-03-19T08:42:37Z,"you're not getting me, you're assuming that if I do a 2d morton code with a return type `uint32_t` I want a 16bit X,Y resolution

but I could want a 32bit value, while only wanting a 4bit X,Y resolution (morton code for values up to 255) - that stuff is useful for computing small neighbourhoods, etc.

This is why the bit-depth of the morton code should not be inferred from the size of the return type."
394866751,424,devshgraphicsprogramming,2020-03-19T08:43:25Z,"its convoluted and not pretty to work out the `levelCount`, unlike
`any((_img->getMipSize(_subres.baseMipLevel+_subres.levelCount-1u) < m_pgSzxy_as_vectorSIMDu) & mask1100)`"
394905713,424,devshgraphicsprogramming,2020-03-19T09:52:34Z,"yes, you shouldn't be touching an `address_allocator` directly (just like STD C++ lib doesn't touch allocators directly) but call all their methods via the `traits` wrapper XD"
394907553,424,devshgraphicsprogramming,2020-03-19T09:55:29Z,yeah just make it explicit in the name that this is a `2d` function
394930664,424,Crisspl,2020-03-19T10:35:41Z,"i know it isnt, therefore i dont know why would i want to inherit from general purpose addr allocator instead of having it as member?"
394955025,424,devshgraphicsprogramming,2020-03-19T11:21:25Z,"I'm questioning two things:

1.
> one place uses the _subsquareSz as normal and free squares it instead?

are you sure that is not a bug?


2. Why do you need a class that looks like an address allocator, has methods almost like one and then needlessly wraps an existing address allocator?

"
394980211,424,Crisspl,2020-03-19T12:11:40Z,"1. both squares it, maybe u're looking at some old code
2. maybe u're right.. i'll try to rewrite it with inheritance"
394981674,424,Crisspl,2020-03-19T12:14:21Z,"ah, ok, now i get what u mean"
394988317,424,devshgraphicsprogramming,2020-03-19T12:27:15Z,"> maybe u're right.. i'll try to rewrite it with inheritance

I think there's probably no need to have it in the first place, since its a very thin intermediatory to `GeneralPurpose`"
396372581,424,devshgraphicsprogramming,2020-03-23T11:10:22Z,`createMeshStub` its a stub cause it unusable without a pipeline
396373006,424,devshgraphicsprogramming,2020-03-23T11:11:09Z,agreed
396374004,424,devshgraphicsprogramming,2020-03-23T11:12:59Z,"probably not, not many people expect their vertex colours to be decoded from SRGB encoding, and once you decode you either lose Alpha OR you need to expand to 64bits from 32bit."
396374143,424,devshgraphicsprogramming,2020-03-23T11:13:11Z,Could be a loader flag at some point @AnastaZIuk 
396374450,424,devshgraphicsprogramming,2020-03-23T11:13:44Z,why at the last binding?
399501275,424,devshgraphicsprogramming,2020-03-27T19:44:16Z,"put this together with the packer, you've now repeated yourself multiple times"
399501500,424,devshgraphicsprogramming,2020-03-27T19:44:45Z,but you're using `set=0` above?
399502330,424,devshgraphicsprogramming,2020-03-27T19:46:38Z,"why override the whole BSDF, if you could only override the texture fetching functions?"
399502717,424,devshgraphicsprogramming,2020-03-27T19:47:27Z,"isnt `TILE_PADDING` runtime configurable, why is it in caps?"
399503096,424,devshgraphicsprogramming,2020-03-27T19:48:14Z,"virtual texture size, not the page table size so `extent.width*pageSize`"
399503592,424,devshgraphicsprogramming,2020-03-27T19:49:13Z,really want the sample to be done with UBOs and MultiDrawIndirect
399514785,424,devshgraphicsprogramming,2020-03-27T20:13:40Z,still an issue
399514907,424,devshgraphicsprogramming,2020-03-27T20:13:57Z,still an issue
399516088,424,devshgraphicsprogramming,2020-03-27T20:16:35Z,"you probably want to return the smartpointer to the texture packers (virtual textures) used by the pipeline 

you could do it in the global metadata actually"
399516179,424,devshgraphicsprogramming,2020-03-27T20:16:49Z,still an issue
399516386,424,devshgraphicsprogramming,2020-03-27T20:17:18Z,still an issue
399516813,424,devshgraphicsprogramming,2020-03-27T20:18:20Z,still an issue
399516896,424,devshgraphicsprogramming,2020-03-27T20:18:29Z,still an issue
399517973,424,devshgraphicsprogramming,2020-03-27T20:20:47Z,this should 100% be part of the ITexturePacker
399528214,424,devshgraphicsprogramming,2020-03-27T20:43:57Z,why are you using `coating` here everywhere? I'm getting confused
399531488,424,devshgraphicsprogramming,2020-03-27T20:51:24Z,"put in some metadata, either global or pipeline, you'll want to return that with the asset"
399534336,424,devshgraphicsprogramming,2020-03-27T20:58:09Z,"I'd just take saner input parameters, such as log2 of the sizes (so then you don't need to assert for PoT)"
399535856,424,devshgraphicsprogramming,2020-03-27T21:01:42Z,"well actually you could allow the `_tilesPerDim` to be different in Width,Height and LayerCount (but still PoT for the bit extraction) for some added flexibility in the packing of the tiles in the physical texture"
399536188,424,devshgraphicsprogramming,2020-03-27T21:02:26Z,unused and confusing variable
399541336,424,devshgraphicsprogramming,2020-03-27T21:14:56Z,"need sane default parameters for the `_pgTabSzxy`, `_tilesPerDim` could be in log2"
399543239,424,devshgraphicsprogramming,2020-03-27T21:19:42Z,"`_maxMipLevels` is the number of levels of the page table, not the max levels of the allocated texture.. will be confusing.

Because if we change the tile size then the max mip level will change also, I'd rather have it as the max texture mipmap level (and hence max size)"
399543822,424,devshgraphicsprogramming,2020-03-27T21:21:18Z,"physical texture can be any size as long as individual sides are PoT (2x128 tiles is ok, so is 64x16)"
399543935,424,devshgraphicsprogramming,2020-03-27T21:21:40Z,copy from `params.extent` less chance for fuckups
399544079,424,devshgraphicsprogramming,2020-03-27T21:21:58Z,do computation in terms of `params.extent` and `params.arrayLayers`
399548852,424,devshgraphicsprogramming,2020-03-27T21:34:40Z,because of IEEE754 precision issues once you start having virtual UV coordinates for textures that are > 32k in size (256 pages) we should support layered Page Tables and UV offsets
399550261,424,Crisspl,2020-03-27T21:38:44Z,"yea, i know, keeping it square just makes address encoding easier"
399560955,424,devshgraphicsprogramming,2020-03-27T22:10:02Z,"the equation for this is
```
const uint32_t baseMaxDim = core::roundToPoT(core::max(extent.width,extent.height))>>_subres.baseMipLevel; // same as your allocation side length
const int32_t lastFullMip = core::findMSB(baseMaxDim)-m_pgSzxy_log2;
const int32_t levelCount = core::clamp(lastFullMip+1,0,m_maxPageTableMipLevels); 
```"
399564446,424,devshgraphicsprogramming,2020-03-27T22:21:45Z,"this needs to be a minimum, `core::min(_subres.levelCount,m_maxPageTableMipLevels+m_pgSzxy_log2)`"
399565698,424,devshgraphicsprogramming,2020-03-27T22:26:13Z,"you know from the `computeSquareSz` that you will need 
```
uint32_t allocationSize = computeSquareSz();
uint32_t pagesNeeded = allocationSize;
for (uint32_t i=1u; i<levelCount; i++)
    pagesNeeded |= pagesNeeded>>i;
if (core::min(_subres.levelCount,m_maxPageTableMipLevels+m_pgSzxy_log2)>levelCount) // do we have a mip tail
    pagesNeeded++; // for the mip tail
```
pages, and you can do the multi_alloc from the pool allocator here."
399566204,424,devshgraphicsprogramming,2020-03-27T22:27:40Z,leaving the loop unreviewed for now.
399566326,424,devshgraphicsprogramming,2020-03-27T22:27:59Z,"this code is `computeSquareSz` again, but under a different form, keep DRY"
399566416,424,devshgraphicsprogramming,2020-03-27T22:28:18Z,this code is `computeSquareSz`
399566487,424,devshgraphicsprogramming,2020-03-27T22:28:38Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&hide-deleted-files=true#r399560955
399566939,424,devshgraphicsprogramming,2020-03-27T22:30:11Z,"`multi_free` can be expensive, better that you buffer up the addresses to be freed"
399576156,424,devshgraphicsprogramming,2020-03-27T23:04:39Z,`sizeof()` not a random `4u`
399576266,424,devshgraphicsprogramming,2020-03-27T23:05:07Z,"Moved to:
https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&hide-deleted-files=true#r399560955"
399576547,424,devshgraphicsprogramming,2020-03-27T23:06:23Z,actually best if it goes into the global metadata that will be returned after the assets load.
399577358,424,Crisspl,2020-03-27T23:09:50Z,yea see the comment in top line. It disables set3 as an extra because they're not needed
399577868,424,devshgraphicsprogramming,2020-03-27T23:12:01Z,ah ok
399578004,424,devshgraphicsprogramming,2020-03-27T23:12:43Z,well you can still easily encode addresses if each dimension is PoT but all are not the same
399580175,424,Crisspl,2020-03-27T23:21:52Z,VT textures (both) are getting returned as ds0 through pipeline metadata attached to every pipeline
399582051,424,Crisspl,2020-03-27T23:29:50Z,"sometimes im accessing `bsdf` table through random union member (e.g. coating) because I'd to have lots of ifs just to access it through proper union member even though it's always same array (since it's a union and `bsdf` array is at the same offset in all bsdf structs).
 Well.. this explanation is also kinda blurry XD maybe you'll want to ask on discord"
399585204,424,devshgraphicsprogramming,2020-03-27T23:44:51Z,"can you add another union as an alias, and use that instead so we're not confused to high shit?"
399585309,424,devshgraphicsprogramming,2020-03-27T23:45:24Z,"these are just the textures, and not the texture manager.

Also for multithreading the texture packer cannot be global and persistent between loading calls"
399655019,424,Crisspl,2020-03-28T12:07:16Z,"yea, i wanted to do it, but it would require dynamic allocation of arrays for params of `multi_alloc_addr` so i gave it up"
399660401,424,devshgraphicsprogramming,2020-03-28T13:06:07Z,"> yea, i wanted to do it, but it would require dynamic allocation of arrays for params of multi_alloc_addr so i gave it up

 hmm ok"
399661647,424,Crisspl,2020-03-28T13:18:18Z,"oh, i thought i put it into SContext. Sure, thanks"
399661882,424,Crisspl,2020-03-28T13:20:28Z,"> these are just the textures, and not the texture manager.

yea, but packer is useful as long as something is being packed"
399663456,424,Crisspl,2020-03-28T13:37:09Z,this code is not there any more and twosided already is a bitfield
399664922,424,Crisspl,2020-03-28T13:52:33Z,done
399665009,424,Crisspl,2020-03-28T13:53:27Z,will do once it's implemented correctly
399670610,424,Crisspl,2020-03-28T14:51:14Z,fixed with your fun equation
399671854,424,Crisspl,2020-03-28T15:02:19Z,leaving as is for now
399672032,424,Crisspl,2020-03-28T15:03:50Z,"it's kinda dirty (not 100% safe but very unlikely to be unsafe), i'm assuming that binding 15 is not used by PLY loader"
399672983,424,Crisspl,2020-03-28T15:13:29Z,"right, thanks"
399673687,424,Crisspl,2020-03-28T15:20:02Z,because GLSL's `texture()` and my `textureVT` differ too much. They have different number of parameters and different types of them. It's very hard/impossible to make a suitable abstraction for texture fetching 
399677442,424,Crisspl,2020-03-28T15:55:57Z,done
399705119,424,devshgraphicsprogramming,2020-03-28T20:19:02Z,"would be good to return it though in the metadata, it doesn't cost anything really."
399705493,424,devshgraphicsprogramming,2020-03-28T20:23:20Z,"well the idea is not that you override the GLSL `texture` call, but you override a the MTL shader's `loadKd`, `loadKa` functions etc.

But of course that would require the routines to be overloadable, not just plain `Kd = texture` in the original shader"
399724726,424,Crisspl,2020-03-29T00:03:22Z,ok
402559627,424,devshgraphicsprogramming,2020-04-02T19:29:04Z,what is this color buffer even being used for?
402656888,424,devshgraphicsprogramming,2020-04-02T23:39:10Z,pageID is without padding XD
405338248,424,devshgraphicsprogramming,2020-04-08T08:12:32Z,"static inline `const`, not `constexpr`"
405447171,424,devshgraphicsprogramming,2020-04-08T11:16:10Z,"why 12, in 3D you'd have 26 border regions (3x3x3 minus the center)"
405447420,424,devshgraphicsprogramming,2020-04-08T11:16:42Z,there's now a `getRegions(MipMapLevel)`
405484624,424,Crisspl,2020-04-08T12:26:18Z,why?
410732330,424,devshgraphicsprogramming,2020-04-18T18:22:35Z,"I've had a really bad time with performance and switches in my GPU raytracingwork... use if statements, also I gave you a GLSL snippet on discord on how to implement the wrapping modes with the least divergence (reusing a few ops)"
429988167,424,devshgraphicsprogramming,2020-05-25T15:22:16Z,status?
429991939,424,devshgraphicsprogramming,2020-05-25T15:31:48Z,"because its a non trivial struct, I believe C++ standard states that only trivial PoD can be constexpr"
430041721,424,Crisspl,2020-05-25T18:28:30Z,"fixed, made this union member
```
			//a not confusing way (extra union member) to access members common for all structs inheriting from MetaBSDF
			MetaBSDF			meta_common;
```"
430042446,424,Crisspl,2020-05-25T18:31:58Z,"any literal type can be constexpr. And literal type is any type with at least one constexpr constructor. But anyway this `default_region_functor` disappeared somewhere, idk what happened with it"
430076725,424,devshgraphicsprogramming,2020-05-25T21:18:08Z,TODO: opcode ordering
431093829,424,devshgraphicsprogramming,2020-05-27T12:54:03Z,why? what's wrong with the implementation of `core::floatBitsToUint` ?
431096538,424,devshgraphicsprogramming,2020-05-27T12:58:14Z,"couple pointers:
- start with implementing sampling for lambertian, then progress onto the delta distributions
- `*cos_gen_sample` should take the ViewSurfaceInteraction as an `in` parameter (we need to know View, Normal, NdotV and possibly later the ray derivatives or ray covaraiance matrices)
- do an overload for `*cos_gen_sample` that takes `vec2` and `uvec2` then we can implement, this is wo we can implement like this
```glsl
BSDFSample some_cos_gen_sample(in ViewSurfaceInteraction interaction, in vec2 _sample, args...)
{
   ...
}

// to be fair this could be a macro to delare the uint overload
BSDFSample some_cos_gen_sample(in ViewSurfaceInteraction interaction, in uvec2 _sample, args...)
{
   vec2 u = vec2(_sample)/4294967295.0;
   return some_cos_gen_sample(interaction,u,args...);
}
```"
431141481,424,devshgraphicsprogramming,2020-05-27T13:43:51Z,"Since `irr_glsl_ViewSurfaceInteraction` does not contain normalized `V` nor `N` we should introduce a `irr_glsl_NormalizedViewSurfaceInteraction` which contains a normalized `V`, `N` and replace a few functions (`bsdf_cos_sample`, `irr_glsl_calcBSDFIsotropicParams` etc. as well as change the type inside the `irr_glsl_BSDFIsotropicParams` struct) that take `irr_glsl_ViewSurfaceInteraction` with ones that take `irr_glsl_NormalizedViewSurfaceInteraction` instead."
431220623,424,devshgraphicsprogramming,2020-05-27T15:15:16Z,"Make a note that

http://www.pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Reflection_Functions.html#fragbit-1215
+
https://github.com/mmp/pbrt-v3/blob/9f717d847a807793fa966cf0eaa366852efef167/src/core/microfacet.cpp#L120

Has a sampling according to visible microfacets which is much shorter and simpler

Its a bit disgusting for implementation in GLSL"
431221320,424,Crisspl,2020-05-27T15:16:12Z,not with `floatBitsToUint` but as you were saying once it's better to keep all as uints because `-ffast-math` might change some bits while copying or something (if the bits happen to match ieee754 NaN or inf bit pattern)
431223459,424,devshgraphicsprogramming,2020-05-27T15:19:11Z,hmm we could call `irr_glsl_NormalizedViewSurfaceInteraction` as `irr_glsl_IsotropicViewSurfaceInteraction` instead
431232866,424,devshgraphicsprogramming,2020-05-27T15:29:12Z,"You need the frisvad tangent space creation function from example 22 (RaytracedAO, it might have been removed since then, but in one of the revisions it was there) this will allow you to transform out the half vector into whatever space `V` and `N` are

I suggest adding a struct `irr_glsl_AnisotropicViewSurfaceInteraction` to hold normalized `T`, `B`,`TdotV` and `BdotV`
Then this starts being relevant.
> hmm we could call `irr_glsl_NormalizedViewSurfaceInteraction` as `irr_glsl_IsotropicViewSurfaceInteraction` instead

We can have two overloads of `irr_glsl_calcAnisotropicInteraction(in irr_glsl_IsotropicViewSurfaceInteraction isotropic, args...)` :
- One where `args` are `in vec3 T, in vec3 B` (user knows and cares about tangent space, require T and B be normalized inputs)
- One where `args` is just `in vec3 T`, its the same as above but you construct bitangent from `cross(N,T)`
- One where `args` are nothing and you use Frisvad method to construct tangent space quickly

Then using T,B,N it will be really easy for you to bring the H vector to the space of `V`"
431244552,424,Crisspl,2020-05-27T15:44:53Z,"yeah, i've seen this code and thats exactly the reason why i wanted to look for some other source before i'm going to copy PBRT's code. I have Heitz's paper about sampling ggx (ggx actually got 2nd paper with preetier and faster solution) and beckmann VNDF and possibly there i'll find something better"
431246654,424,Crisspl,2020-05-27T15:47:30Z,"nice, thanks"
431261605,424,devshgraphicsprogramming,2020-05-27T16:04:40Z,"Actually `(TdotV,BdotV,NdotV)` is the transformation of `V` into the local tangent space where `N=(0,0,1)`

which means that reflection gets piss-easy
```glsl
// this should probably be implemented in our own HLSL-like `sincos`
float cosPhi = cos(phi);
float sinPhi = uintBitsToFloat(floatBitsToUint(sqrt(1.0-sinPhi*sinPhi))^(phi>irr_glsl_PI ? 0x80000000u:0u));

float TdotH = cosPhi*sinTheta;
float BdotH = sinPhi*sinTheta;
// putting these here for clarity, really you should be using these names instead
NdotH = cosTheta;

VdotH = TdotV*TdotH+BdotV*BdotH+NdotV*NdotH;
float twiceVdotH = 2.0*VdotH;

vec3 localH = vec3(TdotH,BdotH,NdotH);
L = (mat3(T,B,N)*localH)*twiceVdotH-V;

// freebies
VdotL = twiceVdotH*VdotH-1.0;
TdotL = twiceVdotH*TdotH-TdotV;
BdotL = twiceVdotH*BdotH-BdotV;
NdotL = twiceVdotH*NdotH-NdotV;
```

P.S. `BSDFSample` should probably return `TdotH`,`BdotH`,`NdotH`,`HdotV` and the freebies alongside the existing probability and `L`. In all honesty there should always be two overloads, one for isotropic output and one for anisotropic."
431270349,424,devshgraphicsprogramming,2020-05-27T16:16:50Z,"actually we need to separate out the probability (and not include `probability` in BSDF sample, just `contribution`) from the contribution
```glsl
smpl.contribution = g*fr/(4.0*interaction.NdotV); // this is what you're summing with your monte carlo estimator
probability = irr_glsl_beckmann(_a2, cos2Theta);
```

We should probably have two overloads of this function, one that has an `out probability` and one that does not"
431271050,424,devshgraphicsprogramming,2020-05-27T16:17:52Z,and `contribution` should be a `Spectrum`
431271233,424,devshgraphicsprogramming,2020-05-27T16:18:09Z,"this should be `irr_glsl_beckmann_smith_height_correlated_cos_gen_sample`, I have no use for importance sampling just the NDF"
431273025,424,devshgraphicsprogramming,2020-05-27T16:20:46Z,"no use for just sampling the NDF, just give me an isotropic roughness importance sampling (with fresnel)"
431273718,424,devshgraphicsprogramming,2020-05-27T16:21:53Z,anisotropic as well
431276556,424,devshgraphicsprogramming,2020-05-27T16:26:12Z,"if ax==ay then ax*ay ==a2

now the problem is that I don't remember is anistropy is a ratio of ax/ay or ay/ax

Could we worked out from the `irr_glsl_ggx_burley_aniso` above"
431277005,424,devshgraphicsprogramming,2020-05-27T16:26:55Z,use frisvad function
431279066,424,devshgraphicsprogramming,2020-05-27T16:30:03Z,"probably because stratified sampling preserves area, and area is proportional to radius squared

so if you want to map a linear change in area to a change in radius you need to sqrt the area (first random number == sub-circle area)"
431285977,424,devshgraphicsprogramming,2020-05-27T16:39:04Z,"btw for lambert, etc. 

I want concentric mapping not radial
http://www.pbr-book.org/3ed-2018/Monte_Carlo_Integration/2D_Sampling_with_Multidimensional_Transformations.html#SamplingaUnitDisk

also to be packaged off to a function `vec2 irr_glsl_concentricMapping(in vec2 sample)` in some header with Stratified Map and Sample in the name"
431286751,424,devshgraphicsprogramming,2020-05-27T16:40:25Z,that `sincos` function would be useful here
431288144,424,devshgraphicsprogramming,2020-05-27T16:42:47Z,"you need to use `vec3(TdotV,BdotV,NdotV)` instead of `V` this whole thing only works with a tangent space where N=(0,0,1)"
431289604,424,devshgraphicsprogramming,2020-05-27T16:45:04Z,hmm probably not in this case.
431296284,424,devshgraphicsprogramming,2020-05-27T16:54:09Z,"also need to handle a special case when length of stretched vector is close to zero (smooth surface and grazing angle), or this whole thing will be full of `NaN` (when `NdotV` is close to zero, we have a tendency of `a--->1.0`, etc.)

Meaning you can just skip the whole body and set `TdotH=0.0;BdotH=0.0;NdotH=1.0;`"
431298583,424,devshgraphicsprogramming,2020-05-27T16:57:00Z,"there's no need for that `max`, sqrt from before guarantees non negativity, t2 is zero in Z by construction, t1 and V should be positive

also your `n` here is equivalent to `TdotH,BdotH,NdotH`"
431300322,424,devshgraphicsprogramming,2020-05-27T16:59:32Z,"IEE754 should guarantee that `p1` and `p2` computed above are always `<=1.0`, which in turn should guarantee that their squares are smaller.... not sure about whether the `- p1*p1 - p2*p2>-1.0`, but we should probably try it without the `max` clamp at some point when you're finished"
431302187,424,devshgraphicsprogramming,2020-05-27T17:02:37Z,"actually you should keep track of the sign of `NdotV` because you should use a temporary var equal to `abs(NdotV)`, then do the whole sampling"
431306168,424,devshgraphicsprogramming,2020-05-27T17:09:30Z,"you could store the `u.y<a`
```glsl
bool blueHalfDisk = u.y<a;
```"
431315946,424,devshgraphicsprogramming,2020-05-27T17:26:07Z,"making it more legible and performant
```glsl
// a no longer needed
float r = sqrt(u.x);
float phi = u.y+u.y*V.z;
bool tangentDisk = phi>=1.0;
if (tangentDisk)
   phi = (phi-1.0)/V.z+1.0;
phi *= irr_glsl_PI;
```"
431316554,424,devshgraphicsprogramming,2020-05-27T17:27:11Z,"pursuant to
https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files/8f4e7900bc2a6830315dba823f777094da8d60e0..44c0289f5bcd889af24c2062e182ae218489c9fe#r431315946

```glsl
   float p2 = r*sin(phi)*(tangentDisk ? V.z:1.0);
```"
431317461,424,devshgraphicsprogramming,2020-05-27T17:28:42Z,"Actually the part onwards from when you establish `TdotH`,`BdotH` and `NdotH` could be a helper function shared amongst all specular sampling routines since the rest of the math is always the same"
431485665,424,devshgraphicsprogramming,2020-05-27T22:48:10Z,"AFAIK when preforming assignment/copy everything SHOULD be fine, its just performing any other operation with them might backfire"
431742195,424,Crisspl,2020-05-28T10:39:59Z,"hm, i need this tangent frame (or whatever it's called, [T,B,N]) regardless of whether it's isotrpic or anisotropic distribution (i need to put L into same space where N is defined) so im not sure irr_glsl_AnisotropicViewSurfaceInteraction and irr_glsl_IsotropicViewSurfaceInteraction is the right solution"
431755389,424,devshgraphicsprogramming,2020-05-28T11:05:59Z,"> hm, i need this tangent frame (or whatever it's called, [T,B,N]) regardless of whether it's isotrpic or anisotropic distribution (i need to put L into same space where N is defined) so im not sure irr_glsl_AnisotropicViewSurfaceInteraction and irr_glsl_IsotropicViewSurfaceInteraction is the right solution

Well yeah, because `irr_glsl_IsotropicViewSurfaceInteraction` would indicate that the user does not know the Tangent vector (has not provided one) and we can make one up using the Frisvad function, and `irr_glsl_AnisotropicViewSurfaceInteraction` represents a known tangent frame where user specified `T` (and even `B`) explicitly (you cannot rotate it for them)."
431757124,424,devshgraphicsprogramming,2020-05-28T11:09:29Z,"I'm not against requiring bsdf sampling functions take `irr_glsl_AnisotropicViewSurfaceInteraction` as input always, I just want 3 or more different ways of turning a `irr_glsl_IsotropicViewSurfaceInteraction` into the anisotropic struct."
431813985,424,Crisspl,2020-05-28T12:57:29Z,"yea, because without sqrt samples much more dence near to centre of disk, same thing as uniform disk sampling described in pbrt (not the concentric one)"
432689714,424,devshgraphicsprogramming,2020-05-29T19:26:43Z,"optimize later, either a bit flag or `<`+`>=` compare, this 5 comparison thing is awful"
432710828,424,devshgraphicsprogramming,2020-05-29T20:07:39Z,I thought we agreed to have the Light and BSDF sampling instruction streams separate and with different opcodes?
432712128,424,devshgraphicsprogramming,2020-05-29T20:10:42Z,"you should really put the `scale` into the same byte offset on these BSDF data structs, so that you may fetch outside the if statements"
432712664,424,devshgraphicsprogramming,2020-05-29T20:11:57Z,also the multiplication of the `a` by `scale` should be carried out near the `return` outside the if statements
432713080,424,devshgraphicsprogramming,2020-05-29T20:12:55Z,work out `instr_getAlphaUTexPresence(instr)` before you enter the if (which could be changed to a switch with a `#define` or something so we can benchmark later)
432713500,424,devshgraphicsprogramming,2020-05-29T20:13:52Z,"actually this whole line
```glsl
float a_ = textureOrF32(data.data[0].xy, instr_getAlphaUTexPresence(instr), dUV)*scale.x;
```
could be done outside the divergent flow control"
432724374,424,devshgraphicsprogramming,2020-05-29T20:40:07Z,"Actually I'll just go ahead and suggest the optimized version
```glsl
#ifdef MITSUBA_USE_SWTICH
        #define FIRST_CASE(X,C) switch(X) \
        { \
                case C:
        #define NEXT_CASE(X,C) break; \
                case C:
        #define DEFAULT_CASE break; \
                default:
        #define END_CASES break; \
        }
#else 
        #define FIRST_CASE(X,C) if (X==C)
        #define NEXT_CASE(X,C) else if (X==C)
        #define DEFAULT_CASE } else
        #define END_CASES
#endif


vec2 getAlpha(in uint op, in uint ndf, in instr_t instr, in bsdf_data_t data, in mat2 dUV)
{
        // if only scale could be on the same offset!
       uvec2 scaleData;
        // would be more fun if roughness texture data was at the same offset
        // and if anisotropic second roughness could be on the same offset too for bsdf that use it
        uvec2 alphaUdata,alphaVdata;
	FIRST_CASE(op,OP_ROUGHDIFFUSE)
	{
		scaleData= data.data[1].zw;
		alphaUdata = data.data[0].xy;
	}
	NEXT_CASE(op,OP_ROUGHDIELECTRIC)
	{
		scaleData= uvec2(data.data[1].w, data.data[2].x);
		alphaUdata = data.data[0].yz;
		alphaVdata = uvec2(data.data[0].w, data.data[1].x);
	}
	NEXT_CASE(op,OP_ROUGHCONDUCTOR)
	{
		scaleData= data.data[2].zw;
		alphaUdata = data.data[0].xy;
		alphaVdata = data.data[0].zw;
	}
	NEXT_CASE(op,OP_ROUGHPLASTIC)
	{
		scaleData= uvec2(data.data[1].w, data.data[2].x);
		alphaUdata = data.data[0].yz;
	}
	NEXT_CASE(op,OP_ROUGHCOATING)
	{
		//later
	}
        END_CASES
        // external validation ensures we cant hit it on the transmissives
        vec2 a;
        a.x = textureOrF32(alphaUdata, instr_getAlphaUTexPresence(instr), dUV);
	if (ndf == NDF_AS)
                a.y = textureOrF32(alphaVdata, instr_getAlphaVTexPresence(instr), dUV);
        else
                a.y = a.x;
	return a*decodeRGB19E7(scaleData).rg;
}

#undef FIRST_CASE
#undef NEXT_CASE
#undef DEFAULT_CASE 
#undef END_CASES
```

should be muuuch faster"
432726620,424,devshgraphicsprogramming,2020-05-29T20:45:21Z,"there's no diffuse in a dielectric, this is a delta distribution and its impossible to sample explicitly (this opcode should be gone anyway)"
432727066,424,devshgraphicsprogramming,2020-05-29T20:46:21Z,`instr_execute_COATING` COATING is a a diffuse modulated by fresnel (reflective component is 0 for expliit sample)
432727918,424,devshgraphicsprogramming,2020-05-29T20:48:24Z,"yep, and the denominator"
432728288,424,devshgraphicsprogramming,2020-05-29T20:49:22Z,maybe move the `a2` to the CPU side (run an image filter to square the roughness values)
432730615,424,devshgraphicsprogramming,2020-05-29T20:55:13Z,"if twosided and `NdotV<0.0` you can flip sign of `N` and any `Ndot` var, plus anything to do with the bitangent so `B` and `Bdot`

oooor, you could take it into account when carrying out the `OP_SET_GEOM_NORMAL` and have the twosided bit only be used for that instruction (and freeing up that bit for other instructions)... yes in this case if `twosided` changes you need to emit an extra `OP_SET_GEOM_NORMAL`"
432730801,424,devshgraphicsprogramming,2020-05-29T20:55:40Z,speculatively compute `NdotH2` before you diverge
432732756,424,devshgraphicsprogramming,2020-05-29T21:00:15Z,"you could make a `getFresnelClass(opcode)` that returns `0,1,2` for None, Dielectric, and Conductor to compute the fresnel factor before the divergence. It could be predivided by `(4.0 * currBSDFParams.isotropic.interaction.NdotV)`

And then a `needsFresnelCorrection(opcode)` to tell us if the diffuse fresnel factors need to be computed as well"
432735221,424,devshgraphicsprogramming,2020-05-29T21:06:11Z,"I'd move this `if (currBSDFParams.isotropic.NdotL>FLT_MIN)` outside the divergence and all the way to the `else` of `twosided` in the calling function, this way we can skip the entire intruction executing function for anything that is not roughdielectric or difftrans"
432735339,424,devshgraphicsprogramming,2020-05-29T21:06:29Z,"This would simplify your life, because for transmissive materials (pretty much only roughdielectric and difftrans) you need to account for `NdotV<0` and `NdotL<0`"
432737235,424,devshgraphicsprogramming,2020-05-29T21:10:57Z,"basically pair it with a `isBRDF` function (BRDF cannot be lit or viewed from the back, unless ofc `twosided`, but then you can only light it from the side you can view it, a.k.a. NdotV and NdotL need to be `abs()`>FLT_MIN have the same sign, plus `NdotV>FLT_MIN || twosided`)"
432737836,424,devshgraphicsprogramming,2020-05-29T21:12:33Z,I also notice that most BSDF (BRDF included) instructions need to fetch at least two textures (one roughness and other some parameter) and every texture has an associated scale... maybe we should fetch the textures without divergence?
432738218,424,devshgraphicsprogramming,2020-05-29T21:13:30Z,this needs to go to a special constants or numerics/limits header
432741804,424,devshgraphicsprogramming,2020-05-29T21:23:18Z,"you can flat out call `normalize`

BUT

I would like two separate functions for `irr_glsl_calcFragmentShaderSurfaceInteraction`, one that assumes that `N` is unit length (and does not attempt to normalize it) and one that does not.

This is why instead of removing the `irr_glsl_ViewSurfaceInteraction` struct and its methods, I'd rather introduce a new one."
432742924,424,devshgraphicsprogramming,2020-05-29T21:26:22Z,"T can be extracted from your bump-mapping code (kind-of), and use the `irr_glsl_calcBSDFAnisotropicParams` overload that computes `B` from a `cross` otherwise sampling will fall apart bigtime."
432743379,424,devshgraphicsprogramming,2020-05-29T21:27:43Z,I don't think anybody needs these anymore
432743648,424,devshgraphicsprogramming,2020-05-29T21:28:26Z,"same for `T,B` in `irr_glsl_BSDFAnisotropicParams` (which also needs to use `irr_glsl_AnisotropicViewSurfaceInteraction` btw)"
432758903,424,devshgraphicsprogramming,2020-05-29T22:01:34Z,"The theta computation kind-of looks like it has a bug, check it, test in all 8 octants"
432759271,424,devshgraphicsprogramming,2020-05-29T22:02:44Z,not sure the `max` is needed
432760179,424,devshgraphicsprogramming,2020-05-29T22:05:41Z,"return more stuff in BSDFSample, stuff we can build evalutation parameters out of (NdotL, TdotL, TdotV etc.)"
432760397,424,devshgraphicsprogramming,2020-05-29T22:06:27Z,also `vec2 sincos(in float theta)` would be a welcome addition
432761323,424,devshgraphicsprogramming,2020-05-29T22:08:18Z,"For `irr_glsl_BSDFAnisotropicParams irr_glsl_calcBSDFAnisotropicParams`, just require an anisotropic surface interaction and `L` instead of what we have already

Also add overloads for both `irr_glsl_calcBSDFIsotropicParams` and `irr_glsl_calcBSDFAnisotropicParams` that take `BSDFSample` instead of `L`"
432761500,424,devshgraphicsprogramming,2020-05-29T22:08:53Z,"this needs a macro, because similar function will be declared over and over"
432761672,424,devshgraphicsprogramming,2020-05-29T22:09:29Z,you need `approx` in the name
432763502,424,devshgraphicsprogramming,2020-05-29T22:16:07Z,explain?
432763901,424,devshgraphicsprogramming,2020-05-29T22:17:35Z,this will be common to many `gen` functions for specular BRDFs
432764607,424,devshgraphicsprogramming,2020-05-29T22:19:53Z,"erf is the indefinite integral of `e^(-x^2)`
![image](https://user-images.githubusercontent.com/6894321/83310109-47226d80-a20b-11ea-9dd0-1bde764b7b89.png)
"
432765199,424,devshgraphicsprogramming,2020-05-29T22:22:06Z,bu juggling the denominator around and moving the 1.0 in the front into the square roots?
432765357,424,devshgraphicsprogramming,2020-05-29T22:22:35Z,these functions better go into some C++ STD-like header
432765649,424,devshgraphicsprogramming,2020-05-29T22:23:42Z,"WOW, you do realize that you already have that.... its called `vec3(TdotV,BdotV,NdotV)` !"
432766075,424,devshgraphicsprogramming,2020-05-29T22:25:16Z,either you're looking straight down at the surface or you have a completely smooth surface?
432766343,424,devshgraphicsprogramming,2020-05-29T22:26:10Z,common
433166326,424,Crisspl,2020-06-01T10:50:17Z,"yea, this is pre-order traversal creation. Post-order is somewhere else around. In pre-order i'm using 2nd DWORD for jump offset (in post-order 2nd DWORD is used for registers encoding)

> and with different opcodes?

hm? how different?"
433194647,424,Crisspl,2020-06-01T12:03:11Z,"yea, but all parameters can come from texture OR constant and i'm unable to check which are available and which ones of them should be fetched from texture without being dependent on opcode. I guess it is possible to find common things in all instructions (at least BSDF/BRDF instructions), put `scale` always at the same byteoffset, put texture presence flag for 1st parameter always on bit N and this way i can always fetch at least this 1 parameter without divergence"
433201624,424,devshgraphicsprogramming,2020-06-01T12:20:45Z,"> I guess it is possible to find common things in all instructions (at least BSDF/BRDF instructions), put scale always at the same byteoffset, put texture presence flag for 1st parameter always on bit N and this way i can always fetch at least this 1 parameter without divergence

Sounds good"
433202507,424,Crisspl,2020-06-01T12:22:58Z,"because of weird api of `irr_glsl_ggx_burley_aniso`, this is to fix basically"
433207700,424,devshgraphicsprogramming,2020-06-01T12:35:01Z,let me know when fixed.
433405851,424,devshgraphicsprogramming,2020-06-01T18:17:33Z,"as we've discussed, having certain opcodes around for NEE/LightSampling is pointless, such as the smooth BxDFs

Also Smooth Plastic needs a special code-path which basically boils down to specially modulated diffuse "
437169311,424,devshgraphicsprogramming,2020-06-09T06:37:26Z,"I was thinking more
```glsl
// only works for x in [-PI,PI]
vec2 irr_glsl_sincos(in float x)
{
    float c = cos(x);
    return vec2(c,sign(x)*sqrt(1.0-c*c));
}
```"
437173516,424,devshgraphicsprogramming,2020-06-09T06:47:40Z,"this now needs to be modulated by `irr_glsl_diffuseFresnelCorrectionFactor(eta,eta2) * (vec3(1.0)-irr_glsl_fresnel_dielectric(eta, currBSDFParams.isotropic.interaction.NdotV)) * (vec3(1.0)-irr_glsl_fresnel_dielectric(eta, currBSDFParams.isotropic.NdotL))` just like `ROUGHPLASTIC`

Ideally you'd move this (and the reflectance texture fetch) outside of both or combine the two functions to reduce divergence"
437174804,424,devshgraphicsprogramming,2020-06-09T06:50:42Z,"do some reasonable checks if you need to fetch the texture (its okay to diverge fora texture fetch because it will skip the memory fetches, saving bandwidth, its not okay to diverge the [multiply] artihmetic )"
437175884,424,devshgraphicsprogramming,2020-06-09T06:53:14Z,"don't bother supporting phong, if the XML loader detects phong swap it out for GGX and issue a warning in the log"
437176177,424,devshgraphicsprogramming,2020-06-09T06:53:51Z,but its important to support askhim-shirley !
437176805,424,devshgraphicsprogramming,2020-06-09T06:55:10Z,we can still move all the texture fetches outside this switch
437177162,424,devshgraphicsprogramming,2020-06-09T06:55:56Z,whats the opacity texture?
439972019,424,devshgraphicsprogramming,2020-06-15T07:13:04Z,"you actually don't need there classes anymore, just plop your shaders in the correct builtin path, and add to builtin CMakeLists.txt
"
440681756,424,devshgraphicsprogramming,2020-06-16T08:36:26Z,"do you mind changing the path prefix
`irr/builtin/glsl/bsdf`
to 
`irr/builtin/glsl/bxdf` 
?"
443864575,424,devshgraphicsprogramming,2020-06-22T22:41:42Z,maybe make a utility function?
443865355,424,devshgraphicsprogramming,2020-06-22T22:44:21Z,sampling functions for BRDFs are only possible for physically based distributions (ones that are normalized etc) so only provide for the PBR distribution
443866722,424,devshgraphicsprogramming,2020-06-22T22:48:42Z,"I would like to draw your attention to the linearity of matrix multiplication what you have is:
`N^T . TangentFrame . vec3(p.x,p.y,z)`

given that TangentFrame=TBN is a column matrix, you can see that you can compute
```glsl
LdotT = p.x;
LdotB = p.y;
LdotN = z;
```"
443868131,424,devshgraphicsprogramming,2020-06-22T22:53:17Z,"I'm gonna need an explainer on this...

btw are you sure that the Sampling of visible distribution does not remove the `1.0/(4.0*NdotV)` factor from the remainder like the GGX does?"
443868581,424,devshgraphicsprogramming,2020-06-22T22:54:47Z,note that for diffuse BSDFs these will be exactly `NdotH==1.0` and `VdotH==VdotN`
443869059,424,devshgraphicsprogramming,2020-06-22T22:56:12Z,remainder is 1.0 upon transmission!
443869146,424,devshgraphicsprogramming,2020-06-22T22:56:28Z,remainder is 1.0 upon reflection!
443869424,424,devshgraphicsprogramming,2020-06-22T22:57:22Z,"this is actually not technically a `delta` its a `reflection` (because delta means the function is 0 everywhere except for one point, reflection+transmission are both deltas, but the way the delta point is fixed is different)"
443869676,424,devshgraphicsprogramming,2020-06-22T22:58:05Z,I'll fix it 
443870323,424,devshgraphicsprogramming,2020-06-22T23:00:11Z,"you should make a utility function that computes the rest of the `irr_glsl_BSDFSample` given a H in the local TBN frame (which is essentially `TdotH`, `BdotH` and `NdotH`) it would DRY up your code."
443870520,424,devshgraphicsprogramming,2020-06-22T23:00:46Z,"no, the API from saturday assumes that you already give the sample generated, not generate it inside the function."
443871105,424,devshgraphicsprogramming,2020-06-22T23:02:49Z,"this is definitely wrong, it should be `Fresnel*G2/G1`
https://schuttejoe.github.io/post/ggximportancesamplingpart2/"
444309526,424,Crisspl,2020-06-23T15:23:23Z,hm? not sure what is this comment about
447426049,424,devshgraphicsprogramming,2020-06-30T05:53:01Z,typo Ent = End
447427516,424,devshgraphicsprogramming,2020-06-30T05:56:59Z,"if you want this to be performant and not completely kill the performance, then children need to be an offset+count (or multiple offsets) into a shared array of nodes for the whole IR

having a dynamically allocated mini-array will eat loads of memory (because of minimum allocation sizes) and completely choke out the `malloc` (the more allocations you have, the more time the next `malloc/free` takes, simply because there are more memory blocks to traverse upon either `malloc` or `free`)"
447427957,424,devshgraphicsprogramming,2020-06-30T05:58:17Z,"its not a single tree, but a forest (we need this info for SIMD optimization in the backends) so you will have multiple roots"
447966128,424,Crisspl,2020-06-30T20:41:56Z,"yea, i even wanted to put all nodes in one preallocated memory with placement new and linear addr allctr, but do it in dirty way first to not mess up"
447966319,424,Crisspl,2020-06-30T20:42:19Z,hm? how is this a forest?
451592840,424,devshgraphicsprogramming,2020-07-08T14:33:31Z,what's this about?
451593529,424,devshgraphicsprogramming,2020-07-08T14:34:30Z,useless variable name alert!
451594079,424,devshgraphicsprogramming,2020-07-08T14:35:10Z,useless variable name alert!
451595221,424,devshgraphicsprogramming,2020-07-08T14:36:39Z,so I guess w're clear now?
451639456,424,devshgraphicsprogramming,2020-07-08T15:37:22Z,done?
451656501,424,devshgraphicsprogramming,2020-07-08T16:02:35Z,done?
451673265,424,devshgraphicsprogramming,2020-07-08T16:28:37Z,done?
451674421,424,devshgraphicsprogramming,2020-07-08T16:29:46Z,just reminding you to use the macro in future code so we can compare between `if-else` vs. `switch` performance
451675292,424,devshgraphicsprogramming,2020-07-08T16:30:46Z,would this be possible in the new architecture?
451676480,424,devshgraphicsprogramming,2020-07-08T16:32:41Z,did you make the changes?
451678752,424,devshgraphicsprogramming,2020-07-08T16:36:27Z,"basically oren-nayar with the PI factored out is not a PBR distribution, not using a PBR distribution for sample generation (which you only ever use for IBL or Path Tracing) doesn't make sense as per-our MineGameDev presentation."
451679171,424,devshgraphicsprogramming,2020-07-08T16:37:07Z,"TODO, but I forgot where I was going with this"
453537695,424,Crisspl,2020-07-13T10:01:43Z,apparently it's not needed and spirv-cross didn work right with it. Thats why local_size_x/y/y_id didnt work actually
453537857,424,Crisspl,2020-07-13T10:01:58Z,yea
453538215,424,Crisspl,2020-07-13T10:02:34Z,"outdated code, it's fixed"
455276604,424,devshgraphicsprogramming,2020-07-15T19:03:16Z,why not put this tag inside the node struct itself?
455277262,424,devshgraphicsprogramming,2020-07-15T19:04:28Z,why isnt this backend in the general engine ?
455280854,424,devshgraphicsprogramming,2020-07-15T19:11:03Z,done?
455281037,424,devshgraphicsprogramming,2020-07-15T19:11:24Z,let me know if tackled in new implementation.
455281154,424,devshgraphicsprogramming,2020-07-15T19:11:35Z,let me know if tackled in new implementation.
455281204,424,devshgraphicsprogramming,2020-07-15T19:11:40Z,let me know if tackled in new implementation.
455281257,424,devshgraphicsprogramming,2020-07-15T19:11:46Z,let me know if tackled in new implementation.
455281302,424,devshgraphicsprogramming,2020-07-15T19:11:52Z,let me know if tackled in new implementation.
455281355,424,devshgraphicsprogramming,2020-07-15T19:11:59Z,let me know if tackled in new implementation.
455281397,424,devshgraphicsprogramming,2020-07-15T19:12:04Z,let me know if tackled in new implementation.
455281465,424,devshgraphicsprogramming,2020-07-15T19:12:12Z,let me know if tackled in new implementation.
455281520,424,devshgraphicsprogramming,2020-07-15T19:12:17Z,let me know if tackled in new implementation.
455281598,424,devshgraphicsprogramming,2020-07-15T19:12:23Z,let me know if tackled in new implementation.
455281672,424,devshgraphicsprogramming,2020-07-15T19:12:33Z,done?
455281746,424,devshgraphicsprogramming,2020-07-15T19:12:40Z,done?
455281818,424,devshgraphicsprogramming,2020-07-15T19:12:47Z,done?
455282023,424,devshgraphicsprogramming,2020-07-15T19:13:07Z,done?
455282121,424,devshgraphicsprogramming,2020-07-15T19:13:21Z,let me know if tackled in new implementation.
455282176,424,devshgraphicsprogramming,2020-07-15T19:13:27Z,let me know if tackled in new implementation.
455282245,424,devshgraphicsprogramming,2020-07-15T19:13:35Z,done?
455282664,424,devshgraphicsprogramming,2020-07-15T19:14:22Z,are we clear?
456556590,424,devshgraphicsprogramming,2020-07-17T16:46:59Z,"move to inside the backend class declaration, the streams will be different for each backend"
456679296,424,devshgraphicsprogramming,2020-07-17T21:19:42Z,you want to narrow these down when the BSDF forest doesnt include certain float views
456679863,424,devshgraphicsprogramming,2020-07-17T21:21:20Z,"unify the registers together, use the same register space"
456681017,424,devshgraphicsprogramming,2020-07-17T21:24:46Z,you want to conditionally optimize these out if you know that the BSDF forest nodes will always return the same values
456681197,424,devshgraphicsprogramming,2020-07-17T21:25:15Z,you want to conditionally optimize these `if` statements when you know that the BSDF forest nodes will always return the same values
456681458,424,devshgraphicsprogramming,2020-07-17T21:26:04Z,`if (currBSDFParams.isotropic.NdotL>FLT_MIN)` shall be hoisted outside of the `instr_execute_`
456681581,424,devshgraphicsprogramming,2020-07-17T21:26:27Z,for every function
456681884,424,devshgraphicsprogramming,2020-07-17T21:27:35Z,use a `uint` as the transaction size for `reg_t`
456682221,424,devshgraphicsprogramming,2020-07-17T21:28:40Z,also turn them into the ternary `?` operator which supposedly does not branch
456682459,424,devshgraphicsprogramming,2020-07-17T21:29:30Z,also put the `registers[REG_DST(regs)` outside as well (by making the `instr_execute` return a value
456955603,424,Crisspl,2020-07-19T21:05:25Z,"regarding 
> you could store the u.y<a

it's no longer there

regarding `sincos`: your impl of sincos only works with [-pi,+pi] and here we have [0,2pi]"
456955702,424,Crisspl,2020-07-19T21:06:32Z,"no longer there, it was replaced with more optimized version from heitz's next paper"
456955872,424,Crisspl,2020-07-19T21:08:44Z,just left a comment to try it without the max() later
456957437,424,Crisspl,2020-07-19T21:24:53Z,"yes, texture/constant parameter is now 12byte
8byte VT ID + 4 byte scale in case of texture
float RGB in case of constant (GB lost in case of 1D constant)"
456960686,424,Crisspl,2020-07-19T22:01:10Z,"ofc, nothing really changes here, but it's just one multiplication. + often `a` (not squared) is needed so that would generate a need to do a sqrt"
456961184,424,Crisspl,2020-07-19T22:06:48Z,"yea, i separated them, T and B are in aniso interaction now"
456961604,424,Crisspl,2020-07-19T22:11:19Z,"nope, not yet"
456961617,424,Crisspl,2020-07-19T22:11:24Z,yea
456961772,424,Crisspl,2020-07-19T22:13:15Z,"kinda, u did it yourself like
```
// valid only for `theta` in [-PI,PI]
void irr_glsl_sincos(in float theta, out float s, out float c)
{
    c = cos(theta);
    s = sqrt(1.0-c*c);
    s *= theta<0.0 ? -1.0:1.0;
}
```"
456962047,424,Crisspl,2020-07-19T22:16:16Z,"no, but obviously will be done in final implementation"
456962267,424,Crisspl,2020-07-19T22:18:33Z,"i dont remember why i wanted to factor PI out, but i dont think i wanted to sample oren-nayar without pi"
459441932,424,Crisspl,2020-07-23T13:19:04Z,why would they be different??
473195535,424,devshgraphicsprogramming,2020-08-19T17:14:18Z,why are some `ifdef` and others `ifndef`
473196111,424,devshgraphicsprogramming,2020-08-19T17:15:16Z,what about aniso GGX and beckmann?
473250209,424,devshgraphicsprogramming,2020-08-19T18:53:02Z,"that's not a problem, you had to remap `u` from [0,1] to [0,2pi] its just as easy to remap it to the symmetric domain."
473250339,424,devshgraphicsprogramming,2020-08-19T18:53:18Z,"?
"
473250831,424,devshgraphicsprogramming,2020-08-19T18:54:16Z,what about the multiplication by the scale?
473251064,424,devshgraphicsprogramming,2020-08-19T18:54:42Z,?
473251315,424,devshgraphicsprogramming,2020-08-19T18:55:10Z,"ah ok, the sqrt.. fine then"
473251443,424,devshgraphicsprogramming,2020-08-19T18:55:25Z,?
473251548,424,devshgraphicsprogramming,2020-08-19T18:55:38Z,how does it look in the new impl?
473251609,424,devshgraphicsprogramming,2020-08-19T18:55:44Z,?
473251705,424,devshgraphicsprogramming,2020-08-19T18:55:56Z,?
473251920,424,devshgraphicsprogramming,2020-08-19T18:56:20Z,?
473252218,424,devshgraphicsprogramming,2020-08-19T18:56:49Z,?
473252827,424,devshgraphicsprogramming,2020-08-19T18:57:56Z,?
473253115,424,devshgraphicsprogramming,2020-08-19T18:58:34Z,yep.
473253822,424,devshgraphicsprogramming,2020-08-19T18:59:53Z,lets just not do it ;)
473254747,424,devshgraphicsprogramming,2020-08-19T19:01:35Z,"oh yeah I remember, what I meant is that you need not take dot products with `smpl.L` because `p.xyz` are already our dot products with the 3 basis vectors of the tangent space."
473255914,424,devshgraphicsprogramming,2020-08-19T19:03:55Z,"I need to fix it for 3 different cases:
1) Thidielectric (no wavelength dependent stuff)
2) Approximate Dielectric (compute a single IoR from the weighted IoRs)
3) Pseudo-Spectral Dielectric"
473262461,424,devshgraphicsprogramming,2020-08-19T19:16:31Z,"because a different backend may choose not to implement the same sort of state machine... i.e. VK raytracing/OptiX uses a Shader Binding Table and the software scheduler, so it might not be beneficial to use an instruction stream of the same granularity that we use for rasterized GLSL to avoid divergence."
474149169,424,Crisspl,2020-08-20T17:18:22Z,"right, i forgot backend doesnt just follow mitsuba only"
474149231,424,Crisspl,2020-08-20T17:18:29Z,"yea, fixed"
477517437,424,devshgraphicsprogramming,2020-08-26T18:55:35Z,spec constant maybe? or pass it in a UBO?
477517444,424,devshgraphicsprogramming,2020-08-26T18:55:37Z,"you can get a good approximation of intensity of an area light by doing the following:
1) compute light surface area (we have functions for that used in ex 21)
2) multiply by radiance and 2PI"
477518050,424,devshgraphicsprogramming,2020-08-26T18:56:34Z,huh?
491911312,424,devshgraphicsprogramming,2020-09-21T09:42:13Z,its an ERROR
498292743,424,devshgraphicsprogramming,2020-10-01T14:34:01Z,"dot product with CIE XYZ luma coeffs for Y of the scRGB colorspace, it gives a nice weighted average."
499185374,424,devshgraphicsprogramming,2020-10-03T22:01:53Z,?
499185390,424,devshgraphicsprogramming,2020-10-03T22:02:06Z,waiting on the switches
499185397,424,devshgraphicsprogramming,2020-10-03T22:02:21Z,done?
499185479,424,devshgraphicsprogramming,2020-10-03T22:03:39Z,?
499185491,424,devshgraphicsprogramming,2020-10-03T22:03:54Z,?
499185497,424,devshgraphicsprogramming,2020-10-03T22:04:00Z,?
499185580,424,devshgraphicsprogramming,2020-10-03T22:05:17Z,done?
499185597,424,devshgraphicsprogramming,2020-10-03T22:05:27Z,done?
499185612,424,devshgraphicsprogramming,2020-10-03T22:05:40Z,done?
499185619,424,devshgraphicsprogramming,2020-10-03T22:05:54Z,done?
499185632,424,devshgraphicsprogramming,2020-10-03T22:06:06Z,done?
499185728,424,devshgraphicsprogramming,2020-10-03T22:06:53Z,done?
499185735,424,devshgraphicsprogramming,2020-10-03T22:07:04Z,restore plz.
502306254,424,devshgraphicsprogramming,2020-10-09T09:30:59Z,if roughdielectric then assert or error emit
506774628,424,Crisspl,2020-10-17T00:54:46Z,"being done in texture fetching function, without any extra divergence"
506774862,424,Crisspl,2020-10-17T00:56:46Z,"yes, ofc"
506774984,424,Crisspl,2020-10-17T00:57:42Z,you mean use this wrapper everywhere where there are if/else statements currently? 
506775079,424,Crisspl,2020-10-17T00:58:33Z,not relevant any more
506775936,424,Crisspl,2020-10-17T01:05:37Z,"yes, irrelevant now pretty much"
506776242,424,Crisspl,2020-10-17T01:08:33Z,"irrelevant, all parameters are fetched without any divergence other than texture fetch or constant choice"
506776513,424,Crisspl,2020-10-17T01:10:44Z,TODO
506776568,424,Crisspl,2020-10-17T01:11:25Z,TODO
506776693,424,Crisspl,2020-10-17T01:12:31Z,TODO
506776774,424,Crisspl,2020-10-17T01:13:11Z,TODO
506776835,424,Crisspl,2020-10-17T01:13:51Z,TODO
506777158,424,Crisspl,2020-10-17T01:16:52Z,"yes, it was always like that but still sometimes i have to use extra factors"
506777206,424,Crisspl,2020-10-17T01:17:35Z,actually only in ditt office scene it looked nice with factor of 1.0 so far
506777241,424,Crisspl,2020-10-17T01:17:49Z,TODO
507696253,424,devshgraphicsprogramming,2020-10-19T12:13:09Z,"only everywhere there is a something that could be a `switch` (i.e. different cases for a numerical parameter)

this is because I'm not sure about the performance characteristics of `switch` vs. `if-else` chain, so its useful to have a fast switch."
507696585,424,devshgraphicsprogramming,2020-10-19T12:13:40Z,done?
507696871,424,devshgraphicsprogramming,2020-10-19T12:14:07Z,remind me what was going on here?
507698310,424,devshgraphicsprogramming,2020-10-19T12:16:30Z,"ok, might need to slap the autoexposure extension on the example then"
507706645,424,Crisspl,2020-10-19T12:30:04Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/builtin/glsl/bxdf/brdf/specular/beckmann.glsl#L19
507708347,424,Crisspl,2020-10-19T12:32:44Z,yea ive wanted to make use of autoexposure in mitsuba loader example but its just lowest priority
507717959,424,Crisspl,2020-10-19T12:48:02Z,it already is in std https://en.cppreference.com/w/cpp/numeric/math/erf
507757803,424,devshgraphicsprogramming,2020-10-19T13:44:42Z,"typo, missing an `s`"
507765142,424,devshgraphicsprogramming,2020-10-19T13:54:26Z,"`_uf` should not be `inout`

the cache for a reflective ray is 100% correct always and wouldn't change

if you have a `L` which is behind the `N` and surface is not twosided (you actually get into a non-thin dielectric AST node) then you need to compute the microfacet cache for a transmissive case."
507823724,424,Crisspl,2020-10-19T14:59:44Z,it is `inout` only because of possible handling of twosided
507824536,424,Crisspl,2020-10-19T15:00:37Z,microfacet cache computed for transmission doesnt get out of this function
508005071,424,devshgraphicsprogramming,2020-10-19T19:21:08Z,what is `cosFactor` doing here?
508006729,424,devshgraphicsprogramming,2020-10-19T19:24:09Z,why do you need the string?
508009021,424,devshgraphicsprogramming,2020-10-19T19:28:19Z,I dont get how `normalMatrix`'s components are used... maybe a `union` would be useful?
508011158,424,devshgraphicsprogramming,2020-10-19T19:32:10Z,"you can get these from the OETF and colorspace headers (just transpose the matrix first, so you can extract the [1] row)"
508012482,424,devshgraphicsprogramming,2020-10-19T19:34:41Z,what's the `name` used for?
508015463,424,devshgraphicsprogramming,2020-10-19T19:39:42Z,is that log2 or ?
508015584,424,devshgraphicsprogramming,2020-10-19T19:39:50Z,"`override` is a keyword, name it slightly differently"
508016025,424,devshgraphicsprogramming,2020-10-19T19:40:19Z,not sure how 16*128 == 4096 ?
508018366,424,devshgraphicsprogramming,2020-10-19T19:44:45Z,what's with the name of this variable?
508026688,424,Crisspl,2020-10-19T19:59:59Z,"oh, you're right, it's already in the result. my bad"
508026776,424,Crisspl,2020-10-19T20:00:06Z,for debug
508027791,424,Crisspl,2020-10-19T20:01:55Z,"things with _LOG2 are log2, not sure what you're asking"
508029165,424,Crisspl,2020-10-19T20:04:26Z,"not sure why its even there, it's not being used. No idea really.."
508032019,424,Crisspl,2020-10-19T20:09:25Z,"Nothing apparently, and it's not even initialized, This class is used only in 
```
	if (_params.loaderFlags & IAssetLoader::ELPF_LOAD_METADATA_ONLY)
	{
		auto emptyMesh = core::make_smart_refctd_ptr<asset::CCPUMesh>();
		m_manager->setAssetMetadata(emptyMesh.get(), core::make_smart_refctd_ptr<ext::MitsubaLoader::CMitsubaMetadata>(parserManager.m_globalMetadata));
		return SAssetBundle({ std::move(emptyMesh) });
	}
```
i think it's Arek's code"
508084269,424,Crisspl,2020-10-19T21:52:19Z,"it doesnt
max allocatable tex size is `virtual_texture_size * physical_page_size`, not `physical_texture_size_in_pages * physical_page_size`"
508853846,424,devshgraphicsprogramming,2020-10-20T21:34:06Z,"ok so only 20 layers, is that always enough?"
508854577,424,devshgraphicsprogramming,2020-10-20T21:35:37Z,"ok then get rid of the `name`

Arek's code is a fun way to extract camera transforms without loading entire scenes (for the denoiser)"
508854763,424,devshgraphicsprogramming,2020-10-20T21:35:58Z,ok maybe only have that field in DEBUG builds
509192046,424,devshgraphicsprogramming,2020-10-21T11:13:31Z,?
509192352,424,devshgraphicsprogramming,2020-10-21T11:14:08Z,"rough diffuse is not anisotropic, though?"
509194399,424,devshgraphicsprogramming,2020-10-21T11:17:48Z,"what happens if your BSDF AST is just one node?

i.e. just diffuse?

it looks to me like you will allocate another node, and add that as a child"
509196105,424,devshgraphicsprogramming,2020-10-21T11:20:48Z,"waiit, did we say that once we encounter `twosided` the whole AST is twosided?"
509196585,424,devshgraphicsprogramming,2020-10-21T11:21:40Z,what's scattering mode?
509196848,424,devshgraphicsprogramming,2020-10-21T11:22:08Z,why are you allocating another node?
509197119,424,devshgraphicsprogramming,2020-10-21T11:22:37Z,is extEta always a real scalar?
509198487,424,devshgraphicsprogramming,2020-10-21T11:25:05Z,"ok I see what's going on, why not do `static_cast<IR::CMicrofacetDiffuseBSDFNode*>(nextSym)->alpha_v =static_cast<IR::CMicrofacetDiffuseBSDFNode*>(nextSym)->alpha_u`  instead of double `getFloat...` call"
509201585,424,devshgraphicsprogramming,2020-10-21T11:30:20Z,I noticed diffuse's `eta` doesn't get set
509202832,424,devshgraphicsprogramming,2020-10-21T11:32:34Z,is it a TODO or what?
509204825,424,devshgraphicsprogramming,2020-10-21T11:36:15Z,"I dont get this, exaplin?"
509205003,424,devshgraphicsprogramming,2020-10-21T11:36:35Z,I don't get this.
509205234,424,devshgraphicsprogramming,2020-10-21T11:36:58Z,why is the logic here so convoluted?
509208294,424,devshgraphicsprogramming,2020-10-21T11:42:35Z,`thin` seems to have the same issue as `twosided`
509209781,424,devshgraphicsprogramming,2020-10-21T11:45:11Z,"is the derivative map cached, or do you create a new one every single time?"
509212404,424,devshgraphicsprogramming,2020-10-21T11:49:51Z,explain the design decision behind having two separate nodes for what is essentially a single BSDF?
509215977,424,devshgraphicsprogramming,2020-10-21T11:55:46Z,"I thought we could have these as 4 values, 1 offset and 3 counts ?"
509218821,424,devshgraphicsprogramming,2020-10-21T12:00:33Z,I'm a bit confused about needing a `uvec2` for the rest of the streams
509220325,424,devshgraphicsprogramming,2020-10-21T12:03:07Z,dont you want to keep this DRY?
509220924,424,devshgraphicsprogramming,2020-10-21T12:04:17Z,"name this better? (put ""VT"" in the name)"
509228658,424,devshgraphicsprogramming,2020-10-21T12:17:12Z,"we could use a single offset and keep the streams together in memory, then work out the other offsets from stream counts."
509236731,424,devshgraphicsprogramming,2020-10-21T12:30:16Z,dont we already have the code for this somewhere else?
509243222,424,devshgraphicsprogramming,2020-10-21T12:40:19Z,"we should probably do all the `alloc`s first, then shrink the VT and figure out the Physical Array size, then shrink the memory space before `commit`"
509257862,424,devshgraphicsprogramming,2020-10-21T13:01:58Z,is it fixed?
509261784,424,devshgraphicsprogramming,2020-10-21T13:07:44Z,only in DEBUG?
509263265,424,devshgraphicsprogramming,2020-10-21T13:09:26Z,definite TODO
509264258,424,devshgraphicsprogramming,2020-10-21T13:10:45Z,deriv map should never be 32bit float XD (16bit SNORM is max)
509265363,424,devshgraphicsprogramming,2020-10-21T13:12:21Z,where's the definition of `sizeof_bsdf_data` ?
509295954,424,Crisspl,2020-10-21T13:44:59Z,"if image is null, it means it couldnt be loaded for some reason"
509299749,424,Crisspl,2020-10-21T13:48:00Z,what else would i do?
509302953,424,Crisspl,2020-10-21T13:50:30Z,"reflect or transmit, stolen from nvidia MDL
For example dielectric in IR is encoded as fresnel-weighted reflection/transmission"
509303703,424,Crisspl,2020-10-21T13:51:09Z,yes
509306468,424,Crisspl,2020-10-21T13:53:24Z,"because mitsuba doesnt define ior for diffuse brdf node. So it's defaulted to eta=(1,1,1) and k=(0,0,0)"
509307410,424,Crisspl,2020-10-21T13:54:25Z,"no, an explanation"
509307627,424,Crisspl,2020-10-21T13:54:42Z,"changed to ""making"""
509309511,424,Crisspl,2020-10-21T13:56:54Z,"twosided is encoded in IR as presence of surfaces. Front surface is always present. Back surface is optional and if it is present, it means it's twosided (stolen from MDL as well)"
509313611,424,Crisspl,2020-10-21T14:01:46Z,"if there's geom modifier (i.e. bumpmap) at the top of AST, it becomes parent of surfaces in IR. Actually i dont like this and wanted to change but i forgot and left as is"
509314994,424,Crisspl,2020-10-21T14:03:24Z,"Unfortunately i have to agree, it is. Because i couldnt get it done in a prettier way"
509318336,424,Crisspl,2020-10-21T14:07:27Z,"hm, seems like created every time. Thanks for noticing... Now i think maybe this unused map in frontend was meant to be derivative map cache, but never finished.. Anyway this is a TODO"
509321809,424,Crisspl,2020-10-21T14:11:39Z,"it's from before vulkan-like engine API. It was fixed, but it's not on this API/branch because we dont have mesh manipulator working"
509322962,424,Crisspl,2020-10-21T14:13:07Z,did it for debug purposes when derivative kernel didnt work
509324539,424,Crisspl,2020-10-21T14:14:54Z,generated dynamically in `CMaterialCompilerGLSLBackendCommon::genPreprocDefinitions()` so that GLSL is always up to date with C++ constants without editing GLSL by hand
509325326,424,Crisspl,2020-10-21T14:15:48Z,"possible, in some other loader"
509328019,424,devshgraphicsprogramming,2020-10-21T14:18:55Z,you need to first assert that `addr` is not invalid
509329170,424,devshgraphicsprogramming,2020-10-21T14:20:11Z,what do we use temporary nodes for?
509329503,424,Crisspl,2020-10-21T14:20:33Z,"flexibility of IR, compatibility with MDL. I mean it could have Dielectric node, but scattering mode is also useful (and needed to make it work with MDL) so since we have scattering mode i decided to have dielectric be encoded like this"
509330353,424,devshgraphicsprogramming,2020-10-21T14:21:27Z,"make sure to leave a comment that we can have multiple root nodes ?
(or do you have multiple IR for material?)"
509331199,424,Crisspl,2020-10-21T14:22:28Z,"yes, never actually got to it though. A minor TODO"
509332472,424,Crisspl,2020-10-21T14:23:56Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509236731
509332609,424,Crisspl,2020-10-21T14:24:07Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509236731
509332675,424,devshgraphicsprogramming,2020-10-21T14:24:11Z,maybe put these definitions inside `SParameter` ?
509335218,424,devshgraphicsprogramming,2020-10-21T14:27:08Z,what's the difference between MATERIAL and BSDF?
509337483,424,devshgraphicsprogramming,2020-10-21T14:29:45Z,"you're breaking the AST if you allow this, so either:
A) Have separate roots for front and back surface
B) have each BSDF/Material node always contain an entry for front and back functions"
509342919,424,devshgraphicsprogramming,2020-10-21T14:36:02Z,"leave a TODO comment...

we could implement the children array in the future as N nodes allocated just after this one (one would only need the child count)... but this would only be possible if the nodes were uniform bytesize.

That way there would be no artificial limit on max children in our IR (backends will still have limits)"
509343442,424,Crisspl,2020-10-21T14:36:38Z,material is always root for whole IR tree
509344200,424,devshgraphicsprogramming,2020-10-21T14:37:31Z,then comment out the `source` if its still a TODO for Nvidia MDL
509344638,424,devshgraphicsprogramming,2020-10-21T14:38:01Z,where's the color?
509345314,424,Crisspl,2020-10-21T14:38:49Z,? i dont get this comment
509345555,424,devshgraphicsprogramming,2020-10-21T14:39:07Z,"yeah I got that, so there's a default constructor then."
509347433,424,devshgraphicsprogramming,2020-10-21T14:41:19Z,we do have the mesh manipulator (normal recomputation) working IIRC ...
509347703,424,devshgraphicsprogramming,2020-10-21T14:41:39Z,"you can throw it out now, I guess?"
509347895,424,devshgraphicsprogramming,2020-10-21T14:41:53Z,ah cool.
509348164,424,devshgraphicsprogramming,2020-10-21T14:42:11Z,"ah ok, makes sense."
509350930,424,devshgraphicsprogramming,2020-10-21T14:45:21Z,@AnastaZIuk ever seen anything similar in other places in our codebase?
509351839,424,devshgraphicsprogramming,2020-10-21T14:46:27Z,so how do you see that you need to match front and back into one thing?
509355120,424,devshgraphicsprogramming,2020-10-21T14:50:16Z,what do we use that one for?
509355865,424,devshgraphicsprogramming,2020-10-21T14:51:09Z,what's sheen?
509356592,424,devshgraphicsprogramming,2020-10-21T14:52:02Z,why is the type even configurable?
509357287,424,devshgraphicsprogramming,2020-10-21T14:52:52Z,Oren-Nayar is the only model we have... its isotropic IIRC?
509358012,424,devshgraphicsprogramming,2020-10-21T14:53:44Z,how do you implement plastic?
509358324,424,Crisspl,2020-10-21T14:54:07Z,"fresnel - dielectric
weight - blend"
509359051,424,Crisspl,2020-10-21T14:54:59Z,"not sure, something from MDL"
509359477,424,Crisspl,2020-10-21T14:55:29Z,becase some other node type inherits from this iirc
509359828,424,Crisspl,2020-10-21T14:55:55Z,but maybe we'll have aniso diffuse some day
509361223,424,Crisspl,2020-10-21T14:57:29Z,`CBSDFCombinerNode` with `ET_DIFFUSE_AND_SPECULAR` type (diffuse+specular)
509362384,424,Crisspl,2020-10-21T14:58:55Z,i think we'll have to go with B
509363935,424,devshgraphicsprogramming,2020-10-21T15:00:49Z,maybe make everything `private` or `protected` except for the VT and then make the parent class a `friend`
509364531,424,devshgraphicsprogramming,2020-10-21T15:01:30Z,"same as always, one offset 4 counts"
509366241,424,devshgraphicsprogramming,2020-10-21T15:03:40Z,does `opacity` override thickness+sigma beer's law thing?
509368003,424,Crisspl,2020-10-21T15:05:55Z,"No idea, i dont know a thing how to implement coating"
509371086,424,devshgraphicsprogramming,2020-10-21T15:09:40Z,"we need to take the `IR` as a `const` and make a copy, otherwise the temporary nodes created on a `compile` would eventually overrun the storage"
509376888,424,devshgraphicsprogramming,2020-10-21T15:16:54Z,a better variable name would be in order
509378004,424,devshgraphicsprogramming,2020-10-21T15:18:13Z,`out_pdf` is not set!
509381080,424,devshgraphicsprogramming,2020-10-21T15:22:06Z,why are you screwing around with the microfacet cache here?
509381340,424,devshgraphicsprogramming,2020-10-21T15:22:26Z,what are you doing with the microfacet cache here?
509382890,424,devshgraphicsprogramming,2020-10-21T15:24:29Z,no idea why this function exists
509383981,424,devshgraphicsprogramming,2020-10-21T15:25:47Z,ok I get it now.
509384976,424,devshgraphicsprogramming,2020-10-21T15:27:01Z,"why would zeros be a problem?

Also `TdotH` and `BdotH` should be equal to 0.0 !

You got everything the wrong way round XD"
509386704,424,devshgraphicsprogramming,2020-10-21T15:29:14Z,`NdotH = 1.0`
509391195,424,devshgraphicsprogramming,2020-10-21T15:35:05Z,why did you set PDF to 1.0 ? It should be infinite!
509391838,424,devshgraphicsprogramming,2020-10-21T15:35:55Z,you should use the special switch/if macro here
509399401,424,devshgraphicsprogramming,2020-10-21T15:45:42Z,"this is wrong, the `remainder` shouldn't be multiplied by the weight.

`pdf` can be multiplied by `weight` or you could not track weight at all and use `rcpChoiceProb` directly"
509399807,424,devshgraphicsprogramming,2020-10-21T15:46:15Z,you could initialize `out_pdf` to 1.0 instead and use `rcpChoiceProb` later on
509400689,424,devshgraphicsprogramming,2020-10-21T15:47:24Z,"you could just divide `out_pdf` by `rcpChoiceProb` or multiply it here instead of `weight`, as long as `out_pdf` was initialized to 1.0"
509403590,424,devshgraphicsprogramming,2020-10-21T15:51:10Z,"I dont get this, this is confusing"
509405190,424,devshgraphicsprogramming,2020-10-21T15:53:21Z,"by the right hand rule, only one of T or B will change directions if N changes directions (a flipping of both T and B would correspond to a 180 degree rotation, not a single mirror)

right now you've changed them to left-handed"
509406502,424,devshgraphicsprogramming,2020-10-21T15:55:05Z,what's with the bumpmap?
509407187,424,devshgraphicsprogramming,2020-10-21T15:55:58Z,"this is weird, it should just be
```glsl
if (instr_getTwosided(instr) && currInteraction.isotropic.NdotV<0.0)
{
	flipCurrInteraction();
}
```"
509408551,424,devshgraphicsprogramming,2020-10-21T15:57:47Z,you could just assign straight to `out_remainder` and `out_uf`
509409062,424,Crisspl,2020-10-21T15:58:28Z,"eh, you're right. I was thinking that it could get be reflipped in next instruction, but... well yeah. obvs not possible"
509409297,424,devshgraphicsprogramming,2020-10-21T15:58:47Z,"what about two switches, one for `op` and another for `ndf`?"
509410329,424,Crisspl,2020-10-21T16:00:13Z,possible if second switch was inside default case of the first switch
509411594,424,devshgraphicsprogramming,2020-10-21T16:01:55Z,divergence and code duplication
509414106,424,devshgraphicsprogramming,2020-10-21T16:05:29Z,"use `irr_glsl_partitionRandVariable` instead

you need to just divide the `out_pdf` by the `rcpChoiceProb` and multiply the future `out_rem` by `rcpChoiceProb`

**this is the only exception to not multiplying the `out_rem` by the pdf of generator choice (because the probability here will not match a `vec3` fresnel exactly)**"
509415378,424,devshgraphicsprogramming,2020-10-21T16:07:16Z,lets do it.
509415708,424,devshgraphicsprogramming,2020-10-21T16:07:44Z,its the backend that should be propagating the twosided thing down the AST branches
509415905,424,devshgraphicsprogramming,2020-10-21T16:08:02Z,what does mitsuba say?
509416270,424,devshgraphicsprogramming,2020-10-21T16:08:34Z,ok
509416356,424,devshgraphicsprogramming,2020-10-21T16:08:42Z,which node?
509416472,424,devshgraphicsprogramming,2020-10-21T16:08:53Z,comment it out for now.
509416831,424,devshgraphicsprogramming,2020-10-21T16:09:21Z,I dont get the explanation
509417049,424,devshgraphicsprogramming,2020-10-21T16:09:41Z,dont have an unused variable handing around
509418175,424,devshgraphicsprogramming,2020-10-21T16:11:18Z,this whole function's existence doesnt make sense really
509418925,424,devshgraphicsprogramming,2020-10-21T16:12:22Z,this function's existence probably doesn't make sense either
509427322,424,devshgraphicsprogramming,2020-10-21T16:24:41Z,Also you have a bug because `u.z` does not get paritioned/rescaled
509435564,424,Crisspl,2020-10-21T16:36:48Z,MIXTURE -> BLENDs translation
509445110,424,devshgraphicsprogramming,2020-10-21T16:51:08Z,"there's a far easier way to deal with the generator, it will be less divergent, less code and easier to read & understand.

You should tear into the microfacet transmission generators to see how it all comes together.

It's best if you intialized `out_rem` to 1.0 for non plastics and then multiplied factors onto it.

### First of all handle your reflective fresnel

If your BSDF is not diffuse (diffuse or difftrans) then you will need to treat it somewhat like a blend node. The way you choose plastic vs. diffuse right now is 100% OK except for variable partition/rescale that is missing.

You need an extra flag besides `out_generatorInstr` to discern which sub-generator was used.

If you choose the diffuse generator, then you need to premultiply or initialize the `out_rem` to the fresnel diffuse correction factor **multiplied by `rcpChoiceProb`**, then proceed to the diffuse generator path.

However for the specular generator, then you need to premultiply or initialize the `out_rem` to be the `rcpChoiceProb`, you'd then need to proceed as for a CONDUCTOR, except that you **compute the fresnel like for a dielectric.**

## All Non-Diffuse BSDF generators generate a half vector H first

So you should split your code for generating an `s` into two branches, diffuse vs. non-diffuse.

### Diffuse path

Doesn't matter if its DIFF or DIFFTRANS, you need to generate a point on a hemisphere.

If the material is DIFFTRANS then you use the `u.z` variable to flip the `L` direction with 50% probability

PDF is trivial to compute.

The microfacet cache, you should compute using our built-in function that takes an interaction and a light sample (specialized for the reflective case).

### The Specular Path

Use the correct generator to generate `H` given your NDF, it doesn't matter if the material is CONDUCTOR or DIELECTRIC. If the material is smooth then simply set `H=N` (but this backend has no smooth materials, it just has NDFs with 0 roughness, so this point is moot).

Now for the `out_rem` compute the G2/G1 function (there might be some useful metadate that a generator overload might return).

To compute the PDF you need to multiply it by NDF*G1 initially, there's one extra step in case of a dielectric material.

Compute the Fresnel of `VdotH`, but dont use it yet.

If the material cannot be Refractive then set a `refraction` boolean to false.

Otherwise if the material could be Refractive (dielectric) then choose between reflection and refraction based on the previously calculated Fresnel's luma coefficients, divide the `out_rem` and multiply the PDF by the probability of your choice respectively.

Multiply `out_rem` by the correct Frensel depending on `refraction` boolean (either `F` or `1-F`)

Now there's a handy function in our GLSL library which can construct a microfacet cache given a view interaction, a microfacet `H` vector, a refraction boolean a few extra infos like the refractive index. Use it.

That's it, you're done!"
509447295,424,devshgraphicsprogramming,2020-10-21T16:54:22Z,what's all this doing here?
509447508,424,devshgraphicsprogramming,2020-10-21T16:54:40Z,I have these already?
509448951,424,devshgraphicsprogramming,2020-10-21T16:56:36Z,"same as https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509405190

but this time also about TdotL and BdotL"
509449534,424,devshgraphicsprogramming,2020-10-21T16:57:26Z,you could roll this into one if-statement
509449761,424,devshgraphicsprogramming,2020-10-21T16:57:43Z,this function shouldn't exist
509450536,424,devshgraphicsprogramming,2020-10-21T16:58:49Z,"you also don't need the `ts_flag` to make sure you don't flip twice, because `currInteraction.isotropic.NdotV<0.0` ensures you won't

P.S. This also means you dont need any special handling for the bumpmap case"
509456818,424,devshgraphicsprogramming,2020-10-21T17:08:40Z,"however because ""two sided"" was only supposed to be applied to some BSDF nodes, you need to keep track of whether the directions were flipped, so I propose this

```glsl
void handleTwosided(in bool originallyWasBackface, in instr_t instr, inout irr_glsl_LightSample s, inout irr_glsl_AnisotropicMicrofacetCache uf)
{
   const bool twosided = instr_getTwosided(instr);
   const bool currentFrontface = currInteraction.isotropic.NdotV>0.0;
   if (twosided!=currentFrontface && originallyWasBackface)
   {
      do the flip
   }
}
```

100% guaranteed to work."
509457769,424,devshgraphicsprogramming,2020-10-21T17:10:09Z,unused variable
509458301,424,devshgraphicsprogramming,2020-10-21T17:10:41Z,didn't we talk about more robust checks of this?
509462180,424,devshgraphicsprogramming,2020-10-21T17:14:30Z,ok I get it now.
509467455,424,devshgraphicsprogramming,2020-10-21T17:19:58Z,"if you put these in front of emissive, you could get rid of the padding, and have everything fit in 8 uvec4s"
509590630,424,devshgraphicsprogramming,2020-10-21T19:01:49Z,"ok, when I read this I didnt understand that root was a special node.

I just dont understand why root couldn't be the diffuse node directly."
509591006,424,devshgraphicsprogramming,2020-10-21T19:02:22Z,the place to use the loader override is not the compiler frontend but the Mitsuba XML loader/parser
509594263,424,devshgraphicsprogramming,2020-10-21T19:05:11Z,"I see, then you could use a stack address allocator (so you could actually reclaim the memory, would have to free the temp nodes in reverse order) OR take a `const` IR (I prefer this) as input to the material compilers and create a copy of the IR"
509595283,424,devshgraphicsprogramming,2020-10-21T19:06:11Z,lets go with B then... exactly how much flexibility does Nvidia MDL allow with this Front and Backface stuff?
509605906,424,devshgraphicsprogramming,2020-10-21T19:23:14Z,the phong stuff can move into the phong case
509607070,424,devshgraphicsprogramming,2020-10-21T19:25:11Z,"you need to keep track of valid, a generator with a smaller ETA will be able to generate refraction rays that would be ""invalid"" i.e. not possible to see with even the same BSDF that has a slightly larger ETA"
509607670,424,devshgraphicsprogramming,2020-10-21T19:26:18Z,"basically initialize to `true` outside the if-statement, then wrap the rest of the function in the check that the path is valid"
509607903,424,devshgraphicsprogramming,2020-10-21T19:26:45Z,there's a library function for this conditional
509608234,424,devshgraphicsprogramming,2020-10-21T19:27:23Z,our switch statement would be welcome here
509608730,424,devshgraphicsprogramming,2020-10-21T19:28:15Z,"you can unify these, use `wo_clamps_pi_factored_out` and then `/= is_bsdf ? (2.0*PI):PI;`"
509626472,424,devshgraphicsprogramming,2020-10-21T19:51:52Z,"we can do better than this, see here:
https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509445110

This time you're not computing the remainder, so you can compute G1 and G2 expliclty.

You only need to branch for the NDF*G2 and G2/G1 computation, see the implementation functions `wo_clamps` of the ggx, beckmann and phong functions.

the `is_bsdf` check you can move to before and after the partial eval and PDF computation, the BSDF for dielectrics don't differ from the BRDFs except for:
1) they use absolute dot products for NDF and Geometry Functions
2) they use different fresnel (conductor vs side-sensitive dielectric)
3) the fresnel is not part of the PDF
4) the differential factor is slightly different (I provide a function for adjusting it given a BRDF factor)"
509628370,424,devshgraphicsprogramming,2020-10-21T19:53:15Z,"cos>0 has a point to its existence (i.e. transmission ray from a dielectric generator used to eval a conductor), but the `op_hasSpecular` does not make sense, because it would make you never hit the diffuse cases literally 4 lines later!"
509630949,424,devshgraphicsprogramming,2020-10-21T19:55:20Z,this if statement stinks
509632649,424,devshgraphicsprogramming,2020-10-21T19:57:18Z,this is horrible code duplication
509633897,424,devshgraphicsprogramming,2020-10-21T19:59:11Z,"REDO, plastic is coating"
509634969,424,devshgraphicsprogramming,2020-10-21T19:59:59Z,WHYYY?
509636797,424,devshgraphicsprogramming,2020-10-21T20:01:21Z,"just to double check, if fresnel does not come from a texture... how do you preload the source registers with the values?"
509639141,424,devshgraphicsprogramming,2020-10-21T20:03:17Z,precompute the `normalize(Normal)` dont want this `rsqrt` going all the time.
509639501,424,devshgraphicsprogramming,2020-10-21T20:03:42Z,do we have to do the `irr_glsl_decodeRGB19E7` in the hot loop?
509643497,424,devshgraphicsprogramming,2020-10-21T20:08:03Z,the stuff that flows out of `campos` and `WorldPos` should be precomputed.... i.e. the normalized `V`
509644136,424,devshgraphicsprogramming,2020-10-21T20:08:28Z,you should have `initInteraction` and `updateInteraction` really...
509649606,424,devshgraphicsprogramming,2020-10-21T20:12:12Z,"eval_and_pdf_t is just a vec4 right?

Why not just `mix(bxdf1,bdxf2,w)` ?"
509651248,424,devshgraphicsprogramming,2020-10-21T20:13:12Z,"hmm, ok. actually not that bad."
509655160,424,devshgraphicsprogramming,2020-10-21T20:15:37Z,there's a builtin for that
509667351,424,devshgraphicsprogramming,2020-10-21T20:26:56Z,"dont do early exit, wrap the rest of the code in the opposite condition"
509668346,424,devshgraphicsprogramming,2020-10-21T20:28:25Z,"you need to keep track of `valid` and evaluate the BSDF to 0.0 if not valid, see my other comment on `common.glsl` and the eval_pdf function"
509669832,424,devshgraphicsprogramming,2020-10-21T20:30:43Z,"same comment as here
https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509628370

https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509626472

"
509670471,424,devshgraphicsprogramming,2020-10-21T20:31:53Z,"this seems like duplicated effort:

https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509630949

https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509667351"
509670639,424,devshgraphicsprogramming,2020-10-21T20:32:12Z,related https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509670471
509671020,424,devshgraphicsprogramming,2020-10-21T20:32:51Z,"basically bad if statement, could de-diverge dielectric and conductor, etc."
509676720,424,devshgraphicsprogramming,2020-10-21T20:40:12Z,our switch would be useful here.
509679866,424,devshgraphicsprogramming,2020-10-21T20:43:30Z,"this is messed up... it increases divergence in a clandestine way

There's a loop of a variable number of prefetch instructions, each of which can have a variable number of texture fetches (0-4).

Why can't we preprocess this off-line and unroll the current prefetch instrction + bsdf_data texture handles into a simple texture prefetch stream where each instruction will prefetch only one texture/constant and write to only one set of registers?

Also doing this offline on CPU (preparing the list), would allow us to thin out the BSDF data (remove all textures and constants that would be prefetched)"
509680684,424,devshgraphicsprogramming,2020-10-21T20:44:28Z,a prefetch instruction would need to be a `uvec4` instead of a `uvec2`
509685285,424,devshgraphicsprogramming,2020-10-21T20:50:11Z,I need an explained on those
509685895,424,devshgraphicsprogramming,2020-10-21T20:50:50Z,you've defined `readReg4` in terms of `readReg3` then define `readReg3` in terms of `readReg2
509704151,424,devshgraphicsprogramming,2020-10-21T21:15:47Z,same remarks as with read register
509704797,424,devshgraphicsprogramming,2020-10-21T21:16:32Z,could we always store the real `eta` as a rgb19e7 ?
509709925,424,devshgraphicsprogramming,2020-10-21T21:22:48Z,what's with the macros?
509710957,424,devshgraphicsprogramming,2020-10-21T21:24:13Z,isnt opacity (mask) implemented as a BLEND bsdf between something and the transmission BSDF? where the weight texture is the opacity texture?
509711879,424,devshgraphicsprogramming,2020-10-21T21:25:30Z,instead of `irr_glsl_MC_getCamPos` we should require `irr_glsl_MC_getNormalizedWorldSpaceV()`
512161937,424,Crisspl,2020-10-26T17:59:18Z,"its not front and back, its reflection and transmission"
512162871,424,Crisspl,2020-10-26T18:00:43Z,"maybe, not sure, but we dont have converter into unique primitives working"
512164780,424,Crisspl,2020-10-26T18:04:06Z,coating
512169502,424,devshgraphicsprogramming,2020-10-26T18:11:34Z,can you bring it back quickly?
512170124,424,devshgraphicsprogramming,2020-10-26T18:12:41Z,"make this constructor protected, dont provide default arg, and make it plain as day that its only coating that overrides it"
512170617,424,Crisspl,2020-10-26T18:13:34Z,"> its the backend that should be propagating the twosided thing down the AST branches

i dont get how this is relevant to those comments, however... thats how it is basically. IR has twosided (2 or 1 surface) in root node and backend is propagating the flag while generating instructions for tree traversal"
512176031,424,devshgraphicsprogramming,2020-10-26T18:22:36Z,can you show me an example of an MDL definition of a material that would require this?
512176955,424,devshgraphicsprogramming,2020-10-26T18:24:04Z,I also take issue with the fact that direct childre of this `Fresnel` combiner node are `CMicrofacetSpecularBSDFNode` which when used directly are supposed to handle their own fresnel?
513400368,424,Crisspl,2020-10-28T12:24:32Z,"right, this comment is useless. It will wrok fine if user provides custom loader override. Resolved"
513594751,424,Crisspl,2020-10-28T16:39:12Z,"anyway.. when dielectric gets its dedicated IR node, it will not be used by anything in mitsuba frontend. But it is present in MDL under the name `df::fresnel_layer`. See http://mdlhandbook.com/mdl_handbook/index.html#combining_distribution_functions#fresnel-layering-in-a-material
`ET_WEIGHT_BLEND` is however used for encoding mitsuba's `blendbsdf`"
513630828,424,Crisspl,2020-10-28T17:27:12Z,theres no builtins with struct parameters in our glsl lib
513631065,424,Crisspl,2020-10-28T17:27:29Z,"theres no builtins with struct parameters in our glsl lib

"
513644074,424,Crisspl,2020-10-28T17:46:23Z,"> if fresnel does not come from a texture... how do you preload the source registers with the values?

i dont understand the question. How could fresnel come from texture? Or do you mean IoR? It's always constant.
Preload what registers with what values?"
513649698,424,Crisspl,2020-10-28T17:54:32Z,what exactly?
513652249,424,Crisspl,2020-10-28T17:58:13Z,whats with them?
513653453,424,Crisspl,2020-10-28T18:00:00Z,"no, we rejected that idea. Long ago and dont remember why"
513664670,424,devshgraphicsprogramming,2020-10-28T18:17:16Z,whats' their purpose?
513664908,424,devshgraphicsprogramming,2020-10-28T18:17:41Z,"but opacity has not been implemented at all ?

Also it seems the only way to implement opacity for me."
513665515,424,devshgraphicsprogramming,2020-10-28T18:18:48Z,ah ok I get it somewhat now.
513665731,424,devshgraphicsprogramming,2020-10-28T18:19:08Z,how does `instr_decodeRegisters` work?
513666881,424,devshgraphicsprogramming,2020-10-28T18:20:52Z,does mitsuba not allow `eta` for any of the materials to come from a texture?
513813630,424,Crisspl,2020-10-28T23:06:06Z,nah
513840716,424,devshgraphicsprogramming,2020-10-29T00:32:22Z,"hmm we could support it in the backend though, so that the RGB19E7 call would be swapped for a ""real"" `vec3` and not do costly integer bit manipulation every time we evaluate, generate or compute rem+pdf"
514200542,424,Crisspl,2020-10-29T11:53:25Z,decodes 3x 8bit from 2nd dword
514546673,424,devshgraphicsprogramming,2020-10-29T20:29:14Z,?
514548020,424,devshgraphicsprogramming,2020-10-29T20:31:29Z,I think it should be dona via inserting the derivative map into the asset cache with the same name as the original texture + `?` + `deriv_map` (same for MTL)
514550307,424,devshgraphicsprogramming,2020-10-29T20:35:47Z,why cant the same node node encode all types of weighing/mixing? we just need to discern what the weights would be...
514551555,424,devshgraphicsprogramming,2020-10-29T20:38:13Z,what happened to this?
514552057,424,devshgraphicsprogramming,2020-10-29T20:39:10Z,actually because this function you execute when this BRDF was not the generator... the PDF should be 0.0
514553596,424,devshgraphicsprogramming,2020-10-29T20:41:55Z,TODO
514554809,424,devshgraphicsprogramming,2020-10-29T20:44:04Z,"I think its related to this
https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509194399

Which is basically why do you need a special root node type anyway?"
514555129,424,devshgraphicsprogramming,2020-10-29T20:44:34Z,"which is only the rest of the branch from thin onwards should be thin, not the whole AST"
514558166,424,devshgraphicsprogramming,2020-10-29T20:50:26Z,"twosided in mitsuba means it has the same BSDF on both sides... just saying.

Also if you allow this then you need a ""fixed"" front&back separate root node (two separate ASTs), not at literally every single node on the way down

Makes for a cleaner implementation, two separate instruction streams and stuff for front and back (but could be identical as in the case of mitsuba) then in GLSL or whatever you can do `instructionStream[gl_FrontFace ? frontOffset:backOffset]` instead of turning our IR into an abomination

Also get rid of dedicated root node type, I dont see a point of having it"
514558360,424,devshgraphicsprogramming,2020-10-29T20:50:42Z,"ok once all the issues are dealt with, we'll revisit"
514558879,424,devshgraphicsprogramming,2020-10-29T20:51:20Z,"note, we didn't only the branch of the AST onwards"
514558928,424,devshgraphicsprogramming,2020-10-29T20:51:25Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r514558166
514559087,424,devshgraphicsprogramming,2020-10-29T20:51:47Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r514558166
514561252,424,devshgraphicsprogramming,2020-10-29T20:56:01Z,"this concern the MTL loader too

You need to check `_heightMap` is not dummy, if it is restore it, etc. also cache the derivative map in the general cache under a custom key... and so on"
514563460,424,devshgraphicsprogramming,2020-10-29T21:00:04Z,`union` for clarity
514564186,424,devshgraphicsprogramming,2020-10-29T21:01:34Z,?
514565651,424,devshgraphicsprogramming,2020-10-29T21:03:55Z,I also mean the `PrecomputedStuffSSBO` name
514565995,424,devshgraphicsprogramming,2020-10-29T21:04:21Z,@AnastaZIuk did you do any changes?
514570209,424,devshgraphicsprogramming,2020-10-29T21:11:11Z,"actually B would be a bad idea... because it introduces a binary choice at possibly every node in the AST

but the thing which chooses between back and front face is only a single variable, so if you were to ""unroll"" the AST for different cases you'd only end up with two ASTs."
514570758,424,devshgraphicsprogramming,2020-10-29T21:12:17Z,why split into color and intensity? just use a single vec3!
514570847,424,devshgraphicsprogramming,2020-10-29T21:12:29Z,or rgb19e7
514571768,424,devshgraphicsprogramming,2020-10-29T21:14:24Z,done?
514571883,424,devshgraphicsprogramming,2020-10-29T21:14:40Z,TODO
514573737,424,devshgraphicsprogramming,2020-10-29T21:18:37Z,do you even use this overload now?
514573779,424,devshgraphicsprogramming,2020-10-29T21:18:43Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files/ebc3efe61b1b98c5088dbe32bacbdda71ae31432..cc6579f52a80742fa65bd4ed8cb5b4dccdb080f6#r509639141
514574537,424,devshgraphicsprogramming,2020-10-29T21:20:19Z,"`NdotV` should already be precomputed in your current interaction, and thats the one you should be using!

look at the code listing:
https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509456818"
514574769,424,devshgraphicsprogramming,2020-10-29T21:20:47Z,TODO
514575050,424,devshgraphicsprogramming,2020-10-29T21:21:20Z,you forgot to commit this file
514575618,424,devshgraphicsprogramming,2020-10-29T21:22:32Z,where's the weight and correction?
514575944,424,devshgraphicsprogramming,2020-10-29T21:23:15Z,we need to talk about this... probably
514576842,424,Crisspl,2020-10-29T21:25:00Z,?? i cant read interaction to set interaction
514579219,424,devshgraphicsprogramming,2020-10-29T21:29:21Z,"this is divergent... it should be
```glsl
// always have to prefetch at least one reg
writeReg(reg,val[0]);
#ifdef PREFETCH_REG_COUNT_2
if (regcnt>=1u)
    writeReg(reg+1u,val[1]);
#endif
#ifdef PREFETCH_REG_COUNT_3
if (regcnt>=2u)
    writeReg(reg+2u,val[2]);
#endif
```"
514579606,424,devshgraphicsprogramming,2020-10-29T21:30:05Z,why do you have like 4 functions for the same thing?
514579799,424,devshgraphicsprogramming,2020-10-29T21:30:35Z,stop violating the right hand rule
514580010,424,devshgraphicsprogramming,2020-10-29T21:31:04Z,also https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509643497
514580478,424,devshgraphicsprogramming,2020-10-29T21:32:05Z,still TODO
514676484,424,Crisspl,2020-10-30T01:39:42Z,"right, makes more sense"
515022607,424,devshgraphicsprogramming,2020-10-30T11:11:55Z,"yes you can read current interaction to flip it

Also the `view` should be cached.. see my comment about `irr_glsl_MC_getNormalizedV()`"
516697343,424,devshgraphicsprogramming,2020-11-03T14:16:09Z,still a todo
516697661,424,devshgraphicsprogramming,2020-11-03T14:16:40Z,@Anastazluk watch the latest commits and learn for glTF
516699193,424,devshgraphicsprogramming,2020-11-03T14:18:46Z,unused variable.
516701765,424,devshgraphicsprogramming,2020-11-03T14:21:58Z,"this is a mess it still doesnt do what its supposed to
https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509456818

you shouldn't even have to pass the Normal to this function."
516703768,424,devshgraphicsprogramming,2020-11-03T14:24:40Z,whats the status on this?
516713488,424,devshgraphicsprogramming,2020-11-03T14:36:48Z,still TODO
516713609,424,devshgraphicsprogramming,2020-11-03T14:36:57Z,TODO
516713907,424,devshgraphicsprogramming,2020-11-03T14:37:17Z,still need that union
516839786,424,Crisspl,2020-11-03T17:31:49Z,not needed any more since twosided BSDF is illegal anyway
516839944,424,Crisspl,2020-11-03T17:32:07Z,+ we wont even have twosided flag
517280169,424,Crisspl,2020-11-04T11:33:12Z,done
517302083,424,Crisspl,2020-11-04T12:16:33Z,"probably, not sure, will look into it after fixing smaller issues"
517351510,424,Crisspl,2020-11-04T13:43:51Z,"`weight` is a value resulting from traversing possible chain of blends (choosing left/right). Im multiplying both `rem` and `pdf` by the `weight` so that in the end of `runGenerateAndRemainderStream()` i have `generator_rem` and `generator_pdf` properly weighted. I dont really understand why generator remainder shouldnt be weighted if OP_BLEND is essentially `mix(vec4(rem1, pdf1), vec4(rem2, pdf2))`

```
vec3 runGenerateAndRemainderStream(in MC_precomputed_t precomp, in instr_stream_t gcs, in instr_stream_t rnps, in vec3 rand, out float out_pdf, out irr_glsl_LightSample out_smpl)
{
	instr_t generator;
	vec3 generator_rem;
	float generator_pdf;
	irr_glsl_AnisotropicMicrofacetCache microfacet;
	irr_glsl_LightSample s = irr_bsdf_cos_generate(precomp, gcs, rand, generator_rem, generator_pdf, generator, microfacet);
	eval_and_pdf_t eval_pdf = irr_bsdf_eval_and_pdf(precomp, rnps, s, generator, microfacet);
	bxdf_eval_t acc = eval_pdf.rgb;
	float restPdf = eval_pdf.a;
	float pdf = generator_pdf + restPdf;

	out_smpl = s;
	out_pdf = pdf;

	vec3 rem = generator_rem/(1.0 + restPdf/generator_pdf) + acc/pdf;

	return rem;
}
```"
517357764,424,Crisspl,2020-11-04T13:53:24Z,but can i read from `out` function parameter? I can change it to `inout` just as well but i could be misleading
517390990,424,Crisspl,2020-11-04T14:39:07Z,yes
517392146,424,Crisspl,2020-11-04T14:40:40Z,i think it would be good idea to just put this function into this loader base class @AnastaZIuk is supposed to make
517403288,424,Crisspl,2020-11-04T14:55:42Z,ignoring because twosided-ness is going to be reworked anyway
517441039,424,Crisspl,2020-11-04T15:46:55Z,? what 4 functions? 
517444264,424,Crisspl,2020-11-04T15:51:19Z,"?? well, obviously i need to normal to set surface interaction"
518678509,424,devshgraphicsprogramming,2020-11-06T11:01:07Z,"yes you can, but you need to write it yourself first, if you're reading from a `out` that you've never written to before... it needs to be an `inout`"
518679788,424,devshgraphicsprogramming,2020-11-06T11:03:19Z,what do you need worldspace position for?
518705558,424,devshgraphicsprogramming,2020-11-06T11:56:40Z,make sure you don't trip up on padding that was inserted by alignment
518705666,424,devshgraphicsprogramming,2020-11-06T11:56:53Z,update comment
518709635,424,devshgraphicsprogramming,2020-11-06T12:05:31Z,there's no reason why you should be using `cos_Eval_DG` because you can handle beckmann + ggx and anisotropy in a way that reduces divergence... at the very least you should be using `wo_clamps` functions
518710388,424,devshgraphicsprogramming,2020-11-06T12:07:07Z,why is it a reflect now?
518710575,424,devshgraphicsprogramming,2020-11-06T12:07:31Z,this needs to be the other way round if you're constructing the IR AST for the backface
518712807,424,devshgraphicsprogramming,2020-11-06T12:12:23Z,"lets talk about consistency.

Either we differentiate between rough and smooth (microfacet and delta) or we dont and allow 0 roughness materials.

So either you have
DELTA_SPECULAR + MICROFACET_SPECULAR
DELTA_COATING + MICROFACET_COATING
DELTA_DIELECTRIC + MICROFACET_DIELECTRIC
DELTA_THIN_DIELECTRIC + MICROFACET_THIN_DIELECTRIC

where a MICROFACET_THIN_DIELECTRIC is a TODO (backends assert that its not used)

Or just
MICROFACET_SPECULAR
MICROFACET_COATING
MICROFACET_DIELECTRIC
MICROFACET_THIN_DIELECTRIC

where a rough thindielectric is a TODO (backends assert that roughness is 0)"
518713790,424,devshgraphicsprogramming,2020-11-06T12:14:34Z,"ah ok, its the world space pos of the frament... I misread and thought it was the camera."
518715778,424,devshgraphicsprogramming,2020-11-06T12:18:55Z,"I'm sure I already had a function like this...

What are you trying to achieve or use this for?"
518716857,424,devshgraphicsprogramming,2020-11-06T12:21:03Z,"proper way to do it (putting asside the do we put weight on PDF issue)
```glsl
weight /= rcpProb;
if (choseCoat)
    break;
ix++;
```

ALWAYS use the `rcpProb` from the partition function!"
518720558,424,devshgraphicsprogramming,2020-11-06T12:28:46Z,WTF?
518724498,424,Crisspl,2020-11-06T12:37:12Z,lol XD thx
518727988,424,devshgraphicsprogramming,2020-11-06T12:44:26Z,decided
518729126,424,devshgraphicsprogramming,2020-11-06T12:46:43Z,"oh, btw you need a `DELTA_TRANSMISSION` (to implement opacity mask)"
518729807,424,devshgraphicsprogramming,2020-11-06T12:48:13Z,"the sample will always be valid for the generator, no need to check here... its only when you evaluate (or get remainder from non-generators)!"
518730267,424,devshgraphicsprogramming,2020-11-06T12:49:07Z,the generator will always generate valid samples for itself.
518730806,424,devshgraphicsprogramming,2020-11-06T12:50:12Z,"nope... you're supposed to check if samples are valid inside `irr_bsdf_cos_generate` for each BSDF, separately"
518732885,424,devshgraphicsprogramming,2020-11-06T12:54:35Z,"PDF of a delta BSDF as a generator is infinite, as a evaluator its 0
(the probability density around the only value you can generate is infinite, but if the exact generator isnt used then its impossible to obtain the exact value)."
518770648,424,devshgraphicsprogramming,2020-11-06T14:03:29Z,"this is an awful if statement anyway... will be deleted, resolved"
518796097,424,Crisspl,2020-11-06T14:44:49Z,"> oh, btw you need a `DELTA_TRANSMISSION` (to implement opacity mask)

yep, im aware, just not the time yet
"
518799597,424,devshgraphicsprogramming,2020-11-06T14:50:11Z,so.. what went down here?
518800410,424,devshgraphicsprogramming,2020-11-06T14:51:25Z,"should be unneeded if you use the same func to compute the microfacet case for diffuse, difftrans and thindielectric (only in the reflective case obvs)"
518822222,424,Crisspl,2020-11-06T15:23:31Z,"there's no R32G32_SFLOAT anymore, but VT obvs need extra features as we established (will be done in separate PR on my fork)"
518830191,424,devshgraphicsprogramming,2020-11-06T15:35:50Z,"Because the estimator (overall remainder) is
`rem = Sum{0...N}(w_i*f_i)/Sum{0...N}(w_i*p_i);`

you can split it w.r.t. the generator `g`
`rem = (w_g*f_g+Sum{i!=g}(w_i*f_i))/Sum{0...N}(w_i*p_i);`

divide both sides by `w_g*p_g`
`rem = (w_g*f_g/(w_g*p_g)+Sum{i!=g}(w_i*f_i)/(w_g*p_g))/(Sum{i!=g}(w_i*p_i)/(w_g*p_g)+1.0);`

and it just so happens that
`w_g*f_g/(w_g*p_g)`
is the unweighted remainder of the generator BxDF
`f_g/p_g`"
518834572,424,devshgraphicsprogramming,2020-11-06T15:42:39Z,something went wrong during the merge
518838529,424,Crisspl,2020-11-06T15:48:57Z,"i didnt merge your branch, just mine"
518844910,424,devshgraphicsprogramming,2020-11-06T15:58:56Z,"actually you could change the name of `is_valid` to `can_eval` and here you could do
`can_eval = cosFactor>FLT_MIN;`"
518845428,424,devshgraphicsprogramming,2020-11-06T15:59:43Z,"see https://github.com/buildaworldnet/IrrlichtBAW/pull/424/files#r518844910

you could use `can_eval` here"
518845789,424,devshgraphicsprogramming,2020-11-06T16:00:20Z,could merge this if/else with the previous
518852724,424,devshgraphicsprogramming,2020-11-06T16:11:49Z,why recompute from scratch? if the View and Light positions don't change then your half vector doesnt change and its dot product with V or L don't either
518853630,424,devshgraphicsprogramming,2020-11-06T16:13:22Z,I fail to see any weighting of the eval and pdf?
518859084,424,devshgraphicsprogramming,2020-11-06T16:22:26Z,"btw there's two forms of getting the remainder
`generator_rem/(1.0+restPdf/generator_pdf) + acc/pdf`
and
`(generator_rem+acc/generator_pdf)/(1.0+restPdf/generator_pdf)`

where `generator_rem` is the unweighted remainder of the generator"
518921779,424,devshgraphicsprogramming,2020-11-06T18:13:39Z,remove comment.
518923589,424,devshgraphicsprogramming,2020-11-06T18:17:01Z,you sure that's right?
518926830,424,devshgraphicsprogramming,2020-11-06T18:23:15Z,what is this `w` and `out_Weight` used for?
518927721,424,devshgraphicsprogramming,2020-11-06T18:24:55Z,"ok its wrong, you cant use the actual weights as the PDF weights, because that works differently"
518933305,424,Crisspl,2020-11-06T18:35:55Z,because it's done in instr_execute_eval_pdf_COATING/BLEND if thats what you mean
518933781,424,Crisspl,2020-11-06T18:36:55Z,best i could come up with without knowing H and L
518934550,424,Crisspl,2020-11-06T18:38:17Z,out_weight goes to `instr_execute_cos_eval_pdf_COATING` to not compute same thing twice
518935068,424,devshgraphicsprogramming,2020-11-06T18:39:23Z,"because your generator chooses coat with probability `Fresnel(NdotV)` the PDF should be
`mix(coated_pdf,coat_pdf,Fresnel(NdotV))`, so `out_weight=1.0-Fresnel(NdotV)`

(I'd rather have you swap L/R child nodes around with coat with coated so you don't need to do `1.0-` all the time)"
518963227,424,devshgraphicsprogramming,2020-11-06T19:37:11Z,ok
518963411,424,devshgraphicsprogramming,2020-11-06T19:37:38Z,"ah ok, merge mine at some point"
522309737,424,devshgraphicsprogramming,2020-11-12T18:05:30Z,so the base was made?
523135529,424,Crisspl,2020-11-13T18:12:48Z,im sure
523138030,424,Crisspl,2020-11-13T18:17:07Z,"i think i can get rid of this scattering mode actually
`REFLECT` is set without a reason, it's ignored by GLSL backend anyway"
523138567,424,Crisspl,2020-11-13T18:17:45Z,thats how it's done ;)
523141954,424,Crisspl,2020-11-13T18:21:23Z,"not used any more in material compiler,
 but i think it can be left in the GLSL header as is?"
524263065,424,devshgraphicsprogramming,2020-11-16T13:22:31Z,"you no longer need to flip, if you're doing twosided as separate instruction streams, so this function needs not to exist"
526478109,424,devshgraphicsprogramming,2020-11-18T22:55:14Z,"MY god... how could Nvidia produce such a royal fuckup!

Weighing the COATED BxDF by the top level BSDF's microfacet fresnel  🤦 
We should probably emit warnings in the future when encountering the use of `df::fresnel_layer` in blend materials telling people Nvidia fucked up big time.

We should not support that abomination... if something is getting weighted by fresnel, only the left bsdf gets weighted by microfacet fresnel, the right one will be weighted by the 2 fresnels we usually use for diffuse.

We will correct it, if someone wants the broken behaviour (and consistency with other tools that loose energy) they can patch the engine."
526479703,424,devshgraphicsprogramming,2020-11-18T22:59:03Z,"Also it looks like using a normal glossy BSDF (microfacet glass) in a ""coating"" MDL-fresnel-blend would result in double fresnel getting applied on the specular coating 🤦 🤦 🤦 

TL;DR Dont worry about supporting MDL, just make our IR ""sane"""
526505187,424,devshgraphicsprogramming,2020-11-19T00:07:11Z,STILL NOT CONST POINTER TO IR
526506376,424,devshgraphicsprogramming,2020-11-19T00:10:44Z,you wont need them https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r526504743
526506474,424,devshgraphicsprogramming,2020-11-19T00:11:00Z,you wont need them https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r526504743
527890416,424,devshgraphicsprogramming,2020-11-20T18:20:17Z,TODO
527903613,424,devshgraphicsprogramming,2020-11-20T18:45:20Z,needs to be back
527903974,424,devshgraphicsprogramming,2020-11-20T18:46:00Z,leave the comment
527906140,424,devshgraphicsprogramming,2020-11-20T18:50:25Z,"rename `ET_FRESNEL_BLEND` to `ET_COAT_BLEND`

if you want something for supporting the broken way MDL layers materials with fresnel reserve the name `ET_LOL_MDL_SUX_BROKEN_FRESNEL_BLEND`"
527907388,424,devshgraphicsprogramming,2020-11-20T18:53:03Z,still TODO
527932235,424,Crisspl,2020-11-20T19:42:16Z,"i did this the other way (freeing mem for temp nodes after compilation), you've seen"
528667586,424,Crisspl,2020-11-23T12:27:19Z,"> rename ET_FRESNEL_BLEND to ET_COAT_BLEND

i've created separate IR node for coating, so i can remove FRESNEL_BLEND just as well"
528815040,424,devshgraphicsprogramming,2020-11-23T16:02:12Z,I think `ET_LOL_MDL_SUX_BROKEN_FRESNEL_BLEND` is a much better idea XD
528816097,424,devshgraphicsprogramming,2020-11-23T16:02:52Z,"eh ok, I still dont like it... but lets just compromise for the sake of the merge"
528819802,424,devshgraphicsprogramming,2020-11-23T16:07:33Z,why do we no longer filter?
528819923,424,devshgraphicsprogramming,2020-11-23T16:07:44Z,why do we no longer optimize?
528826206,424,devshgraphicsprogramming,2020-11-23T16:16:35Z,just remove the macro shit
528832754,424,Crisspl,2020-11-23T16:25:28Z,ah forgot to turn it on
362091450,410,devshgraphicsprogramming,2019-12-30T20:42:32Z,"just a unique string that we can use to do a comparison against, it would be useful if you also had a static function for this class that returns the same thing."
362091537,410,devshgraphicsprogramming,2019-12-30T20:43:00Z,would be nice if we could roll this into a struct that would be ready to be copied into a `std140` UBO
362091622,410,devshgraphicsprogramming,2019-12-30T20:43:21Z,same as above (I presume PBR and above are mutually exclusive)
362093639,410,devshgraphicsprogramming,2019-12-30T20:53:15Z,"its because we can't enum all the possible loaders, so need to identify by string"
362095128,410,devshgraphicsprogramming,2019-12-30T21:00:21Z,namespace MTLParser would be cool
362095494,410,devshgraphicsprogramming,2019-12-30T21:02:21Z,"actually we should go the **UBERSHADER** route here, which is one shader with all the material models, where you only switch between them using a uniform or a push constant (whichever one you like).

The metadata returned will help the user build the ""expected"" descriptor set contents."
362095859,410,devshgraphicsprogramming,2019-12-30T21:04:11Z,cool but you need to add one more binding for a per-material UBO (for materials parameters)
362096875,410,devshgraphicsprogramming,2019-12-30T21:09:09Z,"can you add these ICPUSamplers to the asset cache under the `builtin` path, i.e. something like `irr/builtin/samplers/XXXX` when the `IAssetManager` constructor/init begins

This sort of stuff will allow us to reduce resource duplication in the future"
362097127,410,devshgraphicsprogramming,2019-12-30T21:10:36Z,"set 3 is per mesh, set 2 is per material IIRC

0 = global / per-frame
1 = per-view/camera
2 = material/shader
3 = object/mesh/draw"
362115919,410,Crisspl,2019-12-30T22:54:03Z,it's just inside this cpp file/translation unit anyway
362121972,410,devshgraphicsprogramming,2019-12-30T23:42:09Z,"and another set 1 UBO for MVP matrix, and MV inverse transpose, etc.

Plus possibly push constant for the illumination model etc."
362122344,410,devshgraphicsprogramming,2019-12-30T23:44:57Z,"yeah now a shader needs to be added, ~plus vertex and prim params~ (ah, I see what you're doing with the cloning later on).

Then best-fit blend and raster params"
362122948,410,devshgraphicsprogramming,2019-12-30T23:49:49Z,"The idea should be that your loader for MTL (and to be honest any other loader, except for .baw) adds big ubershaders to the asset manager in the constructor of the loader (when it gets added).

Then we only really compile once when loading the models of a particular format, AND no have to deal with ""fake"" shader swaps on the API side.

You should cache your pipeline layouts too, since you'll probably be returning the same one over and over again (unless you choose to differentiate for different texture set-ups). "
362123335,410,devshgraphicsprogramming,2019-12-30T23:53:17Z,"in reality the pipelines themselves could also be precomputed and during the load, cloned appropriately (they only need to be unique objects because the metadata changes, but internals will be identical)

It will be important to implement a correct `operator==` for `core::unordered_set` for pipelines, shaders and layouts that can reduce duplicates in the default cpu to gpu object converter."
362123589,410,devshgraphicsprogramming,2019-12-30T23:55:20Z,kill the usage of `core::vector3df` and `core::vector2df` while you're at it.
362123711,410,devshgraphicsprogramming,2019-12-30T23:56:31Z,why is this gone?
362123747,410,devshgraphicsprogramming,2019-12-30T23:56:48Z,reason for deletion?
362125278,410,devshgraphicsprogramming,2019-12-31T00:11:09Z,"from now on when using `findCachedAsset` or similar functions in a loader that take a hierarchy level, abandon the constants.

as hierarchy level use `_hierarchyLevel+ICPUMeshBuffer::PIPELINE_HIERARCHYLEVELS_BELOW`

obviously you need to define these magical `_HIERARCHYLEVELS_BELOW` constexpr constants for all the asset classes.
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/ICPUMesh.h#L18

P.S. This is actually a thing to refactor in all the Mesh Loaders"
362125492,410,devshgraphicsprogramming,2019-12-31T00:12:54Z,"shouldn't you be using the variant where you can specify the hierarchy level ? you're loading from a dependent loader

Also:
https://github.com/buildaworldnet/IrrlichtBAW/pull/410/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h#r362125278"
362126421,410,devshgraphicsprogramming,2019-12-31T00:21:25Z,if mutually exclusive then the UBO struct could be a union.
362127194,410,devshgraphicsprogramming,2019-12-31T00:28:52Z,patch our default CPU to GPU object converter so that it always extends the mipmap chain to the full max value and computes the missing mipmaps (you can hack it with a blit for now or a compute shader mip-mapping stub)
362127230,410,devshgraphicsprogramming,2019-12-31T00:29:19Z,obvs don't touch the loaders and CPU Images ;)
362127275,410,devshgraphicsprogramming,2019-12-31T00:29:53Z,ImageView CPU2GPU will also need the `levelCount` patch-up
362128087,410,devshgraphicsprogramming,2019-12-31T00:38:20Z,"nope cache them, although I'd say you need DS 1 and 3 + PC

1 = VP and VP^T^-1 matrix, etc.
3 = Textures and other material parameters, MVP and other per-draw/per-instance/meshbuffer matrices

Push Constants = small material parameters

I'd try and have the descriptor set reuse approach max, because otherwise we'll get DS swaps before every submesh draw. The eventual UBO I would have as a dynamic one, so the swap of desc set hits the fast path (offset change).

Obviously we acknowledge that the descriptor set 3 itself would be incomplete for rendering and rendering wont work, this is what the pipeline metadata is for, it has some nice REQUIRED INPUTS list for the application to know where to place the camera matrices (which PC bytes, or UBO bytes in a binding+set)"
362128388,410,devshgraphicsprogramming,2019-12-31T00:40:50Z,"OBJ can spec faces which are quads or even polygons, we need triangulation if it used to work before."
362128457,410,devshgraphicsprogramming,2019-12-31T00:41:44Z,we should probably use the @Przemog1 utility function for this XD
362128534,410,devshgraphicsprogramming,2019-12-31T00:42:30Z,use an `&` or `?` a multiply is confusing
362128703,410,devshgraphicsprogramming,2019-12-31T00:44:25Z,"`std::isnan` is broken on GCC `-ffast-math` we should replace all usages of `std::isnan`, `std::nan`, and `isinf`, etc. with our own `core::` implementations that do the bitmask checking magic themselves

(`ffast-math` on GCC works by assuming you'll never get an inf, NAN, or a denorm number, which is ok up until it starts breaking `std::` functions that should always work cause they check bits)"
362128858,410,devshgraphicsprogramming,2019-12-31T00:46:23Z,"again, hierarchy level and flags"
362128940,410,devshgraphicsprogramming,2019-12-31T00:47:03Z,at least assert it or something
362128985,410,devshgraphicsprogramming,2019-12-31T00:47:38Z,"clever, I like it"
362567300,410,Crisspl,2020-01-02T17:57:13Z,reworked + previous version was bugged
362568731,410,Crisspl,2020-01-02T18:01:21Z,"was never used (`if (ctx.useGroups)`, `useGroups` was always false anyway), vertices are divided into submeshes with usemtl tag (as it was before)"
362577454,410,Przemog1,2020-01-02T18:28:38Z,@devshgraphicsprogramming what exactly are you talking about?
362598781,410,Crisspl,2020-01-02T19:30:35Z,"well, i think only `ambient` and `shininess` is of no use for PBR. Fun fact: all of these summed up is exactly 128 bytes"
362604888,410,devshgraphicsprogramming,2020-01-02T19:47:14Z,"hmm ok, I trust what you're doing."
362604946,410,devshgraphicsprogramming,2020-01-02T19:47:25Z,ok but that controls smoothing etc. AFAIK
362607634,410,devshgraphicsprogramming,2020-01-02T19:55:12Z,"hmm.. I think I got confused, although I believe I could have been thinking about the need of the normals to be flipped for RH meshes (different winding order for front-face so different cross product sign needed)"
362610072,410,Crisspl,2020-01-02T20:02:07Z,"there is some `s` aka smooth group thing in OBJ spec, but not used/supported in our loader"
362617097,410,Crisspl,2020-01-02T20:24:46Z,i see that `irr/builtin/samplers/default` has `AnisotropicFilter = 4u`. should it also be like it in those?
362651501,410,Crisspl,2020-01-02T22:19:00Z,"nah, it always assumed triangles. I dont why there was reserve(32) then so i changed it to 3"
362679560,410,Crisspl,2020-01-03T00:39:35Z,"i figured, loader only creates sets with descriptors provided by it. However i think putting layout for set=1 sounds like a good idea to me. Anyway.. should the buffer (the one being the UBO asset in the set) be filled wih ny particular data?"
362749751,410,AnastaZIuk,2020-01-03T09:39:10Z,now we can use it from here https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/IImageAssetHandlerBase.h#L21
362900813,410,Crisspl,2020-01-03T17:52:18Z,"2 was for ""mesh scene node"", 3 for meshbuffer/draw. CPU/GPUmeshbuffer holds DS that ought to be used as set=3"
362914843,410,Crisspl,2020-01-03T18:36:43Z,"there's no way to return DS1, one DS is attached to meshbuffer (as we established, it's 3), but there's no way to return another one"
362915229,410,Crisspl,2020-01-03T18:37:47Z,also: https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r362679560
362941221,410,Crisspl,2020-01-03T19:57:56Z,done in OBJ loader
365220369,410,Crisspl,2020-01-10T12:54:07Z,"XDD obviously you were right, there was triangulation"
365513532,410,devshgraphicsprogramming,2020-01-11T10:34:54Z,"you can distustingly call glGenerateMipmaps (DSA version) for now, and leave a note pointing to the mipmapper issue."
366370307,410,devshgraphicsprogramming,2020-01-14T14:31:47Z,how did you fix?
366373299,410,AnastaZIuk,2020-01-14T14:37:07Z,Wasn't it like that at beginning? 
366393982,410,devshgraphicsprogramming,2020-01-14T15:11:56Z,@Crisspl is this clear?
366466162,410,devshgraphicsprogramming,2020-01-14T17:14:14Z,"bad packing, whole struct no alligned to 16 bytes.

Also I'd consider wrapping non-PBR (shininess, ambient) and PBR (IoR, roughness, metallic, ...) in separate structs and using a `union` to not waste space (we aim to use the same data in shaders)."
366466800,410,devshgraphicsprogramming,2020-01-14T17:15:34Z,you need 18 bits for the maps (just update the comment)
366466946,410,devshgraphicsprogramming,2020-01-14T17:15:54Z,whats clamp?
366469950,410,devshgraphicsprogramming,2020-01-14T17:22:12Z,"keep my default of `~0u` we want default not to ""leak memory"""
366470297,410,devshgraphicsprogramming,2020-01-14T17:22:55Z,doesn't ` _asset->convertToDummyObject` do that `= true` thing already?
366471572,410,devshgraphicsprogramming,2020-01-14T17:25:28Z,"you can put this in front of the `grab` + insert into the CPU2GPU cache, but we need to call `convertToDummyObject` every single time (the function for the asset needs to handle multiple subsequent calls)"
366473316,410,devshgraphicsprogramming,2020-01-14T17:29:07Z,agreed
366473766,410,devshgraphicsprogramming,2020-01-14T17:30:06Z,dont call it GPU mesh
366487394,410,devshgraphicsprogramming,2020-01-14T17:58:39Z,"I commented this already in the other PR #411 , `drawMesh` is not for indirect draws."
366489291,410,devshgraphicsprogramming,2020-01-14T18:02:48Z,all of this needs to be fixed same as #411 
366489875,410,devshgraphicsprogramming,2020-01-14T18:04:00Z,I think you lost `m_containsGLSL` here...
366490383,410,devshgraphicsprogramming,2020-01-14T18:05:17Z,maybe define these in terms of `ICPUMeshBuffer::PIPELINE_HIERARCHYLEVELS_BELOW+1u` etc. ?
366491010,410,devshgraphicsprogramming,2020-01-14T18:06:41Z,copy the `isDummyObjectForCacheAliasing` field or place an `assert(isDummyObjectForCacheAliasing)`
366491251,410,devshgraphicsprogramming,2020-01-14T18:07:16Z,explain why are we changing this?
366492932,410,devshgraphicsprogramming,2020-01-14T18:10:56Z,make sure it won't throw (that you still have 8 characters in the string left).
366493133,410,devshgraphicsprogramming,2020-01-14T18:11:19Z,same here about the throw
366502167,410,devshgraphicsprogramming,2020-01-14T18:30:50Z,"ok, I remember https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r362123335 is that the reason?
"
366503019,410,devshgraphicsprogramming,2020-01-14T18:32:34Z,ok I see the new change now.
366517802,410,devshgraphicsprogramming,2020-01-14T19:03:16Z,"well if the shader requires stuff that is ""constant"" (not world matrix) like stuff that you'd have to fill from the metadata to make the material ""work"", like illumination model, ambient and diffuse, etc. then you should sure create, attach and fill an UBO or fill a push constant with data."
366532991,410,devshgraphicsprogramming,2020-01-14T19:35:25Z,"use `descriptor_set` and `descriptor_set_layout` instead of `ds` and `ds_layout` in the paths (let it be verbose).

and please for the love of god give it a different name than `default_ds1` !"
366533643,410,devshgraphicsprogramming,2020-01-14T19:36:44Z,`basic_view_parameters` or something.
366533877,410,devshgraphicsprogramming,2020-01-14T19:37:20Z,"actually make a struct with proper packing, padding and alignment that people could then use to fill out data for the shader, and take the `sizeof` that"
366534214,410,devshgraphicsprogramming,2020-01-14T19:38:00Z,Alos MV/M and 3x3 normal matrices are 12 bytes (same as `core::matrix3x4SIMD`) not 16
366535315,410,devshgraphicsprogramming,2020-01-14T19:40:19Z,"also because a `mat3` takes the space of a `mat4x3` you can stash the `vec3` camera position in the unused column of a `mat3/mat4x3` when in `row_major` layout (fun fact, you can get it directly in GLSL without transpose because GLSL works on columns)"
366535694,410,devshgraphicsprogramming,2020-01-14T19:41:06Z,"you're going to need this line a lot, make a lambda or something to fill ICPUBuffer with dead beef."
366538697,410,devshgraphicsprogramming,2020-01-14T19:47:34Z,"well 16x Anisotropic filter (2^4) is the max on most economy-grade GPUs, so yes."
366538848,410,devshgraphicsprogramming,2020-01-14T19:47:57Z,unless you're making a `irr/builtin/samplers/nearest` XD
366545289,410,devshgraphicsprogramming,2020-01-14T20:02:19Z,"I see the following pairing (not gospel, approximate)
<global,0>
<renderpass,1>
<shader/renderpassindependentpipeline,2>
<draw command,3>

so i guess if you're not switching shaders when you're switching textures, it can do in set 3."
366545607,410,devshgraphicsprogramming,2020-01-14T20:03:04Z,"it should be though, I think."
366555685,410,devshgraphicsprogramming,2020-01-14T20:26:57Z,"This gets split in two, the UBO declaration, and the data struct.

data struct goes to:
- GLSL a common include that's builtin
- a matching C++ `struct` with correct alignment in some aptly named directory and header inside `irr/asset/`

likewise for the UBO declaration"
366556043,410,devshgraphicsprogramming,2020-01-14T20:27:49Z,wrap this in a `#ifndef + #define` guard for `VERTEX_INPUTS`
366556216,410,devshgraphicsprogramming,2020-01-14T20:28:13Z,like we talked on discord (there's a few examples with correct syntax)
366562837,410,devshgraphicsprogramming,2020-01-14T20:43:59Z,wrap this in a `#ifndef + #define` guard for `VERTEX_OUTPUTS`
366562937,410,devshgraphicsprogramming,2020-01-14T20:44:14Z,wrap this in a `#ifndef + #define` guard as well
366563297,410,devshgraphicsprogramming,2020-01-14T20:45:07Z,`normalize` goes around `vNormal` not the whole matrix thing
366563650,410,devshgraphicsprogramming,2020-01-14T20:45:59Z,"`matrix*vec4(v,1.0)` needs its own function and header (`vertex_utils.glsl` or something)"
366565460,410,devshgraphicsprogramming,2020-01-14T20:50:27Z,"the proper way to factor it out is
`matrix[0]*v.x+matrix[1]*v.y+matrix[2]*v.z+matrix[3]`"
366566371,410,devshgraphicsprogramming,2020-01-14T20:52:33Z,wrap the main in a `#ifndef + #define` guard for `VERTEX_MAIN`
366567417,410,devshgraphicsprogramming,2020-01-14T20:54:57Z,furthermore the `CamData` built-in header should have a function that does the MVP and MV transformations on some input vector (and uses the `vertex_utils.glsl`)
366568211,410,devshgraphicsprogramming,2020-01-14T20:56:54Z,factor out into a struct and a built-in header (`irr/builtin/glsl/graphicspipeline/loaders/mtl/common.glsl`)
366568356,410,devshgraphicsprogramming,2020-01-14T20:57:17Z,wrap this in a `#ifndef + #define` guard for `FRAGMENT_INPUT_PUSHCONSTANTS`
366568501,410,devshgraphicsprogramming,2020-01-14T20:57:40Z,wrap this in a `#ifndef + #define` guard for `FRAGMENT_INPUTS_STAGE`
366568609,410,devshgraphicsprogramming,2020-01-14T20:57:58Z,wrap this in a `#ifndef + #define` guard for `FRAGMENT_OUTPUT_FRAMEBUFFER`
366569093,410,devshgraphicsprogramming,2020-01-14T20:59:09Z,just handle everything in a `switch` GPU branching still costs a little bit.
366569322,410,devshgraphicsprogramming,2020-01-14T20:59:43Z,wrap this in a `#ifndef + #define` guard for `FRAGMENT_MAIN`
366570408,410,devshgraphicsprogramming,2020-01-14T21:02:07Z,"different path is needed, `irr/builtin/shader/loaders/obj/...`"
366575003,410,devshgraphicsprogramming,2020-01-14T21:13:29Z,"all these shaders should be simple overrides of the UV version (or vice versa), thats why I want you to wrap every blok in `#ifndef + #define` guards with separated declarations and definitions so simple changes like this are possible without duplicate code."
366575208,410,devshgraphicsprogramming,2020-01-14T21:13:59Z,actually make the non-UV version be the override of the UV version
366894417,410,devshgraphicsprogramming,2020-01-15T14:10:20Z,"You don't return DS1, you leave space for it, the pipeline metadata (this is why I made a base shared class) shall instruct the user how to construct and fill the UBOs used by DS1 + Layout will tell how to make DS1"
366894646,410,devshgraphicsprogramming,2020-01-15T14:10:44Z,"> , this is what the pipeline metadata is for, it has some nice REQUIRED INPUTS list for the application to know where to place the camera matrices (which PC bytes, or UBO bytes in a binding+set)"
366899061,410,devshgraphicsprogramming,2020-01-15T14:18:54Z,"can you factor this out to a common non-virtual inline function, otherwise the custom ICPUBuffers will still keep intact `size` and `isDummyObjectForCacheAliasing`"
366899780,410,devshgraphicsprogramming,2020-01-15T14:20:08Z,very important
366900700,410,devshgraphicsprogramming,2020-01-15T14:21:46Z,"maybe we should refactor this extension and have an `init` function that adds this shader to the built-ins?
(or just put this vertex shader in built-in engine core)"
366911400,410,devshgraphicsprogramming,2020-01-15T14:40:42Z,this is all basically copied from the ex 13 BRDF Explorer? correct?
366917408,410,devshgraphicsprogramming,2020-01-15T14:51:21Z,Maybe fix it on your branch and PR @AnastaZIuk 
366917965,410,devshgraphicsprogramming,2020-01-15T14:52:16Z,Actually examples are here https://github.com/buildaworldnet/IrrlichtBAW/issues/384#issuecomment-544130414
366920698,410,devshgraphicsprogramming,2020-01-15T14:57:09Z,"needs to be refactored to be similar to:

```glsl
#ifndef _BSDF_DEFINED_
#define _BSDF_DEFINED_

// provides `BSDFIsotropicParams`, `BSDFAnisotropicParams`, `BSDFSample` and associated functions like `calc
#include ""irr/builtin/glsl/bsdf/common.h""

// Spectrum can be exchanged to a float for monochrome
#define Spectrum vec3

//! This is the function that evaluates the BSDF for specific view and observer direction
// params can be either BSDFIsotropicParams or BSDFAnisotropicParams 
Spectrum bsdf_cos_eval(in BSDFIsotropicParams params)
{
...
}

//! generates a incoming light sample position given a random number in [0,1]^2 + returns a probability of the sample being generated (ideally distributed exactly according to bsdf_cos_eval)
BSDFSample bsdf_cos_gen_sample(in vec2 _sample)
{
...
}

//! returns bsdf_cos_eval/Probability_of(bsdf_cos_gen_sample) but without numerical issues
Spectrum bsdf_cos_sample_eval(out vec3 L, in ViewSurfaceInteraction interaction, in vec2 _sample)
{
   // sample evil implementation (0 div 0 possible and bad efficiency)
   BSDFSample _sample = bsdf_cos_gen_sample(smpl);
   L = _sample.L;
   return bsdf_cos_eval(calcBSDFIsotropicParams(interaction,_sample.L))/_sample.probability;
}

#endif
```

full post : https://github.com/buildaworldnet/IrrlichtBAW/issues/384#issuecomment-544130414


Also all BRDFs/BSDFs should be using some functions and structs from a common brdf/bsdf include, I've given some basic code
https://github.com/buildaworldnet/IrrlichtBAW/issues/384#issuecomment-546903906"
366921426,410,devshgraphicsprogramming,2020-01-15T14:58:24Z,You can skip the `_cos_gen_sample` and `_cos_sample_eval` implementations for now (just return all NaNs)
366925376,410,devshgraphicsprogramming,2020-01-15T15:05:19Z,"there should be a built-in for that and a header with utility functions, see https://github.com/buildaworldnet/IrrlichtBAW/issues/384#issuecomment-546903906"
366926256,410,devshgraphicsprogramming,2020-01-15T15:06:55Z,the specific BRDFs should come from BRDF includes (even the non PBR ones) https://github.com/buildaworldnet/IrrlichtBAW/issues/384#issuecomment-544130414
366926660,410,devshgraphicsprogramming,2020-01-15T15:07:41Z,this should come from common include
366927222,410,devshgraphicsprogramming,2020-01-15T15:08:38Z,you should gather BRDF inputs and then call specific whole `brdf_cos_eval` functions for given PBR BRDF
366928145,410,devshgraphicsprogramming,2020-01-15T15:10:13Z,"derivative mapping and bump mapping functions should be in common include https://github.com/buildaworldnet/IrrlichtBAW/issues/384#issuecomment-546903906

P.S. Also support DOT3 normal maps for OBJs
"
366928537,410,devshgraphicsprogramming,2020-01-15T15:10:59Z,why fragment shader is not added to cache yet?
366928936,410,devshgraphicsprogramming,2020-01-15T15:11:39Z,or will it be added by MTL loader?
366929706,410,devshgraphicsprogramming,2020-01-15T15:12:57Z,"should be supported, the smooth groups, I mean"
366939872,410,devshgraphicsprogramming,2020-01-15T15:29:26Z,you should be getting views from the asset cache (not create new ones every single time!)!
366980824,410,devshgraphicsprogramming,2020-01-15T16:37:28Z,shouldn't the MTL loader load the textures and create the descriptor set?
366981596,410,devshgraphicsprogramming,2020-01-15T16:38:53Z,anyway why not create the descriptor set in the MTL loader?
366982156,410,devshgraphicsprogramming,2020-01-15T16:39:46Z,shouldn't this be in MTL loader?
366982395,410,devshgraphicsprogramming,2020-01-15T16:40:14Z,at least the fragment shader thing
366995161,410,Crisspl,2020-01-15T17:03:18Z,"> would be useful if you also had a static function for this class that returns the same thing.

by ""this class"" u mean MTL loader or MTL metadata?"
366996958,410,Crisspl,2020-01-15T17:06:48Z,i'll have to read more about what this actually is
366997630,410,Crisspl,2020-01-15T17:08:09Z,"yea, i'll have to adjust CMTLAssetMetadata more to what it's supposed to be according to your idea"
366998242,410,Crisspl,2020-01-15T17:09:20Z,"lambda? i need this in just this one place. If you mean ""a lot"" globally, then why lambda?"
367025409,410,Crisspl,2020-01-15T18:05:03Z,because frag shaders are generated dynamically (see `getShaders()`) but i think it can be static (like VS) with the knowledge that bindings in desc sets doesnt have to be continuous
367025896,410,Crisspl,2020-01-15T18:06:10Z,"i guess it could, i remember i made this decision for some reason but i cant remember.."
367026018,410,Crisspl,2020-01-15T18:06:24Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r367025896
367026186,410,Crisspl,2020-01-15T18:06:43Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r367025409
367033615,410,devshgraphicsprogramming,2020-01-15T18:22:49Z,metadata.
367034207,410,devshgraphicsprogramming,2020-01-15T18:23:58Z,"I think its basically which faces/vertices get ""artificially"" put together for normal recomputation.

This is the whole reason why I wanted the normal recompute function to take a lambda to determine if edge/triangles are connected"
367036900,410,devshgraphicsprogramming,2020-01-15T18:29:36Z,"lambda, or something... I can see it being used to fill many buffer with deadbeef"
367038635,410,devshgraphicsprogramming,2020-01-15T18:33:18Z,"yeah bindings don't have to be continuous, you could do one descset layout for all I care, but then you need to hook up a blank 1x1 texture into the empty slots, so you only need 2 fragment shaders."
367038786,410,devshgraphicsprogramming,2020-01-15T18:33:37Z,views should definitely be cached.
367040673,410,devshgraphicsprogramming,2020-01-15T18:37:38Z,views and textures should be handled by MTL loader
367053520,410,devshgraphicsprogramming,2020-01-15T19:06:02Z,"insert at the very end, multithreaded work might fuck up completely with this mutable crap, assets shouldnt be put in cache until they're in their final form."
367059044,410,devshgraphicsprogramming,2020-01-15T19:18:06Z,"I wonder if there's any point in computing these rough normals, if we have the geometry manipulator function to smooth meshes."
367064324,410,devshgraphicsprogramming,2020-01-15T19:29:23Z,you can slam that in the MTL
367065189,410,devshgraphicsprogramming,2020-01-15T19:31:14Z,"in the MTL, don't need to check for UVs, but there's not only the opacity map, there's also the transmission map that you'd need to check for (different blend equation needed though, probably dual source blending or sth its like having a separate alpha for every RGB channel)"
367066299,410,devshgraphicsprogramming,2020-01-15T19:33:35Z,"even though you clone, you should cache it in the MTL loader (so the total number of clones is limited)"
367066999,410,devshgraphicsprogramming,2020-01-15T19:35:04Z,"desc set 3 should be made in MTL loader, always"
367635290,410,Crisspl,2020-01-16T20:33:18Z,"nah, refl map takes 6 enum values but is just one map, that's why 13bits"
367636441,410,Crisspl,2020-01-16T20:35:34Z,"`-clamp` in mtl/obj spec. If map in .mtl has -clamp flag then it needs sampler with clamp to edge (you can read mtl spec about this, it's actually not clear to me but that's what i assumed)"
367637681,410,Crisspl,2020-01-16T20:38:11Z,"we might have to talk about it. Generally it may result in assets converted to empty cache handles that arent actually cache handles and whats more you cannot make GPU objects from them any more because they've dropped needed resources. That's why i changed it to `0u`, i wasnt sure if it wasnt the cause of crashes during creation of GPU objects"
367639000,410,Crisspl,2020-01-16T20:40:53Z,"some of them, actually it seems a little like we decided to put `=true` in IAsset::convertToDummyObject implementations but then forgot about it and now some of them have this and some dont"
367640098,410,Crisspl,2020-01-16T20:43:34Z,i dont understand. What does it mean to handle multiple subsequent calls in this context?
367640384,410,Crisspl,2020-01-16T20:44:19Z,"nah, see constructor"
367641931,410,Crisspl,2020-01-16T20:48:04Z,"no, it's fix so that it actually compare contents (contained assets) and not just array pointers"
367643550,410,Crisspl,2020-01-16T20:51:53Z,it checks sizes by itself
367686206,410,Crisspl,2020-01-16T22:37:18Z,"> i guess it could, i remember i made this decision for some reason but i cant remember..

ah i know why, because theres no way to return it"
367696793,410,Crisspl,2020-01-16T23:10:49Z,"ah, correction, i assumed it mean clamp to border with border color being `ETBC_FLOAT_OPAQUE_BLACK`"
367925487,410,Crisspl,2020-01-17T13:05:34Z,"yea, thats why im not modifying indirect draw buffer and parameter buffer state. Passing nullptr as 2 last args to this functions results in setting indirect draw and parameter buffer bindings to 0 for really no reason"
368035478,410,Crisspl,2020-01-17T16:51:41Z,">this is all basically copied from the ex 13 BRDF Explorer? correct?

yes, exact copy-paste"
368036094,410,Crisspl,2020-01-17T16:53:02Z,i dont get it. Builtin for normalizing and dot products?
368060421,410,Crisspl,2020-01-17T17:52:10Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r367686206
368067154,410,Crisspl,2020-01-17T18:09:22Z,"i dont understand. How struct can be aligned to anything? it's just struct, not memory address"
368070750,410,Crisspl,2020-01-17T18:18:12Z,">(so the total number of clones is limited)

? i dont understand"
368071064,410,Crisspl,2020-01-17T18:18:56Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r367686206
368071508,410,Crisspl,2020-01-17T18:20:06Z,i think i could use some simple example of what u have in mind
368120385,410,devshgraphicsprogramming,2020-01-17T20:22:41Z,slam a (refcounted) pointer to it in the metadata ;)
368120992,410,devshgraphicsprogramming,2020-01-17T20:24:05Z,"there's only a certain (given) max number of permutations of such a pipeline for all possible vertex inputs, blend states, and shaders attached... shouldn't be cloning a new one, if you've already made an identical one."
368121207,410,devshgraphicsprogramming,2020-01-17T20:24:29Z,discussed in discord.
368122287,410,devshgraphicsprogramming,2020-01-17T20:26:59Z,"yes, cause there are tricks to get them faster, and user (all implementations and shaders) should rely on the function to get all the dot products and vectors (we make an improvement, every shader benefits, instead of non-DRY code)."
368122723,410,devshgraphicsprogramming,2020-01-17T20:28:09Z,"ok in this case they need the `cos` factor inside them, and a cleanup of names (prefix mostly) and parameters (conform to above).

As already mentioned you can leave `sample` functions as a TODO."
368245455,410,devshgraphicsprogramming,2020-01-18T19:58:01Z,"`alignas` is possible on structs and classes in C++11, it instructs the compiler that the `this` pointer will be aligned, but most importantly it will guarantee alignment on **stack** allocated objects, and within other structs... etc.

Its specified on vectorSIMDf and matrices (by composition) ;)"
368245480,410,devshgraphicsprogramming,2020-01-18T19:58:13Z,I see.
368245545,410,devshgraphicsprogramming,2020-01-18T19:59:35Z,"so why is it extra metadata if the same thing can just be present in the descriptor set layout with the correct immutable sampler?

(furthermore, why paths, if we can put entire descriptor set in metadata xd)"
368246860,410,devshgraphicsprogramming,2020-01-18T20:28:26Z,"goes into the MTL pipeline metadata, case closed."
368246994,410,devshgraphicsprogramming,2020-01-18T20:31:23Z,"hmm ok, my original algorithm assumed that no one would be so dumb as to add the same contents twice... but I guess making it more idiot-proof doesn't cost that much perf, so OK."
368247091,410,devshgraphicsprogramming,2020-01-18T20:33:18Z,"setting them to 0 in a `drawMesh` is the correct solution... otherwise you have state pollution! (which is exactly why we invented the whole state tracking system in the first place).

Imagine firing off a few indirect draws before a `drawMesh` and then getting random results from the `drawMesh` depending on which was the last indirect draw to go before it!"
368247988,410,devshgraphicsprogramming,2020-01-18T20:53:23Z,After I call `convertToDummyObject` on any `IAsset` I should be able to call `convertToDummyObject` again without any side-effects.
368248021,410,devshgraphicsprogramming,2020-01-18T20:54:07Z,basically I want this check inside the asset's `convertToDummyObject` method as well.
368248218,410,devshgraphicsprogramming,2020-01-18T20:59:16Z,"great but wrong file for all this stuff, IAssetManager or similar

no idea why youre screwing around with this in the `video` namespace"
368248222,410,devshgraphicsprogramming,2020-01-18T20:59:30Z,make it RGBA8
368248276,410,devshgraphicsprogramming,2020-01-18T21:00:50Z,"default color should be ""oczojebny"" pink/magenta with alpha 255

Hell, if you want to you can make it a 2x2 checkerboard of grey and magenta to be more obvious."
368248290,410,devshgraphicsprogramming,2020-01-18T21:01:21Z,ok but the proper struct?
368248342,410,devshgraphicsprogramming,2020-01-18T21:02:04Z,DWORD all caps
368252268,410,devshgraphicsprogramming,2020-01-18T22:30:11Z,"std::array has a `back()` method, we should have one too in `dynamic_array`"
368252390,410,devshgraphicsprogramming,2020-01-18T22:33:01Z,"why do you get rid of my `const auto&` or `auto&` so often?

We should be using it as often as possible to make sure accidental copy constructions don't happen."
368252858,410,devshgraphicsprogramming,2020-01-18T22:44:57Z,this is all fucked
368252925,410,devshgraphicsprogramming,2020-01-18T22:46:18Z,+1 not +count
368253028,410,devshgraphicsprogramming,2020-01-18T22:48:39Z,I should have called `prevBinding` `prevOffset` instead and it would be less misleading
368253204,410,Crisspl,2020-01-18T22:54:00Z,because its just pair of pointers and `const auto&` just holds rvalue retuned from `getBindings` because of lifetime expansion which seemed weird to me
368253474,410,Crisspl,2020-01-18T23:01:38Z,it already has
368253493,410,devshgraphicsprogramming,2020-01-18T23:02:24Z,"hmm ok, but most of the time we want to use `auto&` or `const auto&` because you can't see the type easily, I thought it was one of our containers."
368253509,410,devshgraphicsprogramming,2020-01-18T23:02:54Z,why not use it?
368253580,410,devshgraphicsprogramming,2020-01-18T23:04:31Z,wait what!? why all attachments? you're only gonna write to the first one with this pipeline!
368253589,410,devshgraphicsprogramming,2020-01-18T23:05:14Z,doesn't MTL support like way more ways to make stuff blendable? or is it only the opacity map?
368253637,410,Crisspl,2020-01-18T23:06:10Z,"idk, thats where all default assets are added and you started this :P"
368253685,410,devshgraphicsprogramming,2020-01-18T23:07:31Z,"still want all this crap in a struct, furthermore, the alignment of this will be all fucked up, vec3 is aligned like a vec4, I doubt the memory layout is the same in your C++ struct (better put one of the `float`s after each `vec3`)"
368253817,410,Crisspl,2020-01-18T23:11:00Z,`bindings` is `SRange` and not `dynamic_array`
368253978,410,devshgraphicsprogramming,2020-01-18T23:15:22Z,still need to use the a common brdf util header to get all the vectors (that common code I linked you).
368254044,410,devshgraphicsprogramming,2020-01-18T23:17:20Z,still relevant?
368254148,410,devshgraphicsprogramming,2020-01-18T23:20:09Z,that should definitely be inside the implementations!
368254155,410,devshgraphicsprogramming,2020-01-18T23:20:23Z,as with discord you will change to ~0u
368254235,410,devshgraphicsprogramming,2020-01-18T23:22:49Z,@Crisspl questions?
368254366,410,devshgraphicsprogramming,2020-01-18T23:25:59Z,related https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r368248021
368255356,410,devshgraphicsprogramming,2020-01-18T23:55:08Z,"I don't think I started this, I'm not a great fan of lambdas.

Only thing I remember is a default up and down streaming buffer.

OFC there was the 4 default materials/shaders that I've carried on from vanilla-irrlicht, but they started that (and you should nuke them, now! - replace with a default pipeline that does a textured, solid non opaque thing with no lighting).

Everything needs to move to IAssetManager or some more appropriate place within `irr::asset`

maybe to reduce clutter we should make a `IAssetManager::createBuiltinsBeforeLoaders` and `IAssetManager::createBuiltinsAfterLoaders` to call before and after the asset-loaders and registered and constructed."
368255515,410,devshgraphicsprogramming,2020-01-18T23:59:36Z,"Yes, because there's hacks that speed it all up, and you dont want to keep code DRY"
368255686,410,devshgraphicsprogramming,2020-01-19T00:04:31Z,still of the opinion textures (descriptor set) and fragment shader should be handled by MTL loader.
368255752,410,devshgraphicsprogramming,2020-01-19T00:06:02Z,"please for the love of god don't use numerical literals as stand-ins for sizes, always `sizeof` and of the correct struct type!"
368255764,410,devshgraphicsprogramming,2020-01-19T00:06:25Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/410/commits/e5efb2c43a0753ad6e5b5a755efd0ff3b3af0800#r368255752
368255879,410,devshgraphicsprogramming,2020-01-19T00:08:32Z,"we should be doing this programmatically, not from **magical** convention knowledge that desc-set 1 is being used with this particular layout, and in that layout there is a UBO that requires that particular struct (still useful to have the struct in C++ for power-user).

Would be good to build it from standardised pipeline metadata."
368255902,410,devshgraphicsprogramming,2020-01-19T00:09:24Z,"actually that's dangerous, shouldn't be touching parents in this chain"
368255957,410,devshgraphicsprogramming,2020-01-19T00:11:01Z,make it a dummy right away
368255985,410,devshgraphicsprogramming,2020-01-19T00:11:35Z,hmm actually don't
368256040,410,devshgraphicsprogramming,2020-01-19T00:13:01Z,"I don't think that struct and its methods belong in ""vertex"" utilities per-se (same could be used in fragment shaders, etc)."
368256149,410,devshgraphicsprogramming,2020-01-19T00:16:27Z,that said `IVideoDriver` (or CPU to GPU asset converter) could benefit from a method called `convertAllBuiltinsToGPU` for memory reclaiming
368305548,410,devshgraphicsprogramming,2020-01-19T16:20:43Z,still issue of why are you setting blending on all attachments!?
368305991,410,devshgraphicsprogramming,2020-01-19T16:27:37Z,why always false?
368306081,410,devshgraphicsprogramming,2020-01-19T16:29:25Z,why use numerical literals?
368306133,410,devshgraphicsprogramming,2020-01-19T16:30:35Z,"you should be caching these, as there is only so many permutations you can generate (plus they will be cloned and patched for vertex inputs anyway)."
368306205,410,devshgraphicsprogramming,2020-01-19T16:31:42Z,you're not using the override?
368306293,410,devshgraphicsprogramming,2020-01-19T16:33:33Z,still need that common builtin to get all the BRDF parameters
368306320,410,devshgraphicsprogramming,2020-01-19T16:33:58Z,wrap?
368306386,410,devshgraphicsprogramming,2020-01-19T16:35:04Z,your fragment shader code is not DRY
368306710,410,devshgraphicsprogramming,2020-01-19T16:40:42Z,"you also need to override the vertex shader ouputs, you can't have a dangling UV out."
368306787,410,devshgraphicsprogramming,2020-01-19T16:41:40Z,what about PBR shaders?
368314418,410,Crisspl,2020-01-19T19:03:09Z,why?
368314711,410,Crisspl,2020-01-19T19:07:35Z,"PBR shader exists for no reason and i can delete it just as well, its not used anywhere. All PBR params in MTL are non-standard (there's no `illum` in MTL that is using PBR params) and they are read and held in metadata just in case user wants to use them. "
368314730,410,Crisspl,2020-01-19T19:07:52Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r368314711
368314828,410,Crisspl,2020-01-19T19:09:37Z,"no, why would i? for what?"
368314877,410,Crisspl,2020-01-19T19:10:34Z,i think u need to read the code again
368315014,410,Crisspl,2020-01-19T19:12:25Z,"idk, fixed"
368315402,410,Crisspl,2020-01-19T19:19:43Z,"idk, seemed to me like a reasoneable default also for other attachments (i.e. blend params for all attachments are the same by default)"
368315491,410,Crisspl,2020-01-19T19:21:14Z,"yea, i didnt know where to put them. Another builtin loader?"
368317760,410,Crisspl,2020-01-19T19:58:44Z,of course
368318886,410,Crisspl,2020-01-19T20:15:32Z,">I doubt the memory layout is the same in your C++ struct

ofc it's not, it's glsl definition, i dont see a problem"
368318900,410,Crisspl,2020-01-19T20:15:45Z,">I doubt the memory layout is the same in your C++ struct

ofc it's not, it's glsl definition, i dont see a problem"
368318976,410,Crisspl,2020-01-19T20:16:39Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r368315402
368319038,410,Crisspl,2020-01-19T20:17:30Z,"ofc, im not a c++ newbie, i care about copying"
368319345,410,Crisspl,2020-01-19T20:20:50Z,so u want me to remove paths and clamp flags from metadata? now it's just because DS was created in OBJ loader before
368319577,410,Crisspl,2020-01-19T20:23:35Z,ok but why this c++ struct should have a particularly aligned address?
368320928,410,Crisspl,2020-01-19T20:40:14Z,fixed in today commit (not commited/pushed yet while writing this)
368321048,410,Crisspl,2020-01-19T20:41:58Z,"i dont understand how indirect draw buffer binding affects direct draw calls, but ok i'll revert this"
368321182,410,Crisspl,2020-01-19T20:44:04Z,"see newest commits and `asset_utils.h` file, this is very outdated"
368321205,410,Crisspl,2020-01-19T20:44:27Z,"see newest commits and `asset_utils.h` file, this is very outdated"
368323084,410,Crisspl,2020-01-19T21:09:17Z,"the c++ struct is in SMtl in CMTLPipelineMetadata
GLSL builtin done in todays commit"
368323238,410,Crisspl,2020-01-19T21:11:54Z,done in todays commit
368323270,410,Crisspl,2020-01-19T21:12:48Z,what is `cos` factor?
368323546,410,Crisspl,2020-01-19T21:17:52Z,"theres also constant opacity parameter, actually i could also taken into account if constant opacity `!=1.0`"
368323648,410,Crisspl,2020-01-19T21:19:26Z,done
368323747,410,Crisspl,2020-01-19T21:20:56Z,see `CMTLPipelineMetadata::SMtl::std140PackedData`
368323805,410,Crisspl,2020-01-19T21:21:38Z,will be until we fix reordering
368323881,410,Crisspl,2020-01-19T21:23:01Z,"or just different builtin include ""file""?"
368324073,410,Crisspl,2020-01-19T21:26:02Z,they're cached because they're retval of the loader. I can cache any more (more than preventing from `clone()` in OBJ loader) because each mtl file results in unique metadata
368457556,410,devshgraphicsprogramming,2020-01-20T09:57:27Z,"what about a thing called ""transmission"" or something like that which I saw in the structs/image map definitions?"
368459745,410,devshgraphicsprogramming,2020-01-20T10:01:38Z,don't enable blends on attachments that you don't need to (don't confuse the driver).
368460694,410,devshgraphicsprogramming,2020-01-20T10:03:30Z,"> or just different builtin include ""file""?

yeah, I guess something like `irr/builtin/glsl/`+`common/parameters/SBasicViewParameters`"
368461449,410,devshgraphicsprogramming,2020-01-20T10:05:02Z,"override always needs to be used (more accurately, passed through) when loaders call other loaders (don't call `interm_getAssetInHierarchy` directly) so the user/developer can intervene in the loading of textures and dependent resources."
368462421,410,devshgraphicsprogramming,2020-01-20T10:06:57Z,"ah right, unique metadata :("
368463035,410,devshgraphicsprogramming,2020-01-20T10:08:09Z,hmmm I was thinking PBR and non-PBR were duplicated.
368464675,410,devshgraphicsprogramming,2020-01-20T10:11:33Z,"> ofc it's not, it's glsl definition, i dont see a problem

It would be a problem if one decided to move the definition from a push constant to an UBO (for example, when rendering multiple materials at once with a single MDI call)

Want to be protected against alignment issues when using the same struct as PC, UBO and SSBO, furthermore even when the struct is a one off or packed in an array.

So ideally structs like this should pass both std140, std430 and be aligned to 16, as well as have their size be aligned to 16 (this protects against differences in layout when you have the struct nested in another as a simple member vs. an array member)"
368464985,410,devshgraphicsprogramming,2020-01-20T10:12:09Z,inline 
368465359,410,devshgraphicsprogramming,2020-01-20T10:12:52Z,also what's the convention on metadata upon conversion to dummy object?
368465824,410,devshgraphicsprogramming,2020-01-20T10:13:39Z,what does `insert` return? (just remind me)
368481626,410,devshgraphicsprogramming,2020-01-20T10:46:31Z,"because we need to assume that all the structs we ""share"" and make builtin; will be used to construct bigger things by extensions, other loaders and users.

Making this (and any other) struct aligned and of correct size (mult of 16), will prevent it from blowing up in our face when we decide to put it in different places, arrays, UBOs, SSBOs, PCs, etc. and the C++ won't match it byte for byte."
368481907,410,devshgraphicsprogramming,2020-01-20T10:47:05Z,"YES, well its redundant information at this point, if you already have the whole DS and DS layout."
368482574,410,devshgraphicsprogramming,2020-01-20T10:48:29Z,"ah fuck, you were right (I forgot that non indirect does not get affected)... revert the revert"
368482744,410,devshgraphicsprogramming,2020-01-20T10:48:52Z,?
368483037,410,devshgraphicsprogramming,2020-01-20T10:49:36Z,"yes, and then it throws according to C++ spec?"
368483976,410,devshgraphicsprogramming,2020-01-20T10:51:38Z,glsl code seemed to repeat itself (might be due to presence of PBR shader)
368484695,410,devshgraphicsprogramming,2020-01-20T10:53:21Z,"nice but the MTL GLSL built-in stuff (as a class) should be together with the MTL loader and added to the built-ins in the MTL loader's constructor.

Same for all future loaders."
368485229,410,devshgraphicsprogramming,2020-01-20T10:54:31Z,don't call PushConstants (can place in UBO or SSBO for large render systems) prefer MaterialParameters instead.
368485400,410,devshgraphicsprogramming,2020-01-20T10:54:55Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410/commits/b1d3c014377aca2b27180257bddb469a984bee7f#r368484695
368486433,410,devshgraphicsprogramming,2020-01-20T10:57:06Z,"yes, the UV frag and non-UV frag (both non-PBR) BRDF code repeats itself."
368487007,410,devshgraphicsprogramming,2020-01-20T10:58:22Z,especially that you've hardcoded the light to be at the camera position (something we want easily overridable)
368488120,410,devshgraphicsprogramming,2020-01-20T11:00:47Z,"you need to build the `brdf_cos_eval` out of normalized BRDFs, so ones where `BRDF*cos(theta)` integrated over a hemisphere sums up to 1.0"
368489555,410,devshgraphicsprogramming,2020-01-20T11:04:04Z," the `Kd` needs to be divided by PI and two functions need to be added to our engine-global BRDF headers
- `lambertian_cos_eval_rec_pi_factored_out`
- `lambertian_cos_eval`

```glsl
float lambertian_cos_eval_rec_pi_factored_out(....params)
{
   return params.NdotL;
}

float lambertian_cos_eval(....params)
{
   return lambertian_cos_eval_rec_pi_factored_out(params)*IRR_CORE_RECIPROCAL_PI;
}
```"
368490992,410,devshgraphicsprogramming,2020-01-20T11:07:34Z,always put the fresnel in (is the Titanfall fresnel renormalization factor applicable ? )
368491694,410,devshgraphicsprogramming,2020-01-20T11:09:15Z,"+ do it as a proper mix, so the more fresnel weight on specular, the less diffuse (ambient is equally reflected by diffuse and specular, so fresnel won't affect it and it can be just ""added"" afterwards - don't make it part of diffuse)"
368492004,410,Crisspl,2020-01-20T11:10:03Z,nothing happens with metadata 
368492189,410,Crisspl,2020-01-20T11:10:32Z,true if it was successfully inserted
368495546,410,devshgraphicsprogramming,2020-01-20T11:19:12Z,"proper normalization for Blinn Phong (and Blinn-Phong is the power of NdotH, no reflected light taken into account) is:

http://www.thetenthplanet.de/wordpress/wp-content/ql-cache/quicklatex.com-2d0a4b11f468b78df180f17430b93f31_l3.svg


(the thing in the middle of the inequality is the actual factor)
"
368503786,410,devshgraphicsprogramming,2020-01-20T11:40:47Z,NdotL
368505350,410,Crisspl,2020-01-20T11:44:24Z,why inside them?
368510631,410,devshgraphicsprogramming,2020-01-20T11:57:52Z,optimization (blender cycles has it like that too).
368510883,410,devshgraphicsprogramming,2020-01-20T11:58:33Z,"hmm ok, we might want to revist that in the far future."
368510983,410,devshgraphicsprogramming,2020-01-20T11:58:49Z,thx.
368521789,410,Crisspl,2020-01-20T12:26:46Z,"of course they are, they are different shaders"
368526449,410,Crisspl,2020-01-20T12:38:42Z,override was never used directly in loader to load assets. Thats what `interm_getAssetInHierarchy` is for. Then loader override is used by `IAssetManager::getAssetInHierarchy()`. However u're right i should be using overload of `interm_getAssetInHierarchy` that let u pass loader override ptr (fixed in next commit)
368541193,410,devshgraphicsprogramming,2020-01-20T13:15:40Z,"you can make the non-UV version be an override of the UV version, you only need to redefine/override the main/lighting function to not gather the parameters from textures and the FRAGMENT_INPUTS section + delete (just `#define _IRR_FRAG_SET3_BINDINGS_DEFINED_` without anything extra) the descriptor set 3 inputs"
368542407,410,devshgraphicsprogramming,2020-01-20T13:18:24Z,yeah I mean use the function and pass `override` to it
368548847,410,Crisspl,2020-01-20T13:32:47Z,thats exactly what it is for a few days now
368549093,410,Crisspl,2020-01-20T13:33:19Z,i dont know what repeats u're talking about then
368863867,410,devshgraphicsprogramming,2020-01-21T08:29:18Z,`dGdScreen` should be a `mat2x3`
368957697,410,devshgraphicsprogramming,2020-01-21T11:52:45Z,"treat `dFdG` like a mat1x3, so `dFdG*dGdScreen` needs to change to a `vec2(dot(dFdG,dGdScreen[0]),dot(dFdG,dGdScreen[1]))`"
368963621,410,devshgraphicsprogramming,2020-01-21T12:07:40Z,thats why it doesnt compile cause that function is not defined (commented out) XD
369049784,410,devshgraphicsprogramming,2020-01-21T14:57:39Z,"still, why the if and not the switch directly?"
369053850,410,devshgraphicsprogramming,2020-01-21T15:04:13Z,"ambient does not go into the BRDF cos-eval function, its basically an extra light (and you assume the BSDF passes white furnace test )m so put it into light eval function"
369054562,410,devshgraphicsprogramming,2020-01-21T15:05:27Z,"don't you remember our PBR BRDF explorer, everything gets done in terms of `VdotH` (or `LdotH` same thing) so its symmetrical!

this is why I insisted on providing and using builtins so one can't fuck this up."
369054787,410,devshgraphicsprogramming,2020-01-21T15:05:51Z,diffuse get from a lambertian header (needs the 1/PI factor)
369055083,410,devshgraphicsprogramming,2020-01-21T15:06:19Z,you need a header with normalized phong and use it here.
369055365,410,devshgraphicsprogramming,2020-01-21T15:06:45Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/410/commits/ea042d14e1e4dc99f03fda74dd3fd1057ece7a45#r369054562
369055531,410,devshgraphicsprogramming,2020-01-21T15:07:01Z,"nromalize the specular, again."
369056479,410,devshgraphicsprogramming,2020-01-21T15:08:41Z,"The ""ambient"" is not a extra light factor added to the current light with its own direction, ambient is an area light coming from all directions, hence ambient is unaffected by fresnel (if you assume fresnel passes white furnace, which it should)."
369057072,410,devshgraphicsprogramming,2020-01-21T15:09:41Z,why would it be computed twice?
369057565,410,devshgraphicsprogramming,2020-01-21T15:10:30Z,shouldn't most of the scope of this if-statement come form a builtin?
369057933,410,devshgraphicsprogramming,2020-01-21T15:11:03Z,`computeLighting` is actually supposed to call the `irr_bsdf_cos_eval` function
369058347,410,devshgraphicsprogramming,2020-01-21T15:11:43Z,"in the per-shader built-ins (which are not in built-in GLSL headers) you gon't need to prefix the names with `irr_glsl_`, just `irr_` will do"
369064301,410,devshgraphicsprogramming,2020-01-21T15:21:28Z,"ugh, I made a mistake, guiding you this way.
`mix` is inappropriate.

Actually diffuse should be symmetrical, so its two fresnels! (just like in BRDF explorer from last summer)

One with `LdotH` and another with `VdotH` and the correction factor.

Then the specular has its own fresnel factored in, and you add that to a diffuse modulated by fresnel diffuse factor (with correction).

P.S. ambient shouldn't be there."
369065139,410,devshgraphicsprogramming,2020-01-21T15:22:47Z,"you shouldn't be evaluating the lighting (even the attentuation or intensity) inside the `main` function, all lights need to be wholly evaluated inside `irr_bsdf_cos_eval`."
369075945,410,devshgraphicsprogramming,2020-01-21T15:40:00Z,"(facepalm) the alpha (opacity) is `Fresnel(Ni, NdotV)`, why on earth would the fresnel transmittance depend on your light position? Its only the view position that determines how much you can see through.

P.S. This means that your blending equation needs to be a premultiplied alpha one (different fresnel factors on reflected color than just simply `1-transmission`), so pipeline needs blend state equivalent to:
```cpp
glBlendEquationSeparate(GL_FUNC_ADD, GL_FUNC_ADD);
glBlendFuncSeparate(GL_ONE, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
```"
369079752,410,devshgraphicsprogramming,2020-01-21T15:46:01Z,the BRDF code now.
369079873,410,devshgraphicsprogramming,2020-01-21T15:46:11Z,done?
369157289,410,Crisspl,2020-01-21T18:04:40Z,"no, i meant this function doesnt  compile. The shader compiles BECAUSE it's commented out. It's not used anyway but shaderc still tries to compile it"
369175258,410,Crisspl,2020-01-21T18:41:16Z,"hm, then i'd say we shouldnt normalize `L` vector in `irr_glsl_calcBSDFIsotropicParams()` because otherwise `irr_bsdf_cos_eval()` has no way to take distance from light"
369190488,410,Crisspl,2020-01-21T19:12:20Z,or better: normalize but add field `invlenL2` to structure 
369199885,410,Crisspl,2020-01-21T19:31:37Z,">One with LdotH and another with VdotH and the correction factor.

that actually would mean i can multiply just of those by 2 and get the same. Did you mean `NdotL` and `NdotV`? (thats how we do in brdf explorer)"
369215916,410,Crisspl,2020-01-21T20:04:55Z,"user might want to use parameters got from `irr_glsl_calcBSDFIsotropicParams` (called in `computeLighting`), just like in this case. So im making `out irr_glsl_BSDFIsotropicParams params` parameter for `computeLighting`, ok?"
369250871,410,devshgraphicsprogramming,2020-01-21T21:25:22Z,well you need to uncomment irr_glsl_applyScreenSpaceChainRule3D3 and define it and it will work.
369251837,410,devshgraphicsprogramming,2020-01-21T21:27:33Z,but you know the `L` you've passed to irr_glsl_calcBSDFIsotropicParams as input ;) thats not getting modified.
369269138,410,devshgraphicsprogramming,2020-01-21T22:07:15Z,"> user might want to use parameters

for what exactly?

but irr_glsl_BSDFIsotropicParams gives you BRDF parameters for a particular light interaction, and `computeLighting` will compute the interactions with many lights!"
369269492,410,devshgraphicsprogramming,2020-01-21T22:08:09Z,"yeah both NdotL and NdotV for diffuse

only HdotL for specular"
369290488,410,Crisspl,2020-01-21T23:01:47Z,"yes, but i dont know it inside `bsdf_cos_eval`. If u want attenuation factor in `irr_bsdf_cos_eval` then length of L must be known in there. As for now i made `invlenL2` field in the struct, will commit in up to 1h"
369291462,410,Crisspl,2020-01-21T23:04:44Z,">for what exactly?

now it's used to compute alpha (illum models 4,6,7,9)

>computeLighting will compute the interactions with many lights!

oh, right... any ideas?"
369292262,410,Crisspl,2020-01-21T23:07:09Z,you know what is `n`? i found original article u took the latex from and even the normalization factor derivation paper and nobody defines `n`!
369292776,410,Crisspl,2020-01-21T23:08:48Z,"idk, i wouldnt even think about it XD sorry"
369297174,410,devshgraphicsprogramming,2020-01-21T23:22:02Z,"attenuation of a light is not part of a BRDF/BSDF, I thought that was clear?"
369297463,410,devshgraphicsprogramming,2020-01-21T23:22:55Z,"you can return the surface interaction, but not the BRDF params ;)"
369297697,410,devshgraphicsprogramming,2020-01-21T23:23:36Z,"n is the specular power, IIRC  (`params.Ns`)"
369301423,410,Crisspl,2020-01-21T23:36:14Z,"yea, I know, turns out I misunderstood your requirements"
369303252,410,devshgraphicsprogramming,2020-01-21T23:42:32Z,"`brdf_cos == BRDF()*cos(theta)`

BRDF only has the material's probability of reflecting incoming photons in a given direction

cos(theta)/LightDistance2 is the solidAngle factor for a point light (how small it appears at a given angle and distance - its an oxymoron cause point light doesn't have a size, but for a small disk that's what it would be) "
369303453,410,devshgraphicsprogramming,2020-01-21T23:43:19Z,"area lights, line lights, environment maps, etc. they have different solidAngle factors (albeit all include `cos(theta)` thats why we put it in `brdf_cos` functions)"
369456815,410,devshgraphicsprogramming,2020-01-22T09:44:27Z,use and provide a built-in/constant for `PI` and `RECIPROCAL_PI` (`irr_glsl_` prefix required too)
369457324,410,devshgraphicsprogramming,2020-01-22T09:45:31Z,do `dPdScreen` as a `mat2x3` and `dhDScreen` as a `vec2`
369457968,410,devshgraphicsprogramming,2020-01-22T09:46:46Z,"this is ambient, ambient does not go into BRDF"
369458461,410,devshgraphicsprogramming,2020-01-22T09:47:46Z,and provide from a bsdf/brdf built-in header as a cook-torrance-like function (so fresnel goes inside)
369458919,410,devshgraphicsprogramming,2020-01-22T09:48:39Z,light parameters are not part of BRDF
369459956,410,devshgraphicsprogramming,2020-01-22T09:50:40Z,"wrong, its a fresnel on `VdotN` (which is in the `interaction`)"
369461592,410,devshgraphicsprogramming,2020-01-22T09:53:48Z,if you use a non-fresnel alpha (comes from `params.d` or texture) then I'd modulate the ambient in the light eval and the diffuse in the `brdf_cos_eval` by it (even though that approach is not exactly PBR) in all the lighting models.
369462754,410,devshgraphicsprogramming,2020-01-22T09:55:55Z,"maybe you wouldn't need two reimplementations of `irr_bsdf_cos_eval` if you created an `irr_fetch_material_parameters` and delegated the choice of fetching `Ka,Ks,Ns` from texture or constants and normal/bump mapping to that function instead"
369463119,410,devshgraphicsprogramming,2020-01-22T09:56:36Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r369075945
369463771,410,devshgraphicsprogramming,2020-01-22T09:57:50Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r369303453
369472090,410,devshgraphicsprogramming,2020-01-22T10:13:11Z,"built it more like
https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r368489555

I want the built-in BRDF/BSDF functions to provide the `irr_glsl_*model_name*_cos_eval` function and 2 others (build more)"
370999560,410,devshgraphicsprogramming,2020-01-26T13:43:12Z,"wait, what's going on?"
371007135,410,Crisspl,2020-01-26T15:22:10Z,"nothing, just deleted code not used any more"
373099792,410,Crisspl,2020-01-30T17:51:29Z,solved with a simple `#ifndef _NO_UV`
373123008,410,Crisspl,2020-01-30T18:39:17Z,"no, only in case of offset parameters, lengths are taken care of. https://en.cppreference.com/w/cpp/string/basic_string/compare variant (5)

>Compares a [pos1, pos1+count1) substring of this string to the null-terminated character sequence beginning at the character pointed to by s with length Traits::length(s) **If count1 > size() - pos1 the substring is [pos1, size()).**"
373180102,410,Crisspl,2020-01-30T20:36:06Z,"yea, i wrongly understood this ""transmission filter"" before (now it's not used anyway though). Look at `8  Real windshield` at http://paulbourke.net/dataformats/mtl/ . I don't really understand what does it mean that ""the material is not dissolved"" but ""filters of 
colorizes objects that are seen through it"" at the same time. Should assume that the material is fully transparent as soon as `Tf` is defined in MTL, but use some constant non-zero alpha for blending framebuffer color with `Tf` (transmission filter) color?"
373187838,410,Crisspl,2020-01-30T20:53:48Z,"won't it be problematic when every function has NdotL inside? For example in case of cook-torrance-like thing, when both ndf and geometric term includes NdotL, then i'm getting specular factored by NdotL^2. Sorry, i dont get your idea about cos factor inside, could u explain more?"
373189673,410,Crisspl,2020-01-30T20:57:37Z,"do you mean another function that looks like
```
float f(...)
{
   return normalized_blinn_phong(...)*fresnel(...);
}
//+ another one for fresnel from complex ior
```
?"
373198152,410,devshgraphicsprogramming,2020-01-30T21:17:25Z,why is it not working with const anymore?
373198570,410,devshgraphicsprogramming,2020-01-30T21:18:24Z,include the normalization factor here.
373199099,410,devshgraphicsprogramming,2020-01-30T21:19:36Z,why is the loader in the front-end includes?
373200268,410,devshgraphicsprogramming,2020-01-30T21:22:13Z,?
373205471,410,devshgraphicsprogramming,2020-01-30T21:34:26Z,this is debug rihgt?
373205964,410,devshgraphicsprogramming,2020-01-30T21:35:42Z,pretty much.
373211881,410,devshgraphicsprogramming,2020-01-30T21:49:22Z,"The lighting integral (for a point) is
`Integrate_over_Hemisphere{IncomingLightDistribution(lightDirection)*BRDF(observer,lightDirection,parameters)*cos(lightDirection),over all light directions}`

The idea is that we split the integrand into two parts, one of which is the BRDF and foreshortening term (NdotL), the other is the light distribution.

We want to split that integral in 2 not 3 so `cos(theta)` has to go together with something, either the Light Distribution or the BRDF.

This is a good heuristic for Multiple Importance Sampling, as we'll be sometimes sampling (picking directions) the points on area lights and sometimes the BRDFs (directions with highest values).

Problem is that lights are well defined shapes which don't have nice contours on a hemisphere, and its hard to compute their areas (solid angles) as a function of (u,v) coordinates so its insanely hard to invert such a function to get uniform sampling. So just Importance Sampling an integrand close to 1 is near impossible for most shapes because of the contours of the integration domain, let alone when an integrand is cos(theta).

So far Triangles without the foreshortening (projection) are the only shape you can Importance Sample on a sphere under arbitrary transformations.

Furthermore Squares, Elliptical Disks are only sampleable without a transform that includes shear.

Finally Cylinders and Spheres are only sampleable without a transform that includes shear or non-uniform scale.

Only one paper mentions sampling ""projected"" spherical caps (with the `cos` term).


So overall it makes more sense to stick the `cos` together with the BRDF, especially since for Cook-Torrance there is already a `4*NdotL*NdotV` in the denominator, so it will cancel out."
373212325,410,devshgraphicsprogramming,2020-01-30T21:50:20Z,"Funny cause that same page says **Exceptions** and notes that it will throw is `pos1` is out of range.

So check and avoid a throw."
373213537,410,devshgraphicsprogramming,2020-01-30T21:53:07Z,what's going on here?
373214666,410,devshgraphicsprogramming,2020-01-30T21:55:32Z,?
373215147,410,devshgraphicsprogramming,2020-01-30T21:56:36Z,?
373217711,410,devshgraphicsprogramming,2020-01-30T22:02:30Z,"well that spec is so badly written I have no idea what it was supposed to stand for.

My guess would be some sort of attenuation value per-unit-thickness-of-object.

So you're bascailly looking at
```glsl
outColor.rgb = mix(src.rgb,dst.rgb,exp2(unitConversionConstant*Tf*thickness));
```
It would be possible to implement with ""dual source blending"", but obviously no idea what the resultant alpha should be.

Since its impossible to render in a raster pipeline and only using a ""sane"" 3 or 4 channel single attachment framebuffer, we shoudl issue a warning that this parameter and light model has been detected, fall-back to something useful, but still populate the descriptor set with the correct image/texture and provide as much data in the metadata as possible."
373269368,410,Crisspl,2020-01-31T00:46:46Z,"`pos1` is first param so it makes sense to check in case we assume there might be `_glsl` string with no '#' in it. If thats what u meant i just got confused by ""(that you still have 8 characters in the string left)"""
373279479,410,Crisspl,2020-01-31T01:29:24Z,just deleted some commented-out code i should have deleted a while ago
373279518,410,Crisspl,2020-01-31T01:29:30Z,yea XD
373279958,410,Crisspl,2020-01-31T01:31:13Z,"i dont understand. u mean in `include/`? it's not, irrlicht target just have `src/` in include search dirs, it's nothing new"
373280333,410,Crisspl,2020-01-31T01:33:00Z,because there must be a way to `getGLSLCompiler()->getIncludeHandler()->addBuiltinIncludeLoader(...)`
373666971,410,devshgraphicsprogramming,2020-01-31T20:16:25Z,"bascailly make sure that it does not throw no matter what `_glsl` string we pass to it, empty or shorter than 8 characters, etc."
373667153,410,devshgraphicsprogramming,2020-01-31T20:16:52Z,I see.
373667268,410,devshgraphicsprogramming,2020-01-31T20:17:11Z,I see.
373667681,410,devshgraphicsprogramming,2020-01-31T20:18:16Z,vec3 ior?
373671510,410,devshgraphicsprogramming,2020-01-31T20:28:49Z,you can get that from isotropic paramters I think?
373785288,410,Crisspl,2020-02-01T15:22:59Z,"thats the whole point of it that i cant get isotropic parameters in main()
https://github.com/buildaworldnet/IrrlichtBAW/pull/410#discussion_r369297463"
373785316,410,Crisspl,2020-02-01T15:23:44Z,fresnel_dielectric takes ior as a single value
374051186,410,devshgraphicsprogramming,2020-02-03T11:27:08Z,"maybe we should add `byteSize` to augment the `relByteOffset`  of the `shdrIn.descriptorSection.uniformBufferObject` ?

Then you wouldn't need all the matrix size constants above."
374051635,410,devshgraphicsprogramming,2020-02-03T11:28:19Z,"why are you even bothering with CPU objects here, just create GPU descriptor set nr. 1 directly."
374054028,410,devshgraphicsprogramming,2020-02-03T11:34:18Z,"ok, but there's really no reaon for it to not support a per-RGB channel ior value (the fresnel function itself)"
374054579,410,devshgraphicsprogramming,2020-02-03T11:35:42Z,"yeah, you're right about the comment, although I should make a note to myself to optimize after I merge (`VdotN` could be stored in the surface interaction, since its the same for every light)"
374060457,410,devshgraphicsprogramming,2020-02-03T11:50:33Z,there's no `core::matrix3x4SIMD::pointer()` ?
374065813,410,devshgraphicsprogramming,2020-02-03T12:04:42Z,I think your condition is a typo here.
374067243,410,devshgraphicsprogramming,2020-02-03T12:08:18Z,"Also why is a cubemap in descriptor set 3?
Should be at least 2 or 1."
374067639,410,devshgraphicsprogramming,2020-02-03T12:09:16Z,"btw the already provided inputs (push constants, material textures) shouldn't be in this metadata."
374068319,410,devshgraphicsprogramming,2020-02-03T12:11:01Z,is it clear?
374069645,410,devshgraphicsprogramming,2020-02-03T12:14:25Z,this should be added onto the end return value of `irr_computeLighting`
374069677,410,devshgraphicsprogramming,2020-02-03T12:14:30Z,just multiply `color` by it here.
374070270,410,devshgraphicsprogramming,2020-02-03T12:16:08Z,still a TODO
374074573,410,devshgraphicsprogramming,2020-02-03T12:27:04Z,?
374074854,410,devshgraphicsprogramming,2020-02-03T12:27:45Z,did you move this?
374075444,410,devshgraphicsprogramming,2020-02-03T12:29:09Z,did you implement the warning and fallback?
374075580,410,devshgraphicsprogramming,2020-02-03T12:29:32Z,Make a mental note of this for next PR.
374119974,410,Crisspl,2020-02-03T14:06:25Z,"yea, well im not sure why lagarde made it like this, i'm making it vec3"
374123909,410,Crisspl,2020-02-03T14:14:00Z,">I think your condition is a typo here.

no, it's ok. why?

>Also why is a cubemap in descriptor set 3? Should be at least 2 or 1.

what why?

>btw the already provided inputs (push constants, material textures) shouldn't be in this metadata.

oh, ok, fine"
374126152,410,Crisspl,2020-02-03T14:18:18Z,yea
374132168,410,Crisspl,2020-02-03T14:28:52Z,"kinda, i guess, check out what i have now (blinn_phong, lambertian, oren_nayar cos_eval functions). I dont really know what is this incoming light distribution part. Also i guess u'd like more `cos_eval` functions as builtins, i dont know which ones"
374152326,410,Crisspl,2020-02-03T15:03:20Z,">what why?

so should i have path to refl map in metadata instead + ECSI_ entry?"
374165056,410,devshgraphicsprogramming,2020-02-03T15:24:42Z,because he optimized to extremes
374166062,410,devshgraphicsprogramming,2020-02-03T15:26:15Z,"> no, it's ok. why?

Oh its just a badly named enum

> what why?

Does MTL provide the cubemap or does the user provide the cubemap?"
374171328,410,Crisspl,2020-02-03T15:34:51Z,"MTL provides cubemap

> Oh its just a badly named enum

a little, `EMP_REFL_POSX`, `EMP_REFL_NEGX`, etc.. are for loading images (see `CGraphicsPipelineLoaderMTL::readTexture()`), then resulting cubemap image view goes to index `[EMP_REFL_POSX]` of array resulting from `CGraphicsPipelineLoaderMTL::loadImages()`"
374181343,410,devshgraphicsprogramming,2020-02-03T15:51:25Z,"great then we don't need the cubemap in the pipeline metadata

That standardised metadata is only for things we need to provide to make the shader work (not to change it a bit)."
374191556,410,Crisspl,2020-02-03T16:07:59Z,"well, if u want it to be in set 1 or 2 then sure we do"
374194522,410,devshgraphicsprogramming,2020-02-03T16:13:02Z,"well since MTL provides the environment map, it can be in set 3
"
374201989,410,Crisspl,2020-02-03T16:25:51Z,"yea, in upcoming commit"
374540497,410,devshgraphicsprogramming,2020-02-04T08:51:47Z,perfectly valid solution for default CPU to GPU asset converter
374540777,410,devshgraphicsprogramming,2020-02-04T08:52:25Z,this can remain a float (all three channels are identical)
374575951,410,devshgraphicsprogramming,2020-02-04T10:02:41Z,maybe sizeof the matrix types?
374576073,410,devshgraphicsprogramming,2020-02-04T10:02:56Z,or sizeof the struct members?
374579363,410,devshgraphicsprogramming,2020-02-04T10:09:19Z,I repeat the question
374587295,410,devshgraphicsprogramming,2020-02-04T10:24:30Z,"> I dont really know what is this incoming light distribution part. 

ITs the shape all the lights make or an environment map (for IBL) basically 

BRDF + cos functions I want:
- Lambertian
- Orren Nayar
- Smooth Specular (basically delta distribution given by `reflect` weighted by complex IoR Fresnel)
- Normalized Phong with Fresnel
- GGX with Correlated Smith Shadowing (same stuff as BRDF eXplorer)
- Beckmann with the best geometry term you can find
- Ashkhim Shirley anisortopic with the best geometry term you can find

BSDF + cos functions (not in this PR):
- Smooth Dielectric (Basically two delta distributions with centers given by `reflect` and `refract`, mixed together by the fresnel)
- Thin Dielectric (No refraction, but need to account for multiple fresnel and color shift)
- Rough Dielectric with GGX
- Rough Dielectric with Beckmann
- Rough Dielectric with Ashkhin Shirley

P.S. for Ahskmin Shirley anisotropic use roughnesses (invert them like in BRDF explorer), and for Phong invert the roughness into the specular exponent."
375436916,410,Crisspl,2020-02-05T18:41:54Z,"oh, ok then"
375463948,410,Crisspl,2020-02-05T19:33:18Z,"yea, i figured out how to use it and made use of `calculateSmoothNormals()`"
375770508,410,devshgraphicsprogramming,2020-02-06T11:02:17Z,?
375771608,410,devshgraphicsprogramming,2020-02-06T11:05:09Z,so what's this lambda still doing here?
375773314,410,devshgraphicsprogramming,2020-02-06T11:09:04Z,?
375952102,410,Crisspl,2020-02-06T16:45:25Z,">Smooth Specular (basically delta distribution given by reflect weighted by complex IoR Fresnel)

what is delta distribution?"
375961665,410,Crisspl,2020-02-06T17:01:22Z,"sorry, didnt push yesterday"
375962572,410,Crisspl,2020-02-06T17:02:52Z,IMO would seem a little weird that shader is builtin in the cache and other components of retval are not
375962836,410,Crisspl,2020-02-06T17:03:18Z,"done, no more cpu ubo"
376037666,410,devshgraphicsprogramming,2020-02-06T19:31:26Z,"# Was is Das

https://en.wikipedia.org/wiki/Dirac_delta_function#As_a_distribution

Basically its 0 everywhere except at the center, at the center its undefined (you can return INF if argument==center).

As a probability distribution it means there is 0 probability of getting any other random value than the center one, so your `sample` BRDF function should always return the center coordinate with a probability weight of `max(cos(theta),0.0)` (original BRDF / probability of sampling = delta/delta = 1, but then remember its `brdf_cos`).

The most important part is the sampling property, you stick it as a product with another function inside any integral, the solution is the other function's value at the center of the dirac delta (without any gain or loss).

This means that a mirror is a delta distribution centered around the reflected view-vector, so it basically tells you to sample the light distribution in only one place (the exact reflection).

A smooth dielectric is two deltas, one at reflection vector, one at refraction vector, but they obviously have to be weighted together by the fresnel (not that it matters for the eval function).

# More In Depth About Sampling Multiple Deltas

However when sampling, you need to compute fresnel, and pick either to reflect or refract based on the input random value (use only one dimension).

You can use the symmetry property of the BSDF and notice that it has to have the same values when you switch the observer and the light positions around, so it is possible to ""find"" the centers of the deltas given a viewer position.

For a dielectric, there is the reflection where`NdotH` has to be 0, so H=N, and therefore L=-V

The refraction you can also calculate in reverse (I'd do your own function instead of calling `refract`).
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/refract.xhtml

Due to symmetry, you can know the fresnel on a smooth dielectric by just knowing the viewer position (fresnel of `NdotV` will be the same as fresnel of `NdotL`, since V fixes reflective and refractive L vectors, and reflective fresnel fixes the transmittance).

Best choice is to pick to refract when `randomSample.x>Fresnel` then the probability of picking the refracted ray is `1.0-Fresnel` and reflected is `Fresnel` which is exactly the same as their weights in the BSDF meaning that for the probability weight of the sampling function they cancel out and you return `abs(cos(theta),0.0)` (for BSDFs the foreshortening term is abs not max).

"
376039288,410,devshgraphicsprogramming,2020-02-06T19:34:45Z,"ok lets leave it, FS triangles are dumb to use anyway (now that we have COMPUTE)"
376039725,410,devshgraphicsprogramming,2020-02-06T19:35:39Z,does smith height correlated that we use with GGX make sense with beckmann?
376040015,410,devshgraphicsprogramming,2020-02-06T19:36:12Z,"when OBJ has smooth groups, are you even supposed to check for crease angle?"
376159941,410,Crisspl,2020-02-07T00:39:04Z,"hm good point, probably not"
376180490,410,Crisspl,2020-02-07T02:01:18Z,"erm no idea actually, how do i check?"
376190809,410,devshgraphicsprogramming,2020-02-07T02:47:55Z,you just return 0.0 all the time
376190856,410,devshgraphicsprogramming,2020-02-07T02:48:07Z,return 0.0 all the time
376208575,410,devshgraphicsprogramming,2020-02-07T04:22:28Z,https://www.google.com/search?sxsrf=ACYBGNRxf-fDA8g4JKG157ge5izXRbUgFA%3A1581049323375&ei=6-U8XvyvFsHdwALT1rWABg&q=smith+masking+shadowing+beckmann&oq=smith+masking+shadowing+beckmann&gs_l=psy-ab.3...6643.8324..8562...0.2..0.167.1222.0j9......0....1..gws-wiz.......0i71j0i22i30j33i160.brAsgFOVqUw&ved=0ahUKEwi80aray77nAhXBLlAKHVNrDWAQ4dUDCAs&uact=5
376208593,410,devshgraphicsprogramming,2020-02-07T04:22:36Z,http://jcgt.org/published/0003/02/03/paper.pdf
376209649,410,devshgraphicsprogramming,2020-02-07T04:28:10Z,"Skip straight to section 6
"
376210416,410,devshgraphicsprogramming,2020-02-07T04:32:37Z,"where you can find 

Height Correlated:
https://www.researchgate.net/profile/Guy_Potvin/publication/7467199_Detailed_analytical_approach_to_the_Gaussian_surface_bidirectional_reflectance_distribution_function_specular_component_applied_to_the_sea_surface/links/554fdf6b08ae956a5d246a1e/Detailed-analytical-approach-to-the-Gaussian-surface-bidirectional-reflectance-distribution-function-specular-component-applied-to-the-sea-surface.pdf

Heitz Weird Shit:
https://hal.archives-ouvertes.fr/hal-00840796/document"
376215567,410,devshgraphicsprogramming,2020-02-07T05:02:20Z,"Basically smith height correlated function always has the same form
`1/(1+\biglambda(\omega_o)+\biglambda(\omega_i))`

Its just that for a different NDF, the `\biglambda` is different (first paped pdf I linked quotes Walter 2007 for a rational approximation of this function for Beckmann)

P.S. We might want to upgrade to Height-Direction-Correlated Masking and Shadowing at some point"
376217783,410,devshgraphicsprogramming,2020-02-07T05:15:09Z,`a==NdotSomething*inversesqrt(1-NdotSomething*NdotSomething)/(alpha)` instead of `a==1/(alpha*tan(acos(NdotSomething))`
376219214,410,devshgraphicsprogramming,2020-02-07T05:23:38Z,put the Walter approximation into a symbolic manipulation package (whatever we used for the fresnel correction last time) and let it simplify it for an equation in terms of `alpha` and `NdotSomething`
376614223,410,Crisspl,2020-02-07T21:24:20Z,what XD well thats fine
376642209,410,devshgraphicsprogramming,2020-02-07T22:44:34Z,"yeah basically if you wanted to be anal about it you'd return `params.NdotH!=1.0 ? 0.0:FLT_INF`

but there's no point in doing that except to waste GPUs time."
376645786,410,devshgraphicsprogramming,2020-02-07T22:56:21Z,"we factored out the denominator from the denominator for GGX.

Just like you should do here (albeit not by hand, use SageMath to simplify `1.0/((1.0+L_v+L_l)*4.0*params.NdotV)` in terms of `NdotV` and `NdotL`, so we have a `irr_glsl_ggx_smith_height_correlated_wo_numerator`)"
376675414,410,Crisspl,2020-02-08T01:32:17Z,"well, i guess sage is bad at this XD
for this
```
sage: var('a,nv,nl')
sage: C(d,a) = d/(a*sqrt(1.0-d*d))
sage: L(c) = (0.396*c*c - 1.259*c + 1.0)/(2.181*c*c + 3.535*c)
sage: bs = 1.0/(1.0 + L((C(nv,a)) + L(C(nl,a))) * 4.0 * nv)
bs.full_simplify()
```
i get
```
((-340.5754492056132*a^10 + 3033.953424711557*a^8 + 2077.084913817077*a^6 + 129.6114934600012*a^4 - 76.820398842161*a^2)*nl^32 + (5449.207187289811*a^10 - 45509.30137067335*a^8 - 29079.18879343909*a^6 - 1684.949414980016*a^4 + 921.844786105932*a^2)*nl^30 + (-40869.05390467359*a^10 + 318565.1095947134*a^8 + 189014.7271573541*a^6 + 10109.69648988009*a^4 - 5070.146323582626*a^2)*nl^28 + (190722.2515551434*a^10 - 1380448.808243758*a^8 - 756058.9086294165*a^6 - 37068.88712956033*a^4 + 16900.48774527542*a^2)*nl^26 + (-619847.317554216*a^10 + 4141346.424731274*a^8 + 2079161.998730895*a^6 + 92672.21782390073*a^4 - 38026.0974268697*a^2)*nl^24 + (1487633.562130118*a^10 - 9110962.134408802*a^8 - 4158323.997461791*a^6 - 166809.9920830213*a^4 + 60841.75588299151*a^2)*nl^22 + (-2727328.19723855*a^10 + 15184936.8906813*a^8 + 6237485.996192686*a^6 + 222413.3227773617*a^4 - 70982.04853015675*a^2)*nl^20 + (3896183.138912215*a^10 - 19523490.2880189*a^8 - 7128555.424220213*a^6 - 222413.3227773616*a^4 + 60841.7558829915*a^2)*nl^18 + (-4383206.031276241*a^10 + 19523490.2880189*a^8 + 6237485.996192687*a^6 + 166809.9920830212*a^4 - 38026.0974268697*a^2)*nl^16 + (3896183.138912214*a^10 - 15184936.8906813*a^8 - 4158323.997461791*a^6 - 92672.2178239007*a^4 + 16900.48774527542*a^2)*nl^14 + (-2727328.19723855*a^10 + 9110962.134408802*a^8 + 2079161.998730895*a^6 + 37068.8871295603*a^4 - 5070.146323582626*a^2)*nl^12 + (1487633.562130118*a^10 - 4141346.424731274*a^8 - 756058.9086294164*a^6 - 10109.69648988009*a^4 + 921.844786105932*a^2)*nl^10 - 340.5754492056132*a^10 + (-619847.3175542159*a^10 + 1380448.808243758*a^8 + 189014.7271573541*a^6 + 1684.949414980016*a^4 - 76.820398842161*a^2)*nl^8 + (190722.2515551434*a^10 - 318565.1095947134*a^8 - 29079.18879343909*a^6 - 129.6114934600012*a^4)*nl^6 + ((340.5754492056132*a^10 - 3033.953424711557*a^8 + 2178.822528932337*a^6 - 24430.15170854113*a^4 + 9326.962899799812*a^2 - 234.7413830603392)*nl^32 + (-5449.207187289811*a^10 + 45509.30137067335*a^8 - 34759.42284780213*a^6 + 341892.5124261158*a^4 - 121173.6972985554*a^2 + 2816.896596724071)*nl^30 + (40869.05390467359*a^10 - 318565.1095947134*a^8 + 257855.5543313344*a^6 - 2221458.856062263*a^4 + 726581.2613982793*a^2 - 15492.93128198239)*nl^28 + (-190722.2515551434*a^10 + 1380448.808243758*a^8 - 1180378.977821567*a^6 + 8882465.52541909*a^4 - 2662441.243019164*a^2 + 51643.10427327463)*nl^26 + (619847.3175542159*a^10 - 4141346.424731274*a^8 + 3730151.660622055*a^6 - 24417512.9731201*a^4 + 6651877.98561159*a^2 - 116196.9846148679)*nl^24 + (-1487633.562130118*a^10 + 9110962.134408802*a^8 - 8622166.053114701*a^6 + 48816491.5026754*a^4 - 11965775.1546155*a^2 + 185915.1753837886)*nl^22 + (2727328.19723855*a^10 - 15184936.8906813*a^8 + 15063330.7547681*a^6 - 73196935.588666*a^4 + 15944226.5801735*a^2 - 216901.0379477534)*nl^20 + (-3896183.138912215*a^10 + 19523490.2880189*a^8 - 20258208.9698723*a^6 + 83621867.3409358*a^4 - 15934086.2875263*a^2 + 185915.1753837886)*nl^18 + (4383206.031276242*a^10 - 19523490.2880189*a^8 + 21149278.3978998*a^6 - 73141332.2579717*a^4 + 11942959.4961594*a^2 - 116196.9846148679)*nl^16 + (-3896183.138912215*a^10 + 15184936.8906813*a^8 - 17142492.753499*a^6 + 48742353.7284163*a^4 - 6630752.375929995*a^2 + 51643.10427327463)*nl^14 + (2727328.19723855*a^10 - 9110962.134408802*a^8 + 10701328.0518456*a^6 - 24361909.6424258*a^4 + 2650610.901597471*a^2 - 15492.93128198239)*nl^12 + (-1487633.562130118*a^10 + 4141346.424731274*a^8 - 5053254.750723533*a^6 + 8855506.334779412*a^4 - 722432.9598608026*a^2 + 2816.896596724071)*nl^10 + 340.5754492056132*a^10 + (619847.317554216*a^10 - 1380448.808243758*a^8 + 1747423.159293629*a^6 - 2213034.108987363*a^4 + 120328.6729112916*a^2 - 234.7413830603392)*nl^8 + (-190722.2515551434*a^10 + 318565.1095947134*a^8 - 417791.0926952494*a^6 + 340337.1745045958*a^4 - 9250.14250095765*a^2)*nl^6 + (40869.05390467359*a^10 - 45509.30137067335*a^8 + 61761.52672742413*a^6 - 24300.54021508113*a^4)*nl^4 + (-5449.207187289811*a^10 + 3033.953424711557*a^8 - 4255.907442749414*a^6)*nl^2)*nv^6 + (-40869.05390467359*a^10 + 45509.30137067335*a^8 + 2077.084913817077*a^6)*nl^4 + ((-1021.72634761684*a^10 + 9101.860274134671*a^8 - 2280.560144047596*a^6 + 48989.91491054227*a^4 - 18730.74619844178*a^2 + 469.4827661206784)*nl^32 + (16347.62156186943*a^10 - 136527.90411202*a^8 + 40439.65690216516*a^6 - 685469.9742672116*a^4 + 243269.2393832167*a^2 - 5633.793193448141)*nl^30 + (-122607.1617140208*a^10 + 955695.3287841403*a^8 - 326696.3815053147*a^6 + 4453027.408614405*a^4 - 1458232.669120141*a^2 + 30985.86256396477)*nl^28 + (572166.7546654302*a^10 - 4141346.424731275*a^8 + 1604699.047013718*a^6 - 17801999.9379677*a^4 + 5341782.973783603*a^2 - 103286.2085465493)*nl^26 + (-1859541.952662648*a^10 + 12424039.2741938*a^8 - 5381141.322513215*a^6 + 48927698.1640641*a^4 - 13341782.0686501*a^2 + 232393.9692297358)*nl^24 + (4462900.686390355*a^10 - 27332886.4032264*a^8 + 13086008.1087676*a^6 - 97799792.9974339*a^4 + 23992392.065114*a^2 - 371830.3507675772)*nl^22 + (-8181984.591715651*a^10 + 45554810.672044*a^8 - 23889175.5133436*a^6 + 146616284.500109*a^4 - 31959435.2088771*a^2 + 433802.0758955069)*nl^20 + (11688549.4167366*a^10 - 58570470.8640566*a^8 + 33387862.5155243*a^6 - 167466148.004649*a^4 + 31929014.3309356*a^2 - 371830.3507675773)*nl^18 + (-13149618.0938287*a^10 + 58570470.8640566*a^8 - 36061070.7996069*a^6 + 146449474.508026*a^4 - 23923945.0897456*a^2 + 232393.9692297358)*nl^16 + (11688549.4167366*a^10 - 45554810.672044*a^8 + 30126661.5095363*a^6 - 97577379.6746565*a^4 + 13278405.2396053*a^2 - 103286.2085465493)*nl^14 + (-8181984.591715651*a^10 + 27332886.4032264*a^8 - 19323494.1049603*a^6 + 48760888.1719811*a^4 - 5306291.949518524*a^2 + 30985.86256396478)*nl^12 + (4462900.686390355*a^10 - 12424039.2741938*a^8 + 9350450.592817651*a^6 - 17721122.3660487*a^4 + 1445787.764507711*a^2 - 5633.793193448141)*nl^10 - 1021.72634761684*a^10 + (-1859541.952662648*a^10 + 4141346.424731275*a^8 - 3305831.591429905*a^6 + 4427753.167389706*a^4 - 240734.1662214254*a^2 + 469.4827661206784)*nl^8 + (572166.7546654302*a^10 - 955695.3287841403*a^8 + 806502.9965970598*a^6 - 680803.9605026516*a^4 + 18500.2850019153*a^2)*nl^6 + (-122607.1617140208*a^10 + 136527.90411202*a^8 - 121445.9685410312*a^6 + 48601.08043016226*a^4)*nl^4 + (16347.62156186943*a^10 - 9101.860274134671*a^8 + 8511.814885498829*a^6)*nl^2)*nv^4 + (5449.207187289811*a^10 - 3033.953424711557*a^8)*nl^2 + ((1021.72634761684*a^10 - 9101.860274134671*a^8 - 1975.347298701818*a^6 - 24689.37469546113*a^4 + 9480.603697484134*a^2 - 234.7413830603392)*nl^32 + (-16347.62156186943*a^10 + 136527.90411202*a^8 + 23398.95473907605*a^6 + 345262.4112560758*a^4 - 123017.3868707672*a^2 + 2816.896596724071)*nl^30 + (122607.1617140208*a^10 - 955695.3287841403*a^8 - 120173.8999833738*a^6 - 2241678.249042023*a^4 + 736721.5540454446*a^2 - 15492.93128198239)*nl^28 + (-572166.7546654302*a^10 + 4141346.424731275*a^8 + 331738.8394372659*a^6 + 8956603.299678212*a^4 - 2696242.218509714*a^2 + 51643.10427327463)*nl^26 + (1859541.952662648*a^10 - 12424039.2741938*a^8 - 428172.3368397355*a^6 - 24602857.4087679*a^4 + 6727930.180465329*a^2 - 116196.9846148679)*nl^24 + (-4462900.686390355*a^10 + 27332886.4032264*a^8 - 305518.0581911202*a^6 + 49150111.4868415*a^4 - 12087458.6663815*a^2 + 185915.1753837886)*nl^22 + (8181984.591715651*a^10 - 45554810.672044*a^8 + 2588358.762382761*a^6 - 73641762.2342207*a^4 + 16086190.6772338*a^2 - 216901.0379477534)*nl^20 + (-11688549.4167366*a^10 + 58570470.8640566*a^8 - 6001098.121431838*a^6 + 84066693.9864905*a^4 - 16055769.7992923*a^2 + 185915.1753837886)*nl^18 + (13149618.0938287*a^10 - 58570470.8640566*a^8 + 8674306.40551442*a^6 - 73474952.2421377*a^4 + 12019011.6910131*a^2 - 116196.9846148679)*nl^16 + (-11688549.4167366*a^10 + 45554810.672044*a^8 - 8825844.758575443*a^6 + 48927698.1640641*a^4 - 6664553.351420546*a^2 + 51643.10427327463)*nl^14 + (8181984.591715651*a^10 - 27332886.4032264*a^8 + 6543004.054383802*a^6 - 24436047.4166849*a^4 + 2660751.194244636*a^2 - 15492.93128198239)*nl^12 + (-4462900.686390355*a^10 + 12424039.2741938*a^8 - 3541136.933464701*a^6 + 8875725.727759171*a^4 - 724276.6494330144*a^2 + 2816.896596724071)*nl^10 + 1021.72634761684*a^10 + (1859541.952662648*a^10 - 4141346.424731275*a^8 + 1369393.704978921*a^6 - 2216404.007817323*a^4 + 120482.3137089759*a^2 - 234.7413830603392)*nl^8 + (-572166.7546654302*a^10 + 955695.3287841403*a^8 - 359632.7151083713*a^6 + 340596.3974915158*a^4 - 9250.14250095765*a^2)*nl^6 + (122607.1617140208*a^10 - 136527.9041120201*a^8 + 57607.35689978999*a^6 - 24300.54021508113*a^4)*nl^4 + (-16347.62156186943*a^10 + 9101.860274134671*a^8 - 4255.907442749414*a^6)*nl^2)*nv^2 + ((1934.29061997787*a^9 - 641.5802369130929*a^7 - 1422.133250031137*a^5 - 341.1774975656799*a^3)*nl^31 + (-29014.35929966805*a^9 + 8982.123316783296*a^7 + 18487.73225040478*a^5 + 4094.12997078816*a^3)*nl^29 + (203100.5150976763*a^9 - 58383.80155909143*a^7 - 110926.3935024287*a^5 - 22517.71483933488*a^3)*nl^27 + (-880102.2320899307*a^9 + 233535.2062363656*a^7 + 406730.1095089052*a^5 + 75059.04946444959*a^3)*nl^25 + (2640306.696269792*a^9 - 642221.8171500053*a^7 - 1016825.273772263*a^5 - 168882.8612950116*a^3)*nl^23 + (-5808674.731793541*a^9 + 1284443.63430001*a^7 + 1830285.492790074*a^5 + 270212.5780720185*a^3)*nl^21 + (9681124.552989237*a^9 - 1926665.451450016*a^7 - 2440380.657053431*a^5 - 315248.0077506883*a^3)*nl^19 + (-12447160.1395576*a^9 + 2201903.373085732*a^7 + 2440380.657053431*a^5 + 270212.5780720185*a^3)*nl^17 + (12447160.1395576*a^9 - 1926665.451450016*a^7 - 1830285.492790074*a^5 - 168882.8612950116*a^3)*nl^15 + (-9681124.552989237*a^9 + 1284443.63430001*a^7 + 1016825.273772263*a^5 + 75059.04946444958*a^3)*nl^13 + (5808674.731793541*a^9 - 642221.8171500053*a^7 - 406730.1095089053*a^5 - 22517.71483933488*a^3)*nl^11 - 1934.29061997787*a^9*nl + (-2640306.696269792*a^9 + 233535.2062363655*a^7 + 110926.3935024287*a^5 + 4094.12997078816*a^3)*nl^9 + (880102.2320899306*a^9 - 58383.80155909141*a^7 - 18487.73225040478*a^5 - 341.1774975656799*a^3)*nl^7 + ((-1934.29061997787*a^9 + 641.5802369130929*a^7 - 14332.54986052582*a^5 + 20331.55117379083*a^3 - 2282.835733475376*a)*nl^31 + (29014.35929966805*a^9 - 8982.123316783296*a^7 + 202077.8312973925*a^5 - 263968.9877617152*a^3 + 27394.02880170451*a)*nl^29 + (-203100.5150976763*a^9 + 58383.80155909141*a^7 - 1322749.769558254*a^5 + 1581766.861584897*a^3 - 150667.1584093748*a)*nl^27 + (880102.2320899306*a^9 - 233535.2062363656*a^7 + 5327974.542733826*a^5 - 5792305.920864844*a^3 + 502223.8613645827*a)*nl^25 + (-2640306.696269792*a^9 + 642221.8171500053*a^7 - 14753612.5198952*a^5 + 14462000.039796*a^3 - 1130003.688070311*a)*nl^23 + (5808674.731793541*a^9 - 1284443.63430001*a^7 + 29710590.0945449*a^5 - 25997823.4993738*a^3 + 1808005.900912497*a)*nl^21 + (-9681124.552989237*a^9 + 1926665.451450016*a^7 - 44870932.7239491*a^5 + 34618729.2361531*a^3 - 2109340.217731247*a)*nl^19 + (12447160.1395576*a^9 - 2201903.373085732*a^7 + 51629691.778378*a^5 - 34573693.8064744*a^3 + 1808005.900912498*a)*nl^17 + (-12447160.1395576*a^9 + 1926665.451450016*a^7 - 45481027.8882124*a^5 + 25896493.7825968*a^3 - 1130003.688070311*a)*nl^15 + (9681124.552989237*a^9 - 1284443.63430001*a^7 + 30524050.3135628*a^5 - 14368176.2279654*a^3 + 502223.8613645827*a)*nl^13 + (-5808674.731793542*a^9 + 642221.8171500053*a^7 - 15363707.6841586*a^5 + 5739764.586239729*a^3 - 150667.1584093748*a)*nl^11 + 1934.29061997787*a^9*nl + (2640306.696269792*a^9 - 233535.2062363655*a^7 + 5623778.258740302*a^5 - 1563343.27671635*a^3 + 27394.02880170451*a)*nl^9 + (-880102.2320899307*a^9 + 58383.80155909141*a^7 - 1415188.430810278*a^5 + 260216.0352884927*a^3 - 2282.835733475376*a)*nl^7 + (203100.5150976763*a^9 - 8982.123316783298*a^7 + 219143.4302977662*a^5 - 19990.37367622516*a^3)*nl^5 + (-29014.35929966805*a^9 + 641.5802369130929*a^7 - 15754.68311055695*a^5)*nl^3)*nv^6 + (-203100.5150976763*a^9 + 8982.123316783296*a^7 + 1422.133250031137*a^5)*nl^5 + ((5802.871859933609*a^9 - 1924.740710739279*a^7 + 27242.9664710205*a^5 - 41004.27984514735*a^3 + 4565.671466950752*a)*nl^31 + (-87043.07789900413*a^9 + 26946.36995034989*a^7 - 385667.9303443803*a^5 + 532032.1054942185*a^3 - 54788.05760340902*a)*nl^29 + (609301.5452930289*a^9 - 175151.4046772742*a^7 + 2534573.14561408*a^5 - 3186051.438009129*a^3 + 301334.3168187496*a)*nl^27 + (-2640306.696269792*a^9 + 700605.6187090968*a^7 - 10249218.9759587*a^5 + 11659670.8911941*a^3 - 1004447.722729165*a)*nl^25 + (7920920.088809375*a^9 - 1926665.451450016*a^7 + 28490399.7660182*a^5 - 29092882.940887*a^3 + 2260007.376140622*a)*nl^23 + (-17426024.1953806*a^9 + 3853330.902900031*a^7 - 57590894.6962998*a^5 + 52265859.5768196*a^3 - 3616011.801824995*a)*nl^21 + (29043373.6589677*a^9 - 5779996.354350047*a^7 + 87301484.7908448*a^5 - 69552706.4800568*a^3 + 4218680.435462494*a)*nl^19 + (-37341480.4186728*a^9 + 6605710.119257197*a^7 - 100819002.899703*a^5 + 69417600.1910208*a^3 - 3616011.801824995*a)*nl^17 + (37341480.4186728*a^9 - 5779996.354350047*a^7 + 89131770.2836348*a^5 - 51961870.4264886*a^3 + 2260007.376140622*a)*nl^15 + (-29043373.6589677*a^9 + 3853330.902900031*a^7 - 60031275.3533533*a^5 + 28811411.5053953*a^3 - 1004447.722729165*a)*nl^13 + (17426024.1953806*a^9 - 1926665.451450016*a^7 + 30320685.2588083*a^5 - 11502046.8873188*a^3 + 301334.3168187496*a)*nl^11 - 5802.871859933609*a^9*nl + (-7920920.088809375*a^9 + 700605.6187090967*a^7 - 11136630.1239782*a^5 + 3130780.683403488*a^3 - 54788.05760340902*a)*nl^9 + (2640306.696269792*a^9 - 175151.4046772742*a^7 + 2811889.129370151*a^5 - 520773.2480745511*a^3 + 4565.671466950752*a)*nl^7 + (-609301.5452930289*a^9 + 26946.36995034989*a^7 - 436864.7273455013*a^5 + 39980.74735245031*a^3)*nl^5 + (87043.07789900413*a^9 - 1924.740710739279*a^7 + 31509.36622111391*a^5)*nl^3)*nv^4 + (29014.35929966805*a^9 - 641.5802369130929*a^7)*nl^3 + ((-5802.871859933609*a^9 + 1924.740710739279*a^7 - 11488.28336046355*a^5 + 21013.90616892219*a^3 - 2282.835733475376*a)*nl^31 + (87043.07789900413*a^9 - 26946.36995034989*a^7 + 165102.366796583*a^5 - 272157.2477032915*a^3 + 27394.02880170451*a)*nl^29 + (-609301.5452930289*a^9 + 175151.4046772743*a^7 - 1100896.982553397*a^5 + 1626802.291263567*a^3 - 150667.1584093748*a)*nl^27 + (2640306.696269792*a^9 - 700605.6187090968*a^7 + 4514514.323716015*a^5 - 5942424.019793743*a^3 + 502223.8613645827*a)*nl^25 + (-7920920.088809375*a^9 + 1926665.451450016*a^7 - 12719961.9723507*a^5 + 14799765.762386*a^3 - 1130003.688070311*a)*nl^23 + (17426024.1953806*a^9 - 3853330.902900031*a^7 + 26050019.1089648*a^5 - 26538248.6555178*a^3 + 1808005.900912497*a)*nl^21 + (-29043373.6589677*a^9 + 5779996.354350047*a^7 - 39990171.4098422*a^5 + 35249225.2516544*a^3 - 2109340.217731247*a)*nl^19 + (37341480.4186728*a^9 - 6605710.119257197*a^7 + 46748930.4642712*a^5 - 35114118.9626184*a^3 + 1808005.900912498*a)*nl^17 + (-37341480.4186728*a^9 + 5779996.354350047*a^7 - 41820456.9026323*a^5 + 26234259.5051868*a^3 - 1130003.688070311*a)*nl^15 + (29043373.6589677*a^9 - 3853330.902900031*a^7 + 28490399.7660182*a^5 - 14518294.3268943*a^3 + 502223.8613645827*a)*nl^13 + (-17426024.1953806*a^9 + 1926665.451450016*a^7 - 14550247.4651408*a^5 + 5784800.015918399*a^3 - 150667.1584093748*a)*nl^11 + 5802.871859933609*a^9*nl + (7920920.088809375*a^9 - 700605.6187090967*a^7 + 5401925.471735444*a^5 - 1571531.536657927*a^3 + 27394.02880170451*a)*nl^9 + (-2640306.696269792*a^9 + 175151.4046772742*a^7 - 1378212.966309468*a^5 + 260898.3902836241*a^3 - 2282.835733475376*a)*nl^7 + (609301.5452930289*a^9 - 26946.36995034989*a^7 + 216299.1637977039*a^5 - 19990.37367622516*a^3)*nl^5 + (-87043.07789900413*a^9 + 1924.740710739279*a^7 - 15754.68311055695*a^5)*nl^3)*nv^2)*sqrt(-1.0*nl^2 + 1.0) + (((11294.48766992642*a^7 - 36443.55577869599*a^5 + 15251.10565494534*a^3 - 465.7157104548775*a)*nl^32 + (-169417.3150488964*a^7 + 510209.7809017438*a^5 - 198264.3735142894*a^3 + 5588.58852545853*a)*nl^30 + (1185921.205342275*a^7 - 3316363.575861335*a^5 + 1189586.241085737*a^3 - 30737.23689002192*a)*nl^28 + (-5138991.889816523*a^7 + 13265454.3034453*a^5 - 4361816.217314367*a^3 + 102457.456300073*a)*nl^26 + (15416975.6694496*a^7 - 36479999.3344747*a^5 + 10904540.5432859*a^3 - 230529.2766751644*a)*nl^24 + (-33917346.472789*a^7 + 72959998.6689494*a^5 - 19628172.9779146*a^3 + 368846.842680263*a)*nl^22 + (56528910.7879817*a^7 - 109439998.003424*a^5 + 26170897.3038862*a^3 - 430321.3164603068*a)*nl^20 + (-72680028.1559765*a^7 + 125074283.432485*a^5 - 26170897.3038862*a^3 + 368846.842680263*a)*nl^18 + (72680028.1559765*a^7 - 109439998.003424*a^5 + 19628172.9779146*a^3 - 230529.2766751644*a)*nl^16 + (-56528910.7879817*a^7 + 72959998.6689494*a^5 - 10904540.5432859*a^3 + 102457.4563000731*a)*nl^14 + (33917346.472789*a^7 - 36479999.3344747*a^5 + 4361816.217314368*a^3 - 30737.23689002192*a)*nl^12 + (-15416975.6694496*a^7 + 13265454.3034453*a^5 - 1189586.241085737*a^3 + 5588.58852545853*a)*nl^10 - 11294.48766992642*a^7*nl^2 + (5138991.889816523*a^7 - 3316363.575861334*a^5 + 198264.3735142894*a^3 - 465.7157104548775*a)*nl^8 + (-1185921.205342274*a^7 + 510209.7809017438*a^5 - 15251.10565494534*a^3)*nl^6 + (169417.3150488964*a^7 - 36443.55577869599*a^5)*nl^4)*nv^5 + ((-22588.97533985285*a^7 + 72887.11155739198*a^5 - 30502.21130989068*a^3 + 931.431420909755*a)*nl^32 + (338834.6300977927*a^7 - 1020419.561803488*a^5 + 396528.7470285788*a^3 - 11177.17705091706*a)*nl^30 + (-2371842.410684549*a^7 + 6632727.15172267*a^5 - 2379172.482171473*a^3 + 61474.47378004383*a)*nl^28 + (10277983.779633*a^7 - 26530908.6068907*a^5 + 8723632.434628734*a^3 - 204914.9126001461*a)*nl^26 + (-30833951.3388991*a^7 + 72959998.6689494*a^5 - 21809081.0865718*a^3 + 461058.5533503287*a)*nl^24 + (67834692.9455781*a^7 - 145919997.337899*a^5 + 39256345.9558293*a^3 - 737693.685360526*a)*nl^22 + (-113057821.575963*a^7 + 218879996.006848*a^5 - 52341794.6077724*a^3 + 860642.6329206135*a)*nl^20 + (145360056.311953*a^7 - 250148566.864969*a^5 + 52341794.6077724*a^3 - 737693.685360526*a)*nl^18 + (-145360056.311953*a^7 + 218879996.006848*a^5 - 39256345.9558293*a^3 + 461058.5533503287*a)*nl^16 + (113057821.575963*a^7 - 145919997.337899*a^5 + 21809081.0865718*a^3 - 204914.9126001461*a)*nl^14 + (-67834692.9455781*a^7 + 72959998.6689494*a^5 - 8723632.434628734*a^3 + 61474.47378004383*a)*nl^12 + (30833951.3388991*a^7 - 26530908.6068907*a^5 + 2379172.482171473*a^3 - 11177.17705091706*a)*nl^10 + 22588.97533985285*a^7*nl^2 + (-10277983.779633*a^7 + 6632727.15172267*a^5 - 396528.7470285788*a^3 + 931.431420909755*a)*nl^8 + (2371842.410684549*a^7 - 1020419.561803488*a^5 + 30502.21130989068*a^3)*nl^6 + (-338834.6300977927*a^7 + 72887.11155739198*a^5)*nl^4)*nv^3 + ((11294.48766992642*a^7 - 36443.55577869599*a^5 + 15251.10565494534*a^3 - 465.7157104548775*a)*nl^32 + (-169417.3150488964*a^7 + 510209.7809017438*a^5 - 198264.3735142894*a^3 + 5588.58852545853*a)*nl^30 + (1185921.205342274*a^7 - 3316363.575861335*a^5 + 1189586.241085737*a^3 - 30737.23689002192*a)*nl^28 + (-5138991.889816523*a^7 + 13265454.3034453*a^5 - 4361816.217314368*a^3 + 102457.456300073*a)*nl^26 + (15416975.6694496*a^7 - 36479999.3344747*a^5 + 10904540.5432859*a^3 - 230529.2766751644*a)*nl^24 + (-33917346.472789*a^7 + 72959998.6689494*a^5 - 19628172.9779146*a^3 + 368846.842680263*a)*nl^22 + (56528910.7879817*a^7 - 109439998.003424*a^5 + 26170897.3038862*a^3 - 430321.3164603068*a)*nl^20 + (-72680028.1559765*a^7 + 125074283.432485*a^5 - 26170897.3038862*a^3 + 368846.842680263*a)*nl^18 + (72680028.1559765*a^7 - 109439998.003424*a^5 + 19628172.9779146*a^3 - 230529.2766751644*a)*nl^16 + (-56528910.7879817*a^7 + 72959998.6689494*a^5 - 10904540.5432859*a^3 + 102457.4563000731*a)*nl^14 + (33917346.472789*a^7 - 36479999.3344747*a^5 + 4361816.217314367*a^3 - 30737.23689002192*a)*nl^12 + (-15416975.6694496*a^7 + 13265454.3034453*a^5 - 1189586.241085737*a^3 + 5588.58852545853*a)*nl^10 - 11294.48766992642*a^7*nl^2 + (5138991.889816523*a^7 - 3316363.575861335*a^5 + 198264.3735142894*a^3 - 465.7157104548775*a)*nl^8 + (-1185921.205342275*a^7 + 510209.7809017438*a^5 - 15251.10565494534*a^3)*nl^6 + (169417.3150488964*a^7 - 36443.55577869599*a^5)*nl^4)*nv + (((2407.868425883686*a^8 - 26302.86255025803*a^6 + 30655.1945279348*a^4 - 4119.861118470091*a^2)*nl^31 + (-36118.02638825528*a^8 + 368240.0757036123*a^6 - 398517.5288631524*a^4 + 49438.33342164109*a^2)*nl^29 + (252826.184717787*a^8 - 2393560.49207348*a^6 + 2391105.173178914*a^4 - 271910.833819026*a^2)*nl^27 + (-1095580.133777077*a^8 + 9574241.96829392*a^6 - 8767385.634989353*a^4 + 906369.4460634199*a^2)*nl^25 + (3286740.401331231*a^8 - 26329165.4128083*a^6 + 21918464.0874734*a^4 - 2039331.253642695*a^2)*nl^23 + (-7230828.882928707*a^8 + 52658330.8256165*a^6 - 39453235.3574521*a^4 + 3262930.005828312*a^2)*nl^21 + (12051381.4715479*a^8 - 78987496.2384248*a^6 + 52604313.8099361*a^4 - 3806751.673466364*a^2)*nl^19 + (-15494633.3205615*a^8 + 90271424.2724855*a^6 - 52604313.8099361*a^4 + 3262930.005828312*a^2)*nl^17 + (15494633.3205615*a^8 - 78987496.2384248*a^6 + 39453235.3574521*a^4 - 2039331.253642695*a^2)*nl^15 + (-12051381.4715478*a^8 + 52658330.8256165*a^6 - 21918464.0874734*a^4 + 906369.44606342*a^2)*nl^13 + (7230828.882928707*a^8 - 26329165.4128083*a^6 + 8767385.634989353*a^4 - 271910.833819026*a^2)*nl^11 + (-3286740.40133123*a^8 + 9574241.96829392*a^6 - 2391105.173178914*a^4 + 49438.33342164109*a^2)*nl^9 - 2407.868425883686*a^8*nl + (1095580.133777077*a^8 - 2393560.49207348*a^6 + 398517.5288631525*a^4 - 4119.861118470091*a^2)*nl^7 + (-252826.184717787*a^8 + 368240.0757036123*a^6 - 30655.1945279348*a^4)*nl^5 + (36118.02638825528*a^8 - 26302.86255025803*a^6)*nl^3)*nv^5 + ((-4815.736851767371*a^8 + 52605.72510051605*a^6 - 61310.3890558696*a^4 + 8239.722236940182*a^2)*nl^31 + (72236.05277651057*a^8 - 736480.1514072246*a^6 + 797035.0577263049*a^4 - 98876.66684328219*a^2)*nl^29 + (-505652.3694355739*a^8 + 4787120.98414696*a^6 - 4782210.346357829*a^4 + 543821.667638052*a^2)*nl^27 + (2191160.267554154*a^8 - 19148483.9365878*a^6 + 17534771.2699787*a^4 - 1812738.89212684*a^2)*nl^25 + (-6573480.802662461*a^8 + 52658330.8256165*a^6 - 43836928.1749468*a^4 + 4078662.50728539*a^2)*nl^23 + (14461657.7658574*a^8 - 105316661.651233*a^6 + 78906470.7149042*a^4 - 6525860.011656624*a^2)*nl^21 + (-24102762.9430957*a^8 + 157974992.47685*a^6 - 105208627.619872*a^4 + 7613503.346932728*a^2)*nl^19 + (30989266.641123*a^8 - 180542848.544971*a^6 + 105208627.619872*a^4 - 6525860.011656624*a^2)*nl^17 + (-30989266.641123*a^8 + 157974992.47685*a^6 - 78906470.7149042*a^4 + 4078662.50728539*a^2)*nl^15 + (24102762.9430957*a^8 - 105316661.651233*a^6 + 43836928.1749468*a^4 - 1812738.89212684*a^2)*nl^13 + (-14461657.7658574*a^8 + 52658330.8256165*a^6 - 17534771.2699787*a^4 + 543821.667638052*a^2)*nl^11 + (6573480.80266246*a^8 - 19148483.9365878*a^6 + 4782210.346357829*a^4 - 98876.66684328219*a^2)*nl^9 + 4815.736851767371*a^8*nl + (-2191160.267554154*a^8 + 4787120.98414696*a^6 - 797035.0577263049*a^4 + 8239.722236940182*a^2)*nl^7 + (505652.3694355739*a^8 - 736480.1514072246*a^6 + 61310.3890558696*a^4)*nl^5 + (-72236.05277651057*a^8 + 52605.72510051605*a^6)*nl^3)*nv^3 + ((2407.868425883686*a^8 - 26302.86255025803*a^6 + 30655.1945279348*a^4 - 4119.861118470091*a^2)*nl^31 + (-36118.02638825528*a^8 + 368240.0757036123*a^6 - 398517.5288631524*a^4 + 49438.33342164109*a^2)*nl^29 + (252826.184717787*a^8 - 2393560.49207348*a^6 + 2391105.173178914*a^4 - 271910.833819026*a^2)*nl^27 + (-1095580.133777077*a^8 + 9574241.96829392*a^6 - 8767385.634989355*a^4 + 906369.4460634199*a^2)*nl^25 + (3286740.401331231*a^8 - 26329165.4128083*a^6 + 21918464.0874734*a^4 - 2039331.253642695*a^2)*nl^23 + (-7230828.882928708*a^8 + 52658330.8256165*a^6 - 39453235.3574521*a^4 + 3262930.005828313*a^2)*nl^21 + (12051381.4715478*a^8 - 78987496.2384248*a^6 + 52604313.8099361*a^4 - 3806751.673466364*a^2)*nl^19 + (-15494633.3205615*a^8 + 90271424.2724855*a^6 - 52604313.8099361*a^4 + 3262930.005828312*a^2)*nl^17 + (15494633.3205615*a^8 - 78987496.2384248*a^6 + 39453235.3574521*a^4 - 2039331.253642695*a^2)*nl^15 + (-12051381.4715478*a^8 + 52658330.8256165*a^6 - 21918464.0874734*a^4 + 906369.44606342*a^2)*nl^13 + (7230828.882928707*a^8 - 26329165.4128083*a^6 + 8767385.634989353*a^4 - 271910.833819026*a^2)*nl^11 + (-3286740.401331231*a^8 + 9574241.96829392*a^6 - 2391105.173178914*a^4 + 49438.33342164109*a^2)*nl^9 - 2407.868425883686*a^8*nl + (1095580.133777077*a^8 - 2393560.49207348*a^6 + 398517.5288631524*a^4 - 4119.861118470091*a^2)*nl^7 + (-252826.184717787*a^8 + 368240.0757036123*a^6 - 30655.1945279348*a^4)*nl^5 + (36118.02638825528*a^8 - 26302.86255025803*a^6)*nl^3)*nv)*sqrt(-1.0*nl^2 + 1.0))*sqrt(-1.0*nv^2 + 1.0))/((-340.5754492056132*a^10 + 3033.953424711557*a^8 + 2077.084913817077*a^6 + 129.6114934600012*a^4 - 76.820398842161*a^2)*nl^32 + (5449.207187289811*a^10 - 45509.30137067335*a^8 - 29079.18879343909*a^6 - 1684.949414980016*a^4 + 921.844786105932*a^2)*nl^30 + (-40869.05390467359*a^10 + 318565.1095947134*a^8 + 189014.7271573541*a^6 + 10109.69648988009*a^4 - 5070.146323582626*a^2)*nl^28 + (190722.2515551434*a^10 - 1380448.808243758*a^8 - 756058.9086294165*a^6 - 37068.88712956033*a^4 + 16900.48774527542*a^2)*nl^26 + (-619847.317554216*a^10 + 4141346.424731274*a^8 + 2079161.998730895*a^6 + 92672.21782390073*a^4 - 38026.0974268697*a^2)*nl^24 + (1487633.562130118*a^10 - 9110962.134408802*a^8 - 4158323.997461791*a^6 - 166809.9920830213*a^4 + 60841.75588299151*a^2)*nl^22 + (-2727328.19723855*a^10 + 15184936.8906813*a^8 + 6237485.996192686*a^6 + 222413.3227773617*a^4 - 70982.04853015675*a^2)*nl^20 + (3896183.138912215*a^10 - 19523490.2880189*a^8 - 7128555.424220213*a^6 - 222413.3227773616*a^4 + 60841.7558829915*a^2)*nl^18 + (-4383206.031276241*a^10 + 19523490.2880189*a^8 + 6237485.996192687*a^6 + 166809.9920830212*a^4 - 38026.0974268697*a^2)*nl^16 + (3896183.138912214*a^10 - 15184936.8906813*a^8 - 4158323.997461791*a^6 - 92672.2178239007*a^4 + 16900.48774527542*a^2)*nl^14 + (-2727328.19723855*a^10 + 9110962.134408802*a^8 + 2079161.998730895*a^6 + 37068.8871295603*a^4 - 5070.146323582626*a^2)*nl^12 + (1487633.562130118*a^10 - 4141346.424731274*a^8 - 756058.9086294164*a^6 - 10109.69648988009*a^4 + 921.844786105932*a^2)*nl^10 - 340.5754492056132*a^10 + (-619847.3175542159*a^10 + 1380448.808243758*a^8 + 189014.7271573541*a^6 + 1684.949414980016*a^4 - 76.820398842161*a^2)*nl^8 + ((247.35053257299*a^10 - 2345.488286795025*a^8 + 51280.31023251245*a^6 - 34257.61493040192*a^4 + 7055.849279177906*a^2 - 170.486176417963)*nl^32 + (-3957.608521167841*a^10 + 35182.32430192539*a^8 - 721015.2911640762*a^6 + 462997.8045953113*a^4 - 91388.31410186204*a^2 + 2045.834117015556)*nl^30 + (29682.06390875881*a^10 - 246276.2701134777*a^8 + 4709781.50188326*a^6 - 2901528.501072473*a^4 + 546303.5254464676*a^2 - 11252.08764358556)*nl^28 + (-138516.2982408744*a^10 + 1067197.170491737*a^8 - 18947309.1843446*a^6 + 11174285.0891017*a^4 - 1995682.943033132*a^2 + 37506.95881195187)*nl^26 + (450177.9692828419*a^10 - 3201591.511475211*a^8 + 52456695.5815853*a^6 - 29541754.4782621*a^4 + 4970632.398573037*a^2 - 84390.65732689168)*nl^24 + (-1080427.12627882*a^10 + 7043501.325245466*a^8 - 105757219.942301*a^6 + 56708449.9229891*a^4 - 8913703.391213842*a^2 + 135025.0517230267)*nl^22 + (1980783.064844504*a^10 - 11739168.8754091*a^8 + 160182849.341856*a^6 - 81500086.3341809*a^4 + 11840357.9533283*a^2 - 157529.2270101978)*nl^20 + (-2829690.092635006*a^10 + 15093217.125526*a^8 - 185276141.288415*a^6 + 89071426.038718*a^4 - 11795778.0517048*a^2 + 135025.0517230267)*nl^18 + (3183401.354214381*a^10 - 15093217.125526*a^8 + 164602904.851586*a^6 - 74374909.2335756*a^4 + 8813398.612560969*a^2 - 84390.6573268917)*nl^16 + (-2829690.092635006*a^10 + 11739168.8754091*a^8 - 111945297.655922*a^6 + 47208213.7888486*a^4 - 4877757.60352408*a^2 + 37506.95881195187)*nl^14 + (1980783.064844504*a^10 - 7043501.325245459*a^8 + 57519668.2563666*a^6 - 22416577.3776567*a^4 + 1943673.057805716*a^2 - 11252.08764358556)*nl^12 + (-1080427.12627882*a^10 + 3201591.511475209*a^8 - 21760071.7814454*a^6 + 7719653.767596069*a^4 - 528066.2929641269*a^2 + 2045.834117015556)*nl^10 + 247.35053257299*a^10 + (450177.9692828419*a^10 - 1067197.170491737*a^8 + 5791613.26999893*a^6 - 1821956.213101966*a^4 + 87673.32229990375*a^2 - 170.486176417963)*nl^8 + (-138516.2982408744*a^10 + 246276.2701134777*a^8 - 999200.6029652484*a^6 + 263692.1514315255*a^4 - 6718.122751727153*a^2)*nl^6 + (29682.06390875881*a^10 - 35182.32430192539*a^8 + 94553.58095713923*a^6 - 17648.81050008643*a^4)*nl^4 + (-3957.608521167841*a^10 + 2345.488286795025*a^8 - 3090.947908901912*a^6)*nl^2)*nv^7 + (190722.2515551434*a^10 - 318565.1095947134*a^8 - 29079.18879343909*a^6 - 129.6114934600012*a^4)*nl^6 + ((340.5754492056132*a^10 - 3033.953424711557*a^8 + 2178.822528932337*a^6 - 24430.15170854113*a^4 + 9326.962899799812*a^2 - 234.7413830603392)*nl^32 + (-5449.207187289811*a^10 + 45509.30137067335*a^8 - 34759.42284780213*a^6 + 341892.5124261158*a^4 - 121173.6972985554*a^2 + 2816.896596724071)*nl^30 + (40869.05390467359*a^10 - 318565.1095947134*a^8 + 257855.5543313344*a^6 - 2221458.856062263*a^4 + 726581.2613982793*a^2 - 15492.93128198239)*nl^28 + (-190722.2515551434*a^10 + 1380448.808243758*a^8 - 1180378.977821567*a^6 + 8882465.52541909*a^4 - 2662441.243019164*a^2 + 51643.10427327463)*nl^26 + (619847.3175542159*a^10 - 4141346.424731274*a^8 + 3730151.660622055*a^6 - 24417512.9731201*a^4 + 6651877.98561159*a^2 - 116196.9846148679)*nl^24 + (-1487633.562130118*a^10 + 9110962.134408802*a^8 - 8622166.053114701*a^6 + 48816491.5026754*a^4 - 11965775.1546155*a^2 + 185915.1753837886)*nl^22 + (2727328.19723855*a^10 - 15184936.8906813*a^8 + 15063330.7547681*a^6 - 73196935.588666*a^4 + 15944226.5801735*a^2 - 216901.0379477534)*nl^20 + (-3896183.138912215*a^10 + 19523490.2880189*a^8 - 20258208.9698723*a^6 + 83621867.3409358*a^4 - 15934086.2875263*a^2 + 185915.1753837886)*nl^18 + (4383206.031276242*a^10 - 19523490.2880189*a^8 + 21149278.3978998*a^6 - 73141332.2579717*a^4 + 11942959.4961594*a^2 - 116196.9846148679)*nl^16 + (-3896183.138912215*a^10 + 15184936.8906813*a^8 - 17142492.753499*a^6 + 48742353.7284163*a^4 - 6630752.375929995*a^2 + 51643.10427327463)*nl^14 + (2727328.19723855*a^10 - 9110962.134408802*a^8 + 10701328.0518456*a^6 - 24361909.6424258*a^4 + 2650610.901597471*a^2 - 15492.93128198239)*nl^12 + (-1487633.562130118*a^10 + 4141346.424731274*a^8 - 5053254.750723533*a^6 + 8855506.334779412*a^4 - 722432.9598608026*a^2 + 2816.896596724071)*nl^10 + 340.5754492056132*a^10 + (619847.317554216*a^10 - 1380448.808243758*a^8 + 1747423.159293629*a^6 - 2213034.108987363*a^4 + 120328.6729112916*a^2 - 234.7413830603392)*nl^8 + (-190722.2515551434*a^10 + 318565.1095947134*a^8 - 417791.0926952494*a^6 + 340337.1745045958*a^4 - 9250.14250095765*a^2)*nl^6 + (40869.05390467359*a^10 - 45509.30137067335*a^8 + 61761.52672742413*a^6 - 24300.54021508113*a^4)*nl^4 + (-5449.207187289811*a^10 + 3033.953424711557*a^8 - 4255.907442749414*a^6)*nl^2)*nv^6 + ((-742.0515977189701*a^10 + 7036.464860385076*a^8 - 150749.9827886354*a^6 + 85124.03429111931*a^4 - 14449.42508580657*a^2 + 340.972352835926)*nl^32 + (11872.82556350352*a^10 - 105546.9729057762*a^8 + 2116681.6548587*a^6 - 1141910.066784724*a^4 + 186829.3465331331*a^2 - 4091.668234031113)*nl^30 + (-89046.19172627642*a^10 + 738828.8103404331*a^8 - 13804794.9752151*a^6 + 7098543.747709554*a^4 - 1114897.001704685*a^2 + 22504.17528717112)*nl^28 + (415548.8947226233*a^10 - 3201591.511475213*a^8 + 55435546.2544835*a^6 - 27098688.2452736*a^4 + 4065665.72210543*a^2 - 75013.91762390373)*nl^26 + (-1350533.907848525*a^10 + 9604774.534425633*a^8 - 153150942.849105*a^6 + 70958804.1241997*a^4 - 10108439.4282342*a^2 + 168781.3146537834)*nl^24 + (3241281.378836461*a^10 - 21130503.9757364*a^8 + 307989543.25647*a^6 - 134792431.147794*a^4 + 18094886.1921687*a^2 - 270050.1034460534)*nl^22 + (-5942349.194533512*a^10 + 35217506.6262273*a^8 - 465078353.741515*a^6 + 191500881.070783*a^4 - 23992775.2180211*a^2 + 315058.4540203956)*nl^20 + (8489070.277905017*a^10 - 45279651.376578*a^8 + 535938174.071462*a^6 - 206643560.479857*a^4 + 23859035.5131506*a^2 - 270050.1034460535)*nl^18 + (-9550204.062643144*a^10 + 45279651.376578*a^8 - 473918464.760975*a^6 + 170125349.768967*a^4 - 17793971.8562101*a^2 + 168781.3146537834)*nl^16 + (8489070.277905017*a^10 - 35217506.6262273*a^8 + 320365698.683713*a^6 - 106291722.745373*a^4 + 9829815.043087326*a^2 - 75013.91762390373)*nl^14 + (-5942349.194533512*a^10 + 21130503.9757364*a^8 - 163276888.198667*a^6 + 49583272.8223837*a^4 - 3909636.066423181*a^2 + 22504.17528717112)*nl^12 + (3241281.378836462*a^10 - 9604774.534425627*a^8 + 61061071.4486849*a^6 - 16734794.2807568*a^4 + 1060185.304257663*a^2 - 4091.668234031113)*nl^10 - 742.0515977189701*a^10 + (-1350533.907848526*a^10 + 3201591.511475213*a^8 - 15968458.5114464*a^6 + 3859826.883798034*a^4 - 175684.3711272582*a^2 + 340.972352835926)*nl^8 + (415548.8947226233*a^10 - 738828.8103404331*a^8 + 2673052.278461044*a^6 - 543993.1072933665*a^4 + 13436.24550345431*a^2)*nl^6 + (-89046.19172627643*a^10 + 105546.9729057762*a^8 - 237296.524237889*a^6 + 35297.62100017286*a^4)*nl^4 + (11872.82556350352*a^10 - 7036.464860385076*a^8 + 6181.895817803825*a^6)*nl^2)*nv^5 + (-40869.05390467359*a^10 + 45509.30137067335*a^8 + 2077.084913817077*a^6)*nl^4 + ((-1021.72634761684*a^10 + 9101.860274134671*a^8 - 2280.560144047596*a^6 + 48989.91491054227*a^4 - 18730.74619844178*a^2 + 469.4827661206784)*nl^32 + (16347.62156186943*a^10 - 136527.90411202*a^8 + 40439.65690216516*a^6 - 685469.9742672116*a^4 + 243269.2393832167*a^2 - 5633.793193448141)*nl^30 + (-122607.1617140208*a^10 + 955695.3287841403*a^8 - 326696.3815053147*a^6 + 4453027.408614405*a^4 - 1458232.669120141*a^2 + 30985.86256396477)*nl^28 + (572166.7546654302*a^10 - 4141346.424731275*a^8 + 1604699.047013718*a^6 - 17801999.9379677*a^4 + 5341782.973783603*a^2 - 103286.2085465493)*nl^26 + (-1859541.952662648*a^10 + 12424039.2741938*a^8 - 5381141.322513215*a^6 + 48927698.1640641*a^4 - 13341782.0686501*a^2 + 232393.9692297358)*nl^24 + (4462900.686390355*a^10 - 27332886.4032264*a^8 + 13086008.1087676*a^6 - 97799792.9974339*a^4 + 23992392.065114*a^2 - 371830.3507675772)*nl^22 + (-8181984.591715651*a^10 + 45554810.672044*a^8 - 23889175.5133436*a^6 + 146616284.500109*a^4 - 31959435.2088771*a^2 + 433802.0758955069)*nl^20 + (11688549.4167366*a^10 - 58570470.8640566*a^8 + 33387862.5155243*a^6 - 167466148.004649*a^4 + 31929014.3309356*a^2 - 371830.3507675773)*nl^18 + (-13149618.0938287*a^10 + 58570470.8640566*a^8 - 36061070.7996069*a^6 + 146449474.508026*a^4 - 23923945.0897456*a^2 + 232393.9692297358)*nl^16 + (11688549.4167366*a^10 - 45554810.672044*a^8 + 30126661.5095363*a^6 - 97577379.6746565*a^4 + 13278405.2396053*a^2 - 103286.2085465493)*nl^14 + (-8181984.591715651*a^10 + 27332886.4032264*a^8 - 19323494.1049603*a^6 + 48760888.1719811*a^4 - 5306291.949518524*a^2 + 30985.86256396478)*nl^12 + (4462900.686390355*a^10 - 12424039.2741938*a^8 + 9350450.592817651*a^6 - 17721122.3660487*a^4 + 1445787.764507711*a^2 - 5633.793193448141)*nl^10 - 1021.72634761684*a^10 + (-1859541.952662648*a^10 + 4141346.424731275*a^8 - 3305831.591429905*a^6 + 4427753.167389706*a^4 - 240734.1662214254*a^2 + 469.4827661206784)*nl^8 + (572166.7546654302*a^10 - 955695.3287841403*a^8 + 806502.9965970598*a^6 - 680803.9605026516*a^4 + 18500.2850019153*a^2)*nl^6 + (-122607.1617140208*a^10 + 136527.90411202*a^8 - 121445.9685410312*a^6 + 48601.08043016226*a^4)*nl^4 + (16347.62156186943*a^10 - 9101.860274134671*a^8 + 8511.814885498829*a^6)*nl^2)*nv^4 + ((742.0515977189701*a^10 - 7036.464860385076*a^8 + 147659.0348797335*a^6 - 67475.22379103288*a^4 + 7731.302334079416*a^2 - 170.486176417963)*nl^32 + (-11872.82556350352*a^10 + 105546.9729057762*a^8 - 2070317.436225171*a^6 + 894826.7197835139*a^4 - 99493.75076068015*a^2 + 2045.834117015556)*nl^30 + (89046.19172627642*a^10 - 738828.8103404331*a^8 + 13480245.4447804*a^6 - 5492501.992201689*a^4 + 590883.4270699671*a^2 - 11252.08764358556)*nl^28 + (-415548.8947226233*a^10 + 3201591.511475213*a^8 - 54029164.9559331*a^6 + 20674521.2232422*a^4 - 2144282.615111464*a^2 + 37506.95881195187)*nl^26 + (1350533.907848525*a^10 - 9604774.534425633*a^8 + 148931798.953454*a^6 - 53292344.8136132*a^4 + 5304981.660749285*a^2 - 84390.65732689168)*nl^24 + (-3241281.378836461*a^10 + 21130503.9757364*a^8 - 298707426.686037*a^6 + 99459512.5266211*a^4 - 9448662.210695839*a^2 + 135025.0517230267)*nl^22 + (5942349.194533512*a^10 - 35217506.6262273*a^8 + 449608159.457461*a^6 - 138501503.139024*a^4 + 12464476.5760573*a^2 - 157529.2270101978)*nl^20 + (-8489070.277905017*a^10 + 45279651.376578*a^8 - 516047924.277678*a^6 + 146072842.843561*a^4 - 12330736.8711868*a^2 + 135025.0517230267)*nl^18 + (9550204.062643144*a^10 - 45279651.376578*a^8 + 454028214.967191*a^6 - 117125971.837208*a^4 + 9147747.874737216*a^2 - 84390.6573268917)*nl^16 + (-8489070.277905017*a^10 + 35217506.6262273*a^8 - 304895504.399659*a^6 + 70958804.1241997*a^4 - 5026357.275602412*a^2 + 37506.95881195187)*nl^14 + (5942349.194533513*a^10 - 21130503.9757364*a^8 + 153994771.628235*a^6 - 31916813.5117972*a^4 + 1988252.959429215*a^2 - 11252.08764358556)*nl^12 + (-3241281.378836462*a^10 + 9604774.53442563*a^8 - 56841927.5530338*a^6 + 10310627.2587253*a^4 - 536171.729622945*a^2 + 2045.834117015556)*nl^10 + 742.0515977189701*a^10 + (1350533.907848526*a^10 - 3201591.511475213*a^8 + 14562077.212896*a^6 - 2253785.128290169*a^4 + 88348.77535480524*a^2 - 170.486176417963)*nl^8 + (-415548.8947226233*a^10 + 738828.8103404331*a^8 - 2348502.748026344*a^6 + 296909.7602921565*a^4 - 6718.122751727153*a^2)*nl^6 + (89046.19172627643*a^10 - 105546.9729057762*a^8 + 190932.3056043603*a^6 - 17648.81050008643*a^4)*nl^4 + (-11872.82556350352*a^10 + 7036.464860385076*a^8 - 3090.947908901912*a^6)*nl^2)*nv^3 + (5449.207187289811*a^10 - 3033.953424711557*a^8)*nl^2 + ((1021.72634761684*a^10 - 9101.860274134671*a^8 - 1975.347298701818*a^6 - 24689.37469546113*a^4 + 9480.603697484134*a^2 - 234.7413830603392)*nl^32 + (-16347.62156186943*a^10 + 136527.90411202*a^8 + 23398.95473907605*a^6 + 345262.4112560758*a^4 - 123017.3868707672*a^2 + 2816.896596724071)*nl^30 + (122607.1617140208*a^10 - 955695.3287841403*a^8 - 120173.8999833738*a^6 - 2241678.249042023*a^4 + 736721.5540454446*a^2 - 15492.93128198239)*nl^28 + (-572166.7546654302*a^10 + 4141346.424731275*a^8 + 331738.8394372659*a^6 + 8956603.299678212*a^4 - 2696242.218509714*a^2 + 51643.10427327463)*nl^26 + (1859541.952662648*a^10 - 12424039.2741938*a^8 - 428172.3368397355*a^6 - 24602857.4087679*a^4 + 6727930.180465329*a^2 - 116196.9846148679)*nl^24 + (-4462900.686390355*a^10 + 27332886.4032264*a^8 - 305518.0581911202*a^6 + 49150111.4868415*a^4 - 12087458.6663815*a^2 + 185915.1753837886)*nl^22 + (8181984.591715651*a^10 - 45554810.672044*a^8 + 2588358.762382761*a^6 - 73641762.2342207*a^4 + 16086190.6772338*a^2 - 216901.0379477534)*nl^20 + (-11688549.4167366*a^10 + 58570470.8640566*a^8 - 6001098.121431838*a^6 + 84066693.9864905*a^4 - 16055769.7992923*a^2 + 185915.1753837886)*nl^18 + (13149618.0938287*a^10 - 58570470.8640566*a^8 + 8674306.40551442*a^6 - 73474952.2421377*a^4 + 12019011.6910131*a^2 - 116196.9846148679)*nl^16 + (-11688549.4167366*a^10 + 45554810.672044*a^8 - 8825844.758575443*a^6 + 48927698.1640641*a^4 - 6664553.351420546*a^2 + 51643.10427327463)*nl^14 + (8181984.591715651*a^10 - 27332886.4032264*a^8 + 6543004.054383802*a^6 - 24436047.4166849*a^4 + 2660751.194244636*a^2 - 15492.93128198239)*nl^12 + (-4462900.686390355*a^10 + 12424039.2741938*a^8 - 3541136.933464701*a^6 + 8875725.727759171*a^4 - 724276.6494330144*a^2 + 2816.896596724071)*nl^10 + 1021.72634761684*a^10 + (1859541.952662648*a^10 - 4141346.424731275*a^8 + 1369393.704978921*a^6 - 2216404.007817323*a^4 + 120482.3137089759*a^2 - 234.7413830603392)*nl^8 + (-572166.7546654302*a^10 + 955695.3287841403*a^8 - 359632.7151083713*a^6 + 340596.3974915158*a^4 - 9250.14250095765*a^2)*nl^6 + (122607.1617140208*a^10 - 136527.9041120201*a^8 + 57607.35689978999*a^6 - 24300.54021508113*a^4)*nl^4 + (-16347.62156186943*a^10 + 9101.860274134671*a^8 - 4255.907442749414*a^6)*nl^2)*nv^2 + ((-247.35053257299*a^10 + 2345.488286795025*a^8 - 48189.36232361054*a^6 + 16608.80443031548*a^4 - 337.7265274507546*a^2)*nl^32 + (3957.608521167841*a^10 - 35182.32430192539*a^8 + 674651.0725305476*a^6 - 215914.4575941013*a^4 + 4052.718329409055*a^2)*nl^30 + (-29682.06390875881*a^10 + 246276.2701134777*a^8 - 4385231.971448559*a^6 + 1295486.745564608*a^4 - 22289.9508117498*a^2)*nl^28 + (138516.2982408744*a^10 - 1067197.170491737*a^8 + 17540927.8857942*a^6 - 4750118.067070229*a^4 + 74299.836039166*a^2)*nl^26 + (-450177.9692828418*a^10 + 3201591.511475211*a^8 - 48237551.6859341*a^6 + 11875295.1676756*a^4 - 167174.6310881235*a^2)*nl^24 + (1080427.12627882*a^10 - 7043501.325245462*a^8 + 96475103.3718683*a^6 - 21375531.301816*a^4 + 267479.4097409976*a^2)*nl^22 + (-1980783.064844504*a^10 + 11739168.8754091*a^8 - 144712655.057802*a^6 + 28500708.4024214*a^4 - 312059.3113644972*a^2)*nl^20 + (2829690.092635006*a^10 - 15093217.125526*a^8 + 165385891.494631*a^6 - 28500708.4024214*a^4 + 267479.4097409976*a^2)*nl^18 + (-3183401.354214381*a^10 + 15093217.125526*a^8 - 144712655.057802*a^6 + 21375531.301816*a^4 - 167174.6310881235*a^2)*nl^16 + (2829690.092635006*a^10 - 11739168.8754091*a^8 + 96475103.3718683*a^6 - 11875295.1676756*a^4 + 74299.83603916601*a^2)*nl^14 + (-1980783.064844504*a^10 + 7043501.325245462*a^8 - 48237551.6859341*a^6 + 4750118.067070229*a^4 - 22289.9508117498*a^2)*nl^12 + (1080427.126278821*a^10 - 3201591.511475211*a^8 + 17540927.8857942*a^6 - 1295486.745564608*a^4 + 4052.718329409055*a^2)*nl^10 - 247.35053257299*a^10 + (-450177.9692828419*a^10 + 1067197.170491738*a^8 - 4385231.971448559*a^6 + 215914.4575941013*a^4 - 337.7265274507546*a^2)*nl^8 + (138516.2982408745*a^10 - 246276.2701134777*a^8 + 674651.0725305476*a^6 - 16608.80443031548*a^4)*nl^6 + (-29682.06390875881*a^10 + 35182.32430192539*a^8 - 48189.36232361054*a^6)*nl^4 + (3957.608521167841*a^10 - 2345.488286795025*a^8)*nl^2)*nv + ((1934.29061997787*a^9 - 641.5802369130929*a^7 - 1422.133250031137*a^5 - 341.1774975656799*a^3)*nl^31 + (-29014.35929966805*a^9 + 8982.123316783296*a^7 + 18487.73225040478*a^5 + 4094.12997078816*a^3)*nl^29 + (203100.5150976763*a^9 - 58383.80155909143*a^7 - 110926.3935024287*a^5 - 22517.71483933488*a^3)*nl^27 + (-880102.2320899307*a^9 + 233535.2062363656*a^7 + 406730.1095089052*a^5 + 75059.04946444959*a^3)*nl^25 + (2640306.696269792*a^9 - 642221.8171500053*a^7 - 1016825.273772263*a^5 - 168882.8612950116*a^3)*nl^23 + (-5808674.731793541*a^9 + 1284443.63430001*a^7 + 1830285.492790074*a^5 + 270212.5780720185*a^3)*nl^21 + (9681124.552989237*a^9 - 1926665.451450016*a^7 - 2440380.657053431*a^5 - 315248.0077506883*a^3)*nl^19 + (-12447160.1395576*a^9 + 2201903.373085732*a^7 + 2440380.657053431*a^5 + 270212.5780720185*a^3)*nl^17 + (12447160.1395576*a^9 - 1926665.451450016*a^7 - 1830285.492790074*a^5 - 168882.8612950116*a^3)*nl^15 + (-9681124.552989237*a^9 + 1284443.63430001*a^7 + 1016825.273772263*a^5 + 75059.04946444958*a^3)*nl^13 + (5808674.731793541*a^9 - 642221.8171500053*a^7 - 406730.1095089053*a^5 - 22517.71483933488*a^3)*nl^11 - 1934.29061997787*a^9*nl + (-2640306.696269792*a^9 + 233535.2062363655*a^7 + 110926.3935024287*a^5 + 4094.12997078816*a^3)*nl^9 + (880102.2320899306*a^9 - 58383.80155909141*a^7 - 18487.73225040478*a^5 - 341.1774975656799*a^3)*nl^7 + ((2792.317406342085*a^9 + 28022.70214634566*a^7 - 50114.71581452205*a^5 + 18221.25465116096*a^3 - 1657.960477682254*a)*nl^31 + (-41884.76109513127*a^9 - 392317.8300488393*a^7 + 662933.4963485859*a^5 - 233173.5115237621*a^3 + 19895.52573218704*a)*nl^29 + (293193.3276659189*a^9 + 2550065.895317455*a^7 - 4057696.31341011*a^5 + 1376824.275494591*a^3 - 109425.3915270288*a)*nl^27 + (-1270504.419885649*a^9 - 10200263.5812698*a^7 + 15225299.6022177*a^5 - 4966894.100104233*a^3 + 364751.3050900958*a)*nl^25 + (3811513.259656945*a^9 + 28050724.848492*a^7 - 39104488.3646858*a^5 + 12213581.3084874*a^3 - 820690.4364527158*a)*nl^23 + (-8385329.171245281*a^9 - 56101449.696984*a^7 + 72678805.6465464*a^5 - 21617869.2600856*a^3 + 1313104.698324345*a)*nl^21 + (13975548.6187421*a^9 + 84152174.545476*a^7 - 100722951.845582*a^5 + 28335056.2198586*a^3 - 1531955.481378403*a)*nl^19 + (-17968562.5098113*a^9 - 96173913.7662583*a^7 + 105631651.681535*a^5 - 27846286.759603*a^3 + 1313104.698324345*a)*nl^17 + (17968562.5098113*a^9 + 84152174.545476*a^7 - 84132438.5971054*a^5 + 20518137.9745106*a^3 - 820690.4364527159*a)*nl^15 + (-13975548.6187421*a^9 - 56101449.696984*a^7 + 50558121.3152449*a^5 - 11195311.5996216*a^3 + 364751.3050900958*a)*nl^13 + (8385329.171245279*a^9 + 28050724.848492*a^7 - 22513975.1162098*a^5 + 4396663.063139366*a^3 - 109425.3915270288*a)*nl^11 - 2792.317406342085*a^9*nl + (-3811513.259656945*a^9 - 10200263.5812698*a^7 + 7181414.390835311*a^5 - 1176873.132662755*a^3 + 19895.52573218704*a)*nl^9 + (1270504.419885648*a^9 + 2550065.895317455*a^7 - 1543982.18485313*a^5 + 192442.7231691288*a^3 - 1657.960477682254*a)*nl^7 + (-293193.3276659189*a^9 - 392317.8300488393*a^7 + 198863.1956919126*a^5 - 14518.45570983065*a^3)*nl^5 + (41884.76109513127*a^9 + 28022.70214634566*a^7 - 11442.19075979927*a^5)*nl^3)*nv^7 + ((-1934.29061997787*a^9 + 641.5802369130929*a^7 - 14332.54986052582*a^5 + 20331.55117379083*a^3 - 2282.835733475376*a)*nl^31 + (29014.35929966805*a^9 - 8982.123316783296*a^7 + 202077.8312973925*a^5 - 263968.9877617152*a^3 + 27394.02880170451*a)*nl^29 + (-203100.5150976763*a^9 + 58383.80155909141*a^7 - 1322749.769558254*a^5 + 1581766.861584897*a^3 - 150667.1584093748*a)*nl^27 + (880102.2320899306*a^9 - 233535.2062363656*a^7 + 5327974.542733826*a^5 - 5792305.920864844*a^3 + 502223.8613645827*a)*nl^25 + (-2640306.696269792*a^9 + 642221.8171500053*a^7 - 14753612.5198952*a^5 + 14462000.039796*a^3 - 1130003.688070311*a)*nl^23 + (5808674.731793541*a^9 - 1284443.63430001*a^7 + 29710590.0945449*a^5 - 25997823.4993738*a^3 + 1808005.900912497*a)*nl^21 + (-9681124.552989237*a^9 + 1926665.451450016*a^7 - 44870932.7239491*a^5 + 34618729.2361531*a^3 - 2109340.217731247*a)*nl^19 + (12447160.1395576*a^9 - 2201903.373085732*a^7 + 51629691.778378*a^5 - 34573693.8064744*a^3 + 1808005.900912498*a)*nl^17 + (-12447160.1395576*a^9 + 1926665.451450016*a^7 - 45481027.8882124*a^5 + 25896493.7825968*a^3 - 1130003.688070311*a)*nl^15 + (9681124.552989237*a^9 - 1284443.63430001*a^7 + 30524050.3135628*a^5 - 14368176.2279654*a^3 + 502223.8613645827*a)*nl^13 + (-5808674.731793542*a^9 + 642221.8171500053*a^7 - 15363707.6841586*a^5 + 5739764.586239729*a^3 - 150667.1584093748*a)*nl^11 + 1934.29061997787*a^9*nl + (2640306.696269792*a^9 - 233535.2062363655*a^7 + 5623778.258740302*a^5 - 1563343.27671635*a^3 + 27394.02880170451*a)*nl^9 + (-880102.2320899307*a^9 + 58383.80155909141*a^7 - 1415188.430810278*a^5 + 260216.0352884927*a^3 - 2282.835733475376*a)*nl^7 + (203100.5150976763*a^9 - 8982.123316783298*a^7 + 219143.4302977662*a^5 - 19990.37367622516*a^3)*nl^5 + (-29014.35929966805*a^9 + 641.5802369130929*a^7 - 15754.68311055695*a^5)*nl^3)*nv^6 + (-203100.5150976763*a^9 + 8982.123316783296*a^7 + 1422.133250031137*a^5)*nl^5 + ((-8376.952219026254*a^9 - 84068.10643903699*a^7 + 138901.9566837669*a^5 - 40145.30824365223*a^3 + 3315.920955364508*a)*nl^31 + (125654.2832853938*a^9 + 1176953.490146518*a^7 - 1828609.818408568*a^5 + 510780.610343488*a^3 - 39791.05146437409*a)*nl^29 + (-879579.9829977567*a^9 - 7650197.685952367*a^7 + 11131849.5810886*a^5 - 2998033.281116983*a^3 + 218850.7830540575*a)*nl^27 + (3811513.259656946*a^9 + 30600790.7438095*a^7 - 41510941.370086*a^5 + 10748403.9673011*a^3 - 729502.6101801917*a)*nl^25 + (-11434539.7789708*a^9 - 84152174.545476*a^7 + 105859832.143499*a^5 - 26260048.0929333*a^3 + 1641380.872905432*a)*nl^23 + (25155987.5137358*a^9 + 168304349.090952*a^7 - 195129151.038521*a^5 + 46168355.2817049*a^3 - 2626209.396648691*a)*nl^21 + (-41926645.8562264*a^9 - 252456523.636428*a^7 + 267807956.685067*a^5 - 60091498.6615064*a^3 + 3063910.962756805*a)*nl^19 + (53905687.529434*a^9 + 288521741.298775*a^7 - 277625356.356975*a^5 + 58625190.2807396*a^3 - 2626209.396648691*a)*nl^17 + (-53905687.5294339*a^9 - 252456523.636428*a^7 + 218036416.939639*a^5 - 42869161.4249796*a^3 + 1641380.872905432*a)*nl^15 + (41926645.8562264*a^9 + 168304349.090952*a^7 - 128767098.044617*a^5 + 23205238.9663358*a^3 - 729502.6101801917*a)*nl^13 + (-25155987.5137358*a^9 - 84152174.545476*a^7 + 56088292.3980703*a^5 - 9037710.856406532*a^3 + 218850.7830540575*a)*nl^11 + 8376.952219026254*a^9*nl + (11434539.7789708*a^9 + 30600790.7438095*a^7 - 17379285.735939*a^5 + 2398179.852621472*a^3 - 39791.05146437409*a)*nl^9 + (-3811513.259656945*a^9 - 7650197.685952367*a^7 + 3590707.195417656*a^5 - 388588.2452795878*a^3 + 3315.920955364508*a)*nl^7 + (879579.9829977567*a^9 + 1176953.490146518*a^7 - 436398.916438548*a^5 + 29036.9114196613*a^3)*nl^5 + (-125654.2832853938*a^9 - 84068.10643903699*a^7 + 22884.38151959854*a^5)*nl^3)*nv^5 + ((5802.871859933609*a^9 - 1924.740710739279*a^7 + 27242.9664710205*a^5 - 41004.27984514735*a^3 + 4565.671466950752*a)*nl^31 + (-87043.07789900413*a^9 + 26946.36995034989*a^7 - 385667.9303443803*a^5 + 532032.1054942185*a^3 - 54788.05760340902*a)*nl^29 + (609301.5452930289*a^9 - 175151.4046772742*a^7 + 2534573.14561408*a^5 - 3186051.438009129*a^3 + 301334.3168187496*a)*nl^27 + (-2640306.696269792*a^9 + 700605.6187090968*a^7 - 10249218.9759587*a^5 + 11659670.8911941*a^3 - 1004447.722729165*a)*nl^25 + (7920920.088809375*a^9 - 1926665.451450016*a^7 + 28490399.7660182*a^5 - 29092882.940887*a^3 + 2260007.376140622*a)*nl^23 + (-17426024.1953806*a^9 + 3853330.902900031*a^7 - 57590894.6962998*a^5 + 52265859.5768196*a^3 - 3616011.801824995*a)*nl^21 + (29043373.6589677*a^9 - 5779996.354350047*a^7 + 87301484.7908448*a^5 - 69552706.4800568*a^3 + 4218680.435462494*a)*nl^19 + (-37341480.4186728*a^9 + 6605710.119257197*a^7 - 100819002.899703*a^5 + 69417600.1910208*a^3 - 3616011.801824995*a)*nl^17 + (37341480.4186728*a^9 - 5779996.354350047*a^7 + 89131770.2836348*a^5 - 51961870.4264886*a^3 + 2260007.376140622*a)*nl^15 + (-29043373.6589677*a^9 + 3853330.902900031*a^7 - 60031275.3533533*a^5 + 28811411.5053953*a^3 - 1004447.722729165*a)*nl^13 + (17426024.1953806*a^9 - 1926665.451450016*a^7 + 30320685.2588083*a^5 - 11502046.8873188*a^3 + 301334.3168187496*a)*nl^11 - 5802.871859933609*a^9*nl + (-7920920.088809375*a^9 + 700605.6187090967*a^7 - 11136630.1239782*a^5 + 3130780.683403488*a^3 - 54788.05760340902*a)*nl^9 + (2640306.696269792*a^9 - 175151.4046772742*a^7 + 2811889.129370151*a^5 - 520773.2480745511*a^3 + 4565.671466950752*a)*nl^7 + (-609301.5452930289*a^9 + 26946.36995034989*a^7 - 436864.7273455013*a^5 + 39980.74735245031*a^3)*nl^5 + (87043.07789900413*a^9 - 1924.740710739279*a^7 + 31509.36622111391*a^5)*nl^3)*nv^4 + (29014.35929966805*a^9 - 641.5802369130929*a^7)*nl^3 + ((8376.952219026254*a^9 + 84068.10643903699*a^7 - 127459.7659239676*a^5 + 25626.85253382158*a^3 - 1657.960477682254*a)*nl^31 + (-125654.2832853938*a^9 - 1176953.490146518*a^7 + 1668419.147771378*a^5 - 322040.6861156896*a^3 + 19895.52573218704*a)*nl^29 + (879579.9829977567*a^9 + 7650197.685952367*a^7 - 10090610.2219469*a^5 + 1865593.735750192*a^3 - 109425.3915270288*a)*nl^27 + (-3811513.259656947*a^9 - 30600790.7438095*a^7 + 37345983.9335191*a^5 - 6596125.63428957*a^3 + 364751.3050900958*a)*nl^25 + (11434539.7789708*a^9 + 84152174.545476*a^7 - 94406199.1929394*a^5 + 15879352.2604044*a^3 - 820690.4364527158*a)*nl^23 + (-25155987.5137358*a^9 - 168304349.090952*a^7 + 172221885.137403*a^5 - 27483102.7831529*a^3 + 1313104.698324345*a)*nl^21 + (41926645.8562264*a^9 + 252456523.636428*a^7 - 233447057.83339*a^5 + 35177828.663437*a^3 - 1531955.481378403*a)*nl^19 + (-53905687.5294339*a^9 - 288521741.298775*a^7 + 238355757.669344*a^5 - 33711520.2826702*a^3 + 1313104.698324345*a)*nl^17 + (53905687.529434*a^9 + 252456523.636428*a^7 - 183675518.087962*a^5 + 24183908.9264276*a^3 - 820690.4364527158*a)*nl^15 + (-41926645.8562264*a^9 - 168304349.090952*a^7 + 105859832.143499*a^5 - 12824543.1338069*a^3 + 364751.3050900958*a)*nl^13 + (25155987.5137358*a^9 + 84152174.545476*a^7 - 44634659.4475112*a^5 + 4885432.523394966*a^3 - 109425.3915270288*a)*nl^11 - 8376.952219026254*a^9*nl + (-11434539.7789708*a^9 - 30600790.7438095*a^7 + 13214328.2993721*a^5 - 1265740.307254682*a^3 + 19895.52573218704*a)*nl^9 + (3811513.259656945*a^9 + 7650197.685952367*a^7 - 2549467.836275922*a^5 + 199848.3210517894*a^3 - 1657.960477682254*a)*nl^7 + (-879579.9829977567*a^9 - 1176953.490146518*a^7 + 276208.2458013581*a^5 - 14518.45570983065*a^3)*nl^5 + (125654.2832853938*a^9 + 84068.10643903699*a^7 - 11442.19075979927*a^5)*nl^3)*nv^3 + ((-5802.871859933609*a^9 + 1924.740710739279*a^7 - 11488.28336046355*a^5 + 21013.90616892219*a^3 - 2282.835733475376*a)*nl^31 + (87043.07789900413*a^9 - 26946.36995034989*a^7 + 165102.366796583*a^5 - 272157.2477032915*a^3 + 27394.02880170451*a)*nl^29 + (-609301.5452930289*a^9 + 175151.4046772743*a^7 - 1100896.982553397*a^5 + 1626802.291263567*a^3 - 150667.1584093748*a)*nl^27 + (2640306.696269792*a^9 - 700605.6187090968*a^7 + 4514514.323716015*a^5 - 5942424.019793743*a^3 + 502223.8613645827*a)*nl^25 + (-7920920.088809375*a^9 + 1926665.451450016*a^7 - 12719961.9723507*a^5 + 14799765.762386*a^3 - 1130003.688070311*a)*nl^23 + (17426024.1953806*a^9 - 3853330.902900031*a^7 + 26050019.1089648*a^5 - 26538248.6555178*a^3 + 1808005.900912497*a)*nl^21 + (-29043373.6589677*a^9 + 5779996.354350047*a^7 - 39990171.4098422*a^5 + 35249225.2516544*a^3 - 2109340.217731247*a)*nl^19 + (37341480.4186728*a^9 - 6605710.119257197*a^7 + 46748930.4642712*a^5 - 35114118.9626184*a^3 + 1808005.900912498*a)*nl^17 + (-37341480.4186728*a^9 + 5779996.354350047*a^7 - 41820456.9026323*a^5 + 26234259.5051868*a^3 - 1130003.688070311*a)*nl^15 + (29043373.6589677*a^9 - 3853330.902900031*a^7 + 28490399.7660182*a^5 - 14518294.3268943*a^3 + 502223.8613645827*a)*nl^13 + (-17426024.1953806*a^9 + 1926665.451450016*a^7 - 14550247.4651408*a^5 + 5784800.015918399*a^3 - 150667.1584093748*a)*nl^11 + 5802.871859933609*a^9*nl + (7920920.088809375*a^9 - 700605.6187090967*a^7 + 5401925.471735444*a^5 - 1571531.536657927*a^3 + 27394.02880170451*a)*nl^9 + (-2640306.696269792*a^9 + 175151.4046772742*a^7 - 1378212.966309468*a^5 + 260898.3902836241*a^3 - 2282.835733475376*a)*nl^7 + (609301.5452930289*a^9 - 26946.36995034989*a^7 + 216299.1637977039*a^5 - 19990.37367622516*a^3)*nl^5 + (-87043.07789900413*a^9 + 1924.740710739279*a^7 - 15754.68311055695*a^5)*nl^3)*nv^2 + ((-2792.317406342085*a^9 - 28022.70214634566*a^7 + 38672.52505472278*a^5 - 3702.79894133031*a^3)*nl^31 + (41884.76109513127*a^9 + 392317.8300488393*a^7 - 502742.8257113961*a^5 + 44433.58729596373*a^3)*nl^29 + (-293193.3276659189*a^9 - 2550065.895317456*a^7 + 3016456.954268376*a^5 - 244384.7301278005*a^3)*nl^27 + (1270504.419885649*a^9 + 10200263.5812698*a^7 - 11060342.1656507*a^5 + 814615.7670926682*a^3)*nl^25 + (-3811513.259656945*a^9 - 28050724.848492*a^7 + 27650855.4141268*a^5 - 1832885.475958503*a^3)*nl^23 + (8385329.171245281*a^9 + 56101449.696984*a^7 - 49771539.7454282*a^5 + 2932616.761533606*a^3)*nl^21 + (-13975548.6187421*a^9 - 84152174.545476*a^7 + 66362052.9939043*a^5 - 3421386.221789206*a^3)*nl^19 + (17968562.5098113*a^9 + 96173913.7662583*a^7 - 66362052.9939043*a^5 + 2932616.761533606*a^3)*nl^17 + (-17968562.5098113*a^9 - 84152174.545476*a^7 + 49771539.7454282*a^5 - 1832885.475958503*a^3)*nl^15 + (13975548.6187421*a^9 + 56101449.696984*a^7 - 27650855.4141268*a^5 + 814615.7670926682*a^3)*nl^13 + (-8385329.171245281*a^9 - 28050724.848492*a^7 + 11060342.1656507*a^5 - 244384.7301278005*a^3)*nl^11 + 2792.317406342085*a^9*nl + (3811513.259656945*a^9 + 10200263.5812698*a^7 - 3016456.954268376*a^5 + 44433.58729596373*a^3)*nl^9 + (-1270504.419885649*a^9 - 2550065.895317456*a^7 + 502742.8257113961*a^5 - 3702.79894133031*a^3)*nl^7 + (293193.3276659189*a^9 + 392317.8300488393*a^7 - 38672.52505472278*a^5)*nl^5 + (-41884.76109513127*a^9 - 28022.70214634566*a^7)*nl^3)*nv)*sqrt(-1.0*nl^2 + 1.0) + (((-6634.012962169122*a^7 + 58248.2683574047*a^5 - 21171.26556842952*a^3 + 480.11579705128*a)*nl^32 + (99510.19443253685*a^7 - 815475.7570036658*a^5 + 275226.4523895838*a^3 - 5761.38956461536*a)*nl^30 + (-696571.3610277579*a^7 + 5300592.420523828*a^5 - 1651358.714337503*a^3 + 31687.64260538448*a)*nl^28 + (3018475.897786951*a^7 - 21202369.6820953*a^5 + 6054981.952570844*a^3 - 105625.4753512816*a)*nl^26 + (-9055427.693360854*a^7 + 58306516.6257621*a^5 - 15137454.8814271*a^3 + 237657.3195403836*a)*nl^24 + (19921940.9253939*a^7 - 116613033.251524*a^5 + 27247418.7865688*a^3 - 380251.7112646137*a)*nl^22 + (-33203234.8756565*a^7 + 174919549.877286*a^5 - 36329891.7154251*a^3 + 443626.9964753826*a)*nl^20 + (42689873.4115583*a^7 - 199908057.002613*a^5 + 36329891.7154251*a^3 - 380251.7112646137*a)*nl^18 + (-42689873.4115583*a^7 + 174919549.877286*a^5 - 27247418.7865688*a^3 + 237657.3195403836*a)*nl^16 + (33203234.8756565*a^7 - 116613033.251524*a^5 + 15137454.8814271*a^3 - 105625.4753512816*a)*nl^14 + (-19921940.9253939*a^7 + 58306516.6257621*a^5 - 6054981.952570844*a^3 + 31687.64260538448*a)*nl^12 + (9055427.693360852*a^7 - 21202369.6820953*a^5 + 1651358.714337503*a^3 - 5761.38956461536*a)*nl^10 + 6634.012962169122*a^7*nl^2 + (-3018475.897786951*a^7 + 5300592.420523828*a^5 - 275226.4523895838*a^3 + 480.11579705128*a)*nl^8 + (696571.3610277579*a^7 - 815475.7570036658*a^5 + 21171.26556842952*a^3)*nl^6 + (-99510.19443253685*a^7 + 58248.2683574047*a^5)*nl^4)*nv^6 + ((11294.48766992642*a^7 - 36443.55577869599*a^5 + 15251.10565494534*a^3 - 465.7157104548775*a)*nl^32 + (-169417.3150488964*a^7 + 510209.7809017438*a^5 - 198264.3735142894*a^3 + 5588.58852545853*a)*nl^30 + (1185921.205342275*a^7 - 3316363.575861335*a^5 + 1189586.241085737*a^3 - 30737.23689002192*a)*nl^28 + (-5138991.889816523*a^7 + 13265454.3034453*a^5 - 4361816.217314367*a^3 + 102457.456300073*a)*nl^26 + (15416975.6694496*a^7 - 36479999.3344747*a^5 + 10904540.5432859*a^3 - 230529.2766751644*a)*nl^24 + (-33917346.472789*a^7 + 72959998.6689494*a^5 - 19628172.9779146*a^3 + 368846.842680263*a)*nl^22 + (56528910.7879817*a^7 - 109439998.003424*a^5 + 26170897.3038862*a^3 - 430321.3164603068*a)*nl^20 + (-72680028.1559765*a^7 + 125074283.432485*a^5 - 26170897.3038862*a^3 + 368846.842680263*a)*nl^18 + (72680028.1559765*a^7 - 109439998.003424*a^5 + 19628172.9779146*a^3 - 230529.2766751644*a)*nl^16 + (-56528910.7879817*a^7 + 72959998.6689494*a^5 - 10904540.5432859*a^3 + 102457.4563000731*a)*nl^14 + (33917346.472789*a^7 - 36479999.3344747*a^5 + 4361816.217314368*a^3 - 30737.23689002192*a)*nl^12 + (-15416975.6694496*a^7 + 13265454.3034453*a^5 - 1189586.241085737*a^3 + 5588.58852545853*a)*nl^10 - 11294.48766992642*a^7*nl^2 + (5138991.889816523*a^7 - 3316363.575861334*a^5 + 198264.3735142894*a^3 - 465.7157104548775*a)*nl^8 + (-1185921.205342274*a^7 + 510209.7809017438*a^5 - 15251.10565494534*a^3)*nl^6 + (169417.3150488964*a^7 - 36443.55577869599*a^5)*nl^4)*nv^5 + ((13268.02592433824*a^7 - 116496.5367148094*a^5 + 42342.53113685905*a^3 - 960.2315941025599*a)*nl^32 + (-199020.3888650737*a^7 + 1630951.514007332*a^5 - 550452.9047791676*a^3 + 11522.77912923072*a)*nl^30 + (1393142.722055516*a^7 - 10601184.8410477*a^5 + 3302717.428675006*a^3 - 63375.28521076895*a)*nl^28 + (-6036951.795573902*a^7 + 42404739.3641906*a^5 - 12109963.9051417*a^3 + 211250.9507025632*a)*nl^26 + (18110855.3867217*a^7 - 116613033.251524*a^5 + 30274909.7628542*a^3 - 475314.6390807671*a)*nl^24 + (-39843881.8507877*a^7 + 233226066.503048*a^5 - 54494837.5731376*a^3 + 760503.4225292273*a)*nl^22 + (66406469.7513129*a^7 - 349839099.754573*a^5 + 72659783.4308501*a^3 - 887253.9929507653*a)*nl^20 + (-85379746.8231166*a^7 + 399816114.005226*a^5 - 72659783.4308501*a^3 + 760503.4225292273*a)*nl^18 + (85379746.8231166*a^7 - 349839099.754573*a^5 + 54494837.5731376*a^3 - 475314.6390807671*a)*nl^16 + (-66406469.7513129*a^7 + 233226066.503048*a^5 - 30274909.7628542*a^3 + 211250.9507025632*a)*nl^14 + (39843881.8507877*a^7 - 116613033.251524*a^5 + 12109963.9051417*a^3 - 63375.28521076895*a)*nl^12 + (-18110855.3867217*a^7 + 42404739.3641906*a^5 - 3302717.428675006*a^3 + 11522.77912923072*a)*nl^10 - 13268.02592433824*a^7*nl^2 + (6036951.795573902*a^7 - 10601184.8410477*a^5 + 550452.9047791676*a^3 - 960.2315941025599*a)*nl^8 + (-1393142.722055516*a^7 + 1630951.514007332*a^5 - 42342.53113685905*a^3)*nl^6 + (199020.3888650737*a^7 - 116496.5367148094*a^5)*nl^4)*nv^4 + ((-22588.97533985285*a^7 + 72887.11155739198*a^5 - 30502.21130989068*a^3 + 931.431420909755*a)*nl^32 + (338834.6300977927*a^7 - 1020419.561803488*a^5 + 396528.7470285788*a^3 - 11177.17705091706*a)*nl^30 + (-2371842.410684549*a^7 + 6632727.15172267*a^5 - 2379172.482171473*a^3 + 61474.47378004383*a)*nl^28 + (10277983.779633*a^7 - 26530908.6068907*a^5 + 8723632.434628734*a^3 - 204914.9126001461*a)*nl^26 + (-30833951.3388991*a^7 + 72959998.6689494*a^5 - 21809081.0865718*a^3 + 461058.5533503287*a)*nl^24 + (67834692.9455781*a^7 - 145919997.337899*a^5 + 39256345.9558293*a^3 - 737693.685360526*a)*nl^22 + (-113057821.575963*a^7 + 218879996.006848*a^5 - 52341794.6077724*a^3 + 860642.6329206135*a)*nl^20 + (145360056.311953*a^7 - 250148566.864969*a^5 + 52341794.6077724*a^3 - 737693.685360526*a)*nl^18 + (-145360056.311953*a^7 + 218879996.006848*a^5 - 39256345.9558293*a^3 + 461058.5533503287*a)*nl^16 + (113057821.575963*a^7 - 145919997.337899*a^5 + 21809081.0865718*a^3 - 204914.9126001461*a)*nl^14 + (-67834692.9455781*a^7 + 72959998.6689494*a^5 - 8723632.434628734*a^3 + 61474.47378004383*a)*nl^12 + (30833951.3388991*a^7 - 26530908.6068907*a^5 + 2379172.482171473*a^3 - 11177.17705091706*a)*nl^10 + 22588.97533985285*a^7*nl^2 + (-10277983.779633*a^7 + 6632727.15172267*a^5 - 396528.7470285788*a^3 + 931.431420909755*a)*nl^8 + (2371842.410684549*a^7 - 1020419.561803488*a^5 + 30502.21130989068*a^3)*nl^6 + (-338834.6300977927*a^7 + 72887.11155739198*a^5)*nl^4)*nv^3 + ((-6634.012962169122*a^7 + 58248.2683574047*a^5 - 21171.26556842952*a^3 + 480.11579705128*a)*nl^32 + (99510.19443253685*a^7 - 815475.7570036658*a^5 + 275226.4523895838*a^3 - 5761.38956461536*a)*nl^30 + (-696571.3610277579*a^7 + 5300592.420523828*a^5 - 1651358.714337503*a^3 + 31687.64260538448*a)*nl^28 + (3018475.897786951*a^7 - 21202369.6820953*a^5 + 6054981.952570844*a^3 - 105625.4753512816*a)*nl^26 + (-9055427.693360852*a^7 + 58306516.6257621*a^5 - 15137454.8814271*a^3 + 237657.3195403836*a)*nl^24 + (19921940.9253939*a^7 - 116613033.251524*a^5 + 27247418.7865688*a^3 - 380251.7112646137*a)*nl^22 + (-33203234.8756565*a^7 + 174919549.877286*a^5 - 36329891.7154251*a^3 + 443626.9964753826*a)*nl^20 + (42689873.4115583*a^7 - 199908057.002613*a^5 + 36329891.7154251*a^3 - 380251.7112646137*a)*nl^18 + (-42689873.4115583*a^7 + 174919549.877286*a^5 - 27247418.7865688*a^3 + 237657.3195403836*a)*nl^16 + (33203234.8756565*a^7 - 116613033.251524*a^5 + 15137454.8814271*a^3 - 105625.4753512816*a)*nl^14 + (-19921940.9253939*a^7 + 58306516.6257621*a^5 - 6054981.952570844*a^3 + 31687.64260538448*a)*nl^12 + (9055427.693360854*a^7 - 21202369.6820953*a^5 + 1651358.714337503*a^3 - 5761.38956461536*a)*nl^10 + 6634.012962169122*a^7*nl^2 + (-3018475.897786951*a^7 + 5300592.420523828*a^5 - 275226.4523895838*a^3 + 480.11579705128*a)*nl^8 + (696571.3610277578*a^7 - 815475.7570036658*a^5 + 21171.26556842952*a^3)*nl^6 + (-99510.19443253685*a^7 + 58248.2683574047*a^5)*nl^4)*nv^2 + ((11294.48766992642*a^7 - 36443.55577869599*a^5 + 15251.10565494534*a^3 - 465.7157104548775*a)*nl^32 + (-169417.3150488964*a^7 + 510209.7809017438*a^5 - 198264.3735142894*a^3 + 5588.58852545853*a)*nl^30 + (1185921.205342274*a^7 - 3316363.575861335*a^5 + 1189586.241085737*a^3 - 30737.23689002192*a)*nl^28 + (-5138991.889816523*a^7 + 13265454.3034453*a^5 - 4361816.217314368*a^3 + 102457.456300073*a)*nl^26 + (15416975.6694496*a^7 - 36479999.3344747*a^5 + 10904540.5432859*a^3 - 230529.2766751644*a)*nl^24 + (-33917346.472789*a^7 + 72959998.6689494*a^5 - 19628172.9779146*a^3 + 368846.842680263*a)*nl^22 + (56528910.7879817*a^7 - 109439998.003424*a^5 + 26170897.3038862*a^3 - 430321.3164603068*a)*nl^20 + (-72680028.1559765*a^7 + 125074283.432485*a^5 - 26170897.3038862*a^3 + 368846.842680263*a)*nl^18 + (72680028.1559765*a^7 - 109439998.003424*a^5 + 19628172.9779146*a^3 - 230529.2766751644*a)*nl^16 + (-56528910.7879817*a^7 + 72959998.6689494*a^5 - 10904540.5432859*a^3 + 102457.4563000731*a)*nl^14 + (33917346.472789*a^7 - 36479999.3344747*a^5 + 4361816.217314367*a^3 - 30737.23689002192*a)*nl^12 + (-15416975.6694496*a^7 + 13265454.3034453*a^5 - 1189586.241085737*a^3 + 5588.58852545853*a)*nl^10 - 11294.48766992642*a^7*nl^2 + (5138991.889816523*a^7 - 3316363.575861335*a^5 + 198264.3735142894*a^3 - 465.7157104548775*a)*nl^8 + (-1185921.205342275*a^7 + 510209.7809017438*a^5 - 15251.10565494534*a^3)*nl^6 + (169417.3150488964*a^7 - 36443.55577869599*a^5)*nl^4)*nv + (((1748.76826529104*a^8 + 35820.7217794803*a^6 - 47426.15068109697*a^4 + 4966.249899464528*a^2)*nl^31 + (-26231.52397936559*a^8 - 501490.1049127242*a^6 + 616539.9588542606*a^4 - 59594.99879357434*a^2)*nl^29 + (183620.6678555591*a^8 + 3259685.681932708*a^6 - 3699239.753125563*a^4 + 327772.4933646589*a^2)*nl^27 + (-795689.560707423*a^8 - 13038742.7277308*a^6 + 13563879.0947937*a^4 - 1092574.977882196*a^2)*nl^25 + (2387068.682122269*a^8 + 35856542.5012598*a^6 - 33909697.7369843*a^4 + 2458293.700234942*a^2)*nl^23 + (-5251551.100668993*a^8 - 71713085.0025196*a^6 + 61037455.9265718*a^4 - 3933269.920375907*a^2)*nl^21 + (8752585.167781653*a^8 + 107569627.503779*a^6 - 81383274.5687624*a^4 + 4588814.907105224*a^2)*nl^19 + (-11253323.7871478*a^8 - 122936717.147176*a^6 + 81383274.5687624*a^4 - 3933269.920375907*a^2)*nl^17 + (11253323.7871478*a^8 + 107569627.503779*a^6 - 61037455.9265718*a^4 + 2458293.700234942*a^2)*nl^15 + (-8752585.167781655*a^8 - 71713085.0025196*a^6 + 33909697.7369843*a^4 - 1092574.977882196*a^2)*nl^13 + (5251551.100668991*a^8 + 35856542.5012598*a^6 - 13563879.0947937*a^4 + 327772.4933646589*a^2)*nl^11 + (-2387068.682122269*a^8 - 13038742.7277308*a^6 + 3699239.753125564*a^4 - 59594.99879357434*a^2)*nl^9 - 1748.76826529104*a^8*nl + (795689.560707423*a^8 + 3259685.681932707*a^6 - 616539.9588542606*a^4 + 4966.249899464528*a^2)*nl^7 + (-183620.6678555591*a^8 - 501490.1049127242*a^6 + 47426.15068109697*a^4)*nl^5 + (26231.52397936559*a^8 + 35820.7217794803*a^6)*nl^3)*nv^6 + ((2407.868425883686*a^8 - 26302.86255025803*a^6 + 30655.1945279348*a^4 - 4119.861118470091*a^2)*nl^31 + (-36118.02638825528*a^8 + 368240.0757036123*a^6 - 398517.5288631524*a^4 + 49438.33342164109*a^2)*nl^29 + (252826.184717787*a^8 - 2393560.49207348*a^6 + 2391105.173178914*a^4 - 271910.833819026*a^2)*nl^27 + (-1095580.133777077*a^8 + 9574241.96829392*a^6 - 8767385.634989353*a^4 + 906369.4460634199*a^2)*nl^25 + (3286740.401331231*a^8 - 26329165.4128083*a^6 + 21918464.0874734*a^4 - 2039331.253642695*a^2)*nl^23 + (-7230828.882928707*a^8 + 52658330.8256165*a^6 - 39453235.3574521*a^4 + 3262930.005828312*a^2)*nl^21 + (12051381.4715479*a^8 - 78987496.2384248*a^6 + 52604313.8099361*a^4 - 3806751.673466364*a^2)*nl^19 + (-15494633.3205615*a^8 + 90271424.2724855*a^6 - 52604313.8099361*a^4 + 3262930.005828312*a^2)*nl^17 + (15494633.3205615*a^8 - 78987496.2384248*a^6 + 39453235.3574521*a^4 - 2039331.253642695*a^2)*nl^15 + (-12051381.4715478*a^8 + 52658330.8256165*a^6 - 21918464.0874734*a^4 + 906369.44606342*a^2)*nl^13 + (7230828.882928707*a^8 - 26329165.4128083*a^6 + 8767385.634989353*a^4 - 271910.833819026*a^2)*nl^11 + (-3286740.40133123*a^8 + 9574241.96829392*a^6 - 2391105.173178914*a^4 + 49438.33342164109*a^2)*nl^9 - 2407.868425883686*a^8*nl + (1095580.133777077*a^8 - 2393560.49207348*a^6 + 398517.5288631525*a^4 - 4119.861118470091*a^2)*nl^7 + (-252826.184717787*a^8 + 368240.0757036123*a^6 - 30655.1945279348*a^4)*nl^5 + (36118.02638825528*a^8 - 26302.86255025803*a^6)*nl^3)*nv^5 + ((-3497.536530582079*a^8 - 71641.4435589606*a^6 + 94852.30136219395*a^4 - 9932.499798929057*a^2)*nl^31 + (52463.04795873119*a^8 + 1002980.209825448*a^6 - 1233079.917708521*a^4 + 119189.9975871487*a^2)*nl^29 + (-367241.3357111183*a^8 - 6519371.363865415*a^6 + 7398479.506251127*a^4 - 655544.9867293178*a^2)*nl^27 + (1591379.121414846*a^8 + 26077485.4554617*a^6 - 27127758.1895875*a^4 + 2185149.955764392*a^2)*nl^25 + (-4774137.364244537*a^8 - 71713085.0025196*a^6 + 67819395.4739687*a^4 - 4916587.400469883*a^2)*nl^23 + (10503102.201338*a^8 + 143426170.005039*a^6 - 122074911.853144*a^4 + 7866539.840751814*a^2)*nl^21 + (-17505170.3355633*a^8 - 215139255.007559*a^6 + 162766549.137525*a^4 - 9177629.814210448*a^2)*nl^19 + (22506647.5742957*a^8 + 245873434.294353*a^6 - 162766549.137525*a^4 + 7866539.840751814*a^2)*nl^17 + (-22506647.5742957*a^8 - 215139255.007559*a^6 + 122074911.853144*a^4 - 4916587.400469883*a^2)*nl^15 + (17505170.3355633*a^8 + 143426170.005039*a^6 - 67819395.4739687*a^4 + 2185149.955764392*a^2)*nl^13 + (-10503102.201338*a^8 - 71713085.0025196*a^6 + 27127758.1895875*a^4 - 655544.9867293178*a^2)*nl^11 + (4774137.364244537*a^8 + 26077485.4554617*a^6 - 7398479.506251127*a^4 + 119189.9975871487*a^2)*nl^9 + 3497.536530582079*a^8*nl + (-1591379.121414846*a^8 - 6519371.363865415*a^6 + 1233079.917708521*a^4 - 9932.499798929057*a^2)*nl^7 + (367241.3357111183*a^8 + 1002980.209825448*a^6 - 94852.30136219395*a^4)*nl^5 + (-52463.04795873119*a^8 - 71641.4435589606*a^6)*nl^3)*nv^4 + ((-4815.736851767371*a^8 + 52605.72510051605*a^6 - 61310.3890558696*a^4 + 8239.722236940182*a^2)*nl^31 + (72236.05277651057*a^8 - 736480.1514072246*a^6 + 797035.0577263049*a^4 - 98876.66684328219*a^2)*nl^29 + (-505652.3694355739*a^8 + 4787120.98414696*a^6 - 4782210.346357829*a^4 + 543821.667638052*a^2)*nl^27 + (2191160.267554154*a^8 - 19148483.9365878*a^6 + 17534771.2699787*a^4 - 1812738.89212684*a^2)*nl^25 + (-6573480.802662461*a^8 + 52658330.8256165*a^6 - 43836928.1749468*a^4 + 4078662.50728539*a^2)*nl^23 + (14461657.7658574*a^8 - 105316661.651233*a^6 + 78906470.7149042*a^4 - 6525860.011656624*a^2)*nl^21 + (-24102762.9430957*a^8 + 157974992.47685*a^6 - 105208627.619872*a^4 + 7613503.346932728*a^2)*nl^19 + (30989266.641123*a^8 - 180542848.544971*a^6 + 105208627.619872*a^4 - 6525860.011656624*a^2)*nl^17 + (-30989266.641123*a^8 + 157974992.47685*a^6 - 78906470.7149042*a^4 + 4078662.50728539*a^2)*nl^15 + (24102762.9430957*a^8 - 105316661.651233*a^6 + 43836928.1749468*a^4 - 1812738.89212684*a^2)*nl^13 + (-14461657.7658574*a^8 + 52658330.8256165*a^6 - 17534771.2699787*a^4 + 543821.667638052*a^2)*nl^11 + (6573480.80266246*a^8 - 19148483.9365878*a^6 + 4782210.346357829*a^4 - 98876.66684328219*a^2)*nl^9 + 4815.736851767371*a^8*nl + (-2191160.267554154*a^8 + 4787120.98414696*a^6 - 797035.0577263049*a^4 + 8239.722236940182*a^2)*nl^7 + (505652.3694355739*a^8 - 736480.1514072246*a^6 + 61310.3890558696*a^4)*nl^5 + (-72236.05277651057*a^8 + 52605.72510051605*a^6)*nl^3)*nv^3 + ((1748.76826529104*a^8 + 35820.7217794803*a^6 - 47426.15068109697*a^4 + 4966.249899464528*a^2)*nl^31 + (-26231.52397936559*a^8 - 501490.1049127242*a^6 + 616539.9588542606*a^4 - 59594.99879357434*a^2)*nl^29 + (183620.6678555591*a^8 + 3259685.681932707*a^6 - 3699239.753125563*a^4 + 327772.4933646589*a^2)*nl^27 + (-795689.560707423*a^8 - 13038742.7277308*a^6 + 13563879.0947937*a^4 - 1092574.977882196*a^2)*nl^25 + (2387068.682122269*a^8 + 35856542.5012598*a^6 - 33909697.7369843*a^4 + 2458293.700234942*a^2)*nl^23 + (-5251551.100668992*a^8 - 71713085.0025196*a^6 + 61037455.9265718*a^4 - 3933269.920375907*a^2)*nl^21 + (8752585.167781655*a^8 + 107569627.503779*a^6 - 81383274.5687624*a^4 + 4588814.907105224*a^2)*nl^19 + (-11253323.7871478*a^8 - 122936717.147176*a^6 + 81383274.5687624*a^4 - 3933269.920375907*a^2)*nl^17 + (11253323.7871478*a^8 + 107569627.503779*a^6 - 61037455.9265718*a^4 + 2458293.700234942*a^2)*nl^15 + (-8752585.167781653*a^8 - 71713085.0025196*a^6 + 33909697.7369843*a^4 - 1092574.977882196*a^2)*nl^13 + (5251551.100668992*a^8 + 35856542.5012598*a^6 - 13563879.0947937*a^4 + 327772.4933646589*a^2)*nl^11 + (-2387068.682122269*a^8 - 13038742.7277308*a^6 + 3699239.753125564*a^4 - 59594.99879357434*a^2)*nl^9 - 1748.76826529104*a^8*nl + (795689.560707423*a^8 + 3259685.681932707*a^6 - 616539.9588542606*a^4 + 4966.249899464528*a^2)*nl^7 + (-183620.6678555591*a^8 - 501490.1049127242*a^6 + 47426.15068109697*a^4)*nl^5 + (26231.52397936559*a^8 + 35820.7217794803*a^6)*nl^3)*nv^2 + ((2407.868425883686*a^8 - 26302.86255025803*a^6 + 30655.1945279348*a^4 - 4119.861118470091*a^2)*nl^31 + (-36118.02638825528*a^8 + 368240.0757036123*a^6 - 398517.5288631524*a^4 + 49438.33342164109*a^2)*nl^29 + (252826.184717787*a^8 - 2393560.49207348*a^6 + 2391105.173178914*a^4 - 271910.833819026*a^2)*nl^27 + (-1095580.133777077*a^8 + 9574241.96829392*a^6 - 8767385.634989355*a^4 + 906369.4460634199*a^2)*nl^25 + (3286740.401331231*a^8 - 26329165.4128083*a^6 + 21918464.0874734*a^4 - 2039331.253642695*a^2)*nl^23 + (-7230828.882928708*a^8 + 52658330.8256165*a^6 - 39453235.3574521*a^4 + 3262930.005828313*a^2)*nl^21 + (12051381.4715478*a^8 - 78987496.2384248*a^6 + 52604313.8099361*a^4 - 3806751.673466364*a^2)*nl^19 + (-15494633.3205615*a^8 + 90271424.2724855*a^6 - 52604313.8099361*a^4 + 3262930.005828312*a^2)*nl^17 + (15494633.3205615*a^8 - 78987496.2384248*a^6 + 39453235.3574521*a^4 - 2039331.253642695*a^2)*nl^15 + (-12051381.4715478*a^8 + 52658330.8256165*a^6 - 21918464.0874734*a^4 + 906369.44606342*a^2)*nl^13 + (7230828.882928707*a^8 - 26329165.4128083*a^6 + 8767385.634989353*a^4 - 271910.833819026*a^2)*nl^11 + (-3286740.401331231*a^8 + 9574241.96829392*a^6 - 2391105.173178914*a^4 + 49438.33342164109*a^2)*nl^9 - 2407.868425883686*a^8*nl + (1095580.133777077*a^8 - 2393560.49207348*a^6 + 398517.5288631524*a^4 - 4119.861118470091*a^2)*nl^7 + (-252826.184717787*a^8 + 368240.0757036123*a^6 - 30655.1945279348*a^4)*nl^5 + (36118.02638825528*a^8 - 26302.86255025803*a^6)*nl^3)*nv)*sqrt(-1.0*nl^2 + 1.0))*sqrt(-1.0*nv^2 + 1.0))
```
https://ask.sagemath.org/question/8403/full-simplify-sage-vs-mathematica/
might want to try with mathematica but it doesnt let me create an account/download trial. Anyway i just wonder where i got other smiths from because im sure i didnt use any siplifying tool for it yet we have those expressions XD"
376700911,410,devshgraphicsprogramming,2020-02-08T10:06:45Z,"> i got other smiths from because im sure i didnt use any siplifying tool for it yet we have those expressions XD

I simplified for you"
376726585,410,Crisspl,2020-02-08T18:45:13Z,"ok, their shadowing term is cumbersome because it requires precomputing integrals (if curious see section 4.2, especially `g(k)`, and section 5.2). However it's very general and apparently can be used with any NDF, so might get useful some day"
376727782,410,devshgraphicsprogramming,2020-02-08T19:08:21Z,"we don't care about ahikhmin-shirley enough to devote time to this, just slap on the anisotropic GGX shadowing and make a note that its wrong"
413270255,474,devshgraphicsprogramming,2020-04-22T19:42:04Z,pretty path
413282230,474,devshgraphicsprogramming,2020-04-22T19:55:37Z,this needs to go somewhere else and needs a definition for each of the `float` to `vec4` types
414827984,474,devshgraphicsprogramming,2020-04-24T19:58:07Z,fragmentation
416053604,474,devshgraphicsprogramming,2020-04-27T18:33:56Z,"use environment variable `IRR_OVERRIDE_DEVICE_EXTENSION_LIST` or something like that
https://en.cppreference.com/w/cpp/utility/program/getenv"
416085678,474,devshgraphicsprogramming,2020-04-27T19:23:21Z,to override the extension list we get from OpenGL driver in `COpenGLDriver` or `COpenGLExtensionHandler`
416154804,474,devshgraphicsprogramming,2020-04-27T21:16:49Z,btw overloads are safe now!
416155047,474,devshgraphicsprogramming,2020-04-27T21:17:14Z,need more semantics about what the `/6/6/7/8/pageTable/physPgTex/getPgTabSzLog2/getPhysPgTexSzRcp/getVTexSzRcp/getPhysicalIDForLayer` mean...
416155186,474,devshgraphicsprogramming,2020-04-27T21:17:31Z,is the reason
416939601,474,devshgraphicsprogramming,2020-04-28T21:38:17Z,I think `swap` is default behavior of move ctors
416981344,474,devshgraphicsprogramming,2020-04-28T23:20:15Z,these functions need to move to a different header
417355857,474,devshgraphicsprogramming,2020-04-29T14:24:04Z,I need you to fix this and read the extension list in `COpenGLDriver` from env-var if such is set
417360110,474,devshgraphicsprogramming,2020-04-29T14:29:17Z,still an issue
417361717,474,devshgraphicsprogramming,2020-04-29T14:31:18Z,"why are packing offsets a constant array!?

they were supposed to be SSBO!"
417367611,474,devshgraphicsprogramming,2020-04-29T14:38:44Z,"why is the assignment of bits variable?

shouldn't it be constant!?"
417368785,474,devshgraphicsprogramming,2020-04-29T14:40:07Z,didnt my final solution shader look differently here?
417369463,474,devshgraphicsprogramming,2020-04-29T14:40:58Z,"if they came from SSBO then you could collpase these lines
```glsl
        tileCoordinate += packingOffsets[levelInTail];
	tileCoordinate += vec2(TILE_PADDING,TILE_PADDING);
	tileCoordinate *= phys_pg_tex_sz_rcp;

vec3 physicalUV = irr_glsl_unpackPageID(levelInTail!=0 ? pageID.y:pageID.x, formatID);
	physicalUV.xy *= vec2(PAGE_SZ+2*TILE_PADDING)*phys_pg_tex_sz_rcp;

	// add the in-tile coordinate
	physicalUV.xy += tileCoordinate;
```
into less"
417370735,474,devshgraphicsprogramming,2020-04-29T14:42:26Z,change the name of this define into something prefixed and indicating semantics clearly
417373671,474,devshgraphicsprogramming,2020-04-29T14:46:10Z,I think you have redundant arguments here
417376982,474,devshgraphicsprogramming,2020-04-29T14:50:26Z,"where's the SSBO with the layer to format LUT ?
and UBO with 
```
    float phys_pg_tex_sz_rcp[VT_COUNT];
```

???"
417377505,474,devshgraphicsprogramming,2020-04-29T14:51:07Z,still!
417377884,474,devshgraphicsprogramming,2020-04-29T14:51:33Z,you can remove that comment
417378141,474,devshgraphicsprogramming,2020-04-29T14:51:53Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474#discussion_r416053604
417379613,474,devshgraphicsprogramming,2020-04-29T14:53:44Z,"none of the headers have header guards

nothing is overridable"
417381673,474,devshgraphicsprogramming,2020-04-29T14:56:20Z,what is `irr_glsl_VT_layer2pid` ?
417384209,474,devshgraphicsprogramming,2020-04-29T14:59:21Z,"page table does not have different sizes depending on formatID.. because page table is a 2D array and page size is fixed for all formats, also this value could comfortably come from UBO or SSBO"
417387500,474,devshgraphicsprogramming,2020-04-29T15:03:47Z,ok I see if could easily be a constant
417388076,474,devshgraphicsprogramming,2020-04-29T15:04:36Z,"these shouldn't come from an include path, but it should be assumed that user has defined these functions/macros in advance before including"
417409108,474,devshgraphicsprogramming,2020-04-29T15:32:17Z,no need for the args on the path
417409791,474,devshgraphicsprogramming,2020-04-29T15:33:11Z,"you could just provide sane defaults here, and let user override

or if providing defaults don't really make sense, you could check if user has defined them and if not emit an `#error`"
417411754,474,devshgraphicsprogramming,2020-04-29T15:35:55Z,"why is it global??

you could have made your `irr_sample_*(coord)` functions as `irr_sample_*(coord,derivatives)`"
417413717,474,devshgraphicsprogramming,2020-04-29T15:38:27Z,"the lut is per layer of the page table, so either its open-ended or EXACTLY THE NUMBER OF LAYERS (`sizeof(layer2pid.lut)==textureSize(pageTable,0).z`)
"
417415043,474,devshgraphicsprogramming,2020-04-29T15:40:14Z,"Page size is constant, because page table is a 2D array that would mean that the virtual texture reciprocal size is identical always (constant/uniform not depending on formatID)"
417415600,474,devshgraphicsprogramming,2020-04-29T15:41:00Z,Because the page table is a 2D array that would mean that its size's logarithm is identical always (constant/uniform not depending on formatID)
417418060,474,devshgraphicsprogramming,2020-04-29T15:44:18Z,"put the
`vec2(TILE_PADDING,TILE_PADDING);`
in the `packingOffsets` already!"
417418974,474,devshgraphicsprogramming,2020-04-29T15:45:40Z,"this is nasty, get rid of it"
417419204,474,devshgraphicsprogramming,2020-04-29T15:45:58Z,`PGTAB_LAYERS_PER_FORMAT` shouldn't exist anymore
417420088,474,devshgraphicsprogramming,2020-04-29T15:47:12Z,"the VirtualTexture class should compute this for you from the `PGTAB_SZ_LOG2`
OR
is should compute the `PGTAB_SZ_LOG2` given `MAX_ALLOCATABLE_TEX_SZ_LOG2 `"
417421578,474,devshgraphicsprogramming,2020-04-29T15:49:14Z,"This is a very sexy API, well dome."
417423161,474,devshgraphicsprogramming,2020-04-29T15:51:24Z,the VT class should also make and give you the samplers that you need to use with the format views
417425000,474,devshgraphicsprogramming,2020-04-29T15:54:01Z,this needs to become a `static` method of `ICPUVirtualTexture`
417426309,474,devshgraphicsprogramming,2020-04-29T15:55:48Z,`pgtab_sz_log2` is constant for all layers
417426784,474,devshgraphicsprogramming,2020-04-29T15:56:26Z,"Also mapping is Layer->ViewFormat Index (separate counting from 0 for int,uint,float/norm format meta-classes)"
417427430,474,devshgraphicsprogramming,2020-04-29T15:57:16Z,"you should probably get rid of this cause its meaningless.

you could however replace with `PAGE_TABLE_LAYERS` or something similar"
417427688,474,devshgraphicsprogramming,2020-04-29T15:57:40Z,"because page size is constant for all formats, so is `vtex_sz_rcp`"
417432177,474,devshgraphicsprogramming,2020-04-29T16:03:57Z,"You could of course store `phys_pg_tex_sz_rcp[3][MAX_FORMAT_VIEWS_OF_FORMAT_META_CLASS]` but it would be a bit unwieldy  because you'd need to do:
```glsl
float irr_glsl_VT_getPhysPgTexSzRcp(in uint formatMetaclass, uint in formatID)
{
   return phys_pg_tex_sz_rcp[formatMetaclass][formatID];
}
```

For an easier solution you could put the array in an SSBO together with the LUT and store `phys_pg_tex_sz_rcp[PAGE_TABLE_LAYERS]` 
```glsl
float irr_glsl_VT_getPhysPgTexSzRcp(uint in pageTableLayer)
{
   return phys_pg_tex_sz_rcp[pageTableLayer];
}
```"
417432245,474,devshgraphicsprogramming,2020-04-29T16:04:04Z,"this might need to change, see https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&hide-deleted-files=true#r417432177"
417436063,474,devshgraphicsprogramming,2020-04-29T16:09:39Z,this needs to be called `irr_glsl_vTextureGrad` and `irr_glsl_vTextureGrad` needs to become something else (maybe `irr_glsl_vTextureGrad_impl`)
417447883,474,devshgraphicsprogramming,2020-04-29T16:27:11Z,this should probably be renamed to `irr_glsl_vTexture_helper` because its useful for `textureLod` as well
417452939,474,devshgraphicsprogramming,2020-04-29T16:34:59Z,"you need a `ivec4 irr_glsl_vTextureLoD(in uvec2 _texData, in vec2 uv, in lod)` and `uvec4 irr_glsl_vTextureLoD(in uvec2 _texData, in vec2 uv, in lod)` as well for integer formats

Here's my stab at it:
```glsl

// textureLod emulation
ivec4 irr_glsl_vTextureLod_impl(in uint formatID, in vec3 virtualUV, in uint lod, in int originalMaxFullMip)
{
    int nonnegativeLod = int(lod);
    // magnification samples LoD 0, else clip to max representable in VT
    int clippedLoD = min(nonnegativeLod,originalMaxFullMip);
    // if minification is being performaed then get tail position
    // assert(nonnegativeLod<=originalMaxFullMip)
    int levelInTail = nonnegativeLod - clippedLoD;
    //
    vec3 physCoord = irr_glsl_vTextureGrad_helper(formatID, virtualUV, clippedLoD, levelInTail);
#ifdef IRR_GL_EXT_nonuniform_qualifier
    return textureLod(iphysicalTileStorageFormatView[nonuniformEXT(formatID)], physCoord, lod);
#else
    vec4 retval;
    uint64_t outstandingSampleMask = ballotARB(true);
    // maybe unroll a few times manually
    while (outstandingSampleMask != uint64_t(0u))
    {
        uvec2 tmp = unpackUint2x32(outstandingSampleMask);
        uint subgroupFormatID = readInvocationARB(formatID, tmp[1] != 0u ? 32u : findLSB(tmp[0]));
        bool canSample = subgroupFormatID == formatID; // do I need this? && (outstandingSampleMask&gl_SubGroupEqMaskARB)==gl_SubGroupEqMaskARB;
        outstandingSampleMask ^= ballotARB(canSample);
        if (canSample)
            retval = textureLod(iphysicalTileStorageFormatView[subgroupFormatID], physCoord, lod);
    }
    return retval;
#endif
}

ivec4 irr_glsl_vTextureLod(in uvec2 _texData, in vec2 uv, in uint lod)
{
    vec2 originalSz = irr_glsl_unpackSize(_texData);

    uvec2 wrap = irr_glsl_unpackWrapModes(_texData);
    uv.x = irr_glsl_wrapTexCoord(uv.x, wrap.x);
    uv.y = irr_glsl_wrapTexCoord(uv.y, wrap.y);
    
    vec3 virtualUV = irr_glsl_unpackVirtualUV(_texData);
    uint formatID = irr_glsl_VT_layer2pid(uint(virtualUV.z));
    virtualUV.xy += uv * originalSz;
    virtualUV.xy *= irr_glsl_VT_getVTexSzRcp(formatID);

    return irr_glsl_vTextureLod_impl(formatID, virtualUV, lod, int(irr_glsl_unpackMaxMipInVT(_texData)));
}
```"
417454581,474,devshgraphicsprogramming,2020-04-29T16:37:33Z,"this isn't really relevant to the overall VT API, but why not put everything to do with VT together in one descriptor set?"
417460434,474,devshgraphicsprogramming,2020-04-29T16:46:32Z,the `IVirtualTexture` should have a method to either hand you a const reference to a struct that matches 1:1 with this SSBO data or write the data to a `void*`
417461183,474,devshgraphicsprogramming,2020-04-29T16:47:43Z,something tells me that returning a `const uint32_t*`  + size would be a lot cleaner and less lines of code than this
417465269,474,devshgraphicsprogramming,2020-04-29T16:53:39Z,"why is this a constexpr?

we should support 128,256,512 and 1024 pages.. we shouldn't hardcode page size.
"
417471967,474,devshgraphicsprogramming,2020-04-29T17:03:53Z,this should be a constexpr
417473664,474,devshgraphicsprogramming,2020-04-29T17:06:33Z,"the sampler is one and the same always (nearest sampling no mip mapping), make it for the user (in the class' constructor)"
417473865,474,Crisspl,2020-04-29T17:06:49Z,"the only reason it exist is to not create pagetable mip levels that will never be used, so the second option makes most sense"
417475078,474,Crisspl,2020-04-29T17:08:45Z,just because it's easier this way
417480946,474,Crisspl,2020-04-29T17:18:09Z,"it's not page size, it's page size limit (limit log2 is 9 so max page size is 512). IIRC our biggest supportable page size was supposed to be 512, dont remember why, i may remember badly"
417484350,474,devshgraphicsprogramming,2020-04-29T17:23:44Z,"the samplers are not flexible, there's nothing you can change in them on the user side that would make sense with VT (can't change wrapping, can't change LoD parameters, can't change anisotropic mode, can't change trilinear), so you should set them here"
417484879,474,devshgraphicsprogramming,2020-04-29T17:24:33Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417484350

plus integer textures can only use the exact same sampler as pagetable (no interpolation at all, and no mip biases)"
417484977,474,devshgraphicsprogramming,2020-04-29T17:24:42Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417484879
417485584,474,devshgraphicsprogramming,2020-04-29T17:25:42Z,"all stage flags, we're going to be using VT everywhere "
417486906,474,devshgraphicsprogramming,2020-04-29T17:27:48Z,should be using immutable samplers ;)
417487004,474,devshgraphicsprogramming,2020-04-29T17:27:57Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417486906
417487047,474,devshgraphicsprogramming,2020-04-29T17:28:01Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417486906
417487073,474,devshgraphicsprogramming,2020-04-29T17:28:04Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417486906
417487097,474,devshgraphicsprogramming,2020-04-29T17:28:07Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417486906
417487623,474,devshgraphicsprogramming,2020-04-29T17:29:01Z,this shouldn't be in the path (really nothing except for page size and padding)
417487968,474,devshgraphicsprogramming,2020-04-29T17:29:37Z,these you should get from user defines that will be there before the `#include`
417489844,474,devshgraphicsprogramming,2020-04-29T17:32:28Z,"ok, then compute the PGTAB_SZ_LOG2 given MAX_ALLOCATABLE_TEX_SZ_LOG2 "
417490109,474,devshgraphicsprogramming,2020-04-29T17:32:57Z,but if I wanted to do that I would be able to achieve that?
417490289,474,devshgraphicsprogramming,2020-04-29T17:33:17Z,"ok, thats fine then."
417491304,474,devshgraphicsprogramming,2020-04-29T17:34:52Z,"maybe it would be just easier to return a constant reference to `m_layerToViewIndexMapping`

resetting this should be optional (may have to get/write multiple times)"
417491708,474,devshgraphicsprogramming,2020-04-29T17:35:35Z,we could just remove this and turn `m_layerToViewIndexMapping` into a struct
417493507,474,devshgraphicsprogramming,2020-04-29T17:38:35Z,"this should probably be 
```cpp
// align to cacheline
struct alignas(64) LayerToViewIndexTable
{
    uint32_t layersFormatID[MaxPageTableLayers/* 256 */];
};
```"
417501285,474,devshgraphicsprogramming,2020-04-29T17:51:02Z,"since there's a real bound on the number of layers in the page table (256), you could make this a normal `std::array<,MaxPageTableLayers>`"
417503391,474,devshgraphicsprogramming,2020-04-29T17:54:13Z,make the default 7
417504241,474,devshgraphicsprogramming,2020-04-29T17:55:30Z,"make the default less than 256 (more like 32), right now you're creating a crazy 64MB texture"
417514954,474,devshgraphicsprogramming,2020-04-29T18:13:30Z,"you can get the size from the `STextureData` (original size is saved in there) so you don't need the `const IImage* _img, const IImage::SSubresourceRange& _subres`"
417515736,474,devshgraphicsprogramming,2020-04-29T18:14:45Z,this doesn't need to be publicly accessible
417516129,474,devshgraphicsprogramming,2020-04-29T18:15:28Z,"const reference to a pointer makes no sense, just return the pointer"
417516549,474,devshgraphicsprogramming,2020-04-29T18:16:06Z,why on earth are you hooking it up like that?
417517877,474,devshgraphicsprogramming,2020-04-29T18:18:24Z,"this needs to go into `base_t::free`, the GPU VT will also do this"
417862110,474,devshgraphicsprogramming,2020-04-30T09:01:24Z,wait what?
417863257,474,devshgraphicsprogramming,2020-04-30T09:03:26Z,these should be constexpr
417863607,474,devshgraphicsprogramming,2020-04-30T09:04:00Z,constexpr?
417863849,474,devshgraphicsprogramming,2020-04-30T09:04:23Z,what's going on here?
417865565,474,devshgraphicsprogramming,2020-04-30T09:07:18Z,"this is the common part of both shaders, not the frag shader"
417866538,474,devshgraphicsprogramming,2020-04-30T09:09:01Z,won't that make you insert the shader specific before the common?
417867730,474,devshgraphicsprogramming,2020-04-30T09:10:54Z,I really don't like that the bindings given by the `vt` don't use immutable samplers
417874598,474,devshgraphicsprogramming,2020-04-30T09:22:41Z,"rename to `createPageTableImage`, cause that's the only capacity you're using it in"
417875791,474,devshgraphicsprogramming,2020-04-30T09:24:43Z,"this part is common between ICPU and IGPU classes, only depends on the template parameter, factor it out."
417876361,474,devshgraphicsprogramming,2020-04-30T09:25:38Z,"this should not be a `create` but a `get` and the result should be cached, right now I'm forced to call this every single time I want access to the image view and a new one is being created every single time!"
417876633,474,devshgraphicsprogramming,2020-04-30T09:26:08Z,"every single time I get the writes a new page table view is being created!

See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417876361"
417876917,474,devshgraphicsprogramming,2020-04-30T09:26:39Z,"See 
https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417876361
and
https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417875791"
417904472,474,devshgraphicsprogramming,2020-04-30T10:15:39Z,"this is gonna be common to both IGPU and ICPU VT, the types will just be different, factor it out"
417905535,474,devshgraphicsprogramming,2020-04-30T10:17:32Z,"only do the fill in `_IRR_DEBUG` its completely acceptable to have garbage in the page table entries that do not have an allocation (nobody is supposed to query those regions, at all!)"
417906132,474,devshgraphicsprogramming,2020-04-30T10:18:46Z,See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417905535
417908497,474,devshgraphicsprogramming,2020-04-30T10:23:13Z,"because you know the max allocatable texture size in the constructor, you also know the max amount of pages (lets' call it `m_maxAllocationPageCount`) that could be allocated.

So you could preallocate `smart_refctd_dynamic_array`s for the temporary `addrs` and `szs` (`szs` contents would be constant, all 1s)

then loops like these would only fill out the `addrs` (if you fill `addrs`  entry with the special invalid value, then allocator  traits' multi_free will skip freeing it)

and then only fire off one `multi_alloc_addr` or `multi_free_addr`"
417909729,474,devshgraphicsprogramming,2020-04-30T10:25:27Z,this should be a `get` and should return a raw-pointer (cause the return value should be cached for all time) see my other comments
417911984,474,devshgraphicsprogramming,2020-04-30T10:29:39Z,"since you already have `getLayerToViewIndexMapping` this makes one of the functions redunant, instead I propose a single (with `m_layerToViewIndexMapping` being an std::array or a struct)
```cpp
inline const auto& getLayerToViewIndexMapping() const
{
    return m_layerToViewIndexMapping;
}
struct reset_update_t {};
const auto& getLayerToViewIndexMapping(reset_update_t reset_update)
{
    m_layer2viewWasUpdatedSinceLastQuery = false;
    return m_layerToViewIndexMapping;
}
```
"
417912365,474,devshgraphicsprogramming,2020-04-30T10:30:22Z,See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417911984
417912508,474,Crisspl,2020-04-30T10:30:38Z,">the lut is per layer of the page table

right, idk, what i meant with `VT_COUNT` here XD

>Also mapping is Layer->ViewFormat Index (separate counting from 0 for int,uint,float/norm format meta-classes)

you mean you would like 3 arrays (for float/int/uint)? i think just one is sufficient, user has to know which kind of samplers he wants to use anyway"
417913790,474,devshgraphicsprogramming,2020-04-30T10:33:03Z,do this only in debug
417914018,474,devshgraphicsprogramming,2020-04-30T10:33:28Z,"plus anyway, you're doing it twice... cause you've already done it here?
https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417913790"
417914051,474,devshgraphicsprogramming,2020-04-30T10:33:33Z,"plus anyway, you're doing it twice... cause you've already done it here?
https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417913790"
417916353,474,devshgraphicsprogramming,2020-04-30T10:37:59Z,"Better defaults, see https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417504241

Also `_maxAllocatableTexSz_log2` you can work out from `0x1u<<(_pgTabSzxy_log2+_pgSzxy_log2)`"
417916606,474,devshgraphicsprogramming,2020-04-30T10:38:28Z,Same thing as https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417916353
417917304,474,devshgraphicsprogramming,2020-04-30T10:39:39Z,you can work out `_maxAllocatableTexSz_log2` from other parameters
417918546,474,devshgraphicsprogramming,2020-04-30T10:41:46Z,"ok I see, you're copying.... but that function shouldn't be public, make it protected in the `IVirtualTexture`"
417918876,474,devshgraphicsprogramming,2020-04-30T10:42:28Z,if it was a struct or a plain `std::array` it would be easier
417922794,474,devshgraphicsprogramming,2020-04-30T10:49:54Z,even a value of 8 would be better because then the page table would fit very nicely in GPU L2 caches (512kb)
417924213,474,devshgraphicsprogramming,2020-04-30T10:52:44Z,unused function?
417925100,474,devshgraphicsprogramming,2020-04-30T10:54:27Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417924213

weren't you supposed to use this here?"
417929664,474,devshgraphicsprogramming,2020-04-30T11:03:22Z,why public?
417937196,474,devshgraphicsprogramming,2020-04-30T11:19:30Z,"use only a `max`
assert that `lastFullMip<static_cast<int32_t>(m_pageTable->getCreationParameters().mipLevels)`
because if `lastFullMip` is not within page table mipmap chain then you've tried to pack a texture larger than max allocatable size"
417937490,474,devshgraphicsprogramming,2020-04-30T11:20:07Z,some constexpr values would be nicer than literals
417937679,474,devshgraphicsprogramming,2020-04-30T11:20:31Z,its a sum of log2 size of pagetable and page
417938638,474,devshgraphicsprogramming,2020-04-30T11:22:29Z,only in debug mode
417944241,474,devshgraphicsprogramming,2020-04-30T11:34:00Z,"> you mean you would like 3 arrays (for float/int/uint)? i think just one is sufficient, user has to know which kind of samplers he wants to use anyway

no i mean the complete opposite... one array for all 3 types ;)"
417945507,474,devshgraphicsprogramming,2020-04-30T11:36:29Z,and where are we at with that?
417946947,474,devshgraphicsprogramming,2020-04-30T11:39:17Z,"won't this break the existing ICPUVirtualTExture XD ?

All this effort with copy ctors for pool allocators and you do this ;)"
417947568,474,devshgraphicsprogramming,2020-04-30T11:40:28Z,you most probably want to fire off a conversion without using asset manager CPU2GPU cache and converting the CPU VT's page table to a dummy object
417947738,474,devshgraphicsprogramming,2020-04-30T11:40:50Z,"Same here as there?
https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r417947568"
417983870,474,Crisspl,2020-04-30T12:49:11Z,it's meant to be number of physical storages (size of `phys_pg_tex_sz_rcp` array)
418000469,474,devshgraphicsprogramming,2020-04-30T13:15:57Z,"~ these functions shouldn't be public, make the VT classes friends or something ~
Ok I see whole class declaration is protected, so its fine"
418001409,474,devshgraphicsprogramming,2020-04-30T13:17:17Z,anyway there's not much point keeping the mapping of format class->layer here (or at all)
418002115,474,devshgraphicsprogramming,2020-04-30T13:18:26Z,"I'd assign viewformats (not format classes) to layers, not layers to format classes, this is going to backfire, each layer needs its separate format"
418002378,474,devshgraphicsprogramming,2020-04-30T13:18:47Z,See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r418001409
418005015,474,devshgraphicsprogramming,2020-04-30T13:22:41Z,where are we on this?
418005231,474,devshgraphicsprogramming,2020-04-30T13:23:01Z,these shifts should be contexpr
418005976,474,devshgraphicsprogramming,2020-04-30T13:24:04Z,"these should be methods of `SPhysPgOffset`

since the bit assignments should be constexpr"
418008205,474,devshgraphicsprogramming,2020-04-30T13:27:22Z,"this could be a static method if you do
https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r418005976"
418013865,474,devshgraphicsprogramming,2020-04-30T13:35:32Z,"you should only be getting the format class not using the format directly, the image we're packing could have views that we intend to use which are completely different than the format"
418064940,474,devshgraphicsprogramming,2020-04-30T14:44:55Z,"because `EF_RGBA_SRGB` and `EF_RGBA8_UINT` are compatible with each other, I can pack a SRGB image while intending to use a UINT view.

You cannot use the image's format to handle this, `pack` needs to take a list of `viewFormats` that we're going to use the image data with (so we only allocate/make resident once, but we'll have multiple VT entries)"
418065295,474,devshgraphicsprogramming,2020-04-30T14:45:24Z,See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r418064940
418068010,474,devshgraphicsprogramming,2020-04-30T14:48:54Z,"`pack` needs to take an array of view-formats that we'll be using the packed texture with and return a same sized array of `STextureData` (through a pointer), return type should be void (you can check the success by looking at the array)

Also for sanity should assert that the output array has been preinitialized with `STextureData::invalid`

This means that `free` would also need to take an array of `STextureData` and expect the contents to not be `invalid`
Also see https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r418064940"
418073924,474,devshgraphicsprogramming,2020-04-30T14:56:54Z,"basically multiple allocations in VT allocator, only one in physical storage and only one page data upload"
418074475,474,devshgraphicsprogramming,2020-04-30T14:57:42Z,the need for this is very evident because you'll need to decouple the Page Table update loop from the Physical Storage allocator `multi_free_addr`
418075130,474,devshgraphicsprogramming,2020-04-30T14:58:32Z,"assert false this should never, ever happen"
418077224,474,Crisspl,2020-04-30T15:01:19Z,"well, yes, functions in IVirtualTexture returns smart_refctd_dynamic_array with SBinding's for layout creation and SWriteDescriptorSets's for ds creation. Then you can do with it whatever you want. Now i think it would be easier to use if filled given structs array as output and returned element count though"
418080322,474,devshgraphicsprogramming,2020-04-30T15:05:49Z,"the `core::address_allocator_traits<phys_pg_addr_alctr_t>::multi_alloc_addr(storage->tileAlctr` is also common code, you know how large the biggest texture will be so you can preallocate temporary arrays as members large enough to hold the output, size and alignment (for tiles size==alignment==1)

~~Furthermore you can first try and allocate the physical tiles, then if you fail you only need to free them and return (else actually go to the physical layer choice step), unlike now when its quite hard and laborious to clean up in event of a failure (you avoid copying over image data if you've failed to allocate).~~"
418082093,474,devshgraphicsprogramming,2020-04-30T15:08:12Z,I think you meant `break`
418093617,474,devshgraphicsprogramming,2020-04-30T15:24:31Z,"you only need the image's creation parameters, not the image itself for this"
418093879,474,devshgraphicsprogramming,2020-04-30T15:24:53Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r418093617
418096196,474,Crisspl,2020-04-30T15:28:10Z,"struct is out of question because `phys_pg_tex_sz_rcp` array size is variable. I'm making a writing function, but i wonder how user could know layout of outputted data?"
418100360,474,Crisspl,2020-04-30T15:34:04Z,"meeeh, actually i think it would be best for IVirtualTexture to provide a template struct<storageCount> for user to fill by himself. Or make UBO with precomputed data come in same DS as pagetable and views (having declaration in builtin descriptors.glsl, etc, etc), this is too scattered"
418102603,474,devshgraphicsprogramming,2020-04-30T15:37:19Z,and a `!` in the `if`
418103566,474,devshgraphicsprogramming,2020-04-30T15:38:46Z,"only if the image subresource size is too big, check that before you start doing anything at the start of the function if image can fit"
418103684,474,devshgraphicsprogramming,2020-04-30T15:38:56Z,then you can assert this
418104653,474,devshgraphicsprogramming,2020-04-30T15:40:19Z,this is overkill
418104905,474,devshgraphicsprogramming,2020-04-30T15:40:42Z,this is overkill just to fill one pixel
418105766,474,devshgraphicsprogramming,2020-04-30T15:41:56Z,I hate constant literals like `16`
418106721,474,devshgraphicsprogramming,2020-04-30T15:43:23Z,can you explain the logic of this line?
418108228,474,devshgraphicsprogramming,2020-04-30T15:45:24Z,"you can work out how many tiles you need to allocate outside the copy loop, and you also know the upper bound on tiles becase you know the upper bound on texture size that can be packed"
418109529,474,devshgraphicsprogramming,2020-04-30T15:47:23Z,"Split the `pack` function into `alloc` and `commit` (for now keep the `alloc` and `commit` private, we need to figure out how to allow committing parts of textures in the future given multiple views) one that allocates 1 VT pagetable range per 1 view format, the other that takes the list of `STextureData` and does the tile allocations from physical storage + padded copies"
418111161,474,devshgraphicsprogramming,2020-04-30T15:49:41Z,"let it fill the page table with the `physPgAddr` that is invalid, just skip the physical data copy"
418111403,474,devshgraphicsprogramming,2020-04-30T15:50:00Z,See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r418111161
418112110,474,devshgraphicsprogramming,2020-04-30T15:51:01Z,"this you should only do once per view format class (even though you've allocated multiple VT ranges, 1 per format for a view)"
418113247,474,devshgraphicsprogramming,2020-04-30T15:52:38Z,also you'll ned to fill 1 pixel in multiple VT layers (1 per format view)
418120642,474,devshgraphicsprogramming,2020-04-30T16:03:26Z,"See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r418002115

I'd introduce a `core::unordered_multimap<E_FORMAT,uint32_t> m_viewFormatToLayer;` instead"
418121214,474,devshgraphicsprogramming,2020-04-30T16:04:18Z,"we can actually get rid of `m_assignedPageTableLayers` and `m_freePageTableLayerIDs`

See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r418120642"
418122140,474,devshgraphicsprogramming,2020-04-30T16:05:47Z,also define some constexpr insstead of using `~0u` as invalid
418122434,474,devshgraphicsprogramming,2020-04-30T16:06:14Z,"we have the `m_layerToViewIndexMapping` its better to `std:find_if(,~0u)` linear search from the front rather than use a stack for `m_freePageTableLayerIDs` because then we'll always get the lowest numbered layer as the new layer"
418123777,474,Crisspl,2020-04-30T16:08:14Z,because i dont really see other way
418124506,474,devshgraphicsprogramming,2020-04-30T16:09:17Z,actually https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files#r417514954
418125508,474,Crisspl,2020-04-30T16:10:48Z,testing purposes
418126563,474,devshgraphicsprogramming,2020-04-30T16:12:25Z,oh and `STextureData` holds the original number of mimap levels in `_subres` when allocating)
418126722,474,devshgraphicsprogramming,2020-04-30T16:12:38Z,"you can deduce the format from the `STextureData` and `m_layerToViewIndexMapping`

and https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r418126563

`STextureData` holds mipmap extent given `_subres.baseMipLevel` so `neededPageCountForSide(extent.width, _subres.baseMipLevel+i)` cancels out (you can use `neededPageCountForSide(STextureData::getOriginalSize(),i)`)"
418126920,474,devshgraphicsprogramming,2020-04-30T16:12:57Z,"you should only need to take `STextureData` as parameter

See https://github.com/buildaworldnet/IrrlichtBAW/pull/474/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension&hide-deleted-files=true#r418126722"
418127641,474,Crisspl,2020-04-30T16:13:58Z,"those are things for decoding address from pool allocator into 3d (x,y,layer) address in order to encode it into what goes into page table (which indeed has constexpr masks/shifts: 4bits X, 4bits Y, 8bits layer)"
418127747,474,Crisspl,2020-04-30T16:14:09Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474#discussion_r418127641
418128052,474,Crisspl,2020-04-30T16:14:40Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/474#discussion_r418127641
418131118,474,Crisspl,2020-04-30T16:19:31Z,"i dont think so, why?"
418151772,474,devshgraphicsprogramming,2020-04-30T16:53:22Z,"Actually instead of doing this array of `STextureData` we could actually make a:
- `SMasterTextureData alloc(E_FORMAT primaryViewingFormat, const IImage::SCreationParams& _imgParams, const IImage::SSubresourceRange& _subres)` allocates the master allocation (the one that is actually resposible for managing physical tiles) but only as a VT range
- bool commit(const SMasterTextureData& _addr, const image_t* _img, const IImage::SSubresourceRange& _subres, ISampler::E_TEXTURE_CLAMP _wrapu, ISampler::E_TEXTURE_CLAMP _wrapv, ISampler::E_TEXTURE_BORDER_COLOR _borderColor)` does the physical tile allocation and writing to master VT page table entry
- `SViewAliasTextureData createAlias(const SMasterTextureData& _addr, E_FORMAT viewingFormat, const IImage::SSubresourceRange& _subresRelativeToMaster)` allocates another VT region and copies the pagetable pointers (master must be committed)
- `bool destroyAlias(const SViewAliasTextureData& _alias)` destroys the alias, doesn't decommit
- `bool free(const SMasterTextureData& _addr)` which deallocates the master allocation

with a simple
```cpp
struct SMasterTextureData : STextureData {};
struct SViewAliasTextureData : STextureData {};
```"
418153969,474,devshgraphicsprogramming,2020-04-30T16:57:08Z,constexpr?
418160486,474,devshgraphicsprogramming,2020-04-30T17:08:18Z,"This is wrong, example... texture with a sidelength of 1025, gets padded to 2048 (with some wrap modes)

Mip Level 0: uses 1025 pixels out of 2048, with a page size of 128 it needs 9 pages
Mip Level 1: uses 513 pixels out of 1024 (coordinate 1.0 will map to 512.5 , the mip is computed from padded+wrapped image), it needs 5 pages
Mip Level 2: uses 257 pixels out of 512 (1.0-> 256.25), it needs 3 pages
Mip Level 3: uses 129 pixels out of 256, it needs 2 pages
Mip Level 4: uses 65 pixels out of 128, it needs 1 page
rest needs 1 page

Your function comes out as, 9 pages, then 4,2,1,......

You should swap`std::max(_sideExtent>>_level, 1u)` which rounds down

to `((_sideExtent+(0x1u<<_level)-1u)>>_level)` which rounds up and doesn't need a MAX"
418163674,474,devshgraphicsprogramming,2020-04-30T17:13:53Z,didn't we fix the number of bits on that as well?
418164414,474,devshgraphicsprogramming,2020-04-30T17:14:59Z,"you've inserted the `GLSL_COMMON_OVERRIDE` right after the first newline after `#version`

then you do the same thing with `_shaderSpecificOverride`

which would insert the last before the first."
418230369,474,Crisspl,2020-04-30T19:11:26Z,"i dont understand how it could be fixed. If i have `tilesPerDim`=4, then number of bits for x and y page-wise page coords is 2 (log2(tilesPerDim) in general). If i had those bitlengths fixed, i'd just be reading/decoding wrong values.
For example pool allocator gave me `0b00000101'11000011` address. So in case of `tilesPerDim=4` i'm getting (`0b11`, `0b00`, `0b1011100`) 3D address and in case of `tilesPerDim=8` i'm getting (`0b011`,`0b000`,`0b10111`). So it cant be fixed because decoding 1D->3D is directly dependent on tiles per dim"
418236549,474,Crisspl,2020-04-30T19:23:01Z,ehh... yea
418238238,474,Crisspl,2020-04-30T19:26:15Z,protected wont do because `IVirtualTexture` is a template and protected in `IVirtualTexture<ICPUImageView>` doesnt make it accessible in `IGPUVirtualTexture` with base being `IVirtualTexture<IGPUImageView>`
418238913,474,Crisspl,2020-04-30T19:27:37Z,"this function returns const reference so it's safe, not the most beutiful thing in the world though"
418307487,474,devshgraphicsprogramming,2020-04-30T21:46:13Z,so why is it a hardcoded constant?
418307861,474,devshgraphicsprogramming,2020-04-30T21:47:03Z,"put it together in one SSBO, you'll have less alignment issues (`phys_pg_tex_sz_rcp` has a stride of 16 bytes under UBO packing)"
418326293,474,devshgraphicsprogramming,2020-04-30T22:32:10Z,"I think it does, it just fucks up macro functions or something"
418326414,474,devshgraphicsprogramming,2020-04-30T22:32:32Z,also shouldn't you have a space before the backslash?
418326729,474,devshgraphicsprogramming,2020-04-30T22:33:23Z,`_IRR_APPROXIMATE_TEXEL_FOOTPRINT_FROM_DERIVATIVE_CACL_`
418327397,474,devshgraphicsprogramming,2020-04-30T22:35:21Z,"why is github so fucking stupid, now I can't find what I was linking!"
418330133,474,devshgraphicsprogramming,2020-04-30T22:43:18Z,weren't you supposed to map the LUT change flag here?
418331157,474,devshgraphicsprogramming,2020-04-30T22:46:19Z,no point just return a constant reference plus take an argument if should reset the flag
418331420,474,devshgraphicsprogramming,2020-04-30T22:46:55Z,"```cpp
inline const auto& getLayerToViewIndexMapping() const
{
    return m_layerToViewIndexMapping;
}
struct reset_update_t {};
const auto& getLayerToViewIndexMapping(reset_update_t reset_update)
{
    m_layer2viewWasUpdatedSinceLastQuery = false;
    return m_layerToViewIndexMapping;
}
```"
418331941,474,devshgraphicsprogramming,2020-04-30T22:48:27Z,still a thing
418332136,474,devshgraphicsprogramming,2020-04-30T22:49:00Z,still doesn't need to be public
418345834,474,devshgraphicsprogramming,2020-04-30T23:31:09Z,"eh, a stack doesn't make sense anyway ;)

just iterate the LUT directly."
418346157,474,devshgraphicsprogramming,2020-04-30T23:32:19Z,need that `std::getenv` in COpenGLDriver/ExtentionHandler
418347115,474,devshgraphicsprogramming,2020-04-30T23:35:32Z,"well not if you're gonna use the addresses directly (without a little translation)

Btw do you require that the physical texture be PoT ? Cause we could use morton ordering for the pool allocations as well (and the physical textures ""could"" look prettier in RenderDoc)"
418349553,474,devshgraphicsprogramming,2020-04-30T23:44:07Z,basically its about the stack being redundant
418350331,474,devshgraphicsprogramming,2020-04-30T23:46:41Z,256 ? seriously?
418350860,474,devshgraphicsprogramming,2020-04-30T23:48:36Z,could have been a plain assignment
418351167,474,devshgraphicsprogramming,2020-04-30T23:49:27Z,"we don't need this function anymore, only a get by reference (ofc. with `_clearFlag` not `_updateFlag`)"
418351596,474,devshgraphicsprogramming,2020-04-30T23:50:59Z,the copy ctors?
418351774,474,devshgraphicsprogramming,2020-04-30T23:51:32Z,you most definitely don't want to do that
418351918,474,devshgraphicsprogramming,2020-04-30T23:51:55Z,youre going to kill the existing CPU objects
418352537,474,devshgraphicsprogramming,2020-04-30T23:54:13Z,"sane default is 15 views float, 0 in others"
418352753,474,devshgraphicsprogramming,2020-04-30T23:54:56Z,"you want to check that value is >0 (not that they're defined, they always will be)"
418352984,474,Crisspl,2020-04-30T23:55:55Z,"it's `#if`, not `#ifdef`"
418355115,474,devshgraphicsprogramming,2020-05-01T00:03:39Z,still
418355271,474,devshgraphicsprogramming,2020-05-01T00:04:11Z,"> 
> 
> You could of course store `phys_pg_tex_sz_rcp[3][MAX_FORMAT_VIEWS_OF_FORMAT_META_CLASS]` but it would be a bit unwieldy because you'd need to do:
> 
> ```glsl
> float irr_glsl_VT_getPhysPgTexSzRcp(in uint formatMetaclass, uint in formatID)
> {
>    return phys_pg_tex_sz_rcp[formatMetaclass][formatID];
> }
> ```
> 
> For an easier solution you could put the array in an SSBO together with the LUT and store `phys_pg_tex_sz_rcp[PAGE_TABLE_LAYERS]`
> 
> ```glsl
> float irr_glsl_VT_getPhysPgTexSzRcp(uint in pageTableLayer)
> {
>    return phys_pg_tex_sz_rcp[pageTableLayer];
> }
> ```

"
418355373,474,devshgraphicsprogramming,2020-05-01T00:04:33Z,"also are you going this route?
> 
> 
> You could of course store `phys_pg_tex_sz_rcp[3][MAX_FORMAT_VIEWS_OF_FORMAT_META_CLASS]` but it would be a bit unwieldy because you'd need to do:
> 
> ```glsl
> float irr_glsl_VT_getPhysPgTexSzRcp(in uint formatMetaclass, uint in formatID)
> {
>    return phys_pg_tex_sz_rcp[formatMetaclass][formatID];
> }
> ```
> 
> For an easier solution you could put the array in an SSBO together with the LUT and store `phys_pg_tex_sz_rcp[PAGE_TABLE_LAYERS]`
> 
> ```glsl
> float irr_glsl_VT_getPhysPgTexSzRcp(uint in pageTableLayer)
> {
>    return phys_pg_tex_sz_rcp[pageTableLayer];
> }
> ```

"
418355745,474,devshgraphicsprogramming,2020-05-01T00:06:02Z,"decent idea, lets not create spurious `dynamic_array`s"
418356125,474,devshgraphicsprogramming,2020-05-01T00:07:24Z,"> 
> 
> struct is out of question because `phys_pg_tex_sz_rcp` array size is variable. I'm making a writing function, but i wonder how user could know layout of outputted data?

Well I thought of this: 

> 
> 
> You could of course store `phys_pg_tex_sz_rcp[3][MAX_FORMAT_VIEWS_OF_FORMAT_META_CLASS]` but it would be a bit unwieldy because you'd need to do:
> 
> ```glsl
> float irr_glsl_VT_getPhysPgTexSzRcp(in uint formatMetaclass, uint in formatID)
> {
>    return phys_pg_tex_sz_rcp[formatMetaclass][formatID];
> }
> ```
> 
> For an easier solution you could put the array in an SSBO together with the LUT and store `phys_pg_tex_sz_rcp[PAGE_TABLE_LAYERS]`
> 
> ```glsl
> float irr_glsl_VT_getPhysPgTexSzRcp(uint in pageTableLayer)
> {
>    return phys_pg_tex_sz_rcp[pageTableLayer];
> }
> ```

you know the uppper bound on layer amount, its 256, so you can have the `uint` format mapping and the `float` recriproval physical suze"
418356345,474,devshgraphicsprogramming,2020-05-01T00:08:19Z,"then you could return a combined struct of two 256 element arrays, one of uint and one of float as ""the LUT"""
418356646,474,devshgraphicsprogramming,2020-05-01T00:09:19Z,"there's still only one logical choice of sampler, and it should be immutable"
418357141,474,devshgraphicsprogramming,2020-05-01T00:11:07Z,why do you need so many samplers?
418357243,474,devshgraphicsprogramming,2020-05-01T00:11:31Z,"ah ok I see you did immutable samplers, but that comment should go..."
418358716,474,devshgraphicsprogramming,2020-05-01T00:16:54Z,the `getResidentStorage()` ?
418449676,474,Crisspl,2020-05-01T07:42:59Z,"no, im iterating through all layers assigned to this storage. If i cant allocate on `it` then trying next one"
418450230,474,Crisspl,2020-05-01T07:45:19Z,what does it mean to map a flag?
418453197,474,Crisspl,2020-05-01T07:57:52Z,you wanted a standard way to edit images (filters lib) and thats why im using it. Generalization is usually an overkill
418454053,474,devshgraphicsprogramming,2020-05-01T08:01:16Z,"it makes sense fo padded copies, but not for this XD"
418454234,474,devshgraphicsprogramming,2020-05-01T08:01:56Z,"mark...

you update the LUT but never set the update flag... you have an unused update function"
418454620,474,devshgraphicsprogramming,2020-05-01T08:03:46Z,ah ok 
418455588,474,devshgraphicsprogramming,2020-05-01T08:08:05Z,"and if you don't fail you try the next one anyway because its a `for (auto it = assignedLayers.first; it != assignedLayers.second; ++it)` loop

Also the logic is off, because layers are assigned to formats (views) not format classes (storage)

This is why I essntially propose to get rid of both assigned layers in storage class, and the free layer stack, just use a `unordered_multimap<E_FORMAT,uint32_t>` plus the layer to format sampler view LUT"
418462136,474,Crisspl,2020-05-01T08:34:09Z,for binding (as u can see)
418462544,474,Crisspl,2020-05-01T08:35:46Z,that would require direct access to cpuvt->m_layerToViewIndexMapping
418463129,474,Crisspl,2020-05-01T08:37:49Z,"lol XD yea, thx"
418466615,474,devshgraphicsprogramming,2020-05-01T08:50:01Z,"yeah, but you have one sampler per binding, whereas you probably need only 2 samplers, one for pagetable and integer textures and one for float textures

you don't need a unique sampler per binding, right?"
418466849,474,devshgraphicsprogramming,2020-05-01T08:50:49Z,"nope
`m_layerToViewIndexMapping = _cpuvt->getLayerToViewIndexMapping(false);`"
418482249,474,Crisspl,2020-05-01T09:48:43Z,"i see, dont add ""still"" to every unresolved comment XD if it's unresolved yet, it means i'll get it resolved later"
418490551,474,Crisspl,2020-05-01T10:20:47Z,"yea, remember it"
418495264,474,Crisspl,2020-05-01T10:39:31Z,"> ```
> float irr_glsl_VT_getPhysPgTexSzRcp(uint in pageTableLayer)
> {
>   return phys_pg_tex_sz_rcp[pageTableLayer];
> }
> ```

not possible to calculate such array because layer->sampler_index mapping doesnt give you info about which sampler array (float/int/uint) index it is. Only user can know that"
418495619,474,Crisspl,2020-05-01T10:41:15Z,no longer there
418495699,474,Crisspl,2020-05-01T10:41:37Z,done
418497978,474,Crisspl,2020-05-01T10:50:48Z,i need to know format class of the image to find its physical storage and remove pagetable layer assignment from it. You're right i dont necesarilly need _subres though
418500180,474,Crisspl,2020-05-01T11:00:23Z,"> Btw do you require that the physical texture be PoT ?

yes, tilesPerDim is PoT

> Cause we could use morton ordering for the pool allocations as well (and the physical textures ""could"" look prettier in RenderDoc)

complicates physical page allocation a lot (i have to pad needed pages count to PoT and after packing deallocate not used...) and ""prettyness"" depends on fragmentation. Plus fragmentation becomes much bigger problem because of deallocating not-used pages resulting from PoT-padding..."
418540343,474,Crisspl,2020-05-01T13:28:05Z,"> you can deduce the format from the STextureData and m_layerToViewIndexMapping

i can't because i dont know whether it's float, int or uint format (i can deduce view/sampler index but still i wouldnt know which array's index it is)"
418555003,474,Crisspl,2020-05-01T14:04:38Z,"miplevel `N` size of texture sized `S` in some dimension has size of `max(S / 2^N,1)` which is `max(S>>N,1)` so i think everything's fine
(so miplevel 1 of texture sized 1025 has size of 512, not 513)"
418561720,474,devshgraphicsprogramming,2020-05-01T14:20:21Z,nope. because we pad the thing!
418563337,474,devshgraphicsprogramming,2020-05-01T14:24:15Z,then make a `m_layerToViewIndexMapping` counterpart that records the `E_FORMAT` or view that the layer of `STexData` points to
418564845,474,devshgraphicsprogramming,2020-05-01T14:27:26Z,this array is `STexData.vtLayer -> Rcp size mapping` build the array in `IVirtualTexture` 
418565320,474,devshgraphicsprogramming,2020-05-01T14:28:26Z,"we should keep track of the `formatID` and `E_FORMAT` (or image view) assigned to the VT layer, would make the whole API a lot simpler"
418567438,474,Crisspl,2020-05-01T14:33:04Z,"there are 2 samplers objects, but i need array (of length = `binding.count` = view count) of samplers (array of samrt_refctd_ptr but all of them points to same sampler object) for views binding"
418591260,474,devshgraphicsprogramming,2020-05-01T15:26:33Z,"> complicates physical page allocation a lot (i have to pad needed pages count to PoT and after packing deallocate not used...) and ""prettyness"" depends on fragmentation. Plus fragmentation becomes much bigger problem because of deallocating not-used pages resulting from PoT-padding...

You actually don't need to align or pad anything, the tiles are not connected in any way whatsoever (its a pool allocator, there is no fragmentation).

turning an address of a single tile into an XY coordinate is bit extraction, positioning them morton style would essentially introduce just a permutation on the bit pattern (just after `multi_alloc_addr` and `multi_free_addr` on the pool allocator)

---------------------------

Anyway this is going off on a tangent (whether to use morton or not is completely orthogonal to the below).

We can fix the allocation of bits as a constant. Using the following rationale.

Max physical texture size in hardware is 16k, but it would be best to limit the X,Y dimensions to a minimum because of IEEE754 precision issues near `vec2(1.0,1.0)`

Maximum number of 2D array layers is 256, which means that we can use 8 bits of layers, and then 4 each for for X and Y (which gives us a reasonable 2k up to 8k 2D physical storage dimension depending on page size).

all you need to do is just convert the pool allocator address to a fixed byte form
```cpp
struct SPhysPageAddr
{
    uint8_t xy; // low 4 bits x, high 4 bits y
    uint8_t layer;
};

SPhysPageAddr poolAddrToCoord(uint16_t addr);
uint16_t coordToPoolAddr(SPhysPageAddr coord);
```"
418803704,474,Crisspl,2020-05-02T01:00:23Z,"> all you need to do is just convert the pool allocator address to a fixed byte form

thats exactly what im doing"
418942248,474,devshgraphicsprogramming,2020-05-02T10:35:54Z,I don't think you should reset the update on the CPU VT here.
418942458,474,devshgraphicsprogramming,2020-05-02T10:38:51Z,you're still getting the wrong format XD
419440116,474,Crisspl,2020-05-04T13:35:14Z,"if couldnt allocate, assigns SPhysPgOffset::invalid_address"
419456947,474,Crisspl,2020-05-04T13:58:46Z,(miptail page address is saved for future iterations packing mip levels which go into miptail page)
419963466,474,devshgraphicsprogramming,2020-05-05T09:03:03Z,ok I didn't see that there are only 2
419965643,474,devshgraphicsprogramming,2020-05-05T09:07:03Z,"addr already holds `imgAndOrigSz.second` as well as ` _uwrap, _vwrap` right?"
419966986,474,devshgraphicsprogramming,2020-05-05T09:09:28Z,oh and you could inject a `IRR_GL_IRR_RUNNING_IN_RENDERDOC` because the `COpenGLDriver` can detect the Renderdoc.dll
419994504,474,devshgraphicsprogramming,2020-05-05T09:59:05Z,"because mip-map filter may have a bigger domain than [-0.5,0.5] it is also important to know the border color"
420254178,474,devshgraphicsprogramming,2020-05-05T16:46:19Z,"how do you protect against double free?

Only master should free the physical tiles, not the alias.
"
420282327,474,devshgraphicsprogramming,2020-05-05T17:27:48Z,inline static and public? or move to some utility in `irr/asset/format` ?
420282786,474,devshgraphicsprogramming,2020-05-05T17:28:33Z,why is this constructor public for everyone to use?
420465722,474,devshgraphicsprogramming,2020-05-05T23:24:47Z,"this doesn't take into account that we round up the baseMaxDim to PoT (the rounding up of mip-levels)

it would need to be `core::findMSB(baseMaxDim-1u)+1` insead of  `core::findMSB(baseMaxDim`"
420467335,474,devshgraphicsprogramming,2020-05-05T23:29:45Z,"given the constexpr limit on layer count, they couldn be a plain `std::array`"
420468545,474,devshgraphicsprogramming,2020-05-05T23:33:19Z,gcc will hate you for the `auto` deduction here.
420471497,474,devshgraphicsprogramming,2020-05-05T23:42:39Z,I don't get this `if` + `continue`
420474173,474,devshgraphicsprogramming,2020-05-05T23:51:28Z,to be able to assert that you need to check that `extent` does not exceed the max size (at the very start of the function)
420474839,474,devshgraphicsprogramming,2020-05-05T23:53:33Z,don't fill a single pixel with a filter
420673848,474,devshgraphicsprogramming,2020-05-06T09:57:33Z,"that would be correct, a padded texture has one extra mip, example

a 65 wide texture with mip-map rounding UP
65,33,17,9,5,3,2,1 = 8 mips

a 128 wide padded texture 
128,64,32,16,8,4,2,1 = 8 mips"
420676902,474,devshgraphicsprogramming,2020-05-06T10:03:38Z,"`const VkExtent3D& _mip0extent, const IImage::SSubresourceRange& _subres, ISampler::E_TEXTURE_CLAMP _wrapu, ISampler::E_TEXTURE_CLAMP _wrapv` are almost all in `SMasterTextureData` (except for baseLayer of `IImage::SSubresourceRange`)"
421358447,474,Crisspl,2020-05-07T09:14:10Z,trying next of layers assigned for this format if previously tried has too little free space to alloc
421380663,474,Crisspl,2020-05-07T09:49:54Z,"almost, STextureData holds `STextureData::E_WRAP_MODE`:
```
        enum E_WRAP_MODE
        {
            EWM_REPEAT = 0b00,
            EWM_CLAMP = 0b01,
            EWM_MIRROR = 0b10,
            EWM_INVALID = 0b11
        };
```
`ISampler::E_TEXTURE_CLAMP` maps to `E_WRAP_MODE` like this:
```
        static E_WRAP_MODE ETC_to_EWM(ISampler::E_TEXTURE_CLAMP _etc)
        {
            switch (_etc)
            {
            case ISampler::ETC_REPEAT:
                return STextureData::EWM_REPEAT;
            case ISampler::ETC_CLAMP_TO_EDGE:
            case ISampler::ETC_CLAMP_TO_BORDER:
                return STextureData::EWM_CLAMP;
            case ISampler::ETC_MIRROR:
            case ISampler::ETC_MIRROR_CLAMP_TO_EDGE:
            case ISampler::ETC_MIRROR_CLAMP_TO_BORDER:
                return STextureData::EWM_MIRROR;
            default:
                return STextureData::EWM_INVALID;
            }
        }
```
(clamp to edge and to border becomes one thing, and mirror and all mirror+clamp becomes one thing)
Ofc we can map back but it's lossy then. Mapping back is needed for padded copy. It would mean that padded copy will never use CLAMP_TO_BORDER (CLAMP_TO_EDGE instead) and will never use `MIRROR_CLAMP_*` as well (MIRROR instead)"
421470546,474,Crisspl,2020-05-07T12:38:39Z,"there's no base miplevel, base layer and miplevel count, so i'm leaving whole `_subres`"
421491468,474,Crisspl,2020-05-07T13:11:37Z,"hm, instead of this envvar?"
422023671,474,devshgraphicsprogramming,2020-05-08T08:44:25Z,could turn this into a thing like `_IRR_ALIGNED_MALLOC`
422026118,474,devshgraphicsprogramming,2020-05-08T08:49:43Z,and where is the separate free/destroy for the aliases?
422027360,474,devshgraphicsprogramming,2020-05-08T08:52:31Z,"no both, to be done

Regular OpenGL extensions can come from envvar or not
We define extra extension on top of all that to let GLSL know its running in renderdoc"
422030811,474,Crisspl,2020-05-08T09:00:11Z,in IvirtualTexture
422031197,474,devshgraphicsprogramming,2020-05-08T09:01:01Z,"there' actually a special overload for `reserved_size` which takes the old allocator reference + new buffer size (in-case you want to grow or shrink)

example
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/core/alloc/PoolAddressAllocator.h#L164"
422034247,474,devshgraphicsprogramming,2020-05-08T09:07:48Z,"ok this was kind of badly phrased
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/core/alloc/PoolAddressAllocator.h#L42

what it actually means is that the underlying data buffer (memory, file, GPU buffer, image, whatever) whose ranges the address allocator allocates should be handled by the user.

The move constructors actually copied the state in the reserved space properly, so there's no need for a `alloc_and_copy` just an alloc"
422034852,474,devshgraphicsprogramming,2020-05-08T09:09:06Z,doesn't `reserved_size` take the argumetns the other way around?
422036032,474,devshgraphicsprogramming,2020-05-08T09:11:41Z,you need to compute the cursor properly (copy it)
422037138,474,devshgraphicsprogramming,2020-05-08T09:14:16Z,"we should nuke this address allocator, it makes no sense in the modern world"
422037291,474,Crisspl,2020-05-08T09:14:37Z,"erm, thanks, seems like i copy-pasted and forgot about this"
422037801,474,Crisspl,2020-05-08T09:15:45Z,"nah, at least not in this allocator"
422040247,474,devshgraphicsprogramming,2020-05-08T09:21:19Z,did this move?
422042142,474,devshgraphicsprogramming,2020-05-08T09:25:31Z,"this still doesn't make sense.

If you fail to allocate (get invalid_address), then you go into the `if` and `continue` to do the multi allocation again on the next layer.

if you succeed then you don't hit the `continue` but you go around the loop again anyway!
The only thing that saves you from multiple allocations is that `multi_alloc_addr` doesn't allocate address outputs that were not initialized to `invalid_address`

Despite that, the behaviour still should be 
```
if (addr!=pg_tab_addr_alctr_t::invalid_address)
   break;
````"
422042988,474,devshgraphicsprogramming,2020-05-08T09:27:33Z,"ah yes, you're right, in that case we need to assert that the `_uwrap, _vwrap` are compatible with the wrapping modes of the `SMasterTextureData`"
422135610,474,Crisspl,2020-05-08T13:14:45Z,i removed this (along with E_SAMPLER_TYPE) completely
422137378,474,Crisspl,2020-05-08T13:18:25Z,"lol, im stupid, yeah, thanks XD ..."
431190213,497,devshgraphicsprogramming,2020-05-27T14:40:54Z,"its going to be `8u` always, you will do the summation in `double` or `uint64_t`"
431190412,497,devshgraphicsprogramming,2020-05-27T14:41:11Z,you will use scratch Memory for this
431190583,497,devshgraphicsprogramming,2020-05-27T14:41:27Z,do more validation
431190978,497,devshgraphicsprogramming,2020-05-27T14:42:00Z,you know that the matchedSizeFilterBase's state has those already?
431191989,497,devshgraphicsprogramming,2020-05-27T14:43:19Z,inhertiv from other states here
431192236,497,devshgraphicsprogramming,2020-05-27T14:43:39Z,you've just really complicated the inherticance of this class :(
431192624,497,devshgraphicsprogramming,2020-05-27T14:44:09Z,inhertit from matched extent filter
431193215,497,devshgraphicsprogramming,2020-05-27T14:44:57Z,if `CSummedAreaTableImageFilterBase<ExclusiveMode>` inherited from matched extent base then you could call its validation and have all this already be taken care of
431193525,497,devshgraphicsprogramming,2020-05-27T14:45:23Z,you ask for scratch memory so that you do not need to allocate!
431194200,497,devshgraphicsprogramming,2020-05-27T14:46:15Z,these are in the base I'm telling you to inherit from
431194699,497,devshgraphicsprogramming,2020-05-27T14:46:58Z,the only lambda that you should be executing here should be one to decode the pixels into your temporary scratch memory store
431196033,497,devshgraphicsprogramming,2020-05-27T14:48:39Z,"first you want to clear your scratch memory to 0s (`memset(,0,)` or `std::fill`)
then you want to decode the input image into scratch via the `executePerRegion`
then you want to peacefully do your own thing with the scratch (the sum)
then you want to save the sum from scratch to output image via the `executePerRegion`"
431196654,497,devshgraphicsprogramming,2020-05-27T14:49:29Z,"cache coherence, first sweep x, then sweep y"
431318484,497,AnastaZIuk,2020-05-27T17:30:20Z,"but it isn't an array of double that I use (actually will use) as scratch
it's for caching purposes, for storing max values for the pixel sum likely, the sum will be changing but it's cache size will be always the sam - extent of y and x,

so I use (will use) it for caching to speed up performing time and scratch memory that is allocated by the user to finally hold all the precomputed sum values"
431410099,497,devshgraphicsprogramming,2020-05-27T20:03:08Z,"all memory yyou need to use need to come from scratch memory,compute yourself some offsets and deal with everything via `reinterpret_cast`"
436248387,497,AnastaZIuk,2020-06-06T07:50:27Z,corrected in following commit
436249518,497,AnastaZIuk,2020-06-06T08:08:57Z,corrected in following commit
436249521,497,AnastaZIuk,2020-06-06T08:09:01Z,corrected in following commit
436249526,497,AnastaZIuk,2020-06-06T08:09:07Z,corrected in following commit
436249531,497,AnastaZIuk,2020-06-06T08:09:11Z,corrected in following commit
436249544,497,AnastaZIuk,2020-06-06T08:09:27Z,corrected in following commit
436272812,497,AnastaZIuk,2020-06-06T14:23:19Z,it doesn't matter anymore
436272825,497,AnastaZIuk,2020-06-06T14:23:27Z,Adjusted
436272852,497,AnastaZIuk,2020-06-06T14:24:00Z,done 
436272854,497,AnastaZIuk,2020-06-06T14:24:07Z,adjusted
438235383,497,AnastaZIuk,2020-06-10T15:59:16Z,to remove
440124740,497,devshgraphicsprogramming,2020-06-15T11:59:16Z,"Upheld, right now you have a huge problem that you do decode,sum,encode inside your per-region lambda... this will backfire for sparse images.

First everything needs to be decoded from all regions, then summed.. ONCE, then encoded to all regions"
440211390,497,AnastaZIuk,2020-06-15T14:21:10Z,"what do you mean in more detail, could you explain? 

> this will backfire for sparse images. 

but if the user choose the mipmap and a layer, only one region will be ever executed (afaik), so why can't I do it in per region lambda?"
440213224,497,AnastaZIuk,2020-06-15T14:23:47Z,"scratch memory is independent, it will always hold one layer with no reference, so if I compute offset to fetch texels correctly from the region being executed, I can (probably, maybe I'm wrong) decode, sum and encode in the lambda as I think of it"
440255055,497,devshgraphicsprogramming,2020-06-15T15:21:26Z,what's this?
441096015,497,devshgraphicsprogramming,2020-06-16T19:37:33Z,"you need to change format to something like RGBA_32_SFLOAT because the input are values in the [0,1] range, so a sum of all these values will be in [0,imageWidth*imageHeight] and you will also need the precision in the fractions, which makes UINT or INT formats unsuitable"
441096145,497,devshgraphicsprogramming,2020-06-16T19:37:45Z,naturally the cpu-buffer also can be bigger
441096195,497,devshgraphicsprogramming,2020-06-16T19:37:53Z,`const auto&`
441096982,497,devshgraphicsprogramming,2020-06-16T19:39:24Z,"memory leak, `_IRR_ALIGNED_FREE` missing"
441116008,497,devshgraphicsprogramming,2020-06-16T20:16:48Z,"no get this from image, not a particular region"
441116132,497,devshgraphicsprogramming,2020-06-16T20:17:04Z,save to EXR
441116781,497,devshgraphicsprogramming,2020-06-16T20:18:19Z,not sure why nwe need this and the enum?
441567680,497,Crisspl,2020-06-17T13:59:48Z,why srgb goes as uint64_t?
441572631,497,Crisspl,2020-06-17T14:06:34Z,"u could just `remove_pointer_t<decodeTypePointer>` or even 
```
template<typename decodeType> //!< double or uint64_t
static inline bool executeInterprated(state_type* state, decodeType* scratchMemory)
```"
441576008,497,Crisspl,2020-06-17T14:11:17Z,better make it `4u`
442136802,497,AnastaZIuk,2020-06-18T10:45:55Z,"we wanted something like `divideEverythingBy` where inputs are `imageTotal` (maxX, maxY) sum as far as I remember "
442137532,497,AnastaZIuk,2020-06-18T10:47:25Z,so should I remove template parameter and make it use always `double`?
442137919,497,AnastaZIuk,2020-06-18T10:48:11Z,"okay, to remove"
442139838,497,AnastaZIuk,2020-06-18T10:52:07Z,corrected in following commit
442144161,497,AnastaZIuk,2020-06-18T11:00:52Z,"not sure if done correctly, but changed in following commit"
442152035,497,AnastaZIuk,2020-06-18T11:17:14Z,corrected in following commit
442726984,497,AnastaZIuk,2020-06-19T09:16:46Z,corrected in following commit
442727494,497,AnastaZIuk,2020-06-19T09:17:54Z,"you're right, corrected!<3"
442762547,497,devshgraphicsprogramming,2020-06-19T10:30:10Z,ok will see when you push
442762871,497,devshgraphicsprogramming,2020-06-19T10:30:53Z,"that needs to be an option (in the state), but then you also need to return that original max value to the user somehow (maybe via the state)

The only reason for someone to use that is to use a `RGBA16_UNORM` or `RGBA32_UNORM` image for prevision and then scale it back up to get original result"
443118575,497,devshgraphicsprogramming,2020-06-20T10:00:28Z,"`sizeof(double)` makes it more readable, otherwise people are scratching their heads like ""why 8"" ?"
443123967,497,AnastaZIuk,2020-06-20T11:32:43Z,"you're right, to fix"
443124044,497,AnastaZIuk,2020-06-20T11:34:03Z,I will return it via state
443142414,497,AnastaZIuk,2020-06-20T16:20:54Z,"okay, though I will return it via the filter"
443146104,497,AnastaZIuk,2020-06-20T17:20:00Z,fixed
446412810,497,devshgraphicsprogramming,2020-06-26T21:13:43Z,"you're gonna do one layer at a time, and not sum across layers, so the number of layers shall not influence the scratch size."
446412960,497,devshgraphicsprogramming,2020-06-26T21:14:07Z,"what's this?
"
446416071,497,devshgraphicsprogramming,2020-06-26T21:22:54Z,"no, you're not allowed to allocate extra data... you partition the reserved space and use that."
446416356,497,devshgraphicsprogramming,2020-06-26T21:23:48Z,`>=` comparison is not safe... you'd actually need to use one of the functions that give the per-channel bit-depth and compare that the channel bit-depth is larger.
446416465,497,devshgraphicsprogramming,2020-06-26T21:24:10Z,"nope, just check the size (I think the base class `validate` method already does this)"
446568865,497,AnastaZIuk,2020-06-27T21:25:35Z,"oh, right. logic mistake EDIT: written when about to sleep XD"
446629202,497,AnastaZIuk,2020-06-28T09:59:08Z,"wait what? we wanted to decode the entire image with all the data first, then using offset perform the sum (going through the layers as well and summing the single one at a time, but having the entire decoded image due to overlapping that could appear)"
446629460,497,AnastaZIuk,2020-06-28T10:01:21Z,otherwise I will be forced to do what I did before - decoding in the lambda
446629644,497,AnastaZIuk,2020-06-28T10:03:29Z,it contains max sum values for a single plane
446629727,497,AnastaZIuk,2020-06-28T10:04:22Z,I will use scratch then
446633124,497,AnastaZIuk,2020-06-28T10:36:16Z,"it's because I use the scratch to read from it decoded values and I have to have those layers in the scratch as well, cuz the basic filter sends the layer to the lambda too. However before I had an useless approach - decoding image and then decoding extraordinary an pixel I'm operating on (decoding 2 times) so I find my way good now"
446635871,497,AnastaZIuk,2020-06-28T11:01:43Z,"Well, actually I use the extra cache for columns, but I need to know the width of an image that depends on the chosen mip map level. I can bypass it by allocating just the max possible width in the scratch, but I don't know if we want such an approach. What should I do? Unless I will force the user to specify the mip map level in the scratch function specifing the size of the memory"
446639930,497,AnastaZIuk,2020-06-28T11:42:55Z,"we don't have such a function probably, I only see something returning max value for the channel"
446640480,497,AnastaZIuk,2020-06-28T11:48:41Z,I don't see that the base checks it
446640682,497,AnastaZIuk,2020-06-28T11:50:16Z,now in following commit it returns the pointer to the scratch memory where the cache is placed in
446640806,497,AnastaZIuk,2020-06-28T11:51:11Z,corrected
446640908,497,AnastaZIuk,2020-06-28T11:52:11Z,corrected in following commit
450453979,497,AnastaZIuk,2020-07-06T20:10:40Z,allocated in scratch
451123511,497,AnastaZIuk,2020-07-07T20:27:19Z,adjusted (I think no more I added is needed)
451123734,497,AnastaZIuk,2020-07-07T20:27:49Z,solved
451123795,497,AnastaZIuk,2020-07-07T20:27:55Z,solved
451123896,497,AnastaZIuk,2020-07-07T20:28:06Z,solved
451123948,497,AnastaZIuk,2020-07-07T20:28:13Z,solved
451124020,497,AnastaZIuk,2020-07-07T20:28:21Z,solved
451124121,497,AnastaZIuk,2020-07-07T20:28:34Z,solved
451124766,497,AnastaZIuk,2020-07-07T20:29:51Z,the validation is needed here - solved
451127216,497,AnastaZIuk,2020-07-07T20:34:46Z,TODO!
451132055,497,AnastaZIuk,2020-07-07T20:44:27Z,@devshgraphicsprogramming @Crisspl we probably need to write such one
451755212,497,devshgraphicsprogramming,2020-07-08T18:47:29Z,"you do realize that you can save on scratch memory by only processing ""one layer at a time"" because you do not sum across layers?

plus there's no need for caches outside of your decode scratch space"
451755269,497,devshgraphicsprogramming,2020-07-08T18:47:35Z,there's no need for caches outside of your decode scratch space
451755668,497,devshgraphicsprogramming,2020-07-08T18:48:24Z,why no division if input is UNORM?
451755882,497,devshgraphicsprogramming,2020-07-08T18:48:49Z,unused variable
451758738,497,devshgraphicsprogramming,2020-07-08T18:54:19Z,"> but having the entire decoded image due to overlapping that could appear)

You can run the decode,sum,encode routines not once for all layers, but multiple times, one layer at a time.

> cuz the basic filter sends the layer to the lambda too. 

copy the state, set the layer count to 1, adjust the base layers for input and output when performing each loop"
451799090,497,devshgraphicsprogramming,2020-07-08T20:13:30Z,this should be the total extent of your scratch except for the scratch used to return per-layer-max values
451799630,497,devshgraphicsprogramming,2020-07-08T20:14:33Z,"memset eats perf, allow undefined behaviour if images have undefined data in the extent you've asked for, this is what vulkan does anyway"
451802608,497,devshgraphicsprogramming,2020-07-08T20:20:39Z,"if you hoist this loop to before decode and have this
```cpp
for (auto& w = localCoord[3] = 0u; w < arrayLayers; ++w)
{
    auto stateCopy = state;
    stateCopy.inBaseLayer += w;
    stateCopy.outBaseLayer += w;
    stateCopy.layerCount = 1u;

    bool decodeStatus = commonExecute(stateCopy, perOutputRegionDecode);
    if (decodeStatus)
    {
        ...
    }
}
```
then you need far less scratch"
451803174,497,devshgraphicsprogramming,2020-07-08T20:21:46Z,erm if its a normalized format you definitely WANT TO normalize (overriding `normalizeImageByTotalSATValues` to `true`)
451804683,497,devshgraphicsprogramming,2020-07-08T20:24:35Z,"typo ""overwrites"""
451804909,497,devshgraphicsprogramming,2020-07-08T20:25:03Z,what's this about?
451806025,497,devshgraphicsprogramming,2020-07-08T20:27:17Z,"you do realize that `readBlockPos` is a global coordinate in the texture, not local w.r.t. your output offset and hence your scratch memory?"
451806872,497,devshgraphicsprogramming,2020-07-08T20:28:57Z,"the if statement in particular
"
451809967,497,devshgraphicsprogramming,2020-07-08T20:35:10Z,"`readBlockArrayOffset` is relative to the region's data pointer, but a new ""proxy region"" could have been created by the clip functor, and so the offset would need to be added to the offset into the buffer in this new ""proxy region"" and then to the ICPUBuffer  pointer of the image (which IIRC should be what `outData` actually is)

P.S. I think `outData` might be uninitialized !? Could be my fault."
451812132,497,devshgraphicsprogramming,2020-07-08T20:39:41Z,"hmm actually if we had an image with negative values, our SAT could dip below 0, which would require us to actually normalize by knowing the MAX and MIN of the SAT

if normalizing to 0,1 range, we should have:
`(val-MIN)/(MAX-MIN)`
if normalizing to -1,1 range, we should have:
`(2.0*val-MAX-MIN)/(MAX-MIN)`"
451812985,497,devshgraphicsprogramming,2020-07-08T20:41:20Z,but leave it on for `IRR_DEBUG`
451822733,497,devshgraphicsprogramming,2020-07-08T21:01:02Z,"this is the proper way to do it for a single channel (trivially extendable to 2,3,4), assuming you have z,y,x traversal order as you have right now
```cpp
auto& current = pixel(readBlockPos); // start with current value, x==current_x && y==current_y && z==current_z

current += pixel(readBlockPos-vec4(0,0,1,0)); // add box x<=current_x && y<=current_y && z<current_z
current += pixel(readBlockPos-vec4(0,1,0,0)); // add box x<=current_x && y<current_y && z<=current_z
current -= pixel(readBlockPos-vec4(0,1,1,0)); // remove overlap box x<=current_x && y<current_y && z<current_z
// now I have the sum of all layers below me in the bound x<=current_x && y<=current_y && z<current_z  and the current pixel
// time to add the missing top layer pixels
current += pixel(readBlockPos-vec4(0,1,0,0)); // add box x<current_x && y<=current_y && z<=current_z
current -= pixel(readBlockPos-vec4(0,1,0,1)); // remove overlap box x<current_x && y<=current_y && z<current_z
current -= pixel(readBlockPos-vec4(0,1,1,0)); // remove future overlap box x<current_x && y<current_y && z<=current_z
current += pixel(readBlockPos-vec4(0,1,1,1)); // add box x<current_x && y<current_y && z<current_z
```
where `pixel` is both your decode scratch and your SAT scratch at once (the algorithm is ""in place"", i.e. doesn't require any extra memory than the input) plus its much faster.

in the above snippet, the `pixel` you touch are actually SAT pixels, because the traversal order guarantees that you've turned these value pixels into SAT pixels in previous iterations"
452029647,497,AnastaZIuk,2020-07-09T07:50:31Z,oh XD
452030670,497,AnastaZIuk,2020-07-09T07:52:21Z,"right, I will correct it"
452963472,497,AnastaZIuk,2020-07-10T17:00:00Z,"since scratch covers my full extent I can use it for sure because your common execute lambda will perform clipping to an particular extent with some offset if given, and knowing the scratch extent in advance I can specify `scratchInPlaneOffset` to later user it to compute real byte offsets (knowing channel amount, the rest is on pointer arithmetic side("
452965356,497,AnastaZIuk,2020-07-10T17:03:53Z,and it's locaal https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/filters/CBasicImageFilterCommon.h#L49
453198182,497,devshgraphicsprogramming,2020-07-11T14:02:48Z,you kinda NEED division always for UNORM and SNORM
453198233,497,devshgraphicsprogramming,2020-07-11T14:03:33Z,scratch size should be independent of the number of layers
453198533,497,devshgraphicsprogramming,2020-07-11T14:06:42Z,"Nope its the second parameter of this lambda, and it gets fed with `localCoord+trueOffset`, so its global (relative to mip levels origin) in its mip level"
453352512,497,AnastaZIuk,2020-07-12T19:11:33Z,it isn't valid anymore because I will remove layers from scratch
453356370,497,AnastaZIuk,2020-07-12T19:51:43Z,corrected in following commit
453356414,497,AnastaZIuk,2020-07-12T19:52:11Z,corrected in following commit
453356526,497,AnastaZIuk,2020-07-12T19:53:53Z,"yeah yeah, got it. Actually I didn't figure it out, my vision was different"
453357111,497,AnastaZIuk,2020-07-12T19:59:43Z,corrected in following commit
453357317,497,AnastaZIuk,2020-07-12T20:01:35Z,to fix
463598032,497,devshgraphicsprogramming,2020-07-31T13:04:07Z,WHY WHY WHY ARE YOU STILL ALLOCATING SCRATCH MEMORY?
463598904,497,AnastaZIuk,2020-07-31T13:05:59Z,"`current += pixel(readBlockPos-vec4(0,0,1,0));` it gives you -Z at start and it will crash


I'm wondering if my way of doing it would be good if I limit it to single layer at a time (+ without doing sum across layers, it seems to me the above does that and as far as I remember we weren't to do it)"
463604407,497,AnastaZIuk,2020-07-31T13:16:50Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r451802608

```C++
auto stateCopy = state;
```"
463607008,497,AnastaZIuk,2020-07-31T13:22:01Z,"I don't get the pseudo code https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r451822733 and I think that https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r463598904
I don't get it how I can touch `w` otherwise, there must be 2 scratches at once holding a single layer then probably"
463682026,497,devshgraphicsprogramming,2020-07-31T15:34:44Z,"> `current += pixel(readBlockPos-vec4(0,0,1,0));` it gives you -Z at start and it will crash

I noticed I made a typo in the offsets on the last 4 lines.

Everything is fine, but you need to guard the filter for the corner cases properly
```cpp
auto& current = pixel(readBlockPos); // start with current value, x==current_x && y==current_y && z==current_z
const bvec4 axisSafe = greaterThan(readBlockPos,uvec4(0u,0u,0u,0u));
if (axisSafe.z)
    current += pixel(readBlockPos-vec4(0,0,1,0)); // add box x<=current_x && y<=current_y && z<current_z
if (axisSafe.y)
{
    current += pixel(readBlockPos-vec4(0,1,0,0)); // add box x<=current_x && y<current_y && z<=current_z
    if (axisSafe.z)
         current -= pixel(readBlockPos-vec4(0,1,1,0)); // remove overlap box x<=current_x && y<current_y && z<current_z
}
// now I have the sum of all layers below me in the bound x<=current_x && y<=current_y && z<current_z  and the current pixel
// time to add the missing top layer pixels
if (axisSafe.x)
{
    current += pixel(readBlockPos-vec4(1,0,0,0)); // add box x<current_x && y<=current_y && z<=current_z
    if (axisSafe.z)
         current -= pixel(readBlockPos-vec4(1,0,1,0)); // remove overlap box x<current_x && y<=current_y && z<current_z
    if (axisSafe.y)
    {
        current -= pixel(readBlockPos-vec4(1,1,0,0)); // remove future overlap box x<current_x && y<current_y && z<=current_z
        if (axisSafe.z)
            current += pixel(readBlockPos-vec4(1,1,1,0)); // add box x<current_x && y<current_y && z<current_z
     }
}
```"
463689169,497,devshgraphicsprogramming,2020-07-31T15:47:51Z,AGAIN!
463690033,497,devshgraphicsprogramming,2020-07-31T15:49:30Z,unused variable
463690314,497,devshgraphicsprogramming,2020-07-31T15:50:03Z,oeo fo you use it for the image MIn/MAX ?
463690923,497,devshgraphicsprogramming,2020-07-31T15:51:07Z,"do not reallocate memory and copy scratch

scratch == memory to be used temporarily and contents to be thrown away (not preserved)"
463692553,497,devshgraphicsprogramming,2020-07-31T15:54:05Z,update me when done.
463770594,497,devshgraphicsprogramming,2020-07-31T18:39:22Z,this debug thing should probably move to the per-layer loop
463772019,497,devshgraphicsprogramming,2020-07-31T18:42:43Z,"see my new code listing in the comments, I had the offsets wrong for the second part of the sum (the last 4 lines here)

Also there should be no addition/subtraction if the readBlockPos coordinate is 0 in the component(s) that will get offset by `-1` [also mentioned in my revised listing]"
463772466,497,devshgraphicsprogramming,2020-07-31T18:43:45Z,what's this if statement about?
463772640,497,devshgraphicsprogramming,2020-07-31T18:44:09Z,STILL
463772728,497,devshgraphicsprogramming,2020-07-31T18:44:22Z,STILL
463973877,497,AnastaZIuk,2020-08-01T15:42:01Z,"that's what has confused me at all https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r463682026
and that's why I typed I do not understand what about `w` and did weird things with copy scratch https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r463607008

to fix!"
463974040,497,AnastaZIuk,2020-08-01T15:43:57Z,"I know I know, I was waiting for review and https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r463973877"
464343910,497,AnastaZIuk,2020-08-03T11:03:10Z,I wanted it to be a cache for max (now I need also min)
464344202,497,AnastaZIuk,2020-08-03T11:03:50Z,corrected in following commit
464344783,497,AnastaZIuk,2020-08-03T11:05:08Z,corrected in following commit
465248773,497,AnastaZIuk,2020-08-04T18:31:56Z,corrected 
465249052,497,AnastaZIuk,2020-08-04T18:32:27Z,corrected
465249138,497,AnastaZIuk,2020-08-04T18:32:36Z,corrected
465620665,497,Crisspl,2020-08-05T10:13:36Z,make it `const decodeType&`
465629912,497,Crisspl,2020-08-05T10:31:49Z,erm IMO validation should return false and not let setting multiple regions defining same image pixels. Why would it ever be correct/useful? @devshgraphicsprogramming ?
466975586,497,Crisspl,2020-08-07T11:12:20Z,"why `+=`? Then in case when you have layers 0,1,2,3, `inBaseLayer` gets values 0,1,3,6. To fix!"
466976053,497,Crisspl,2020-08-07T11:13:39Z,"`0, 0` not `1, 1`. Actually it should be a loop over all texels encoded within the block"
466976777,497,Crisspl,2020-08-07T11:15:22Z,"thats wrong for sure, `readBlockPos` is an absolute position in input image. What you want is position in processed sub-image (with extent defined by `state->extent`)"
466978101,497,Crisspl,2020-08-07T11:18:35Z,"why does it require scratch size to fit whole input image's texels? You need only just enough space to fit texels of processed sub-image (`state->extent`, not `inImage->extent`)"
466978635,497,Crisspl,2020-08-07T11:20:02Z,"doesnt make sense at all, you are adding offset taken from output region to `inData`"
466979740,497,Crisspl,2020-08-07T11:22:58Z,"ofc it's wrong, you're computing strides of output region with input image format info"
467036269,497,devshgraphicsprogramming,2020-08-07T13:22:02Z,Because Vulkan allows it and its well defined.
467038059,497,devshgraphicsprogramming,2020-08-07T13:25:07Z,I think I've repeated it 5x times already
467038390,497,devshgraphicsprogramming,2020-08-07T13:25:37Z,did you read my code and verify that `readBlockPos` is relateive to mip-map's origin @Crisspl ?
467045894,497,devshgraphicsprogramming,2020-08-07T13:38:35Z,ok
467055475,497,Crisspl,2020-08-07T13:54:21Z,"yes, it's absolute position within mip-level"
467056695,497,Crisspl,2020-08-07T13:56:17Z,"But really, Matt, this filter API needs docs, lots of it. I've been struggling with it as well while developing padded copy filter. And now while helping Arek because i forgot some things"
467071625,497,AnastaZIuk,2020-08-07T14:21:02Z,it should have been documented
467087699,497,devshgraphicsprogramming,2020-08-07T14:47:04Z,"> But really, Matt, this filter API needs docs, lots of it. I've been struggling with it as well while developing padded copy filter. And now while helping Arek because i forgot some things

> it should have been documented

My suggestion is that, everytime you find something ""non obvious"" document it."
467088203,497,devshgraphicsprogramming,2020-08-07T14:47:52Z,undo all this.
467088765,497,devshgraphicsprogramming,2020-08-07T14:48:49Z,"leave as is, see the comment on line `140`"
467089024,497,devshgraphicsprogramming,2020-08-07T14:49:16Z,"no need to change types to `i32`, see the comment above."
470074884,497,AnastaZIuk,2020-08-13T16:26:40Z,corrected in following commit
470074990,497,AnastaZIuk,2020-08-13T16:26:49Z,corrected in following commit
470075081,497,AnastaZIuk,2020-08-13T16:26:58Z,corrected in following commit
470075418,497,AnastaZIuk,2020-08-13T16:27:33Z,"the request for documentation has been pushed to our discord, TODO!"
470075549,497,AnastaZIuk,2020-08-13T16:27:42Z,corrected in following commit
470075652,497,AnastaZIuk,2020-08-13T16:27:50Z,corrected in following commit
470075708,497,AnastaZIuk,2020-08-13T16:27:57Z,corrected in following commit
470076723,497,AnastaZIuk,2020-08-13T16:29:31Z,corrected in following commit
470078086,497,AnastaZIuk,2020-08-13T16:31:39Z,corrected in following commit
470079015,497,AnastaZIuk,2020-08-13T16:33:07Z,corrected in following commit
470187251,497,AnastaZIuk,2020-08-13T19:13:08Z,"okay I see it as following:

given a `newReadBlockPos` as my position where my ""rectangle"" begins and `readBlockPos` as my position relative to mipmap in a certain layer I can use it to fill my image

TODO:

first way:

- use `newReadBlockPos` in equation to fill an output image with texels fetched from scratch accordingly
- take into account mipmap buffer offset and layer offset as well since API doesn't let us using current handled region unless it's output region

second one (**probably correct I think, for sure! check it out**)

- figure out `clip_functor_t` and see how does it relate to array offset given in the decode/encode lambda and then use it"
470188999,497,AnastaZIuk,2020-08-13T19:15:58Z,TODO: follow https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r470187251
470264943,497,Crisspl,2020-08-13T21:40:58Z,you cant just copy every time into same output address
470265381,497,Crisspl,2020-08-13T21:41:53Z,it's ok IIRC
470265499,497,Crisspl,2020-08-13T21:42:10Z,its ok IIRC
470266840,497,Crisspl,2020-08-13T21:45:26Z,output format must always be not block-compressed (because we dont support `encodePixels` for block-compressed formats) so this is not needed
470266913,497,Crisspl,2020-08-13T21:45:38Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/497/files#r470266840
470267309,497,Crisspl,2020-08-13T21:46:34Z,"ah, u have comment about it here. Anyway if you keep the loop, then you have to adjust `entryScratchAddress` accordingly"
470268869,497,Crisspl,2020-08-13T21:50:23Z,dont use C-style casts
470270077,497,Crisspl,2020-08-13T21:53:22Z,just use `readBlockArrayOffset` the same way u do in `decode()`. Nothing changes here. It's just named incorrectly
470662133,497,AnastaZIuk,2020-08-14T14:35:44Z,corrected in following commit
470679905,497,AnastaZIuk,2020-08-14T15:01:54Z,corrected in following commit
470680022,497,AnastaZIuk,2020-08-14T15:02:10Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r470679905
470680132,497,AnastaZIuk,2020-08-14T15:02:22Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/497#discussion_r470679905
470717777,497,devshgraphicsprogramming,2020-08-14T16:07:31Z,why is this a `static` !?
470720777,497,devshgraphicsprogramming,2020-08-14T16:13:32Z,"common state (from which you inherit) has a union between `{extent,layerCount}` and a `vectorSIMDu32`"
470722311,497,devshgraphicsprogramming,2020-08-14T16:16:11Z,"this seems very off, should be `w<copyLayerCount;`"
470723705,497,devshgraphicsprogramming,2020-08-14T16:18:55Z,"you could have just used `readBlockPos>core::vectorSIMDi32(0,0,0,0)`"
470723819,497,devshgraphicsprogramming,2020-08-14T16:19:08Z,which gives a boolean vector.
470764671,497,AnastaZIuk,2020-08-14T17:41:18Z,corrected in following commit
470767906,497,AnastaZIuk,2020-08-14T17:48:16Z,"the loop is only needed for

```C++
++state->inBaseLayer;
++state->outBaseLayer;
```

what if in/out base layers start with 3 and there are 7 array layers at all?
then the final inBaseLayer will be beyond the available layers in certain loop iteration, won't it?"
470774867,497,AnastaZIuk,2020-08-14T18:02:38Z,corrected 
470775008,497,AnastaZIuk,2020-08-14T18:02:56Z,"eee I won't use it anymore, to delete!"
470775059,497,AnastaZIuk,2020-08-14T18:03:03Z,corrected
472113081,497,devshgraphicsprogramming,2020-08-18T11:40:03Z,"typo, below has one l"
472114037,497,devshgraphicsprogramming,2020-08-18T11:41:57Z,"I'm pretty sure that `state->inOffset` is not counted in blocks.

Also are you sure that `readBlockPos` is counted in blocks?"
472115636,497,devshgraphicsprogramming,2020-08-18T11:45:02Z,remove the block iteration for loop
472115867,497,devshgraphicsprogramming,2020-08-18T11:45:27Z,rename `read` to `write`
472116183,497,devshgraphicsprogramming,2020-08-18T11:45:58Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/497/files/b296885e7f686a8b2d274882630702e371204feb..cccecdeb1bc53cd049b61c899e128cab9c6cf548?file-filters%5B%5D=.cpp&file-filters%5B%5D=.dds#r472114037
472117806,497,devshgraphicsprogramming,2020-08-18T11:49:05Z,"your use of lambdas just made this function slow... if you just did it in-place with if statements if coult actually be optimized away

Also, `normalizeAsUsual` should be the same as `normalizeAsUnsigned`"
472118154,497,devshgraphicsprogramming,2020-08-18T11:49:41Z,no need for you to know block dimensions for the `outFormat`
472127903,497,devshgraphicsprogramming,2020-08-18T12:07:21Z,"what you have right no is correct for reading ""from image"""
472130136,497,devshgraphicsprogramming,2020-08-18T12:11:47Z,"I'd propose loading to scratch as usual (without offsets) to get high perf

and then applying offsets when doing the sum over scratch space"
472130243,497,devshgraphicsprogramming,2020-08-18T12:11:58Z,hoist declaration of array above the loop
472130519,497,devshgraphicsprogramming,2020-08-18T12:12:31Z,I think we're clear now?
472136173,497,AnastaZIuk,2020-08-18T12:22:46Z,"we are doing SAT in place where decode is, won't it destroy the final values being computed?"
472140274,497,devshgraphicsprogramming,2020-08-18T12:30:03Z,there's only one place where you need to add the offset if you do it while doing the sum
472149520,497,devshgraphicsprogramming,2020-08-18T12:41:10Z,"yes it will, my bad"
472177587,497,devshgraphicsprogramming,2020-08-18T13:10:04Z,if your layer count + offsets in the original state go out of bounds `validate` should have caught that.
472178033,497,devshgraphicsprogramming,2020-08-18T13:10:30Z,your loop is definitely wrong
472178201,497,AnastaZIuk,2020-08-18T13:10:43Z,"I think yeah, it will be documented soon by the way:)"
472180497,497,AnastaZIuk,2020-08-18T13:13:04Z,"okay, I will check it and correct it "
472181435,497,devshgraphicsprogramming,2020-08-18T13:14:01Z,"this should be done outside the decode loop (in a separate loop to clear the XY, XZ, YZ planes), this currently breaks loop unrolling and automatic SIMD and readability"
472540988,497,AnastaZIuk,2020-08-18T23:05:00Z,corrected in following commit
472542343,497,AnastaZIuk,2020-08-18T23:09:11Z,"my dear, I'm sure https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/filters/CBasicImageFilterCommon.h#L39
+ https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/filters/CBasicImageFilterCommon.h#L32"
472542551,497,AnastaZIuk,2020-08-18T23:09:49Z,to balance
472543199,497,AnastaZIuk,2020-08-18T23:11:49Z,corrected in following commit
472543840,497,AnastaZIuk,2020-08-18T23:14:02Z,corrected in following commit
472544087,497,AnastaZIuk,2020-08-18T23:14:49Z,corrected in following commit
472544384,497,AnastaZIuk,2020-08-18T23:15:37Z,corrected in following commit
472545843,497,AnastaZIuk,2020-08-18T23:20:11Z,"okay, corrected in following commit"
472551659,497,AnastaZIuk,2020-08-18T23:37:51Z,corrected in following commit
472563057,497,AnastaZIuk,2020-08-19T00:17:29Z,corrected
472992792,497,devshgraphicsprogramming,2020-08-19T12:32:41Z,what happened here?
472996066,497,devshgraphicsprogramming,2020-08-19T12:38:14Z,signed and normalized format
473006445,497,AnastaZIuk,2020-08-19T12:55:15Z,"It was wrong, I have seen it recently while using the lambdas with those buffers"
473008336,497,AnastaZIuk,2020-08-19T12:58:04Z,you wamted me to change usual lambda to this afaik but remember we have got a flag that may force normalizing regardless of format
473025677,497,devshgraphicsprogramming,2020-08-19T13:23:47Z,"I'm concerned about SFLOAT always normalizing inot [1-,1] which is not very helpful."
410378702,468,devshgraphicsprogramming,2020-04-17T17:50:54Z,"what are you doing here, this is a dead variable!"
410378864,468,devshgraphicsprogramming,2020-04-17T17:51:10Z,its actually writeable cause GLI supports writing it
410383381,468,devshgraphicsprogramming,2020-04-17T17:59:40Z,too many `o`s
410388592,468,devshgraphicsprogramming,2020-04-17T18:09:40Z,"there's no conversion needed, maybe a flip at most"
410388810,468,devshgraphicsprogramming,2020-04-17T18:10:06Z,"there's no conversion needed, maybe a flip at most"
410388906,468,devshgraphicsprogramming,2020-04-17T18:10:13Z,"there's no conversion needed, maybe a flip at most"
410389701,468,devshgraphicsprogramming,2020-04-17T18:11:52Z,you got the formats for the `getTexelOrBlockBytesize` completely wrong here
410390439,468,devshgraphicsprogramming,2020-04-17T18:13:18Z,you should not be firing off a conversion if `srcFormat==destFormat`
410391068,468,devshgraphicsprogramming,2020-04-17T18:14:33Z,why are the old regions going in as a reference?
410391155,468,devshgraphicsprogramming,2020-04-17T18:14:44Z,`regions` shadows `regions`
410391818,468,devshgraphicsprogramming,2020-04-17T18:15:53Z,"there's no flipping going on here, just pointer arithmetic"
410392321,468,devshgraphicsprogramming,2020-04-17T18:16:54Z,you could have that be an `ICPUBuffer` already
410393248,468,devshgraphicsprogramming,2020-04-17T18:18:50Z,"no `convertFilter` will already take care of this without any problems, you can just set the state to cover the whole image above"
410393907,468,devshgraphicsprogramming,2020-04-17T18:20:03Z,this is ALWAYS in texels
410394453,468,devshgraphicsprogramming,2020-04-17T18:21:04Z,"wait, what and WHY?"
410394828,468,devshgraphicsprogramming,2020-04-17T18:21:48Z,"you could have already passed this in, instead of `rowData`"
410396488,468,AnastaZIuk,2020-04-17T18:24:59Z,"I told u that I got some weird crashes, anyway now we need to fix the bug firstly"
410396540,468,AnastaZIuk,2020-04-17T18:25:06Z,XD
410396737,468,AnastaZIuk,2020-04-17T18:25:26Z,it flips it indeed
410397943,468,AnastaZIuk,2020-04-17T18:27:43Z,okay
410398079,468,devshgraphicsprogramming,2020-04-17T18:27:58Z,in texels not blocks :(
410399413,468,devshgraphicsprogramming,2020-04-17T18:30:40Z,"this is how I like my include paths, so I can see the 3rdparty lib they come from"
410400186,468,devshgraphicsprogramming,2020-04-17T18:32:10Z,"nice, I like it"
410400820,468,devshgraphicsprogramming,2020-04-17T18:33:28Z,here you want 0
410400915,468,devshgraphicsprogramming,2020-04-17T18:33:39Z,also 0
410401071,468,AnastaZIuk,2020-04-17T18:33:58Z,it does what it did before I think and seems it flips image
410401381,468,devshgraphicsprogramming,2020-04-17T18:34:36Z,"no you want to define a whole new region, full 2D extent (depth==1), mipLevel 0, base array level 0 and array count 1"
410401907,468,devshgraphicsprogramming,2020-04-17T18:35:43Z,you have control over this
410401967,468,devshgraphicsprogramming,2020-04-17T18:35:51Z,you have control over this 
410402235,468,AnastaZIuk,2020-04-17T18:36:26Z,"cause rendered is flipped in reference to written one, but actaully you are right probably"
410402369,468,devshgraphicsprogramming,2020-04-17T18:36:43Z,explain what's going on here
410436736,468,AnastaZIuk,2020-04-17T19:49:51Z,"nope, I can't remember but TGA is sensitive to it as far as I remember
it was previously commented it is required"
410436833,468,AnastaZIuk,2020-04-17T19:50:03Z,"nope, I can't remember but TGA is sensitive to it as far as I remember
it was previously commented it is required"
410438102,468,AnastaZIuk,2020-04-17T19:52:39Z,why? it calculates texels amount with pitch for `EF_A1R5G5B5_UNORM_PACK16` entry
410445073,468,AnastaZIuk,2020-04-17T20:08:31Z,mistake
410448389,468,AnastaZIuk,2020-04-17T20:16:01Z,you told me once I need to fly through regions to perform it per mipmaps
410448551,468,AnastaZIuk,2020-04-17T20:16:22Z,when I asked you what about mipmaped layered images
410449933,468,AnastaZIuk,2020-04-17T20:19:28Z,"there is no actually field such as ""mip level count"" in state, how can I do it?"
410450496,468,AnastaZIuk,2020-04-17T20:20:29Z,it's a single row image
410450650,468,AnastaZIuk,2020-04-17T20:20:49Z,it will give it's X texel amount
410450981,468,AnastaZIuk,2020-04-17T20:21:40Z,"okay, so I will exchange void* to ICPUBuffer"
410451224,468,AnastaZIuk,2020-04-17T20:22:07Z,em additionally it should be there https://github.com/buildaworldnet/IrrlichtBAW/pull/468#discussion_r410393907
410452864,468,AnastaZIuk,2020-04-17T20:25:38Z,"for not BC format's it returns 1 rather, so it;s good I think"
410453867,468,AnastaZIuk,2020-04-17T20:27:58Z,"yeah it returns 1 for not BC, it's good"
410467774,468,AnastaZIuk,2020-04-17T21:01:18Z,the input is in texels as far as I know
410467854,468,AnastaZIuk,2020-04-17T21:01:28Z,so computed value is in texels as well
410468629,468,AnastaZIuk,2020-04-17T21:03:17Z,you mean?
410468780,468,AnastaZIuk,2020-04-17T21:03:39Z,:)
410470145,468,AnastaZIuk,2020-04-17T21:06:56Z,haven't you seen it? https://github.com/buildaworldnet/IrrlichtBAW/blob/2e41fbce4dde797df22532800d6686bb1fec86a8/src/irr/asset/CImageWriterJPG.cpp#L257
410470534,468,AnastaZIuk,2020-04-17T21:07:50Z,you mean?
410470650,468,AnastaZIuk,2020-04-17T21:08:05Z,you mean?
410473296,468,AnastaZIuk,2020-04-17T21:14:38Z,"those are variables and pointers which value depends on final format, but I left is simmilar as it was before

actually it just copy to a row needed for jpg library (and png does the same) for writing process, but it will warn if by some miracle format at that point isn's EF_R8_SRGB or EF_R8G8B8_SRGB"
410473335,468,AnastaZIuk,2020-04-17T21:14:45Z,it's good
410485625,468,AnastaZIuk,2020-04-17T21:47:28Z,"if you mean I have got 2 same vectors - look at their types, they are different so I have to do that"
410485639,468,AnastaZIuk,2020-04-17T21:47:30Z,"if you mean I have got 2 same vectors - look at their types, they are different so I have to do that"
410485942,468,AnastaZIuk,2020-04-17T21:48:12Z,I did it because my project could not see those files
410486517,468,AnastaZIuk,2020-04-17T21:49:22Z,maybe we should change it in cmake
410486994,468,AnastaZIuk,2020-04-17T21:50:36Z,fixed and tested
410487588,468,AnastaZIuk,2020-04-17T21:52:13Z,"that's why I asked you a few days ago how to get entire single layer, only one specified by the user"
410675871,468,devshgraphicsprogramming,2020-04-18T09:44:42Z,itsn't TRUE COLOR 32bit rgba8 ?
410675987,468,devshgraphicsprogramming,2020-04-18T09:46:32Z,"you're iterating over alll regions, ever

you should be iterating over mipmaps
```cpp
for (uint32_t mip=0u; params.mipLevelCount; i++)
{
//fill out state
execute(&state);
}
```

the filter itself will get the appropriate regions and do operations on them (and clip the areas properly by itself as well)"
410676065,468,devshgraphicsprogramming,2020-04-18T09:47:43Z,"`./3rdparty` is an include path already, you should be seeing it"
410676173,468,devshgraphicsprogramming,2020-04-18T09:49:08Z,"You have control over the size of the image you're saving, you should know how many blocks it is anyway, not have to calculate it."
410676178,468,devshgraphicsprogramming,2020-04-18T09:49:13Z,"You have control over the size of the image you're saving, you should know how many blocks it is anyway, not have to calculate it."
410676179,468,devshgraphicsprogramming,2020-04-18T09:49:15Z,"You have control over the size of the image you're saving, you should know how many blocks it is anyway, not have to calculate it."
410676241,468,devshgraphicsprogramming,2020-04-18T09:49:55Z,so why make this look like a generalpurpose function if its only intended to work with an image created with `IImageAssetHandlerBase::getTopImageDataForCommonWriting` ?
410676343,468,devshgraphicsprogramming,2020-04-18T09:50:54Z,this is  a GLI loader!!!!! It loads BC1-7 images!
410676381,468,devshgraphicsprogramming,2020-04-18T09:51:18Z,use smart pointers and move semantics
410676459,468,devshgraphicsprogramming,2020-04-18T09:52:43Z,"ugh, the whole point of taking a `core::smart_refctd_ptr` was to avoid the memcpy, just take over the ownership of the buffer and use it!"
410676527,468,devshgraphicsprogramming,2020-04-18T09:53:22Z,what are you doing?
410676758,468,devshgraphicsprogramming,2020-04-18T09:55:15Z,wait why on earth are you making a single row image?
410677037,468,devshgraphicsprogramming,2020-04-18T09:58:25Z,"its still dead, all 3 lines"
410677129,468,devshgraphicsprogramming,2020-04-18T09:59:05Z,"a `<asset::EF_A1R5G5B5_UNORM_PACK16, asset::EF_A1R5G5B5_UNORM_PACK16>` conversion still costs!"
410677325,468,devshgraphicsprogramming,2020-04-18T10:01:33Z,"we have support for both RGB and BGR formats for textures, the loader must be reporting the format wrong (in the creation parameters) if it doesn't work without conversion"
410677361,468,devshgraphicsprogramming,2020-04-18T10:02:13Z,we support that texture format 100%
410677582,468,devshgraphicsprogramming,2020-04-18T10:04:32Z,"if you're going to use `asset::IImageAssetHandlerBase::calcPitchInBlock` as a value any time that a ""TEXEL COUNT VALUE IS REQUIRED"" the least you could do is assert that the block size is 1x1x1"
410678519,468,AnastaZIuk,2020-04-18T10:15:23Z,"cause tga did it before, there is likely a row stream provided by tga and it used convertColor. I had to remake it at least"
410680121,468,AnastaZIuk,2020-04-18T10:32:27Z,ah you're right
410680480,468,AnastaZIuk,2020-04-18T10:36:07Z,why?
410680855,468,AnastaZIuk,2020-04-18T10:39:55Z,"TGA Loader and Writer did it before, I know there there is and was a support for that, but not sure if I should change it. There were comments about it that TGA requires it"
410680894,468,AnastaZIuk,2020-04-18T10:40:16Z,I know https://github.com/buildaworldnet/IrrlichtBAW/pull/468#discussion_r410680855
410682856,468,AnastaZIuk,2020-04-18T10:58:52Z,"actually it depends, but will just take `bytesPerTexel`"
410682903,468,AnastaZIuk,2020-04-18T10:59:09Z,it may be rgb8 and rgba8 
410684198,468,AnastaZIuk,2020-04-18T11:12:33Z,but it did not work for me
410684593,468,AnastaZIuk,2020-04-18T11:15:56Z,"image at that point is translated to have only top data, the writer encapsulates it's implementation, I don't find it much wrong  solution"
410684658,468,AnastaZIuk,2020-04-18T11:16:42Z,but I don't undestand quite what you mean
410684754,468,AnastaZIuk,2020-04-18T11:17:36Z,"okay, I will use custom buffer allocator craetion"
410687215,468,AnastaZIuk,2020-04-18T11:41:09Z,I'm putting there true texel amount
410687449,468,AnastaZIuk,2020-04-18T11:43:40Z,"but it is in a loader, nobody will use it and we are sure it isn't BC"
410688009,468,AnastaZIuk,2020-04-18T11:50:52Z,okay
410688970,468,AnastaZIuk,2020-04-18T12:02:14Z,it doesn't cost anything
410689050,468,AnastaZIuk,2020-04-18T12:02:50Z,"there was a mistake, fixed"
410690779,468,devshgraphicsprogramming,2020-04-18T12:20:25Z,great and then you do nothing with the copy buffer :facelpalm:
410691340,468,devshgraphicsprogramming,2020-04-18T12:25:49Z,ah two memcpys
410691350,468,devshgraphicsprogramming,2020-04-18T12:25:55Z,use `swap_ranges`
410691473,468,devshgraphicsprogramming,2020-04-18T12:27:12Z,"just create an image in the native TGA format, then `convert` at the end, dont do a weird 1D image per row"
410691537,468,devshgraphicsprogramming,2020-04-18T12:27:50Z,this whole function's existence probably doesn't make sense at all
410691689,468,devshgraphicsprogramming,2020-04-18T12:29:00Z,when building or Intellisense?
410691976,468,AnastaZIuk,2020-04-18T12:31:42Z,when building
410692139,468,devshgraphicsprogramming,2020-04-18T12:33:17Z,dont call `convertTexelToBlocks` its confusing as fuck and its a NOOP for a PNG image
410692149,468,devshgraphicsprogramming,2020-04-18T12:33:28Z,or make the blockInfo at all
410692864,468,devshgraphicsprogramming,2020-04-18T12:39:41Z,"wondered if you could have done the `getPNGConvertedOutput` straight from the input image view, and not call `getTopImageDataForCommonWriting`"
410694226,468,devshgraphicsprogramming,2020-04-18T12:51:16Z,converter should work FROM BC formats (not TO) actually
410694302,468,AnastaZIuk,2020-04-18T12:51:46Z,there is no memcpy 
410694395,468,devshgraphicsprogramming,2020-04-18T12:52:08Z,"you shouldn't run a conversion if the input and output formats match, then just run a flatten filter (much much faster)"
410694574,468,devshgraphicsprogramming,2020-04-18T12:53:00Z,ok lets move this to https://github.com/buildaworldnet/IrrlichtBAW/pull/468#discussion_r410680855
410694935,468,devshgraphicsprogramming,2020-04-18T12:55:37Z,"just remove those conversions and test it without, I'm pretty sure it will work (if you fix everything along the way to report the format correctly)"
410694978,468,devshgraphicsprogramming,2020-04-18T12:55:57Z,works for me and criss it seems on our branches
410695241,468,AnastaZIuk,2020-04-18T12:58:04Z,"but I need a convert, so filters usage -> I needed create an image"
410696016,468,devshgraphicsprogramming,2020-04-18T13:04:11Z,yeah you probably don't need this
410696136,468,AnastaZIuk,2020-04-18T13:05:11Z,I think we need such a function in various writers
410696144,468,devshgraphicsprogramming,2020-04-18T13:05:15Z,this needs logical fixing
410696150,468,AnastaZIuk,2020-04-18T13:05:20Z,there will be many code duplication otherwise
410696289,468,AnastaZIuk,2020-04-18T13:06:56Z,width is in texels
410696356,468,AnastaZIuk,2020-04-18T13:07:42Z,"since texelBlockByteSize may be in texels or blocks, we need to make sure byte size will be in texels , input may be various"
410696451,468,AnastaZIuk,2020-04-18T13:08:16Z,to final calculate row pitch in texels
410696540,468,devshgraphicsprogramming,2020-04-18T13:08:50Z,you should assert that block size == 1x1x1
410697116,468,devshgraphicsprogramming,2020-04-18T13:14:36Z,"to be honest there's no reason for `IImageAssetHandlerBase::getTopImageDataForCommonWriting` to exist, if you have a function like this (it could just take an image view as an input instead of image)"
410697208,468,devshgraphicsprogramming,2020-04-18T13:15:12Z,"seems like PNG and JPG writer could use the same function.

I have the exact same comment here:
- don't convert if formats match, use flatten instead
- take imageview as input
- get rid of `getTopImageDataForCommonWriting` you could do this all in here"
410697383,468,devshgraphicsprogramming,2020-04-18T13:17:05Z,"also don't convert the entire, WHOLE image, just the miplevel+arraylayer you're actually doing to write out ;)"
410697392,468,devshgraphicsprogramming,2020-04-18T13:17:12Z,ICPUImageView
410697613,468,devshgraphicsprogramming,2020-04-18T13:18:28Z,"ok
"
410697722,468,devshgraphicsprogramming,2020-04-18T13:19:06Z,"you can get rid of the switch, `convertedImage` will 100% be in only these two formats"
410702045,468,AnastaZIuk,2020-04-18T14:04:27Z,"it's correct, any input to any output except BC (it's png)"
410705120,468,devshgraphicsprogramming,2020-04-18T14:30:20Z,"you probably want to use a different function to get the screensize, this will give you the current size of whatever the current FBO bound is"
410705332,468,devshgraphicsprogramming,2020-04-18T14:32:39Z,"placing the fence does not stall the CPU, you need to wait on the fence with `IDriverFence::waitCPU` before you acess the IGPUBuffer's new data with the CPU, for example, through a mapping"
410705591,468,AnastaZIuk,2020-04-18T14:34:17Z,blockInfo is better to me since final true extent take pitch into account cuz your functions deals with row buffer length afaik
410705711,468,AnastaZIuk,2020-04-18T14:35:39Z,I wrote it in previous PR in fence header
410708327,468,AnastaZIuk,2020-04-18T14:57:53Z,"why? it's png loader, the dim won't be different from 1x1x1"
410708542,468,AnastaZIuk,2020-04-18T14:59:03Z,"I changed it a little bit, now it's wonderful "
410708574,468,AnastaZIuk,2020-04-18T14:59:19Z,"yeah, to fill in docs"
410709086,468,AnastaZIuk,2020-04-18T15:03:37Z,"I think my code will be cleaner with my approach, but I will optimalize memcpy to get rid of it"
410709294,468,AnastaZIuk,2020-04-18T15:05:07Z,there is only 1 memcpy 
410713382,468,AnastaZIuk,2020-04-18T15:38:22Z,okay in next commit there will be no any  memcpy 
410715037,468,AnastaZIuk,2020-04-18T15:52:39Z,to fix
410762907,468,devshgraphicsprogramming,2020-04-18T22:40:19Z,"wrong, do it in texels"
410763515,468,devshgraphicsprogramming,2020-04-18T22:43:47Z,"if you dont plan on supporting downloading multi-mip level image views then assert that they only have one mipmap level.... or make more regions

also you're not specifying the parameters correctly given the image view, the image view defines the subresource (layer offset, miplevel offset, and their counts), if I pass a really large (layers and mips) gpu image to this function I will end up having an ICPUImage with just as many layers and mips, except that it will only be partially covered by one region"
410763673,468,devshgraphicsprogramming,2020-04-18T22:44:41Z,this is the only fence you need
410763869,468,devshgraphicsprogramming,2020-04-18T22:45:56Z,"you don't need the fence here, the only thing you want to wait on is accessing the `texelBuffer->getPointer()` pointer because you don't want to look at (read) that memory area before the GPU writes to it

all the mapping, etc. can still be going on while GPU is working."
410764264,468,devshgraphicsprogramming,2020-04-18T22:48:39Z,"unmapping memory makes the pointer go invalid, the `asset::CCustomAllocatorCPUBuffer<core::null_allocator` is a dummy wrapper around your mapped pointer, so `destinationBoundMemory->getMappedPointer()==texelBuffer->getPointer()` holds as long as memory is mapped (and if its not `texelBuffer->getPointer()` now has a stale and garbage pointer)

you should unmap after we're done using the `texelBuffer` which in this case is AFTER you have called to `tryToWrite`"
410764384,468,devshgraphicsprogramming,2020-04-18T22:49:23Z,I'd just make these match 100% with `image` and have the subresource encompass the whole `image` and be done with it.
410969671,468,AnastaZIuk,2020-04-19T19:07:27Z,I specify image view params bellow
410970606,468,AnastaZIuk,2020-04-19T19:12:20Z,"downloadMipMap level function performs `copyImageToBuffer`, doesn't it need a fence?"
410976716,468,AnastaZIuk,2020-04-19T19:44:29Z,"maybe add a note in docs, that it will handle 0 miplevel only?"
411197576,468,devshgraphicsprogramming,2020-04-20T08:38:44Z,"> maybe add a note in docs, that it will handle 0 miplevel only?

yes and assert any assumptions you make about the input"
411212764,468,AnastaZIuk,2020-04-20T09:01:44Z,outdated
411212881,468,AnastaZIuk,2020-04-20T09:01:56Z,it's done
411212981,468,AnastaZIuk,2020-04-20T09:02:04Z,done
411213086,468,AnastaZIuk,2020-04-20T09:02:17Z,it'f fixed
411213495,468,AnastaZIuk,2020-04-20T09:02:57Z,it's done
411213562,468,AnastaZIuk,2020-04-20T09:03:04Z,it's done
411213819,468,devshgraphicsprogramming,2020-04-20T09:03:27Z,ASSERT
411214028,468,AnastaZIuk,2020-04-20T09:03:44Z,it's done
411215695,468,AnastaZIuk,2020-04-20T09:06:17Z,"it's done, I use another strategy, but don't perform cost operations if formats are same"
411216689,468,devshgraphicsprogramming,2020-04-20T09:07:51Z,"TBD... TGA needs its own special review.

this function is used only by TGA right?"
411217937,468,AnastaZIuk,2020-04-20T09:09:49Z,"the function is moved to TGA Loader, since it's specific to it"
411218478,468,devshgraphicsprogramming,2020-04-20T09:10:32Z,"you should place the fence as soon as possible (line 149) but you wait as late as possible (line 178 just before tryToWrite)

Also you have an unused variable/fence called `fence`"
411219413,468,devshgraphicsprogramming,2020-04-20T09:11:54Z,ok moved to TGA
411234565,468,AnastaZIuk,2020-04-20T09:34:34Z,outdated
411265228,468,devshgraphicsprogramming,2020-04-20T10:23:23Z,"copyImageToBuffer is a GPU-side process, GPU doesn't need to sync with itself (at least not in OpenGL)"
412031868,468,devshgraphicsprogramming,2020-04-21T09:37:12Z,did you move them?
412039764,468,devshgraphicsprogramming,2020-04-21T09:48:36Z,"`trueExtent` and `blockInfo` make no sense, you have all the info in the `convertedRegion`"
412041792,468,devshgraphicsprogramming,2020-04-21T09:51:29Z,"no point of this being here at all, you can get it all from the first region"
412047032,468,devshgraphicsprogramming,2020-04-21T09:59:08Z,unused function
412047354,468,devshgraphicsprogramming,2020-04-21T09:59:35Z,"same as with the PNG and JPG writers, the `convertedRegion` has all this!"
412048619,468,devshgraphicsprogramming,2020-04-21T10:01:28Z,actually JPG writer is the only place where you've done this right (no extra confusing variables)
412049969,468,devshgraphicsprogramming,2020-04-21T10:03:30Z,"this is plain wrong, `bufferRowLength` is supposed to equal `region->imageExtent.width` rounded up to the multiple of block size (not bytesize, physical dimensions)"
412066539,468,devshgraphicsprogramming,2020-04-21T10:29:34Z,"this actually makes far more sense as a raw array of `struct{uint8_t}`, `struct{uint8_t[4]}`, or `struct{uint8_t[4]}` than an actual image"
412066836,468,devshgraphicsprogramming,2020-04-21T10:30:03Z,basically an `ICPUBuffer` instead of a whole image
412068223,468,devshgraphicsprogramming,2020-04-21T10:32:13Z,"color mapped is an error, since you're not using `colorMap` yet"
412072349,468,devshgraphicsprogramming,2020-04-21T10:38:53Z,"this function is overly complex, I'd just make a function that takes an input `ICPUBuffer` and the same input/output format template parameters, and create an output `ICPUBuffer`

You can still iterate over memory and call 
```cpp
const void* srcPix[] = {reinterpret_cast<const uint8_t*>(inputBuffer->getPointer())+texel*inputBlockByteSize,nullptr,nullptr,nullptr};
convertColor<inputFormat,outputFormat>(srcPix,reinterpret_cast<const uint8_t*>(outputBuffer->getPointer())+texel*outputBlockByteSize,0,0);
```
on each texel

the whole function will be 10 lines instead of 60"
412085684,468,devshgraphicsprogramming,2020-04-21T11:00:38Z,use r-value reference && for `texelBuffer`
412102341,468,devshgraphicsprogramming,2020-04-21T11:28:25Z,"this will fuck up, you should probably use `blockByteSize*width` for the Y block byte size, and then `blockByteSize*width*height` for Z"
412116913,468,devshgraphicsprogramming,2020-04-21T11:52:13Z,you're using the old image fromat (which will be smaller) to determine the size of the backing buffer (`referenceTrueExtent`) for the new image (which will be larger)
412366918,468,AnastaZIuk,2020-04-21T17:51:09Z,it is as it was
412371843,468,AnastaZIuk,2020-04-21T17:58:06Z,"yep, in upcoming commit"
412375311,468,AnastaZIuk,2020-04-21T18:02:51Z,fixed in upcoming commit
412375387,468,AnastaZIuk,2020-04-21T18:02:57Z,fixed in upcoming commit
412376865,468,AnastaZIuk,2020-04-21T18:05:06Z,fixed in upcoming commit
412377164,468,AnastaZIuk,2020-04-21T18:05:30Z,I did for filters usage
412379328,468,AnastaZIuk,2020-04-21T18:08:36Z,deleted in upcoming commit
412389935,468,AnastaZIuk,2020-04-21T18:24:03Z,fixed in upcoming commit
412390004,468,AnastaZIuk,2020-04-21T18:24:10Z,fixed in upcoming commit
412391015,468,AnastaZIuk,2020-04-21T18:25:45Z,fixed in upcoming commit
412391973,468,AnastaZIuk,2020-04-21T18:27:07Z,look at `newTexelOrBlockByteSize`
412393691,468,AnastaZIuk,2020-04-21T18:29:39Z,"yyyh wait, logic in that case is wrong even though"
412395164,468,AnastaZIuk,2020-04-21T18:31:49Z,fixed in upcoming commit
412401295,468,AnastaZIuk,2020-04-21T18:41:13Z,"""fixed"" in upcoming commit"
412423533,468,AnastaZIuk,2020-04-21T19:15:05Z,done
412733088,468,devshgraphicsprogramming,2020-04-22T07:19:49Z,doesn't `createImageDataForCommonWriting` create regions with non-null `bufferImageHeight` ?
412734821,468,AnastaZIuk,2020-04-22T07:22:28Z,uh it does https://github.com/buildaworldnet/IrrlichtBAW/pull/468/files#diff-8114b16f36382aab5966b5b39870b592R98
412735525,468,devshgraphicsprogramming,2020-04-22T07:23:22Z,same for TGA writer
412738046,468,devshgraphicsprogramming,2020-04-22T07:27:26Z,"> 
> 
> uh it does https://github.com/buildaworldnet/IrrlichtBAW/pull/468/files#diff-8114b16f36382aab5966b5b39870b592R98

so use it instead of `convertedRegion->imageExtent.height`"
412741372,468,devshgraphicsprogramming,2020-04-22T07:32:28Z,the logic is still completely and utterly fucked
413157473,468,AnastaZIuk,2020-04-22T17:02:57Z,done
413223472,468,AnastaZIuk,2020-04-22T18:34:54Z,"""done"" XD"
518968449,554,devshgraphicsprogramming,2020-11-06T19:48:49Z,"I hate duplicate code @Crisspl make sure that `float irr_glsl_projected_hemisphere_remainder_and_pdf(out float pdf, in float L_z)` uses `float irr_glsl_projected_hemisphere_pdf(in float L_z)`"
518968591,554,devshgraphicsprogramming,2020-11-06T19:49:09Z,same thing as https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r518968449
518969949,554,devshgraphicsprogramming,2020-11-06T19:51:58Z,why do these functions exist?
518970010,554,devshgraphicsprogramming,2020-11-06T19:52:05Z,why do these functions exist?
518970369,554,devshgraphicsprogramming,2020-11-06T19:52:46Z,"pdf should be 0.0, because either the viewer or light is behind the surface and this is a BRDF"
518970423,554,devshgraphicsprogramming,2020-11-06T19:52:53Z,"pdf should be 0.0, because either the viewer or light is behind the surface and this is a BRDF"
518971207,554,devshgraphicsprogramming,2020-11-06T19:54:31Z,same comment as with beckmann header
518971249,554,devshgraphicsprogramming,2020-11-06T19:54:37Z,same comment as with beckmann header
518971287,554,devshgraphicsprogramming,2020-11-06T19:54:42Z,same comment as with beckmann header
518971315,554,devshgraphicsprogramming,2020-11-06T19:54:46Z,same comment as with beckmann header
519004193,554,devshgraphicsprogramming,2020-11-06T21:04:01Z,whats the messing around with alpha and reflectance?
521646706,554,devshgraphicsprogramming,2020-11-11T21:23:31Z,why is the diffuse smooth when its a transmissive? and why is it not allowed an albedo?
521647152,554,devshgraphicsprogramming,2020-11-11T21:24:27Z,`1.0/generator_pdf` could be precomputed
522479012,554,devshgraphicsprogramming,2020-11-12T22:43:09Z,this is doing duplicate computation
522479107,554,devshgraphicsprogramming,2020-11-12T22:43:22Z,duplicate computation
522480569,554,devshgraphicsprogramming,2020-11-12T22:46:50Z,why do you need this?
522480755,554,devshgraphicsprogramming,2020-11-12T22:47:14Z,where is this used?
522482141,554,devshgraphicsprogramming,2020-11-12T22:49:48Z,what happened to this optimization?
522482989,554,devshgraphicsprogramming,2020-11-12T22:50:52Z,is the proper twosided handling implemented yet? because with different instruction streams per face/side this function shouldn't exist yet
522485052,554,devshgraphicsprogramming,2020-11-12T22:53:50Z,move this and the test for `if (cosFactor>FLT_MIN)` to the very top
522486182,554,devshgraphicsprogramming,2020-11-12T22:55:13Z,"will save you a lot of data fetches and logic if you have a BRDF or a very ""on edge"" BSDF"
522490821,554,devshgraphicsprogramming,2020-11-12T23:03:45Z,"after you do twosided properly, there will be no more need to orient the Etas"
522491246,554,devshgraphicsprogramming,2020-11-12T23:04:49Z,"still, whats with the reflectance and roughness modification?"
522492250,554,devshgraphicsprogramming,2020-11-12T23:07:28Z,"if transmission occurs, how will the `cos_eval_DG` functions play with the fact that one of `VdotN` or `LdotN` will be negative? especially the smith masking function?

Furthermore at least one of `VdotH` and `LdotH` will be negative too!"
522492959,554,devshgraphicsprogramming,2020-11-12T23:09:16Z,so coating is still not unified with blend?
522494998,554,devshgraphicsprogramming,2020-11-12T23:14:46Z,wrong
522495146,554,devshgraphicsprogramming,2020-11-12T23:15:11Z,again
522496231,554,devshgraphicsprogramming,2020-11-12T23:17:56Z,"this check should move up... a lot (if bsdf and not valid, you can skip all this)"
522496378,554,devshgraphicsprogramming,2020-11-12T23:18:23Z,in `eval_and_pdf` cost factor check is needed to skip useless work
522498334,554,devshgraphicsprogramming,2020-11-12T23:23:33Z,"NOOOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

Conductor ONLY!

Othewise fresnel goes into the PDF!"
522510249,554,Crisspl,2020-11-12T23:44:44Z,"this vec3(1.0) is wrong, changed it to transmittance. alpha2==0.0 in case of bsdf is because OP_DIFFTRANS is always smooth (doesnt even have roughness parameter)"
522511239,554,Crisspl,2020-11-12T23:46:01Z,thats why i didnt even bother with proper twosided handling
522991302,554,Crisspl,2020-11-13T14:39:37Z,"it is blend-like, but has different opcode. Honestly i cant see any point in unifying them further, in the end of the day they differ a lot (first of all blend takes weight from bsdf_data or texture and coating computes it). So there would be a need for flag determining how weights are obtained which already stands for divergence between most of the work done by the opcode"
524262127,554,devshgraphicsprogramming,2020-11-16T13:21:00Z,"> because OP_DIFFTRANS is always smooth (doesnt even have roughness parameter)

we could allow a rough DIFFTRANS (in the IR) at no extra cost (excution or complexity)"
524265984,554,devshgraphicsprogramming,2020-11-16T13:27:23Z,"reading and writing data to random registers might be expensive... so it would be nice not to diverge for that
(which is why single opcode is nice)"
524269469,554,devshgraphicsprogramming,2020-11-16T13:32:45Z,"you forgot to clamp all the `dot` variables before using them...

Also a quick check for the **after clamp value** of `NdotL` coudl save you a lot of computation here (and data fetches)"
524270666,554,devshgraphicsprogramming,2020-11-16T13:34:47Z,can support rough difftrans at no cost
524272008,554,devshgraphicsprogramming,2020-11-16T13:37:07Z,"use a proper branch... otherwise you're doing 2x the memory fetches

also its not `NdotV` that you must use (interpolated shading normals can fuck this up) .... but take in a boolean `frontFace` which in the rasterization shader would be `gl_FrontFacing`"
526201400,554,Crisspl,2020-11-18T15:56:59Z,"now i dont, not used"
526202266,554,Crisspl,2020-11-18T15:58:05Z,"nowhere, just a utility"
526496333,554,devshgraphicsprogramming,2020-11-18T23:43:14Z,whats this still doing?
526496485,554,devshgraphicsprogramming,2020-11-18T23:43:38Z,update comment
526497269,554,devshgraphicsprogramming,2020-11-18T23:45:29Z,"wait what?
CIE XYZ both here and in the generator!"
526497585,554,devshgraphicsprogramming,2020-11-18T23:46:16Z,the `cosFactor` check!
526500143,554,devshgraphicsprogramming,2020-11-18T23:53:26Z,why don't you just do `G2_over_G1` here and then mul the thing by `pdf` after you get it.. since the PDF is exactly the other part (`G1_over_2NdotV * ndf_val *0.5` for conductor and the other thing for dielectric refraction) ? 
526501255,554,devshgraphicsprogramming,2020-11-18T23:56:15Z,"basically it should be
```glsl
float pdf = 0.0;
vec3 remainder = vec3(0.0);
if (cosFactor>FLT_MIN)
{
    bool is_valid = true;
    if (is_bsdf)
    {
        is_valid = //special check
    }

    if (is_valid)
    {
         //the meat of the function
    }
}
vec3 eval = remainder*pdf;
writeRegisters(pdf,eval);
```"
526501797,554,devshgraphicsprogramming,2020-11-18T23:57:42Z,"listen to me...
and only compute the remainder
https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r526500143
mul by pdf at the end!"
526501917,554,devshgraphicsprogramming,2020-11-18T23:58:06Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r526501255
"
526502824,554,devshgraphicsprogramming,2020-11-19T00:00:31Z,conductor need to be a blend
526503238,554,devshgraphicsprogramming,2020-11-19T00:01:45Z,"instead of weight.. use `out_pdf` right away
https://github.com/buildaworldnet/IrrlichtBAW/pull/424#discussion_r509400689"
526503583,554,devshgraphicsprogramming,2020-11-19T00:02:34Z,"could have been `out_pdf *= pdf`

also good to call it `localPdf` instead of `pdf`"
526504617,554,devshgraphicsprogramming,2020-11-19T00:05:31Z,dont use `cos_eval_DG` .. break them down just like you did the remainder functions in the remainder stream
526504743,554,devshgraphicsprogramming,2020-11-19T00:05:59Z,"if you heed my advice... you'll no longer need all these
https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r526504617"
526506911,554,devshgraphicsprogramming,2020-11-19T00:12:13Z,ekhm what is doing on?
526506973,554,devshgraphicsprogramming,2020-11-19T00:12:25Z,and what is doing on here?
526798448,554,Crisspl,2020-11-19T11:35:23Z,"this is bug actually, precomputed normals already have correct orientation (sign)"
526799111,554,Crisspl,2020-11-19T11:36:25Z,setting initial interaction with correctly oriented normal
526885195,554,devshgraphicsprogramming,2020-11-19T13:32:52Z,"I told you that it should depent on an input boolean (which would usually be `gl_FrontFacing` passed to this function) and not the dot product of the view vector with the normal, because the normal could have been a smooth interpolated normal!"
526929049,554,devshgraphicsprogramming,2020-11-19T14:28:30Z,delete it then
526929110,554,devshgraphicsprogramming,2020-11-19T14:28:34Z,delete it them
526931518,554,devshgraphicsprogramming,2020-11-19T14:31:49Z,"> Also a quick check for the **after clamp value** of `NdotL` coudl save you a lot of computation here (and data fetches)

Applicable to BRDF leafs only.

Only stuff that has nothing to do with the PDF computation (so all data except for roughness) and computation of Fresnel and G2."
526970294,554,devshgraphicsprogramming,2020-11-19T15:20:27Z,I messed up and gave bad advice
526971827,554,devshgraphicsprogramming,2020-11-19T15:22:22Z,"also skip if roughness is really small , but I guess do that inside `instr_eval_and_pdf_execute`"
526973805,554,devshgraphicsprogramming,2020-11-19T15:24:45Z,pass the skip into `instr_eval_and_pdf_execute` you have divergence for doing the exact same thing (decoding registers and writing the result)
526974227,554,devshgraphicsprogramming,2020-11-19T15:25:16Z,"and remember to init `pdf = skip ? 0.0:1.0;`
"
526984873,554,devshgraphicsprogramming,2020-11-19T15:38:36Z,`gl_FrontFacing` not the dot
526987129,554,devshgraphicsprogramming,2020-11-19T15:41:28Z,seems you dont need to `updateCurrInteraction` anymore...
526987296,554,devshgraphicsprogramming,2020-11-19T15:41:41Z,does function even need to exist?
526999790,554,devshgraphicsprogramming,2020-11-19T15:57:10Z,"move albedo fetching into the `if (is_valid)`

also start off with `eta` and `rcp_eta` uninitialized.. only initialize them inside `if (is_bsdf & isTransmissionPath)¬"
527001244,554,devshgraphicsprogramming,2020-11-19T15:59:04Z,add this to general engine headers (call it `irr_glsl_isValidVNDFMicrofacet`)
527004731,554,Crisspl,2020-11-19T16:03:28Z,???
527005001,554,devshgraphicsprogramming,2020-11-19T16:03:48Z,I have no idea what I meant here.
527013408,554,devshgraphicsprogramming,2020-11-19T16:14:47Z,hmm ok I'll allow a COAT which is a different opcode to BLEND
527032102,554,devshgraphicsprogramming,2020-11-19T16:39:48Z,"you should put the computation of `refractionProb`, the partitioning of the random variable and dciding refraction in the `else` clause above.

Just start with `refraction=false` and instead of screwing around with `rcpChoiceProb`, just put the subsequent `pdf /= rcpChoiceProb` in the `else` case as well"
527032330,554,devshgraphicsprogramming,2020-11-19T16:40:02Z,~ move this into the same `if` statement above ~
527033238,554,devshgraphicsprogramming,2020-11-19T16:41:15Z,"start with them undefined, only compute is you decide on doing a `refraction` in the `else` case above"
527033765,554,devshgraphicsprogramming,2020-11-19T16:41:55Z,"actually its so cheap you dont need to if-statement around it, other than putting them in the `else` (benefit from an already existing branch)"
527034841,554,devshgraphicsprogramming,2020-11-19T16:43:25Z,"actually... it ALWAYS needs to be performed (because PDF is not equal to fresnel, but monochrome of the fresnel, which are not the same thing)

so no need for the if statement"
527036642,554,devshgraphicsprogramming,2020-11-19T16:45:41Z,see https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r527032102
527046925,554,devshgraphicsprogramming,2020-11-19T16:59:28Z,"we expect that the COAT has already computed the fresnel for itself (dont want double application of fresnel)

so `ws` shouldnt exist and the computation at the end should be `coat+coated*wd`"
527049397,554,devshgraphicsprogramming,2020-11-19T17:02:35Z,ok I guess its fine
527050714,554,devshgraphicsprogramming,2020-11-19T17:03:58Z,pretty sure this is wrong for a pure EVAL stream
527057600,554,devshgraphicsprogramming,2020-11-19T17:12:51Z,"this should move to the second if statement... because COATING shouldn't need it (because it need not concern itself with the microfacet for specular reflection, i.e. the fresnel of the COATING part)"
527063719,554,devshgraphicsprogramming,2020-11-19T17:21:41Z,"move the computation of clamped `NdotV` outside (initialize `is_valid` with `NdotV>FLT_MIN`)

the clamped `VdotH` can also be moved up and used in the valid microfacet check somewhat (but before clamp, to check that `VdotH>=0.0`)"
527064834,554,devshgraphicsprogramming,2020-11-19T17:23:24Z,"move this out to contain the `is_valid` check (or move the `is_valid` and `refraction` stuff into the `op_hasSpecular` if case, depending which way you look at it)... because right now you're doing a specular refraction feasibility check on the DIFFTRANS material"
527663034,554,Crisspl,2020-11-20T12:36:01Z,"it's not fetching per se, fetching is `instr_getParameters()`. Seems like parameter fetching is much less divergent than you think
Second thing: im confused, first you say to put `op_isDiffuse(op)` outside is_valid check, but you want albedo inside is_valid check"
527671438,554,Crisspl,2020-11-20T12:52:52Z,ok.... why? XD
527887600,554,devshgraphicsprogramming,2020-11-20T18:14:55Z,"> Second thing: im confused, first you say to put op_isDiffuse(op) outside is_valid check, but you want albedo inside is_valid check

My bad.. `is_valid` is only for microfacet models, diffuse only need to check that clamped cosine is `>FLT_MIN`

Then I guess albedo needs to stay outside as you've pointed out"
527889361,554,devshgraphicsprogramming,2020-11-20T18:18:15Z,how do you handle `NdotV` being negative?
527890123,554,devshgraphicsprogramming,2020-11-20T18:19:46Z,"no need to clamp `NdotH` by convention `H` must be in the positive hemisphere (otherwise `is_valid` will be false for bsdf and a brdf will not allow `L` and `V` outside of upper hemisphere, so half vector must also be in the hemisphere)"
527891822,554,devshgraphicsprogramming,2020-11-20T18:22:55Z,duplicate code
527891885,554,devshgraphicsprogramming,2020-11-20T18:23:03Z,?
527891920,554,devshgraphicsprogramming,2020-11-20T18:23:09Z,?
527893462,554,devshgraphicsprogramming,2020-11-20T18:26:00Z,"my bad, if it actually gets past an `is_Valid` check (the checks of microfacet orientation) for a BRDF...

then we need to compute the PDF.

BUT dont branch and compute the same PDF functions in both branches! UNIFY!"
527893512,554,devshgraphicsprogramming,2020-11-20T18:26:05Z,"my bad, if it actually gets past an `is_Valid` check (the checks of microfacet orientation) for a BRDF...

then we need to compute the PDF.

BUT dont branch and compute the same PDF functions in both branches! UNIFY!"
527893800,554,devshgraphicsprogramming,2020-11-20T18:26:35Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893462 + https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893512

they shouldn't exist as standalones"
527893861,554,devshgraphicsprogramming,2020-11-20T18:26:39Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893462 + https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893512

they shouldn't exist as standalones"
527893988,554,devshgraphicsprogramming,2020-11-20T18:26:55Z,duplicate code
527894082,554,devshgraphicsprogramming,2020-11-20T18:27:05Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893462 + https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893512

they shouldn't exist as standalones"
527894107,554,devshgraphicsprogramming,2020-11-20T18:27:08Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893462 + https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893512

they shouldn't exist as standalones"
527894210,554,devshgraphicsprogramming,2020-11-20T18:27:19Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893462 + https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893512
527894234,554,devshgraphicsprogramming,2020-11-20T18:27:21Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893462 + https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527893512
527894758,554,devshgraphicsprogramming,2020-11-20T18:28:17Z,ah yeah bumpmaps
527897183,554,devshgraphicsprogramming,2020-11-20T18:32:51Z,if we dont use something no point keeping it around (we have git history after all)
527901004,554,devshgraphicsprogramming,2020-11-20T18:40:12Z,"save us the torture of a big and complex wrapper around calling the `remainder_and_pdf` outselves at the target site

I'd much rather see a function in the top level header like this:
```glsl
float irr_glsl_bxdf_remainder_to_eval(in float remainder, in float pdf)
{
    return remainder*pdf;
}
vec3irr_glsl_bxdf_remainder_to_eval(in vec3 remainder, in float pdf)
{
    return remainder*pdf;
}
```

because its just 6 lines to maintain, as opposed to a separate `eval_and_pdf` boilerplate function for every BxDF in our library"
527918319,554,Crisspl,2020-11-20T19:13:59Z,ok so its good
528661244,554,Crisspl,2020-11-23T12:15:45Z,abs or max obviously
528829619,554,devshgraphicsprogramming,2020-11-23T16:21:05Z,?
528836525,554,devshgraphicsprogramming,2020-11-23T16:30:36Z,still duplicate code
528839674,554,devshgraphicsprogramming,2020-11-23T16:34:57Z,still duplicate code... I only want one place where the following code exists `L_z * irr_glsl_RECIPROCAL_PI`
528840238,554,devshgraphicsprogramming,2020-11-23T16:35:45Z,TODO
528840287,554,devshgraphicsprogramming,2020-11-23T16:35:49Z,TODO
528840342,554,devshgraphicsprogramming,2020-11-23T16:35:53Z,TODO
528840378,554,devshgraphicsprogramming,2020-11-23T16:35:57Z,TODO
528840535,554,devshgraphicsprogramming,2020-11-23T16:36:11Z,TODO
528840597,554,devshgraphicsprogramming,2020-11-23T16:36:16Z,TODO
528840725,554,devshgraphicsprogramming,2020-11-23T16:36:26Z,UNIFY
528840784,554,devshgraphicsprogramming,2020-11-23T16:36:30Z,UNIFY
528840983,554,devshgraphicsprogramming,2020-11-23T16:36:48Z,why do we still have it?
528868517,554,devshgraphicsprogramming,2020-11-23T17:16:58Z,"I'd fold `positiveCosFactor` into `run` and make an `II` for `is_combiner` (so COAT and BLEND fetch the params, ior and bsdf data)"
528869734,554,devshgraphicsprogramming,2020-11-23T17:18:48Z,can you just do the rest on `bxdf_eval` or just call `bxdf_eval` `result` right away?
528879560,554,devshgraphicsprogramming,2020-11-23T17:34:08Z,can't you hoist these two and fold it into the `positiveCosFactor` check?
528880531,554,devshgraphicsprogramming,2020-11-23T17:35:42Z,"a function where you don't need to compute the PDF (such as rasterization's EVAL only), does not need this check (its redundant, the BSDF transmission case does it anyway, and BRDF checks NdotV and NdotL)"
528883063,554,devshgraphicsprogramming,2020-11-23T17:39:48Z,"never mind the `VdotH` check, i forgot this is EVAL only"
528886851,554,devshgraphicsprogramming,2020-11-23T17:46:00Z,"why don't we precompute the squared microfacet and interaction stuff?
(obvs just for this backend, not in the general engine-wide structs)"
528888124,554,devshgraphicsprogramming,2020-11-23T17:48:08Z,`VdotH` does not need to be clamped... `VdotH<FLT_MIN` is simply an invalid microfacet normal (was checked by `is_valid` before anyway OR guaranteed by constraints on NdotV and NdotL for BRDFs)
528888973,554,devshgraphicsprogramming,2020-11-23T17:49:28Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r527890123
528953861,554,Crisspl,2020-11-23T19:45:06Z,"if we dont in general, why would we here?"
528975615,554,devshgraphicsprogramming,2020-11-23T20:26:45Z,because here it would be useful I guess?
528978653,554,devshgraphicsprogramming,2020-11-23T20:32:48Z,"just be careful because `positiveCosFactor` is now folded into `run` and unless you're able to tell if your COAT coats a DIFFTRANS or BLEND with at least one BSDF as a child, you need to fetch the data "
528996712,554,devshgraphicsprogramming,2020-11-23T21:09:06Z,use the `wo_clamps` variant
528997756,554,devshgraphicsprogramming,2020-11-23T21:11:21Z,"you could hoist this above (the computation only) and put an extra `if (NdotL>FLT_MIN)` inside the diffuse case (generator for a BRDF cannot actually generate a light direction below hemisphere, so all good) this will also allow you to use the `wo_clamps` variant"
528997874,554,devshgraphicsprogramming,2020-11-23T21:11:35Z,tied up with this https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r528997756
528999925,554,devshgraphicsprogramming,2020-11-23T21:14:36Z,careful about `NdotV` being negative (interpolated normals)
529008574,554,devshgraphicsprogramming,2020-11-23T21:29:57Z,"ok looks good, checked it all"
529010053,554,devshgraphicsprogramming,2020-11-23T21:32:38Z,new implementation is nice
529014314,554,devshgraphicsprogramming,2020-11-23T21:41:25Z,"a suggestion, to save on 3x RGA mult and branches (Also your current code seems to be wrong)
```glsl
#ifndef NO_BSDF
			if (is_bsdf)
			{
				float LdotH = microfacet.isotropic.LdotH;
				float VdotHLdotH = microfacet.isotropic.VdotH * LdotH;
				LdotH = abs(LdotH);
#ifdef NDF_GGX
				if (ndf == NDF_GGX)
					eval_scalar_part = irr_glsl_ggx_microfacet_to_light_measure_transform(eval_scalar_part, NdotL, refraction, VdotH, LdotH, VdotHLdotH, eta);
				else
#endif
					eval_scalar_part = irr_glsl_microfacet_to_light_measure_transform(eval_scalar_part, NdotV, refraction, VdotH, LdotH, VdotHLdotH, eta);

				float reflectance = colorToScalar(fr);
				reflectance = refraction ? (1.0 - reflectance) : reflectance;
				pdf *= reflectance;
			}
#endif 

			eval = fr*eval_scalar_part;
```"
529016459,554,devshgraphicsprogramming,2020-11-23T21:45:50Z,"init with `skip ? 0.0:1.0` otherwise pdf always 0

https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r526974227"
529018369,554,devshgraphicsprogramming,2020-11-23T21:49:35Z,"unused variable, delete"
529019954,554,devshgraphicsprogramming,2020-11-23T21:52:41Z,"this one you can hoist and add the condition `>FLT_MIN` to `is_bxdf && run` because VNDF sampling (VNDF sampling can produce L samples that are shadowed, but cannot produce V samples that are masked)"
529020920,554,devshgraphicsprogramming,2020-11-23T21:54:39Z,ok missed the assignment
529025362,554,devshgraphicsprogramming,2020-11-23T22:04:11Z,you probably want to convert `ior` to a scalar value (use `eta*eta` I guess?)
529025748,554,devshgraphicsprogramming,2020-11-23T22:05:01Z,if you do `https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r529025362` then you can use any of the `reflectance` channels
529029243,554,devshgraphicsprogramming,2020-11-23T22:12:09Z,and obvs initialize `is_valid=true` after the hoist
529030145,554,devshgraphicsprogramming,2020-11-23T22:14:05Z,"I wonder if you could push all this (and the rcp eta and eta computation) INTO the `else` case of `op_isDiffuse`

obvs after `NdotV>FLT_MIN` hoist ( https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r529019954 )"
529031492,554,devshgraphicsprogramming,2020-11-23T22:16:51Z,same comment as https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r528886851
529036343,554,devshgraphicsprogramming,2020-11-23T22:27:13Z,unused variable
529037320,554,devshgraphicsprogramming,2020-11-23T22:29:27Z,"get rid of `invalid_microfacet`, a generator cannot generate such"
529037536,554,devshgraphicsprogramming,2020-11-23T22:29:50Z,its unused var anyway
529041835,554,devshgraphicsprogramming,2020-11-23T22:39:14Z,"hoist this fetch, both BLEND and COATING branch do it"
529042900,554,devshgraphicsprogramming,2020-11-23T22:41:32Z,"The COAT and BLEND only diverge in how they compute the RGB weight

after you get the weight, the rest of the operations are the same (RGB to monochrome, partitioning, pdf calc, jump calc)"
529044137,554,devshgraphicsprogramming,2020-11-23T22:44:28Z,"there's no point to computing this, since it will be a tranmission interaction, ergo the `out_microfacet` which is only for reflection wont be used at all"
529044908,554,devshgraphicsprogramming,2020-11-23T22:46:01Z,the top bit of code repeats this
529046647,554,devshgraphicsprogramming,2020-11-23T22:49:59Z,"the most complicated form of the function actually cuts down on computation
https://github.com/Devsh-Graphics-Programming/Nabla/blob/881deedeac39b6141d061756fa9b00951fb57f28/include/irr/builtin/glsl/bxdf/bsdf/specular/dielectric.glsl#L17

returns remainder metadata, which you can put into this
https://github.com/Devsh-Graphics-Programming/Nabla/blob/881deedeac39b6141d061756fa9b00951fb57f28/include/irr/builtin/glsl/bxdf/bsdf/specular/dielectric.glsl#L48"
529048053,554,devshgraphicsprogramming,2020-11-23T22:53:09Z,"careful of negative `currInteraction.isotropic.NdotV` 

clamp"
529049195,554,devshgraphicsprogramming,2020-11-23T22:55:38Z,every case after this (diffuse and microfacet) needs to check for `clampedOrAbsNdotV>FLT_MIN` and set remainder+pdf to 0.0 if it doesn't pass
529049327,554,devshgraphicsprogramming,2020-11-23T22:55:56Z,"Hoist...

https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r529049195"
529049871,554,devshgraphicsprogramming,2020-11-23T22:57:11Z,similar comment to https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r528886851
529050542,554,devshgraphicsprogramming,2020-11-23T22:58:46Z,"beware of negative `VdotH`

`NdotH` can't be negative no matter BRDF or BSDF
but `VdotH` can be negative for a BSDF (even from generator)"
529051069,554,devshgraphicsprogramming,2020-11-23T22:59:54Z,"its not only an optimization, its necessary"
529051201,554,devshgraphicsprogramming,2020-11-23T23:00:12Z,prevent negative `VdotH` for BRDFs https://github.com/buildaworldnet/IrrlichtBAW/pull/554/files#r529051069
529052187,554,devshgraphicsprogramming,2020-11-23T23:02:28Z,"also in order to benefit from skipping a mul by RGB fresnel followed by divide by monochrome fresnel of the remainder, the fresnel function used needs to be monochrome (not RGB)"
529052459,554,devshgraphicsprogramming,2020-11-23T23:03:09Z,basically use the `eta` and `rcpEta` you're computing just outside and after this branch ;)
529052801,554,devshgraphicsprogramming,2020-11-23T23:03:59Z,same comment as https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r528886851
529053873,554,devshgraphicsprogramming,2020-11-23T23:06:30Z,"the PDF looks suspicious, you're using the VNDF to reflective differential factor transform here....

you should be using the one that can account for refraction
https://github.com/Devsh-Graphics-Programming/Nabla/blob/shader_pipeline_irrlichtbaw/include/irr/builtin/glsl/bxdf/geom/smith/common.glsl#L33"
529054266,554,devshgraphicsprogramming,2020-11-23T23:07:27Z,"obviously no point hoisting `NdotL`

only hoist `NdotV`"
529055663,554,devshgraphicsprogramming,2020-11-23T23:10:40Z,"I'm not suggesting adding fields to `irr_glsl_AnisotropicViewSurfaceInteraction ` or `irr_glsl_AnisotropicMicrofacetCache`

just creating 1 struct each, for the usage of the material compiler glsl backend which declares a the above as a member, plus the extra fields (poor man's inheritance)"
529596660,554,Crisspl,2020-11-24T14:42:20Z,"no, why?"
530477617,554,devshgraphicsprogramming,2020-11-25T15:55:25Z,still a TODO
530488943,554,devshgraphicsprogramming,2020-11-25T16:11:08Z,"use monochrome dielectric fresnel function, if you want to assume that fresnel in the remainder cancels out with the reflection/refraction probability in the PDF"
530489749,554,devshgraphicsprogramming,2020-11-25T16:12:17Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r529052459
530491297,554,devshgraphicsprogramming,2020-11-25T16:14:34Z,"just initialize to 0.0, overwrite in the `if (positiveNdotV)` case/opcodes"
530491626,554,devshgraphicsprogramming,2020-11-25T16:15:02Z,then make a specialized `irr_glsl_smith_VNDF_pdf_wo_clamps` that transforms a `FVNDF`  and does not take a `refraction` parameter ;)
530493652,554,devshgraphicsprogramming,2020-11-25T16:18:02Z,"```glsl
float irr_glsl_smith_FVNDF_pdf_wo_clamps(in float fresnel_ndf, in float G1_over_2NdotV, in float absNdotV, in bool transmitted, in float VdotH, in float LdotH, in float VdotHLdotH, in float orientedEta)
{
    float FNG = fresnel_ndf*G1_over_2NdotV;
    float factor = 0.5;
    if (transmitted)
    {
        const float VdotH_etaLdotH = (VdotH+orientedEta*LdotH);
        // VdotHLdotH is negative under transmission, so this factor is negative
        factor *= -2.0*VdotHLdotH/(VdotH_etaLdotH*VdotH_etaLdotH);
    }
    return FNG*factor;
}
```

and then rewrite https://github.com/Devsh-Graphics-Programming/Nabla/blob/shader_pipeline_irrlichtbaw/include/irr/builtin/glsl/bxdf/geom/smith/common.glsl#L33

in terms of the new thing"
530495415,554,devshgraphicsprogramming,2020-11-25T16:20:32Z,swap out some of the `*=` for `=`
530504729,554,devshgraphicsprogramming,2020-11-25T16:34:26Z,"put another if-statement inside to check for `NdotL >FLT_MIN`

https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r528997756"
530506096,554,devshgraphicsprogramming,2020-11-25T16:36:36Z,this is why https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r530488943
530506186,554,devshgraphicsprogramming,2020-11-25T16:36:45Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/554#discussion_r530488943
530508136,554,devshgraphicsprogramming,2020-11-25T16:39:47Z,put the extra `NdotL>FLT_MIN` check inside
530510028,554,devshgraphicsprogramming,2020-11-25T16:42:28Z,"just use `abs(microfacet.inner.isotropic.VdotH)`, if you have a BRDF the smith masking and shadowing function will kill the wrongly computed fresnel (which would compute to 100% anyway with VdotH clamped to 0)"
530510289,554,devshgraphicsprogramming,2020-11-25T16:42:51Z,"monochrome fresnel, use `eta` and `rcpEta`"
530587387,554,Crisspl,2020-11-25T19:02:29Z,"i cant, keep getting nans then"
530605336,554,devshgraphicsprogramming,2020-11-25T19:41:25Z,yes its not needed
530606621,554,devshgraphicsprogramming,2020-11-25T19:44:19Z,"ouput:
- meshbuffer ID + 1bit for frontfacing vs. back facing
- triangle ID (dont use yet obvs)
- encoded normal
- uv coord (in full range of a sfloat)


From meshbuffer/object ID you shall be able to get access to all data about shading model (instruction streams) and light emittance"
530618986,554,devshgraphicsprogramming,2020-11-25T20:10:59Z,why are you not using the procmputed squared values  from your interaction struct?
530626441,554,Crisspl,2020-11-25T20:26:27Z,you're looking at old code
530628380,554,devshgraphicsprogramming,2020-11-25T20:31:01Z,darn github
530633992,554,devshgraphicsprogramming,2020-11-25T20:44:51Z,"move intitialization of `is_valid` from here
https://github.com/Crisspl/IrrlichtBAW/blob/mitsuba/include/irr/builtin/material_compiler/glsl/rasterization/impl.glsl#L13

to here (and initialize to true) https://github.com/Crisspl/IrrlichtBAW/blob/mitsuba/include/irr/builtin/material_compiler/glsl/rasterization/impl.glsl#L42

only use if you have `OP_DIELECTRIC` defined

(Current usage confuses me and probably the compiler as well)

"
530634895,554,devshgraphicsprogramming,2020-11-25T20:47:03Z,"> I'd fold `positiveCosFactor` into `run` and make an `II` for `is_combiner` (so COAT and BLEND fetch the params, ior and bsdf data)

this is only relevant is COAT or BLEND are considered BRDFs by you (`is_bsdf` used for clamping `NdotV` and `NdotL` could be false in these cases)

that would actually prevent the loading of `bsdf_data` and `ior` under your current code when `NdotV` or `NdotL` are negative "
530636548,554,devshgraphicsprogramming,2020-11-25T20:51:23Z,"also on line https://github.com/Crisspl/IrrlichtBAW/blob/mitsuba/include/irr/builtin/material_compiler/glsl/rasterization/impl.glsl#L62

its safe to use the `wo_clamps` variant"
431752211,496,devshgraphicsprogramming,2020-05-28T10:59:45Z,"we hate one place in the engine where we have that struct, I think its in one of the driver headers, could be moved to mesh header"
431752349,496,devshgraphicsprogramming,2020-05-28T11:00:00Z,"use iterators begin and end, much more flexible than vector"
431752563,496,devshgraphicsprogramming,2020-05-28T11:00:22Z,pack meshbuffers not meshes
431752928,496,devshgraphicsprogramming,2020-05-28T11:01:03Z,"you need to handle nullptr index buffer, (its a std::iota starting from base index)"
431757515,496,devshgraphicsprogramming,2020-05-28T11:10:14Z,geometry creator has functions to expand other triangle topologies to indexed triangle list
431757660,496,devshgraphicsprogramming,2020-05-28T11:10:34Z,"dont error out processing everything, just skip the stuff you cant handle"
431758718,496,devshgraphicsprogramming,2020-05-28T11:12:43Z,"not exactly, you only need to:
- Run through all meshbuffers and collect the flags/bits of the enabled attributes, first mesh to have the attribute index enabled sets the reference
- Then for every meshbuffer check if attribute is either disabled OR has exactly the same format as reference for that attribute index"
431759453,496,devshgraphicsprogramming,2020-05-28T11:14:09Z,"pack meshbuffers not meshes.

Also split the business logic into `allocate` and `commit`.

One figures out how much space will need to be reserved, reserves it etc., returns some useful metadata for a later `commit`etc. etc.

`commit` actually does the heavy lifting."
432456130,496,devshgraphicsprogramming,2020-05-29T12:41:49Z,"hmm, this could be done by preallocating a 128kb range at the start of your storage buffer  that contains an std::iota of 0 to uint16_t_max!"
432459200,496,devshgraphicsprogramming,2020-05-29T12:48:01Z,"don't iterate over BINDINGS

BINDINGS are offsets and strides  that fetch your data

ATTRIBUTES have the formats"
432463823,496,devshgraphicsprogramming,2020-05-29T12:56:35Z,"there's an easier way to do this

```cpp
uint16_t oldFlags = outVtxInputParams.enabledAttribFlags;
outVtxInputParams.enabledAttribFlags |= currMBVtxInputParams.enabledAttribFlag;

auto flagDifference = outVtxInputParams.enabledAttribFlags^oldFlags;
for (uint16_t attrBit = 0x0001u, attrBinding = 0; attrBinding < 16u; attrBit <<= 1, attrBinding++)
if (flagDifference&attrBit)
{
   outVtxInputParams.attributes[attrBinding].format = currMBVtxInputParams.attributes[attrBinding].format;
}
```"
432463903,496,devshgraphicsprogramming,2020-05-29T12:56:44Z,you don't need this lambda
432465165,496,devshgraphicsprogramming,2020-05-29T12:59:05Z,that my dear should be a full-on `assert`
432465358,496,devshgraphicsprogramming,2020-05-29T12:59:27Z,"nope, just use the `binding` for array access"
432468095,496,devshgraphicsprogramming,2020-05-29T13:04:14Z,"this is actually a very nasty and inaccurate estimate, I'd rather have you declare an `unordered_set` and actually iterate over the indices in the mesh (if mesh has no indices then pretend there is a `iota` filled unordered_set with as many elements as index count says)."
432469988,496,devshgraphicsprogramming,2020-05-29T13:07:39Z,"nope this is not really a problem globally.

Its only an issue if the per-meshbuffer `unordered_set` of indices has more elements than 64k, you will re-pack meshe buffers' vertices and optimize them + the index lists for pre and post transform vertex cache coherency (plus filter invalid triangles as @Crisspl is complaining about that on Mitsuba's scenes), so at some point you will have a `unordered_map` that will map the old indices to new indices (so any gaps in the range we will be able to remove, we just need to ensure there will be less than 64k unique indices)."
432471319,496,devshgraphicsprogramming,2020-05-29T13:10:05Z,"you want to separate `alloc` (virtual space for meshbuffers, its actually more of a reserve than allocate) from `commit` (actually copy over vertex and index data)

In `alloc/reserve` you want to allocate from a generalpurposeaddressallocator c.f. Virtual Texturing"
432874248,496,devshgraphicsprogramming,2020-05-30T17:58:08Z,no
432874293,496,devshgraphicsprogramming,2020-05-30T17:58:51Z,why do you start with any bindings defined at all?
433157856,496,Crisspl,2020-06-01T10:29:23Z,better make it `const core::vector<const MeshBufferType*>&`
439971250,496,devshgraphicsprogramming,2020-06-15T07:11:17Z,"why are you even suggesting the use of a mutable container that dynamically allocates memory @Crisspl ?

a  `struct` with some pointers to ranges is much cleaner"
441486079,496,Crisspl,2020-06-17T11:50:13Z,better use ptr range instead of vector
441486616,496,devshgraphicsprogramming,2020-06-17T11:51:10Z,"SSBO is kinda limited to 2GB, so 2GB makes a good default for the data heavy data streams (indices and vertices)"
441488644,496,devshgraphicsprogramming,2020-06-17T11:55:17Z,"If you have 2GB of `uint16_t` indices, then you have 341M triangles, if you split meshbuffers into batches of 32-1024 tris, then your max MDI count is 10.6M, given that each MDI struct is 20 bytes... works out to 214MB max"
441490331,496,devshgraphicsprogramming,2020-06-17T11:58:20Z,I think you got these two values the wrong way around
441490874,496,devshgraphicsprogramming,2020-06-17T11:59:24Z,"dont use `const`, make `private` instead... I have a feeling that these values will need to be mutable"
441491267,496,devshgraphicsprogramming,2020-06-17T12:00:08Z,Use `uint32_t` or even better the `size_type` typedef from the `address_allocator_traits`
441492500,496,devshgraphicsprogramming,2020-06-17T12:02:35Z,good default for `maxIndexCountPerMDIData` is ~1024 or 256~ 3072 or 768 (forgot we're counting in triangles)
441493127,496,devshgraphicsprogramming,2020-06-17T12:03:50Z,the MDI buffer you want in the CPU or GPU specialization of the `IMeshPacker` (see the virtualtexturing class which stores actual data only in the specialized versions)
441494995,496,devshgraphicsprogramming,2020-06-17T12:07:28Z,"also count in MDI struct units, not bytes (makes pointer arithmetic easier)"
441495055,496,devshgraphicsprogramming,2020-06-17T12:07:34Z,you don't need this struct
441495853,496,devshgraphicsprogramming,2020-06-17T12:09:18Z,"don't use `std::optional` on frontend API, add an `isValid` method to `PackedMeshBufferData`"
441498498,496,devshgraphicsprogramming,2020-06-17T12:14:21Z,"template on a const iterator pair (always preferable to a const vector reference), remove the virtualism and do iterator here

then make a protected `virtual` `commit_impl` which actually does the divergent CPU/GPU specific codepaths."
441499229,496,devshgraphicsprogramming,2020-06-17T12:15:42Z,isnt there a const safe version of `getIndexBufferBinding()`?
441508305,496,devshgraphicsprogramming,2020-06-17T12:32:01Z,"use `uint32_t` address spaces, the allocators will use less reserved space if they don't have to do arithmetic in 64bit"
441508472,496,devshgraphicsprogramming,2020-06-17T12:32:19Z,+1
441511676,496,devshgraphicsprogramming,2020-06-17T12:37:52Z,"add a second template parameter to the list,  `MDIStructType` and use this instead of `DrawElementsIndirectCommand_t` (but you can static_assert that `is_base_of<DrawElementsIndirectCommand_t,MDIStructType>`)

this is to allow the user to add data onto the MDI parameter data stream, like this
```cpp
struct CustomDrawElementsIndirectCommand_t : DrawElementsIndirectCommand_t
{
   MyExtraData_t extraData;
};
```"
441512143,496,devshgraphicsprogramming,2020-06-17T12:38:40Z,make buffer in the CPU specialization and in the first `commit` call
441513169,496,devshgraphicsprogramming,2020-06-17T12:40:20Z,btw a static method in the CCPUMeshPacker to help the user figure out how many packers ( `vector<SVertexInputParams> preDefinedLayout`) we need from a list (iterator pair) of ICPUMeshBuffers would be handy!
441513958,496,devshgraphicsprogramming,2020-06-17T12:41:43Z,"don't divide the address space by the minimum allocation size, just keep it in units of `uint32_t` (so divide by `sizeof(uint32_t)`)"
441514176,496,devshgraphicsprogramming,2020-06-17T12:42:05Z,this is PERFECT
442694434,496,Przemog1,2020-06-19T08:03:06Z,"> don't use std::optional on frontend API
"
442694571,496,Przemog1,2020-06-19T08:03:20Z,"why?
"
442735326,496,devshgraphicsprogramming,2020-06-19T09:33:47Z,"it makes the code less-readable, wastes memory (add extra members)

these heavy duty functions will be dealing with thousands of meshes, so we want the inputs and outputs to be simple structs which are PoD (Plain Old Data)"
443514681,496,devshgraphicsprogramming,2020-06-22T12:14:17Z,"If one MDI needs at least 64 triangles, and one triangle is 3 indices of 2 bytes each, and your index buffer can only be max 8GB (due to firstIndex being a `uint32_t` in the MDI struct), this gives you a max of 20'000'000 MDI structs"
443515132,496,devshgraphicsprogramming,2020-06-22T12:15:09Z,"don't invent a new namespace, this is what a non-templated Interface/Base class is for"
443516228,496,devshgraphicsprogramming,2020-06-22T12:17:17Z,"your address spaces are in bytes, but your minimum allocation sizes are in Units of `sizeof(typeof(data))`

For the sake of consistency, maybe switch from `SizeInBytes` to `Count` and divide all your defaults by `sizeof(uint32_t)` (everything else) and `sizeof(uint16_t)` (indices) where appropriate"
443517026,496,devshgraphicsprogramming,2020-06-22T12:18:51Z,URGENT
443517486,496,devshgraphicsprogramming,2020-06-22T12:19:43Z,"call it `offset` not `ByteOffset` because you will be doing
```cpp
reinterpret_cast<MDIStructType*>(CCPUMeshPacker::getMultiDrawIndirectBuffer()->getPointer())+PackedMeshBufferData::mdiParameterOffset`
```
NOT

```cpp
reinterpret_cast<MDIStructType*>(reinterpret_cast<uint8_t*>(CCPUMeshPacker::getMultiDrawIndirectBuffer()->getPointer())+PackedMeshBufferData::mdiParameterByteOffset)`
```"
443518101,496,devshgraphicsprogramming,2020-06-22T12:20:46Z,"I've mentioned that 2GB is too much here before

> If you have 2GB of uint16_t indices, then you have 341M triangles, if you split meshbuffers into batches of 32-1024 tris, then your max MDI count is 10.6M, given that each MDI struct is 20 bytes... works out to 214MB max"
443518921,496,devshgraphicsprogramming,2020-06-22T12:22:15Z,You need to compare `mdiParameterByteOffset` against address allocator's `invalid_address` not `~0u` ;)
443521117,496,devshgraphicsprogramming,2020-06-22T12:26:24Z,"you need a begin and end range defined by two iterators or pointers, also templating on iterators is much more useful


```cpp
template<typename Iterator>
PackedMEshBufferData alloc(Iterator _begin, Iterator _end)
{
    // do some logic common to all MeshBufferTypes
    ...    
    // do some logic specific
   for (auto it=_begin; it!=_end; it++)
       alloc_impl(*it); // now `alloc_impl` can be virtual and non templated!
}
```"
443521620,496,devshgraphicsprogramming,2020-06-22T12:27:15Z,you need to take the same arguments as `alloc` + the `PackedMeshBufferData` that `alloc` returned
443522054,496,devshgraphicsprogramming,2020-06-22T12:28:02Z,you need a min and max
443524254,496,devshgraphicsprogramming,2020-06-22T12:32:12Z,"create the buffers in a separate method which needs to be called before the first `commit` (you can check and assert on that)

Aside from that the CPU MeshPacker should (or even the GPU in the future) posses a `shrink_to_fit` method that shrinks the address space (for now, assert and forbid shrinking if the CPU buffers have already been created)"
443525260,496,devshgraphicsprogramming,2020-06-22T12:34:08Z,+1
443525567,496,devshgraphicsprogramming,2020-06-22T12:34:42Z,"still relevant, see new code listing for `alloc` templated on iterators"
443525836,496,devshgraphicsprogramming,2020-06-22T12:35:12Z,see latest comment on your default parameters
443564376,496,devshgraphicsprogramming,2020-06-22T13:39:07Z,at least one per meshbuffer (but obvs you forgot that `alloc` was meant for a iterator range of meshbuffers)
443564836,496,devshgraphicsprogramming,2020-06-22T13:39:51Z,"the overall logic seems fine.

But remember when accepting multiple meshes into `alloc` you'll need to sum the index counts."
443565841,496,devshgraphicsprogramming,2020-06-22T13:41:15Z,"`uint32_t firstIndex;` is measured in index COUNT, its not a byteoffset, so need for multiply by sizeof"
443566129,496,devshgraphicsprogramming,2020-06-22T13:41:43Z,"When you allocate the addresses for vertices, you will need to feed the address here directly"
443566501,496,devshgraphicsprogramming,2020-06-22T13:42:18Z,"as I explained in previous comments, its best to work in Units of Struct Type, not bytes, so get rid of the multiply by sizeof"
443567180,496,devshgraphicsprogramming,2020-06-22T13:43:20Z,"When you allocate the addresses for per-instance data, this will become the address offset to the instance data"
443737262,496,Przemog1,2020-06-22T18:06:23Z,"why min?
"
443812402,496,devshgraphicsprogramming,2020-06-22T20:38:46Z,"because eventually when you will do clustering of triangles you will need to split before you reach the max, but never split before you reach the minimum (GPUs SIMD lanes are 32 or 64 invocations, you want to ensure they are full or close to full)"
443816721,496,devshgraphicsprogramming,2020-06-22T20:47:09Z,"actually divide by the minimum index count per patch, so you have room for the extra splits (we can shrink the MDI allocation during `commit`, if we want)"
443817441,496,devshgraphicsprogramming,2020-06-22T20:48:39Z,"this you want to do during commit, since any splitting, clustering, etc. will take place then.

Also moving this to `commit` will allow you defer the creation of MDI CPUBuffer (or any buffer at all) until you got your `allocs` all figured out"
443818044,496,devshgraphicsprogramming,2020-06-22T20:49:52Z," ~ actually I'd take the `PackedMeshBufferData` as a reference (non `const` to allow for mutability, which would only be useful to free up some MDI space) ~

We'd actually need two separate structs, one for alloc and one for commit to return"
451759621,496,devshgraphicsprogramming,2020-07-08T18:55:56Z,STILL
451759642,496,devshgraphicsprogramming,2020-07-08T18:55:58Z,STILL
451759693,496,devshgraphicsprogramming,2020-07-08T18:56:06Z,STILL
451759749,496,devshgraphicsprogramming,2020-07-08T18:56:12Z,STILL
451761426,496,devshgraphicsprogramming,2020-07-08T18:59:20Z,no this method is nice ;)
451838654,496,devshgraphicsprogramming,2020-07-08T21:35:04Z,you still need `isValid` for this struct as well
451855658,496,devshgraphicsprogramming,2020-07-08T22:17:07Z,just `assert` this.
451856544,496,devshgraphicsprogramming,2020-07-08T22:19:24Z,"move this to parent, and have it call a virtual `alloc_do_xxxxx` for every divergent (different for CPU or GPU mesh) thing you need to do"
451857283,496,devshgraphicsprogramming,2020-07-08T22:21:24Z,"arguments should be `(ReservedAllocationMeshBuffers& reserved, const Iterator begin, const Iterator end);`

upon success (the return of a valid `PackedMeshBufferData`) the `reserved` passed into the function shall be put into an invalid state (so that you do not try to `free` using it)"
451858381,496,devshgraphicsprogramming,2020-07-08T22:24:22Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/496#discussion_r443521117
451859291,496,devshgraphicsprogramming,2020-07-08T22:26:56Z,"move this to the implementations, you can deduce if commit was called by checking if the buffers for the data are null (not created yet)"
451860829,496,devshgraphicsprogramming,2020-07-08T22:31:00Z,"if you don't count `allocParams.vertexBufferMinAllocSize` in bytes, but vertices then you don't need to divide, if you count in bytes, then you need to divide and the question is ""do you round up?"""
451860917,496,devshgraphicsprogramming,2020-07-08T22:31:16Z,just assert
451861124,496,devshgraphicsprogramming,2020-07-08T22:31:53Z,likewise for `perInstanceVertexBufferMinAllocSize`
451861328,496,devshgraphicsprogramming,2020-07-08T22:32:23Z,"I would really not count the allocation parameters for the indices in bytes, makes little sense"
451861734,496,devshgraphicsprogramming,2020-07-08T22:33:42Z,"a) `alignof(MDIStructType)`
b) don't count MDI allocation parameters in bytes, it makes no sense."
451862649,496,devshgraphicsprogramming,2020-07-08T22:36:29Z,"Change to `uint32_t` you will never overflow

I would keep an array of [MAX_ATTRIBUTE_COUNT] (the constexpr is called something else its in the IPipeline class) offsets within the vertex data address space that denote the start of the deinterleaved vertex attribute"
451863101,496,devshgraphicsprogramming,2020-07-08T22:37:43Z,"instead of 16, use the engine's constexpr"
451864584,496,devshgraphicsprogramming,2020-07-08T22:41:57Z,"> I would keep an array of [MAX_ATTRIBUTE_COUNT] (the constexpr is called something else its in the IPipeline class) offsets within the vertex data address space that denote the start of the deinterleaved vertex attribute

Hmm, actually you could defer it until `commit` since you will have an array of  `SBufferBinding<BufferType>` in the child just like an `IMeshBuffer` has, and these offsets are implicit there

However you could add a protected static method that helps the child set-up their `SBufferBinding<BufferType>` for the vertices and indices, and some of the pipelines things partially"
451865415,496,devshgraphicsprogramming,2020-07-08T22:44:26Z,"only exception is vertex data, since that doesn't really have a fixed sizeof"
451866098,496,devshgraphicsprogramming,2020-07-08T22:46:25Z,a static method to help me figure out what my `preDefinedLayout` need to be and how many of them I need and how to pair my meshes would be nice... but that's last on the TODO list
452201267,496,Przemog1,2020-07-09T13:04:28Z,"I will change that
"
452219316,496,Przemog1,2020-07-09T13:31:44Z,so you want program to terminate in this case? why?
452285751,496,Przemog1,2020-07-09T15:03:05Z,"I want  to focus on other things right now, is it ok if I take care of it later?"
452371671,496,devshgraphicsprogramming,2020-07-09T17:17:56Z,"sure, just dont forget"
452371984,496,devshgraphicsprogramming,2020-07-09T17:18:33Z,because its a gross logic error to feed a function a list of pointers that contains a null.
452383035,496,Przemog1,2020-07-09T17:38:09Z,It will be changed that in next commit 
453205559,496,devshgraphicsprogramming,2020-07-11T15:27:19Z,"You don't need to return the smart pointers to any buffers, just offsets inside them because the buffers are always the same for all `commit`s and will be kept by the class.

`vertexInputParams` will be identical as well, so no need for a copy returned by every allocation.

Whatever is the same for all objects, you shall get from the factory that made them."
453205668,496,devshgraphicsprogramming,2020-07-11T15:28:50Z,"`m_vtxSize==0` if you have no per-vertex attributes, so you'll never hit this assert ;)"
453205794,496,devshgraphicsprogramming,2020-07-11T15:30:07Z,nothing in this class depends on `MeshBufferType` so the template parameter is not necessary.
453205923,496,devshgraphicsprogramming,2020-07-11T15:31:14Z,"`return_type` from geometry creator is overkill here, because you already know the different pipeline settings you will draw meshes with by the time you want to pack them.

geometry creator returns all this extra data because it tells you how to do it, packer wont need that."
453206230,496,devshgraphicsprogramming,2020-07-11T15:34:41Z,"also because you dont need to return buffers, you don't need to template, and this struct can go into the base packer class (or a base of the base that is not templated upon the MDI struct) "
453206437,496,devshgraphicsprogramming,2020-07-11T15:36:40Z,"retain `alloc`, `commit` and both planned `free` overrides in the base class
https://github.com/buildaworldnet/IrrlichtBAW/pull/496#discussion_r443521117
```cpp
template<typename Iterator>
ReservedAllocationMeshBuffers alloc(Iterator _begin, Iterator _end)
{
    // do some logic common to all MeshBufferTypes
    ...    
    // do some logic specific
   for (auto it=_begin; it!=_end; it++)
       alloc_impl(*it); // now `alloc_impl` can be virtual and non templated!
}

template<typename Iterator>
PackedMeshBuffers commit(ReservedAllocationMeshBuffers& _reservation, Iterator _begin, Iterator _end)
{
    // do some logic common to all MeshBufferTypes
    ...    
    // do some logic specific
   uint32_t i = 0u;
   for (auto it=_begin; it!=_end; it++)
       commit_impl(_reservation,i,*it); // now `commit_impl` can be virtual and non templated!
}

virtual free(PackedMeshBuffers& _commitedData);

virtual free(ReservedAllocationMeshBuffers& _reservation);
```"
453206523,496,devshgraphicsprogramming,2020-07-11T15:37:45Z,take the `ReservedAllocationMeshBuffers` as a reference because you'll need to put it in an invalid state.
453206547,496,devshgraphicsprogramming,2020-07-11T15:38:03Z,make a different named struct for retuning the common data
453206608,496,devshgraphicsprogramming,2020-07-11T15:39:08Z,rename to `instantiateDataStorage` also take a `shrink_address_space_size_target=~0u` argument
453206709,496,devshgraphicsprogramming,2020-07-11T15:40:04Z,WTF?
453206844,496,devshgraphicsprogramming,2020-07-11T15:41:14Z,"you can use `address_allocator_traits` or the allocator itself and query the total size of its address space, then multiply that by the `sizeof` the units its working in and you'll get the buffer size you need."
453207147,496,devshgraphicsprogramming,2020-07-11T15:45:06Z,then `assert` those conditions
453208127,496,devshgraphicsprogramming,2020-07-11T15:56:36Z,"no thats not the correct counting, correct is:
```
possibleMDIStructsNeededCnt = 0u;
for (meshbuffer : meshBufferList)
{
    possibleMDIStructsNeededCnt += (meshbuffer->getIndexCount()+minIdxCntPerPatch-1)/minIdxCntPerPatch;
}
```
P.S. Also `roundUp` does not perform the division
"
453208326,496,devshgraphicsprogramming,2020-07-11T15:58:44Z,"Note for the future: To count the vertices properly you'd need to iterate through all the indices and build yourself an `unordered_set` of ""vertices actually used"""
453208371,496,devshgraphicsprogramming,2020-07-11T15:59:13Z,"Nope, you'd need to iterate through the meshbuffers and accumulate `getInstanceCount`"
453208685,496,devshgraphicsprogramming,2020-07-11T16:01:57Z,"nope, just one, one `ReservedAllocationMeshbuffers` has the reservation for multiple meshbuffers already"
453208737,496,devshgraphicsprogramming,2020-07-11T16:02:45Z,"somewhat, yes"
453208793,496,devshgraphicsprogramming,2020-07-11T16:03:22Z,nvm makes no sense
453208916,496,devshgraphicsprogramming,2020-07-11T16:04:57Z,"hoist this loop above the vertex attribute loop, respect data locality and your CPUs caches.

Iterate/Loop from most sparse data to most packed.. So

MeshBuffer > Indices > Vertex Attributes and Instance Attributes"
453209103,496,devshgraphicsprogramming,2020-07-11T16:06:30Z,there's a method in `ICPUMeshBuffer` called `getAttribute` and it lets you use the same value as what your index buffer stores to get your vertexbuffer
453209175,496,devshgraphicsprogramming,2020-07-11T16:07:24Z,@Crisspl coach @Przemog1 on geometry manipulation with our API
453241573,496,Przemog1,2020-07-11T22:30:50Z,oops
455427926,496,Przemog1,2020-07-15T23:46:26Z,but it is possible to use valid mesh buffer with per instance attributes only..
455557051,496,Przemog1,2020-07-16T07:09:48Z,its 320MB... i guess it's time to go to sleep  XD
455620550,496,devshgraphicsprogramming,2020-07-16T08:37:50Z,its usually 12B
455621484,496,devshgraphicsprogramming,2020-07-16T08:39:20Z,but you check for presence of per-vertex attributes in the `if` statement just above
455635609,496,devshgraphicsprogramming,2020-07-16T09:02:12Z,also take a `shrink_address_space_size_target=~0u` argument
455637371,496,devshgraphicsprogramming,2020-07-16T09:05:07Z,"you need to free the previously allocated MDI address, otherwise you'll leak"
455637611,496,devshgraphicsprogramming,2020-07-16T09:05:28Z,free MDI and Index address
455637934,496,devshgraphicsprogramming,2020-07-16T09:05:55Z,why are you multiplying by the vertex size!?
455638408,496,devshgraphicsprogramming,2020-07-16T09:06:41Z,free MDI and Index address plus the vertex address if allocated
455639150,496,devshgraphicsprogramming,2020-07-16T09:07:55Z,"you can use address_allocator_traits or the allocator itself and query the total size of its address space, then multiply that by the sizeof the units its working in and you'll get the buffer size you need."
455639605,496,devshgraphicsprogramming,2020-07-16T09:08:33Z,can't you assign this in constructor or something?
455641888,496,devshgraphicsprogramming,2020-07-16T09:12:12Z,"you'll fail if you don't handle vertex and index buffers separately, you need two separate buffers that you partition separately"
455642785,496,devshgraphicsprogramming,2020-07-16T09:13:48Z,why do you think rounding is necessary?
456188518,496,Przemog1,2020-07-17T02:48:29Z,"forgot to change that, it worked when `vtxSupportedSize` was in bytes"
460397836,496,devshgraphicsprogramming,2020-07-25T11:56:29Z,"@Przemog1 you don't need to handle TRIANGLE_FAN, TRIANGLE_STRIP inputs right now, but you need to handle null index buffers"
460401229,496,devshgraphicsprogramming,2020-07-25T12:39:43Z,done?
466733093,496,Crisspl,2020-08-06T23:10:00Z,use `smart_refctd_ptr`s instead
466734588,496,Crisspl,2020-08-06T23:14:25Z,arent you missing pipeline layout?
466735467,496,Crisspl,2020-08-06T23:17:18Z,you can probably optimize those values knowing the disk meshes you are packing. What about this shrinking issue you had yesterday?
466738109,496,Crisspl,2020-08-06T23:26:06Z,"1. why packing of matrices happens every frame? do it once
2. make function for each packing test case of matrices that returns buffer with matrices + push constants (as a SPushConstantRange and uint8_t[128] for example) with offsets compatible with what shader expects"
467190143,496,devshgraphicsprogramming,2020-08-07T18:01:28Z,instead of `new` do `core::make_smart_refctd_ptr<Type>(constructor args...)`
467194003,496,devshgraphicsprogramming,2020-08-07T18:09:38Z,"@crisspl no need, he should shrink the buffers later anyway, even if he overallocates the memory it should not impact the benchmarks ;)"
467203893,496,devshgraphicsprogramming,2020-08-07T18:30:41Z,"> why packing of matrices happens every frame? do it once

it doesn't matter for DEBUG if its done with CPU or GPU, but we need to see some updates to see that the shader gets the correct memory locations (so benchmark is not spoiled by cache).

When actually benchmarking there should be no per-frame updates of matrices at all."
467314562,496,devshgraphicsprogramming,2020-08-07T22:36:44Z,"NO, this will skew benchmark results, its also horribly inefficient.

The ViewProj matrix should have been already concatenated with the bone's world matrix in the routine that updates bone matrices (be it a GPU Compute shader or CPU)."
467314779,496,devshgraphicsprogramming,2020-08-07T22:37:34Z,"ROWS store ROWS not columns

A `vec3` array is basically a `vec4` array but with useless padding."
467319477,496,devshgraphicsprogramming,2020-08-07T22:56:54Z,so no need for the VP in the push constants
467319612,496,devshgraphicsprogramming,2020-08-07T22:57:36Z,in non-DEBUG mode (benchmarking) don't pass anything to fragment shader
467319733,496,devshgraphicsprogramming,2020-08-07T22:58:13Z,"disable these inputs when benchmarking ( you can make the `pos = vec4(4,3,2,1)` a constant)"
467322683,496,devshgraphicsprogramming,2020-08-07T23:10:54Z,"far more performant is to have
```cpp
struct TriangleBatch
{
    uint16_t triangleCount = 0;
    Triangle triangles[MAX_BATCH_SIZE];
};
```
There's nothing I hate more than nested vectors!"
467323920,496,devshgraphicsprogramming,2020-08-07T23:16:41Z,how?
467324077,496,devshgraphicsprogramming,2020-08-07T23:17:24Z,I'd still like to see you use the `ICPUMeshBuffer` static methods to advance and compute pointers if possible
467324304,496,devshgraphicsprogramming,2020-08-07T23:18:34Z,move to `include/irr/asset/`
467324400,496,devshgraphicsprogramming,2020-08-07T23:19:00Z,do you even need these anymore?
467324711,496,devshgraphicsprogramming,2020-08-07T23:20:25Z,?
467324835,496,devshgraphicsprogramming,2020-08-07T23:20:58Z,especially the static methods of `ICPUMeshBuffer`
467325145,496,devshgraphicsprogramming,2020-08-07T23:22:26Z,definitely looks like you are @Przemog1 
467628835,496,devshgraphicsprogramming,2020-08-09T21:06:05Z,do `mat3(matrices[boneID].normalMatrix)*normalize(normal)`
467628981,496,devshgraphicsprogramming,2020-08-09T21:07:38Z,missing normal matrix?
467629013,496,devshgraphicsprogramming,2020-08-09T21:08:17Z,"for this benchmark to be sane, you need far more than 64 disks, I'm thinking upwards of 16 thousand."
467650710,496,Przemog1,2020-08-10T00:49:24Z,"no need, these mesh buffers are inputs to mesh packer"
468058670,496,devshgraphicsprogramming,2020-08-10T17:19:28Z,"might wanna move that to ""common"""
468058748,496,devshgraphicsprogramming,2020-08-10T17:19:39Z,disable in benchmark mode
468059179,496,devshgraphicsprogramming,2020-08-10T17:20:26Z,do a hack `gl_Position.xyz += mat3(matrices[boneID].normalMatrix) * normalize(normal)`
468071674,496,devshgraphicsprogramming,2020-08-10T17:43:12Z,so you dont need to have an output `vNormal`
468110681,496,devshgraphicsprogramming,2020-08-10T18:54:28Z,"also a cool thing  would be to ensure that `abs(gl_Position.z) > abs(gl_Position.w)` which will send the triangles outside the NDC bounds and ensure no pixels get rasterized.

an idea would be to do this
```glsl
gl_Position.w *= dot(mat3(matrices[boneID].normalMatrix)*normal,vec3(0.01));
```"
468120934,496,devshgraphicsprogramming,2020-08-10T19:13:59Z,"you can pass such defines via the IGLSLCompiler

@Crisspl remind us how XD ?"
468123268,496,devshgraphicsprogramming,2020-08-10T19:18:32Z,`(device->run() && receiver.keepOpen())` not in benchmark mode
468123427,496,devshgraphicsprogramming,2020-08-10T19:18:50Z,"`device->run()` polls input, etc."
468124382,496,devshgraphicsprogramming,2020-08-10T19:20:43Z,`glFlush` afterwards or you risk an infinite wait.
468125036,496,devshgraphicsprogramming,2020-08-10T19:21:58Z,"you need one `driver->beginScene` at the start and then set the correct FBO (depth only, really low resolution)"
468125339,496,devshgraphicsprogramming,2020-08-10T19:22:34Z,and clear the Z-Buffer to the near value (1.f)
468125435,496,devshgraphicsprogramming,2020-08-10T19:22:45Z,all that for the benchmark mode obviously.
468128316,496,devshgraphicsprogramming,2020-08-10T19:25:31Z,two draws... what?
468136713,496,devshgraphicsprogramming,2020-08-10T19:37:28Z,I want thousands of disks
468137429,496,devshgraphicsprogramming,2020-08-10T19:38:53Z,"less iterations, more disks and bones."
468138864,496,devshgraphicsprogramming,2020-08-10T19:41:28Z,explain what's going on with `newInputParams`
468139573,496,devshgraphicsprogramming,2020-08-10T19:42:52Z,"TODO tweak all `newInputParams, blendParams, geometryObject.assemblyParams, rasterParams` to optimize for vertex only workloads in benchmark mode"
468141548,496,devshgraphicsprogramming,2020-08-10T19:46:53Z,Also no fragment shader to be used in benchmark mode.
468150956,496,Przemog1,2020-08-10T20:05:24Z,"> explain what's going on with `newInputParams`

I just extend vertices by by bone ID attribute here, and it requires updated `SVertexInputParams`"
468153179,496,devshgraphicsprogramming,2020-08-10T20:10:08Z,"ok, but the tweaks for benchmark stuff remain in place."
468156139,496,devshgraphicsprogramming,2020-08-10T20:13:51Z,"need more than one bone per mesh, need artificial duplication of bones, and need a few distinct bones (1-9) being used by different groups of vertices."
468477460,496,devshgraphicsprogramming,2020-08-11T10:21:50Z,please set up your git or visual studio to not modify the line endings of files
468490047,496,devshgraphicsprogramming,2020-08-11T10:46:26Z,"for benchmark mode you want to make a depth only FBO and render to that, not the screen."
468490291,496,devshgraphicsprogramming,2020-08-11T10:46:54Z,dont normalize the normal in benchmark mode
470653338,496,devshgraphicsprogramming,2020-08-14T14:20:44Z,"`+=` dont overwrite, otherwise compiler could optimize out fetching the first three rows for `boneMatrix`."
470653868,496,devshgraphicsprogramming,2020-08-14T14:21:39Z,same here
470654629,496,devshgraphicsprogramming,2020-08-14T14:22:54Z,do something about not having to manually change this
470655025,496,devshgraphicsprogramming,2020-08-14T14:23:35Z,64x64 please
470656608,496,devshgraphicsprogramming,2020-08-14T14:26:15Z,"dont pass refcounted objects by reference, its ugly."
280065579,291,devshgraphicsprogramming,2019-05-01T13:04:01Z,"just make it a `max($ENV,8)` ;)"
280085708,291,manhnt9,2019-05-01T14:20:26Z,"thanks for suggestions, I will update"
280331306,291,manhnt9,2019-05-02T08:44:48Z,updated
281213133,291,devshgraphicsprogramming,2019-05-06T14:36:52Z,"remove this comment, also from other examples if you desire to do so"
281213364,291,devshgraphicsprogramming,2019-05-06T14:37:23Z,only if irrbaw is configured to be built with CEGUI
281214138,291,devshgraphicsprogramming,2019-05-06T14:39:13Z,"if we're not gonna keep something around, don't make it a submodule... submodules are hard to get rid of later on"
281214396,291,devshgraphicsprogramming,2019-05-06T14:39:41Z,@Crisspl fix please.
281215192,291,devshgraphicsprogramming,2019-05-06T14:41:36Z,"the final deliverable (when we actually merge) needs those build on Linux as well, or at the very least EXPAT (since freetype is ubiquitous).

If for some reason its not appropriate to build these ourselves, then they should at the very least be statically linked.
"
281437078,291,manhnt9,2019-05-07T01:57:12Z,"Tried removing other examples, my editor produces ^M as EOL so there're more changes in a commit. I'm only committing for my example for now."
281437272,291,manhnt9,2019-05-07T01:58:47Z,updated.
281437361,291,manhnt9,2019-05-07T01:59:26Z,I can just remove MSVC check and let all compilers build the deps. Since the deps source is already portable.
281437474,291,manhnt9,2019-05-07T02:00:17Z,submodule will introduce much less changes in your git history than directly put the code files here.
281777997,291,Crisspl,2019-05-07T18:41:23Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/source/Irrlicht/CMakeLists.txt#L376
281785414,291,Crisspl,2019-05-07T19:00:33Z,"IrrlichtServer has to make its own pch because of different flags etc. However maybe it could be better to have in repo pch_server.h with just `#include ""pch.h""` instead of making cmake creating it"
282008738,291,devshgraphicsprogramming,2019-05-08T10:33:03Z,"dont use namespace `irr` outside the library source, ever"
282009227,291,devshgraphicsprogramming,2019-05-08T10:34:40Z,"rename the BRDF prefix to BRDF_EXPLORER, I don't want it colliding with actual pure-BRDF stuff later on or to be misunderstood"
282009604,291,devshgraphicsprogramming,2019-05-08T10:36:10Z,"because of the pure insane number of dependencies, `irr::ext::cegui` should be its own statically linked library"
282009862,291,devshgraphicsprogramming,2019-05-08T10:37:08Z,what is the `BRDF` object going to be responsible for?
282011225,291,devshgraphicsprogramming,2019-05-08T10:42:13Z,"ok you need to rename this object to `BRDFExplorerApp` or something similar, simply calling it `BRDF` is really confusing"
282012245,291,devshgraphicsprogramming,2019-05-08T10:45:42Z,"`collectGLState` and `executeGLDiff` take a list of booleans about what state it should care about.

CEGUI uses OpenGL 3 so things like SSBOs, Storage Images, etc. shouldn't matter

Also if you care about current FBO, Viewport, etc then it will change those, sometimes that is not what you want, this is why in the silverlining example I told it to not care about FBO, depth test, viewport etc. etc. because I wanted to render it into a currently texture with currently set viewport size and depth testing."
282012784,291,devshgraphicsprogramming,2019-05-08T10:47:29Z,"default constructor will make an `COpenGLState` object that is as-if for a default OpenGL state that you get at startup, just pointing this out.. don't know if thats the state you want CEGUI to start out in"
282013137,291,devshgraphicsprogramming,2019-05-08T10:48:42Z,do we need to expose CEGUI in the public headers of your `irr::ext::cegui` ?
282033831,291,manhnt9,2019-05-08T11:59:20Z,"Yes, I had the same idea but was just testing it quickly before refactoring. I often work that way, usually I'll refactor things later."
282735233,291,manhnt9,2019-05-10T03:24:40Z,"yes, because ext will only help you set up. In order to develop GUI, you'll have to use CEGUI API too."
283173772,291,manhnt9,2019-05-13T02:44:36Z,"All other examples have it, could you explain further?"
283174005,291,manhnt9,2019-05-13T02:46:59Z,"Will compile ext as lib and link later, when things render on the screen."
283174024,291,manhnt9,2019-05-13T02:47:12Z,updated.
283174464,291,manhnt9,2019-05-13T02:51:42Z,refactored
283174637,291,manhnt9,2019-05-13T02:53:24Z,Added to task list in #279
283174688,291,manhnt9,2019-05-13T02:53:52Z,Refactored.
283177286,291,manhnt9,2019-05-13T03:20:43Z,"Added to task list, will review this when things render."
283177306,291,manhnt9,2019-05-13T03:20:58Z,"Added to task list, will review this when things render."
283948532,291,devshgraphicsprogramming,2019-05-14T18:50:15Z,examples have `using namespace irr` they don't put random code in the namespace itself
284068314,291,manhnt9,2019-05-15T02:38:25Z,"OK, like only put `using namespace` in example having consistent code context."
284318059,291,devshgraphicsprogramming,2019-05-15T15:31:37Z,"remove this, this drags down performance... we should display the Frame time in Miliseconds as measured by an OpenGL timer query with freetype font by CEGUI"
284532002,291,manhnt9,2019-05-16T04:04:27Z,removed.
284663514,291,devshgraphicsprogramming,2019-05-16T11:36:57Z,not quoting anymore?
284663735,291,devshgraphicsprogramming,2019-05-16T11:37:40Z,is the ext called `irr::ext::GUI` or `irr::ext::CEGUI` ?
284663855,291,devshgraphicsprogramming,2019-05-16T11:38:07Z,what does this do?
284663966,291,devshgraphicsprogramming,2019-05-16T11:38:30Z,what does this do?
284666540,291,devshgraphicsprogramming,2019-05-16T11:46:33Z,"those are only enabled by a special IRRBAW option when building the main library, because they inject into process and make it impossible to use Renderdoc (the sanitizers in particular)

maybe you could hijack the main irrlibrary compile options (they are separate and different for Relaese and Debug targets)"
284666922,291,devshgraphicsprogramming,2019-05-16T11:47:51Z,"wrong destination, need the install prefix as well"
284667313,291,devshgraphicsprogramming,2019-05-16T11:49:05Z,I'd call it IrrExtCEGUI to keep consistency with the namespace `irr::ext::cegui`
284669584,291,devshgraphicsprogramming,2019-05-16T11:55:53Z,install prefix?
285369143,291,devshgraphicsprogramming,2019-05-19T08:28:01Z,"eventually after hooking in irrbaw image loaders, this will disappear?"
285369797,291,devshgraphicsprogramming,2019-05-19T08:44:25Z,BRDF Explorer will be a lib?
285413408,291,manhnt9,2019-05-20T02:20:13Z,"Yes, not sure why it doesn't work before although I tried different formats including non-quotes and quotes. But right now Windows and Linux are working fine anyways."
285415312,291,manhnt9,2019-05-20T02:39:19Z,irr::ext::GUI means GUI dependencies used by ext.
285415378,291,manhnt9,2019-05-20T02:40:04Z,It copies CEGUI's libraries to installation folder for end users to link.
285415580,291,manhnt9,2019-05-20T02:41:36Z,"On Windows, end users need headers of CEGUI's dependencies to compile their app since CEGUI include those too."
285415792,291,manhnt9,2019-05-20T02:43:58Z,"About the install prefix, I replied once before. Maybe you missed the mail (please use mail filter to classify GitHub mail). `install()` knows the folder. Destination is also correct since this is for a library, the ${EXECUTABLE_NAME} is the one which causes misunderstanding, will refactor."
285415967,291,manhnt9,2019-05-20T02:45:41Z,Changed to IrrExtCEGUI.
285417036,291,manhnt9,2019-05-20T02:57:38Z,"No, it needs to compile because the code must access to the image codec interface.
Unless I patched CEGUI to have a null image codec or embed irrbaw image loader code into CEGUI (not 100% certain if that will be accepted into original CEGUI repo)."
285417187,291,manhnt9,2019-05-20T02:59:03Z,BRDF_EXPLORER_LIB variable stores the library list (which the app needs to link).
285417836,291,manhnt9,2019-05-20T03:05:38Z,Could you tell me the involved line numbers?
285492369,291,devshgraphicsprogramming,2019-05-20T09:06:47Z,"https://github.com/manhnt9/IrrlichtBAW/tree/sRGB/ext

A. There's no GUI folder here. 
B. With different GUI system out there, we cannot just use `GUI` as a name"
285492673,291,devshgraphicsprogramming,2019-05-20T09:07:34Z,The only folders that should be in `./include` should match namespace names 100%
285492888,291,manhnt9,2019-05-20T09:08:01Z,"Mis-typed, there's no namespace like irr::ext::GUI, only a GUI folder."
285493100,291,devshgraphicsprogramming,2019-05-20T09:08:30Z,i.e. if there's a `./include/irr/ext/VisibilityBuffer` then there is a `irr::ext::VisiblityBuffer`
285493843,291,manhnt9,2019-05-20T09:10:18Z,"understood, see my other comment to solve the actual problem about this."
288690705,291,devshgraphicsprogramming,2019-05-29T17:46:27Z,see #308
289562303,291,devshgraphicsprogramming,2019-05-31T21:55:36Z,we actually have these beautiful options https://github.com/buildaworldnet/IrrlichtBAW/blob/master/CMakeLists.txt#L32
289586221,291,devshgraphicsprogramming,2019-06-01T01:10:29Z,done in latest commit
289586227,291,devshgraphicsprogramming,2019-06-01T01:10:39Z,done in latest commit
354820720,403,devshgraphicsprogramming,2019-12-06T13:00:38Z,binary is always forced
354820751,403,devshgraphicsprogramming,2019-12-06T13:00:42Z,binary
354821045,403,devshgraphicsprogramming,2019-12-06T13:01:30Z,you might want to convert all `_IRR_COMPILE_WITH` into CMake options that then go to a configure file
355553578,403,devshgraphicsprogramming,2019-12-09T16:36:31Z,"are you sure this works? To unset a thing I guess it would have to exist first, but you also need to set it before the subfolder is included.

I usually just set the thing to false, right before the subfolder include."
355554072,403,devshgraphicsprogramming,2019-12-09T16:37:22Z,what are `layouts` ?
355554957,403,AnastaZIuk,2019-12-09T16:38:49Z,"I meant I need to support tiled files, deep imagesm multilayered images and all stuff I guess you would like it to support:)"
355555223,403,devshgraphicsprogramming,2019-12-09T16:39:17Z,would be cool to re-use this for checking if file can be loaded.
355555659,403,AnastaZIuk,2019-12-09T16:40:03Z,"> for checking if file can be loaded.

that will be checked by `magicNumber`, sure"
355560708,403,AnastaZIuk,2019-12-09T16:48:23Z,"I'm not sure being honest. Well, I will do as you wrote, but I've not known how to do it yet. To fix."
355568244,403,devshgraphicsprogramming,2019-12-09T17:01:46Z,NEVER PUT `using namespace` in a header!
355568720,403,devshgraphicsprogramming,2019-12-09T17:02:36Z,"watch out, magic numbers are usually stored as `uint32_t` for the purpose of endianness check, see my SPIRV loader"
355622193,403,devshgraphicsprogramming,2019-12-09T18:52:46Z,put this in `3rdparty/CMakeLists.txt`
355622571,403,devshgraphicsprogramming,2019-12-09T18:53:40Z,"it only needs to load regular OpenEXR images produced by mitsuba, and GIMP, you can error out on the more exotic stuff."
356794141,403,AnastaZIuk,2019-12-11T19:35:59Z,"I wanted to add dependency as IlmBase or OpenEXR, that was my mistake, there is no need to add it since the only one dependency that could be added is `zlib`, but it is already done earlier"
356809668,403,devshgraphicsprogramming,2019-12-11T20:10:07Z,"here you must configure your lib, add all the options, build static, etc. just before"
356811434,403,devshgraphicsprogramming,2019-12-11T20:14:05Z,"they're adding their own zlib I guess.

you need to add dependency IlmBase, etc. just as jpeg, png, shaderc are adde above
then link libraries,
then add include directories

seems you'll need to add dependency and link IlmBase as well"
356817856,403,AnastaZIuk,2019-12-11T20:29:33Z,shouldn't I configure lib in source CMakeLists?
356825524,403,devshgraphicsprogramming,2019-12-11T20:47:47Z,"no, you must set up all the CMake options for the subfolder before you include it."
356857515,403,devshgraphicsprogramming,2019-12-11T21:59:18Z,"I've looked through your log, you're getting compile errors before you're getting linking errors, hence you don't know if a library called `openexr` even exists (wont get messages about library not found)

Also your log jumps straight from Documetnation target to IRrlicht, there are no Ilm or OpenEXR targets being built, this tells me that IRrlicht does not have the Ilm targets in the dependency chain.

*Before*
Introduce `_IRR_COMPILE_WITH_OPENEXR_LOADER_` and disable it.
See if you can compile with the loader disabled, if you can't you've fucked up an exisitng and working build system.

*First*
try to add dependencies explicitly, so you see the Ilm/OpenEXR targets being built or checked for building in the log

*Second*
Fix your missing include issues (include dirs), but make sure to sort out dependencies above first, as the build process may be producing include files in the build dir that you need to find.

*Third*
Maybe limit the OpenEXR includes to the .cpp file, so that the whole project doesnt get polluted by OpenEXR declarations."
357400363,403,AnastaZIuk,2019-12-12T22:19:27Z,"sure, I will deal with it after having openexr loader done"
357411249,403,AnastaZIuk,2019-12-12T22:49:58Z,"_status:_

- Before - **DONE properly, projects build**
- First - ...
- Second - ...
- Third - ..."
357721574,403,devshgraphicsprogramming,2019-12-13T16:16:45Z,what the progress on the first?
357879870,403,devshgraphicsprogramming,2019-12-14T00:27:03Z,"I did it all for you , see PR to your repo"
358140680,403,devshgraphicsprogramming,2019-12-16T09:57:26Z,"this function is being used in more than one image loader, maybe we should make it into a static method of something common?"
358141441,403,devshgraphicsprogramming,2019-12-16T09:58:57Z,"you need to take alignment into account as well, given by calcPitchInBlocks ()

Think of it as a fake/padded width."
358141919,403,AnastaZIuk,2019-12-16T09:59:53Z,"OpenEXR uses it as well, it's a good idea I think"
358142035,403,devshgraphicsprogramming,2019-12-16T10:00:06Z,you could do `dataToSend = texelBuffer->getPointer()` instead of wasting a copy.
358145988,403,devshgraphicsprogramming,2019-12-16T10:08:00Z,"doesn't OpenEXR have a function other than `readRgba` that will give you quantized `uint16_t/halfFloat` directly instead of dequantizing into full floats?

Also your image format you declared as RGBA half float above, your buffers are also same size as a half float image, and here you're reading full floats and then memcpying them to buffer. this will be a disaster.

"
358147478,403,devshgraphicsprogramming,2019-12-16T10:10:58Z,"You need to know when file is `ImfRgba` (half) and you need `EF_R16G16B16A16_SFLOAT`
https://github.com/AcademySoftwareFoundation/openexr/blob/1b88251b8d955124d7a5da9716ec287ef78440e5/OpenEXR/IlmImf/ImfCRgbaFile.h#L73

And when we have `Rgba` (full float)  and you need `EF_R32G32B32A32_SFLOAT`
https://github.com/AcademySoftwareFoundation/openexr/blob/625b95fa026c3b78e537e9bb6a39fcd51920ad13/OpenEXR/IlmImf/ImfRgba.h#L55

I don't know if OpenEXR allows for mixed precision channels (R Half, G full) if you find out that it does, then convert to highest one present (if one channel is 32bit, then all 32bit)."
358157835,403,AnastaZIuk,2019-12-16T10:32:00Z,"but it won't be a reference pointer, but simply pointer. Won't it crash?"
359005538,403,devshgraphicsprogramming,2019-12-17T20:13:59Z,"as long as the ICPUBuffer lives (the smart pointer doesn't go out of scope), the pointer returned by `getPointer` is valid"
359012802,403,AnastaZIuk,2019-12-17T20:30:52Z,isn't it good? (outdated comment?)
359025064,403,devshgraphicsprogramming,2019-12-17T20:58:59Z,calcPitchInBlocks doesn't take alignment into account
359025495,403,AnastaZIuk,2019-12-17T21:00:03Z,As I can see they call RGBA something that uses their `Half`s being 16 bit precision floats
359025946,403,devshgraphicsprogramming,2019-12-17T21:01:08Z,"see the struct declarations/definitions, there's one for full floats and one for half."
359030066,403,AnastaZIuk,2019-12-17T21:11:09Z,"https://github.com/AcademySoftwareFoundation/openexr/blob/1b88251b8d955124d7a5da9716ec287ef78440e5/OpenEXR/IlmImf/ImfCRgbaFile.h#L50 `IlmHalf`
and `Half` https://github.com/AcademySoftwareFoundation/openexr/blob/625b95fa026c3b78e537e9bb6a39fcd51920ad13/IlmBase/Half/half.h#L41 right? Both seem to be 16 bit precision, but `IlmHalf` is unsigned shrot and `Half` is a 16 bit float (maybe I missed something)"
359032005,403,devshgraphicsprogramming,2019-12-17T21:15:43Z,"they're all stored as uint16_t, its just that the bits have a different meaning than for an actual `uint16_t`
"
359035379,403,AnastaZIuk,2019-12-17T21:23:11Z,"well, because of that they provide this though, it will be good for me https://github.com/AcademySoftwareFoundation/openexr/blob/1b88251b8d955124d7a5da9716ec287ef78440e5/OpenEXR/IlmImf/ImfConvert.h#L100"
359059478,403,devshgraphicsprogramming,2019-12-17T22:19:55Z,"you dont' want to convert

an array of IlmHalf is good to do a straight copy to a buffer for an EF_R16G16B16A16_SFLOAT texture"
359528425,403,AnastaZIuk,2019-12-18T19:29:53Z,"well, I checked it and this is a copy of PNG loader `calcPitchInBlocks`
what did I miss?"
360249485,403,AnastaZIuk,2019-12-20T07:07:03Z,"well, you mean alpha channel right?"
360263804,403,devshgraphicsprogramming,2019-12-20T08:08:32Z,"pitchInBlocks is a fake ""length"", as in while the image can be a 200x200 you can make the length 252.

This only affects the buffer unpack to image when making a GL texture from a GL Buffer.

This means that the following equation to compute the output address is wrong
https://github.com/buildaworldnet/IrrlichtBAW/pull/403/files#diff-63315eefc23fcfd4f83552a09eee0c58R240

This is why PNG Loader uses `getPitch` or something like that instead of the image width, beause of the possible padding at the end of each row when storing image data in a buffer.
"
360473760,403,devshgraphicsprogramming,2019-12-20T17:11:56Z,"if you dont support something here that would prevent loading a file, feel free to return false (like multi-part file)"
360474135,403,devshgraphicsprogramming,2019-12-20T17:13:10Z,there's also XYZ formats (although thats in CIE XYZ colorspace)
360474934,403,devshgraphicsprogramming,2019-12-20T17:15:17Z,the alpha checks will cause a texture with a present but different alpha format to RGB to register as a non-alpha texture (should fail instead)
360477420,403,devshgraphicsprogramming,2019-12-20T17:23:02Z,why are you extracting RGBA into 4 separate planes?
360477540,403,devshgraphicsprogramming,2019-12-20T17:23:23Z,are you sure the strides are in pixels and not bytes?
360477736,403,devshgraphicsprogramming,2019-12-20T17:24:00Z,This is what I refer to in https://github.com/buildaworldnet/IrrlichtBAW/pull/403/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=No+extension&hide-deleted-files=true#r358141441
360644402,403,AnastaZIuk,2019-12-21T11:36:04Z,to fix
360644412,403,AnastaZIuk,2019-12-21T11:36:31Z,"it was wronged, fixed without aligement"
360644441,403,AnastaZIuk,2019-12-21T11:37:06Z,"everything is done well, I've read a few pages of their documentation"
360644515,403,AnastaZIuk,2019-12-21T11:38:46Z,"because they provide RGBA class, but don't provide RGB. 
Actually I find it better approach for data assignment and more clear,
because we base on available channels"
360644527,403,AnastaZIuk,2019-12-21T11:39:16Z,"well, and in that way you can specify Slice to make sure Ilm reads type and handle it correctly"
360644578,403,AnastaZIuk,2019-12-21T11:40:05Z,"there are X Y Z channels, but do we want to support it?"
360644653,403,AnastaZIuk,2019-12-21T11:41:28Z,"sure, to fix!"
360650807,403,AnastaZIuk,2019-12-21T14:03:37Z,"so assume I'm handling 250th pixel, what should I fill it with if it's fake actually?
> pitchInBlocks is a fake ""length"", as in while the image can be a 200x200 you can make the length 252."
360651065,403,AnastaZIuk,2019-12-21T14:10:31Z,I'm filling those fake values with 0
360651582,403,devshgraphicsprogramming,2019-12-21T14:23:10Z,"dont fill fake with anything, it wont ever be used.

You just need to change your array output addressing code, from `x+y*realWidth` to `x+y*bufferRowLength`"
360651622,403,AnastaZIuk,2019-12-21T14:24:17Z,great
361005200,403,devshgraphicsprogramming,2019-12-23T21:23:26Z,we should proabably make a macro out of this or a template utility function.
361007414,403,devshgraphicsprogramming,2019-12-23T21:35:11Z,"you need an error out else, people might call it with stupid formats images (or Low Dynamic Range images)."
361007544,403,devshgraphicsprogramming,2019-12-23T21:35:50Z,"instead of using unintelligible costants such as 2,4 use `sizeof(uint16_t)`,`sizeof(float)`"
361007835,403,devshgraphicsprogramming,2019-12-23T21:37:28Z,"nope, bad stride, you need stride all pixels at once (so sizeof whole pixel)"
361010706,403,devshgraphicsprogramming,2019-12-23T21:53:10Z,"you need a per component offset here, 0 for red, one unit for green, two units for blue, etc."
361010773,403,devshgraphicsprogramming,2019-12-23T21:53:39Z,you could do the bufferRowLength*pixelsize
361012028,403,devshgraphicsprogramming,2019-12-23T22:00:50Z,"what do you mean by doesn't work? doesn't compile?

The macro might not like the pointer type going in (is it a void* ?)"
361012205,403,devshgraphicsprogramming,2019-12-23T22:01:51Z,"you're only writing 720 pixels of a 1280x720 image here, just saying."
361012392,403,devshgraphicsprogramming,2019-12-23T22:02:56Z,"same bugs as before.

I'd actually make a Width X Height ""framebuffer"" (just an array) and copy regions to it manually as necessary."
361012620,403,devshgraphicsprogramming,2019-12-23T22:04:15Z,"this will be potentially different for every region, this is why you need to reserve the correct image sized buffer and copy pixels manually (construct the image from regions)"
361012824,403,devshgraphicsprogramming,2019-12-23T22:05:29Z,"wrong, you need to iterate through regions, and then `x,y` need to go from `offset` to `offset+extent` then obviously use all the other region struct parameters to get the pixels out of the buffer."
361013214,403,devshgraphicsprogramming,2019-12-23T22:07:45Z,thx for this
361013615,403,devshgraphicsprogramming,2019-12-23T22:10:12Z,why @Crisspl ?
361045009,403,Crisspl,2019-12-24T02:12:31Z,ctor is inaccessible for make_smart...() func
361109229,403,AnastaZIuk,2019-12-24T09:00:48Z,"Because I insert a layout for one channel. It's the OpenEXR library job to perform appropriate calculations and save it properly. Just save a file, you will see it is correct"
361109632,403,AnastaZIuk,2019-12-24T09:02:27Z,and it's outdated
361109647,403,AnastaZIuk,2019-12-24T09:02:31Z,outdated
361109766,403,AnastaZIuk,2019-12-24T09:02:59Z,"it doesn't compile, and type is known by the template"
361110426,403,AnastaZIuk,2019-12-24T09:05:33Z,"It's good, the parameter of this specifies how many scan lines it should write
if I were to put there 1, it would save 1280 x 1 image

because above I describe the end layout, it saves it correctly"
361111091,403,AnastaZIuk,2019-12-24T09:08:18Z,"it's done well

>  a Width X Height ""framebuffer""

that's what it is
pixelsArrayIlm keeps colors matched to single channel
https://github.com/buildaworldnet/IrrlichtBAW/pull/403#discussion_r361109229"
361111290,403,AnastaZIuk,2019-12-24T09:09:08Z,there is only one region :D 
361111384,403,AnastaZIuk,2019-12-24T09:09:29Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/403#discussion_r361111290
361113097,403,AnastaZIuk,2019-12-24T09:16:10Z,"and it actually saves a file properly, I've tested it"
361113812,403,AnastaZIuk,2019-12-24T09:19:25Z,"important is that I have to insert each channel separately because RGBA class forces you to use half format
that's why I pass to it such an array , to overpass it and insert channels that may have different types (half, full float and uint32_t)

> a Width X Height ""framebuffer""

so it's correct"
361114420,403,AnastaZIuk,2019-12-24T09:21:52Z,and it isn't void*
361114732,403,AnastaZIuk,2019-12-24T09:23:11Z,"well, so where should it be put in files?"
361128650,403,devshgraphicsprogramming,2019-12-24T10:20:44Z,errors from compiler?
361128696,403,devshgraphicsprogramming,2019-12-24T10:20:59Z,ah ok. cool
361130910,403,devshgraphicsprogramming,2019-12-24T10:30:18Z,"no goddamn it, I can give you an image with 50 regions in the spec and you need to be able to save it!"
361130950,403,AnastaZIuk,2019-12-24T10:30:29Z,"![image](https://user-images.githubusercontent.com/34793522/71409137-c69a8800-2640-11ea-9d0b-d7204743ba6b.png)
"
361131039,403,devshgraphicsprogramming,2019-12-24T10:30:50Z,"ah ok, then use `create`"
361131367,403,devshgraphicsprogramming,2019-12-24T10:32:14Z,"yeah because the region encompasses the whole image, and you haven't been handed a difficult case yet."
361132103,403,devshgraphicsprogramming,2019-12-24T10:35:07Z,"if you set up the offset (pointer), stride (penultimate parameter) and row length (last parameter) properly, you'll be able to basically `memcpy` entire rows."
361132745,403,devshgraphicsprogramming,2019-12-24T10:37:21Z,probably a template static function in `IAsset`
361133064,403,devshgraphicsprogramming,2019-12-24T10:38:37Z,call it `castDown`
361134723,403,devshgraphicsprogramming,2019-12-24T10:44:49Z,try making the pointer into a constant pointer and let me know (compiler might get confused).
361137830,403,devshgraphicsprogramming,2019-12-24T10:59:39Z,"ok I might have fucked this one up in the following lines
https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/core/memory/new_delete.h#L104

I use `std::remove_pointer` but I should also then wrap it in `std::remove_reference` first.

The compiler is moaning about the fact that the type being passed into the templates is a reference to a type (after you put a pointer type into a `std::remove_pointer` you get a reference type, not the straight vanilla type).

So feel free to correct my macros ;)"
361164843,403,AnastaZIuk,2019-12-24T13:29:38Z,"Macros fixed, but it still doesn't work, but it works with & and works if you create `ilmType* poitner` and try to delete it"
361164945,403,AnastaZIuk,2019-12-24T13:30:06Z,to fix
361166608,403,AnastaZIuk,2019-12-24T13:40:42Z,so actualy I only have to copy to pixelsArrayIlm pixels correctly having regions taken into account
361184212,403,AnastaZIuk,2019-12-24T15:12:47Z,for each loop works as well
361531412,403,AnastaZIuk,2019-12-26T20:54:19Z,"curious is that if you perform for each loop when an element is a reference pointer while deallocating memory, it spreads out the same errors"
361677327,403,devshgraphicsprogramming,2019-12-27T14:38:17Z,"nope, you can get ths from image creation parameters"
361678247,403,devshgraphicsprogramming,2019-12-27T14:42:27Z,region also specifies a byte offset into the beginning of the buffer.
361679551,403,AnastaZIuk,2019-12-27T14:49:05Z,"but won't it affect then with another mipmap levels? 
unless image creation parameters hold extent for the buffer assuming 0 mipmap level as base level for each region"
361680021,403,AnastaZIuk,2019-12-27T14:51:36Z,"I know, but isn't it good? If not, how should I combine a byte offset into the beginning of the buffer with `ptrStyleEndShiftToImageDataPixel`?"
361680983,403,AnastaZIuk,2019-12-27T14:56:47Z,Do I need it if I specify a begginging of each pixel using `ptrStyleEndShiftToImageDataPixel`?
361836808,403,devshgraphicsprogramming,2019-12-29T09:13:41Z,image creation parameters must create an image big enough so all regions in the list are valid (i.e. can fit inside)
361931247,403,devshgraphicsprogramming,2019-12-30T09:01:30Z,so its done or not?
361931852,403,AnastaZIuk,2019-12-30T09:04:31Z,"It's done, above shows you the behaviour"
361935746,403,devshgraphicsprogramming,2019-12-30T09:21:55Z,WAIT WHAT!?
361935782,403,devshgraphicsprogramming,2019-12-30T09:22:03Z,THE F***?
361967942,403,devshgraphicsprogramming,2019-12-30T11:52:25Z,@Crisspl could still keep it const if you made a new constructor for ICPUShader
361968199,403,devshgraphicsprogramming,2019-12-30T11:53:43Z,@AnastaZIuk can you do this for all loaders (and obviously pick good defaults)
361968251,403,AnastaZIuk,2019-12-30T11:54:01Z,sure!
361968344,403,AnastaZIuk,2019-12-30T11:54:32Z,"after PR merging of course, before I handle GLI"
361968564,403,devshgraphicsprogramming,2019-12-30T11:55:45Z,why is this not factored out to a common static function for some base class like `IImageLoader` and `IImageWriter`
361968821,403,AnastaZIuk,2019-12-30T11:57:04Z,should I put it into `IImageLoader`? I can handle it as well after merging 
361968837,403,devshgraphicsprogramming,2019-12-30T11:57:09Z,"do a pure virtual destructor, do the constructor as a default"
361968939,403,devshgraphicsprogramming,2019-12-30T11:57:42Z,No need for a CPP file for this
361969023,403,AnastaZIuk,2019-12-30T11:58:11Z,it'll be deleted
361969446,403,devshgraphicsprogramming,2019-12-30T12:00:35Z,"its an asset writer!!!!

make a `IImageWriter` that inherits from `IAssetWriter`

please return `IAssetWriter` to virtual inheritance from `IReferenceCounted`"
361969574,403,devshgraphicsprogramming,2019-12-30T12:01:22Z,it was correct before.
361972870,403,devshgraphicsprogramming,2019-12-30T12:19:58Z,"wrong, general equation is `((z*Height+y)*Width+x)*PixelOrBlockSize+ByteOffset`

Height and Width are not the image extent visual/gometrucal parameters, but buffer jumps:
see https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/IImage.h#L452
"
361973104,403,devshgraphicsprogramming,2019-12-30T12:21:03Z,"similar here w.r.t 
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/IImage.h#L452"
361992380,403,AnastaZIuk,2019-12-30T13:58:20Z,"pure virtual destructor, why?"
361993747,403,devshgraphicsprogramming,2019-12-30T14:04:08Z,"pure virtual destructor is for a class that we never ever intend to instantiate (Abstract Data Type) and that is a pure interface (no members, etc.)"
362003913,403,devshgraphicsprogramming,2019-12-30T14:45:49Z,CIE no CEI
362004038,403,devshgraphicsprogramming,2019-12-30T14:46:18Z,"we can support single R channel, RG channel combo and RGB channel combo
"
362004127,403,devshgraphicsprogramming,2019-12-30T14:46:41Z,"but obvs no GB, G, B, RB etc."
362013422,403,AnastaZIuk,2019-12-30T15:19:30Z,Where did you get the general equation from? Could you give me a reference?
362014661,403,AnastaZIuk,2019-12-30T15:24:28Z,"if no channel, what value should I fill it with?"
362025523,403,AnastaZIuk,2019-12-30T16:03:53Z,"but I need to provide a definition of the destructor, where should I put it?"
362026880,403,AnastaZIuk,2019-12-30T16:08:33Z,Now it doesn't work 
362037810,403,Crisspl,2019-12-30T16:49:14Z,"First of all: image texel format size varies, so you cannot iterate over `reinterpret_cast<const ilmType*>(data)`. Iterate bytewise instead. Now your `ptrStyleEndShiftToImageDataPixel` includes `bufferOffset` and then used to increment ptr of type `ilmType*`. So ptr is getting moved by `sizeof(ilmType)*bufferOffset` bytes.
IDK why actually you are iterating over ilmType array since (as i said) channel size varies (half=2bytes or float=4bytes) and ilmType has constant size (cpp is statically typed), but anyway: to get ptr to texel you need to use equation matt gave you. If EXR is always 2D image (i dont know), you can simplify it to `(y*Width+x)*PixelOrBlockSize+ByteOffset`. It's theoretically the same what you have now, but yours is weird because this iterating over `ilmType*` thing. So in practice:
```
void* texelPtr = reinterpret_cast<uint8_t*>(data) + bufferOffset + (yPos * region->imageExtent.width + xPos) * PixelOrBlockSize;
```"
362040542,403,Crisspl,2019-12-30T17:00:33Z,"ah, ilmType is template param, ok. Anyway everything above applies"
362046710,403,AnastaZIuk,2019-12-30T17:25:33Z,"Thank you @Crisspl! I have reorganized the code and now it works
I should have perform calculations without using bytewise shifts"
362048233,403,AnastaZIuk,2019-12-30T17:31:34Z,I need to create for it cpp file however
362068327,403,Crisspl,2019-12-30T18:59:01Z,better call `getTexelOrBlockBytesize` once and save to some var. This call is quite big switch so maybe better no to call it in a loop
362082120,403,AnastaZIuk,2019-12-30T19:58:41Z,"you're right, I saved it "
362084628,403,devshgraphicsprogramming,2019-12-30T20:10:19Z,"there are R16 and R32 formats as well as RG16 and RG32, RGB is special cause it would be Not Power of Two (NPoT) so it doesnt exists and you use RGBA instead"
362084834,403,devshgraphicsprogramming,2019-12-30T20:11:12Z,"no cpp file needed, you can inline the constructor"
362084844,403,devshgraphicsprogramming,2019-12-30T20:11:17Z,"no cpp file needed, you can inline the constructor"
362084858,403,devshgraphicsprogramming,2019-12-30T20:11:21Z,"no cpp file needed, you can inline the constructor"
362085759,403,devshgraphicsprogramming,2019-12-30T20:15:28Z,"`virtual ~IImageLoader() =0;` thats a pure virtual destructor, makes the class abstract, the destructor never gets instantiated, so you never need the definition"
362085891,403,devshgraphicsprogramming,2019-12-30T20:16:04Z,"`IReferenceCounted` has one
"
362090551,403,AnastaZIuk,2019-12-30T20:37:49Z,it is a destructor as rest
362090957,403,devshgraphicsprogramming,2019-12-30T20:40:00Z,"just put `{}` witout the `;` after the function declaration in the header (in other words, make the definition inline) you wont need a source file"
362091107,403,AnastaZIuk,2019-12-30T20:40:47Z,"I know  I know, actually it's default"
460457102,521,devshgraphicsprogramming,2020-07-25T23:32:17Z,"use `if constexpr` instead of a lambda, also clamp the pixels on output not input."
460457185,521,devshgraphicsprogramming,2020-07-25T23:33:41Z,"is there a ""plane count query"" for `E_FORMAT` yet?"
460457353,521,devshgraphicsprogramming,2020-07-25T23:35:41Z,"you just want a `double pixelVals[4];` instead of the buffer.

`decodePixels` takes an intrablock X,Y coordinate  to decode one pixel at a time."
460457525,521,devshgraphicsprogramming,2020-07-25T23:38:04Z,"instead of having that weird lambda at the start, you want to break down the `convertColor<>` functions into their implementation constituent `decodePixels` and `encodePixels` that use a `uint64_t[4]` (sometimes casted to a `double[4]`) buffer for temporary storage.

Then sometimes (when you have the template parameter) depending on a `if constexpr` you want to shove in a `clamp` between the decode and encode."
460457714,521,devshgraphicsprogramming,2020-07-25T23:40:46Z,because you have the silly lambda you feel the need to allocate temporary storage for the block
460457844,521,devshgraphicsprogramming,2020-07-25T23:42:39Z,"you're making an ungodly mess of it by decoding from INPUT_FORMAT ~~using the runtime function when we have compile time specializations which are used in `convertColor`~~ (actually you havent provided compile-time clamping at all for the compile-time format conversion from the general specialization of this class on lines 144-160), clamping, then converting to OUTPUT_FORMAT and saving to a buffer, then REINTERPRETING THE SAVED DATA as INPUT_FORMAT and having `convertColor` do the conversion to OUTPUT_FORMAT` AGAIN"
460457949,521,devshgraphicsprogramming,2020-07-25T23:44:19Z,"all my comments basically boil down to:
- see how `convertColor<>` works
- decompose it into a separate decode+encode
- put a clamp between the decode and the encode depending on the constexpr bool template parameter"
460458159,521,devshgraphicsprogramming,2020-07-25T23:47:20Z,"clamp to output's format Minimum Value in the Range, and Maximum Value in the Range

NOT 0 and 1

P.S. also not all formats encode from `double`, so there's that to account for... see impl of `convertColor`"
460458230,521,devshgraphicsprogramming,2020-07-25T23:48:25Z,"I'd do a loop from i=0 to output format channel count, if the output format is not `EF_UNDEFINED` (not runtime specified)

from i=0 to 0 otherwise"
460458538,521,devshgraphicsprogramming,2020-07-25T23:52:47Z,"you've only implemented the clamping for runtime (or at least 1-format-runtime, because we dont bother specializing for half-compile-time cases) format conversion.

I need an implementation for the both-formats-specified-compile-time case, which is the general class above, where `swizzle` lambda is defined between line 144 and 160"
460458742,521,devshgraphicsprogramming,2020-07-25T23:55:24Z,"for this class a `for (auto i=0; i<MaxChannels; i++)` is desired, for the compile-time general case
> 
> 
> you've only implemented the clamping for runtime (or at least 1-format-runtime, because we dont bother specializing for half-compile-time cases) format conversion.
> 
> I need an implementation for the both-formats-specified-compile-time case, which is the general class above, where `swizzle` lambda is defined between line 144 and 160

I want the for from 0 to output format's channel count (given by the template function, not runtime function)"
461842785,521,AnastaZIuk,2020-07-28T20:02:06Z,adjusted in following commit
461847553,521,AnastaZIuk,2020-07-28T20:11:14Z,there is not as I look around
461851582,521,AnastaZIuk,2020-07-28T20:16:02Z,adjusted in following commit
461851734,521,AnastaZIuk,2020-07-28T20:16:12Z,adjusted in following commit
461869162,521,AnastaZIuk,2020-07-28T20:48:10Z,"adjusted for runtime in following commit, compile time left"
461896572,521,AnastaZIuk,2020-07-28T21:40:56Z,"I was testing something, but ure right, adjusted in following commit (runtime)"
461920803,521,AnastaZIuk,2020-07-28T22:12:00Z,it isn't valid anymore
462395210,521,AnastaZIuk,2020-07-29T15:37:44Z,solved
462547387,521,devshgraphicsprogramming,2020-07-29T19:50:03Z,"drop the alpha, use R8G8B8_SRGB"
463795548,521,devshgraphicsprogramming,2020-07-31T19:36:15Z,make one ;)
463796753,521,devshgraphicsprogramming,2020-07-31T19:38:38Z,is there a compile time version ? like `asset:getFormatChannelCount<E_FORMAT format>(void)` ?
467513289,521,AnastaZIuk,2020-08-08T23:09:17Z,"as I think of it, shouldn't I move a pointer to be a `dstPix+= blockSize` each iteration in block loop?"
467514542,521,AnastaZIuk,2020-08-08T23:28:38Z,"okay, we do not support encoding to BC, it clears a little"
470703076,521,devshgraphicsprogramming,2020-08-14T15:39:38Z,should still advance the pointer though XD ;)
470932118,521,AnastaZIuk,2020-08-15T03:34:54Z,"yup, as well as I do it on SAT now"
472069227,521,devshgraphicsprogramming,2020-08-18T10:12:35Z,?
472091021,521,AnastaZIuk,2020-08-18T10:55:37Z,"oh sorry, no there isn't"
472093792,521,devshgraphicsprogramming,2020-08-18T11:01:03Z,make one.
472103293,521,AnastaZIuk,2020-08-18T11:20:57Z,roger that!
472112717,521,AnastaZIuk,2020-08-18T11:39:20Z,corrected in following commit
472112781,521,AnastaZIuk,2020-08-18T11:39:27Z,corrected in following commit
472132260,521,AnastaZIuk,2020-08-18T12:15:47Z,added and in use!
475792929,521,AnastaZIuk,2020-08-24T17:53:46Z,we should make a decision about it
475793292,521,AnastaZIuk,2020-08-24T17:54:26Z,"it relates to the above https://github.com/buildaworldnet/IrrlichtBAW/pull/521#discussion_r475792929, I will code further if we decide"
475799486,521,AnastaZIuk,2020-08-24T18:05:34Z,not sure if we use dds dithering images or whatever in future
475800719,521,devshgraphicsprogramming,2020-08-24T18:07:57Z,"put a `return CRTP::get` here, this way its clear we expect the derived class to implement (also make function a static)"
475801128,521,devshgraphicsprogramming,2020-08-24T18:08:43Z,"dont hold this here, remember `CDither` is a base class for many things like:
- CWhiteNoiseDither
- CBayerMatrixDither
- CPrecomputedDither"
475801475,521,devshgraphicsprogramming,2020-08-24T18:09:20Z,"dont worry about this in the base class, only provide maximum extent that the dither must support."
475801607,521,devshgraphicsprogramming,2020-08-24T18:09:36Z,you need a pointer to `IState` as another parameter
476523336,521,AnastaZIuk,2020-08-25T15:07:42Z,an issue!
476524016,521,AnastaZIuk,2020-08-25T15:08:40Z,an issue! https://github.com/buildaworldnet/IrrlichtBAW/pull/521/files#r476523336
476560037,521,devshgraphicsprogramming,2020-08-25T15:59:31Z,"make the dither type a template parameter and keep a `Dither*` pointer to the object in the state...

then obvisously you create the dither before you call the filter  ;)"
476560477,521,devshgraphicsprogramming,2020-08-25T16:00:07Z,"add an `int32_t channel` parameter, "
476560918,521,devshgraphicsprogramming,2020-08-25T16:00:42Z,"```
#if 0 // TODO
#endif
```
don't need it right now"
476561143,521,devshgraphicsprogramming,2020-08-25T16:00:59Z,white noise is hash dither.
476561358,521,devshgraphicsprogramming,2020-08-25T16:01:14Z,only precomputed keeps image data
476561468,521,devshgraphicsprogramming,2020-08-25T16:01:24Z,can be public
476561641,521,devshgraphicsprogramming,2020-08-25T16:01:38Z,no need for this here.
476561729,521,devshgraphicsprogramming,2020-08-25T16:01:45Z,goes to precomputed
476562028,521,devshgraphicsprogramming,2020-08-25T16:02:15Z,add a `int32_t channel parameter`
476583141,521,AnastaZIuk,2020-08-25T16:33:53Z,corrected in following commit
476583313,521,AnastaZIuk,2020-08-25T16:34:07Z,corrected in following commit
476584783,521,AnastaZIuk,2020-08-25T16:36:33Z,corrected in following commit
476585203,521,AnastaZIuk,2020-08-25T16:37:14Z,solved
476586147,521,AnastaZIuk,2020-08-25T16:38:47Z,"okay, `IState` will only hold `TexelRange` now (we fill add more in future if needed)
`imageData` will be moved to precomputed dither class and will contain only strides and the buffer"
476674385,521,AnastaZIuk,2020-08-25T19:05:57Z,corrected
476674460,521,AnastaZIuk,2020-08-25T19:06:07Z,corrected
476674791,521,AnastaZIuk,2020-08-25T19:06:45Z,"I did it wrong (compile time error), need to read probably more about CRTP"
476675006,521,AnastaZIuk,2020-08-25T19:07:09Z,corrected
476675105,521,AnastaZIuk,2020-08-25T19:07:21Z,corrected
476680413,521,AnastaZIuk,2020-08-25T19:17:14Z,corrected
476804544,521,devshgraphicsprogramming,2020-08-25T22:33:59Z,why should it have a member with texel range?
476805053,521,devshgraphicsprogramming,2020-08-25T22:34:38Z,"you can't just do `CRTP::function` if `function` is not static

if its not static you need to do `static_cast<CRTP*>(this)->function`"
477245487,521,AnastaZIuk,2020-08-26T12:00:39Z,"because we wanted to have max extent the dither support, so likely texel range I think, I can limit it to only extent"
477302677,521,AnastaZIuk,2020-08-26T13:32:25Z,done
477434924,521,AnastaZIuk,2020-08-26T16:34:29Z,not an issue now
477513156,521,devshgraphicsprogramming,2020-08-26T18:47:51Z,assume always true ;)
477514015,521,devshgraphicsprogramming,2020-08-26T18:49:26Z,load dither from EXR... you'll get better dither
477514263,521,devshgraphicsprogramming,2020-08-26T18:49:56Z,`static_cast`
477514535,521,devshgraphicsprogramming,2020-08-26T18:50:28Z,you don't need to keep it around after you construct the state.
477533341,521,AnastaZIuk,2020-08-26T19:18:43Z,"Look at how stare gets constructed, I think its okay"
477533465,521,AnastaZIuk,2020-08-26T19:18:58Z,state
477586280,521,devshgraphicsprogramming,2020-08-26T21:00:37Z,"you dont want to keep the image around (regions, etc.) just its contents."
478352316,521,AnastaZIuk,2020-08-27T11:40:32Z,corrected in following commit
478353394,521,AnastaZIuk,2020-08-27T11:42:28Z,corrected in following commit
478354461,521,AnastaZIuk,2020-08-27T11:44:29Z,corrected in following commit
478475508,521,AnastaZIuk,2020-08-27T14:46:34Z,not an issue anymore - discussed on discord
478513400,521,devshgraphicsprogramming,2020-08-27T15:37:56Z,"the swizzle type should be a template, because there are compile time swizzles and runtime polymorphic swizzles (see our other APIs)"
478514113,521,devshgraphicsprogramming,2020-08-27T15:38:54Z,also you need an input swizzle and an output swizzle
478514681,521,devshgraphicsprogramming,2020-08-27T15:39:48Z,"we don't need to memcpy, I think `decodePixels` has a variant that takes a swizzle."
478515375,521,devshgraphicsprogramming,2020-08-27T15:40:47Z,see how swizzle gets implemented?
478515674,521,devshgraphicsprogramming,2020-08-27T15:41:13Z,what is texel range?
478516044,521,AnastaZIuk,2020-08-27T15:41:47Z,"I don't get, we do i need in swizzle and out swizzle if filter producent only one out image
How shoould i process in?"
478516525,521,devshgraphicsprogramming,2020-08-27T15:42:30Z,"you can't just take over a buffer of an image (even if you could you should have constructed a smartrefctd ptr)

because the buffer might not be there or cover too small of an area.

You need the CopyImageToBuffer filter IIRC."
478516570,521,AnastaZIuk,2020-08-27T15:42:36Z,?
478516820,521,devshgraphicsprogramming,2020-08-27T15:42:56Z,or create a proxy image with its own buffer and flatten the input image into that.
478517015,521,devshgraphicsprogramming,2020-08-27T15:43:17Z,"nope, the values should have already been decoded."
478517042,521,AnastaZIuk,2020-08-27T15:43:19Z,what? 
478517244,521,AnastaZIuk,2020-08-27T15:43:39Z,do we have such?
478518595,521,devshgraphicsprogramming,2020-08-27T15:45:38Z,"Blit takes an input image and puts it in the output image, while applying convolution kernels (or other kernels)

If you can swizzle, then you should be able to swizzle before and after (after decode and before encode) the kernel."
478518795,521,devshgraphicsprogramming,2020-08-27T15:45:51Z,"this is the ""correct"" way to implement Swizzle"
478519200,521,AnastaZIuk,2020-08-27T15:46:29Z,?
478519976,521,devshgraphicsprogramming,2020-08-27T15:47:36Z,"https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/filters/CFlattenRegionsImageFilter.h

Should be a flatten & convert or you should just only accept images in the RGBA UNORM16 or UNORM32 formats"
478520528,521,AnastaZIuk,2020-08-27T15:48:28Z,i will change it to extent maybe?
478521519,521,AnastaZIuk,2020-08-27T15:49:59Z,You would not to force me to split what's inside decodepixels otherwise in convert swizzle  filter then
478522131,521,devshgraphicsprogramming,2020-08-27T15:50:54Z,"there should be some sort of conditional (`enable_if`) declaration of these member variables

Basically if I'd set `Dither=void` it means no dither decided at compile time."
478522710,521,AnastaZIuk,2020-08-27T15:51:49Z,but i will check it
478522803,521,devshgraphicsprogramming,2020-08-27T15:51:57Z,default dither `void` a.k.a. no dither.
478523331,521,devshgraphicsprogramming,2020-08-27T15:52:46Z,see how there's a separate state member for `PolymorphicSwizzle` and there isn't when the swizzle is not polymorphic
478524926,521,AnastaZIuk,2020-08-27T15:55:08Z,okay
478587540,521,devshgraphicsprogramming,2020-08-27T17:39:36Z,oh ok so its a measure of dimension?
478614957,521,AnastaZIuk,2020-08-27T18:29:25Z,It's extent + offset field
478663212,521,devshgraphicsprogramming,2020-08-27T20:01:20Z,ah kwl
478663478,521,devshgraphicsprogramming,2020-08-27T20:01:50Z,you only need extent to be honest... and also not sure what its doing in the CDither class
479228106,521,AnastaZIuk,2020-08-28T12:25:20Z,"`decodePixels` doesn't have such variant - `convertColor` does, but we don't want it"
479270445,521,AnastaZIuk,2020-08-28T13:07:58Z,not an issue anymore
479271127,521,AnastaZIuk,2020-08-28T13:08:45Z,done
479641044,521,devshgraphicsprogramming,2020-08-29T11:40:04Z,"this should already be included in `irr/asset/asset.h"""
479653768,521,AnastaZIuk,2020-08-29T14:14:19Z,corrected
479661992,521,devshgraphicsprogramming,2020-08-29T15:46:59Z,"nope, you dont want a random number generator to implement this... you want a hash function and feed it the `pixelCoord` and `channel` as input to permute into a single 32 bit value (that you then divide by ~0u to get a float in the correct range)"
479790151,521,AnastaZIuk,2020-08-30T16:38:43Z,solved
479797065,521,AnastaZIuk,2020-08-30T17:47:57Z,there is a IdentityDither class now according to DC conversation and it works fine (at compile time)
479797121,521,AnastaZIuk,2020-08-30T17:48:47Z,"done, but not sure if I should still force RGBA UNORM16 or UNORM32 formats"
480315855,521,devshgraphicsprogramming,2020-08-31T18:39:16Z,compile time template parameter would be better
480316630,521,AnastaZIuk,2020-08-31T18:40:39Z,everything is now templated
480320081,521,AnastaZIuk,2020-08-31T18:47:01Z,oh u mean `normalize`
480322483,521,AnastaZIuk,2020-08-31T18:51:37Z,so what kind of classes should I pass to `normalize`? or should it be only a bool in template param?
480322756,521,AnastaZIuk,2020-08-31T18:52:10Z,and it would do the same SAT's stuff
480374741,521,devshgraphicsprogramming,2020-08-31T20:16:22Z,if the definition of `get` is `float` then your decode format is 32-bit float not 64bit ;)
480375374,521,devshgraphicsprogramming,2020-08-31T20:17:36Z,maybe take an `ICPUImageView` then one has a choice (indirectly) of the mip-map and layer that could be used for the dither.
480376451,521,devshgraphicsprogramming,2020-08-31T20:19:46Z,"your wang hash is done in 32bit uint, your return type is `float`... there's no need for using `double`s"
480377534,521,devshgraphicsprogramming,2020-08-31T20:21:53Z,"dont use byte offsets, just compute a pixel index value `(((channel*extent.depth+z)*extent.height+y)*extent.width+x`"
480417325,521,devshgraphicsprogramming,2020-08-31T21:46:33Z,"> 
> 
> so what kind of classes should I pass to `normalize`? or should it be only a bool in template param?

SAT, ConvertSwizzle and Blit

do we have any more questions after discord chat?"
480473766,521,AnastaZIuk,2020-08-31T23:36:04Z,"no, there are not"
480879926,521,AnastaZIuk,2020-09-01T06:40:03Z,"Okay, so i will devide by float and stop using those casts"
480881141,521,AnastaZIuk,2020-09-01T06:41:38Z,Okay
480881852,521,AnastaZIuk,2020-09-01T06:42:34Z,Oh okay
480926539,521,AnastaZIuk,2020-09-01T07:38:59Z,what about it https://github.com/buildaworldnet/IrrlichtBAW/pull/521#issuecomment-683958930?
481283729,521,AnastaZIuk,2020-09-01T16:38:42Z,corrected in following commit
481288074,521,AnastaZIuk,2020-09-01T16:45:55Z,corrected in following commit
481452018,521,AnastaZIuk,2020-09-01T21:50:19Z,corrected
481982485,521,devshgraphicsprogramming,2020-09-02T10:59:07Z,"you want a `struct` and then an ""anonymous union"" of the member variables"
481982869,521,devshgraphicsprogramming,2020-09-02T10:59:55Z,`static_assert` and `assert` that the format is not a pure-integer format
481983153,521,devshgraphicsprogramming,2020-09-02T11:00:27Z,dont declare the members in this specialization
481983605,521,devshgraphicsprogramming,2020-09-02T11:01:27Z,only assert `#ifdef _IRR_DEBUG`
481983763,521,devshgraphicsprogramming,2020-09-02T11:01:46Z,also a non-static assert does not take a message argument AFAIK
481984399,521,devshgraphicsprogramming,2020-09-02T11:03:06Z,you want to use `floats` instead of `double`s basically.
482070327,521,AnastaZIuk,2020-09-02T13:31:15Z,"not an issue, discussed on the dc"
482070452,521,AnastaZIuk,2020-09-02T13:31:26Z,"not an issue, discussed on the dc"
482086082,521,AnastaZIuk,2020-09-02T13:52:43Z,corrected in following commit
482088202,521,AnastaZIuk,2020-09-02T13:55:26Z,corrected in following commit
482096366,521,AnastaZIuk,2020-09-02T14:06:20Z,corrected in following commit
362612298,411,devshgraphicsprogramming,2020-01-02T20:09:13Z,"I wouldnt call ktx, dds and kmg ""COMPRESSED"" (even though they support dumping of BCn data) by compressed we mean something that requires extra CPU effort to get it in a format ready for GPU to use (like LZMA or ZLIB decompression)"
362613322,411,devshgraphicsprogramming,2020-01-02T20:12:46Z,dont call it `sourceCode` it would make someone thing you're processing JIT script or a shader.
362614448,411,AnastaZIuk,2020-01-02T20:16:22Z,"Right, it's old and i removed it"
362614992,411,AnastaZIuk,2020-01-02T20:18:19Z,Sure
366359365,411,devshgraphicsprogramming,2020-01-14T14:12:38Z,now the derivations with `vectorSIMDf` as the type won't work @Crisspl 
366364016,411,devshgraphicsprogramming,2020-01-14T14:20:53Z,"this is the wrong way around, NAN has all bits set, INF has 0s in the whole mantissa."
366364301,411,devshgraphicsprogramming,2020-01-14T14:21:21Z,@Crisspl @AnastaZIuk 
366364913,411,devshgraphicsprogramming,2020-01-14T14:22:21Z,this is not how it works at all !!!!!!!!!!!!!!!
366369447,411,devshgraphicsprogramming,2020-01-14T14:30:25Z,there's a whole host of bit patterns that corresponds to NAN
366373116,411,devshgraphicsprogramming,2020-01-14T14:36:46Z,"you can call glGenerateMipmaps here temporarily, for now."
366402810,411,devshgraphicsprogramming,2020-01-14T15:26:44Z,"@Crisspl why the sudden change here?

When we draw a meshbuffer we shall draw from non-indirect sources, when we want to draw indirect then we'll never use the meshbuffer concept."
366406874,411,devshgraphicsprogramming,2020-01-14T15:33:53Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366407338,411,devshgraphicsprogramming,2020-01-14T15:34:36Z,P.S. Except for 24bit RGB basic formats.
366407555,411,devshgraphicsprogramming,2020-01-14T15:34:59Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366407812,411,devshgraphicsprogramming,2020-01-14T15:35:26Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366407913,411,devshgraphicsprogramming,2020-01-14T15:35:33Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366407978,411,devshgraphicsprogramming,2020-01-14T15:35:40Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366408065,411,devshgraphicsprogramming,2020-01-14T15:35:49Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366408106,411,devshgraphicsprogramming,2020-01-14T15:35:54Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366408171,411,devshgraphicsprogramming,2020-01-14T15:36:01Z,formats which don't fit in Power-Of-Two for a texel/block will never be allowed to be texture formats (only vertex formats)
366411515,411,devshgraphicsprogramming,2020-01-14T15:41:37Z,change this to inline and static and define it in the header
366413799,411,devshgraphicsprogramming,2020-01-14T15:45:21Z,bail out on a fail.
366425234,411,devshgraphicsprogramming,2020-01-14T16:03:13Z,really? why?
366428142,411,devshgraphicsprogramming,2020-01-14T16:08:22Z,"this is all wrong, you won't be able to handle (1d,2d) array textures

CUBEMAP behaves as-if its a 6 layer 2D array
CUBEMAP_ARRAY behaves as-if its a 6*N layer 2D array"
366430560,411,devshgraphicsprogramming,2020-01-14T16:12:26Z,"I have an idea.. why don't you use a switch and use the correct derived classes from this diagram?
http://gli.g-truc.net/0.8.0/api/a00022.html

they will all assign to base `gli::texture`

cause right now you're handling texture arrays all wrong and cubemaps."
366430804,411,devshgraphicsprogramming,2020-01-14T16:12:50Z,that's absolutely not how regions work!!!!!
366431597,411,devshgraphicsprogramming,2020-01-14T16:14:10Z,also if you need the dimensions of a mip-level just use https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/IImage.h#L403
366433050,411,devshgraphicsprogramming,2020-01-14T16:16:38Z,"ok actually its fine, I see what you're doing"
366433204,411,devshgraphicsprogramming,2020-01-14T16:16:51Z,"its a size of region, not the whole layer."
366433915,411,devshgraphicsprogramming,2020-01-14T16:17:55Z,"does it save ktx, dds, etc. properly?"
366434651,411,devshgraphicsprogramming,2020-01-14T16:19:10Z,"a division by 6 is only applicable to cubemaps, all other array textures no division neeeded!!!!

(this is an error in reasoning present in all of your code here)"
366435852,411,devshgraphicsprogramming,2020-01-14T16:21:09Z,"you're doing it all wrong, a region does not contain all the mip levels also layers are counted differently for non-cubemap textures.

Also you can't do it with a memcpy (well you can but at least one `memcpy` per image-row) because you need to honor the region's defined `bufferRowLength` and `bufferImageHeight` to increment the source pointer properly."
366447252,411,devshgraphicsprogramming,2020-01-14T16:39:51Z,why are you not solving for the correct format here (and below) @AnastaZIuk ?
366451047,411,devshgraphicsprogramming,2020-01-14T16:46:31Z,"if its a cubemap / cubemap array then this is ok.

But overall for other texture types, its `arrayLayers = texture.layers();`"
366452839,411,devshgraphicsprogramming,2020-01-14T16:49:42Z,does `gli::texture::size()` include all the mipmaps etc?
366457011,411,devshgraphicsprogramming,2020-01-14T16:56:54Z,"check that stuff, otherwise the system will always proceed to load and fail files that are not of GLI loadable type."
366458129,411,devshgraphicsprogramming,2020-01-14T16:58:56Z,"this won't work, you need to be able to read from virtual files... etc. so find a GLI function or provide one that overrides `fwrite` or whatever its using internally.

Maybe there's already something that uses an `ostream` or `istream` ?"
366459666,411,devshgraphicsprogramming,2020-01-14T17:01:34Z,"wrong equations for layers and faces, will fail on non cubemap textures."
366460219,411,devshgraphicsprogramming,2020-01-14T17:02:37Z,"this won't work, you need to be able to write to virtual files... etc. so find a GLI function or provide one that overrides `fwrite` or whatever its using internally. Can't just go by filename and trust an external filesystem handler.

Maybe there's already something that uses an `ostream` or `istream` ?"
366463487,411,AnastaZIuk,2020-01-14T17:08:56Z,My single region contains all layers and faces on certain single mip level
366870144,411,devshgraphicsprogramming,2020-01-15T13:19:33Z,fixed in @crisspl 's latest OBJ branch
366890182,411,devshgraphicsprogramming,2020-01-15T14:02:10Z,fixed in @Crisspl 's latest OBJ branch
366890261,411,devshgraphicsprogramming,2020-01-15T14:02:18Z,fixed in @Crisspl 's latest OBJ branch
366890330,411,devshgraphicsprogramming,2020-01-15T14:02:25Z,fixed in @Crisspl 's latest OBJ branch
367015652,411,AnastaZIuk,2020-01-15T17:44:22Z,"it's good since if there is no cubemap, faces amount is 1"
367015937,411,AnastaZIuk,2020-01-15T17:44:56Z,"yes it does, it includes whole size"
367016037,411,AnastaZIuk,2020-01-15T17:45:09Z,to do
367016896,411,AnastaZIuk,2020-01-15T17:46:49Z,why? I think it will https://github.com/g-truc/ovtsa/blob/master/external/gli/core/load.inl#L12
367024819,411,AnastaZIuk,2020-01-15T18:03:39Z,we don't have it in `E_FORMAT` as far as I know :D or maybe it is called different in there
367025581,411,AnastaZIuk,2020-01-15T18:05:31Z,"I loaded dds, saved and loaded and memory was fine, so ktx left to check"
367026638,411,AnastaZIuk,2020-01-15T18:07:51Z,so do we want to support however?
367041681,411,devshgraphicsprogramming,2020-01-15T18:39:53Z,"because you're supposed to read from the `IReadFile` that is passed as argument, you do realize that it doesn't have to be a file in the filesystem, and could be a virtual file in an archive, OR just a pile of data in RAM that mimicks a file?"
367044582,411,devshgraphicsprogramming,2020-01-15T18:46:37Z,"all of these formats are actually these ones
https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L152"
367044989,411,devshgraphicsprogramming,2020-01-15T18:47:31Z,"you're not saving to memory or loading from memory, you are passing the filename :man_facepalming: "
367045159,411,devshgraphicsprogramming,2020-01-15T18:47:53Z,"obviously yes, thats why we had DDS loader in the first place!"
367047203,411,AnastaZIuk,2020-01-15T18:52:26Z,"and passing a texture with all data needed to save an image
it performs saving to file"
367049888,411,AnastaZIuk,2020-01-15T18:57:59Z,"I will use it in TGA for sure, but it is enough to let it be as it is now I think"
367050686,411,AnastaZIuk,2020-01-15T18:59:39Z,you mean `IImageAssetHandlerBase`?
367051458,411,AnastaZIuk,2020-01-15T19:01:19Z,"well I didn't know that, so I will adjust it"
367052221,411,AnastaZIuk,2020-01-15T19:03:05Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/411#discussion_r367051458
367069646,411,devshgraphicsprogramming,2020-01-15T19:40:34Z,"I want you to save to the `IWriteFile` only way to do it is
```cpp
void* someData = ALLOC(SIZE);
gli::save(texture,someData);
file->write(someData,SIZE);
FREE(someData);
```

likewise for reading"
367071623,411,AnastaZIuk,2020-01-15T19:45:04Z,but not sure what about `bufferImageHeight ` you mean in reference to my code
367074145,411,AnastaZIuk,2020-01-15T19:50:44Z,"well, in that case it's easy, but I'm forced to use `vector<char>` https://github.com/g-truc/gli/blob/master/gli/core/save_dds.inl#L126 (dds example)"
367091491,411,AnastaZIuk,2020-01-15T20:30:12Z,to do
367091686,411,AnastaZIuk,2020-01-15T20:30:37Z,to do https://github.com/buildaworldnet/IrrlichtBAW/pull/411#discussion_r367044582
367409008,411,devshgraphicsprogramming,2020-01-16T13:13:13Z,no in the GLIWriter header.
367410070,411,devshgraphicsprogramming,2020-01-16T13:15:44Z,"This will not work
```cpp
memcpy(texture.data(gliLayer, gliFace, region->imageSubresource.mipLevel), ptrBeginningOfRegion + (layer * layerSize), layerSize);
```

if your `bufferImageHeight!=height` or `bufferImageWidth!=width`, you can't copy more than a row at once."
367645120,411,AnastaZIuk,2020-01-16T20:55:49Z,"well, I have to add them on writer yet"
367645600,411,AnastaZIuk,2020-01-16T20:56:54Z,"Fixed, but I will touch it yet a little tomorrow"
367900255,411,AnastaZIuk,2020-01-17T11:53:43Z,"okay, but I'm repeating myself in loader then"
367927963,411,AnastaZIuk,2020-01-17T13:12:01Z,"it and above are wrong for sure, but no idea what they are 
I couldn't find anything about those formats"
368125890,411,devshgraphicsprogramming,2020-01-17T20:37:16Z,still wrong
368131149,411,devshgraphicsprogramming,2020-01-17T20:51:42Z,"This also concerns #412 , if you could add a utility that expands a R8_SRBG texture into a RGB8_SRGB texture to ImageLoaderBase (or whatever that common class with hidden utilities is called) and use this in GLI and TGA loader whenever an R8_SRGB format is encountered.

The reasoning for this is that the R8 format with SRGB encoding used to be available in compatibility (with 2.1) OpenGL profile, but got removed from 3.3 core profile only to be added back to OpenGL 4.6, so not many GPU's drivers can natively accept and display that... so we need a software conversion."
368131264,411,devshgraphicsprogramming,2020-01-17T20:52:06Z,"this pretty much needs to happen on any loader that ""should"" produce a R8_SRGB"
368131531,411,devshgraphicsprogramming,2020-01-17T20:52:51Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L149
368131633,411,devshgraphicsprogramming,2020-01-17T20:53:03Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L148
368131739,411,devshgraphicsprogramming,2020-01-17T20:53:16Z,this we dont support
368132042,411,devshgraphicsprogramming,2020-01-17T20:54:03Z,"rest are here
https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L27"
368132116,411,devshgraphicsprogramming,2020-01-17T20:54:12Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L27
368132536,411,devshgraphicsprogramming,2020-01-17T20:55:19Z,these can be expanded to RGB8_SRGB and RGBA8_SRGB
368132613,411,devshgraphicsprogramming,2020-01-17T20:55:35Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L18
368229498,411,AnastaZIuk,2020-01-18T14:25:19Z,fixed
368246188,411,devshgraphicsprogramming,2020-01-18T20:15:05Z,"Correct order for such loops is Z,Y,X essentially most major memory stride to most minor.

Read about cache trashing on the internet."
368246266,411,devshgraphicsprogramming,2020-01-18T20:16:35Z,maybe assert that the output image format is EF_R8G8B8_SRGB ?
368246392,411,devshgraphicsprogramming,2020-01-18T20:19:54Z,texelAmount should be the full count of pixels to convert (basically imageSizeWithPitch.x*imageSizeWithPitch.y*imageSizeWithPitch.z)
368246444,411,devshgraphicsprogramming,2020-01-18T20:21:06Z,"there's no need for any conversion here... R8_SRGB is the same thing as R8G8B8_SRGB, just less channels."
368246495,411,devshgraphicsprogramming,2020-01-18T20:21:47Z,"this function will crash, you're not initializing `out` to anything"
368246587,411,devshgraphicsprogramming,2020-01-18T20:23:03Z,call it `pixelByteSize`
368246739,411,devshgraphicsprogramming,2020-01-18T20:26:10Z,"just count your offsets right in `redChannelDataLayer` and you'll be fine (watch out, you should take input pitches/strides as certain formats that rely on Discrete Cosine Transform or block compression will pad rows out [height padding possible too in theory] )."
368253195,411,devshgraphicsprogramming,2020-01-18T22:53:54Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L152
368253225,411,devshgraphicsprogramming,2020-01-18T22:54:25Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L154
368253233,411,devshgraphicsprogramming,2020-01-18T22:54:56Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L153
368253241,411,devshgraphicsprogramming,2020-01-18T22:55:14Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L155
368253350,411,devshgraphicsprogramming,2020-01-18T22:58:13Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L157
368253354,411,devshgraphicsprogramming,2020-01-18T22:58:22Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L156
368253378,411,devshgraphicsprogramming,2020-01-18T22:58:56Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L158
368253389,411,devshgraphicsprogramming,2020-01-18T22:59:10Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L159
368253751,411,devshgraphicsprogramming,2020-01-18T23:09:07Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L160
368253753,411,devshgraphicsprogramming,2020-01-18T23:09:12Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L161
368253756,411,devshgraphicsprogramming,2020-01-18T23:09:26Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L162
368253759,411,devshgraphicsprogramming,2020-01-18T23:09:32Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L163
368253871,411,devshgraphicsprogramming,2020-01-18T23:12:23Z,"These are all the same as https://github.com/buildaworldnet/IrrlichtBAW/pull/411/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension#diff-28a7c4ae6aba8ec71c707eede79b01e9R477

Except that you swap `UNORM` for `SRGB`"
368254572,411,devshgraphicsprogramming,2020-01-18T23:31:37Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L164
368254576,411,devshgraphicsprogramming,2020-01-18T23:31:43Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L165
368254592,411,devshgraphicsprogramming,2020-01-18T23:32:13Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L167
368254596,411,devshgraphicsprogramming,2020-01-18T23:32:32Z,https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L166
368254835,411,devshgraphicsprogramming,2020-01-18T23:39:31Z,"https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L206

all Alpha-containing ones are supported."
368254851,411,devshgraphicsprogramming,2020-01-18T23:40:08Z,"you can return a special error on those, Vulkan doesn't distinguish between alpha and non alpha containing PVRTC"
368254898,411,devshgraphicsprogramming,2020-01-18T23:40:59Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/411/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension#r368254851
368254903,411,devshgraphicsprogramming,2020-01-18T23:41:15Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/411/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension#r368254835
368254941,411,devshgraphicsprogramming,2020-01-18T23:42:25Z,"all here https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/asset/format/EFormat.h#L196

PUNCHTHROUGH means 1-bit alpha (on or off, like punching through a card)"
368254999,411,devshgraphicsprogramming,2020-01-18T23:44:18Z,these look like Vulkan's vertex formats (disallowed for textures) so log an appropriate error message.
368255016,411,devshgraphicsprogramming,2020-01-18T23:45:25Z,same as https://github.com/buildaworldnet/IrrlichtBAW/pull/411/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=No+extension#r368254941
368255421,411,devshgraphicsprogramming,2020-01-18T23:57:06Z,"> • If you want to port a game which is using ETC1 to Vulkan, you can use the existing
resources by using back-word compatible format VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK

Found that in some Vulkan case study on the web"
368299143,411,AnastaZIuk,2020-01-19T14:42:03Z,"yeah I know, but I thought that it will be easy to expand the buffer in that way
but I will just get the size and multiple through 3 including all you mentioned"
368299186,411,AnastaZIuk,2020-01-19T14:42:37Z,"logic error, I meant channels in texel, but it's wrong"
368299196,411,AnastaZIuk,2020-01-19T14:42:47Z,"I'm reading, to fix"
368303846,411,AnastaZIuk,2020-01-19T15:53:40Z,but what about `LA4` then?
368303933,411,AnastaZIuk,2020-01-19T15:55:22Z,there is no enough SRGB `EF_FORMAT`s to cover it
368304876,411,AnastaZIuk,2020-01-19T16:09:31Z,"Actually I thought about it as I will get from `convertColor` a ready to use pointer with appropriate size, you're right"
368304975,411,AnastaZIuk,2020-01-19T16:11:25Z,have to read about `Discrete Cosine Transform`
368305384,411,AnastaZIuk,2020-01-19T16:17:47Z,"but there is a DXT, and our prefix is BC(X). Is it the same?"
368305391,411,devshgraphicsprogramming,2020-01-19T16:17:51Z,"well it doesnt matter what DCT is, its just that some image formats will require physical images to be multiples of some sort of a size because of compression or encoding, so padding will be added for the ""unnatural"" image resolutions.

Example HEVC or h.264 requires block sizes of 8x8 or something like that so you cant have a 400x300 video"
368305579,411,AnastaZIuk,2020-01-19T16:21:08Z,"DXT3 and BC2? Is it valid? I don't get it, what is the convention?"
368305630,411,devshgraphicsprogramming,2020-01-19T16:22:00Z,"LA4 is 4 bits, just expand the format into 8bits per channel and pretend the format is RGBA8_SRGB."
368305725,411,devshgraphicsprogramming,2020-01-19T16:23:06Z,which ones are wrong then?
368305790,411,devshgraphicsprogramming,2020-01-19T16:24:03Z,"DXT1-5 and BC1-3 are different names for the same thing, DXT2 and DXT4 are not even formats in their own right."
368305797,411,devshgraphicsprogramming,2020-01-19T16:24:18Z,"DXT3 is BC2, google it"
368307913,411,AnastaZIuk,2020-01-19T17:01:52Z,got it
368309203,411,AnastaZIuk,2020-01-19T17:25:43Z,to fix in next commit in that case
368309240,411,AnastaZIuk,2020-01-19T17:26:21Z,I will study it
368642800,411,AnastaZIuk,2020-01-20T16:43:32Z,will `EF_R4G4B4A4_UNORM_PACK16` fit it?
368664934,411,devshgraphicsprogramming,2020-01-20T17:37:37Z,"not really, because for every two LA4  pixels you'd be getting one `EF_R4G4B4A4_UNORM_PACK16` pixel"
368664979,411,devshgraphicsprogramming,2020-01-20T17:37:44Z,so padding needed.
368665043,411,devshgraphicsprogramming,2020-01-20T17:37:54Z,also SRGB concerns
368676969,411,devshgraphicsprogramming,2020-01-20T18:15:41Z,?
376709488,411,devshgraphicsprogramming,2020-02-08T13:14:31Z,aaand its even more broken now!
376723181,411,devshgraphicsprogramming,2020-02-08T17:44:17Z,WTF are you doing?
376723198,411,devshgraphicsprogramming,2020-02-08T17:44:32Z,WHAT?
376723236,411,devshgraphicsprogramming,2020-02-08T17:45:34Z,"these functions need to round up 
`(val+den-1u)/den`"
376723363,411,devshgraphicsprogramming,2020-02-08T17:47:29Z,iterate over region layers!
376723430,411,devshgraphicsprogramming,2020-02-08T17:48:32Z,you don't need this lambda
376723473,411,devshgraphicsprogramming,2020-02-08T17:49:17Z,you shall not call boolean functions every loop iteration!
376817716,411,devshgraphicsprogramming,2020-02-09T21:37:07Z,still wrong
287882394,307,devshgraphicsprogramming,2019-05-27T21:10:21Z,"FLT_MAX, otherwise this won't work for boxes with max edge <(1,1) or min edge > (-1,-1)"
287882822,307,devshgraphicsprogramming,2019-05-27T21:14:35Z,"nope, bad API

you only want
```cpp
inline aabb2dSIMDf(const core::vectorSIMDf& _point) : bound(_point.xyxy()^core::vectorSIMDu32(0x80000000u,0x80000000u,0u,0u)) {}
```"
287882923,307,devshgraphicsprogramming,2019-05-27T21:15:28Z,rename to `aabb2dSIMDf`
287882994,307,devshgraphicsprogramming,2019-05-27T21:16:08Z,do it from two `core::vectorSIMDf`s instead
287883008,307,devshgraphicsprogramming,2019-05-27T21:16:21Z,y is negative min
287883054,307,devshgraphicsprogramming,2019-05-27T21:16:46Z,`aabb3dSIMDf`
287883118,307,devshgraphicsprogramming,2019-05-27T21:17:15Z,you need to negate the minimums
287883564,307,devshgraphicsprogramming,2019-05-27T21:21:28Z,"because `bounds` is private (rightfully so because it has a weird and packed encoding), you need public getter functions.
```cpp
inline core::vectorSIMDf getMinEdge() const
{
   auto retval = -bounds;
   retval.makeSafe2D();
   return retval;
}
inline core::vectorSIMDf getMaxEdge() const
{
   auto retval = bounds.zwzw(); // can be anything zw__()
   retval.makeSafe2D();
   return retval;
}
```"
289016802,307,devshgraphicsprogramming,2019-05-30T14:33:18Z,those need to be undefined at the end of the file to not pollute the preprocessor
289017137,307,devshgraphicsprogramming,2019-05-30T14:33:59Z,negative on everything! you're using `core::max_` to join boxes and points
289021415,307,devshgraphicsprogramming,2019-05-30T14:43:21Z,add the keyword `explicit` we don't want a conversion to happen by accident
289021618,307,devshgraphicsprogramming,2019-05-30T14:43:48Z,make construction of a aabbox explicit here (construct the object)
289022200,307,devshgraphicsprogramming,2019-05-30T14:45:06Z,"there's no such function in the original., there shoudl be a separate `getMinEdge` and `getMaxEdge`"
289022764,307,devshgraphicsprogramming,2019-05-30T14:46:19Z,reset from a `vectorSIMDf` point
289023001,307,devshgraphicsprogramming,2019-05-30T14:46:49Z,"don't need this, just provide copy-assignment"
289023160,307,Przemog1,2019-05-30T14:47:07Z,"should this function stay as an overload?
"
289023781,307,devshgraphicsprogramming,2019-05-30T14:48:20Z,"you could have just did the following
```
return (box.zwzw()-box.xyxy())*vectorSIMDf(0.5f,0.5f,0.f,0.f);
```"
289025250,307,devshgraphicsprogramming,2019-05-30T14:51:10Z,I think its important to have zeros in the zw output coordinate so save to a temporary and call `makeSafe2D` before returning
289026438,307,devshgraphicsprogramming,2019-05-30T14:53:23Z,just ```return all((box^SIGN_FLIP_MASK_XY)==box.zwzw());```
289027227,307,devshgraphicsprogramming,2019-05-30T14:54:51Z,"there's no abs there, update the comment"
289027544,307,devshgraphicsprogramming,2019-05-30T14:55:24Z,4 edges
289027951,307,devshgraphicsprogramming,2019-05-30T14:56:10Z,extract the min and max point and turn them into solitary aabb2d then join the two together
289028209,307,Przemog1,2019-05-30T14:56:42Z,"I know, its copy pasted from aabbox3d"
289028586,307,devshgraphicsprogramming,2019-05-30T14:57:28Z,provide an explanation as to why this function works
289029267,307,devshgraphicsprogramming,2019-05-30T14:59:04Z,why do you need to check this as well?
289029434,307,devshgraphicsprogramming,2019-05-30T14:59:28Z,I swear there has to be a faster check
289029687,307,devshgraphicsprogramming,2019-05-30T15:00:00Z,there are no 2d line classes in the engine so you can nuke those
289029747,307,devshgraphicsprogramming,2019-05-30T15:00:08Z,this needs a better name
289030140,307,Przemog1,2019-05-30T15:00:59Z,"suggestions?
"
289030205,307,devshgraphicsprogramming,2019-05-30T15:01:08Z,"nope because if one wants to do float they can use implicit vectorSIMDf constructor like this
`someBox.reset({x,y});`"
289030867,307,devshgraphicsprogramming,2019-05-30T15:02:46Z,`internal_representation`
289354071,307,devshgraphicsprogramming,2019-05-31T11:32:56Z,reinterpret_cast
289354188,307,devshgraphicsprogramming,2019-05-31T11:33:26Z,just INT_MIN instead
289354414,307,devshgraphicsprogramming,2019-05-31T11:34:22Z,this could be templated
289374574,307,devshgraphicsprogramming,2019-05-31T12:46:17Z,"`internalBoxRepresentation = core::max_(internalBoxRepresentation, _box.internalBoxRepresentation);`"
289374904,307,devshgraphicsprogramming,2019-05-31T12:47:15Z,this needs to inherit from a AlignedBase class to ensure alignment and `operator new`+`operator delete` overrides
289375027,307,devshgraphicsprogramming,2019-05-31T12:47:34Z,same for the other vector type
289375880,307,devshgraphicsprogramming,2019-05-31T12:50:09Z,"this sort of thing could be provided by a base class with CRTP (assuming the base class a CRTP template argument which is a template class itself, see the allocator code for an example of a template on a template class)
```cpp
inline void addPoint(const T& point)
{
   CRTP<T>::addPoint(CRTP<T>(point));
}
```"
289376136,307,devshgraphicsprogramming,2019-05-31T12:50:51Z,"be consistent and don't use `getBounds()` internally, just use `internalBoxRepresentation`"
289376290,307,devshgraphicsprogramming,2019-05-31T12:51:18Z,remove this method
289377097,307,devshgraphicsprogramming,2019-05-31T12:53:48Z,we come back to this at the end
289377739,307,devshgraphicsprogramming,2019-05-31T12:55:43Z,"another note, it would be good to use the `vector2df_SIMD` typedef for places where we input or return points, its more clear what the expected input and output is"
289378371,307,devshgraphicsprogramming,2019-05-31T12:57:38Z,"this could actually be a template function of the base class
```cpp
inline void reset(const T& point)
{
   CRTP<T>::operator=(CRTP<T>(point));
}
```"
289379232,307,devshgraphicsprogramming,2019-05-31T13:00:02Z,"could be a template of base
```cpp
      inline T getCenter() const
      {
         return (CRTP<T>::getMinEdge()+CRTP<T>::getMaxEdge())/T(2);
      }

```"
289379414,307,devshgraphicsprogramming,2019-05-31T13:00:37Z,could also be templated
289379738,307,devshgraphicsprogramming,2019-05-31T13:01:41Z,could also template
289379840,307,devshgraphicsprogramming,2019-05-31T13:02:03Z,update comment
289379957,307,devshgraphicsprogramming,2019-05-31T13:02:27Z,it should be possible to template and inline this I think
289380949,307,devshgraphicsprogramming,2019-05-31T13:05:44Z,"actually because INT_MIN is equal to -1-INT_MAX, we cannot use the floating point hack :("
289382495,307,devshgraphicsprogramming,2019-05-31T13:10:22Z,could be templated
289382729,307,devshgraphicsprogramming,2019-05-31T13:10:58Z,keep this one and kill the one above
289580152,307,devshgraphicsprogramming,2019-05-31T23:48:46Z,why are you doing a compare against a vectorSIMDf?
289580424,307,devshgraphicsprogramming,2019-05-31T23:51:03Z,"also this comparison op only works for signed ints

You'd need to use CRTP and make vectorSIMD_32<T> a common base class (as `vectorSIMD_32<VECTOR_TYPE<T> >`) for actual `vectorSIMDu32` and `vectorSIMDi32` (instead of them being typedefs as they are now)"
289580521,307,devshgraphicsprogramming,2019-05-31T23:51:57Z,shift right behaves differently on signed vs unsigned (whether it shifts in copies of the sign bit)
289600484,307,Przemog1,2019-06-01T10:31:57Z,"> why are you doing a compare against a vectorSIMDf?

oops
"
289602355,307,Przemog1,2019-06-01T11:53:55Z,"I'm going to use it only for aabbSIMDu (unsigned int aabb) in getCenter() function, where i need to divide by 2."
289602463,307,Przemog1,2019-06-01T11:56:45Z,"i.e. 
```cpp
(getMaxEdge() + getMinEdge) >> 2;
```"
289603999,307,devshgraphicsprogramming,2019-06-01T12:59:03Z,"that's fine(ish)

but you've just added a >> operator to a class that provides both `vectorSIMD32u` and `vectorSIMD32i` so you've introduced a bug"
289604160,307,devshgraphicsprogramming,2019-06-01T13:05:06Z,"actually this function is called `getEdges` but its actually `getVertices` if you look at the definition in `aabbox3d<>`
its for getting the corners
(you can rename if you like)"
289604362,307,devshgraphicsprogramming,2019-06-01T13:13:01Z,sign flip missing
289608484,307,Przemog1,2019-06-01T15:07:40Z,"_mm_srli_epi32 will do for unsigned int?
"
289608735,307,devshgraphicsprogramming,2019-06-01T15:17:06Z,correct
289615912,307,Przemog1,2019-06-01T19:20:18Z,this class will be moved to aabbSIMDi.h ofc
289616442,307,devshgraphicsprogramming,2019-06-01T19:41:09Z,you want to template on `core::vector2di32_SIMD`
289616505,307,Przemog1,2019-06-01T19:45:08Z,"right
"
289617401,307,Przemog1,2019-06-01T20:23:51Z,"it can be shared between aabbSIMDi and aabbSIMDu only, aabbSIMDf needs also sign flip operation
"
289618564,307,devshgraphicsprogramming,2019-06-01T21:15:15Z,getMinEdge and getMaxEdge you'll actually have to specialize
289618583,307,devshgraphicsprogramming,2019-06-01T21:16:06Z,reset can be done as an move assignment (`operator=(&&)`) of a new box created from a point
289618690,307,devshgraphicsprogramming,2019-06-01T21:21:40Z,the unpack lo and unpack hi comparison will work here too
289618730,307,devshgraphicsprogramming,2019-06-01T21:23:27Z,"dont use the negative minimum convention for integers, due to range issues"
289618742,307,devshgraphicsprogramming,2019-06-01T21:24:16Z,you're missing `2d` from the name
289618750,307,devshgraphicsprogramming,2019-06-01T21:24:33Z,you're missing `2d` from the name
289620268,307,devshgraphicsprogramming,2019-06-01T22:34:35Z,lovely stuff @Przemog1 
289620301,307,Przemog1,2019-06-01T22:35:28Z,"i know, this class will be dumped anyway"
289640281,307,Przemog1,2019-06-02T12:25:45Z,why it doesn't compile?
289643739,307,Przemog1,2019-06-02T13:58:19Z,only this function will vary between aabb2dSIMDi and aabb2dSIMDu i believe 
289644989,307,devshgraphicsprogramming,2019-06-02T14:30:59Z,you don't need a swizzle your constructors will work with random stuff in zw
289644996,307,devshgraphicsprogramming,2019-06-02T14:31:11Z,now you need an `std::move`
289645065,307,devshgraphicsprogramming,2019-06-02T14:32:50Z,still missing `2d` in the name
289645089,307,devshgraphicsprogramming,2019-06-02T14:33:29Z,sneaky way of solving this ;)
289645124,307,devshgraphicsprogramming,2019-06-02T14:34:25Z,"you need `(INT_MAX,INT_MAX,INT_MIN,INT_MIN)` I told you that beacuse of the ranges you won't be able to use the same ""one SSE op"" trick as for the `vectorSIMDf` based solution"
289645140,307,devshgraphicsprogramming,2019-06-02T14:34:56Z,if you implement all the comparison operators in the vectorSIMD32* types then yes.
289645162,307,devshgraphicsprogramming,2019-06-02T14:35:27Z,"We don't quite support C++17, but we have out own workaround called `irr::static_if` if I remember correctly"
289645183,307,devshgraphicsprogramming,2019-06-02T14:35:51Z,"(UINT_MAX,UINT_MAX,0u,0u)"
289645198,307,devshgraphicsprogramming,2019-06-02T14:36:17Z,`explicit`
289645256,307,devshgraphicsprogramming,2019-06-02T14:37:31Z,"great plan, remember to use `_mm_blend_*` from SSE4.2 (the same can be used to implement `core::mix` compatibile with GLSL that operates on a bvec)"
289645382,307,Przemog1,2019-06-02T14:41:11Z,wtf i did xd
289645407,307,Przemog1,2019-06-02T14:41:45Z,"whats the reason to not support c++17?
"
289645438,307,devshgraphicsprogramming,2019-06-02T14:42:30Z,"actually if you did
```
all(unpacklo(internalBoxRepresentation,p) < mix(p,internalBoxRepresentation,bvec4(false,false,true,true)))
// all(  (i.min,p.xy) < (p.xy,i.max)  )
```
then you could get away just with `operator<`"
289645467,307,devshgraphicsprogramming,2019-06-02T14:43:15Z,"you have a typo (missing ""t"")?"
289645519,307,devshgraphicsprogramming,2019-06-02T14:44:30Z,?
289645564,307,devshgraphicsprogramming,2019-06-02T14:45:22Z,"having to compile on old versions of GCC for edu.buildaworld.net
(we support c++17, but need fallbacks, `static_if` is a fallback for c++14)"
289645640,307,devshgraphicsprogramming,2019-06-02T14:47:53Z,sure because `get*Edge` returns a normal natural 2d point and `reset` + `addPoint` should work on it just fine
289645646,307,devshgraphicsprogramming,2019-06-02T14:48:01Z,void
289645651,307,devshgraphicsprogramming,2019-06-02T14:48:08Z,no return
289645695,307,devshgraphicsprogramming,2019-06-02T14:49:43Z,"something went wrong here.
```
VECTOR_TYPE extent = DWN_CAST_THIS_PTR->getExtent();
return extent.x*extent.y;
```"
289645709,307,devshgraphicsprogramming,2019-06-02T14:50:18Z,"made a typo, updated"
289645757,307,devshgraphicsprogramming,2019-06-02T14:51:45Z,remember about the stack overflow algorithm
289645773,307,devshgraphicsprogramming,2019-06-02T14:52:19Z,explicit
289645846,307,devshgraphicsprogramming,2019-06-02T14:54:21Z,this class still around?
289645900,307,devshgraphicsprogramming,2019-06-02T14:55:53Z,"Wrong.

aabb2dSIMDf will perform sign flip when calling a constructor from a single point"
289646168,307,Przemog1,2019-06-02T15:03:32Z,"no, will clean it up later"
289646181,307,Przemog1,2019-06-02T15:03:57Z,nvm
289646208,307,Przemog1,2019-06-02T15:04:40Z,"thats the plan, but implementing those will take some time
"
289646240,307,Przemog1,2019-06-02T15:05:40Z,"why not ordinary copy assigment? We are not moving anything
"
289646427,307,Przemog1,2019-06-02T15:10:28Z,"sure
"
289648504,307,Przemog1,2019-06-02T16:06:34Z,"description of this function says: 
/** Necessary if for example MinEdge and MaxEdge are swapped. */

so in this situation if minEdge and maxEdge are switched, then aabbSIMDf version of getMinEdge() will return maxEdge with fliped sign"
289659389,307,Crisspl,2019-06-02T21:56:33Z,@devshgraphicsprogramming we are allowed to use `if constexpr` now?
289660528,307,devshgraphicsprogramming,2019-06-02T22:36:29Z,"no, see the other comment I left about `static_if`"
289660579,307,devshgraphicsprogramming,2019-06-02T22:38:10Z,"you could move the temporary `pointBox` into `this`

now what you have is incompileable, but I can assume you meant to copy the internal rep of the temporary `pointBox` into `this->internal....` which will get optimized by the compiler only if you're lucky."
289660620,307,devshgraphicsprogramming,2019-06-02T22:39:14Z,"yes, but you need to anticipate `repair` being called on a totally valid aabb (that does not need switching)"
290260397,307,devshgraphicsprogramming,2019-06-04T12:01:02Z,IRR_FORCE_EBO
290260560,307,devshgraphicsprogramming,2019-06-04T12:01:32Z,"make them protected, this way `aabb2dSIMDBase` will not be possible to instantiate"
290260685,307,Przemog1,2019-06-04T12:01:55Z,makes sense 
290260698,307,devshgraphicsprogramming,2019-06-04T12:01:57Z,just use assignment
290488747,307,devshgraphicsprogramming,2019-06-04T20:43:49Z,"nope, you need to downcast the pointer and call the CRTP version of operator="
290489092,307,devshgraphicsprogramming,2019-06-04T20:44:41Z,aabb2SIMDBase decl also needs `IRR_FORCE_EBO`
290490345,307,Przemog1,2019-06-04T20:47:53Z,i really need to read about it
290492206,307,Przemog1,2019-06-04T20:52:33Z,"got it, just in case copy assigment is overrided"
290505153,307,devshgraphicsprogramming,2019-06-04T21:29:47Z,basically put static_asserts that `sizeof(aabb2dSIMDf)==16u` and see what happens
290505341,307,devshgraphicsprogramming,2019-06-04T21:30:21Z,"that's invalid, you need to use `_mm_store_ps`"
290514441,307,Przemog1,2019-06-04T22:00:22Z,"I've changed that already, but it worked "
290531667,307,devshgraphicsprogramming,2019-06-04T23:14:40Z,its works because your compiler substitutes in `_mm_storeu_ps` silently
165333271,21,devshgraphicsprogramming,2018-02-01T11:46:02Z,"Maybe have a ""Blob* SerializeToBlob(void** initialDataPtr, uint32_t& blobSize=0);"" function for future use in all classes?

With a requirement that initialDataPtr is either NULL or an address of a pointer to memory which can be reallocated using realloc.

And then at the end of the function return *initialDataPtr;

Ofc blobSize would be the starting size of the initialDataPtr, and after it gets written the true size."
165334472,21,devshgraphicsprogramming,2018-02-01T11:51:13Z,could add that As of 2018 most OpenGL implementations support 16 attributes (some CAD GPUs more)
165334558,21,devshgraphicsprogramming,2018-02-01T11:51:39Z,special ID for reverse XYZW order
165334674,21,devshgraphicsprogramming,2018-02-01T11:52:10Z,Best thing about this enum is that it can be casted to an int to give you the actual component count :+1: 
165334891,21,devshgraphicsprogramming,2018-02-01T11:53:08Z,In OpenGL some formats are special like RGB30_A2 or RGB9_E5 which force the number of components and give no flexibility in the number of channels
165335421,21,devshgraphicsprogramming,2018-02-01T11:55:43Z,"In OpenGL parlance Normalized-Integer means whether an integer value gets rescaled to [0,1] or [-1,1] float value respectively for unsigned and signed integer, by the time it reaches the shader input as a vertex attribute or texel from a texture."
165335632,21,devshgraphicsprogramming,2018-02-01T11:56:46Z,"If we're including it here, then move CBawFile.h from ""source/Irrlicht"" to ""include"""
165336498,21,devshgraphicsprogramming,2018-02-01T12:00:41Z,"we should move this into the protected section, as this class is an ADT

Definitely dont want to be able to create these objects out of thin-air"
165337614,21,devshgraphicsprogramming,2018-02-01T12:06:06Z,"As mentioned in out previous conversations:

We only keep track of a position attribute, as every vertex needs to have at least a position to be displayed on the screen. Certain vertices may not have colors, normals, texture coords, etc. but a position is always present.

I wanted to give flexibility and not just assume attribute 0 to be the old gl_Vertex blindly.

On another note we need to know at least what is the vertex attribute for position to calculate bounding boxes reliably.

However if you want to do some weird GPGPU based off drawing vertices, you can safely ignore this if you don't use bounding box culling."
165338156,21,devshgraphicsprogramming,2018-02-01T12:08:44Z,for consistency call it the index array
165339927,21,devshgraphicsprogramming,2018-02-01T12:17:53Z,"On another note, maybe instead of doing the copying here... do it in the constructor of the FinalBoneHierarchyBlobV1 class? or a static createOnMemory(void* dataPtr) function?
At least for consistency :)

We can get all the private members of CFinalBoneHierarchy, i.e.
keyframeCount == CFinalBoneHierarchy::getKeyframeCount()
keyframes == CFinalBoneHierarchy::getKeys()
interpolatedAnimations == CFinalBoneHierarchy::getInterpolatedAnimationData(0)
nonInterpolatedAnimations == CFinalBoneHierarchy::getNonInterpolatedAnimationData(0)
etc."
165342356,21,devshgraphicsprogramming,2018-02-01T12:30:51Z,Vertex with index ix which is to be returned
165342884,21,devshgraphicsprogramming,2018-02-01T12:33:11Z,"the 'ix'th vertex

no such vertex

Not index"
165343608,21,devshgraphicsprogramming,2018-02-01T12:36:49Z,"and by 'bufferOffset' also

Basically it will get the start of the array at the same point as OpenGL will get upon a glDraw*

When accessing the array take account of the attribute stride as consecutive elements in the array will not be attribute #attrId of consecutive vertices
"
165343760,21,devshgraphicsprogramming,2018-02-01T12:37:33Z,vertex attribute not index attribute
165344809,21,devshgraphicsprogramming,2018-02-01T12:42:51Z,see my note about variable size blobs
165344990,21,devshgraphicsprogramming,2018-02-01T12:43:42Z,see my note about variable size blobs
165345203,21,devshgraphicsprogramming,2018-02-01T12:44:48Z,see my note about variable size blobs
165345351,21,devshgraphicsprogramming,2018-02-01T12:45:26Z,"Maybe have a constructor/static create function directly from the object being saved

+see my note about variable size blobs"
165346095,21,devshgraphicsprogramming,2018-02-01T12:49:05Z,"Maybe have a constructor/static create function directly from the object being saved

+see my note about variable size blobs"
165350535,21,devshgraphicsprogramming,2018-02-01T13:10:52Z,"

Maybe have a constructor/static create function directly from the object being saved

+see my note about variable size blobs
"
165351741,21,devshgraphicsprogramming,2018-02-01T13:16:15Z,"can be a static_cast or reinterpret_cast, just check the mesh type before casting "
165352323,21,devshgraphicsprogramming,2018-02-01T13:18:41Z,You will need to use the heap for this bad boy
165355319,21,devshgraphicsprogramming,2018-02-01T13:30:58Z,"Big note for this function, NOT ALL FORMAT CONVERSIONS TO RGBA32F/XYZW32F ARE IMPLEMENTED!"
165355421,21,devshgraphicsprogramming,2018-02-01T13:31:21Z,vectorSIMDf object
165355512,21,devshgraphicsprogramming,2018-02-01T13:31:47Z,vertex
165357003,21,devshgraphicsprogramming,2018-02-01T13:37:50Z,"ix out of range, no attribute specified/bound or given attribute's format conversion to vectorSIMDf unsupported"
165357123,21,devshgraphicsprogramming,2018-02-01T13:38:23Z,"vertex not index, the index is ""of the vertex"""
165357249,21,devshgraphicsprogramming,2018-02-01T13:39:00Z,"Big note for this function, NOT ALL FORMAT CONVERSIONS FROM RGBA32F/XYZW32F (vectorSIMDf) ARE IMPLEMENTED!"
165357426,21,devshgraphicsprogramming,2018-02-01T13:39:46Z,"Should add a comment with a link to https://www.khronos.org/opengl/wiki/Vertex_Specification
telling people to read that to understand the key terms like attribute IDs, indices, attribute formats etc."
165407500,21,Crisspl,2018-02-01T16:20:04Z,"About variable size blob: I'm allocating memory on stack for it (see for example CBAWMeshWriter.cpp:54), it's your idea actually. So now `VariableSizeBlob` would allocate mem on heap for us... At most it could make sense for `CFinalBoneHierarchy` and corresponding blob struct right now"
165411796,21,devshgraphicsprogramming,2018-02-01T16:33:01Z,"Well if we know the blob to be less than 16kb then lets placement new it on the stack, but for things which can be much bigger like the CFinalBoneHierarchy (as it contains all the animations), we definitely need the heap.

So that VariableSizeBlob::caclBlobSizeForObj static function could help us differentiate between the two cases.

We dont have to call ""allocMemForBlob""

It was more of an idea to have a static create function which requires you to say how much memory you reserved or allocated and assert if the constructor would overrun it, and that needs some sort of mechanism to allow us to create the object via a placement new but having the constructor declared as private."
165441972,21,Crisspl,2018-02-01T18:13:59Z,">Maybe have a constructor/static create function directly from the object being saved
  
We already talked about this and decided to load blob buffer with variable-size data outside ctor since it has to rely on the fact that the memory actually is allocated (and check it from inside ctor) and it's kinda dangerous"
165442274,21,Crisspl,2018-02-01T18:15:06Z,">Maybe have a constructor/static create function directly from the object being saved
  
We already talked about this and decided to load blob buffer with variable-size data outside ctor since it has to rely on the fact that the memory actually is allocated (and check it from inside ctor) and it's kinda dangerous"
165442296,21,Crisspl,2018-02-01T18:15:11Z,">Maybe have a constructor/static create function directly from the object being saved
  
We already talked about this and decided to load blob buffer with variable-size data outside ctor since it has to rely on the fact that the memory actually is allocated (and check it from inside ctor) and it's kinda dangerous"
165464225,21,devshgraphicsprogramming,2018-02-01T19:34:30Z,"True, thats why I'm pondering making the constructor private and instead making a static ""createOverMemory"" function which will call the constructor through placement new in private and check the memory size provided...

It would have to be a static function and a private constructor as constructors are not allowed to not create the object or to return anything else than the object."
165465945,21,devshgraphicsprogramming,2018-02-01T19:40:34Z,"Sorry I didn't explain this before, but we never put .cpp files outside source/Irrlicht"
165466217,21,devshgraphicsprogramming,2018-02-01T19:41:26Z,does it not compile if you leave it unspecialized?
165466443,21,devshgraphicsprogramming,2018-02-01T19:42:11Z,does it not compile if you leave it unspecialized?
165466513,21,devshgraphicsprogramming,2018-02-01T19:42:24Z,does it not compile if you leave it unspecialized?
165467561,21,Crisspl,2018-02-01T19:45:57Z,"O, yea, it shoukld be obvious for me, my bad"
165467611,21,Crisspl,2018-02-01T19:46:10Z,i'll put it back
165467689,21,devshgraphicsprogramming,2018-02-01T19:46:27Z,"""curiously recurring template"" will allow us to declare static calcBlobSizeForObj and allocMemForBlob functions which can be ""overriden"" like virtual functions "
165467889,21,Crisspl,2018-02-01T19:47:08Z,I don't understand how I could leave it unspecialized
165468420,21,devshgraphicsprogramming,2018-02-01T19:48:53Z,"

True, thats why I'm pondering making the constructor private and instead making a static ""createOverMemory"" function which will call the constructor through placement new in private and check the memory size provided...

It would have to be a static function and a private constructor as constructors are not allowed to not create the object or to return anything else than the object.
"
165469242,21,devshgraphicsprogramming,2018-02-01T19:51:59Z,still forgot to change index's value to vertex's value
165469628,21,devshgraphicsprogramming,2018-02-01T19:53:25Z,maybe make it a function of the BlobHeaderV* ?
165469720,21,Crisspl,2018-02-01T19:53:43Z,yea maye.. But what's the point of doing so?
165469859,21,devshgraphicsprogramming,2018-02-01T19:54:13Z,"""curiously recurring template"" will allow us to declare static calcBlobSizeForObj and allocMemForBlob functions which can be ""overriden"" like virtual functions"
165469922,21,Crisspl,2018-02-01T19:54:24Z,nice :+1: 
165478330,21,devshgraphicsprogramming,2018-02-01T20:28:20Z,not having to remember to specialize the allocMemForBlob function every time :)
165479624,21,devshgraphicsprogramming,2018-02-01T20:33:52Z,"I'm going to be a dick and change this again, could we have:
`uint8_t compressionType;
uint8_t dummy[3];
uint32_t blobType; //go to the wiki page for BlobType Registry`

https://github.com/buildaworldnet/IrrlichtBAW/wiki/BlobType-Registry

Order matters, I want to keep everything 64bit and type-aligned"
165490417,21,Crisspl,2018-02-01T21:18:42Z,"The function is not specialized. It's not even a template, only struct is a template. See how it's used [in mesh writer](https://github.com/buildaworldnet/IrrlichtBAW/pull/21/files#diff-69beb7cce857086a5dc3a282bae8004aR65) (CBAWMeshWriter.cpp:65)"
165493341,21,devshgraphicsprogramming,2018-02-01T21:29:52Z,Sorry I meant declared and defined for every struct.
165727688,21,Crisspl,2018-02-02T18:51:25Z,What about this?
165728247,21,Crisspl,2018-02-02T18:53:26Z,"What about this? Don't really know why anything would be needed, but .obj loader does something..."
165778520,21,Crisspl,2018-02-02T22:35:34Z,"Nope, `dynamic_cast` is the only one really safe here. `reinterpret_cast` just gave me crash in analogic situation (base class can have a bit different offset and only `dynamic_cast` cares about that)."
165814548,21,devshgraphicsprogramming,2018-02-03T13:26:51Z,"ICPUSkinnedMesh is a direct inheritor of ICPUMesh, so reinterpret_cast should be safe.
There's no multiple inheritance etc. like for IVirtualTextures

if you were casting from IReferenceCounted, then you'd have a problem."
165814597,21,devshgraphicsprogramming,2018-02-03T13:28:34Z,"I'll test next week, and see"
165814853,21,devshgraphicsprogramming,2018-02-03T13:39:28Z,"I'll test next week, and see"
165815400,21,devshgraphicsprogramming,2018-02-03T14:06:20Z,"I don't like friends.
Because I don't have any..."
165815995,21,devshgraphicsprogramming,2018-02-03T14:28:27Z,"I don't like this.

The blobs should create a CFinalBoneHierarchy, not the CFBH from Blob.

The reason is that imagine having 4 versions of the blob and also updating the CFBH class.

If you want the loader to be backward compatible with all Blob versions 1 through 4, then you will have 4 constructors polluting this file which should only be about getting interpolated keyframes for an armature.

Instead have a constructor:
`explicit CFinalBoneHierarchy(BoneReferenceData* boneFlatArrayBegin, BoneReferenceData* boneFlatArrayEnd, ..., etc.)`

Then when we move to C++11 we can use move semantics to move the bone name strings."
165816035,21,devshgraphicsprogramming,2018-02-03T14:29:34Z,any comment?
165816360,21,devshgraphicsprogramming,2018-02-03T14:42:01Z,"No need to read the entire file at once.

You dont check the file header, and that the file has a minimal length to support at least 1 blob it needs to be done in order not to load some bogus file and crash.

First only read the file header and check that it even matches, and determine the file version.... then dispatch to the correct loadHeadersVN function.

"
165816387,21,devshgraphicsprogramming,2018-02-03T14:43:14Z,again this needs to be checked if it not past the end of the file.
165816445,21,Crisspl,2018-02-03T14:46:23Z,"Uh, sorry, must have missed this one. I'll talk to you about this and other issues in few days. As for now I don;t really see the need since `exportAsBlob` functions in mesh writer would do exactly same thing."
165816573,21,devshgraphicsprogramming,2018-02-03T14:51:06Z,"Imagine the BAW file has a huge mesh inside it with auxillary data, or is an archive, it could be couple gigabytes!

We only want to read all the BlobHeaders into RAM, at once and linearly.
Then we can have an std::map<uint64_t,std::pair<BlobHeaderV1*,uint64_t> > which means std::map<handle,std::pair<BlobHeaderV1*,absPosInFile> >

The std::pair could be the SBlobData struct for all I care"
165816610,21,devshgraphicsprogramming,2018-02-03T14:52:37Z,"If you already have a `createdObjects` member in the context, then there is no need for a wasCreated flag.
You can just use `std::map::find` to try-get the created object.

Or if you are scared of using two logN operations, then instead of `bool wasCreated` have a `void* createdObj` and ditch the `createdObjects' member - which now after I wrote this, seems a better idea."
165816644,21,Crisspl,2018-02-03T14:54:01Z,Thanks to the flag I don't need to look for an object in map to determine if it was loaded or not
165816683,21,devshgraphicsprogramming,2018-02-03T14:56:22Z,"Look at my SBlobData comment, you can ditch this in favor of an `IReferenceCounted* createdObj` in SBlobData."
165816709,21,devshgraphicsprogramming,2018-02-03T14:57:43Z,maybe call it `tryMake` or `get`
165816737,21,devshgraphicsprogramming,2018-02-03T14:58:56Z,"If you ditch `std::map<uint64_t, IReferenceCounted*> createdObjects` then you can most probably ditch this function too (or not, but it will just be almost a macro for a 1 line op)."
165816814,21,devshgraphicsprogramming,2018-02-03T15:02:04Z,"Blobs are really nice for serialization to a binary struct, which could be used with other data sinks such as other file formats, Networks, MPI, etc."
165816904,21,devshgraphicsprogramming,2018-02-03T15:06:49Z,"yes, and if the createdObj pointer is not NULL then it was definitely loaded.

You could also set it to 0xdeadbeefDEADBEEFull for things that failed to load."
165816914,21,devshgraphicsprogramming,2018-02-03T15:07:25Z,The whole point of my suggestions is that there is no 2nd map
165816968,21,devshgraphicsprogramming,2018-02-03T15:10:13Z,"Just load all headers at the start, then find your mesh to load (we may support pulling named meshes or textures out of big archives)."
165817106,21,devshgraphicsprogramming,2018-02-03T15:19:13Z,Don't seek to 0 after reading header
165817118,21,devshgraphicsprogramming,2018-02-03T15:19:45Z,subtract already read amount.
165817381,21,devshgraphicsprogramming,2018-02-03T15:33:03Z,"create a new core::ICPUBuffer(size) without a pointer and it will malloc the storage for you.

then do ctx.file->read() directly into the buf->getData()"
165817502,21,devshgraphicsprogramming,2018-02-03T15:38:35Z,this should really disappear from every `CBAWMeshFileLoader::make` and be moved into a loadBlob function or something else appropriately named
165817650,21,devshgraphicsprogramming,2018-02-03T15:46:29Z,"we need a more general loadBlob function to do the alreadyCreated/Loaded check, checksum check, calling make<> and tagging as loaded after load.

Due to the fact that we will have multiple versions of Blobs for IMesh etc. as we evolve, as well as the ability to serialize in/out of blobs that come from other sources such as Network etc.

I think the make function should be a function of the Blob itself."
165818020,21,devshgraphicsprogramming,2018-02-03T16:01:25Z,"The other argument for making this a function of the Blob, is that if someone wants to extend the loading system with their own blob types, then they won't need to touch CBAWMeshFileLoader at all or any other loading and saving systems"
165818186,21,devshgraphicsprogramming,2018-02-03T16:09:17Z,"And another argument, killer argument... is that you do 'make<TypeOfObjectToLoad>' which will fail the moment we support loading two Blob versions for the same object"
165819910,21,devshgraphicsprogramming,2018-02-03T17:23:08Z,'fixed'
165820304,21,devshgraphicsprogramming,2018-02-03T17:39:11Z,'fixed'
165820310,21,devshgraphicsprogramming,2018-02-03T17:39:26Z,'fixed'
165821129,21,devshgraphicsprogramming,2018-02-03T18:12:07Z,"see my latest commit
"
166878485,21,devshgraphicsprogramming,2018-02-08T09:45:24Z,"can we make this a template function, so that the blob is filled inside a Blob member function?
`template <typename B>
B* serializeToBlob(void* _stackPtr=NULL, const size_t& _size=0)
{
    return VariableSizeBlob<B,CFinalBoneHierarchy>::createAndTryOnStack(this,_stackPtr,_size);
}`

And then make the 'VariableSizeBlob::createAndTryOnStack' function actually use placement new and the proper private constructor (which fills all data) to have a unified API"
166878990,21,devshgraphicsprogramming,2018-02-08T09:47:28Z,if createdObj==0xdeadbeefdeadbeefu then loaded but not usable
166879638,21,devshgraphicsprogramming,2018-02-08T09:50:09Z,You can't just delete a void*
504880062,549,devshgraphicsprogramming,2020-10-14T18:18:55Z,"not sure I want these as public.

We should have a `setMutability`"
504883220,549,devshgraphicsprogramming,2020-10-14T18:24:02Z,"doesn't matter what you do here because of #451 which means that it should be the `SAssetBundle` that holds the metadata, not the `IAsset` (a future TODO along with #22 #23 which are still open because of a rare scheduling loophole)"
504884014,549,devshgraphicsprogramming,2020-10-14T18:25:17Z,forgot something?
504885039,549,devshgraphicsprogramming,2020-10-14T18:27:05Z,does the cpu2gpu need non-`const` `SDescriptorInfo` ?
504885572,549,devshgraphicsprogramming,2020-10-14T18:27:48Z,convertToDummyObject above this line does not check for mutability
504887147,549,Crisspl,2020-10-14T18:30:25Z,need non-const descriptors
504887821,549,Crisspl,2020-10-14T18:31:26Z,"because it doesnt have to, it would change nothing"
504888294,549,devshgraphicsprogramming,2020-10-14T18:32:10Z,"if it can be const, make it const"
504889041,549,devshgraphicsprogramming,2020-10-14T18:33:24Z,but why?
504892328,549,devshgraphicsprogramming,2020-10-14T18:39:03Z,"why are you changing our default caching to ""always immutable"" ?"
504923509,549,devshgraphicsprogramming,2020-10-14T19:34:18Z,default behaviour should be no change (assets go in as MUTABLE)
505455524,549,Crisspl,2020-10-15T11:06:57Z,setting asset's mutability is exclusive for asset manager and it's already a friend of IAsset
506334774,549,devshgraphicsprogramming,2020-10-16T11:50:23Z,"ah ok, but still the public functions here are a bit ugly, they should be protected."
506336141,549,devshgraphicsprogramming,2020-10-16T11:52:18Z,would be useful if we called it `swapContents` and had the two assets swap stuff around
506337074,549,devshgraphicsprogramming,2020-10-16T11:53:31Z,"this is now mutable by default, yes?"
506351004,549,devshgraphicsprogramming,2020-10-16T12:11:33Z,can we even restore this?
506354860,549,devshgraphicsprogramming,2020-10-16T12:17:06Z,maybe fold this check into `canBeConvertedToDummy`
506361102,549,devshgraphicsprogramming,2020-10-16T12:25:23Z,"btw, `convertToDummyObject_common` will set `isDummyObjectForCacheAliasing = true;`"
506362806,549,devshgraphicsprogramming,2020-10-16T12:27:36Z,"as I wrote, you could fold `usADummyObjectForCache` into `canBeConvertedToDummy`"
506772163,549,Crisspl,2020-10-17T00:34:04Z,hm.. good point. This asset is kinda special because the idea was GPU object->asset->potentially save on disk
506772898,549,Crisspl,2020-10-17T00:39:47Z,"public `IAssetManager::insertIntoCache` sets asset's mutability as cpu persistent (so that everything that is added to cache explicitely by user is cpu persistent), but `IAssetLoaderOverride` sets mutability as mutable (everything loaded by `getAsset` and subassets that are added to cache during the loading process are mutable)
All the builtins are added to cache as immutable "
506774185,549,Crisspl,2020-10-17T00:50:23Z,shouldnt user be able to query asset's mutability level?
507619866,549,devshgraphicsprogramming,2020-10-19T09:54:59Z,maybe `getMutability()<EM_CPU_PERSISTENT`
507620023,549,devshgraphicsprogramming,2020-10-19T09:55:13Z,instead of bitfield
507633562,549,devshgraphicsprogramming,2020-10-19T10:18:08Z,"yes, but we shouldn't have multiple functions to query, just `getMutability` and the enum

obvs `canBeConvertedToDummy` can stay, cause it does more than checking an enum"
507634274,549,devshgraphicsprogramming,2020-10-19T10:19:22Z,"we'd have to check a few things before restoring, then I guess?"
507636432,549,devshgraphicsprogramming,2020-10-19T10:23:05Z,ok I guess it kind-of makes sense.
507636908,549,devshgraphicsprogramming,2020-10-19T10:23:52Z,not entirely convinced about the asset manager default behaviour.
507653852,549,devshgraphicsprogramming,2020-10-19T10:54:06Z,needs default argument for `_levelsBelow` should `~0u`
507655849,549,devshgraphicsprogramming,2020-10-19T10:57:38Z,"this should not be here, just because asset is not mutable or is not a dummy object (cannot be restored, doesn't matter what `_other` is) does not meen the dependencies couldn't be restored.

Same if `_other` is a dummy object, the dependants of `this` which are mutable and dummy could be restored from dependants of `_other` which are mutable and non-dummy.

**However if `_other` does not ""match""/""is not compatible"" with `this` (i.e. different layout contents) then obviously there's no point restoring the dependants.** 

P.S. when restoring you should check that `_other` is mutable."
507659230,549,devshgraphicsprogramming,2020-10-19T11:04:00Z,"you should probably split this into `restoreFromDummy_this` and `restoreFromDummy_recurse`, to solve comment
https://github.com/buildaworldnet/IrrlichtBAW/pull/549/commits/750f5f9dfa92c3d1e05482fca38a5723768a4682#r507655849

you can only restore `this` from `_other` if:
1. `_other` matches `this`
2. `this` is dummy
3. `this` is mutable
4. `_other` is not a dummy
5. `_other` is mutable

You can only recurse if **`_other` ""matches"" `_this`, no other conditions necessary**"
507660331,549,devshgraphicsprogramming,2020-10-19T11:06:05Z,you're forgetting the size.
507662835,549,devshgraphicsprogramming,2020-10-19T11:10:47Z,"ah ok, size is supposed to be identical"
507664092,549,devshgraphicsprogramming,2020-10-19T11:13:08Z,"the ""does `this` match `_other`""restoration check needs to be fully recursive, so need to check whether layouts match (etc.) before trying to restore top level objects"
507666970,549,devshgraphicsprogramming,2020-10-19T11:18:47Z,kinda paired up with https://github.com/buildaworldnet/IrrlichtBAW/pull/549#discussion_r507659230
507668149,549,devshgraphicsprogramming,2020-10-19T11:21:00Z,"if we'll already check if we can restore entire dependency tree, then this should call `restoreFromDummy_impl` directly instead of `restoreFromDummy` for dependencies

Tied up with the same thread https://github.com/buildaworldnet/IrrlichtBAW/pull/549#discussion_r507664092"
507668749,549,devshgraphicsprogramming,2020-10-19T11:22:12Z,"pointer values of `m_samplers` should not be swapped, only contents (because it would mess up CPU 2 GPU caches)

so recursively restore."
507672127,549,devshgraphicsprogramming,2020-10-19T11:28:33Z,"there's also a buffer to consider, not only regions"
507673414,549,devshgraphicsprogramming,2020-10-19T11:30:56Z,need to think about whether to require this.
507673633,549,devshgraphicsprogramming,2020-10-19T11:31:20Z,should we require this?
507688875,549,devshgraphicsprogramming,2020-10-19T11:59:43Z,"this function is dangerous, it takes no limits/constraints on asset type to be restored (you will usually know the type of asset you're after).

The amount of duplication should be not top level, but top level + `_levelsBelow`

Also handling of mixed dummy and non dummy assets in a bundle is ""meh"".

Also no check that length of new bundle == old bundle"
508841453,549,devshgraphicsprogramming,2020-10-20T21:10:04Z,needs a call to `canBeRestoredFrom_recurseDAG` at the end
508841564,549,devshgraphicsprogramming,2020-10-20T21:10:15Z,make it protected
508845955,549,devshgraphicsprogramming,2020-10-20T21:18:42Z,we probably shouldn't require this.
508847179,549,devshgraphicsprogramming,2020-10-20T21:21:03Z,"you should recursively restore, dont swap what are essentially pointer lists!"
508847333,549,devshgraphicsprogramming,2020-10-20T21:21:22Z,see https://github.com/buildaworldnet/IrrlichtBAW/pull/549/files/e94f07ab352808077b42c37c490b5c93986df2e5..2ddd5e994ba249c82b43de1b43625f1ff57465a3#r508847179
508847758,549,devshgraphicsprogramming,2020-10-20T21:22:13Z,but the `restoreFromDummy` should not call `canBeRestoredFrom` but `canBeRestoredFrom_this_node` or something like that
508856819,549,devshgraphicsprogramming,2020-10-20T21:40:14Z,I dont get this if statement
508859771,549,devshgraphicsprogramming,2020-10-20T21:46:31Z,I dont get this if statement
508860143,549,devshgraphicsprogramming,2020-10-20T21:47:16Z,"this is bad, its okay to have no push constant ranges, this will fail if either is 0"
508860255,549,devshgraphicsprogramming,2020-10-20T21:47:30Z,I dont get this if statement
509133928,549,devshgraphicsprogramming,2020-10-21T09:35:14Z,I dont get this if statement
509134308,549,devshgraphicsprogramming,2020-10-21T09:35:50Z,will fail with null index buffers
509134468,549,devshgraphicsprogramming,2020-10-21T09:36:06Z,same bug as all your optional pointer comparisons
509134629,549,devshgraphicsprogramming,2020-10-21T09:36:21Z,pointer mess again
509134768,549,devshgraphicsprogramming,2020-10-21T09:36:36Z,pipeline is not optional IIRC
509137558,549,devshgraphicsprogramming,2020-10-21T09:40:45Z,leave a comment pointing to the github issue.
509138846,549,devshgraphicsprogramming,2020-10-21T09:42:41Z,ok `isMutable` might actually be useful
509357462,549,Crisspl,2020-10-21T14:53:05Z,"it is, it's not used at all right now in a way other than returning pipeline from mesh loader"
509469808,549,devshgraphicsprogramming,2020-10-21T17:22:27Z,"you cant draw a meshbuffer without a pipeline, you dont even know what primitive type it is"
509472682,549,Crisspl,2020-10-21T17:25:19Z,i mean `video` namespace ignores it
509479020,549,devshgraphicsprogramming,2020-10-21T17:30:38Z,"!?

AFAIK its an error to have a ICPUMeshBuffer with a nullptr ICPUPipeline"
509482370,549,Crisspl,2020-10-21T17:33:16Z,cant because an asset has to be able to call it on its dependencies
509483202,549,Crisspl,2020-10-21T17:34:03Z,"> needs a call to canBeRestoredFrom_recurseDAG at the end

what, no, why"
509487996,549,Crisspl,2020-10-21T17:39:02Z,"what i've noted from our conversation:
* `restoreFromDummy` first calls `canBeRestoredFrom_recurseDAG` and early exits if false, otherwise calls `restoreFromDummy_impl`
* `restoreFromDummy_impl` calls `canBeRestoredFrom` and restores if true, but regardless of result calls `restoreFromDummy` on dependencies"
509673179,549,devshgraphicsprogramming,2020-10-21T20:35:50Z,but asset and its dependencies both inherit from `IAsset` ?
509714274,549,devshgraphicsprogramming,2020-10-21T21:28:13Z,missed this one
509719838,549,devshgraphicsprogramming,2020-10-21T21:35:49Z,"What you're missing that is the public `canBeRestoredFrom` checks for whether mutability and dummy state of self and this is ok (what I suggest calling `canBeRestoredFrom_this_node`, which would be equivalent to your current 4 if-statements) AND THEN the ""matching"" of the DAG

because of this, the `restoreFromDummy_impl` should not call this function to prevent the resotration of current asset in the DAG, but a protected `canBeRestoredFrom_this_node`.

`restoreFromDummy` shouldn't call the public function either but only `canBeRestoredFrom_recurseDAG` to early out."
510772185,549,devshgraphicsprogramming,2020-10-23T09:56:00Z,actually https://github.com/Devsh-Graphics-Programming/Nabla/issues/14
510960117,549,Crisspl,2020-10-23T15:22:52Z,"soo
> needs a call to canBeRestoredFrom_recurseDAG at the end

is not the case
Your description above perfectly matches what actually is now"
510962339,549,Crisspl,2020-10-23T15:25:55Z,"> this function is dangerous, it takes no limits/constraints on asset type to be restored

asset bundle can hold only one type of assets if thats what you mean"
510962646,549,Crisspl,2020-10-23T15:26:16Z,doesnt matter
510975776,549,devshgraphicsprogramming,2020-10-23T15:44:58Z,"ok there's a simple workaround for that, move `canBeRestoredFrom_recurseDAG` to protected and also provide this as a workaround:
```
inline bool canBeRestoredFrom_recurseDAG_call(const IAsset* _other) const
{
    return canBeRestoredFrom_recurseDAG(_other);
}
```
then because `canBeRestoredFrom_recurseDAG_call` is not virtual derived classes should be able to call it, correcT?"
511105825,549,devshgraphicsprogramming,2020-10-23T19:27:31Z,what happened here?
511106165,549,devshgraphicsprogramming,2020-10-23T19:27:54Z,just assert ;)
511106514,549,devshgraphicsprogramming,2020-10-23T19:28:19Z,why public?
511107165,549,devshgraphicsprogramming,2020-10-23T19:29:07Z,why public?
511111649,549,devshgraphicsprogramming,2020-10-23T19:34:29Z,why
511111773,549,devshgraphicsprogramming,2020-10-23T19:34:49Z,why
511112928,549,devshgraphicsprogramming,2020-10-23T19:37:18Z,I need an explainer about this
511114510,549,devshgraphicsprogramming,2020-10-23T19:39:15Z,why?
511212462,549,Crisspl,2020-10-24T00:31:56Z,ah i forgot to re-enable this
511940124,549,Crisspl,2020-10-26T12:59:56Z,"> then because canBeRestoredFrom_recurseDAG_call is not virtual derived classes should be able to call it, correcT?

no, why?
hm, i think workaround would be put this into IAsset
```
inline static bool IAsset::canBeRestoredFrom_recurseDAG_call(const IAsset* _this_child, const IAsset* _other_child)
{
    return _this_child->canBeRestoredFrom_recurseDAG(_other_child);
}
```
and then call in derived classes, i.e. in case of DS:
`canBeRestoredFrom_recurseDAG_call(getLayout(), other->getLayout())`

same for `restoreFromDummy_impl`"
511942050,549,Crisspl,2020-10-26T13:03:17Z,im doing this
512184389,549,devshgraphicsprogramming,2020-10-26T18:36:10Z,TODO
512187433,549,devshgraphicsprogramming,2020-10-26T18:40:51Z,"no its not, there's one thing missing

The fucntion here, `canBeRestoredFrom`, should do the 4 if statements plus a call to `canBeRestoredFrom_recurseDAG`"
512188381,549,devshgraphicsprogramming,2020-10-26T18:42:18Z,leave a comment
512189395,549,devshgraphicsprogramming,2020-10-26T18:44:05Z,"hmm ok can keep as is, just document want Criss wrote on the wiki @AnastaZIuk "
512202255,549,devshgraphicsprogramming,2020-10-26T19:06:14Z,ugh I said it wrong again.
512207006,549,devshgraphicsprogramming,2020-10-26T19:14:47Z,should take a `uint32_t _levelsBelow` parameter
512208752,549,devshgraphicsprogramming,2020-10-26T19:18:02Z,ugh this is so coupled.
512212611,549,devshgraphicsprogramming,2020-10-26T19:24:59Z,"oh, we already discussed it"
512213380,549,devshgraphicsprogramming,2020-10-26T19:26:17Z,just remind me of the corner case that would break a `_levelsBelow` parameter version?
512218571,549,devshgraphicsprogramming,2020-10-26T19:35:28Z,but I'd instead add a `mutability` argument to the function with ` IAsset::EM_CPU_PERSISTENT` as the default parameter so user doesn't have to do the long form of first inserting an asset and then changing its mutability to what he actually wants
512221452,549,devshgraphicsprogramming,2020-10-26T19:40:40Z,"no that's not what I meant, I mean that you pass a bundle of some type, then use the bundle's cache key value to try and get a fresh load (badly because only top level will be duplicated and for restore you need the full DAG).

Then you dont limit the asset types you will retrieve/load from `getAssetInHierarchy` so the bundle you might get back could be a different length and even type.

Furthermore you `assert` and not fail gracefully if you dont get same size bundle.

Then you restore without extra checks.

Its basically a surefire way to program termination either via `assert` or trying to restore assets from different types.

Basically the usefulness of this method approaches 0"
512563772,549,Crisspl,2020-10-27T10:12:32Z,"anything, you want to restore pipeline to the level of pipeline layout so you check only those levels but it might turn out that pipelines are incompatible on some lower level (ds layouts for example)"
512654759,549,devshgraphicsprogramming,2020-10-27T12:34:48Z,"ok, thx"
512706631,549,Crisspl,2020-10-27T13:49:06Z,never heard of this really
472049195,487,devshgraphicsprogramming,2020-08-18T09:37:18Z,"this works wrong.

If the cap would be overflown, we always need to remove the oldest value.

See here
https://www.geeksforgeeks.org/lru-cache-implementation/"
472050847,487,devshgraphicsprogramming,2020-08-18T09:40:12Z,timestamp can be made redundant (its implicit)
472063334,487,devshgraphicsprogramming,2020-08-18T10:01:59Z,reserve memory in the `map`
472068256,487,devshgraphicsprogramming,2020-08-18T10:10:52Z,"use a `list<pair<Key,Value>>`, I use it like that in the `DeferredEventHandler` to implement a queue (although I only need forward linked list there).

However you need to create your own implementation of a Doubly Linked List using a pool address allocator such that every node is not dynamically allocated from the heap (its possible that its just enough to implement a custom allocator on top of `PoolAddressAllocator` and pass that in as a template argument for `list`, but only if `list` calls the allocator to allocate one node at a time).

then `unordered_map<Key,stored_keys::iterator,MapHash,MapEquals>` to be the ""skip list""

First you need a `common_peek`:
1) look up the hashmap with key
2) use hashmap's iterator (pointer) to the linked list node

When you `peek`:
1) call `common_peek` to find yout node and return node's value

When you `get`:
1) call `common_peek` to find your node
2) move the node from its current position in the list to the back
3) return node's value

When you `insert` (you assume that user cannot call `insert` twice on the same key):
1) if cache cap has been reached, you call `common_erase` on the front linked list node
2) construct a linked list node out of `Key,Value` and add it to the back of the list
3) record the iterator (pointer) to that node into the `unordered_map`

When you `erase`:
1) get the node by calling `common_peek`
2) call `common_erase` on the found node

In `common_erase`:
1) remove node from the linked list
2) look up the node's ""skip link"" in the unordered map and remove it

"
472429818,487,Hazardu,2020-08-18T19:28:03Z,"Since timestamp is redundant, what is the difference between peek and get?"
472487021,487,devshgraphicsprogramming,2020-08-18T20:54:04Z,explained on discord
480356946,487,devshgraphicsprogramming,2020-08-31T19:39:51Z,"add a pointer/iterator type, so you're not always forced to use `struct Snode*` as the pointer type"
480357640,487,devshgraphicsprogramming,2020-08-31T19:41:15Z,"correct layout is
```cpp
Value data;
iterator_type prev,next;
```

because `Value` could be a type with complex alignment requirements (i.e. SSE/AVX data structure aligned to 16 or 32 bytes or more) and it would create padding inbetween your members "
480357803,487,devshgraphicsprogramming,2020-08-31T19:41:35Z,did you pull this code off the internet or something?
480358727,487,devshgraphicsprogramming,2020-08-31T19:43:32Z,you always want to place the fattest-most-aligned member first... biggest to smallest.
480358796,487,Hazardu,2020-08-31T19:43:40Z,no
480359038,487,devshgraphicsprogramming,2020-08-31T19:44:12Z,"make value a `const Value&`
then add a move constructor

as well as copy assignment and move assignment."
480359721,487,devshgraphicsprogramming,2020-08-31T19:45:33Z,"if you take out all the `sizeof(Snode)` you will get good alignment, and sequential addresses."
480364126,487,devshgraphicsprogramming,2020-08-31T19:54:33Z,"the memory you give to an address allocator is not for storing data.. its for storing internal state, familiarize yourself with `PoolAddressAllocator::reserved_size`."
480366347,487,devshgraphicsprogramming,2020-08-31T19:59:09Z,"you need to explictly call the destructor on the node you're removing, `Value` may be a non-trivial type"
480367234,487,devshgraphicsprogramming,2020-08-31T20:01:01Z,"`alloc_addr` gets you an offset into a data store you've created and maintain by yourself.... not a pointer to a data store

correct solution would be
```cpp
uint32_t addr = alloc.alloc_addr(1u,1u);
Snode* node = new(myDataStore+addr) Snode(val);
```"
480367640,487,devshgraphicsprogramming,2020-08-31T20:01:47Z,call it a `FixedCapacityLinkedList` since it cant be grown over its initial capacity.
480368107,487,devshgraphicsprogramming,2020-08-31T20:02:45Z,"I'd define this struct outside in its own header, might be useful on its own"
483077248,487,devshgraphicsprogramming,2020-09-03T15:43:55Z,make it a `uint32_t`
483135302,487,Hazardu,2020-09-03T17:16:24Z,Change the `typedef` to `uint32_t` and cast to `Snode< >` in every function where its used? Isn't that a bit lengthy way to do this?
483256110,487,devshgraphicsprogramming,2020-09-03T21:10:43Z,no use the `uint32_t` to index into an array of `SNode` owned by the `CFixedCapacityDoublyLinkedList`.
483931564,487,Hazardu,2020-09-05T09:20:56Z,"I've had quite a bit of trouble find a way to do it in a performance friendly way, checking online yields only a result similar to my own conclusion. Indexing a linked list will slow things down. Inserting and removing will require a lot more operations, and the action of removing last element and inserting a new one will become `O(2n)`"
483932217,487,Hazardu,2020-09-05T09:27:36Z,"> the action of removing last element and inserting a new one will become O(2n)

actually, just O(n), but still bad 💯 "
484560648,487,devshgraphicsprogramming,2020-09-07T20:26:02Z,these I want to be addresses not pointers
484560688,487,devshgraphicsprogramming,2020-09-07T20:26:19Z,"same here, address not pointer"
484560840,487,devshgraphicsprogramming,2020-09-07T20:27:18Z,instead of `nullptr` define an `invalid_iterator` (which in this case would be the pool allocator's invalid address)
484561132,487,devshgraphicsprogramming,2020-09-07T20:29:19Z,"also `p_end` doesn't and shouldn't exist, you should keep `p_back` which is your `p_end->prev`"
484561347,487,devshgraphicsprogramming,2020-09-07T20:30:38Z,"usually in STL compatible containers ""end"" means one past the container, where as ""back"" is the true last element.. see std::vector and std::array"
484561499,487,devshgraphicsprogramming,2020-09-07T20:31:39Z,"no that's still not how it works!

reserved space is for the ALLOCATOR INTERNAL STATE.

You need to create a separate array of `SNode[cap]`"
484561642,487,devshgraphicsprogramming,2020-09-07T20:32:37Z,"it seems like your `p_end` functions like a `p_back`, if so, rename it."
484561813,487,devshgraphicsprogramming,2020-09-07T20:33:43Z,nope.. `node->~SNode();` delete is a call to system's `free()`
484561976,487,devshgraphicsprogramming,2020-09-07T20:34:47Z,what about the `node->next->prev` and `node->prev->next` ? you break the chain at `node` !
484563227,487,devshgraphicsprogramming,2020-09-07T20:42:31Z,"first allocate the reserved space,
```cpp
reservedSpace(_IRR_ALIGNED_MALLOC(PoolAddressAllocator<uint32_t>::reserved_size(1u,MAX_NUMBER_OF_NODES_IN_YOUR_LINKED_LIST,1u),alignof(void*)))
```"
484563294,487,devshgraphicsprogramming,2020-09-07T20:42:54Z,"first allocate the reserved space,
```cpp
reservedSpace(_IRR_ALIGNED_MALLOC(PoolAddressAllocator<uint32_t>::reserved_size(1u,MAX_NUMBER_OF_NODES_IN_YOUR_LINKED_LIST,1u),alignof(void*)))
```"
484563371,487,devshgraphicsprogramming,2020-09-07T20:43:26Z,"first allocate the reserved space,
```cpp
reservedSpace(_IRR_ALIGNED_MALLOC(PoolAddressAllocator<uint32_t>::reserved_size(1u,MAX_NUMBER_OF_NODES_IN_YOUR_LINKED_LIST,1u),alignof(void*)))
```"
484563527,487,devshgraphicsprogramming,2020-09-07T20:44:19Z,"then you can construct the allocator
```cpp
alloc(reservedSpace, 0u,0u,1u, MAX_NUMBER_OF_NODES_IN_YOUR_LINKED_LIST, 1u)
```

The `reservedSpace` is REQUIRED TO BE AVIALABLE AT ALOCATOR CONSTRUCTION TIME BECAUSE INTERNAL STATE GETS SET UP IMMEDIATELY!

P.S. you've `malloc`ed the reserved space, but where is the `free` (or better `_IRR_ALIGNED_FREE` ) ?"
484563867,487,devshgraphicsprogramming,2020-09-07T20:46:32Z,the actualy storage for the `SNode`s is yet another array you have to create for yourself.
486173945,487,devshgraphicsprogramming,2020-09-10T08:51:19Z,init the `prev` and `next` to invalid address
486174393,487,devshgraphicsprogramming,2020-09-10T08:51:59Z,IRR_STATIC_INLINE_CONSTEXPR
486175977,487,devshgraphicsprogramming,2020-09-10T08:54:39Z,what is `m_end` ?
486176146,487,devshgraphicsprogramming,2020-09-10T08:54:53Z,FACEPALM
486176571,487,devshgraphicsprogramming,2020-09-10T08:55:33Z,make this an r-value reference
486176673,487,devshgraphicsprogramming,2020-09-10T08:55:43Z,std::move the val
486177066,487,devshgraphicsprogramming,2020-09-10T08:56:29Z,this line shouldn't be needed.
486177332,487,devshgraphicsprogramming,2020-09-10T08:56:55Z,`m_begin = addr;`
486178064,487,devshgraphicsprogramming,2020-09-10T08:58:07Z,"also you cant just use `m_end->` and `m_begin->` , you'd need to implement a tiny allocator wrapper struct over the `uint32_t` to be able to do that.... or just use `m_array[m_end].` instead."
486178421,487,devshgraphicsprogramming,2020-09-10T08:58:41Z,this needs to return a pointer to SNode not an address
486178783,487,devshgraphicsprogramming,2020-09-10T08:59:12Z,no point for a reference of a type that's less than or equal 8 bytes
486179407,487,devshgraphicsprogramming,2020-09-10T09:00:08Z,"you dont use placement new, also RESERVED SPACE DOES NOT OVERLAP WITH DATA STORAGE!"
486181851,487,devshgraphicsprogramming,2020-09-10T09:04:07Z,"YOU NEED THE RESERVED SPACE TO BE AVAILABLE TO THE ALLOCATOR FROM THE START, WRONG ORDER OF INITIALIZATION!"
491482525,487,devshgraphicsprogramming,2020-09-19T18:50:49Z,take the value from the address allocator or pass it through somehow
495599855,487,devshgraphicsprogramming,2020-09-27T18:16:58Z,this needs to come from the address allocator `invalid_address` constexpr (we plan to change from `0deadbeefu` eventually)
495600046,487,devshgraphicsprogramming,2020-09-27T18:19:31Z,I'd rather use `m_array+m_begin` notation instead of `&(m_array[m_begin])`
495600245,487,devshgraphicsprogramming,2020-09-27T18:21:20Z,"you call `delete []` here... because you used array new! (otherwise the destructors of the nodes never get called, also its bad C++ practice and ASAN will scream at you)"
495600327,487,devshgraphicsprogramming,2020-09-27T18:22:30Z,"if you don't intend to call destructors automatically, you should not use`new []` in the first place."
495600696,487,devshgraphicsprogramming,2020-09-27T18:26:37Z,you need to call the destructor on the memory of the back node you've just deallocated.
495600749,487,devshgraphicsprogramming,2020-09-27T18:27:12Z,"that's absolutely not how it works, do a proper placement new!"
495601327,487,devshgraphicsprogramming,2020-09-27T18:33:26Z,`Snode<value>* node = new(myDataStore+addr) Snode<value>(val);`
495601463,487,devshgraphicsprogramming,2020-09-27T18:34:58Z,"this needs to happen, as in the other erase"
495601478,487,devshgraphicsprogramming,2020-09-27T18:35:11Z,define the destructor.
495601602,487,devshgraphicsprogramming,2020-09-27T18:36:08Z,"also protect against invalid addr
"
495603720,487,devshgraphicsprogramming,2020-09-27T18:58:27Z,typo.
495603851,487,devshgraphicsprogramming,2020-09-27T18:59:54Z,erm what about the `prev` of the old `m_begin` node?
495604147,487,devshgraphicsprogramming,2020-09-27T19:03:09Z,"but you'd need to call the destructors for all nodes that were still allocated at the time of the destructor of the double linked list (you can abuse knowledge of the pool allocator internal state, it actually keeps a stack of all ""free"" addresses in its reserved memory, you can sort that stack and iterate through the whole address space skipping the destructor call on the ""free"" addresses)

It will be O(nlogn) or O(n) for the sort of free list, then just O(n) to walk the list and skip addresses."
495605059,487,devshgraphicsprogramming,2020-09-27T19:12:55Z,"return the dereferenced found iterator, this `operator[]` will trigger yet another search that you don't need."
495605060,487,devshgraphicsprogramming,2020-09-27T19:12:56Z,"why do you need the `Key` to live both in the linked list and the unordered map?

I know I gave a such example but it seems not necessary to duplicate it, @Crisspl, your opinion?"
495605135,487,devshgraphicsprogramming,2020-09-27T19:13:41Z,make a `const` qualifier overload as well
495605298,487,devshgraphicsprogramming,2020-09-27T19:15:28Z,mostly why does the key live in the linked list?
495605492,487,devshgraphicsprogramming,2020-09-27T19:17:25Z,"use insert with a iterator hint, the insert might be faster."
495605740,487,devshgraphicsprogramming,2020-09-27T19:20:10Z,shouldn't this be `common_erase` or something?
495605811,487,devshgraphicsprogramming,2020-09-27T19:20:55Z,you only need to swap the value.
495605915,487,devshgraphicsprogramming,2020-09-27T19:22:09Z,"`Value` should be always an ""r-value"", there should probably be two overloads of this method for a `const Key&` and a `Key&&`"
496173760,487,devshgraphicsprogramming,2020-09-28T19:11:39Z,"dont duplicate code, if you have a override with slightly different reference types, then pass through appropriately to a ""master implemenetation""."
496174783,487,devshgraphicsprogramming,2020-09-28T19:13:39Z,"peek should be `const` qualified, and so its argument"
496175998,487,devshgraphicsprogramming,2020-09-28T19:16:00Z,"comment doesnt match behaviour, update the comment."
496176256,487,devshgraphicsprogramming,2020-09-28T19:16:32Z,"return by reference, not by value."
496176389,487,devshgraphicsprogramming,2020-09-28T19:16:45Z,"return by reference not by value
"
496176508,487,devshgraphicsprogramming,2020-09-28T19:17:04Z,also const and non-const reference return value overloads
496176527,487,devshgraphicsprogramming,2020-09-28T19:17:07Z,also const and non-const overloads
496177129,487,devshgraphicsprogramming,2020-09-28T19:18:17Z,`common_erase` ?
496178310,487,devshgraphicsprogramming,2020-09-28T19:20:30Z,P.S. Example I gave https://github.com/buildaworldnet/IrrlichtBAW/pull/487#discussion_r472068256
496191387,487,devshgraphicsprogramming,2020-09-28T19:45:46Z,"It would be possible to only have one copy of `Key`, it would need a bit of a hack.

You'd need to change `unordered_map<Key, uint32_t, MapHash, MapEquals>` to `unordered_set<uint32_t, HashWrapper<MapHash>, EqualsWrapper<MapEquals>>`

Then you'd reserve the `invalid_iterator` to mean ""input key to the function"" (making a huge assertion here that `m_shortcut_map` can never contain `invalid_iterator`).

What would happen is that you could define your own `struct HashWrapper` and `struct EqualsWrapper` which thanks to C++11 could actually be made stateful and store the reference to the `m_list`, as well as `const Key* invalid_iterator_key;` and `std::size_t invalid_iterator_hash;`, you'd construct the wrappers in the constructor of `LRUcache` and pass them into the constructor of `m_shortcut_map`.

Then whenever you call `m_shortcut_map.find`, you'd first set the pointer to `invalid_iterator_key` and compute the `invalid_iterator_hash` for the stateful wrappers.

Then whenever the `operator()` of either the hash or equals gets called:
- If the value is `invalid_iterator` return the relevant state's hash or use the state's pointer for the `operator==`
- If the value is not `invalid_iterator` then fetch the relevant node from `m_list` use it's pair's `Key` member for hash or compare"
496192758,487,Hazardu,2020-09-28T19:48:29Z,yep
499151178,487,Hazardu,2020-10-03T14:12:18Z,was assigned 9 lines above 
499178524,487,Hazardu,2020-10-03T20:15:19Z,i hope i got this right in the next commit
499191067,487,devshgraphicsprogramming,2020-10-03T23:43:46Z,TODO.
499191135,487,devshgraphicsprogramming,2020-10-03T23:45:01Z,its a const pointer that should be returned
499191179,487,devshgraphicsprogramming,2020-10-03T23:45:49Z,waiting on that `common_delete` or something.
499191233,487,devshgraphicsprogramming,2020-10-03T23:46:36Z,waiting on that common_delete or something.
499191368,487,devshgraphicsprogramming,2020-10-03T23:49:09Z,why are you returning pointers instead of references?
499191580,487,devshgraphicsprogramming,2020-10-03T23:53:21Z,"TODO: I don't like having a duplicate `Key` lingering around.

Also another solution would be to swap out the `Key` in unordered map for a `Key*` in the `unordered_map` (don't need a weird `unordered_set` anymore) however the hash and equals would still need to be wrapped to dereference the pointer.

The `Key*` pointer would need to point to the `SNode<>.value.first` so its basically almost a duplicate of the `uint32_t` field, at which point we degenerate into the `unordered_set` solution."
499226732,487,Hazardu,2020-10-04T09:46:44Z,"to be able to return a nullptr 
"
499506854,487,Crisspl,2020-10-05T10:45:45Z,"i think you'll have to allocate raw storage and create `Snode`s with placement-new, just like std vector does. Otherwise you're unable to store not-default-constructible types"
499506899,487,Crisspl,2020-10-05T10:45:52Z,@devshgraphicsprogramming ?
499712603,487,Hazardu,2020-10-05T16:08:57Z,I've changed the LRU cache to store `Key*` 😊👍 
500216035,487,devshgraphicsprogramming,2020-10-06T11:56:56Z,"ah ok, for invalid."
500217605,487,devshgraphicsprogramming,2020-10-06T11:59:33Z,why are `insertAt` and `reserveAddress` public?
500219146,487,devshgraphicsprogramming,2020-10-06T12:02:17Z,this should have been a malloc/free not a new/delete
378544290,422,devshgraphicsprogramming,2020-02-12T22:15:00Z,we can get rid of `parent`
378555342,422,Crisspl,2020-02-12T22:41:39Z,at all? won't it be needed for vulkan implementation?
378893582,422,devshgraphicsprogramming,2020-02-13T14:28:16Z,"nah, IHVs says that they don't care about parents at all."
378896291,422,Crisspl,2020-02-13T14:32:30Z,what are IHVs?
379173872,422,devshgraphicsprogramming,2020-02-13T23:20:37Z,"don't make a default, let the user create one and pass it around."
379174483,422,devshgraphicsprogramming,2020-02-13T23:22:36Z,make it a parameter to the functions (also make a parameter struct to these functions of `IGPUObjectFromAssetConverter` for posteriority)
379174810,422,devshgraphicsprogramming,2020-02-13T23:23:42Z,doesnt this change affect a lot more?
379175294,422,devshgraphicsprogramming,2020-02-13T23:25:27Z,you're caching the wrong thing here
379175536,422,devshgraphicsprogramming,2020-02-13T23:26:09Z,wrong thing to cache
379175755,422,devshgraphicsprogramming,2020-02-13T23:26:49Z,can you cache this compiler?
379176634,422,devshgraphicsprogramming,2020-02-13T23:29:36Z,does Vulkan have this? If not then only CPU cache should have.
379178764,422,devshgraphicsprogramming,2020-02-13T23:35:20Z,independent hardware vendors
379218741,422,Crisspl,2020-02-14T02:06:51Z,it does but I changed everything
379219034,422,Crisspl,2020-02-14T02:08:20Z,hm?
379219154,422,Crisspl,2020-02-14T02:08:54Z,"yea, it has"
379846388,422,devshgraphicsprogramming,2020-02-15T18:04:59Z,"we shouldn't be caching the SPIR-V shader, just the hash of the shader instead."
379846613,422,Crisspl,2020-02-15T18:09:27Z,"yea, yea, ofc it does. This last param is just wrong approach to something else, doesnt matter, sorry. Will rework it today"
379847661,422,devshgraphicsprogramming,2020-02-15T18:27:21Z,ok.
379848106,422,devshgraphicsprogramming,2020-02-15T18:35:45Z,shouldn't hash be in `COpenGLShader` the unspecialized one?
379848173,422,devshgraphicsprogramming,2020-02-15T18:36:35Z,also the SPIR-V?
379848227,422,devshgraphicsprogramming,2020-02-15T18:37:37Z,that can move to the pipeline since that will hold program objects now.
379849516,422,Crisspl,2020-02-15T19:00:58Z,"no, why? unspecialized shader has nothing to do with pipelines + unspecialized shader holds spirv OR glsl, while specialized always holds spirv"
379861064,422,devshgraphicsprogramming,2020-02-15T22:48:41Z,"> unspecialized shader holds spirv OR glsl

hash of either is fine.

Are there any mutations that get applied to the GLSL after we create an `IGPUShader` ?"
379862247,422,devshgraphicsprogramming,2020-02-15T23:20:03Z,why?
379862330,422,devshgraphicsprogramming,2020-02-15T23:22:12Z,`const` the `_GLnames`
379862887,422,devshgraphicsprogramming,2020-02-15T23:35:48Z,"because you're using separable programs, the uniform locations can be precomputed (will be identical for all usages across all threads and pipelines) for a specialized shader (from a single compilation) and ""cached"" inside of the specialized shader"
379863024,422,devshgraphicsprogramming,2020-02-15T23:40:02Z,shouldn't layout be the key? just like specialization would be?
379863092,422,devshgraphicsprogramming,2020-02-15T23:41:26Z,in `IRR_DEBUG` assert that
379866990,422,Crisspl,2020-02-16T01:03:29Z,"well, yea, like everything. #include resolvements, binding reorders, push constants to uniform translation, specialization constants resolvements"
379867062,422,Crisspl,2020-02-16T01:05:47Z,no because there's no way to make an operator< for it
379918481,422,devshgraphicsprogramming,2020-02-16T17:16:24Z,"> binding reorders, push constants to uniform translation, specialization constants resolvement

That's on the GLSL generated from SPIR-V.

But yeah I remember the run-time extension `include`s"
379923129,422,devshgraphicsprogramming,2020-02-16T18:28:06Z,layout should be in the key though? since we want to get the full driver dependent shader binary (and that depends on GLSL generated from SPIR-V which depends on the layout)
379923220,422,devshgraphicsprogramming,2020-02-16T18:29:46Z,dont put this in the hot loop (stuttering) actually intialize at the start.
379923233,422,devshgraphicsprogramming,2020-02-16T18:30:02Z,"same as https://github.com/buildaworldnet/IrrlichtBAW/pull/422/commits/98fcf894ea6ffb42cdbe37ba98615dab9fe4e6f8#r379923220
"
379923895,422,Crisspl,2020-02-16T18:40:26Z,look in code that actually finds binaries
379926229,422,devshgraphicsprogramming,2020-02-16T19:17:04Z,"let's invent one (don't actually give it a `operator<` but use a `map` with a custom comparator functor struct.

You can treat a layout as a 4d vector/array of descriptor layouts, so implement a `<` operator like you would for a 4bit LSB int (first set `<`, then if first set `==` then check second set, and so on)

Then a `<` function for descriptor layouts could be defined the same as you define a `<` operator for an `std::array`"
379926853,422,devshgraphicsprogramming,2020-02-16T19:26:19Z,"use a single-threaded cache, and mutex the shit out of the pipeline, just using a thread-safe cache won't make the member functions of the owner safe to call from multiple threads."
379927034,422,devshgraphicsprogramming,2020-02-16T19:29:12Z,"its possible to implement a comparator using very similar logic to this:
https://github.com/buildaworldnet/IrrlichtBAW/pull/422/files#diff-73a7b1e23025a75063836a1f6c71770aR80"
379927656,422,Crisspl,2020-02-16T19:39:10Z,"so u're saying that having let's say layouts A, B,C and knowing relation of compatibility between them I can sort them in some order that will optimize process of searching the one compatible with some another layout D? I don't think so, how would it work? Compatibility between layouts A and B says nothing about compatibility A and D"
379930182,422,Crisspl,2020-02-16T20:18:20Z,">its possible to implement a comparator using very similar logic to this:

u dont want just a comparator, u want a clearly defined relation"
379930273,422,Crisspl,2020-02-16T20:19:47Z,"> just using a thread-safe cache won't make the member functions of the owner safe to call from multiple threads.

why?"
379930376,422,Crisspl,2020-02-16T20:21:10Z,"hm, ok, i know what u mean, nvm"
379930650,422,Crisspl,2020-02-16T20:25:12Z,"they're precomputed once for all threads, however u're right that those can be stored in COpenGLSpecializedShader, i'll change it"
379931081,422,Crisspl,2020-02-16T20:31:24Z,"because `getShaderGLnameForCtx` might create the GL name and `getUniformLocationsForStage` will need GL name to query locations (ofc locations are cached once queried, but order of those calls are still important for the first time when locations are yet unknown)"
379931230,422,Crisspl,2020-02-16T20:33:25Z,"not really because COpenGLSpecializedShader holds offsets of ""uniforms"""
379939607,422,devshgraphicsprogramming,2020-02-16T22:34:42Z,either use `vector` for both or `smart_Refctd_dynamic_array`
379946529,422,devshgraphicsprogramming,2020-02-17T00:10:12Z,"> so u're saying that having let's say layouts A, B,C and knowing relation of compatibility between them I can sort them in some order that will optimize process of searching the one compatible with some another layout D? I don't think so, how would it work? 

Well in order for a SPIR-V to give you the same GLSL shader, the layout needs to be FULLY compatible, which means that all descriptor sets need to be identically defined.

Fun fact, how STL implements all algorithms in terms of just `<`:
A<B: `A<B`
A>B: `B<A`
A!=B: `A<B || B<A`
A==B: `!(A!=B)`

So we don't need a relation that makes sense, just one that is consistent (no `A<B<C && C<A` loop) and will guarantee that equality will work.

> Compatibility between layouts A and B says nothing about compatibility A and D
> u dont want just a comparator, u want a clearly defined relation

Well compatibility for a SHADER binding reordering requires full compatibility, so if A and B are compatible for shader X and C is compatible with A or B up to set 4, then C will be compatible as the descriptor set layouts are identically defined.

P.S. Another way to establish a `<` relation is to first compare shader hash, then specialization info, and then the computed (set,binding) to (type,binding) remappings which could be cached in `COpenGLPipelineLayout` similarily to precomputed multibind params 
https://github.com/Crisspl/IrrlichtBAW/blob/shaders/src/irr/video/COpenGLPipelineLayout.h#L73"
379946843,422,devshgraphicsprogramming,2020-02-17T00:14:19Z,"> because getShaderGLnameForCtx might create the GL name

We could just create all the thread's programs (all the duplicates) at once during pipeline creation so we never, ever, stutter during a frame.

> getUniformLocationsForStage will need GL name to query locations (ofc locations are cached once queried, but order of those calls are still important for the first time when locations are yet unknown)

we should always compile/create at least one shader program upon pipeline creation and hence the uniform locations should be queried at that time and stored in the specialized shader (they will be identical for all following copies).

To avoid any hitches during rendering."
379946861,422,devshgraphicsprogramming,2020-02-17T00:14:39Z,ok
379949301,422,Crisspl,2020-02-17T00:41:58Z,done
379949670,422,Crisspl,2020-02-17T00:45:55Z,"actually only the 2nd one
So u want to create for all threads at once? Now pipeline irrbaw objects store binaries and create GL names from it when a thread wants to use the pipeline"
379949807,422,devshgraphicsprogramming,2020-02-17T00:47:14Z,"there's probably an overhead in creating a new shader even from a binary, so maybe doing all up-front is a better idea."
379949936,422,devshgraphicsprogramming,2020-02-17T00:48:32Z,what if there are no uniforms at all? will we keep on hitting this?
379949970,422,devshgraphicsprogramming,2020-02-17T00:48:50Z,ah nvm its in `compile` so only one hit ever.
379951151,422,devshgraphicsprogramming,2020-02-17T00:59:44Z,you're leaking binaries?
379951380,422,Crisspl,2020-02-17T01:02:02Z,"no, binaries are stored in smart array. It's in a raw one because of alignment"
379951423,422,devshgraphicsprogramming,2020-02-17T01:02:26Z,do we always need to make a new array?
379951545,422,devshgraphicsprogramming,2020-02-17T01:03:14Z,"make these `std::array`, there's no need for dynamic allocation for arrays we 100% know the upper bound for."
379951658,422,Crisspl,2020-02-17T01:04:14Z,so what's the upper bound?
379951977,422,Crisspl,2020-02-17T01:07:03Z,"not ever, every time pipeline with this shader is created. Yes, we hit every time then. And then it runs 0 iterations loop so whatever"
380015203,422,devshgraphicsprogramming,2020-02-17T07:18:05Z,"argh shit `m_GLnames` and `m_uniformsSetForTheVeryFirstTime` actually needs a dynamic allocation (but you could join the `GLuint` and `bool` into a single struct/pair and only have one dynamically allocated array).

But `m_shaderBinaries` you only need up to MAX_STAGES_PER_PIPELINE (which is your template paramater right now)."
380015283,422,devshgraphicsprogramming,2020-02-17T07:18:21Z,"yeah, I realized"
380193036,422,Crisspl,2020-02-17T13:51:39Z,"not always, this code runs just once. Anyway it's no longer there, now locations are stored in COpenGLSpecializedShader"
380225266,422,Crisspl,2020-02-17T14:51:59Z,i dont know what you mean actually
380338490,422,devshgraphicsprogramming,2020-02-17T19:23:40Z,what does `haveUniformsBeenEverSet` and `afterUniformsSet` do?
380345462,422,devshgraphicsprogramming,2020-02-17T19:48:47Z,what did you end-up doing in the end?
380755945,422,Crisspl,2020-02-18T15:43:57Z,would u prefer it to be cached in COpenGLSPecShader or somehow in pipeline cache?
380861306,422,devshgraphicsprogramming,2020-02-18T18:40:49Z,"what error did you get withthis?
"
380861760,422,devshgraphicsprogramming,2020-02-18T18:41:43Z,"https://cmake.org/cmake/help/v3.2/module/CheckLanguage.html

hmm seems I should check for `CMAKE_CUDA_COMPILER` before proceeding to enable language"
381025357,422,devshgraphicsprogramming,2020-02-19T01:08:24Z,"pipeline cache, but in the second map/cache that's only for IGPUShader"
381599550,422,Crisspl,2020-02-19T23:06:54Z,former one gets flag and the latter one sets it to false
382016254,422,devshgraphicsprogramming,2020-02-20T14:02:07Z,"can't the pipeline handle it in `setUniformsImitatingPushConstants` ?

Also why is `setUniformsImitatingPushConstants` a member of the shader!?"
382018130,422,devshgraphicsprogramming,2020-02-20T14:05:07Z,maybe make the argument an `ICPUShader` then the `ICPUShader` can keep track of its own hash?
382019185,422,devshgraphicsprogramming,2020-02-20T14:06:55Z,"wrong assert, should be `!found || !isCompatible(found.layout.get(),_val.layout.get()`"
382110282,422,Crisspl,2020-02-20T16:25:04Z,"because shader holds ""uniforms' offsets"""
382111473,422,Crisspl,2020-02-20T16:26:51Z,why? pipeline operates on specialized shaders so why even bother with unspecialized ones?
382112193,422,Crisspl,2020-02-20T16:27:58Z,see code of `find()`
382118215,422,Crisspl,2020-02-20T16:37:01Z,">what error did you get withthis?

""no CUDA toolset found"""
382130932,422,Crisspl,2020-02-20T16:58:01Z,ok i fixed it
382277402,422,devshgraphicsprogramming,2020-02-20T21:50:38Z,"it can hold whatever it wants, but since pipelineholds both all the shaders, per-thread shader instances, and these actually hold state in driver's OpenGL implementation... the pipeline should be setting the uniforms with `setUniformsImitatingPushConstants` as a methdod not the shader"
382277787,422,devshgraphicsprogramming,2020-02-20T21:51:23Z,but you're findind the parsed spirv of the unspecialized shader right?
382278100,422,devshgraphicsprogramming,2020-02-20T21:52:07Z,`find` assumes that `layout` is compatible with the key?
382872017,422,devshgraphicsprogramming,2020-02-22T01:21:48Z,"?
"
383559173,422,Crisspl,2020-02-24T22:44:14Z,`find` doesnt find anything (returns nullptr) if passed layout is not compatible with any of entries of equal key
383559819,422,Crisspl,2020-02-24T22:45:53Z,theres no spirv of unspecialized shader and spirv of specialized shader. Theres just spirv. Specialized shader is spirv + spec info
383833208,422,devshgraphicsprogramming,2020-02-25T11:54:29Z,"well we can compute the hash of spir-v and GLSL the same anyway, and make ICPUShader keep that."
383833521,422,devshgraphicsprogramming,2020-02-25T11:55:12Z,"what happened in the end?
"
383833693,422,devshgraphicsprogramming,2020-02-25T11:55:35Z,"?
"
383843579,422,Crisspl,2020-02-25T12:17:57Z,"COpenGLPipelineCache caches parsed spir-v and upon GL shader creation tries to find parsed spir-v to use it for faster spirv-cross compiler construction (in order to specialize, reorder bindings and generate final GLSL)"
383965889,422,Crisspl,2020-02-25T15:49:23Z,done
384030272,422,devshgraphicsprogramming,2020-02-25T17:46:37Z,"I'd compare the OpenGL multibind arguments here instead, cause after all you only care if the bindings got remapped the same to OpenGL slots (which means that as you iterate through the `(set,binding)` tuples of both layouts, do all 4 running total counts of UBO, SSBO, Texture and Image stay the same?)

But I guess that can be left as a TODO in the comment, since this seems to be ""good enough"""
385869603,422,devshgraphicsprogramming,2020-02-28T19:04:11Z,"cmon guys, you know I hate constant literals."
297751222,333,devshgraphicsprogramming,2019-06-26T16:11:19Z,"you're not returning reflectance, this returns IoR when not using texture?"
297751940,333,devshgraphicsprogramming,2019-06-26T16:13:03Z,!?
297755003,333,Crisspl,2019-06-26T16:20:30Z,hm?
297755260,333,Crisspl,2019-06-26T16:21:04Z,"yea, there's a comment in code you commented below"
297766475,333,devshgraphicsprogramming,2019-06-26T16:48:28Z,what is going on here?
297766665,333,devshgraphicsprogramming,2019-06-26T16:48:53Z,so why is it named like that?
297799393,333,Crisspl,2019-06-26T18:07:57Z,well I had to name it somehow and choose between the two
297800274,333,Crisspl,2019-06-26T18:10:12Z,"real ior is got in different way depending on whether it comes from texture or constant. And this code is generated in inline lambda (so that I don't have to create extra string for this code, imo it's more legible this way)"
298714977,333,devshgraphicsprogramming,2019-06-28T19:03:19Z,shouldn't you factor this out to engine core in `video` namespace?
298715168,333,devshgraphicsprogramming,2019-06-28T19:04:01Z,you need a choice (argument to the function) whether this will simulate repeating heightfield (`ETC_REPEAT`) or not
298715523,333,devshgraphicsprogramming,2019-06-28T19:05:23Z,"I think you're forgetting a `ceilf` after the `log2`, and a +1 for the numer of mipmaps

See the source of `COpenGLTexture`"
298715645,333,devshgraphicsprogramming,2019-06-28T19:05:45Z,"if this is going to be in engine core, then you can build-in the shader"
298715731,333,devshgraphicsprogramming,2019-06-28T19:06:06Z,acceptable
298715907,333,devshgraphicsprogramming,2019-06-28T19:06:43Z,you can use the multibind with `nullptr` to unbind 
298716201,333,devshgraphicsprogramming,2019-06-28T19:07:40Z,does it?
299662804,333,devshgraphicsprogramming,2019-07-02T20:07:24Z,those 4 are redundant computation
299662956,333,devshgraphicsprogramming,2019-07-02T20:07:51Z,what is the 0.5 here for?
299663349,333,devshgraphicsprogramming,2019-07-02T20:08:58Z,"why is max(,0.0) here?"
299664526,333,devshgraphicsprogramming,2019-07-02T20:12:16Z,Put the 0.5 in `GGXSmithHeightCorrelated_wo_numerator`
299667800,333,devshgraphicsprogramming,2019-07-02T20:21:31Z,"why clamp?
"
299670409,333,devshgraphicsprogramming,2019-07-02T20:28:17Z,0.5
299670451,333,devshgraphicsprogramming,2019-07-02T20:28:22Z,"0.5
"
299670481,333,devshgraphicsprogramming,2019-07-02T20:28:28Z,"0.5
"
299676537,333,devshgraphicsprogramming,2019-07-02T20:44:43Z,"optimize this, you already calculate the inverseqsrt of `relLightPosLen2` above!"
299677078,333,devshgraphicsprogramming,2019-07-02T20:46:12Z,"no `max` necessary, its impossible to have a view vector at an obtuse angle to the half vector!

Assuming normalized V and L

H = (V+L)/Positive_Divisor
VdotH = (1+VdotL)/Positive_Divisor
VdotL >= -1.0

imply VdotH >=0.0"
299684798,333,devshgraphicsprogramming,2019-07-02T21:06:26Z,This is correct
299685427,333,devshgraphicsprogramming,2019-07-02T21:08:15Z,"don't use isinf, use `<FLT_MAX` and swap the order of arguments in the `mix`"
299693157,333,devshgraphicsprogramming,2019-07-02T21:30:17Z,"Although I would pass `a2` and `anisotropy` (`uAnisotropy`) to this function.

This way you could optimize the computation like this
```cpp
float antiAniso = 1.0-anisotropy;
float atab = a2*antiAniso; //old a2
float anisoTdotH = antiAniso*TdotH;
float anisoNdotH = antiAniso*NdotH;
float w2 = antiAniso/(BdotH*BdotH+anisoTdotH*anisoTdotH+anisoNdotH*anisoNdotH*a2);
return w2*w2*atab / PI;
```

Double check this, but it would be nice because no sqrt needed"
299698554,333,devshgraphicsprogramming,2019-07-02T21:47:00Z,it needs to check for `a2*(1.0-uAnisotropy)`
299698823,333,devshgraphicsprogramming,2019-07-02T21:47:46Z,see my comment about the NDF
299700834,333,devshgraphicsprogramming,2019-07-02T21:53:55Z,that happens in your derivative mapping code
299701765,333,devshgraphicsprogramming,2019-07-02T21:56:55Z,"Because of texture warping on curved surfaces you can bet on TBN not being an orthogonal frame.
This will fuck up all the lighting computation that needs to know about tangents.

So maybe make `vec3 B = cross(N,T);` (don't normalize, its redundant)

"
300067578,333,devshgraphicsprogramming,2019-07-03T17:07:51Z,We need Fresnel Diffuse Multiscatter Constant Polynomial Approximation in terms of `t1`
300475081,333,devshgraphicsprogramming,2019-07-04T17:55:44Z,why still clamp `NdotV` ?
300475144,333,devshgraphicsprogramming,2019-07-04T17:56:10Z,are you going to use those identities?
300475439,333,devshgraphicsprogramming,2019-07-04T17:58:01Z,"you know you could just do this whole function in `vec3` then if someone wants the `float` version then they just put `.x` at the end ;)

also call it `calcDiffuseFresnelCorrectionFactor`"
300475595,333,devshgraphicsprogramming,2019-07-04T17:58:55Z,why did you feel the need to pack the texture coord derivatives in a vec4 ?
300475771,333,devshgraphicsprogramming,2019-07-04T18:00:00Z,@Crisspl wanna try ?
300479391,333,devshgraphicsprogramming,2019-07-04T18:26:21Z,@Crisspl ?
300479593,333,devshgraphicsprogramming,2019-07-04T18:28:06Z,"I think its best to put the shared memory barrier in, I've read the Vulkan Memory Model Appendix and I think execution synchronisation and availability+visibility of writes are two separate things (although visibility/availability requires execution synch)"
300479654,333,devshgraphicsprogramming,2019-07-04T18:28:29Z,@Crisspl ?
300479697,333,devshgraphicsprogramming,2019-07-04T18:28:50Z,@Crisspl ?
300485101,333,Crisspl,2019-07-04T19:10:12Z,"they were in use until i needed TdotH or BdotH (so now i need H and not only N,V dots with H)"
300485279,333,Crisspl,2019-07-04T19:11:32Z,i cant because theres branch and i have no guarantee all of them will be on the same side of 1
300485307,333,Crisspl,2019-07-04T19:11:44Z,less parameters
300501561,333,devshgraphicsprogramming,2019-07-04T21:28:42Z,"its confusing, also it won't help anything."
300501687,333,devshgraphicsprogramming,2019-07-04T21:29:47Z,"ok, but put cerberus mesh+textures into media repo"
300507474,333,devshgraphicsprogramming,2019-07-04T22:51:56Z,"for such short functions you should aim for branchless (every branch generates at least 3 instructions + each branch could be executed, a mask generates 1), also you have eta2 laying around (by necessity you alwasy have it, so use it).

Yes DIV is hundreds of cycles, but I'm hoping for a reciprocal instruction to be generated.

Here's an implementation (check it)
```cpp
float calcDiffuseCorrectionFactor(in float n, in float n2)
{
   //assert(n*n==n2);
   bvec3 TIR = n<1.0;
   float invdenum = mix(1.0,1.0/(n2*n2*(554.33 - 380.7*n)),TIR);
   float num = n*mix(0.1921156102251088,n*298.25 - 261.38*n2 + 138.43,TIR);
   num += mix(0.8078843897748912,-1.67,TIR);
   return
}
```"
300509264,333,devshgraphicsprogramming,2019-07-04T23:23:09Z,"any vector, lets call it `K` can have `KdotH` calculated from identities

dot(K,H) = dot(K,L+V)/length(L+V) = (dot(K,L)+dot(K,V))*LplusV_rcpLen = (KdotL+KdotV)*LplusV_rcpLen 

You actually happen to have all TdotV,TdotL,BdotB,BdotL needed"
310353634,333,devshgraphicsprogramming,2019-08-03T14:40:37Z,@Crisspl ?
310353652,333,devshgraphicsprogramming,2019-08-03T14:41:27Z,did our discord convo resolve this question for you or not?
310357195,333,devshgraphicsprogramming,2019-08-03T16:58:04Z,@Crisspl ?
310357203,333,devshgraphicsprogramming,2019-08-03T16:58:13Z,@Crisspl ?
310357210,333,devshgraphicsprogramming,2019-08-03T16:58:22Z,@Crisspl ?
310357215,333,devshgraphicsprogramming,2019-08-03T16:58:31Z,@Crisspl ?
310357222,333,devshgraphicsprogramming,2019-08-03T16:58:40Z,@Crisspl ?
310357230,333,devshgraphicsprogramming,2019-08-03T16:58:49Z,@Crisspl  ?
310359475,333,Crisspl,2019-08-03T18:29:33Z,"not there already, resolved"
310359706,333,Crisspl,2019-08-03T18:37:48Z,what do you mean by build-in? If it's gonna be in engine core then i think it must be in its own class so that shader program can be deleted in the class's destructor
310359836,333,Crisspl,2019-08-03T18:42:07Z,"i remember that while you were reading vulkan spec some long time ago you found out that exec barrier implies memory barrier, you tried it out and it was working and saving quite nice % of performance. So i take it it's not true, at lest in opengl?"
310364528,333,Crisspl,2019-08-03T22:28:41Z,resolved
310364529,333,Crisspl,2019-08-03T22:28:53Z,resloved
310364534,333,Crisspl,2019-08-03T22:29:06Z,resolved
310364536,333,Crisspl,2019-08-03T22:29:17Z,resolved
310364541,333,Crisspl,2019-08-03T22:29:31Z,resolved
310364564,333,Crisspl,2019-08-03T22:30:09Z,"resolved
but give me an answer for the question :)"
310365976,333,Crisspl,2019-08-04T00:05:12Z,"left TODO
i think your code is missing `a2` factor and then it's ok"
310365984,333,Crisspl,2019-08-04T00:05:42Z,but i'll check again tomorrow to be sure...
310382350,333,devshgraphicsprogramming,2019-08-04T11:15:58Z,"how does this resolve 
https://github.com/buildaworldnet/IrrlichtBAW/pull/333#discussion_r298715523 
?"
310382424,333,devshgraphicsprogramming,2019-08-04T11:18:14Z,"noooo.... I read in the Vulkan spec that exec barrier implies only exec barrier and memory barrier is needed to ensure transactions are visible and available.

~I did however read that `coherent` qualified variables do not need `memoryBarrier` because they are well, coherent.~"
310382481,333,devshgraphicsprogramming,2019-08-04T11:20:04Z,"https://www.khronos.org/opengl/wiki/Compute_Shader#Shared_memory_coherency

> The usual set of memory barriers is available to compute shaders, but they also have access to memoryBarrierShared(); this barrier is specifically for shared variable ordering. groupMemoryBarrier() acts like memoryBarrier(), ordering memory writes for all kinds of variables, but it only orders read/writes for the current work group.

> While all invocations within a work group are said to execute ""in parallel"", that doesn't mean that you can assume that all of them are executing in lock-step. If you need to ensure that an invocation has written to some variable so that you can read it, you need to synchronize execution with the invocations, not just issue a memory barrier (you still need the memory barrier though)."
310382631,333,devshgraphicsprogramming,2019-08-04T11:24:27Z,"Basically
`memoryBarrierShared` < `groupMemoryBarrier` < `memoryBarrier`

Also 
> After ensuring ordering, the other element that is needed for visibility is special GLSL syntax. The image or buffer variable being written to and read from must be qualified by the coherent qualifier. Note that both the writer and reader shaders must qualify their variables properly; otherwise, nothing is guaranteed.

> Qualifying the variable with coherent alone is not enough however. You also need to use a memory barrier;

So basically you need both `coherent` and a memory-barrier.

Unless you are doing *atomic* operations *only* on *coherent* qualified variables, then no memory barrier is necessary."
310382662,333,devshgraphicsprogramming,2019-08-04T11:25:28Z,doesn't `float atab = a2*antiAniso; //old a2` do the job? my `atab` is your `a2`
310382701,333,devshgraphicsprogramming,2019-08-04T11:26:42Z,this sort of thing makes  me think we should create a default one in the `IVideoDriver` and just do a getter so there are not 10s of the same thing instantiated.
310382751,333,devshgraphicsprogramming,2019-08-04T11:27:53Z,"SMaterial only has `MATERIAL_MAX_TEXTURES` slots for now, once we solve #129 #130 we can remove this limit."
310402584,333,Crisspl,2019-08-04T20:32:44Z,"no, i meant something different.
But seems like it's ok, it doesn't need anything"
310411961,333,Crisspl,2019-08-05T00:38:26Z,"to do it without SAuxContext, i'd have to create sampler object (in order not to modify texture's state) with pure GL calls, etc, etc.. I have to do it without SAuxContext because i have to bind it to tex unit untouchable by the engine (>=8) and SAuxContext doesnt allow it. @devshgraphicsprogramming  any ideas?"
310412557,333,Crisspl,2019-08-05T00:47:54Z,why do you want `ceil` and not `floor`? + i've just taken the code from `COpenGL2DTexture`
310640719,333,devshgraphicsprogramming,2019-08-05T14:43:48Z,why do you have to bind it to a tex unit untouchable by the engine?
310642880,333,devshgraphicsprogramming,2019-08-05T14:48:10Z,ah yeah its 1+floor() so ok
216014517,143,devshgraphicsprogramming,2018-09-07T16:22:49Z,whats the reason behind not adding multimap and unordered_multimap to the is_assoc_container true set?
216014980,143,devshgraphicsprogramming,2018-09-07T16:24:37Z,is this doing anything?
216015172,143,devshgraphicsprogramming,2018-09-07T16:25:18Z,remember about the FORCE_EBO macro (otherwise empty base optimization wont happen for msvc)
216016016,143,devshgraphicsprogramming,2018-09-07T16:28:27Z,"do you know about the C++11 constructor inheritance?
```c++
class Derived : public Base
{
public:
   using Base::Base; //inherits all of Base's constructors
}
```"
216019010,143,devshgraphicsprogramming,2018-09-07T16:39:23Z,"I don't understand this, why is a null `second` invalid?

Reference:
https://github.com/buildaworldnet/IrrlichtBAW/issues/123#issuecomment-409851961
https://github.com/buildaworldnet/IrrlichtBAW/commit/ed1029bd1995e07686dbd57c212d3a1ae8281fac"
216043987,143,Crisspl,2018-09-07T18:10:34Z,Because it doesn't matter `CPreInsertionVerifier<>::verify()` for multicaches always returns `true` disregarding container type. But i'll add them just for logic sense.
216044197,143,Crisspl,2018-09-07T18:11:22Z,"Seems like nope, i don't remember what it was so.. it's gone"
216044539,143,Crisspl,2018-09-07T18:12:25Z,Memory layout doesn't matter here. Or do you care? I can add if you do
216044644,143,Crisspl,2018-09-07T18:12:45Z,"Forgot about this, i'll change"
216044875,143,Crisspl,2018-09-07T18:13:35Z,`second` is `bool` here. It's the pair returned by non-multi assoc container from `std`
216077008,143,devshgraphicsprogramming,2018-09-07T20:21:35Z,As a matter of principle we should always enable empty base optimization on empty structs and classes
216456890,143,devshgraphicsprogramming,2018-09-10T20:13:09Z,What are the limitations to using non-pointer types? (as well as pointer types)
216457282,143,devshgraphicsprogramming,2018-09-10T20:14:32Z,"you have no use for these 2 ""no pointer"" types."
216458119,143,devshgraphicsprogramming,2018-09-10T20:17:35Z,"a move constructor would require you to zero out or invalidate the input reference.

Also why not copy and move constructors for the cache base itself?"
216459243,143,devshgraphicsprogramming,2018-09-10T20:21:26Z,could be a `const typename value_type`
216460102,143,devshgraphicsprogramming,2018-09-10T20:24:21Z,"ok I see, it was just a bit hard to read."
216471341,143,devshgraphicsprogramming,2018-09-10T21:00:50Z,"single cache `insert` only returns a `bool` how is this overload/specialization going to work?

Have you tested this with the different container types? (even instantiation?)"
216471991,143,devshgraphicsprogramming,2018-09-10T21:03:14Z,this silly macro impacts readability
216474665,143,devshgraphicsprogramming,2018-09-10T21:11:53Z,"this template paramter name is misleading, I think you meant `isNotVectorBased`"
216475306,143,devshgraphicsprogramming,2018-09-10T21:14:20Z,"how does your compiler like the fact that you are calling `findRange_internal`, a function without a `const` qualifier?

Because GCC sure-as-hell won't like it."
216475578,143,devshgraphicsprogramming,2018-09-10T21:15:24Z,although if you made the internal function a `static` and take the container as a parameter then you'd be safe
216475833,143,devshgraphicsprogramming,2018-09-10T21:16:22Z,"again misleading parameter name, either use `isNonVectorBased` or `isAssociativeContainer`"
216477514,143,devshgraphicsprogramming,2018-09-10T21:22:30Z,i think we need to modify `_outrange->second` so that the final `_outrange` is a valid range and can be used normally
216477974,143,devshgraphicsprogramming,2018-09-10T21:24:18Z,now that's a well named template parameter
216478288,143,devshgraphicsprogramming,2018-09-10T21:25:30Z,why `lower_bound` and not `find` or whatever built-in function it has ?
216479375,143,devshgraphicsprogramming,2018-09-10T21:29:45Z,if you retuned std::end() for first and second then any function under a lock (or single threaded) would not have to use `isNonZeroRange` to determine if valid range was found
216480378,143,devshgraphicsprogramming,2018-09-10T21:33:38Z,see my general comment about checking ranges
216480911,143,devshgraphicsprogramming,2018-09-10T21:35:37Z,see my general comment about `isNonZeroRange`
216481004,143,devshgraphicsprogramming,2018-09-10T21:35:56Z,see my general comment about `isNonZeroRange`
216507667,143,Crisspl,2018-09-10T23:39:08Z,"I have, a line below. Readability purposes"
216508069,143,Crisspl,2018-09-10T23:41:51Z,">a move constructor would require you to zero out or invalidate the input reference.

That's why I use `std::move`. So `std::function` takes care of that

>Also why not copy and move constructors for the cache base itself?

Sorry, I don't understand what you're asking for

"
216508232,143,Crisspl,2018-09-10T23:42:50Z,"No, it'd be `T* const` and I want `const T*`"
216508490,143,Crisspl,2018-09-10T23:44:33Z,See all specializations of `CPreInserionVerifier`. It's not the one that is used in case you're talking about
216508614,143,Crisspl,2018-09-10T23:45:15Z,"Ok, I'll remove but imo it's exactly the opposite"
216509107,143,Crisspl,2018-09-10T23:48:38Z,"I meant ""is multimal or unordered_multimap"". isNotVectorBased would be misleading  here because it doesn't tell that only ""multi"" containers are allowed here (and vector)"
216509344,143,Crisspl,2018-09-10T23:50:06Z,That's a bug. Compiler didn't compile the const variant of function and so didn't give an error while testing. I'll fix as you proposed with static
216509486,143,Crisspl,2018-09-10T23:50:52Z,See my answer to the comment about the same thing
216509579,143,Crisspl,2018-09-10T23:51:28Z,"I don't understand. Also what means ""normally""?"
216509716,143,Crisspl,2018-09-10T23:52:16Z,will check tomorrow. Now I'm writing from a phone
216510361,143,Crisspl,2018-09-10T23:56:05Z,But it wouldn't give any information where to put new element/relation between contents of cache and elent being inserted. `findRange` is used also in functions where insertions happens 
216592295,143,devshgraphicsprogramming,2018-09-11T08:52:12Z,"Granted, we could do the following as a replacement to `ValueType_PtrToConst_impl`
```
constexpr static isTypeAPointer = std::is_pointer<ValueType_impl>::value;
typedef typename std::conditional<isTypeAPointer,const typename std::remove_pointer<ValueType_impl>::type*,const ValueType_impl&>::type ConstObjectHandle_impl
```

This would leverage SFINAE to handle non-pointer cached object types

P.S. Right now non-ptr objects will fail because they won't be able to instantiate the `NoPtrValueType_impl` and `ValueType_PtrToConst_impl` aliases."
216641302,143,Crisspl,2018-09-11T11:55:35Z,"Non-pointers will fail because that's how cache is designed and it's also made sure by `static_assert`. Also I'm not sure if you understand how it is. Cache's template parameter takes any type, it doesn't have to be pointer type! But underlaying container **always** contains pointer type (and so `ValueType_impl` typedef is always pointer type) which is quite obvious since it's a cache and not a regular container and i believe that's why you initially asked for cache as container for pointers.
Example code:
```
core::CConcurrentObjectCache<core::ICPUBuffer, std::string, std::unordered_map> cache;
core::ICPUBuffer* b = new core::ICPUBuffer(0xff);
cache.insert(""b"", b);
cache.removeObject(b, ""b"");
```"
216664114,143,devshgraphicsprogramming,2018-09-11T13:15:38Z,and?
216664192,143,devshgraphicsprogramming,2018-09-11T13:15:54Z,ok I guess thats fine with using != for isNonZeroRange
216665451,143,devshgraphicsprogramming,2018-09-11T13:20:05Z,"damn...

I thought I would instantiate the cache as `core::CConcurrentObjectCache<core::ICPUBuffer*, std::string, std::unordered_map>`


> i believe that's why you initially asked for cache as container for pointers.

Its not required for the cache to work on all types, but I thought if it could be achieved through changing a single line of code, then it should be done."
216666544,143,Crisspl,2018-09-11T13:23:15Z,"Well, it already works on all types. That's why we have customizable greet and dispose functions"
216666860,143,Crisspl,2018-09-11T13:24:14Z,"Also thanks to nature of containing just pointers we don't even care about copyable, moveable etc."
216668323,143,Crisspl,2018-09-11T13:28:51Z,"Well, seems like ""just because"". What's the differenece anyway"
216683842,143,Crisspl,2018-09-11T14:10:33Z,Also that's why there's two typedefs: `CachedType` (public) and `ValueType_impl` (private)
216711072,143,devshgraphicsprogramming,2018-09-11T15:23:10Z,fair enough I see its too much work to support all types.
310383270,341,devshgraphicsprogramming,2019-08-04T11:40:46Z,"get the transforms from the camera, and not the driver... also refactor into an extension like I told you on discord, then there is absolutely no problem with history tracking"
310384978,341,devshgraphicsprogramming,2019-08-04T12:27:53Z,"apply Jitter onto the camera proj matrix before it `render`s or `drawAll` is called, that will make all matrices consistent (all combos of proj matrix) also right now you're not rendering with the jitter!

Secondly you've hardcoded the `JITTER_OFFSETS` to have the window resolution inside, it would be far better to have them [0,1)^2 pixel footprint relative sobol or halton samples (or standard Vulkan MSAA pattern sequence) that are later expanded to viewport resolution (not render target resolution, but active viewport resolution).

Furthermore your offsets are miscalculated because NDC is in [-1,1]^2 so your jitters need to be in range [-1/RES_X,1/RES_X]*[-1/RES_Y,1/RES_Y], so approximately 2x too small and biased to one side

Lastly, the matrix concatenation is wrong, there will be a W divide at the end, and that will make the vanishing point at (0,0) NDC, when in-fact for a jittered view, the vanishing point should be at `jitter_offset`.
https://computergraphics.stackexchange.com/questions/6021/changing-the-projection-reference-point-in-open-gl
Which means that you also need to modify column 3 to add a `jitter` proportional factor for the viewspace Z component, so the vanishing line/point stays the same in world coordinates.



"
310384996,341,devshgraphicsprogramming,2019-08-04T12:28:26Z,for the love of god precompute your FBO attachment combos + use Multiple Render Targets to output velocity + color in one pass!
310385023,341,devshgraphicsprogramming,2019-08-04T12:29:15Z,does your TAA shader also know the previous frame's jitter offset so it can properly look things up in history buffer?
310387078,341,devshgraphicsprogramming,2019-08-04T13:24:52Z,"A. We have a full screen triangle extension to use
B. We shouldn't be even using that anymore because it should be done in compute shaders"
310387170,341,devshgraphicsprogramming,2019-08-04T13:27:59Z,"a dot is just a 1x3 and 3x1 matrix transform, if first matrix is 3x3 then you can have RGB to YUV

Just remember to convert Tonemapped sRGB -> linear RGB -> linear YUV then do the clipping/clamping in linear YUV"
310387316,341,devshgraphicsprogramming,2019-08-04T13:31:51Z,"when you use compute, change that to texelFetch"
310387393,341,devshgraphicsprogramming,2019-08-04T13:33:30Z,"ok but compute the AABB/Variance Ellipsoid in YUV

Btw, you can compute a 3x3 covariance matrix, that basically gives an ellipsoid that you can scale up and down and clip against"
310387464,341,devshgraphicsprogramming,2019-08-04T13:35:28Z,use `textureGather()` you'll get all 2x2 neighbourhood at once (one channel at a time)
310387676,341,devshgraphicsprogramming,2019-08-04T13:40:03Z,"clamp will shift hue, clip instead.... clip against elipsoid to be even nicer"
310388184,341,devshgraphicsprogramming,2019-08-04T13:52:17Z,"You can clip a line against an ellipsoid quite easily in the special case of a line originating at 0 and an ellipsoid centered at 0 as well. When doing ellipsoid fitting with covariance matrices, you'll have to center the ellipsoid on the mean/average value of your sample set.

You just need to find the 3x3 matrix that transforms a unit sphere into your ellipsoid, then find the inverse of that matrix, you transform the direction vector of the line (doesn't matter if normalized) by the inverse matrix, that moves it into the unit sphere space, then if you normalize the transformed vector you clip it!

Now transform the normalized vector by the matrix that scales a unit sphere into your ellipsoid, and you will get the clipped vector.

Actually the matrix that makes your unit sphere the elipsoid is the covariance matrix
https://towardsdatascience.com/interesting-properties-and-use-cases-of-the-covariance-matrix-80d72939c7ab?gi=1d570671e2a6
That's actually how we visuallize the contours of a mixture of gaussians ;)

You can look at how the Ellipsoid Collider in our simple raycast collision code does it. But anyway this is what happens
```cpp
 // deviationScale is how many variances away do you want the ellipsoid, same as for gaussian, 1 <= 68%, 2 <= 95%, 3 <= 97.5%
mat3 scaledCovariance = deviationScale*covariance;

vec3 lineDir = history-averageColorOfNeighbourhood;
vec3 unitClipped = inverse(scaledCovariance)*lineDir;
float unitClippedLen = length(unitClipped);
if (unitClippedLen>1.0)
   unitClipped /= unitClippedLen;
vec3 lineDirClipped = scaledCovariance*unitClipped;
history = lineDirClipped+averageColorOfNeighbourhood;
```"
310388289,341,Crisspl,2019-08-04T13:55:04Z,"don't review outdated sources, it makes no sense"
310388834,341,devshgraphicsprogramming,2019-08-04T14:09:12Z,"If you factor it all out then really what is happening is
```c++
 // deviationScale is how many variances away do you want the ellipsoid, same as for gaussian, 1 <= 68%, 2 <= 95%, 3 <= 97.5%
vec3 lineDir = history-averageColorOfNeighbourhood;
float normFactor = deviationScale/length(inverse(covariance)*lineDir); // maybe there's a way to optimize the inverse and length
if (normFactor<1.0)
   history = lineDir*normFactor+averageColorOfNeighbourhood;
```"
310388879,341,devshgraphicsprogramming,2019-08-04T14:10:22Z,I think INSIDE used a factor of 0.9 or something
310388897,341,devshgraphicsprogramming,2019-08-04T14:10:47Z,can you do both TSSAA and Motion Blur combined at the same time?
310388945,341,devshgraphicsprogramming,2019-08-04T14:11:47Z,define a FAST_TRANSFORM macro for future use `Matrix[0]*vec.x+Matrix[1]*vec.x+Matrix[2]*vec.x+Matrix[3]`
310388966,341,devshgraphicsprogramming,2019-08-04T14:12:25Z,"nope, Z-divide must happen per pixel (move it to pixel shader and pass `xyw` along)."
310388987,341,devshgraphicsprogramming,2019-08-04T14:13:00Z,just beware of NDC Y direction and Texture Coordinate Y direction (we use Vulkan convention)
310389217,341,devshgraphicsprogramming,2019-08-04T14:18:21Z,"waaait, why no filtering when sampling history buffer?"
310389300,341,devshgraphicsprogramming,2019-08-04T14:20:07Z,"for proper ellipsoid calculate 3x3 covariance matrix (use YUV as XYZ for usual Machine Learning/Statistics algorithm)

you can probably do some funky simple unrolled algo since you'll only have 4 samples.

More here:
https://github.com/buildaworldnet/IrrlichtBAW/pull/341/commits/d71102e72144c3d383eb5cc9aa0087d313dca22c#r310388184"
310389320,341,devshgraphicsprogramming,2019-08-04T14:20:28Z,nice idea.
310389340,341,devshgraphicsprogramming,2019-08-04T14:21:16Z,"You will have epic arithmetic, divide by 0 and other errors on interpolation for triangles close to the near plane... this is really needed per pixel"
310389474,341,devshgraphicsprogramming,2019-08-04T14:24:52Z,plz plz plz don't hardcode
310389550,341,devshgraphicsprogramming,2019-08-04T14:26:42Z,can you do motion blur almost always?
310390588,341,devshgraphicsprogramming,2019-08-04T14:51:11Z,"@Crisspl PAge 11 http://twvideo01.ubm-us.net/o1/vault/gdc2016/Presentations/Pedersen_LasseJonFuglsang_TemporalReprojectionAntiAliasing.pdf

> use projection offset to shear frustum

You don't have the shear that maintains the same vanishing point"
310391812,341,devshgraphicsprogramming,2019-08-04T15:19:31Z,"Also page 17 from Tiago Sousa had a funky idea, but that requires velocity info for both current and previous frame (so current matrix, 1 frame behind, and 2 frames behind).
https://www.slideshare.net/TiagoAlexSousa/graphics-gems-from-cryengine-3-siggraph-2013

And obviously to get v_p, you'd need to reproject pixel to previous frame, and then reproject again, then the diff between the reprojections would be v_p"
310393157,341,devshgraphicsprogramming,2019-08-04T15:56:29Z,YES
310393573,341,devshgraphicsprogramming,2019-08-04T16:08:08Z,Actually luma weight is used by UE4 + INSIDE did their research and Sousa velocity weight didn't work for them that well... but you can try it once you have the basic TAA working to see whats best.
310393644,341,devshgraphicsprogramming,2019-08-04T16:10:22Z,"use `texelFetch`,  offset parameter in `*Offset` in GLSL has to always be a compile-time constant."
310393879,341,devshgraphicsprogramming,2019-08-04T16:17:33Z,refactored to make sure clipping does not project (make vector longer)
310394057,341,devshgraphicsprogramming,2019-08-04T16:22:25Z,"also these fetches don't make sense, you're getting a cross around the jittered sample right now
```
0 x 0
x x x
0 x 0
```

do 3 `textureGather`s around the unjittered `TexCoords-uJitter` position, then what you're doing will at least have some meaning/semantic (the gathered samples will be from within output pixel's footprint).

An even higher level of advancement would be to use `texelFetch` and Compute Shader 17x17 shared memory with 16x16 workgroups, then you could get 2x2 or even 4x4 (but then 19x19 smem) neighbourhoods for the covariance effortlessly."
310394150,341,devshgraphicsprogramming,2019-08-04T16:25:53Z,"see Brian Karis' 2013 TemporalAA presentation where he mentions Burely07 that Box filter does not behave well with moving samples, so for this tap (and this tap only) a pseudo-small-kernel-gaussian 2 wide pixel support reconstruction filter (save bandwidth with shared memory or approximating gaussian with 4=2x2 `textureLodOffset`)."
310394187,341,devshgraphicsprogramming,2019-08-04T16:26:59Z,"Luminance is just Y in YUV rep, but you need to find out if they want HDR pre-tonemap, post-tonemap linear or gamma luminance in this weighing scheme."
310394237,341,devshgraphicsprogramming,2019-08-04T16:28:38Z,aaand what do you do if `q_uv` is outside the screen?
310394262,341,devshgraphicsprogramming,2019-08-04T16:29:07Z,See https://github.com/buildaworldnet/IrrlichtBAW/pull/341/files#r310394150
310394344,341,devshgraphicsprogramming,2019-08-04T16:31:00Z,"if you ""fix"" your gather for AABB/Covariance samples, then you don't need this tap"
310394503,341,devshgraphicsprogramming,2019-08-04T16:35:11Z,"TOTALLY WORTH IT - see Karis TemporalAA pptx slide 27

However you can still dilate velocity if you have no velocity texture (which is what we should be striving towards).

Just when you run your 16x16 WG Compute Shader, compute Velocity for 18x18 tile (1 pixel border) in shared memory, then dilate (run your filter that's Z dependant) over the innermost 16x16 samples. Basically you'll be making a Tiled Renderer in software XD."
310394597,341,devshgraphicsprogramming,2019-08-04T16:37:48Z,@Crisspl corrected my code listings
310394689,341,devshgraphicsprogramming,2019-08-04T16:40:07Z,"@Crisspl if you just nuked the Velocity Buffer and went with Deferred+ Ready idea from here
https://github.com/buildaworldnet/IrrlichtBAW/pull/341#issuecomment-518009418

then all of the above would go away and be a non-issue
"
310395152,341,devshgraphicsprogramming,2019-08-04T16:52:29Z,"Look here at `a`,`b`,`c`
https://github.com/playdeadgames/temporal/blob/master/Assets/Scripts/Extensions.cs#L74

Its a shear"
310396205,341,devshgraphicsprogramming,2019-08-04T17:21:46Z,I mean like have this extension be a combined TSSAA + Motion Blur
310396279,341,devshgraphicsprogramming,2019-08-04T17:24:09Z,"Ok Uncharted and Lumberyard car game
https://aws.amazon.com/blogs/gametech/anti-ghosting-with-temporal-anti-aliasing/

Used stencil buffer to augment luma weight and color clipping (which should be done in YUV or YCoCg), basically if stencil fails then no history sample to be taken (weight = 0.0).

something similar could be done not with the stencil buffer, but with ObjectID buffer, in the far future.

"
310397964,341,devshgraphicsprogramming,2019-08-04T18:13:01Z,Filmic Temporal Supersample AA presentation mentions using a Bicubic fast appriximation (catmul-rom 5 tap bilinear thing)
310398014,341,devshgraphicsprogramming,2019-08-04T18:14:42Z,"Filmic Temporal SuperSample AA mentions depth-rejection of certain samples from the neighbourhood for a tighter bound and less ghosting (so you'd be using 1-5 samples, instead of 5 all the time for your old method, and 1-16 in my new method)."
310398030,341,Crisspl,2019-08-04T18:14:59Z,clamp to edge
310398159,341,Crisspl,2019-08-04T18:18:48Z,now its `ETFT_LINEAR_NO_MIP` (thats why you shouldnt review outdated code)
310398256,341,devshgraphicsprogramming,2019-08-04T18:21:32Z,"Also lots of impl details here
http://advances.realtimerendering.com/s2016/s16_Ke.pptx"
310398312,341,devshgraphicsprogramming,2019-08-04T18:23:13Z,I think correct solution would be to never take a history sample into account because its simply not valid
310398336,341,Crisspl,2019-08-04T18:23:43Z,"A. it uses full screen triangle
B. yea, i'll rewrite it as CS when it goes as irrbaw extension
"
310398390,341,Crisspl,2019-08-04T18:25:06Z,hm why?
310398473,341,devshgraphicsprogramming,2019-08-04T18:27:16Z,"ok even according to INSIDE and Ke XU
http://advances.realtimerendering.com/s2016/s16_Ke.pptx

That sequence needs to be Halton or Sobol, probably Halton best."
310398507,341,Crisspl,2019-08-04T18:28:03Z,">(the gathered samples will be from within output pixel's footprint)

i dont understand. What is output pixel's footprint?"
310477259,341,devshgraphicsprogramming,2019-08-05T07:54:09Z,"Output pixel `x` and its center + its footprint corners `f`.
```
f000f
00000
00x00
00000
f000f
```
Jittered pixel center `j` (where sampling, rasterizing and shading occurs)
```
f000f
0000j
00x00
00000
f000f
```
If you sample the jittered texture at `j-Jitter` (which is `j-(j-x)==x`) then you're in the 2x2 patch between jittered samples, `textureGather` will get you 4 samples from jittered texture around the unjittered position."
310478095,341,devshgraphicsprogramming,2019-08-05T07:56:19Z,"Compute has better performance+scheduling than fullscreen tri, the only time you want to use FS quad is when you want to leverage fast culls like stencil for some weird operation.

Not to mention that with Vulkan if you use Compute you can do Async Compute.

Finally texelFetch because compute gives you integer grid coordinates, so there's no need for that FP32 inaccuracy?"
310486202,341,devshgraphicsprogramming,2019-08-05T08:18:15Z,"Also for reference
https://youtu.be/WzpLWzGvFK4?t=600"
310490893,341,devshgraphicsprogramming,2019-08-05T08:30:19Z,"Also if you're going to use depth-rejection or object ID to tighten the neighbourhood bounds, then there needs to be a parameter to turn that off (for scenes with translucent media)"
310510928,341,devshgraphicsprogramming,2019-08-05T09:19:53Z,"Page 26 of
https://www.dropbox.com/sh/dmye840y307lbpx/AAAQpC0MxMbuOsjm6XmTPgFJa?preview=msalvi_temporal_supersampling.pptx

Shows variance clipping, which is a more rudimentary approach.

If you have full covariance matrix (9 floats) instead of variance (2x3 floats) then you can clip against oriented ellipsoid instead of Axis Aligned (unoriented) bounding box.

Now you have a chance for a little bit of original research and contribution to science ;)"
310516641,341,devshgraphicsprogramming,2019-08-05T09:33:33Z,"For transparents, page 46 https://www.dropbox.com/sh/dmye840y307lbpx/AAAQpC0MxMbuOsjm6XmTPgFJa?preview=msalvi_temporal_supersampling.pptx

suggests that we pick the motion vector that is essentially ""the most visible"" in the neighbourhood (which I guess wouldn't work as well anymore if all objects are equally opaque, but one could make a heuristic so the motion vector of most-contributing blend is picked for motion blur, and then those vectors are dilated with the whole min-depth filter)."
310521518,341,devshgraphicsprogramming,2019-08-05T09:45:32Z,"look at pages 50-53 where the Variance Clipping (with 7x7 gather, not 3x3) makes Stochastic Transparency work."
311756292,341,devshgraphicsprogramming,2019-08-07T20:48:00Z,"you also need `OnAnimate()` that actually calculates the matrices from mouse and keyboard

`render()` only sets them in the driver"
311756811,341,devshgraphicsprogramming,2019-08-07T20:49:26Z,"this one you dont need, you can calc `currPos_ndc` from `gl_FragCoord`"
311756900,341,devshgraphicsprogramming,2019-08-07T20:49:44Z,"but still, best not to output a velocity buffer at all ;)"
311757116,341,devshgraphicsprogramming,2019-08-07T20:50:24Z,I would have preferred YUV
326900978,373,devshgraphicsprogramming,2019-09-22T13:23:59Z,"Not true, IAsset is just an ADT, so its not an object in itself (cannot be instantiated). But concrete classes (such as ICPUBuffer, ICPUMeshBuffer, etc.) derived from `IAsset` can be instantiated via `new` or `core::make_smart_refctd_ptr`"
326901029,373,devshgraphicsprogramming,2019-09-22T13:25:11Z,"not a register, wrong word, and its a `uint64_t` just by the way"
326901054,373,devshgraphicsprogramming,2019-09-22T13:25:57Z,its provided so you know whether the type you're `static_cast`ing to is right
326901103,373,devshgraphicsprogramming,2019-09-22T13:27:03Z,if `IAsset* asset;` and `asset->getType()==ET_BUFFER` then you can `static_cast<ICPUBuffer*>(asset)` safely
326901141,373,devshgraphicsprogramming,2019-09-22T13:27:59Z,Bundle can only hold an array of assets that are the same type
326901155,373,devshgraphicsprogramming,2019-09-22T13:28:27Z,its an SAssetBundle not an Asset
326901179,373,devshgraphicsprogramming,2019-09-22T13:29:12Z,"Bundles are indentical if array pointers match, not if contents match (makes dealing with them a lot faster)"
326901215,373,devshgraphicsprogramming,2019-09-22T13:30:04Z,"Not true, the particular assets can be instantiated and filled out by hand. Loaders just automate this process and can create assets from ""files"" (or any other resource interfacing as a file)."
326901511,373,devshgraphicsprogramming,2019-09-22T13:37:04Z,"its a rather weird bitfield, we'd have to explain how the loading process works.

Basically a mesh can reference a submesh, a submesh can reference a material, a material can reference a texture, etc.

If you look at them as recursive functions, the `LEVEL` is basically how deep down the stack you are.
This flag is a bitfield with 2 bits per level, and the enums provie are just some useful constants. But different combinations are valid as well.

Example
```cpp
static_cast<E_CACHING_FLAGS>(ECF_DONT_CACHE_TOP_LEVEL>>4ull) // anything on level 2 (top is 0) will not get cached
```"
326901536,373,devshgraphicsprogramming,2019-09-22T13:37:45Z,"default, if you can find the asset in the previously cached asset, then you will return it and if you cant you will load it and add it to the cache before returning"
326901591,373,devshgraphicsprogramming,2019-09-22T13:39:09Z,Nope it doesn't CPU 2 GPU conversion is in the `video::` namespace
326901625,373,devshgraphicsprogramming,2019-09-22T13:40:17Z,"Thread safety still has one issue, if you start loading the same asset at the exact same time (they will both check cache and not find anything), you may end up with two copies in the cache."
327678691,373,AnastaZIuk,2019-09-24T15:20:29Z,"actually shouldn't it be reinterpret_cast, should it?"
327731651,373,Crisspl,2019-09-24T17:07:47Z,"nah, never use reinterpret_cast unless it's an absolute must"
327763146,373,devshgraphicsprogramming,2019-09-24T18:15:22Z,"`static_cast` works beautifully because it can calculate the relative offset to the pointer accounting for the difference between the start of storage of a base class and a derived class.

Example
```cpp
class A {uint32_t a;};
class B {uint32_t b;};

class C : public A, public B {};

B* base;
C* derived = static_cast<C*>(base);
```


if you print both `base` and `derived` as `%p` you will see that the pointer to derived has been rolled back by 4 bytes.


`reinterpret_cast` is only for casting void pointers really."
327763553,373,devshgraphicsprogramming,2019-09-24T18:16:18Z,still need a word about that you can create them outside of loaders
327765949,373,devshgraphicsprogramming,2019-09-24T18:21:46Z,Need a description 
328247091,373,AnastaZIuk,2019-09-25T17:27:15Z,I will cover it soon
328248018,373,AnastaZIuk,2019-09-25T17:29:21Z,gonna cover it soon
328273646,373,devshgraphicsprogramming,2019-09-25T18:24:47Z,clarify
328274807,373,devshgraphicsprogramming,2019-09-25T18:27:23Z,because of external and custom asset loaders we cannot protect a static_cast with a type enum comparison.. this is why we provide a string.
328274947,373,AnastaZIuk,2019-09-25T18:27:41Z,"I think it's clear, isn't it?
@Crisspl "
328276665,373,devshgraphicsprogramming,2019-09-25T18:31:29Z,"Not necessairly true.

It may be desireable to have a cache of GPU objects associated with the CPU objects, while at the same time being able to get rid of the RAM overhead for storage of such a CPU object.

This function will get rid of as much memory as possible (including references to CPU objects it needs), the only thing that stays is just the pointer and the memory allocated for that pointer (whole class).

After this operation we can treat the asset contents as invalid garbage.

The default CPU to GPU object converter provided by the engine does this."
328277011,373,devshgraphicsprogramming,2019-09-25T18:32:20Z,"""Attempts to fetch an Asset.""

""certein"" is a typo -> certain"
328277169,373,devshgraphicsprogramming,2019-09-25T18:32:41Z,rephrase
328277480,373,devshgraphicsprogramming,2019-09-25T18:33:22Z,This Asset
328278309,373,devshgraphicsprogramming,2019-09-25T18:35:20Z,"doesn't need to be converted, there are some functions in the engine which take ICPUBuffer as a nice way to represent a plain byte array.

Its used for storage of large arrays, so that storage can be decoupled from other objects such as meshbuffers, images, animations and shader source/bytecode."
328278528,373,devshgraphicsprogramming,2019-09-25T18:35:54Z,"""no case in which"""
328278818,373,devshgraphicsprogramming,2019-09-25T18:36:28Z,compared to an `std::vector<>`
328279475,373,devshgraphicsprogramming,2019-09-25T18:37:56Z,"and compared to `std::array` its size can be determined at runtime.

As a consequence `sizeof(dynamic_array<T,allocator>)` is completely meaningless, and it can only be allocated on the heap and is non-copyable."
328280212,373,devshgraphicsprogramming,2019-09-25T18:39:26Z,"the purpose of this class is to compensate for the non-copyability of the base class and allow ""pass by reference"" (shared contents) without memory leaks and going out of scope."
328280262,373,AnastaZIuk,2019-09-25T18:39:33Z,"That's why I described that Assets are needed as a key, so they cannot be removed entirely"
328291980,373,devshgraphicsprogramming,2019-09-25T19:06:45Z,"yes, but this can be read very wrong... this class method has nothing to do with CPU to GPU object conversion (its needed by the default, but nothing to do with that)

Its only for getting rid of memory and keeping the pointer alive"
328292360,373,devshgraphicsprogramming,2019-09-25T19:07:38Z,the english/grammar is not clear here
328294375,373,devshgraphicsprogramming,2019-09-25T19:12:51Z,"Meta = above, higher

This is for attaching extra data to an asset that the loader retrieved, which are not ubiquitously representable by the engine. These could be but not limited to (note that categories overlap):
- Global Data about the file or scene
- IDs, names
- Default View/Projection
- Complex Animations and Hierarchies
- Physics Simulation Data
- AI data
- Lighting
- Extra material metadata

There is total flexibility here, its expected that each loader has its own base metadata class implementing the IAssetMetadata interface, with its own type enum that other loader's metadata classes derive from the base.

There's no attempt to standardise the metadata, as loaders are so diverse."
328302568,373,AnastaZIuk,2019-09-25T19:34:25Z,"well, I will move it"
329347580,373,devshgraphicsprogramming,2019-09-29T10:13:51Z,"the filename argument goes in, the actual resolved path comes out (the override decides how to resolve a local path or even a URL into a ""proper"" filename).

Hierarchy level is more like a stack counter, we expect that that asset loading will get called recursively, example mesh needs material, material needs texture, etc. so `getLoadFilename` could be called separately for each dependent resource from deeper recursions in the loading stack."
329916156,373,devshgraphicsprogramming,2019-10-01T07:39:17Z,"replace ""arrays operations"" to array indexing "
329916909,373,devshgraphicsprogramming,2019-10-01T07:41:23Z,"Its actually necessary to reserve the correct amount of memory when writing to file, ""conservative"" here actually means that the value returned can be greater than memory actually needed.

What you've written about is actually a secondary functionality,
also, the bigger the asset the more likely it is to be compressed with a more expensive (slower) algorithm (replace the badly formed sentence ending)."
329917536,373,devshgraphicsprogramming,2019-10-01T07:43:16Z,"its important to note that not every writer supports all these flags and may just silently drop them when writing (example, JPG, PNG do not write encrypted images)"
332604767,373,devshgraphicsprogramming,2019-10-08T16:14:22Z,status?
332604811,373,devshgraphicsprogramming,2019-10-08T16:14:27Z,status?
332605020,373,devshgraphicsprogramming,2019-10-08T16:14:54Z,"status?
"
332605061,373,devshgraphicsprogramming,2019-10-08T16:14:59Z,status?
332605108,373,devshgraphicsprogramming,2019-10-08T16:15:05Z,status?
332605151,373,devshgraphicsprogramming,2019-10-08T16:15:11Z,"status?
"
332605268,373,devshgraphicsprogramming,2019-10-08T16:15:30Z,status?
332605288,373,devshgraphicsprogramming,2019-10-08T16:15:32Z,status?
332605314,373,devshgraphicsprogramming,2019-10-08T16:15:35Z,status?
332605340,373,devshgraphicsprogramming,2019-10-08T16:15:38Z,status?
332605359,373,devshgraphicsprogramming,2019-10-08T16:15:40Z,status?
332605390,373,devshgraphicsprogramming,2019-10-08T16:15:43Z,status?
332605417,373,devshgraphicsprogramming,2019-10-08T16:15:46Z,status?
332605466,373,devshgraphicsprogramming,2019-10-08T16:15:52Z,status?
332605492,373,devshgraphicsprogramming,2019-10-08T16:15:56Z,status?
332605513,373,devshgraphicsprogramming,2019-10-08T16:15:59Z,status?
332605558,373,devshgraphicsprogramming,2019-10-08T16:16:05Z,status?
332670263,373,AnastaZIuk,2019-10-08T18:38:30Z,Solved
332670391,373,AnastaZIuk,2019-10-08T18:38:46Z,Solved
332670715,373,AnastaZIuk,2019-10-08T18:39:28Z,Solved
332670800,373,AnastaZIuk,2019-10-08T18:39:42Z,Solved
332670963,373,AnastaZIuk,2019-10-08T18:40:03Z,Solved
332671295,373,AnastaZIuk,2019-10-08T18:40:48Z,Solved
332671391,373,AnastaZIuk,2019-10-08T18:41:00Z,Solved
332671507,373,AnastaZIuk,2019-10-08T18:41:15Z,Solved
332671590,373,AnastaZIuk,2019-10-08T18:41:25Z,Solved
332671692,373,AnastaZIuk,2019-10-08T18:41:40Z,Solved
332671828,373,AnastaZIuk,2019-10-08T18:41:55Z,Solved
332672094,373,AnastaZIuk,2019-10-08T18:42:30Z,Solved
332672215,373,AnastaZIuk,2019-10-08T18:42:47Z,Solved
332682141,373,AnastaZIuk,2019-10-08T19:04:40Z,Solved
415136405,480,AnastaZIuk,2020-04-25T20:20:54Z,file to remove
420662545,480,devshgraphicsprogramming,2020-05-06T09:36:35Z,I wouldn't bother with the extra `IrrlichtBaW` directory since you already prefix the file/class names
420663234,480,devshgraphicsprogramming,2020-05-06T09:37:56Z,why add `Effect` to the name
420663565,480,devshgraphicsprogramming,2020-05-06T09:38:34Z,duplicate file?
420664213,480,devshgraphicsprogramming,2020-05-06T09:39:37Z,"these will probably be FBO bind and unbind, check if OpenGL backend does more than that"
420665272,480,devshgraphicsprogramming,2020-05-06T09:41:37Z,"you might need to add a UBO or SSBO for some per-quad data such as transforms, colors etc."
420666566,480,devshgraphicsprogramming,2020-05-06T09:44:04Z,"you want this to come from an SSBO
```glsl
struct PerQuadData
{
   mat4 modelViewPerspMatrix;
};

layout(set=3, binding=1) restrict readonly buffer QuadData
{
   PerQuadData perQuadData[];
};
```"
420666982,480,devshgraphicsprogramming,2020-05-06T09:44:42Z,"check if CEGUI supports gradients, if not (all vertices get assigned the same color) put the color in `PerQuadData`"
420667314,480,devshgraphicsprogramming,2020-05-06T09:45:22Z,for GLSL shaders to compile into SPIR-V you need to specify matching `layout(location=` on all `in` and `out` variables
420668091,480,devshgraphicsprogramming,2020-05-06T09:46:55Z,"then naturally a push constant to supply offset into array, so you could do this
```glsl
perQuadData[pcOffset+gl_InstanceIndex];
```"
420668786,480,devshgraphicsprogramming,2020-05-06T09:48:18Z,"if everything CEGUI ever draws are quads, then you could easily make these `const` global arrays (like the Vulkan triangle example) for a single quad indexed by `gl_VertexIndex` then if you want more quads in different places, you'd handle that via instancing and a per-quad `modelViewPerspMatrix`"
420669357,480,devshgraphicsprogramming,2020-05-06T09:49:23Z,"btw. the final override of a `virtual` function does not need the `virtual` keyword, only `override`"
420669804,480,devshgraphicsprogramming,2020-05-06T09:50:09Z,"these should be ridiculously simple for you to implement ;)

Start here."
420670332,480,devshgraphicsprogramming,2020-05-06T09:51:03Z,here do the opposite of what OpenGL says
421693134,480,AnastaZIuk,2020-05-07T18:03:35Z,"it sets viewport, the matrix and cegui render target

```C++
template <typename T>
void OpenGLRenderTarget<T>::activate()
{
    glViewport(static_cast<GLsizei>(d_area.left()),
               static_cast<GLsizei>(d_area.top()),
               static_cast<GLsizei>(d_area.getWidth()),
               static_cast<GLsizei>(d_area.getHeight()));

    if (!d_matrixValid)
        updateMatrix();

    d_owner.setViewProjectionMatrix(d_matrix);

    d_owner.setActiveRenderTarget(this);
}

//----------------------------------------------------------------------------//
template <typename T>
void OpenGLRenderTarget<T>::deactivate()
{
}
```"
422011438,480,devshgraphicsprogramming,2020-05-08T08:16:56Z,"that would be a:
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/IVideoDriver.h#L139
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/IVideoDriver.h#L112

The matrix stuff you need to compute yourself and send to shader via Push Constant or UBO"
422011996,480,devshgraphicsprogramming,2020-05-08T08:18:19Z,"a GUI projection is orthographic, not perspective"
422012650,480,devshgraphicsprogramming,2020-05-08T08:19:43Z,you need a simple orthographic matrix
422013438,480,devshgraphicsprogramming,2020-05-08T08:21:32Z,"oh, so that's how they do it XD"
422015730,480,devshgraphicsprogramming,2020-05-08T08:26:39Z,"you could possibly load with an override that overrides the cache searching so you get a separate asset cache just for CEGUI (you'd also need to override the GPU object creator slightly for `getGPUObjectsFromAssets`)

CC: @Crisspl "
422015905,480,devshgraphicsprogramming,2020-05-08T08:27:07Z,what is this needed for?
422016285,480,devshgraphicsprogramming,2020-05-08T08:28:02Z,"I'd first create a gpuImage, then create a `IGPUImageView` directly from it, doing it via the CPU object and using `getGPUObjectsFromAssets` introduces more objects into caches"
422021769,480,devshgraphicsprogramming,2020-05-08T08:40:09Z,what does CEGUI use `cachingName` for ?
422022522,480,devshgraphicsprogramming,2020-05-08T08:41:48Z,"call `blitFromMemory(buffer,{0.f,0.f,buffer_size.d_width, buffer_size.d_height})` and do the implementation there"
422022714,480,devshgraphicsprogramming,2020-05-08T08:42:18Z,this is pretty much what the screenshot extension does
422022922,480,devshgraphicsprogramming,2020-05-08T08:42:45Z,"don't support these, they are not SRGB, and CEGUI probably gets them wrong"
422023162,480,devshgraphicsprogramming,2020-05-08T08:43:14Z,"maybe change the `asset::E_FORMAT newFormat = [&]()` lambda into a static private function, so you can check it here."
422385396,480,AnastaZIuk,2020-05-08T21:31:26Z,"yeah, you've got an alias to various kind of resources hah"
422406612,480,devshgraphicsprogramming,2020-05-08T22:37:28Z,why are you turning every single texture into a framebuffer!?
422407092,480,devshgraphicsprogramming,2020-05-08T22:39:11Z,"create a GPU buffer of the given `bufferByteSize` with `driver->createGPUBufferDeviceLocalOnDedMem` and fill it with `driver->updateBufferRangeViaStagingBuffer`, no need for `getGPUObjectsFromAssets` and creation of CPU buffer"
422407665,480,devshgraphicsprogramming,2020-05-08T22:41:09Z,"do not blit with fraebuffers!

you should be using `copyBufferToImage` here, and you could have implemented `IrrlichtBaWTexture::loadFromMemory` with this function partially"
422408055,480,devshgraphicsprogramming,2020-05-08T22:42:47Z,that's not how it works and it won't work this way.
422408373,480,devshgraphicsprogramming,2020-05-08T22:43:58Z,you need `copyImageToBuffer`
422408471,480,devshgraphicsprogramming,2020-05-08T22:44:23Z,just copy what it does with the downstreaming buffer and `copyImageToBuffer`
422408633,480,devshgraphicsprogramming,2020-05-08T22:45:00Z,you don't need to use the framebuffer at all
422957265,480,AnastaZIuk,2020-05-11T10:56:51Z,adjusted in following commit
423175959,480,AnastaZIuk,2020-05-11T16:47:04Z,adjusted in following commit
425429647,480,AnastaZIuk,2020-05-14T21:04:49Z,adjusted in following commit
425429917,480,AnastaZIuk,2020-05-14T21:05:17Z,adjusted in following commit
425430907,480,AnastaZIuk,2020-05-14T21:07:10Z,it is copied from their opengl implementation
425431069,480,AnastaZIuk,2020-05-14T21:07:29Z,resolved
425435466,480,AnastaZIuk,2020-05-14T21:16:21Z,adjusted in following commit
425449167,480,AnastaZIuk,2020-05-14T21:45:41Z,adjusted in following commit
425449264,480,AnastaZIuk,2020-05-14T21:45:53Z,adjusted in following commit
425451093,480,AnastaZIuk,2020-05-14T21:50:10Z,adjusted in following commit
425451508,480,AnastaZIuk,2020-05-14T21:51:06Z,"I know, but it's my habbit likely, I will remove those"
425452110,480,AnastaZIuk,2020-05-14T21:52:35Z,resolved
425456186,480,AnastaZIuk,2020-05-14T22:02:26Z,changed it a little
425456713,480,AnastaZIuk,2020-05-14T22:03:54Z,adjusted in folllowing commit
425458989,480,AnastaZIuk,2020-05-14T22:09:18Z,"I'm not sure if GPU extent takes into account buffer row length, if for it it is indifferent, I will just use width"
425464492,480,AnastaZIuk,2020-05-14T22:24:10Z,"they use it for caching afaik, doing like folllowing

```C++
//! container type used to hold Textures we create.
    typedef std::map<String, OpenGLTexture*, StringFastLessCompare
                     CEGUI_MAP_ALLOC(String, OpenGLTexture*)> TextureMap;
    //! Container used to track textures.
    TextureMap d_textures;
```"
425464675,480,AnastaZIuk,2020-05-14T22:24:38Z,the solution will be https://github.com/buildaworldnet/IrrlichtBAW/pull/480#discussion_r422015730
425638276,480,devshgraphicsprogramming,2020-05-15T08:12:59Z,I think we have an SRGB enum for these two
425638412,480,devshgraphicsprogramming,2020-05-15T08:13:13Z,don't support this one
425638768,480,devshgraphicsprogramming,2020-05-15T08:13:59Z,"don't assert, its not an error to ask"
425638818,480,devshgraphicsprogramming,2020-05-15T08:14:07Z,!=EF_UNNKNOWN
425639222,480,devshgraphicsprogramming,2020-05-15T08:14:51Z,"don't create a new buffer, we have the downstreaming buffer, same thing we use in the screenshot extension!"
425639734,480,devshgraphicsprogramming,2020-05-15T08:15:49Z,"maps in IrrlichtBaW are persistent, meaning they will not perform a fence before returning the pointer to the buffer!

downstreaming buffer is persistently mapped."
425639849,480,devshgraphicsprogramming,2020-05-15T08:16:03Z,well in that case its wrong XD
425641060,480,devshgraphicsprogramming,2020-05-15T08:18:22Z,you can `copyBufferToImage` straight from the streaming/staging buffer... here you're creating one buffer too many
425642439,480,devshgraphicsprogramming,2020-05-15T08:20:56Z,on other classes too
425643824,480,devshgraphicsprogramming,2020-05-15T08:23:27Z,"you don't need this function, because you don't need to create transient buffers (we already have those, they're called the up and downstreaming buffer)"
425644546,480,devshgraphicsprogramming,2020-05-15T08:24:45Z,that's not the correct width for texture scaling to return.
425645209,480,devshgraphicsprogramming,2020-05-15T08:25:56Z,you're not even using this variable
425645661,480,devshgraphicsprogramming,2020-05-15T08:26:50Z,"you're still doing it wrong, you've creating a ICPUImageView not an IGPUImageView"
425646947,480,devshgraphicsprogramming,2020-05-15T08:29:11Z,"I think its possible to create a ""clean"" asset manager class (`core::make_smart_refctd_ptr<IAssetManager>()`) that could be used just by the CEGUI renderer components, or at least use an override during loading that could prepend `?CEGUI?` to all the caching paths when inserting into cache and searching the cache"
425647901,480,devshgraphicsprogramming,2020-05-15T08:30:49Z,"first create the GPU Image, then do a `copyBufferToImage` but via the upstreaming staging buffer, don't create new buffers!"
425648154,480,devshgraphicsprogramming,2020-05-15T08:31:17Z,"also DRY, so create the IGPUImage and the views, then call `blitFromMemory`"
352044307,402,devshgraphicsprogramming,2019-11-29T09:27:57Z,removed DDS?
352044560,402,devshgraphicsprogramming,2019-11-29T09:28:26Z,wrong include?
352045287,402,devshgraphicsprogramming,2019-11-29T09:30:00Z,whats the difference between this and PROFILE_KTX
352045564,402,devshgraphicsprogramming,2019-11-29T09:30:38Z,total faces
352045808,402,devshgraphicsprogramming,2019-11-29T09:31:12Z,you will need to translate the format between gli format and our own E_FORMAT
352147906,402,AnastaZIuk,2019-11-29T14:09:23Z,@devshgraphicsprogramming do you want me to delete DDS (and KTX) loader? 
352147945,402,AnastaZIuk,2019-11-29T14:09:32Z,"sure, to fix"
352148612,402,AnastaZIuk,2019-11-29T14:11:22Z,so what is a difference between layer and face? I can imagine a face as an index of texture (if it is a cubemap)
352156443,402,AnastaZIuk,2019-11-29T14:32:35Z,"@devshgraphicsprogramming well, so the **format** struct looks like this: 
https://github.com/g-truc/gli/blob/master/gli/gl.hpp#L335

I will translate it, but I'm not sure which format member I should choose for translating
internal format: https://github.com/g-truc/gli/blob/master/gli/gl.hpp#L16
external format: https://github.com/g-truc/gli/blob/master/gli/gl.hpp#L238
or type format: https://github.com/g-truc/gli/blob/master/gli/gl.hpp#L265"
352160942,402,AnastaZIuk,2019-11-29T14:44:11Z,"I don't know actually and I can't find anything about it, so I have created an issue https://github.com/g-truc/gli/issues/172

I hope they will clarify us it"
352237707,402,devshgraphicsprogramming,2019-11-29T20:14:21Z,"that's a distinction that only GLi seems to make, in Vulkan and modern (DSA) OpenGL, faces of a cubemap are layers 

`arrayLayerIndex%6` gives you the cubemap face
`arrayLayerIndex/6` gives you the cubemap array index"
352237751,402,devshgraphicsprogramming,2019-11-29T20:14:45Z,"well yeah, no point in duplicate loaders."
352237768,402,devshgraphicsprogramming,2019-11-29T20:14:51Z,good.
352272486,402,AnastaZIuk,2019-11-30T08:03:43Z,@devshgraphicsprogramming what do you think about it?
352302094,402,devshgraphicsprogramming,2019-11-30T20:10:11Z,"Thanks to `GL_ARB_texture_storage` we now deal with exclusively internal formats
https://github.com/g-truc/gli/blob/master/gli/gl.hpp#L16

Before OpenGL was a retarded mix of extenal+type format, i.e. `GL_RGBA` + `GL_FLOAT`

Now you just have `GL_RGBA32F`

You should ignore swizzles and target types (well you still need to differentiate 1D, 2D and 3D) for Images and put them in the ImageView creation struct instead, arbitrary swizzles are possible."
352337738,402,AnastaZIuk,2019-12-01T11:29:42Z,"hm, actually it seems to me that our image assumes that the ""layer"" is always one, but if it is an cubemap it can handle some ""layers"" considered by our API as faces, right?
so if there were some layers, I have to create pointers of our **ICPUImage** and if target is an cubemap, I can set **arrayLayers** that stores our faces"
352337875,402,AnastaZIuk,2019-12-01T11:32:18Z,"but in that case where there are loaded layers I have to consider mipmap level if present and create **SCreationParams** for each image, because it won't match anymore"
352378236,402,devshgraphicsprogramming,2019-12-01T22:30:42Z,"only one ICPUImage is ever produced, ""layers"" are no different than ""depth"" and function exactly like ""height"" pixel addressing.

`((z*height+y)*width+x)*pixelSize`

There's even a function that gets you an offset into a bufer buffer I believe.

ICPUImage consists of declaration of image size+format+etc plus a list of buffer regions that shall be copied into it, see the ""fixed"" PNG loader, separate mip-map levels are separate image subresources, hence a separate buffer-region to copy. You don't however need 1 buffer per copy region, you can pack everything into one without any problem (that's what offsets are for).

See Vulkan-Tutorial and read documentation of `vkCmdCopyBufferToImage`"
352378352,402,devshgraphicsprogramming,2019-12-01T22:32:40Z,Why?
352378371,402,devshgraphicsprogramming,2019-12-01T22:33:00Z,patent expired in 2019
352378404,402,devshgraphicsprogramming,2019-12-01T22:33:41Z,"also decompression is patented, not transfer of bytes, sending compressed data stream to OpenGL driver puts the onus of licensing on OpenGL driver implementation not the application using OpenGL
(this is why MESA can't have nice things)"
352378531,402,devshgraphicsprogramming,2019-12-01T22:35:35Z,"this sort of shit should be a cmake option then go into the buildconfig dynaically configured file.

Look at the first 6 files here
https://github.com/buildaworldnet/IrrlichtBAW/pull/381/files

If you want to you can convert all the other `_IRR_COMPILE_WITH` to cmake options."
352378573,402,devshgraphicsprogramming,2019-12-01T22:36:34Z,arrayLayers = totalFaces = faces()*layers()
352378589,402,devshgraphicsprogramming,2019-12-01T22:36:46Z,"nope, see my other comment."
352378687,402,devshgraphicsprogramming,2019-12-01T22:38:25Z,"i think you'll need to return a `E_FORMAT,ICPUImageView::SCreationParams::Swizzle` pair"
352378704,402,devshgraphicsprogramming,2019-12-01T22:38:34Z,static
352378893,402,devshgraphicsprogramming,2019-12-01T22:40:40Z,"image view not image

also you don't need virtual here, dont use virtual here, make the class final"
353048087,402,AnastaZIuk,2019-12-03T08:52:01Z,"Sure, but Swizzles are placed in **SComponentMapping** struct"
353136301,402,devshgraphicsprogramming,2019-12-03T11:56:51Z,yeah I don't remember all the structs and nested class declarations off by heart ;)
353935335,402,AnastaZIuk,2019-12-04T19:22:05Z,"@devshgraphicsprogramming I think I've got it wrong while reading about copyBuffers
It seems to me that there should be one imageView and images in amount of mipmaps and such images will be filled by copy buffers to finaly create imageView

I need to read it one more time for sure"
353948507,402,devshgraphicsprogramming,2019-12-04T19:50:04Z,baseImageType becomes 1D here IIRC
353948593,402,devshgraphicsprogramming,2019-12-04T19:50:15Z,baseImageType becomes 2D here IIRC
353948736,402,devshgraphicsprogramming,2019-12-04T19:50:34Z,baseImageType becomes 2D here IIRC
353948841,402,devshgraphicsprogramming,2019-12-04T19:50:50Z,baseImageType same as non-array version
353948945,402,devshgraphicsprogramming,2019-12-04T19:51:01Z,just collapse this into the default case.
353949291,402,devshgraphicsprogramming,2019-12-04T19:51:47Z,"One Image and one ImageView

There will be one copy range struct per mip-map (but it will point to 1 image and 1 buffer)"
353949952,402,devshgraphicsprogramming,2019-12-04T19:53:10Z,"you need to vary `mipLevel` and `bufferOffset` accordingly

Also are you sure GLI will give tightly packed image rows?"
353950328,402,devshgraphicsprogramming,2019-12-04T19:53:55Z,"Finally `extent` shrinks for each mip level, the ICPUImage or IImage has a utlity function that actually tells you the extent of a given mip-level."
353950859,402,devshgraphicsprogramming,2019-12-04T19:54:57Z,"this is stupid, `gl::SWIZZLE` is an enum, you can just make an array and just index it by the swizzle"
353951503,402,devshgraphicsprogramming,2019-12-04T19:56:21Z,you'll have to inver the swizzle for some of these
353951873,402,devshgraphicsprogramming,2019-12-04T19:57:09Z,IMAGE_VIEW
353951890,402,AnastaZIuk,2019-12-04T19:57:11Z,"sure, but it seems to me it won't match because of that:
https://github.com/g-truc/gli/blob/master/gli/gl.hpp#L314"
353952019,402,devshgraphicsprogramming,2019-12-04T19:57:27Z,write binary? anything elsE?
353952189,402,AnastaZIuk,2019-12-04T19:57:47Z,"I missed it, mistake"
353952595,402,devshgraphicsprogramming,2019-12-04T19:58:42Z,use `core::unordered_map` then
353957448,402,devshgraphicsprogramming,2019-12-04T20:09:51Z,a `static const core::unordered_map`
353976927,402,AnastaZIuk,2019-12-04T20:54:03Z,"> the ICPUImage or IImage has a utlity function that actually tells you the extent of a given mip-level.

well, I get extent relative to mipmapLevel by loaded GLI texture that has a capability of getting an extent for each mip level, but I will remember it"
354285916,402,AnastaZIuk,2019-12-05T12:32:03Z,"is it for sure necessary? gli reads it and assigns it properly I think, but I do an extra mapping on our API"
354286641,402,AnastaZIuk,2019-12-05T12:34:06Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/402/files#diff-28a7c4ae6aba8ec71c707eede79b01e9R206 if a swizzle is blue, it will be assigned to red so forth, so it seems to me it is correct"
354287972,402,AnastaZIuk,2019-12-05T12:37:40Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/402/files#diff-28a7c4ae6aba8ec71c707eede79b01e9R206 if swizzle of compoment red that will be assigned to it is blue, it will be extra mapped to our format and then assigned to"
354411287,402,devshgraphicsprogramming,2019-12-05T16:21:11Z,"I'd assume that if gli reports `INTERNAL_BGRA8_UNORM` then RGBA = BGRA  and then there's an extra swizzle from gli on top of that

meaning that `INTERNAL_BGRA8_UNORM` needs to become `EF_R8G8B8A8_UNORM` + a swizzle that is

RED = BLUE
GREEN = GREEN
BLUE = RED
ALPHA = ALPHA"
354412093,402,devshgraphicsprogramming,2019-12-05T16:22:38Z,what is this last comment about!?
354413869,402,AnastaZIuk,2019-12-05T16:25:35Z,"But that's what my mapping does, it respects it 
Otherwise why does gli read swizzle on 4 size Vector? "
354424775,402,devshgraphicsprogramming,2019-12-05T16:44:17Z,well but what happens if you have the BGRA format + a custom swizzle? OR will GLI not give you such?
354526276,402,AnastaZIuk,2019-12-05T20:16:25Z,"the default is `RGBA`, without swizzle assumption
standard swizzle vector with size of 4 also assume that it is `RGBA` and it returns enum swizze to each chanel R as [0], G as [1] and so forth I think. In that case, if my format in case statement matches `BGRA` format, we will have to consider that format is got from texture contating loaded parameters, swizzles though. Mapped swizzles (without mapping extraordinary to our API) are in format order therefore, right? 
For instance:

format[4] (where there is r, g, b, a default)
read swizzle on [0] (`r`), GLI returns on it SWIZZLE_BLUE, so I map it and get 'b'  
read swizzle on [1] (`g`), GLI returns on it SWIZZLE_GREEN, so I map it and get 'g'  
read swizzle on [2] (`b`), GLI returns on it SWIZZLE_RED, so I map it and get 'r'  
read swizzle on [3] (`a`), GLI returns on it SWIZZLE_ALPHA, so I map it and get 'a' 

swizzle output -> `BGRA` 
and there is mapping to our API left

> OR will GLI not give you such?

I have to handle it, right"
354562954,402,devshgraphicsprogramming,2019-12-05T21:44:44Z,"just test and see what assumptions are correct, I know nothing about how GLI works, only our library."
361932297,402,devshgraphicsprogramming,2019-12-30T09:06:32Z,btw you opened the issue on a fork of the original repo
361932455,402,devshgraphicsprogramming,2019-12-30T09:07:18Z,get rid of this useles comment
361936162,402,devshgraphicsprogramming,2019-12-30T09:23:44Z,comment needs to go
362605983,402,devshgraphicsprogramming,2020-01-02T19:50:23Z,status? @Przemog1 
362606013,402,devshgraphicsprogramming,2020-01-02T19:50:28Z,status? @Przemog1 
362606035,402,devshgraphicsprogramming,2020-01-02T19:50:34Z,status? @Przemog1 
362606057,402,devshgraphicsprogramming,2020-01-02T19:50:38Z,status? @Przemog1 
362606247,402,devshgraphicsprogramming,2020-01-02T19:51:13Z,status? @Przemog1 
362606298,402,devshgraphicsprogramming,2020-01-02T19:51:22Z,status? @Przemog1 
338339882,387,devshgraphicsprogramming,2019-10-24T00:48:17Z,"you want to add two last parameters `const IGPUBuffer* countBuffer=nullptr, size_t countOffset=0u`, also rename `count` to `maxCount`.

if the parameter buffer if its not null and (GL_ARB_indirect_parameters || Version>=460 ):
1. attach (via state chace) to the indirect parameter binding
2. MultiDraw{Arrays|Elements}IndirectCount variants instead of the usual MDI call

else if parameter buffer not null, scream to high heaven and ouput log error."
338340066,387,devshgraphicsprogramming,2019-10-24T00:49:15Z,this used to work both for ICPU and IGPU meshbuffers.
338340222,387,devshgraphicsprogramming,2019-10-24T00:50:05Z,just include `irr/core/core.h`
338341969,387,devshgraphicsprogramming,2019-10-24T00:59:59Z,"@AnastaZIuk GeometryCreator will need a large refactor

return type should be `ICPUMeshBuffer` with an `ICPURenderpassIndependentPipeline` member that is slightly invalid (no shaders, arbitrary `SBlendParams` and `SRasterizationParams`)"
338727618,387,devshgraphicsprogramming,2019-10-24T18:31:15Z,std::move the buffer binding
338727713,387,devshgraphicsprogramming,2019-10-24T18:31:28Z,std::move the buffer binding
338727929,387,devshgraphicsprogramming,2019-10-24T18:31:57Z,this is fucked should be a unique_ptr
338727987,387,devshgraphicsprogramming,2019-10-24T18:32:05Z,this shoudln't be refcounted
339115545,387,Crisspl,2019-10-25T15:36:45Z,"shouldnt be smart pointer at all, idk what happened here"
339229529,387,devshgraphicsprogramming,2019-10-25T20:36:49Z,I think I nuked this function in `master`
339230498,387,devshgraphicsprogramming,2019-10-25T20:39:36Z,not sure there's a need for this.
339230595,387,devshgraphicsprogramming,2019-10-25T20:39:54Z,why kill the mutators?
339230803,387,devshgraphicsprogramming,2019-10-25T20:40:33Z,why no union?
339231251,387,devshgraphicsprogramming,2019-10-25T20:41:55Z,why `_const` ?
339231921,387,devshgraphicsprogramming,2019-10-25T20:43:57Z,"don't delete, move to legacy"
339233376,387,devshgraphicsprogramming,2019-10-25T20:48:22Z,isn't there an ARB version as well?
339233759,387,devshgraphicsprogramming,2019-10-25T20:49:30Z,"I'd make a `pGlMultiDrawArrayIndirectCountARB` and pick at function call, not exactly safe to assume typedef **PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC** == **PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC**"
339235106,387,devshgraphicsprogramming,2019-10-25T20:53:25Z,"we not only need to eliminate duplicates by pointer, but also duplicates by content."
339235495,387,devshgraphicsprogramming,2019-10-25T20:54:29Z,"adding things to `std::` namespace is UB, we should just provide a hash functor that can be used as a template parameter"
339235704,387,devshgraphicsprogramming,2019-10-25T20:55:04Z,why the virtual inheritance?
339278255,387,Crisspl,2019-10-26T00:44:49Z,yea but same func type. See func loading code
339278370,387,Crisspl,2019-10-26T00:46:15Z,that's why I used cast to *ARB so that gives an error if it's not same. But generally it is
339278538,387,Crisspl,2019-10-26T00:49:03Z,"nah we never did this, might be an extension TODO for eliminateDuplicatea func"
339278695,387,Crisspl,2019-10-26T00:51:44Z,"thought the same but seems like it's common practice in case of has<>, not sure if legal. btw there's a lot of this in irrbaw :p"
339278786,387,Crisspl,2019-10-26T00:53:08Z,"because of parent pipeline, see comments there, it's todo tricky stuff, left because not needed for GL (buildable req)"
339279047,387,Crisspl,2019-10-26T00:58:02Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/387#issuecomment-546553793
339293034,387,devshgraphicsprogramming,2019-10-26T09:05:02Z,because there was never any point to compare contents XD
339293042,387,devshgraphicsprogramming,2019-10-26T09:05:22Z,recently removed some of it.
339293095,387,devshgraphicsprogramming,2019-10-26T09:07:38Z,"explain, doesn't `IPipeline` inherit from `IReferenceCounted` ?"
339319863,387,Crisspl,2019-10-26T23:43:07Z,"https://en.cppreference.com/w/cpp/language/extending_std
""Adding template specializations"" section"
339319883,387,Crisspl,2019-10-26T23:44:18Z,also sample code in std::hash docs encourage this https://en.cppreference.com/w/cpp/utility/hash
339330807,387,devshgraphicsprogramming,2019-10-27T08:29:41Z,"all right, I give up"
339368426,387,Crisspl,2019-10-27T22:43:17Z,"because it doesnt call destructors of its members (deleted destructor). User has to provide user-defined destructor deciding which destructors are called, but it's impossible to tell since `SDescriptorInfo` doesnt know descriptor type"
339368714,387,Crisspl,2019-10-27T22:47:44Z,"no idea why but below code
```
const ICPUMeshBuffer* mb = ...;
mb->getPipeline()->some_const_member_func();
```
tries to call non-const overload and gives me compile error. So this is kinda dirty workaround but idk whats going on"
339369182,387,Crisspl,2019-10-27T22:55:58Z,"nah, those functions are not needed, just blob type"
339429803,387,devshgraphicsprogramming,2019-10-28T07:43:56Z,"do
`const_cast<const asset::IRenderpassIndependentPipeline*>(mb->getPipeline())->some_const_member_func();`

tried that?"
339430202,387,devshgraphicsprogramming,2019-10-28T07:45:23Z,@Crisspl didn't I?
339430323,387,devshgraphicsprogramming,2019-10-28T07:45:51Z,@AnastaZIuk have you seen this comment?
339435561,387,devshgraphicsprogramming,2019-10-28T08:05:22Z,"Ekhm, there's a `desc` just on the line above, could add a `getType()` function to it.

The you could switch/if in the destructor to decide which union to kill.

Would save us from a lot of `dynamic_cast`ing as well.


### Sidenote on performance

To get a performance increase, it will make sense to re-use the memory in `SWriteDescriptorSet::info` (so Vulkan backend doesn't need to allocate arrays of `VkDescriptorImageInfo`, `VkDescriptorBufferInfo` or `VkBufferView`)

Hence `IDescriptorSet::updateDescriptorSet` should **consume** the entire `_descWrites` parameter and destroy the `SWriteDescriptorSet` objects inside, so `SWriteDescriptorSet::info` should come back from the function as just garbage memory ready to be deallocated."
339546876,387,Crisspl,2019-10-28T12:55:38Z,"maybe i messed up the merge a little, doesnt really matter since its inside #ifndef"
339548462,387,Crisspl,2019-10-28T12:59:22Z,">Ekhm, there's a desc just on the line above, could add a getType() function to it.

we cant because one irrbaw class doesnt map to one particular desc type. But what we can do is a function telling ""descriptor category"" - i.e. what union member to use."
339559185,387,Crisspl,2019-10-28T13:24:11Z,"nah sorry its just `mb->getPipeline()` and the error is exactly 

>'irr::asset::ICPURenderpassIndependentPipeline *irr::asset::ICPUMeshBuffer::getPipeline(void)': cannot convert 'this' pointer from 'const irr::asset::ICPUMeshBuffer' to 'irr::asset::ICPUMeshBuffer &

whatever, i just made a const overload in ICPUMesBuffer overlapping the one from IMeshBuffer<....>. still dirty but at least theres no weird `getPipeline_const` now"
339562085,387,Crisspl,2019-10-28T13:30:30Z,">Sidenote on performance

i dont get it at all"
339595882,387,devshgraphicsprogramming,2019-10-28T14:32:29Z,this makes me ask how much you could have messed up the merge.
339597042,387,devshgraphicsprogramming,2019-10-28T14:34:20Z,"> i dont get it at all 

Nvm leave it till later."
339597426,387,devshgraphicsprogramming,2019-10-28T14:34:59Z,"> can do is a function telling ""descriptor category"" - i.e. what union member to use.

Let's do that."
339597913,387,devshgraphicsprogramming,2019-10-28T14:35:52Z,"> whatever, i just made a const overload in ICPUMesBuffer overlapping the one from IMeshBuffer<....>. still dirty but at least theres no weird getPipeline_const now

Clean enough for me."
339666811,387,devshgraphicsprogramming,2019-10-28T16:33:07Z,@Crisspl  ?
339724358,387,Crisspl,2019-10-28T18:27:23Z,"no, it doesnt"
339725062,387,Crisspl,2019-10-28T18:29:02Z,virtual inheritance because its base for ICPUpipeline and ICPUpipeline also inherits from IAsset and IAsset inherits from irefcounted
339791129,387,devshgraphicsprogramming,2019-10-28T21:02:25Z,shouldn't `IPipeline` inherit virtually from `IReferenceCounted` instead then?
339802565,387,AnastaZIuk,2019-10-28T21:31:20Z,"No I haven't, but I'm gonna see it ASAP"
339941118,387,devshgraphicsprogramming,2019-10-29T08:27:43Z,@Crisspl will merge when IPipeline inherits from IReferenceCounted
340017079,387,devshgraphicsprogramming,2019-10-29T11:18:45Z,fuck it I'll do it myself.
340023324,387,Crisspl,2019-10-29T11:34:28Z,erm sorry 
340024617,387,devshgraphicsprogramming,2019-10-29T11:38:02Z,"no problem, I've decided to do #148  today."
341487796,387,AnastaZIuk,2019-11-01T08:32:10Z,"@devshgraphicsprogramming okay, I have already read whole PR
GeometryCreator needs refactoring and meshbuffers in certain loaders need non-null pipeline
I will deal with PLY and X loaders first and then gonna fill them up
"
341537608,387,devshgraphicsprogramming,2019-11-01T11:30:35Z,first fix master on the old pipeline.
341541153,387,AnastaZIuk,2019-11-01T11:44:44Z,Sure
392578773,437,devshgraphicsprogramming,2020-03-14T11:39:59Z,"if you're hashing in 64bits then you need 64bit long prime numbers (big big numbers)

Also make the hash 2D, cause you'll be storing projections"
392578793,437,devshgraphicsprogramming,2020-03-14T11:40:20Z,`float(std::numeric_limits<uint64_t>::max())`
392578814,437,devshgraphicsprogramming,2020-03-14T11:40:44Z,no need for the `&` operation
392578896,437,devshgraphicsprogramming,2020-03-14T11:41:47Z,these must store a `struct {uint16_t[3]};` not a uint32_t
392579064,437,devshgraphicsprogramming,2020-03-14T11:45:18Z,"why are you inserting into the cache what you've already found? Your key needs to be `projFitting` that you've tried searching with

For the `std::vector::insert` function the iterator is a placement hint."
392579310,437,devshgraphicsprogramming,2020-03-14T11:49:22Z,"First of all use `fittingVector` not `normal`, we save space by noting the symmetry and using a `abs(normal)` for the fitting and caching (after fit is found or computed the function should restore the signs).

Should be applied to the search result too now
https://github.com/buildaworldnet/IrrlichtBAW/pull/437/files#diff-6e17f886f5c5ef84f97cb8acf20c9926R188

you want to take the `fittingVector` and transform it into a 2d surface projection `projFitting`

my suggestion is barycentric coordinate of the intersection of a line originating at (0,0,0) in direction of `fittingVector` with the triangle defined by vertices (0,0,1),(0,1,0),(1,0,0)"
394016557,437,Przemog1,2020-03-17T22:53:23Z,will take care of it when I'm done with cache
394016823,437,Przemog1,2020-03-17T22:54:12Z,oops
394626323,437,devshgraphicsprogramming,2020-03-18T20:40:41Z,"ok, thanks for pointing out!"
394648771,437,devshgraphicsprogramming,2020-03-18T21:25:37Z,update the comment that its actually `v=Pz`
394648931,437,devshgraphicsprogramming,2020-03-18T21:25:58Z,on the whole looks good!
394649074,437,devshgraphicsprogramming,2020-03-18T21:26:19Z,what oops?
395496909,437,devshgraphicsprogramming,2020-03-20T08:39:00Z,bigger primes!
395755589,437,Przemog1,2020-03-20T16:33:27Z,"may be not the best choice, I will try to figure it out"
395762714,437,devshgraphicsprogramming,2020-03-20T16:45:29Z,Vector8u ?
395764229,437,Przemog1,2020-03-20T16:48:01Z,.. right
396360487,437,devshgraphicsprogramming,2020-03-23T10:48:20Z,just remove these cases and let them drop to default.
396370927,437,devshgraphicsprogramming,2020-03-23T11:07:11Z,"and remove the enums from here
https://github.com/buildaworldnet/IrrlichtBAW/blob/6b7aeccf2d8030799992b651fcd5546d10f79e48/src/irr/asset/CMeshManipulator.cpp#L1318"
396830110,437,Przemog1,2020-03-24T00:01:43Z,I wonder if I should make these static
396961078,437,devshgraphicsprogramming,2020-03-24T08:01:09Z,"export to buffer, make it take an `SBufferBinding<ICPUBuffer>` as input and write to the correct offset in the buffer (return error is not enough space)"
396961301,437,devshgraphicsprogramming,2020-03-24T08:01:33Z,actually take an `SBufferBinding` its because it would be handy to support an offset into the buffer from which to read.
396961496,437,devshgraphicsprogramming,2020-03-24T08:01:55Z,this is still an issue
396963372,437,devshgraphicsprogramming,2020-03-24T08:05:50Z,keep these structs in `CQuantNormalCache` don't want them to pollute the global namespace
397076118,437,devshgraphicsprogramming,2020-03-24T11:17:59Z,"dont make the caches static, I hate globals!"
397076201,437,devshgraphicsprogramming,2020-03-24T11:18:07Z,"dont make the caches static, I hate globals!"
397091240,437,devshgraphicsprogramming,2020-03-24T11:46:10Z,there should be a requirement that the input to this function already be a an absolute value vector
397091547,437,devshgraphicsprogramming,2020-03-24T11:46:43Z,because `bestFit` returned will be an abs value vector
397092303,437,devshgraphicsprogramming,2020-03-24T11:48:05Z,"you could template these functions and turn them into one, by templating on the cache type (enum or stored value type)"
397092886,437,devshgraphicsprogramming,2020-03-24T11:49:15Z,"these functions are practically identical, the only thing that changes is the number of quantization bits, that you could deduce them from the template type of an enum or stored value type"
397298483,437,Przemog1,2020-03-24T16:38:54Z,@devshgraphicsprogramming should i make this class singleton then? I don't think there is need for more than one instance of this class
397360718,437,devshgraphicsprogramming,2020-03-24T18:08:47Z,"no singletons, no globals, user might want to make bazillion instances of asset manager (and ergo normal caches)"
398982131,437,Przemog1,2020-03-27T01:16:08Z,"Since `quantizeNormal16_16_16` returns uint64_t this solution would require different return type as well:

```
template <E_QUANT_NORM_CACHE_TYPE Type, typename ReturnType>
ReturnType quantizeNormal(const core::vectorSIMDf& normal);
```

and usage would look smth like this:

```
quantizeNormal<E_QUANT_NORM_CACHE_TYPE::Q_2_10_10_10, uint32_t>(vec) ;
quantizeNormal<E_QUANT_NORM_CACHE_TYPE::Q_8_8_8, uint32_t>(vec) ;
quantizeNormal<E_QUANT_NORM_CACHE_TYPE::Q_16_16_16, uint64_t>(vec) ;
```

It's error prone, and kinda wierd imo, I know current solution violates DRY rule but personally i would leave it as it is.."
399046412,437,Przemog1,2020-03-27T05:43:04Z,not after recent changes
399113462,437,devshgraphicsprogramming,2020-03-27T08:49:47Z,"Try this

```cpp
template<E_QUANT_NORM_CACHE_TYPE CacheType>
struct vector_for_cache;

template<> struct vector_for_cache<Q_8_8_8>
{
   typedef type uint32_t;
};
template<> struct vector_for_cache<Q_2_10_10_10>
{
   typedef type uint32_t;
};
template<> struct vector_for_cache<Q_16_16_16>
{
   typedef type uint32_t;
};

template<E_QUANT_NORM_CACHE_TYPE CacheType>
using vector_for_cache_t = typename vector_for_cache<CacheType>::type;

template<E_QUANT_NORM_CACHE_TYPE CacheType>
vector_for_cache_t<CacheType> quantizeNormal(const core::vectorSIMDf& normal);
```"
399114901,437,devshgraphicsprogramming,2020-03-27T08:52:37Z,"instead, maybe make a boolean/flag in `loadNormalQuantCacheFromBuffer` whether to replace or merge/add the contents"
399115441,437,devshgraphicsprogramming,2020-03-27T08:53:42Z,you can put it next to `SBufferBinding`
399116001,437,devshgraphicsprogramming,2020-03-27T08:54:44Z,this should be a method of the `CQuantNormalCache` not its owner.
399130463,437,devshgraphicsprogramming,2020-03-27T09:21:18Z,still
399136863,437,devshgraphicsprogramming,2020-03-27T09:32:19Z,and these should also be methods of `CQuantNormalCache`
399646749,437,Przemog1,2020-03-28T10:33:03Z,@devshgraphicsprogramming is it ok?
399647082,437,Przemog1,2020-03-28T10:37:04Z,"https://github.com/Przemog1/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/IMeshManipulator.h#L374
"
399650667,437,devshgraphicsprogramming,2020-03-28T11:18:34Z,just plain old pointer and  non-static member function
399650703,437,devshgraphicsprogramming,2020-03-28T11:18:55Z,STOP WITH THE STATICS!
399651358,437,Przemog1,2020-03-28T11:26:31Z,that will complicate things but ok
399704544,437,devshgraphicsprogramming,2020-03-28T20:13:16Z,"careful about an expression like `absVec >> quantizationBits * 2` the bitwise operators have weird precedence, its better to write `absVec >> (quantizationBits * 2)`"
399704768,437,devshgraphicsprogramming,2020-03-28T20:15:17Z,16
399704797,437,devshgraphicsprogramming,2020-03-28T20:15:35Z,template those
399704882,437,devshgraphicsprogramming,2020-03-28T20:16:43Z,"remember about the `abs` on the normal, so the input makes sense (moving it out of the function"
399704961,437,devshgraphicsprogramming,2020-03-28T20:17:35Z,remember about the fallback if `_params.quantNormalCache==nullptr` (get the default from assetManager->getMeshManipulator()->getNormalCache())
399705004,437,devshgraphicsprogramming,2020-03-28T20:17:55Z,"you can keep it as a member, just not a static member"
401237788,437,devshgraphicsprogramming,2020-03-31T21:53:12Z,do not const_cast its dangerous
401237994,437,devshgraphicsprogramming,2020-03-31T21:53:34Z,just create new parameters or something
401238675,437,devshgraphicsprogramming,2020-03-31T21:54:59Z,make `IMeshManipulator* const meshManipulatorToUse` last parameter (as `IMeshManipulator* meshManipulatorOverride=nullptr`)
401239087,437,devshgraphicsprogramming,2020-03-31T21:55:54Z,`(meshManipulatorToUse ? meshManipulatorToUse:assetManager->getMeshManipulator())->getQuantNormalCache()`
401239370,437,devshgraphicsprogramming,2020-03-31T21:56:35Z,"if its nulll, you just take the default one from the asset manager !"
401603145,437,Przemog1,2020-04-01T13:12:08Z,"I do it here:
https://github.com/Przemog1/IrrlichtBAW/blob/shader_pipeline/include/irr/asset/IAssetManager.h#L260"
287615503,301,devshgraphicsprogramming,2019-05-26T21:39:41Z,"order in which you try them is important, you dont want to try a parent directory before a deeper (more matching) one"
288333112,301,devshgraphicsprogramming,2019-05-28T22:53:03Z,why ditch the smart_ptr ?
288335799,301,Crisspl,2019-05-28T23:04:44Z,gives compile errors with abstract classes
288336605,301,devshgraphicsprogramming,2019-05-28T23:08:31Z,"has the same syntax as 
https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique
you don't need the new, just the args"
288336794,301,devshgraphicsprogramming,2019-05-28T23:09:23Z,`IncludeHandler = core::make_smart_refctd_ptr<asset::CIncludeHandler>(FileSystem);`
288772808,301,Crisspl,2019-05-29T21:17:39Z,"ah, my bad, it was because i wrote core::make_smart_refctd_ptr<asset:: **IIncludeHandler** >"
288773358,301,Crisspl,2019-05-29T21:19:16Z,"But `core::make_smart_refctd_ptr<asset::CIncludeHandler>(FileSystem, core::dont_grab);` doesnt work, it wants to put dont_grab into CIncludeHandler's constructor :/"
288781871,301,devshgraphicsprogramming,2019-05-29T21:45:09Z,you don't need a `core::dont_grab` I don't think so
288782105,301,devshgraphicsprogramming,2019-05-29T21:45:50Z,if you do then I've fucked up the definition of `template <class T> ...... core::make_smart_refctd_ptr`
288782494,301,devshgraphicsprogramming,2019-05-29T21:47:09Z,and you've pushed :D
288787426,301,Crisspl,2019-05-29T22:03:53Z,">you don't need a core::dont_grab I don't think so

well, it's easy to workaround (just drop after creating smart ptr), but there's
```
	template< class T, class... Args >
	inline smart_refctd_ptr<T> make_smart_refctd_ptr(Args&& ... args, dont_grab_t t)
```
so seems like it's supposed to work. But I don't know why it doesn't or how to do it other way

`dont_grab` is needed because while creating a ref-counted object it obviously has ref-count=1 and after creating smart ptr, it then has ref-count=2. But smart pointer's dtor drops only once so it's a memleak"
288787787,301,Crisspl,2019-05-29T22:05:23Z,fuuuu.. i'll remove and force push
288789050,301,devshgraphicsprogramming,2019-05-29T22:10:03Z,`make_smart_refctd_ptr` should just `dont_grab` by default 
288789961,301,devshgraphicsprogramming,2019-05-29T22:13:41Z,"I fucked up bigtime, the only definition of `make_smart_refctd_ptr` should have been:

```cpp
template< class T, class... Args >
	inline smart_refctd_ptr<T> make_smart_refctd_ptr(Args&& ... args)
	{
		T* obj = new T(std::forward<Args>(args)...);
		smart_refctd_ptr<T> smart(obj,dont_grab);
		return smart;
}
```"
288790709,301,Crisspl,2019-05-29T22:16:24Z,"ah, ok, so i'll push it to this branch"
289118371,301,devshgraphicsprogramming,2019-05-30T18:37:59Z,rg8_snorm
289118485,301,devshgraphicsprogramming,2019-05-30T18:38:17Z,use a macro to make it configurable
289118826,301,Crisspl,2019-05-30T18:39:12Z,"thx, no idea how it worked"
289119173,301,Crisspl,2019-05-30T18:40:00Z,smem size? But what fot?
289119480,301,devshgraphicsprogramming,2019-05-30T18:40:47Z,macro like `(18*(threadID.y+1) + threadID.x+1)` should work much better
289119951,301,Crisspl,2019-05-30T18:42:02Z,what's the difference?
289120276,301,devshgraphicsprogramming,2019-05-30T18:42:55Z,don't do the if-statements
289120480,301,devshgraphicsprogramming,2019-05-30T18:43:28Z,you're missing the factor of half (because you're taking the gradient across 2 pixels not 1)
289120658,301,devshgraphicsprogramming,2019-05-30T18:43:56Z,also why not apply `uHeightScaleFactor` at the end?
289120968,301,devshgraphicsprogramming,2019-05-30T18:44:44Z,unbind this later!
289121132,301,devshgraphicsprogramming,2019-05-30T18:45:08Z,this needs to be reset to previous value
289121414,301,devshgraphicsprogramming,2019-05-30T18:45:47Z,why did the fix get reverted?
289121529,301,devshgraphicsprogramming,2019-05-30T18:46:03Z,fix got reverted?
289122310,301,devshgraphicsprogramming,2019-05-30T18:47:59Z,"you've coded the function as-if there's real SIMD in a single GPU thread... so there are useless multiplies here also a cast to int for no reason.

The upside of a macro is that it can function like a template ;) (doesn't care if you use uint or int)"
289122617,301,devshgraphicsprogramming,2019-05-30T18:48:48Z,one day when all devices support 1024-sized work groups....
289123066,301,Crisspl,2019-05-30T18:49:56Z,Commit message ;) crashes on fence-related code deep in the engine and can't figure why
289123405,301,devshgraphicsprogramming,2019-05-30T18:50:41Z,"because the fence stuff worked with a fucked up reference count ;)
"
289124705,301,devshgraphicsprogramming,2019-05-30T18:54:02Z,"shit, we're leaking fences
"
289125107,301,Crisspl,2019-05-30T18:54:55Z,"well, i thought `dot` will make it more SIMD. The cast is because my driver is a little retarded and while compiling without cast, gives errors like `dot` is returning always float, same thing with `mix`.

>(doesn't care if you use uint or int)

well, that's actually source of i-dont-know-whats-going-on bugs :P
"
289125505,301,Crisspl,2019-05-30T18:56:02Z,?? how?
289125705,301,Crisspl,2019-05-30T18:56:33Z,"oh, yea, thanks"
289126642,301,Crisspl,2019-05-30T18:58:53Z,"because now it works on smaller numbers = possibly better precision. Generally i think that way, but here no point"
289132567,301,devshgraphicsprogramming,2019-05-30T19:15:01Z,if your compiler is complaining about dot being a float then you shouldn't use it... it might actually calc the index as a float XD
289134646,301,Crisspl,2019-05-30T19:20:48Z,"it probably does, but they're integer's small enough to be representable on 32bit float"
289136831,301,devshgraphicsprogramming,2019-05-30T19:26:41Z,"ok:
1) Your texture coordinate is wrong, you'd need to offset by 0.5 of a pixel
2) You should use texelFetch instead anyway.
3) Best way to do this is like this

```cpp
for (uint vid=gl_LocalInvocationIndex; vid<SMEM_SIZE; vid+=WORK_GROUP_TOTAL_SIZE)
{
   ivec2 texel = gl_WorkGroupID.xy*gl_WorkGroupSize.xy-ivec2(1,1);
   int row = vid/SMEM_DIM_X;
   texel.x += vid-row*SMEM_DIM_X;
   texel.y += row;
   smem[vid] = texelFetch(bumpMapSampler,texel,0).r;
}
```

compiler should unroll the loop and you will just get the texel calculation math + 1 conditional texel fetch"
289137641,301,devshgraphicsprogramming,2019-05-30T19:28:54Z,float precision is only an issue if your operands to ADD or SUB differ vastly in magnitude
289138513,301,devshgraphicsprogramming,2019-05-30T19:31:24Z,but converting from float to int and back is not free
289182342,301,Crisspl,2019-05-30T21:35:30Z,"hm smart
But `texelFetch` require that bump map and derivative map are the same size + nothing-doing threads if the size is not multiple of 16 (if-statement needed here). Filtering is so costly? "
289660655,301,devshgraphicsprogramming,2019-06-02T22:40:23Z,"re-use `smem`, by basically doubling the smem required you'll reduce occupancy greatly"
289660804,301,devshgraphicsprogramming,2019-06-02T22:45:24Z,"bump map and drivative map should absolutely be the same size, because from frequency analysis theory (mixing fourier and Shannon Nyquist):
1. A bump-map of resolution N contains frequencies of at most K Hz
2. A derivative applied before a fourier transform does introduces a mutliplicative term to the original fourier transform, hence if the original did not contain frequencies above K, then the fourier of the derivative will also not contain any frequencies above K
3. Hence if derivative map is lower resolution them it looses detail or if its higher its wasting pixels because the signal can be reconstructed anyway from a lower amount of samples"
418334287,483,devshgraphicsprogramming,2020-04-30T22:55:06Z,"`canDeferredFlush` does not invalidate the cache, `canDeferredFlush` is a property of `IDriverFence` and it tells you whether the `waitCPU` method can accept a `flush=true` parameter (which performs an implicit `glFlush` on the context you've placed the fence on just before you actually start witing on the fence).

A pipeline/context flush (`glFlush`) flushes the driver-CPU-side queue onto the GPU device for execution, if you place a fence but don't flush you can end up in a deadlock, basically each time you call `waitCPU` it will time-out because the work has not been sent to the GPU for execution 100% (its stuck in transit).

So you either need to perform a `glFlush` (but on the same thread+context that placed the fence) after placing the fence but before `waitCPU` (on any thread) or use that implicit flush functionality (but only if setting thread is the waiting thread), see the documentation for `waitCPU` ."
418334855,483,devshgraphicsprogramming,2020-04-30T22:56:54Z,"a common trick for creating an `ICPUBuffer` over an already existing `void*` array without any memcpy or taking over the memory ownership is to use a `CCustomAllocatorCPUBuffer` with a `null_allocator` that adopts memory (it is a bit counter intuitive because adopt=take ownership, but a null allocator doesn't do anything, even free the memory, so you're all good)"
418335391,483,devshgraphicsprogramming,2020-04-30T22:58:39Z,it can actually store both raw GLSL to be compiled or already compiled (but unspecialized) SPV
418335498,483,devshgraphicsprogramming,2020-04-30T22:59:00Z,or unspecialized SPIR-V
418335564,483,devshgraphicsprogramming,2020-04-30T22:59:13Z,plesase cover specialization constants
418335918,483,devshgraphicsprogramming,2020-04-30T23:00:18Z,"mention that any overlapping regions shall be copied into the output in exactly the order they were when specifying the image (last region copies into image last, overwriting any overlapped pixels)"
418336407,483,devshgraphicsprogramming,2020-04-30T23:01:47Z,state that irrlichtBaW limits push constant size to 128 bytes
418336686,483,devshgraphicsprogramming,2020-04-30T23:02:39Z,"not options, bindings and set numbers of descriptors as well as the descriptor types"
418336985,483,devshgraphicsprogramming,2020-04-30T23:03:38Z,none of that stuff is here cause its an ADT base for concrete graphics and compute pipelines
418337624,483,devshgraphicsprogramming,2020-04-30T23:05:23Z,"the correct function to use are these:
https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/IDriver.h#L147

its flush when CPU is writing and GPU is reading
invalidate when CPU is reading and GPU is writing

if you're not confident controlling cache coherency manually then use the COHERENT memory type when creating mappable `IGPUBuffer`s"
418341168,483,devshgraphicsprogramming,2020-04-30T23:16:38Z,"give examples of how to set up the `SBinding` array for a given GLSL `layout(set=X,binding=Y) descriptorType descriptorName[Z]`"
418341508,483,devshgraphicsprogramming,2020-04-30T23:17:44Z,"if you don't know what filter you'll be executing at runtime, you can use the polymorphic interface and operate on `IImageFilter` pointers or references"
418341801,483,devshgraphicsprogramming,2020-04-30T23:18:40Z,"actually there is complete freedom on filters inputs and outputs, this is why each defines (or at least typedefs) its own `state` 

There are input only, output only (such as fill) or input output filters."
418342073,483,devshgraphicsprogramming,2020-04-30T23:19:29Z,"Utility filter isn't an actual filter you can use, its a base for some of the filters so its less repeating code"
418342809,483,devshgraphicsprogramming,2020-04-30T23:21:43Z,rephrase avoid `current` and `texel buffer`
418342890,483,devshgraphicsprogramming,2020-04-30T23:21:59Z,polymorphism
418343790,483,devshgraphicsprogramming,2020-04-30T23:24:43Z,"nope, rounds up measurements in `texels` to mutliples of block sizes"
418343859,483,devshgraphicsprogramming,2020-04-30T23:24:59Z,its not an inverse
418344248,483,devshgraphicsprogramming,2020-04-30T23:26:16Z,"nope, it will return 64 for 64 with a 4x4

But for a 1,2,3 will return 4, it rounds up.. its quite useful to determine actual mipmap sizes of BC compressed mip map levels or textures not aligned to block size (gives you the size of the overlap)"
418344497,483,devshgraphicsprogramming,2020-04-30T23:26:57Z,"nope, converts measurements in `texels` to `blocks` while rounding up at the same time"
418344555,483,devshgraphicsprogramming,2020-04-30T23:27:09Z,rewrite
418344832,483,devshgraphicsprogramming,2020-04-30T23:28:06Z,"converted values will be written to texel buffer, texel buffer won't be converted, its already in that format, but doesn't have data inside that makes sense"
418951556,483,AnastaZIuk,2020-05-02T12:14:39Z,adjusted in following commit
418952610,483,AnastaZIuk,2020-05-02T12:25:09Z,adjusted in following commit
418953159,483,AnastaZIuk,2020-05-02T12:30:02Z,adjusted in following commit
418953276,483,AnastaZIuk,2020-05-02T12:31:15Z,adjusted in following commit
418957405,483,AnastaZIuk,2020-05-02T13:11:06Z,adjusted in following commit
418958079,483,AnastaZIuk,2020-05-02T13:18:09Z,adjusted in following commit
418958351,483,AnastaZIuk,2020-05-02T13:20:35Z,adjusted in following commit
418958763,483,AnastaZIuk,2020-05-02T13:24:47Z,adjusted in following commit
418958977,483,AnastaZIuk,2020-05-02T13:26:52Z,"yeah, I have written it. So where should I put that information?"
418961125,483,AnastaZIuk,2020-05-02T13:46:54Z,adjusted in following commit
418961469,483,AnastaZIuk,2020-05-02T13:50:20Z,adjusted in following commit
418961545,483,AnastaZIuk,2020-05-02T13:51:15Z,deleted
418963173,483,AnastaZIuk,2020-05-02T14:07:30Z,adjusted in following commit
418963253,483,AnastaZIuk,2020-05-02T14:08:26Z,adjusted in following commit
418963973,483,AnastaZIuk,2020-05-02T14:16:03Z,adjusted in following commit
418964040,483,AnastaZIuk,2020-05-02T14:16:47Z,adjusted in following commit
418964720,483,AnastaZIuk,2020-05-02T14:23:18Z,adjusted in following commit
418964982,483,AnastaZIuk,2020-05-02T14:25:32Z,adjusted in following commit
418965303,483,AnastaZIuk,2020-05-02T14:29:04Z,adjusted in following commit
418965756,483,AnastaZIuk,2020-05-02T14:33:43Z,adjusted in following commit
418966019,483,AnastaZIuk,2020-05-02T14:36:14Z,adjusted in following commit
419113104,483,devshgraphicsprogramming,2020-05-03T14:41:55Z,nope there's a separate function for invalidation
419113486,483,devshgraphicsprogramming,2020-05-03T14:45:06Z,you haven't covered what a specialization constant is
432380933,483,devshgraphicsprogramming,2020-05-29T09:56:22Z,"put the relevant stuff about graphics in the graphics pipeline base class header, and the stuff about compute in the compute pipeline base class header"
491054008,483,AnastaZIuk,2020-09-18T16:14:29Z,corrected in following commit
491073301,483,AnastaZIuk,2020-09-18T16:51:03Z,corrected in following commit
491075826,483,AnastaZIuk,2020-09-18T16:55:55Z,corrected
310355875,340,devshgraphicsprogramming,2019-08-03T16:01:22Z,register the loader with asset manager to comply with req. 0 from #340 
310355900,340,devshgraphicsprogramming,2019-08-03T16:02:29Z,"if you register loader with asset manager, you can just load by path"
310356433,340,devshgraphicsprogramming,2019-08-03T16:22:59Z,looks like a candidate for a static function ?
310356437,340,devshgraphicsprogramming,2019-08-03T16:23:15Z,why do you need to track the type?
310356755,340,devshgraphicsprogramming,2019-08-03T16:39:32Z,`ParserLog::mitsubaLoaderError` what's this?
310356772,340,devshgraphicsprogramming,2019-08-03T16:40:02Z,explain?
310356797,340,devshgraphicsprogramming,2019-08-03T16:40:59Z,override + final
310356905,340,devshgraphicsprogramming,2019-08-03T16:45:27Z,shouldn't it always be `_atts[2]==nullptr` and `_atts[0] && _atts[1]` ?
310356946,340,devshgraphicsprogramming,2019-08-03T16:47:13Z,ok if you're going to use `new` that heavily just spawn a context for the current loading session (like in BAW file loader) and give that context a linear allocator to use to do placement-new
310356975,340,devshgraphicsprogramming,2019-08-03T16:48:35Z,or do you seriously need to implement the simple element stuff to dynamically create `IElement`s ?
310357772,340,Przemog1,2019-08-03T17:19:08Z,I dont think I will need that anywhere else
310358031,340,devshgraphicsprogramming,2019-08-03T17:30:29Z,"if it does not need the internal state of an object (does not need `this`) if should always be a static.

Bonus point, you can have a private static."
310358043,340,Przemog1,2019-08-03T17:31:08Z,"to make downcasting easier, I do a lot of downcasting, especially in processChildData functions.

Just like in this example:
https://github.com/Przemog1/IrrlichtBAW/blob/mmitsuba_loader/ext/MitsubaLoader/CElementShapeOBJ.cpp#L59"
310358102,340,devshgraphicsprogramming,2019-08-03T17:32:53Z,"but matrix is always 4x4 or 3x4 (with implicit 0,0,0,1 last row). This is matrix Type not element type!"
310358403,340,Przemog1,2019-08-03T17:43:20Z,"it just prints ""Mitsuba loader error:\nInvalid .xml file structure: '"" followed by its only parameter `errorMessage`:

https://github.com/Przemog1/IrrlichtBAW/blob/mmitsuba_loader/ext/MitsubaLoader/ParserUtil.cpp#L29

I think it needs better name and also I will use there `Printer::log` instead of `Printer::print`

"
310358445,340,devshgraphicsprogramming,2019-08-03T17:45:08Z,so if you have `CElementMatrix` why do you keep a separate transform here?
310358464,340,devshgraphicsprogramming,2019-08-03T17:45:50Z,ok I see this as todo
310358475,340,devshgraphicsprogramming,2019-08-03T17:46:18Z,use smart pointer
310358628,340,devshgraphicsprogramming,2019-08-03T17:53:18Z,"You're gonna be wanting to be using a variant of this one
https://github.com/buildaworldnet/IrrlichtBAW/blob/2bf1c6a3e3518068c12433d560c23c2e9075b0c0/include/irr/asset/IAssetManager.h#L215

hierarchy is as follows:
- 0 for root level asset (an ICPUMesh for now, we have no scene object)
- 1 for whatever ICPUMesh contains, so meshbuffers

So the hierarchy would be 0u, 1u in the future if we make an ICPUScene object or something like that."
310358655,340,devshgraphicsprogramming,2019-08-03T17:54:42Z,"your include paths on extension headers are all wrong...

See RULE nr. 5 in the readme
https://github.com/buildaworldnet/IrrlichtBAW/tree/master/ext"
310359116,340,Przemog1,2019-08-03T18:12:54Z,"if .xml file structure is correct, then _atts[0] is always ""value"" and _atts[1] is a string consisting of 16 floats"
310359214,340,devshgraphicsprogramming,2019-08-03T18:18:12Z,ParserUtil.cpp less inline functions
310359316,340,Przemog1,2019-08-03T18:22:51Z,it is not implemented yet
310359325,340,Przemog1,2019-08-03T18:23:23Z,"sorry, I should leave some comment about that
"
310359904,340,devshgraphicsprogramming,2019-08-03T18:45:00Z,YES
310359963,340,devshgraphicsprogramming,2019-08-03T18:47:06Z,"but still, explain?"
310366655,340,Crisspl,2019-08-04T00:53:38Z,where this rule come from actually?
310381788,340,devshgraphicsprogramming,2019-08-04T10:59:24Z,"the justification is that the extension should not fuck-up your build system because you didn't add its directory to the search path.

Imagine that your project includes extension files, but extension files include their peers with relative paths, you're gonna have a fuck-up when two extensions have the same public include filenames, unless full paths relative to repo's `./include/` are specified"
314891868,340,devshgraphicsprogramming,2019-08-16T21:13:06Z,"there's a thing called valiation, someone might be trying to feed the loader a bad .XML and the loader should not crash because of that"
314892242,340,devshgraphicsprogramming,2019-08-16T21:14:25Z,what did we agree on in the end?
314892306,340,devshgraphicsprogramming,2019-08-16T21:14:37Z,you should be using the overload!
314896456,340,devshgraphicsprogramming,2019-08-16T21:29:52Z,what about alpha?
314896623,340,devshgraphicsprogramming,2019-08-16T21:30:31Z,explain?
314897985,340,devshgraphicsprogramming,2019-08-16T21:35:23Z,why?
314898996,340,devshgraphicsprogramming,2019-08-16T21:39:27Z,no need if going to provide metadata
314899015,340,devshgraphicsprogramming,2019-08-16T21:39:34Z,use smart pointer?
315012808,340,Przemog1,2019-08-19T01:09:36Z,"needed that for ""baking"" mesh transforms, but it is irrelevant now"
316682812,340,devshgraphicsprogramming,2019-08-22T13:39:22Z,what's happened here?
316684051,340,devshgraphicsprogramming,2019-08-22T13:41:50Z,@Crisspl and @Przemog1 you know that there's a `core::make_smart_refctd_ptr` so you don't need to use the nasty `dont_grab` constructor
316685295,340,Przemog1,2019-08-22T13:44:09Z,"it is probably because I copied and pasted entire code from my ""backup file"""
317288569,340,devshgraphicsprogramming,2019-08-23T20:21:13Z,"what are you doing here?
"
317288975,340,devshgraphicsprogramming,2019-08-23T20:22:35Z,"the convention here is to return the raw pointer, we only want to return a `smart_refctd_ptr` if we are sure that the callee wants to hold onto the reference for a longer time."
317310594,340,Przemog1,2019-08-23T21:39:12Z,"here i retrive mesh from shape element
"
317310832,340,Przemog1,2019-08-23T21:40:10Z,then this retrived mesh is added to the array which contain all loaded meshes
317325602,340,devshgraphicsprogramming,2019-08-23T22:57:23Z,I meant ref-counting-wise?
339260993,390,devshgraphicsprogramming,2019-10-25T22:34:36Z,you only want to be loading `.glsl` files
339263104,390,devshgraphicsprogramming,2019-10-25T22:46:04Z,"try rendering an attribute-less mesh (like in Vulkan examples)

move the `vertices` array to the vertex shader and index it with `gl_VertexID`

All this code is overkill for splatting points accoridng to a BSDF"
339263251,390,devshgraphicsprogramming,2019-10-25T22:46:41Z,"if you set `EIT_UNKNOWN` then you can create a mesh without index buffer, Index-Count becomes vertex count"
339263358,390,devshgraphicsprogramming,2019-10-25T22:47:14Z,you need `layout(location = 0)` for this
339263399,390,devshgraphicsprogramming,2019-10-25T22:47:28Z,we use `#version 430 core`
339292272,390,achalpandeyy,2019-10-26T08:37:21Z,"As mentioned in the comment above, this was just to test if the custom shaders are working as intended. It will not make it to the final version."
339292349,390,achalpandeyy,2019-10-26T08:38:46Z,Same as above.
339307382,390,devshgraphicsprogramming,2019-10-26T16:54:07Z,"you could use a `smart_refctd_ptr` you know, if only `irr::ShaderManager` inherited from `irr::core::ReferenceCounted`"
339307405,390,devshgraphicsprogramming,2019-10-26T16:54:44Z,you might want to check for shader compile fail.
339307455,390,devshgraphicsprogramming,2019-10-26T16:55:54Z,do not put random example class in my engine's namespaces!
339307468,390,devshgraphicsprogramming,2019-10-26T16:56:04Z,do not put random example class in my engine's namespaces!
339307522,390,devshgraphicsprogramming,2019-10-26T16:57:58Z,I'm thinking that maybe bsdf_cos_sample should return both the chosen direction and probability (might be less intensive to compute them together) and abandon the `bsdf_cos_sample_probability` function
339327665,390,achalpandeyy,2019-10-27T07:00:11Z,"Yeah, this was something I was kind of confused about.
Why do we put `BSDFValidatorApp` in `irr` namespace, then? I observed similar behavior in the BRDF Explorer."
339329266,390,achalpandeyy,2019-10-27T07:47:06Z,"Isn't it already done deep within `COpenGLDriver::addHighLevelShaderMaterial` somewhere in `source/Irrlicht/COpenGLSLMaterialRenderer.cpp` ?

I was getting compile errors when I appended illegal function definitions to the shader. Is it worth doing it again?"
339331612,390,devshgraphicsprogramming,2019-10-27T08:49:00Z,because I (unfortunately) wansn't babysitting the person who wrote it.
339331701,390,devshgraphicsprogramming,2019-10-27T08:51:10Z,if `COpenGLDriver::addHighLevelShaderMaterial` returns <0 then the shader failed to build.
339333905,390,devshgraphicsprogramming,2019-10-27T09:49:25Z,you can still do `using namespace irr;` in C++ files
339333911,390,devshgraphicsprogramming,2019-10-27T09:49:34Z,and `using namespace irr::ext::cegui;`
339333955,390,devshgraphicsprogramming,2019-10-27T09:50:46Z,"you will probably want to display the buttons/UI not over the texture, so you need a larger window"
233016775,172,devshgraphicsprogramming,2018-11-13T12:27:35Z,"you may as well allow for start+end colors... also why require uint8_normalized color format?

Just let people use full floats for RGBA"
233017001,172,devshgraphicsprogramming,2018-11-13T12:28:22Z,I'd call the extensions something more useful.. maybe `debugdraw`
233017523,172,devshgraphicsprogramming,2018-11-13T12:30:15Z,if you're going to draw lines I'd pass 2 instead of 3... but this is only cosmetic since that parameter is only needed for tessellation shaders.
233018069,172,devshgraphicsprogramming,2018-11-13T12:32:16Z,"if your index buffer is going to be 0,1, ... (starting at some offset and then monotonically increasing by 1) then there is no need for it"
233018335,172,devshgraphicsprogramming,2018-11-13T12:33:12Z,you can actually drop the descriptor straight after line 59 since meshbuffer will grab
233019202,172,devshgraphicsprogramming,2018-11-13T12:36:14Z,"ECT_UNSIGNED_INT is not normalized format... you need normalized format I think like `ECT_NORMALIZED_UNSIGNED_INT`

Non nomralized int formats are for shaders that take `ivecn` or `uvecn` as inputs"
233019629,172,devshgraphicsprogramming,2018-11-13T12:37:40Z,`m_lineData` needs not be a class member
233019925,172,manhnt9,2018-11-13T12:38:32Z,will change to float color
233019956,172,devshgraphicsprogramming,2018-11-13T12:38:40Z,most of this set-up you can do in the constructor
233020099,172,manhnt9,2018-11-13T12:39:14Z,changed it anyways
233020313,172,manhnt9,2018-11-13T12:39:57Z,updated
233020376,172,devshgraphicsprogramming,2018-11-13T12:40:12Z,"if there is no `smgr->drawAll` or at least `smgr->OnAnimate` then the active camera will not be updated, and hence you will get no change in the view-proj matrix and ergo your line won't move"
233022671,172,manhnt9,2018-11-13T12:47:29Z,for multi-threading capability ... right.
233023153,172,manhnt9,2018-11-13T12:49:10Z,then m_offsets should not be a member either
233024018,172,manhnt9,2018-11-13T12:51:56Z,so I can just remove all index related calls?
233024598,172,manhnt9,2018-11-13T12:54:03Z,including `mapVertexAttrBuffer`? you mean I can even `multi_place` in constructor to get mem offset then update the buffer for each `CDraw3DLine::draw` call?
233024888,172,manhnt9,2018-11-13T12:54:59Z,added smgr->drawAll()
233028099,172,devshgraphicsprogramming,2018-11-13T13:04:30Z,"you should never use the default streaming buffer persistently... so allocate and free on each draw.

If one uses streaming buffer persistently, then streaming buffer is no longer a streaming buffer.

However you can set `baseVertex` on the mesh dynamically! (which is why you want/need allocation alignment to be a multiple of vertex size )"
233028429,172,devshgraphicsprogramming,2018-11-13T13:05:25Z,"not for MT capability, it just simply doesn't need to be kept around outside of the function.

for MT its best to create one instance per-thread and use these independently..."
233028491,172,devshgraphicsprogramming,2018-11-13T13:05:37Z,pretty much.
233028937,172,devshgraphicsprogramming,2018-11-13T13:06:58Z,if getting rid of indices then set this to EIT_UNKNOWN
233031086,172,manhnt9,2018-11-13T13:13:12Z,commiting this
233031114,172,manhnt9,2018-11-13T13:13:21Z,commiting this
233031496,172,manhnt9,2018-11-13T13:14:38Z,commiting this
233061900,172,devshgraphicsprogramming,2018-11-13T14:36:15Z,index count still needs to be present... it tells how many vertices are to be drawn.
233107681,172,manhnt9,2018-11-13T16:04:35Z,"I think it's not necessarily used for debug, sometimes you want lines in the world for some reason.
And in the future someone may add more drawing extension."
233136801,172,devshgraphicsprogramming,2018-11-13T17:05:40Z,"A. this is not a high performance implementation of line drawing
B. why is the extension called `draw` if it only draws lines?"
233306299,172,manhnt9,2018-11-14T03:47:11Z,changed namespace to DebugDraw
413863210,478,devshgraphicsprogramming,2020-04-23T14:49:54Z,probably not
413864795,478,devshgraphicsprogramming,2020-04-23T14:51:42Z,you want the same treatment on C and CXX flags (except for __cplusplus macro)
413865356,478,devshgraphicsprogramming,2020-04-23T14:52:23Z,you need to handle C (non CXX) as well
413866088,478,devshgraphicsprogramming,2020-04-23T14:53:13Z,like making the O2 replace disappear
413867744,478,devshgraphicsprogramming,2020-04-23T14:55:10Z,"I don't want `/GL` on relwithdebug info, I want incremental linking instead (and incremental with minimal rebuild on debug

> Release : /GL
> Relwithdebinfo : /LCTG:INCREMENTAL
> Debug: /INCREMENTAL

A similar warning level to debug is wanted

Same `wchar_t` option for all targets"
413869693,478,devshgraphicsprogramming,2020-04-23T14:57:17Z,`/GF` and `/Gy` are provided by `O2` so throw them out
413871181,478,devshgraphicsprogramming,2020-04-23T14:59:00Z,remove the `/Gy-` flag
413872315,478,devshgraphicsprogramming,2020-04-23T15:00:18Z,"`/Ot /Oy /Oi` are provided by Ox and O2, I don't know why they were there"
413873548,478,devshgraphicsprogramming,2020-04-23T15:01:35Z,`/MP /sdl-` is neede here as well
413874720,478,devshgraphicsprogramming,2020-04-23T15:02:59Z,and you don't want any `/Z` (`/Zi`) option on a release build since its pointless
413875025,478,devshgraphicsprogramming,2020-04-23T15:03:21Z,"replace `/Zi` with `/ZI` maybe we'll get to use ""Edit and Continue"""
413878908,478,devshgraphicsprogramming,2020-04-23T15:07:55Z,"finally the target also needs the `REPLACE ""/MDd"" ""/MTd""` on both C and CXX falgs"
413879443,478,devshgraphicsprogramming,2020-04-23T15:08:32Z,just kill the code
413879565,478,devshgraphicsprogramming,2020-04-23T15:08:41Z,just kill the code
413882582,478,devshgraphicsprogramming,2020-04-23T15:12:02Z,"ALSO add `/Oy-` AFTER `/O2` (O2 already in the flags, so append the options)"
414106376,478,devshgraphicsprogramming,2020-04-23T20:36:37Z,still
414107992,478,devshgraphicsprogramming,2020-04-23T20:39:10Z,"too manny flags don't want `/GF /Ot /GS- /Oi`

btw. check that you can actually singlestep (or at least somewhat step) code of examples  in RelWithDebInfo builds"
417855983,478,devshgraphicsprogramming,2020-04-30T08:51:19Z,`/Ot /Oy /Oi` are provided by O2 no need for them here
417856740,478,devshgraphicsprogramming,2020-04-30T08:52:29Z,"you sure the syntax `/Zc:__cplusplus,wchar_t` works?"
417858611,478,devshgraphicsprogramming,2020-04-30T08:55:38Z,I want you to get rid of the `IrrlichtServer` target completely
418845634,478,Przemog1,2020-05-02T02:47:55Z,"nah
"
422009746,478,devshgraphicsprogramming,2020-05-08T08:13:21Z,what around release?
422009859,478,devshgraphicsprogramming,2020-05-08T08:13:37Z,what around release?
422079545,478,Przemog1,2020-05-08T10:56:36Z,Release and Relwithdebinfo are set to MT
422175247,478,devshgraphicsprogramming,2020-05-08T14:28:06Z,ah ok I see
422547882,478,devshgraphicsprogramming,2020-05-09T21:23:38Z,we will never support HLSL
422669781,478,Przemog1,2020-05-10T16:48:26Z,"it still needs to be there
"
423073342,478,Crisspl,2020-05-11T14:18:34Z,"/GL and /LTCG is basically same thing but former is compiler flag and latter is linker flag. They must both be specified though for whole program optimization to be enabled. Otherwise im getting
```
/LTCG specified but no code generation required; remove /LTCG from the link command line to improve linker performance
```"
423091137,478,Crisspl,2020-05-11T14:42:47Z,"actually.. why dont we use ltcg:incremental in release? I guess `/GL` forces `/LTCG` and thats why it doesnt raise any warnings, but it doesnt enable `/LTCG:incremental`"
390614729,431,devshgraphicsprogramming,2020-03-10T21:12:35Z,make it `src/irr/builtin`
390614742,431,devshgraphicsprogramming,2020-03-10T21:12:36Z,make it `src/irr/builtin`
390614745,431,devshgraphicsprogramming,2020-03-10T21:12:37Z,make it `src/irr/builtin`
390615644,431,devshgraphicsprogramming,2020-03-10T21:14:23Z,"needs to be a sized array
`const uint8_t %s[%d]` with %d giving the size"
390616171,431,devshgraphicsprogramming,2020-03-10T21:15:31Z,make an example out of the built-in shaders (for that you need to work off the `shader_pipeline` branch)
390617782,431,devshgraphicsprogramming,2020-03-10T21:18:46Z,"you need to declare this option with a proper default, also I'd call it `IRR_EMBED_BUILTIN_RESOURCES`

it also needs to be defined in the installed configure header in `include/irr/config` so the C++ code can check the macro `_IRR_EMBED_BUILTIN_RESOURCES` and decide whether to load from embedded `uint8_t`  array or some file in `include/irr/builtin/`"
391053382,431,devshgraphicsprogramming,2020-03-11T15:24:57Z,"no need for this, its in the top level cmake"
391053809,431,devshgraphicsprogramming,2020-03-11T15:25:30Z,don't commit the resource files.
391054439,431,devshgraphicsprogramming,2020-03-11T15:26:18Z,"you need to embed the arrays in an appropriate namespace
```cpp
namespace irr
{
namespace builtin
{
```"
391057720,431,devshgraphicsprogramming,2020-03-11T15:30:31Z,"you need a unique variable name instead of `resource`

I'd take the original virtual path like `irr/builtin/X/Y/Z/something.type` and I would replace the `/` or `\` and `.` with `_` and use that as a name, for now"
391058038,431,devshgraphicsprogramming,2020-03-11T15:30:53Z,give this file the same name as its virtual path.
391058515,431,devshgraphicsprogramming,2020-03-11T15:31:28Z,"you don't output to source dir, you output to binary/build dir"
391059845,431,devshgraphicsprogramming,2020-03-11T15:33:12Z,not sure you should be using the `CMAKE_CURRENT_SOURCE` variable
391060648,431,devshgraphicsprogramming,2020-03-11T15:34:13Z,you're missing the magical glue that defines it for this config header (should be in `./source/Irrlicht/CMakeLists.txt`)
391627661,431,devshgraphicsprogramming,2020-03-12T13:41:42Z,"?
"
391627786,431,devshgraphicsprogramming,2020-03-12T13:41:54Z,?
393776802,431,devshgraphicsprogramming,2020-03-17T15:44:30Z,missing quotes
395209107,431,devshgraphicsprogramming,2020-03-19T17:44:32Z,"check if you have the paths right, you can use cmake `message` to check what `${CMAKE_CURRENT_BINARY_DIR}/builtin` evalutates to"
396376276,431,devshgraphicsprogramming,2020-03-23T11:16:53Z,don't commit these
396376615,431,devshgraphicsprogramming,2020-03-23T11:17:24Z,this has really bad syntax
396376864,431,devshgraphicsprogramming,2020-03-23T11:17:50Z,why is `BUILTIN_RESOURCE_LIST` some sort of global variable?
396378204,431,devshgraphicsprogramming,2020-03-23T11:20:11Z,`${PYTHON_EXECUTABLE}` is the correct one to use
396378455,431,devshgraphicsprogramming,2020-03-23T11:20:35Z,WHY!?
396378999,431,devshgraphicsprogramming,2020-03-23T11:21:32Z,"you should be passing the list to the function, not using a weird global cmake variable"
399184542,431,devshgraphicsprogramming,2020-03-27T10:58:58Z,can you revert the change to this file?
399184881,431,devshgraphicsprogramming,2020-03-27T10:59:35Z,why did you remove the extra headers?
399185383,431,devshgraphicsprogramming,2020-03-27T11:00:32Z,"don't touch my samples, try to embed one of the shaders in `IAssetManager` instead of having it as a rawstring and test (example 35 uses builtin shaders)"
399214490,431,devshgraphicsprogramming,2020-03-27T11:59:36Z,WHAT THE FUCK ARE YOU DOING?
404131999,455,devshgraphicsprogramming,2020-04-06T14:23:57Z,"instead of adding a `_fragment` suffix, do `.frag` its a universally recognized extension"
404132320,455,devshgraphicsprogramming,2020-04-06T14:24:23Z,ok
404132725,455,devshgraphicsprogramming,2020-04-06T14:24:54Z,"instead of adding a `_vertex` suffix, do `.vert` suffix its a universally recognized extension"
404133351,455,devshgraphicsprogramming,2020-04-06T14:25:37Z,`.frag`
404133534,455,devshgraphicsprogramming,2020-04-06T14:25:52Z,ok
404134563,455,devshgraphicsprogramming,2020-04-06T14:27:17Z,`core::ICPUBuffer` you dont want a circular dependency of `asset` namespace on the `io` namespace
404135526,455,devshgraphicsprogramming,2020-04-06T14:28:27Z,see my comment about the `.frag` and `.vert` suffices
404136598,455,devshgraphicsprogramming,2020-04-06T14:29:51Z,might be because the `IRR_CORE_UNIQUE_STRING_LITERAL_TYPE` macro only works for up to 127 character strings
404136780,455,devshgraphicsprogramming,2020-04-06T14:30:04Z,what is `__IRR_ROOT_DIRECTORY__` ?
404137414,455,devshgraphicsprogramming,2020-04-06T14:30:51Z,"DO NOT THROW, IrrlichtBaW is a no-exceptions library!

Just return `nullptr`"
404138760,455,devshgraphicsprogramming,2020-04-06T14:32:29Z,"you want `_IRR_INSTALL_DIRECTORY_` and you should be getting the CMAKE installation directory, I will fix it myself afterwards actually"
404141265,455,devshgraphicsprogramming,2020-04-06T14:35:35Z,and IrrlichtServer as well needs these deps
404142246,455,devshgraphicsprogramming,2020-04-06T14:36:57Z,you don't need this line at all
404142537,455,devshgraphicsprogramming,2020-04-06T14:37:18Z,this change is also not needed
404142784,455,devshgraphicsprogramming,2020-04-06T14:37:37Z,ok I see it now
404147316,455,devshgraphicsprogramming,2020-04-06T14:43:31Z,"ok this is actually quite a bit complex, but lets do it like this:

1.
When the Irrlicht targets are not installed (all examples and lib run out of the build-dir), this configured header (whose configured version will be placed in `{binary_dir}/include/irr/config/BuildConfigOptions.h` as it is right now, but unlike how it is now, NOT ADDED to the INSTALL target) 

NEEDS to evaluate to `#define _IRR_INSTALL_DIRECTORY_  ""{binary_dir}""`

2. When the IRrlicht targets are installed (all examples run out of somewhere, and the library and includes are installed somewhere in a system-wide directory) this configured header will probably have to be placed somewhere out of the way, but added to the INSTALL target.

and the macro NEEDS to evaluate to `#define _IRR_INSTALL_DIRECTORY_ ""${CMAKE_INSTALL_PREFIX}""`

"
404788703,455,Hazardu,2020-04-07T13:00:04Z,Length was 72
404798437,455,Hazardu,2020-04-07T13:14:35Z,"it's needed for `#include ""builtinResources.h""`"
404799481,455,Hazardu,2020-04-07T13:16:08Z,"since `core::ICPUBuffer` does not exist, I will replace this with `core::IBuffer`"
404801398,455,Hazardu,2020-04-07T13:18:48Z,Are the files with shader code copied to the install dir as is now?
405738515,455,devshgraphicsprogramming,2020-04-08T18:45:57Z,good
405739018,455,devshgraphicsprogramming,2020-04-08T18:46:51Z,"you should check what the result (resulting files, directories, etc.) is when actually going through with INSTALLing to `Program Files`"
405739232,455,devshgraphicsprogramming,2020-04-08T18:47:15Z,"should have been `#include ""irr/builtin/builtinResources.h""`"
412943569,455,devshgraphicsprogramming,2020-04-22T12:37:22Z,why is the binary include not private?
412943877,455,devshgraphicsprogramming,2020-04-22T12:37:47Z,I need to think about this
412944339,455,devshgraphicsprogramming,2020-04-22T12:38:26Z,I need to see if this will work
417950315,455,devshgraphicsprogramming,2020-04-30T11:46:14Z,"actually scap this idea, we don't need this define here"
417950766,455,devshgraphicsprogramming,2020-04-30T11:46:57Z,"we should solve it differently
"
417955489,455,devshgraphicsprogramming,2020-04-30T11:56:10Z,still a problem?
417956778,455,devshgraphicsprogramming,2020-04-30T11:58:44Z,what does it look like now?
417956838,455,devshgraphicsprogramming,2020-04-30T11:58:52Z,and?
420852261,455,Hazardu,2020-05-06T14:48:51Z,I am unsure how to pass the reference of SIrrlichtCreationParameter to IFileSystem
432382274,455,Hazardu,2020-05-29T09:58:55Z,not a problem anymore
170435240,39,devshgraphicsprogramming,2018-02-24T22:56:11Z,i dont think this is a valid way to check for compression (could have encryption instead of compression too)
170435319,39,devshgraphicsprogramming,2018-02-24T22:59:55Z,"Stack use here is redundant and possibly problematic.
1) We can't grab more stack safely (Windows has only 1MB by default)
2) Anything under 16k should not really be compressed
3) Statistically the larger decompressed stuff will be compressed

So when compressed, either:
A) Don't try and make dst=_stackPtr and always malloc dst straight away and possibly use _stackPtr as working area for dstCompressed data
B) always malloc dstCompressed"
170435404,39,devshgraphicsprogramming,2018-02-24T23:04:04Z,"Don't have this in two places.
I know its in separate classes, but still D.R.Y. unless you have a reason for actual different implementations."
170435445,39,devshgraphicsprogramming,2018-02-24T23:06:06Z,"what's this about?

dont we releaseObj everything?"
170435852,39,devshgraphicsprogramming,2018-02-24T23:16:04Z,make the default ECT_RAW_BUFFERS|ECT_ANIMATION_DATA|ECT_TEXTURES
170436031,39,devshgraphicsprogramming,2018-02-24T23:25:15Z,"what you use now for textures should really be ECT_TEXTURE_PATHS
Although ECT_TEXTURES should already be reserved"
170436903,39,Crisspl,2018-02-25T00:07:43Z,"It was done quite a long ago due to mem-leaks patching. Irrlicht's reference counted objects has to be dropped after setting them as other object 'ownership'. E.g.:
```
ICPUMeshBuffer* mesh = SCPUMesh();
{
ICPUMeshDataFormatDesc* desc = new ICPUMeshDataFormatDesc();
mesh->setMeshDataAndFormat(desc);
}
```
Here before `desc` goes out of scope it has to dropped so that when meshbuffer is being destroyed, `desc`'s refcount will be ==1 and meshbuffer's destructor will actually destroy it.  
But it must be done after *all* such sets (since one object can be 'owned' more then once but drop must be only one) and above applies only for reference counted objects and not even all of them... So `regularDrop` is called after all the loading. What's more.. we want to support any kind of blobs so we have to assume `releaseObj` will not do just drop but actual `delete`. That's what I was talking about while whining about this reference-counting irrlicht's thing and not some kind of `unique_ptr`."
170437649,39,Crisspl,2018-02-25T00:47:17Z,Without this there'll be even more repeating (explicitly passing treshold values to writing function). Besides.. I don't really see repeating in this.
170437842,39,Crisspl,2018-02-25T00:57:06Z,"I know, changes will come along with encryption"
170438524,39,Crisspl,2018-02-25T01:38:09Z,"O, they already came actually"
170450760,39,devshgraphicsprogramming,2018-02-25T12:02:14Z,but why do you call releaseObj only on some blobs?
170450782,39,devshgraphicsprogramming,2018-02-25T12:02:59Z,"you have one LzmaMemMngmnt for write and one LzmaMemMngmnt for load ?

Should't this be in TypedBlob or CBAWFile?"
170450924,39,Crisspl,2018-02-25T12:09:02Z,"Oh.. I thought you were talking about props pointer :D
Sure, I just forgot about this. I'll move it to CBawFile.h "
170452700,39,Crisspl,2018-02-25T13:17:57Z,"Because not all of our ref-counted objects has to be dropped (i.e. mesh through the whole loading time has ref-count==1 because no other object grabs it) and also, in case of non-reference-counted objects releaseObj would call just `delete` and we don't want it. There's just a finite set of objects that must be dropped and infinite set of possible blobs so..."
170465631,39,devshgraphicsprogramming,2018-02-25T20:18:56Z,"createMesh is designed to only ever return one mesh... so thats the only thing not getting deleted.

loaded textures upon getTexture are added to the IVideoDriver texture cache and can neither be dropped or deleted, removeTexture must be called upon them... and I'm totally fine with cache pollution from unreferenced textures.

Since we have infinite set of possible blobs, every single one should have releaseObj called except for the top blobs being returned (like the root blob that we started loading).

Anything thats not being returned implicitly or explicitly by load routines should get destoroyed, because thats the very definition of a memory leak."
171077960,39,devshgraphicsprogramming,2018-02-27T21:49:09Z,"i wonder if there is a way to copy a freshly intialized context so we don't have to init new ones all the time?
does EVP have a clone/copy function?"
171078072,39,devshgraphicsprogramming,2018-02-27T21:49:31Z,"shouldn't the function return outSize or at least write it to _outSize ?
"
171078250,39,devshgraphicsprogramming,2018-02-27T21:50:10Z,why are you creating an encrypted file by default?
171078937,39,devshgraphicsprogramming,2018-02-27T21:52:39Z,"no.... just check against the specific blob header's data you are returning

(make the function take the createObjs iterator of the blob that you chose as the mesh to load)"
171080345,39,devshgraphicsprogramming,2018-02-27T21:57:43Z,"if you used EVP padding properly inside core::runAes128gcm, you wouldn't need a redundant memcpy
(hell even if you can't make that work, round up the `data` malloc to 16 bytes and you'll never need padding)"
171086890,39,devshgraphicsprogramming,2018-02-27T22:22:14Z,"if you want to round up to a multiple of PoT

(size+PoT-1)&(0-PoT)"
171091080,39,devshgraphicsprogramming,2018-02-27T22:39:11Z,the IV cannot be treated as a string.. must be 16 hex values
171091112,39,devshgraphicsprogramming,2018-02-27T22:39:23Z,the cipherkey cannot be treated as a string.. must be 16 hex values
167834678,36,devshgraphicsprogramming,2018-02-13T11:21:19Z,"can we make it equal to scene::EVAI_COUNT ?

or do we run into circular refs?"
167835427,36,devshgraphicsprogramming,2018-02-13T11:25:15Z,"this makes the entire template class serializable, not just ICPUMeshDataFormatDesc (which is a typedef for IMeshDataFormatDesc<ICPUBuffer>)

will have to convert the ICPUMeshDataFormatDesc typedef into a class inheriting from IMeshDataFormatDesc<ICPUBuffer> and BlobSerializable"
167836510,36,Crisspl,2018-02-13T11:30:42Z,"> or do we run into circular refs?  
  
Yes, I had to forward declare every class used by blobs to make them able to inherit from classes from CBAWFile.h. So there's the best solution I came up with. I put assert (or rather `_IRR_DEBUG_BREAK_IF` so we will know 
when `EVAI_COUNT` change https://github.com/buildaworldnet/IrrlichtBAW/pull/36/commits/22ddd15def5d4041b3480288da97e5c6d7859784#diff-b7b624bc03dce20e1e4c837d54b34971R103"
167837250,36,Crisspl,2018-02-13T11:34:43Z,"Yea, I know it's a todo, got it in mind"
167837569,36,devshgraphicsprogramming,2018-02-13T11:36:19Z,"we initially wanted to support buffer typing (like in DX10) but OpenGL  4.0+ brought ARB_buffer_storage which makes the buffer type irrelevant, since you explicitly state if the buffer should be on the GPU or not.
Aside from that OpenGL never had strict buffer typing, the buffer type was more of a hint as to whether to store the buffer in RAM,DMA RAM or VRAM.
So this E_BUFFER_TYPE enum is deprecated. "
167837830,36,devshgraphicsprogramming,2018-02-13T11:37:42Z,"Doesn't matter right now, but if we switch to a memory allocator that does not offer a free `realloc` then this will necessitate a memcpy."
167838653,36,Crisspl,2018-02-13T11:41:36Z,It's one of things I wasn't sure about meaning. I'll ask you about this later anyway :)
167839281,36,devshgraphicsprogramming,2018-02-13T11:44:27Z,"layer of the framebuffer to attach to, for explanation see the OpenGL Wiki for the topic of ""layered rendering""
values >= mean that a particular `layer` of a 2D or cubemap texture array, or 3D texture is attached to the FrameBuffer.
value <0 means the entire 3D texture or, 2D texture or cubemap array is bound making the FrameBuffer layered, and enabling you to use gl_Layer for layered rendering.

Look at example 15 to see layered rendering used on a cubemap to render point shadows in a single pass."
167840257,36,devshgraphicsprogramming,2018-02-13T11:49:11Z,"Only returns if the attachment has been attached (glFramebuffer* called) and the FBO is queued up for rebinding.
A return value of TRUE does not mean that the attachment color format is renderable or that the combination of attachments is valid.
Only after rebindRevalidate() is called by the driver internally or by the user manually do the attachments drawn into by the FrameBuffer change."
167842180,36,devshgraphicsprogramming,2018-02-13T11:57:50Z,"This is a general function present in all our video namespace objects which reference/use resizeable resources such as textures and buffers.
ARB_buffer_storage and ARB_texture_storage remove the ability to respecify storage for OpenGL objects (essentially no GPU realloc) so to resize objects we need to destroy the old and create a new object, this means that the OpenGL handles (object IDs) change so the new object needs to be bound in place of the old (texture to an FBO, buffer to a VAO).
Whenever a bound object gets modified this way an atomic counter increases and this triggers the rebind* function to do more than just return `true`.

The driver always calls these functions internally before using the object with a rebind*() function.

However for the FrameBuffer you can call it manually after changing attachments as it will also call `glCheckFramebufferStatus` which will make the rebindRevalidate() function return false if the color formats you are trying to render to are invalid (like RGB9_E5) or if a certain combination of attachments is invalid (try specifying the DEPTH and STENCIL attachments to be different with any Nvidia GPU).

This function does nothing if no changes to bound objects have occurred."
167842519,36,devshgraphicsprogramming,2018-02-13T11:59:13Z,"Its best you use a GPU Fence to ensure any operations which you've queued up that are writing to this buffer or reading from it have completed before you start using this pointer, otherwise you will have a race condition."
167842778,36,devshgraphicsprogramming,2018-02-13T12:00:19Z,"We only support persistently mapped buffers with ARB_buffer_storage.
Its almost the fastest across all cards, and is more in line with what Vulkan has.
Please don't ask us to support Buffer Orpahning, or Map/Unmap."
167843037,36,devshgraphicsprogramming,2018-02-13T12:01:31Z,start point
167843269,36,devshgraphicsprogramming,2018-02-13T12:02:36Z,if the point is behind the camera
167843624,36,devshgraphicsprogramming,2018-02-13T12:04:33Z,Doesn't have a Windows implementation yet.
167843863,36,Crisspl,2018-02-13T12:05:51Z,It's mostly not documented. I'll have to ask what `getBackTrace` actually do because i couldn't figure out.
167844072,36,devshgraphicsprogramming,2018-02-13T12:07:01Z,good solution
168931624,36,devshgraphicsprogramming,2018-02-17T20:07:48Z,careful about short-circuit evaluation
168931647,36,devshgraphicsprogramming,2018-02-17T20:08:38Z,"do we need dynamic_cast instead of static_cast ?

(reinterpret is always wrong)"
343915311,399,devshgraphicsprogramming,2019-11-07T22:49:03Z,this bad-boy needs a `core::clamp`
343915370,399,devshgraphicsprogramming,2019-11-07T22:49:17Z,this bad-boy needs a `core::clamp`
343915407,399,devshgraphicsprogramming,2019-11-07T22:49:22Z,this bad-boy needs a `core::clamp`
344234999,399,AnastaZIuk,2019-11-08T15:41:02Z,"Actuallly I don't get it technically. I mean, won't there be a maximum value of `int8_t` if I casted `double` to `int8_t` assuming my double variable is around 100k? Won't it be clamped automaticaly even though?"
344256778,399,Crisspl,2019-11-08T16:25:20Z,"Nah, it's UB. See [c++14 standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf), paragraph 4.9.1.
However on gcc indeed there is a clamp http://coliru.stacked-crooked.com/a/9f6f5ec4b0ded22c
But ofc you cannot rely on behavior of single compiler since standard says that anything really can happen (just as well it could be wrap-around did in some tricky way or some random shit)"
344258104,399,AnastaZIuk,2019-11-08T16:28:08Z,"> Nah, it's UB. See [c++14 standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf), paragraph 4.9.1.
> However on gcc indeed there is a clamp http://coliru.stacked-crooked.com/a/9f6f5ec4b0ded22c
> But ofc you cannot rely on behavior of single compiler since standard says that anything really can happen (just as well it could be wrap-around did in some tricky way or some random shit)

Thank you so much, I'm gonna check it!"
344356380,399,devshgraphicsprogramming,2019-11-08T20:36:09Z,wrong range... maybe make a template intermediate function calling `core::clamp` that will deduce the limits from integer type?
344356526,399,devshgraphicsprogramming,2019-11-08T20:36:38Z,don't touch these functions in `decode`
347090520,399,devshgraphicsprogramming,2019-11-16T12:56:09Z,don't we have this function already in terms of `E_FORMAT` @Crisspl ?
347090566,399,devshgraphicsprogramming,2019-11-16T12:57:24Z,"input is always a `double`

you can take away the boolean argument 
we have a function that is a template of `E_FORMAT` I believe its called `isFormatNormalized<E_FORMAT format>()` or something like that. "
347090606,399,devshgraphicsprogramming,2019-11-16T12:58:36Z,"its actually the other way round... the NORMALIZED gets a multiply up, the SCALED stays as is

Reason is that normalized store the floating point [0,1] or [-1,1] range in all the ints, SCALED just casts a float to an int."
347245783,399,devshgraphicsprogramming,2019-11-18T08:22:17Z,make format a template parameter.
347246130,399,devshgraphicsprogramming,2019-11-18T08:23:18Z,shouldn't this all be constexpr + constexpr function instead of reference?
347246535,399,devshgraphicsprogramming,2019-11-18T08:24:26Z,ok @AnastaZIuk answer accepted.
347394186,399,AnastaZIuk,2019-11-18T13:58:07Z,Is it a good practice or it goes on performance or you want it to be as you said just simply?
347394263,399,AnastaZIuk,2019-11-18T13:58:15Z,"to fix, sure"
347400100,399,devshgraphicsprogramming,2019-11-18T14:09:22Z,"template parameter basically is guaranteed inlining and duplicate code generation for every value of `format`, a parameter the compiler may still leave some code to deal with a mutable `format`"
347498727,399,AnastaZIuk,2019-11-18T17:02:24Z,so is there such?
347506402,399,devshgraphicsprogramming,2019-11-18T17:18:20Z,nope not for this.
347507622,399,devshgraphicsprogramming,2019-11-18T17:20:58Z,"you don't need `&` on a constexpr, thats actually an error to do so"
347507889,399,devshgraphicsprogramming,2019-11-18T17:21:32Z,make it `constexpr inline uint64_t`
347509966,399,AnastaZIuk,2019-11-18T17:25:52Z,"sure, to fix"
347786296,399,devshgraphicsprogramming,2019-11-19T08:30:32Z,you could use a `static_assert` plus `!core::is_any_of` in a future PR
458158263,515,devshgraphicsprogramming,2020-07-21T14:50:38Z,nope triangles go in
458158435,515,devshgraphicsprogramming,2020-07-21T14:50:49Z,always `440 core` or higher
458158638,515,devshgraphicsprogramming,2020-07-21T14:51:04Z,@Crisspl is this your fix?
458161419,515,devshgraphicsprogramming,2020-07-21T14:54:43Z,`lineDraw.count`
458161709,515,devshgraphicsprogramming,2020-07-21T14:55:04Z,ask @Przemog1 if there's a built-in GLSL include for these structs
458162310,515,Crisspl,2020-07-21T14:55:50Z,"yea XD as i said, little bug in `clone()`"
458162535,515,devshgraphicsprogramming,2020-07-21T14:56:09Z,you need to declare the `in` and `out` variables in matched interfaces
458163283,515,devshgraphicsprogramming,2020-07-21T14:57:02Z,"wrong, you do not use the `gpumesh` for drawing lines, you need to provide your own array of 16 bindings"
458164061,515,devshgraphicsprogramming,2020-07-21T14:58:04Z,"`linesBuffer.get(), 0u, triangleCount * 6 * sizeof(uint32_t), 6 * sizeof(uint32_t)`
all of this is wrong, those parameters are for the buffer that holds `DrawIndirectParameters_t`"
458164907,515,devshgraphicsprogramming,2020-07-21T14:59:04Z,this barrier is only for the `fillBuffer`
458165612,515,devshgraphicsprogramming,2020-07-21T15:00:00Z,`assert(false)` we don't throw
458166820,515,devshgraphicsprogramming,2020-07-21T15:01:33Z,"this needs to be `roundUp(sizeof(DrawIndirectParameters_t),16)` and you need to fill it with sane values for everything except for the `count` which should be 0"
458167320,515,devshgraphicsprogramming,2020-07-21T15:02:12Z,"you should compute the `offsetof(DrawIndirectParameters_t,count)` and only zero-out the count"
460397522,515,devshgraphicsprogramming,2020-07-25T11:52:21Z,@Hazadu they are now in `irr/asset/Pipeline.h` according to the merged #520 
460563319,515,Crisspl,2020-07-26T19:19:05Z,"what's going on?
You have to create ds layout for things u declared in geom shader. Then you have to add it to pipeline layout of all pipelines being used. Ds layout is null while compiling shader because it really is null. Your pipeline layout doesn't have layout for ds0. See megatexture example, there's example of modifying pipelines of loaded meshes.
Then ofc you have to create desc set with those 2 SSBOs used by GS. I can help u with this on Monday"
460563690,515,Crisspl,2020-07-26T19:23:05Z,"u dont need full (deep) copy, you need to copy only the pipeline object and maybe its layout, so pass 1u as arg to clone() (then it will copy pipeline, layout and specialized shaders)"
468071149,515,devshgraphicsprogramming,2020-08-10T17:42:09Z,"there are engine built-ins for that now, if you merge the latest `shader_pipeline`"
468143811,515,devshgraphicsprogramming,2020-08-10T19:51:22Z,"do tie breaking, so one triangle will have to create this line (out of the two that share the edge)... my suggestion is to only do this check for the top edge."
468145238,515,devshgraphicsprogramming,2020-08-10T19:54:07Z,"this is messed up loop.. it should produce two line points, not have thepossibility of producing 3"
468145554,515,devshgraphicsprogramming,2020-08-10T19:54:45Z,why duplicate ?
468146947,515,devshgraphicsprogramming,2020-08-10T19:57:24Z,this equation must be wrong.
468752530,515,devshgraphicsprogramming,2020-08-11T17:39:54Z,could you undo changes to this file?
469180591,515,devshgraphicsprogramming,2020-08-12T11:07:42Z,feed the max line count to the shader as a specialization constant.
469180648,515,devshgraphicsprogramming,2020-08-12T11:07:50Z,use the builtin include for this
469998312,515,devshgraphicsprogramming,2020-08-13T14:33:55Z,"you forgot how pointer arithmetic works, either `reinterpret_cast<float*>(reinterpret_cast<uint8_t*>(ptr)+address)` or divide `address` by `sizeof(float)`"
469999654,515,devshgraphicsprogramming,2020-08-13T14:35:42Z,"you need to declare the downstreaming buffer (in `SIrrlichtCreationParameters` at the start) to be of equal or larger size, otherwise download would need to happen in chunks."
470000150,515,devshgraphicsprogramming,2020-08-13T14:36:20Z,"you're leaking memory, missing `multi_free` on success ;)"
368119465,412,devshgraphicsprogramming,2020-01-17T20:19:57Z,"polymorphic swizzle is a class that can swizzle the RGBA componenents into a different arrangement at runtime, using it (non null pointer) obviously makes the whole process slower."
368248134,412,devshgraphicsprogramming,2020-01-18T20:56:59Z,get the values with padding maybe? (or can you guarantee that you always use one region for the whole and only mip and its without padding)
372619382,412,devshgraphicsprogramming,2020-01-29T20:43:02Z,"no depth as in dimension size depth is 1u (image is always 2D)

PixelDepth from TGA header probably means how many bits per pixel (color depth), so its used for picking the correct E_FORMAT"
372619946,412,devshgraphicsprogramming,2020-01-29T20:44:22Z,"you could just reinterpret cast, since its same bytewise stuff."
374048176,412,devshgraphicsprogramming,2020-02-03T11:19:41Z,it would be easier on the CPU and memory to flip before expanding to 3x the size during the convert
374048643,412,devshgraphicsprogramming,2020-02-03T11:20:45Z,why not make `data` an ICPUBuffer that you can then use directly?
374048742,412,devshgraphicsprogramming,2020-02-03T11:20:57Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/412/files/97860b3deaf472bfa2ba7df541aab63f8ceb074b..a80c4362992c58b2f38eb75732fc19b149146a90#r374048643
374048801,412,devshgraphicsprogramming,2020-02-03T11:21:08Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/412/files/97860b3deaf472bfa2ba7df541aab63f8ceb074b..a80c4362992c58b2f38eb75732fc19b149146a90#r374048643
374048850,412,devshgraphicsprogramming,2020-02-03T11:21:14Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/412/files/97860b3deaf472bfa2ba7df541aab63f8ceb074b..a80c4362992c58b2f38eb75732fc19b149146a90#r374048643
374049032,412,devshgraphicsprogramming,2020-02-03T11:21:40Z,"wait, why, what happened?"
374197985,412,AnastaZIuk,2020-02-03T16:18:56Z,"Well, all of the images placed in `color_space_test` doesn't contain informations about gamma. I was trying to generate it through GIMP, but I couldn't as well, so I decided to bypass it"
374207823,412,devshgraphicsprogramming,2020-02-03T16:35:22Z,"well sure, but leave the code for handling gamma, if there is no info about gamma then assume 2.233333333.............."
374264693,412,AnastaZIuk,2020-02-03T18:27:13Z,"okay, I will patch it"
374597922,412,devshgraphicsprogramming,2020-02-04T10:46:02Z,"why is there a template on T, why are you incrementing the `in` and `out` by the same stride that is in pixels and not in bytes?"
374693366,412,AnastaZIuk,2020-02-04T14:14:17Z,"because somebody has created it, but if it comes to stride, I need to fix it"
374725465,412,devshgraphicsprogramming,2020-02-04T15:06:13Z,just use uint8_t* always.
374827813,412,devshgraphicsprogramming,2020-02-04T17:54:50Z,you're using `channels` wrong when in fact you should be using pixel block bytesize (TGA formats always have a 1x1 block physical size)
374889690,412,AnastaZIuk,2020-02-04T19:55:45Z,"my mistake, to fix"
374899921,412,devshgraphicsprogramming,2020-02-04T20:17:34Z,still fucking wrong.
373663008,416,devshgraphicsprogramming,2020-01-31T20:06:35Z,won't that make it `zlibstaticzlibstatic` ?
373786730,416,AnastaZIuk,2020-02-01T15:53:31Z,"I think it won't, why should it make it like that?. I've checked paths in some VS projects - seems to be done well + launched, so it works"
377609170,416,devshgraphicsprogramming,2020-02-11T12:39:56Z,"this needs to happen in the blob instantiation, as you need to check the flag in the blob (if mesh was saved LH or RH) then only flip if `SavedFlag!=RequestedFlag`"
377611230,416,AnastaZIuk,2020-02-11T12:44:47Z,"how to save it if there is no member for blobs for that - so no need for patching constructors for those blobs?
should it be saved in header of blob?"
377613685,416,AnastaZIuk,2020-02-11T12:50:05Z,I have talked to Criss recently and afaik it can't be saved in it (but not sure)
377614525,416,devshgraphicsprogramming,2020-02-11T12:51:53Z,"don't flip, just save the flag into the blob (left or right handed)"
377614858,416,devshgraphicsprogramming,2020-02-11T12:52:37Z,there's no reason for you to touch the final bone hierarchy blob because you won't be changing it
377615235,416,AnastaZIuk,2020-02-11T12:53:23Z,so should I delete it?
377615330,416,AnastaZIuk,2020-02-11T12:53:36Z,okay
377640049,416,devshgraphicsprogramming,2020-02-11T13:41:32Z,yes
377645556,416,devshgraphicsprogramming,2020-02-11T13:51:39Z,"You save the left/right hand flag as an extra member of the meshbuffer blob.
(old files get upgraded by making the new version blob a blob that always has LH-flag)

If the flag does not agree, then when loading (in the finalization step), you need to create a new `ICPUBuffer` per meshbuffer just for the positions (and normals, if present) and write out flipped values to it (create a copy of the meshbuffer with the old POSITION and NORMALS buffers attached, then change the ATTR0 and ATTR3 buffers, and via the use of `getAttribute` and `setAttribute` you can extract, flip and save the new values)"
378541676,416,devshgraphicsprogramming,2020-02-12T22:08:58Z,"you need to patch this assert, because you added a member the struct will grow in size."
378541832,416,devshgraphicsprogramming,2020-02-12T22:09:21Z,"don't use `bool` they have undefined size across platforms, uint8_t is more appropriate."
378542041,416,devshgraphicsprogramming,2020-02-12T22:09:46Z,still need aliases for Ver2 to Ver0
378542525,416,devshgraphicsprogramming,2020-02-12T22:10:53Z,this bad boy should be set by the writer.
378542919,416,devshgraphicsprogramming,2020-02-12T22:11:49Z,"this constructor will never be used again, it can go 
(you will never make a new legacy blob from object, only new blob from old blob)"
379424634,416,AnastaZIuk,2020-02-14T13:17:52Z,"Matt is it neseccary if there is no change since Ver0 to Ver2 up? I have exchaned meshbuffers using 0 version (that are the same till V3) for version 2 and I find it valid, it compiles"
379424906,416,AnastaZIuk,2020-02-14T13:18:32Z,"I haven't known it yet though, to fix"
379425085,416,AnastaZIuk,2020-02-14T13:18:57Z,"okay, to remove"
379821718,416,devshgraphicsprogramming,2020-02-15T09:50:36Z,We always provide all the V0 to VLatest at least as aliases.
379825526,416,devshgraphicsprogramming,2020-02-15T11:18:29Z,this duplicates the above function I think?
382029361,416,devshgraphicsprogramming,2020-02-20T14:23:12Z,"kill this function, we don't use it"
382058105,416,devshgraphicsprogramming,2020-02-20T15:06:40Z,"Little Optimization: you can skip processing (flipping) the mesh if the reference count `<2` (the stack was the only reference, mesh will get dropped as soon as stack lets go)"
345893526,401,AnastaZIuk,2019-11-13T17:22:50Z,"@devshgraphicsprogramming  @Crisspl  guys please help me
I have no idea how I can determine which buffer corresponds to which attribute
Is there actaully a way to this? Let's say that I would like to get normals buffer
How can I check it in our engine?"
345930717,401,Crisspl,2019-11-13T18:39:41Z,"https://github.com/Crisspl/IrrlichtBAW/blob/master/include/irr/asset/ICPUMeshDataFormatDesc.h#L117
also see how getAttribPointer() works https://github.com/Crisspl/IrrlichtBAW/blob/master/include/irr/asset/ICPUMeshBuffer.h#L185"
346535966,401,devshgraphicsprogramming,2019-11-14T20:42:59Z,"there's a vague convention that some loaders rely on:
- 0 : position (but there's a query for that)
- 1 : UV
- 2 : Color
- 3 : Normal

Not sure if I got 1 and 2 the right way around, see the OBJ loader, its a good reference.

Some formats like `.baw` or `.gltf` don't really give a shit which attribute does what and can save more than the pos+uv+color+normal."
346537778,401,devshgraphicsprogramming,2019-11-14T20:47:34Z,"call it `EWPF_MESH_IS_RIGHT_HANDED`

It does not mean it will be flipped.

Explanation:

If a mesh format is right-handed then no flipping for right handed input mesh, but flipping for left handed input mesh (the default).
Example: Possibly OBJ (I think we flip when we load by default), definitely `.gtlf`

If a mesh format is left-handed then flip for right-handed input but no flipping for left-handed input.
Example: DirectX .X"
346538057,401,devshgraphicsprogramming,2019-11-14T20:48:15Z,what's `loadderFlagsUSedForWriting` doing here?
346538141,401,devshgraphicsprogramming,2019-11-14T20:48:27Z,btw move the enum inside `IAssetWriter`
346538329,401,devshgraphicsprogramming,2019-11-14T20:48:54Z,also input to function is const so you can't flip in-place on the mesh
347089710,401,AnastaZIuk,2019-11-16T12:31:41Z,"We have to know the orientation of loaded mesh, I mean the orientation applied to mesh we want to write/save, haven't we?"
347090416,401,devshgraphicsprogramming,2019-11-16T12:52:14Z,"Your proposed approach makes no sense, for two reasons:
1. Not every mesh to be written is loaded (some are generated, i.e. geometry creator)
2. You will use the `writerFlags` to tell the writer if the meshes being passed in are right handed or not (each writer will decide internally whether to flip or not depending on the convention for the format OR if the format can take the orientation metadata like .baw)"
347104181,401,AnastaZIuk,2019-11-16T19:27:23Z,"Thank you guys, I will remember those hints"
347248707,401,devshgraphicsprogramming,2019-11-18T08:30:44Z,"this flag shouldn't exist, you should know whether mesh should be written as right handed from the format you're writing to."
347392067,401,AnastaZIuk,2019-11-18T13:54:19Z,what do you mean? Don't we want to write as left or right in dependence of user choice?
347398369,401,devshgraphicsprogramming,2019-11-18T14:05:53Z,"the mesh format almost always has a convention, if you write out as right handed to .X then all the model viewers in the world will see the model wrong."
347406708,401,AnastaZIuk,2019-11-18T14:22:08Z,"okay, so I'll throw out 'EWPF_WRITE_RIGHT_HANDED'"
347490239,401,devshgraphicsprogramming,2019-11-18T16:46:48Z,great
347506828,401,devshgraphicsprogramming,2019-11-18T17:19:14Z,so PLY is right handed format?
347507164,401,devshgraphicsprogramming,2019-11-18T17:19:59Z,STL is right handed too?
347512821,401,AnastaZIuk,2019-11-18T17:31:31Z,"as we have spoken, right? Default right, but to make it left there was a flip at beggining
btw google says that it is righthanded :D"
347512874,401,AnastaZIuk,2019-11-18T17:31:39Z,https://github.com/buildaworldnet/IrrlichtBAW/pull/401#discussion_r347512821
347515474,401,devshgraphicsprogramming,2019-11-18T17:37:29Z,"ok cool, nice to paste a reference in the comments."
347515566,401,devshgraphicsprogramming,2019-11-18T17:37:41Z,so STL AND PLY are right handed?
347596117,401,AnastaZIuk,2019-11-18T20:36:04Z,they are righthanded
347640469,401,devshgraphicsprogramming,2019-11-18T22:21:23Z,"cool, never knew that ;)"
272800308,244,devshgraphicsprogramming,2019-04-06T16:07:21Z,I trust you this works ;)
272810017,244,devshgraphicsprogramming,2019-04-06T21:26:04Z,"ntdll makes the shared lib, not the static that we want"
517652370,553,Hazardu,2020-11-04T21:52:05Z,"I'd to mess up somewhere, as the returned buffer is full of zeroes. I do not know whether it is initially filled with zeroes and never assigned (messed up binding), all the methods in the compute shader return zero or if the buffer gets zeroed out during down streaming."
517652735,553,Hazardu,2020-11-04T21:52:53Z,Here i need to emulate what is being done on the GPU and then compare it to the downloaded result
517653071,553,Hazardu,2020-11-04T21:53:37Z,Don't fire me for using `goto` pls
518680359,553,devshgraphicsprogramming,2020-11-06T11:04:23Z,pack your things
518681999,553,devshgraphicsprogramming,2020-11-06T11:07:31Z,"this formula is correct, although faster thing would be to `assert` that ""subgroupSize is power of two""

then compute `subgroupOffset = data+localInvocationIndex&(subgroupSize-1u);`"
518683121,553,devshgraphicsprogramming,2020-11-06T11:09:35Z,why 200% the size?
518683524,553,devshgraphicsprogramming,2020-11-06T11:10:20Z,use C++11 mersenne twister etc.
518683648,553,devshgraphicsprogramming,2020-11-06T11:10:38Z,ran only has a 16bit range or something like that
518684513,553,devshgraphicsprogramming,2020-11-06T11:12:21Z,"dont do the long way of creating an ICPUBuffer from the array, and then converting it... there's a special function in the driver called ""create Filled Device Local On Ded Mem"" IIRC which only takes buffer size and contents as parameter"
518685701,553,devshgraphicsprogramming,2020-11-06T11:14:52Z,IIRC push constants size are given in bytes and sizes+offsets need to be aligned to 4 bytes
518686658,553,devshgraphicsprogramming,2020-11-06T11:16:49Z,leave a comment that subgroup size is hardcoded to 4 (there's a requirement that workgroup be at least half the size) for now and max workgroup size is hardcoded to 256
518687212,553,devshgraphicsprogramming,2020-11-06T11:18:01Z,you're missing `layout (workgroup_size_x=_IRR_GLSL_WORKGROUP_SIZE_) in;` to actually declare the size of the workgroup to GLSL
518687997,553,devshgraphicsprogramming,2020-11-06T11:19:39Z,# @Hazardu **get into the habit of declaring a `delete/free` as soon as you type out a `new/malloc` with your keyboard**
518688789,553,devshgraphicsprogramming,2020-11-06T11:21:15Z,"`gl_LocalInvocationIndex` is the index within a workgroup, not within all dispatches"
518690943,553,devshgraphicsprogramming,2020-11-06T11:25:34Z,"this is wrong, if you have 32 milion invocations to process, and between 2 and 1024 invocations per workgroup.. then you need to divide by the workgroup size as well because dispatch counts in workgroups not invocations

you also need to handle the case when the number of invocations in a workgroup times the size of a uint doesn't divide the buffer size exactly"
518696378,553,devshgraphicsprogramming,2020-11-06T11:37:18Z,"you compute shader never runs, see other comments"
518697772,553,devshgraphicsprogramming,2020-11-06T11:40:14Z,"note for the future, because you're only using the buffer for a copy and then reusing it as an ssbo, only the following combination of flags is required
`GL_BUFFER_UPDATE_BARRIER_BIT|GL_SHADER_STORAGE_BARRIER_BIT`"
518742357,553,Hazardu,2020-11-06T13:13:31Z,i was testing if downloading fails
518914136,553,Hazardu,2020-11-06T17:58:50Z,"well, that was the code you provided me with, and `subgroupOffset` was never used"
518916753,553,devshgraphicsprogramming,2020-11-06T18:03:46Z,"it was to emulate a single workgroup, not the whole dispatch"
519211873,553,Hazardu,2020-11-07T19:49:35Z,"`workgroup_size_x` didnt exist, so i used `local_size_x `"
519212601,553,devshgraphicsprogramming,2020-11-07T19:57:33Z,its wront you need the subgroup offset to data 🤦 
519212635,553,devshgraphicsprogramming,2020-11-07T19:58:15Z,you could have put `<subgroupInvocationID` in the for-loop condition
519212636,553,Hazardu,2020-11-07T19:58:18Z,so it actually had a use then...
519212648,553,devshgraphicsprogramming,2020-11-07T19:58:27Z,you could have put `<=subgroupInvocationID` in the forloop condition instead of the break
519212672,553,devshgraphicsprogramming,2020-11-07T19:58:45Z,DATA offset!!!!!
519212703,553,devshgraphicsprogramming,2020-11-07T19:59:09Z,DATA offset!!!!!
519213343,553,devshgraphicsprogramming,2020-11-07T20:06:06Z,"everything is fine, but the variable name is misleading"
432708911,499,devshgraphicsprogramming,2020-05-29T20:03:18Z,update help text about file and channels
432709598,499,devshgraphicsprogramming,2020-05-29T20:04:53Z,all files need to have proper extensions on the input
432709926,499,devshgraphicsprogramming,2020-05-29T20:05:33Z,also rewrite with the old files so you can run and test them (use same input files)
432710273,499,devshgraphicsprogramming,2020-05-29T20:06:14Z,I need this working for Monday
432962903,499,AnastaZIuk,2020-05-31T16:30:40Z,done
432962910,499,AnastaZIuk,2020-05-31T16:30:44Z,done
432962921,499,AnastaZIuk,2020-05-31T16:30:53Z,done
433112461,499,devshgraphicsprogramming,2020-06-01T08:42:50Z,what about checking if there are too few arguments?
433113298,499,devshgraphicsprogramming,2020-06-01T08:44:34Z,"rephrase ""Channel name for multilayered EXR images, a layer with most matching name will be chosen (one that contains the channel name as a substring at the earliest position)."""
433114032,499,devshgraphicsprogramming,2020-06-01T08:46:11Z,"jesus don't do esposure bias 10.2, but -2.0, like before so we can at least compare outputs to previous"
433122261,499,AnastaZIuk,2020-06-01T09:04:28Z,"oh, I have copied it from my previous version uh"
433124595,499,AnastaZIuk,2020-06-01T09:09:52Z,done
433124618,499,AnastaZIuk,2020-06-01T09:09:55Z,done
433124690,499,AnastaZIuk,2020-06-01T09:10:02Z,done
433208633,499,devshgraphicsprogramming,2020-06-01T12:37:14Z,"tonemapper parameters are required, don't even bother with defaults... two parameters and tonemapping method must always be present"
433208650,499,devshgraphicsprogramming,2020-06-01T12:37:17Z,"tonemapper parameters are required, don't even bother with defaults... two parameters and tonemapping method must always be present"
433209095,499,devshgraphicsprogramming,2020-06-01T12:38:12Z,its fine if its not exr.
433209180,499,devshgraphicsprogramming,2020-06-01T12:38:24Z,I check formats later and stuff
433210024,499,devshgraphicsprogramming,2020-06-01T12:40:14Z,what's the deal with this?
433482696,499,AnastaZIuk,2020-06-01T20:51:31Z,"you have started something with the filter and commented it, so I did it for you if you were to use it"
433482829,499,AnastaZIuk,2020-06-01T20:51:45Z,okay
433890784,499,AnastaZIuk,2020-06-02T13:51:06Z,"it will be going through validation, done"
433890842,499,AnastaZIuk,2020-06-02T13:51:10Z,"it will be going through validation, done"
467818663,524,devshgraphicsprogramming,2020-08-10T10:37:33Z,nah lets just get rid of these functions and keep the ones with `vec2` or `vec3` random number input only.
467888992,524,devshgraphicsprogramming,2020-08-10T13:06:39Z,NDF
467889289,524,devshgraphicsprogramming,2020-08-10T13:07:07Z,every BSDF sample generation function takes a anisotropic interaction ;)
467889880,524,devshgraphicsprogramming,2020-08-10T13:08:14Z,"don't do dielectric yet, the whole process of sampling is 100% different"
467902587,524,devshgraphicsprogramming,2020-08-10T13:27:53Z,"seems that you could remove `absVdotH` from both remainder and pdf, they cancel out"
467902628,524,devshgraphicsprogramming,2020-08-10T13:27:58Z,"seems that you could remove `absVdotH` from both remainder and pdf, they cancel out"
468063559,524,Crisspl,2020-08-10T17:28:11Z,"nah, ndf is in `bxdf/brdf/ndf/blinn_phong.glsl`. This is ndf with some shadowing term incorporated, generally this model is weird and has lots of definitions... 
http://renderwonk.com/publications/s2010-shading-course/hoffman/s2010_physically_based_shading_hoffman_b.pdf
http://www.thetenthplanet.de/archives/255"
468102329,524,devshgraphicsprogramming,2020-08-10T18:38:57Z,interesting
468493334,524,devshgraphicsprogramming,2020-08-11T10:53:06Z,"you want to divide the `dx` derivatives by screen X resolution
similarly for `dy` divide by screen Y"
468494399,524,devshgraphicsprogramming,2020-08-11T10:55:14Z,"btw I made a GLSL Loader, it will produce an asset bundle with a  `ICPUSpecializedShader` IIRC."
468496398,524,devshgraphicsprogramming,2020-08-11T10:59:14Z,I'd suggest outputting `abs(det-s.NdotL/BRDF_cos_Eval(s))` because sometimes the determinant can be 0 and value of BRDF should never be 0 for a generated sample
468598378,524,Crisspl,2020-08-11T13:55:48Z,"oh, nice, thats useful"
468631111,524,devshgraphicsprogramming,2020-08-11T14:36:29Z,"oh boy you screwed up
"
468689050,524,devshgraphicsprogramming,2020-08-11T15:56:28Z,actually multiply
469974609,524,devshgraphicsprogramming,2020-08-13T14:02:24Z,do a proper if statement not a ternary operator (skipping that amount of operations will actually pay off for the GPU)
469975039,524,devshgraphicsprogramming,2020-08-13T14:03:01Z,same everywhere else
469978275,524,devshgraphicsprogramming,2020-08-13T14:07:51Z,"I propose 

```glsl
float ax2=;
float ay2=;
float ndf = ;
float scalar_part = s.NdotL*ndf;
if (ax>FLT_MIN || ay>FLT_MIN)
{
   float g=;
   scalar_part *= g;
}
vec3 fr  = ;

return fr*scalar_part;
```"
469986419,524,devshgraphicsprogramming,2020-08-13T14:18:23Z,"I think there's supposed to be a factor of 2.0 here

P.S. we should make `irr_glsl_ggx_smith_G2_over_G1_wo_numerator`"
469989936,524,devshgraphicsprogramming,2020-08-13T14:23:03Z,I think they'd be of the form `0.5*(1+devsh_v/NDotV)/(NdotL*devsh_v+NdotV*devsh_l)`
469994807,524,devshgraphicsprogramming,2020-08-13T14:29:14Z,"mm or maybe a `irr_glsl_ggx_smith_G2_over_G1_wo_numerator_with_cos` could be more useful, cause it could have the `NdotL` factored in I suppose"
470053482,524,devshgraphicsprogramming,2020-08-13T15:52:10Z,for stuff like that I recommend `uintBitsToFloat(0xbitpatternforInf)`
470058051,524,devshgraphicsprogramming,2020-08-13T15:59:11Z,"pretty sure it should be (https://schuttejoe.github.io/post/ggximportancesamplingpart2/)
`pdf = irr_glsl_ggx_trowbridge_reitz(a2,s.NdotH*s.NdotH)*irr_glsl_GGXSmith_G1_wo_numerator(interaction.NdotV,a2,one_minus_a2)*0.5;`
"
470208438,524,devshgraphicsprogramming,2020-08-13T19:51:29Z,TODO for beckmann
470217868,524,devshgraphicsprogramming,2020-08-13T20:08:10Z,do for beckmann
510344106,552,devshgraphicsprogramming,2020-10-22T17:41:46Z,dont add these
510344451,552,devshgraphicsprogramming,2020-10-22T17:42:26Z,what happened to `overrideUsesMotionBlur ` in the newer SDK?
510344610,552,Hazardu,2020-10-22T17:42:42Z,its gone
510344643,552,devshgraphicsprogramming,2020-10-22T17:42:45Z,"undo everything below this line, I need to redo it anyway"
511506241,552,devshgraphicsprogramming,2020-10-24T19:30:24Z,change these two pointers into `CUdeviceptr`
511506398,552,devshgraphicsprogramming,2020-10-24T19:32:01Z,let me know how much memory the denoiser says it needs for the scratch size with a 1080p tile
511582062,552,Hazardu,2020-10-25T11:14:02Z,470 081 920 bytes which is 448 MiB
512948347,552,devshgraphicsprogramming,2020-10-27T18:54:03Z,"Try using 1024x1024 a 2048x2048 tile, it might expose logic errors when your test image is not divisible by tile size exactly"
512949435,552,devshgraphicsprogramming,2020-10-27T18:55:51Z,remember to change back and do download in 64mb sized parts
512952928,552,devshgraphicsprogramming,2020-10-27T19:02:01Z,what happened here?
512955033,552,Hazardu,2020-10-27T19:05:47Z,"after changing tile size to 1024 by 1024, images are skipped
`
While executing a kernel, the device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistent state and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched.
`"
512956669,552,devshgraphicsprogramming,2020-10-27T19:08:53Z,always tile your image
512961736,552,devshgraphicsprogramming,2020-10-27T19:17:42Z,"First of all, just iterate over denoiser types and not input images.

Secondly WHY ARE YOU MULTIPLYING by 2 ?"
512963135,552,devshgraphicsprogramming,2020-10-27T19:20:09Z,actually it would be good to not clamp `maxResolution` here and use the tile size directly
512963524,552,devshgraphicsprogramming,2020-10-27T19:20:51Z,"instead of clamping max resolution, just use tile sizes here"
512964091,552,devshgraphicsprogramming,2020-10-27T19:21:35Z,why did you add an extra link?
512964417,552,Hazardu,2020-10-27T19:21:59Z,"well, size of scratch is currently not calculated properly, and it turns out ~1.3 times smaller than needed"
512969666,552,devshgraphicsprogramming,2020-10-27T19:28:20Z,"`pixelBufferSize` is important because it gets used for storing the actual image as a whole for autoexposure and luminancce measure, you're gonna have a problem if this buffer is sized for a tile and not a whole image."
513001433,552,devshgraphicsprogramming,2020-10-27T20:14:54Z,"duplicate code is bad, just tile always"
513684473,552,devshgraphicsprogramming,2020-10-28T18:50:05Z,you don't need these two variables
513685547,552,devshgraphicsprogramming,2020-10-28T18:51:53Z,no still keep separate maxResolution per denoiser type! just keep this as it was!
513686245,552,devshgraphicsprogramming,2020-10-28T18:53:08Z,tiled download would be nice.
164545791,14,devshgraphicsprogramming,2018-01-29T19:55:21Z,what about a blob for the _mesh itself!?
164547343,14,devshgraphicsprogramming,2018-01-29T20:01:09Z,Maybe boot this and replace with a 'void* getData() {return this;}'
164548397,14,devshgraphicsprogramming,2018-01-29T20:04:32Z,"All this stuff is nice, but not very maintanable.. maybe make a ""struct MeshBufferBlobV1 : public Blob"" which will construct itself from an ICPUMeshBuffer*

And also use the stack instead of heap! 
Making our exporter faster!"
164548676,14,devshgraphicsprogramming,2018-01-29T20:05:34Z,"All this stuff is nice, but not very maintanable.. maybe make a ""struct MeshDataFormatDescBlobV1 : public Blob"" which will construct itself from an IMeshDataFormatDesc<ICPUBuffer>*

And also use the stack instead of heap! 
Making our exporter faster!"
164549086,14,devshgraphicsprogramming,2018-01-29T20:07:11Z,"Loop unrolling will help and happen automagically by the compiler... but!

The memory is being walked very erratically, which the compiler won't fix, its much better for performance to have many loops for each array to be saved."
164549458,14,devshgraphicsprogramming,2018-01-29T20:08:30Z,"This is complicated to maintain, maybe we should set blobSizeDecompr later?

Or at least as sizeof(MeshBufferBlobV1) ?"
164549611,14,devshgraphicsprogramming,2018-01-29T20:09:09Z,"This is complicated to maintain, maybe we should set blobSizeDecompr later?

Or at least as sizeof(IMeshDataFormatDescBlobV1) ?"
164550389,14,Crisspl,2018-01-29T20:12:08Z,"Considered as not needed since it's just collection of ptrs to mesh buffers. Plus bounding box, but this can be recalculated after adding all loaded mesh buffers."
164550909,14,Crisspl,2018-01-29T20:14:05Z,"Yea, better"
164550992,14,devshgraphicsprogramming,2018-01-29T20:14:24Z,"Sure, but think what happens once we put more than one IMesh in a file.

P.S. The bounding box can be quite expensive to recalculate for a skinned mesh.
"
164551014,14,Crisspl,2018-01-29T20:14:28Z,"Nice idea,  thanks"
165057984,14,devshgraphicsprogramming,2018-01-31T13:55:26Z,Use placement new to create a MeshBlob over a larger data memory allocation
165058390,14,devshgraphicsprogramming,2018-01-31T13:56:58Z,ADT violation
165061468,14,devshgraphicsprogramming,2018-01-31T14:08:18Z,change to pointer
176917109,49,devshgraphicsprogramming,2018-03-24T18:58:31Z,also need a yield() equivalent for when milliseconds==0
176917117,49,devshgraphicsprogramming,2018-03-24T18:58:44Z,also need a yield() equivalent for when nanoseconds==0
176917323,49,devshgraphicsprogramming,2018-03-24T19:07:46Z,"std::atomic is neither copyable nor movable. -- volatile int used to work for this...

but we never copy or move these"
176917817,49,devshgraphicsprogramming,2018-03-24T19:31:41Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel
176917819,49,devshgraphicsprogramming,2018-03-24T19:31:49Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel
176917823,49,devshgraphicsprogramming,2018-03-24T19:31:59Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel
176917961,49,devshgraphicsprogramming,2018-03-24T19:38:17Z,this is a lock promotion so its a release and get rolled into one... so please use std::memory_order_acq_rel
176917970,49,devshgraphicsprogramming,2018-03-24T19:38:36Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel
176918040,49,devshgraphicsprogramming,2018-03-24T19:41:57Z,"but theoretically because it would  be sandwiched between two std::memory_order_acq_rel, we could let it be a relaxed"
176918044,49,devshgraphicsprogramming,2018-03-24T19:42:14Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel
176918045,49,devshgraphicsprogramming,2018-03-24T19:42:21Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel
176918148,49,devshgraphicsprogramming,2018-03-24T19:46:30Z,these babies also need to be ported to C++11
205717031,49,devshgraphicsprogramming,2018-07-27T09:26:01Z,"this ADD+STORE NEEDS to be atomic, the return type can be different/normal but the ADD needs to be ATOMIC"
205717325,49,devshgraphicsprogramming,2018-07-27T09:27:02Z,everything below
205825335,49,Crisspl,2018-07-27T16:12:19Z,"It is atomic, look at https://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2"
205825554,49,Crisspl,2018-07-27T16:13:22Z,"they are, but in their `#if` branch"
205830413,49,devshgraphicsprogramming,2018-07-27T16:31:42Z,did we ever solve the acquire release semantics on the spinlocks?
205830651,49,devshgraphicsprogramming,2018-07-27T16:32:37Z,"oh overlooked the change in define for FW_AtomicCounter

but the return type of that function still needs to change to a plain int32_t"
205837986,49,Crisspl,2018-07-27T17:01:51Z,I think so. Anyway everything should be in out comments here
205838179,49,Crisspl,2018-07-27T17:02:34Z,"Yea, i just noticed"
278643259,265,devshgraphicsprogramming,2019-04-25T16:58:35Z,@Crisspl lovely.
278717228,265,devshgraphicsprogramming,2019-04-25T20:24:52Z,rationale?
278717540,265,devshgraphicsprogramming,2019-04-25T20:25:44Z,"I thought we already had ""Wnoerrr=ignored-attributes"""
278743594,265,devshgraphicsprogramming,2019-04-25T21:43:24Z,`-Wno-error=ignored-attributes` doesn't take care of this?
278777058,265,Crisspl,2019-04-26T00:34:52Z,hm apparently not
278838377,265,devshgraphicsprogramming,2019-04-26T07:42:28Z,why special directory for config?
279082494,265,devshgraphicsprogramming,2019-04-26T19:51:07Z,if you dlete cmake cache and reconfigure+regenerate?
279082721,265,devshgraphicsprogramming,2019-04-26T19:51:49Z,that shouldn't happen so there should be an `assert(false)` before the break
279082886,265,devshgraphicsprogramming,2019-04-26T19:52:25Z,again assert
279084075,265,Crisspl,2019-04-26T19:56:41Z,"tried, nothing anyway"
394628408,428,devshgraphicsprogramming,2020-03-18T20:44:43Z,"NO, this is not what I asked for AT ALL

Example 13 stays as the BRDF Explorer

Example 7 is supposed to be a pure CEGUI-only example to show off GUI, nothing else"
394629177,428,devshgraphicsprogramming,2020-03-18T20:46:17Z,"no need for the `IrrlichtBaW` in the path

also don't add `include` and `src` to paths in `ext` just keep it all in one folder"
394629598,428,devshgraphicsprogramming,2020-03-18T20:47:04Z,"this needs to change slightly to reflect that we've added to this code under Apache 2.0, obvs keep the CEGUI notice"
394629932,428,devshgraphicsprogramming,2020-03-18T20:47:41Z,"for extensions we use the following guard
`_IRR_EXT_EXTENSIONNAME_FILENAME_H_INCLUDED_`"
394630409,428,devshgraphicsprogramming,2020-03-18T20:48:36Z,"no, by pointer not reference"
394630461,428,devshgraphicsprogramming,2020-03-18T20:48:41Z,"no, by pointer not reference"
394630694,428,devshgraphicsprogramming,2020-03-18T20:49:06Z,I think namespace on this should be `irr::ext::CEGUI`
394631032,428,devshgraphicsprogramming,2020-03-18T20:49:47Z,"its `""irrlicht.h"""
394632662,428,devshgraphicsprogramming,2020-03-18T20:52:52Z,in .cpp files you can use `using namespace`
394867989,428,devshgraphicsprogramming,2020-03-19T08:45:56Z,don't use warning disable unless you know what they are for
498390138,540,devshgraphicsprogramming,2020-10-01T16:59:20Z,"no need for `GPU` prefix, its implied."
498390423,540,devshgraphicsprogramming,2020-10-01T16:59:48Z,use `nbl`
498391285,540,devshgraphicsprogramming,2020-10-01T17:01:26Z,move this out to separate headers
498391513,540,devshgraphicsprogramming,2020-10-01T17:01:49Z,move this out to separate headers
498391946,540,devshgraphicsprogramming,2020-10-01T17:02:34Z,move this out to separate headers
498392662,540,devshgraphicsprogramming,2020-10-01T17:03:48Z,command buffer needs to be created by a pool/driver so no constructor necessary for the interface (at least no public ctor)
498392790,540,devshgraphicsprogramming,2020-10-01T17:04:04Z,inline
498392984,540,devshgraphicsprogramming,2020-10-01T17:04:27Z,"could you document what this does, or at least link the relevant spec part?"
498393458,540,devshgraphicsprogramming,2020-10-01T17:05:22Z,how will you figure out that the cmdbuf is no longer pending?
498393533,540,devshgraphicsprogramming,2020-10-01T17:05:31Z,how will you figure out that the cmdbuf is no longer pending?
498393751,540,devshgraphicsprogramming,2020-10-01T17:05:59Z,I think you should rather assert that state is `ES_RECORDING`
498394184,540,devshgraphicsprogramming,2020-10-01T17:06:53Z,why the comment?
498394810,540,devshgraphicsprogramming,2020-10-01T17:08:04Z,last argument should be a pointer I think?
498395612,540,devshgraphicsprogramming,2020-10-01T17:09:34Z,"TODO: discuss events, semaphores and barriers."
498395976,540,devshgraphicsprogramming,2020-10-01T17:10:14Z,"maybe make this fully virtual and hide the member, because the OpenGL backend should completely disregard this."
498396073,540,devshgraphicsprogramming,2020-10-01T17:10:27Z,+1
498396654,540,devshgraphicsprogramming,2020-10-01T17:11:30Z,why is `begin` protected?
498397718,540,devshgraphicsprogramming,2020-10-01T17:13:27Z,"same as before, they'll need to be created by a factory so no public constructor necessary"
498398018,540,devshgraphicsprogramming,2020-10-01T17:13:58Z,"in Vulkan its not a fence that gets set, its a semaphore, right?"
498399458,540,devshgraphicsprogramming,2020-10-01T17:16:35Z,what do you need this method for?
386272924,425,devshgraphicsprogramming,2020-03-02T09:17:51Z,"not lambertian, just debug"
386273474,425,devshgraphicsprogramming,2020-03-02T09:19:03Z,why did you turn off culling?
386274023,425,devshgraphicsprogramming,2020-03-02T09:20:11Z,"return the smart pointer instead, don;t do weird grabs and stuff"
386274340,425,devshgraphicsprogramming,2020-03-02T09:20:48Z,ekhm what's the one with the texture doing here?
386275321,425,devshgraphicsprogramming,2020-03-02T09:22:56Z,add an alias `irr/builtin/loaders/PLY/pipelinelayout` (you can cache under multiple paths)
386466937,425,AnastaZIuk,2020-03-02T15:36:38Z,because we have tested it with Criss and didn't work without it
386467060,425,AnastaZIuk,2020-03-02T15:36:49Z,okay
386467581,425,AnastaZIuk,2020-03-02T15:37:34Z,"You wanted me to create 3 debug shaders, should I remove it?"
386467938,425,AnastaZIuk,2020-03-02T15:38:31Z,okay
386499721,425,devshgraphicsprogramming,2020-03-02T16:25:19Z,that means that you have your polygons the wrong way around
386499934,425,devshgraphicsprogramming,2020-03-02T16:25:39Z,they don't need a texture declared
387000211,425,AnastaZIuk,2020-03-03T12:55:28Z,They are correct after the fix however
387107026,425,devshgraphicsprogramming,2020-03-03T15:42:08Z,"UV debug shader should not be using a texture, it should be outputting the UV coords as color!"
387107387,425,devshgraphicsprogramming,2020-03-03T15:42:41Z,none of the default shaders PLY uses for its pipelines can use a texture! (because it will never load a texture)
387107681,425,devshgraphicsprogramming,2020-03-03T15:43:05Z,return type of function still not changed
387130626,425,AnastaZIuk,2020-03-03T16:15:37Z,"oh sorry, to fix"
387130978,425,AnastaZIuk,2020-03-03T16:16:06Z,hey I fixed it!
387492820,425,devshgraphicsprogramming,2020-03-04T07:41:25Z,YOU STILL HAVE A DROP
387523551,425,AnastaZIuk,2020-03-04T08:53:14Z,Goood
185475338,81,devshgraphicsprogramming,2018-05-02T12:14:31Z,"Will this cmake let me specify custom openssl path? (so I dont compile and link against my system libs)

Like this?
https://cmake.org/pipermail/cmake/2011-June/045116.html"
185541307,81,numberZero,2018-05-02T15:36:57Z,"Yes, but note that `OPENSSL_LIBRARIES` is not a valid configuration option; use `OPENSSL_CRYPTO_LIBRARY` (`-DOPENSSL_CRYPTO_LIBRARY=/path/to/crypto.so`) and `OPENSSL_SSL_LIBRARY` instead. `cmake-gui` shows the available configuration options (in terminal, use `cmake -LAH <path-to-build-directory>` instead)"
185561851,81,devshgraphicsprogramming,2018-05-02T16:41:27Z,"what about where it will get include files for openssl from?
"
185611051,81,numberZero,2018-05-02T19:25:42Z,"@devshgraphicsprogramming from `OPENSSL_INCLUDE_DIR`. On my system, that’s just `/usr/include` by default, so that you can write e.g. `openssl/aes.h` to reference `/usr/include/openssl/aes.h`. That’s the way libraries are used with CMake."
339189360,389,devshgraphicsprogramming,2019-10-25T18:42:44Z,I guess you can write `class final` and remove all the `virtual` keywords from the methods
339189905,389,devshgraphicsprogramming,2019-10-25T18:44:12Z,"this is going to crash badly.

You need `.get()->getPointer()`"
339190325,389,devshgraphicsprogramming,2019-10-25T18:45:25Z,nope `if (_params.loaderFlags&E_LOADER_PARAMETER_FLAGS::ELPF_RIGHT_HANDED_MESHES)`
339190810,389,devshgraphicsprogramming,2019-10-25T18:46:36Z,"why are you flipping around .Z and not .X ?
"
339191401,389,devshgraphicsprogramming,2019-10-25T18:48:12Z,STL is completely non indexed?
339198927,389,AnastaZIuk,2019-10-25T19:08:30Z,it seems it is non indexed
339335217,389,AnastaZIuk,2019-10-27T10:21:47Z,@devshgraphicsprogramming  should _params be a const& member or should it be passed through functions?
339336864,389,devshgraphicsprogramming,2019-10-27T11:07:21Z,and which one do you think will crash if you attempt to call the loader from multiple threads?
339336963,389,devshgraphicsprogramming,2019-10-27T11:09:45Z,"where's your flip of the position and the normal around the X axis?

Also you shouldn't be inverting indices here, you'll end up premuting them twice... you'll get the same output as a result when rendering."
339338995,389,AnastaZIuk,2019-10-27T12:03:29Z,"oh right, I forgot about normals flip and did premuting twice actually"
339339089,389,AnastaZIuk,2019-10-27T12:05:47Z,"there is a pos flip, but sure, rest to fix"
339339123,389,AnastaZIuk,2019-10-27T12:06:35Z,"being honest I don't know, I haven't done anything with multithreading before"
339340679,389,devshgraphicsprogramming,2019-10-27T12:41:19Z,"you're permuting the indices, and then you're permuting how normals and positions are read according to the indices... two reversals of indices == no reversal"
339345744,389,devshgraphicsprogramming,2019-10-27T14:29:59Z,"well if you have a member and the loader is shared between threads, what's gonna happen?"
339346133,389,AnastaZIuk,2019-10-27T14:38:03Z,"I think that operations on such a member won't be atomic, right? So it could crash
"
339346415,389,devshgraphicsprogramming,2019-10-27T14:45:12Z,"well done, now you know why every loader has a context struct and passes a reference to it as a parameter.... rule nr. 1 of multi-threading, avoid global states."
339346591,389,AnastaZIuk,2019-10-27T14:48:47Z,"https://github.com/buildaworldnet/IrrlichtBAW/pull/389/commits/8b150696b2c9791cf37751d8b49c05c0b7eff34d

there is only one index mirrowing (last commit i removed double permuting), normals (added in last) and possitions are flipped as well"
339347167,389,devshgraphicsprogramming,2019-10-27T15:00:10Z,where are the positions?
339348005,389,AnastaZIuk,2019-10-27T15:14:37Z,"here there are my boss! 
https://github.com/buildaworldnet/IrrlichtBAW/pull/389/files#diff-cb7f186202d159b4b05d2bdcc4c37d6eR989 positions
https://github.com/buildaworldnet/IrrlichtBAW/pull/389/files#diff-cb7f186202d159b4b05d2bdcc4c37d6eR1500 normals
https://github.com/buildaworldnet/IrrlichtBAW/pull/389/files#diff-cb7f186202d159b4b05d2bdcc4c37d6eR1031 indicies
"
181593508,63,devshgraphicsprogramming,2018-04-15T19:12:51Z,"at least normalize it before doing stuff with it!!!!
(all library functions will assume normalized quaternion input in order to be faster)"
181593824,63,devshgraphicsprogramming,2018-04-15T19:23:04Z,"instead of nonSSE float to double loadu there are instructions to promote the lower half of the register to double such as _mm_cvtps_pd

P.S. most probably need 1 more instruction for the higher part of the register to move it down for bool _0=true"
181593916,63,devshgraphicsprogramming,2018-04-15T19:26:15Z,"there's cvtpd_ps for parallel double to float conversion

add a shuffle or movelh and you can put two registers made from double conversion into 1 register"
181654357,63,devshgraphicsprogramming,2018-04-16T08:18:32Z,"A single shuffle_ps could do the work of OR+AND+movehl

https://software.intel.com/sites/landingpage/IntrinsicsGuide/#!=undefined&techs=SSE,SSE2,SSE3&expand=5174,3301,3301,4791&text=shuff"
181654518,63,devshgraphicsprogramming,2018-04-16T08:19:09Z,this is beautiful
181655787,63,devshgraphicsprogramming,2018-04-16T08:24:15Z,why so many core::transpose4 ?
181656227,63,devshgraphicsprogramming,2018-04-16T08:25:45Z,"this will crash, vectorSIMDf has a memory alignmend requirement of 16 bytes, plus you can't guarantee _out is 16 byte aligned in the first place"
181656857,63,devshgraphicsprogramming,2018-04-16T08:28:10Z,could you explain the shuffles to me?
181689329,63,Crisspl,2018-04-16T10:30:59Z,"Similarly to float32 version. `_a0` and `_a1` are two halves of a row. So:  
* `_mm_shuffle_pd(_a0, _a0, 0)` will give us first element of first half broadcasted (i.e. x brodcasted)  
* `_mm_shuffle_pd(_a0, _a0, 3)` will give us second element of first half broadcasted (y broadcasted). `3` comes from the fact that 3==0b11  
  
Same for second half. The trailing `if` is because in first half it'd have no sense since first half of 3rd row is {0, 0} and so we would have to do something like _mm_add_pd(res, _mm_and_pd(_a1, **mask00**));"
181699716,63,devshgraphicsprogramming,2018-04-16T11:17:16Z,"don't add this, make quaternion oblivious of matrix3x4SIMD

you can reinterpret_cast quaternion to vectorSIMDf very safely"
181700113,63,devshgraphicsprogramming,2018-04-16T11:19:18Z,"I was just confused as to the 0b11 shuffle mask for a shuffle_pd

https://software.intel.com/sites/landingpage/IntrinsicsGuide/#!=undefined&techs=SSE,SSE2,SSE3&expand=5174,3301,3301,4780,4791&text=shuffle"
181733876,63,Crisspl,2018-04-16T13:30:43Z,tested it. Works
182711082,63,devshgraphicsprogramming,2018-04-19T11:10:21Z,with 3 hadds this will go in the res[3] element which will never be memcopied out... as this is the non 4x1 function maybe for this specific instance (mul with 3x1 vector) you should use the default zero vector for r3
182717665,63,devshgraphicsprogramming,2018-04-19T11:42:14Z,"there's no fast way to insert a custom translation into a row matrix, so we must do it simply in non-SIMD fashion (you could do two transposes but thats simply slower).

there's no need for a transpose
so  multiply all rows by center to obtain `r_i = ri*_center`
then use 3 hadds to reduce the 3 rows (and a random register) into a single 4x1 vector `col3`
then get `finalCol3 = _center-_translation-col3`
you can then save the 3 out of 4 components of finalCol3 to elements 3,7,11 of the matrix with regular C memory ops
"
182717738,63,devshgraphicsprogramming,2018-04-19T11:42:42Z,there's no need for the mask as the final component doesn't get saved as there is no row[3]
182718005,63,devshgraphicsprogramming,2018-04-19T11:44:09Z,"this is wrong, it should have been `-c0*_center.x-c1*_center.y-c2*_center.z`"
346540097,400,devshgraphicsprogramming,2019-11-14T20:53:01Z,"pitch, i think in bytes"
346540806,400,devshgraphicsprogramming,2019-11-14T20:54:32Z,"see how address is calculated in VK, if this is 0 then its assumed to be tightly packed."
346543626,400,devshgraphicsprogramming,2019-11-14T21:01:13Z,"actually not in bytes.

But you should aim for it to be image width rounded up to the next ""lowest common multiple of 8 and texel block byte size"" after ""texel block byte size times image width""

BAsically
```cpp
uint32_t findNextAlignedBlock(uint32_t width, uint32_t blockByteSize, uint32_t _alignment=8u)
{
   for (uint32_t addr=width*blockByteSize, n=width; addr<(~0u)-blockSize+1u; width+=blockByteSize,n++)
   {
      if (addr&(_alignment-1u))
         continue;
      return n;
   }
   return 0u;
}
```

"
346544013,400,devshgraphicsprogramming,2019-11-14T21:02:13Z,`(region.bufferRowLength*blockByteSize)` instead
346544240,400,devshgraphicsprogramming,2019-11-14T21:02:54Z,you've already moved the `texelBuffer` you will crash on nullptr
347247538,400,devshgraphicsprogramming,2019-11-18T08:27:21Z,"no this is wrong, you're not taking level into account!"
347247859,400,devshgraphicsprogramming,2019-11-18T08:28:20Z,I removed this function for a reason!
347248257,400,devshgraphicsprogramming,2019-11-18T08:29:29Z,and you `region.bufferRowLength` is still 0
347286283,400,devshgraphicsprogramming,2019-11-18T09:56:48Z,actually its fine.
347289026,400,devshgraphicsprogramming,2019-11-18T10:01:47Z,removed.
347291755,400,Crisspl,2019-11-18T10:07:17Z,"I added it temporarily because I needed to perform core::max on this type just for when _mm_cmplt/gt are broken. See commit previous to last one, I replaced vector3simd for vector3d, somewhere in IImage I think"
347299417,400,devshgraphicsprogramming,2019-11-18T10:22:54Z,fixing the compile issue now.
347304538,400,devshgraphicsprogramming,2019-11-18T10:33:01Z,"changed to a macro in vectorSIMDf, works now"
347304601,400,devshgraphicsprogramming,2019-11-18T10:33:09Z,fixed it myself.
347304761,400,devshgraphicsprogramming,2019-11-18T10:33:31Z,"had to change it a bit, realized this wont work"
357872190,406,devshgraphicsprogramming,2019-12-13T23:40:16Z,"you will only create ONE ICPUImage (previous system was fucked up thats why the API was changed).

The ICPUImage contains all mip-maps (but here you will only have one mip)."
357872324,406,devshgraphicsprogramming,2019-12-13T23:40:57Z,"well you're falling through your switch statement, so all non-rgba format images will try to load with wrong format."
357872744,406,devshgraphicsprogramming,2019-12-13T23:43:23Z,"You can create the ICPU buffer first, and use it instead of `data`"
357872863,406,Przemog1,2019-12-13T23:44:03Z,"I know, but it is for testing purpose, so far I'm trying to load only rgba image"
357872865,406,devshgraphicsprogramming,2019-12-13T23:44:04Z,"this will leak (double grab), use `auto imageBuffer = core::make_smart_refctd_ptr<ICPUBuffer>(imageSize);` instead"
357873116,406,devshgraphicsprogramming,2019-12-13T23:45:26Z,"all of the above are good, you just need to pick the format correctly."
357873177,406,devshgraphicsprogramming,2019-12-13T23:45:47Z,no need for a `.get()` the `->` operator is already overloaded.
357873280,406,devshgraphicsprogramming,2019-12-13T23:46:32Z,"ok dude, you need to fill out `regions` with apropriate values, you have uninitialized memory there right now
"
357873487,406,devshgraphicsprogramming,2019-12-13T23:47:43Z,you can delete this variable actually.
357873492,406,Przemog1,2019-12-13T23:47:45Z,"right
"
358139907,406,devshgraphicsprogramming,2019-12-16T09:55:56Z,"this format is not supported widely, this is why I had a function here originally that would convert R8_SRGB to RGB8_SRGB in software."
366565355,406,AnastaZIuk,2020-01-14T20:50:08Z,@devshgraphicsprogramming in that should I calculate average of channels and perform grayscale or should I fill `g` and `b` channels with certain default values like 0?
366571552,406,AnastaZIuk,2020-01-14T21:05:07Z,"I see we have someting like `video::convertColor`, but I'm not sure if it'll solve it though"
366575753,406,devshgraphicsprogramming,2020-01-14T21:15:23Z,"no what  Imean is that you should duplicare the R8_SRGB channel to fill RGB8_SRGB

so its basically is:
```glsl
out.rgb = in.rrr;
```"
366576349,406,AnastaZIuk,2020-01-14T21:16:47Z,"okay, great"
480280796,534,devshgraphicsprogramming,2020-08-31T17:33:59Z,what happened here!?
480280849,534,devshgraphicsprogramming,2020-08-31T17:34:03Z,what happened here!?
480283319,534,Crisspl,2020-08-31T17:38:34Z,"instance.parent is always SHAPEHROUP by mitsuba docs which doesnt have tform so it makes no sense. I dont know how it worked, i did it in a way more understadnable for me"
480283766,534,Crisspl,2020-08-31T17:39:26Z,"nothing, code wrote by me and commented-out by me. Shouldnt be here"
480285143,534,devshgraphicsprogramming,2020-08-31T17:41:57Z,wouldn't it make more sense to store just one offset and 3 counts?
480286207,534,devshgraphicsprogramming,2020-08-31T17:43:56Z,"use gaussian + mitchell (resample gaussian, reconstruct mitchell)"
480290629,534,Crisspl,2020-08-31T17:52:09Z,why not
480314049,534,devshgraphicsprogramming,2020-08-31T18:36:00Z,@AnastaZIuk could this be a template parameter instead (compile time)?
480345468,534,devshgraphicsprogramming,2020-08-31T19:24:32Z,"any way to disable this function at compile time if `!has_derivative` @Crisspl ?

I'm not an `enable_if` expert unfortunately."
480350738,534,devshgraphicsprogramming,2020-08-31T19:30:11Z,"https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish

I made it possible to have an instance parent another one, transform-wise."
480351193,534,devshgraphicsprogramming,2020-08-31T19:30:43Z,"is this a ""why not"" in agreement?"
480354791,534,devshgraphicsprogramming,2020-08-31T19:35:21Z,where is `scale` and `haveScale` (who declares it) ?
480355133,534,devshgraphicsprogramming,2020-08-31T19:36:05Z,hmmm the constructors should just take the r-value kernels and work out the negative and positive support (in all 3 dimensions) as the maximum of all kernel's supports.
480359597,534,Crisspl,2020-08-31T19:45:15Z,"yeah, all streams for one IR tree are put in continuous memory anyway so it can be done without an issue"
480360090,534,Crisspl,2020-08-31T19:46:18Z,"base specific for this kernel, at the top of this file"
480413687,534,devshgraphicsprogramming,2020-08-31T21:37:36Z,don't see it in `CChannelIndependentImageFilterKernelBase`
482043419,534,devshgraphicsprogramming,2020-09-02T12:51:21Z,we need to look at if your rewrite of this kernel handles the scale correctly
270784497,250,devshgraphicsprogramming,2019-04-01T09:31:47Z,"nice but add a human readabke string beforehand, because someone will just get a random number out of nowhere in the console and not know what it means"
270784744,250,devshgraphicsprogramming,2019-04-01T09:32:33Z,`screen_gamma` is actually 2.233333333
270785354,250,devshgraphicsprogramming,2019-04-01T09:34:24Z,Or try to set to 1.0 and then use the SRGB formats instead in `new asset::CImageData` later on
270788733,250,devshgraphicsprogramming,2019-04-01T09:43:16Z,I said to assume `Params.HandleSRGB=true` and remove it from the engine!
271576983,250,qbasa12,2019-04-03T04:43:08Z,"allright
"
271577122,250,qbasa12,2019-04-03T04:44:09Z,actually always:1.0
271619866,250,devshgraphicsprogramming,2019-04-03T08:01:04Z,"@qbasa12 this one needs switch cases for SRGB as well

P.S. @Crisspl why are there EF_R8_SRGB, EF_R8G8_SRGB.... I'm 100% sure that OpenGL doesn't support that, is that even a thing in Vulkan?"
271620010,250,devshgraphicsprogramming,2019-04-03T08:01:29Z,"@qbasa12 there are more SRGB formats https://github.com/Crisspl/IrrlichtBAW/blob/master/include/irr/asset/EFormat.h, please provide cases for all.l

P.S. @Crisspl why are there EF_R8_SRGB, EF_R8G8_SRGB.... I'm 100% sure that OpenGL doesn't support that, is that even a thing in Vulkan?"
271620205,250,devshgraphicsprogramming,2019-04-03T08:02:04Z,excise this and the comment completely
271620647,250,devshgraphicsprogramming,2019-04-03T08:03:10Z,replace `Params.HandleSRGB` with `true` entirely
271682644,250,Crisspl,2019-04-03T10:48:16Z,">there are more SRGB formats

The rest is taken care of or not supported in GL

>why are there EF_R8_SRGB, EF_R8G8_SRGB.... I'm 100% sure that OpenGL doesn't support that, is that even a thing in Vulkan?

All we have is slightly renamed VkFormat. Ofc it doesn't mean they are supported in GL"
271692594,250,devshgraphicsprogramming,2019-04-03T11:19:33Z,"I'm surprised those things are supported in vulkan XD.

However those switch statements are still missing the cases for `EF_R8G8B8_SRGB`, `EF_B8G8R8_SRGB`, the BCn SRGB formats, ETC and ASTC"
271697592,250,Crisspl,2019-04-03T11:35:17Z,"ETC and ASTC SRGB are all there, but if I haven't overlooked a few of BCn are missing (BC1-BC3 I think) so please add also them, thanks"
271714581,250,devshgraphicsprogramming,2019-04-03T12:24:08Z,@qbasa12 any questions?
411670157,473,devshgraphicsprogramming,2020-04-20T20:28:55Z,"actually if you want a 64bit uint constant the suffix is `ull`, e.g. `1ull`"
411670810,473,devshgraphicsprogramming,2020-04-20T20:30:03Z,i dont think that function declaration return type is the place to put `[[maybe_unused]]`
411670833,473,AnastaZIuk,2020-04-20T20:30:06Z,"I know those literals, right"
411671301,473,AnastaZIuk,2020-04-20T20:30:55Z,"I didn't solve the problem though, so it will be removed probably"
411671309,473,devshgraphicsprogramming,2020-04-20T20:30:55Z,"actually while you're at it, this function should be changed to use floats throughout"
411671584,473,AnastaZIuk,2020-04-20T20:31:18Z,but probably should be at def
411673761,473,devshgraphicsprogramming,2020-04-20T20:35:05Z,its probably being unused where its being called.
411673839,473,devshgraphicsprogramming,2020-04-20T20:35:12Z,so why the cast?
411678612,473,AnastaZIuk,2020-04-20T20:43:19Z,"yes, I wanted to use attribute to avoid it"
411678772,473,AnastaZIuk,2020-04-20T20:43:35Z,to fix
432381808,473,devshgraphicsprogramming,2020-05-29T09:57:58Z,"its the correct place to put it, where its being called and unused, not the global definition for everyone"
391790133,436,devshgraphicsprogramming,2020-03-12T17:47:07Z,dont need this
391790319,436,devshgraphicsprogramming,2020-03-12T17:47:25Z,no display
391790589,436,devshgraphicsprogramming,2020-03-12T17:47:54Z,"now instead of doing any more crap with the images, just save them to EXR again, one by one"
392230481,436,devshgraphicsprogramming,2020-03-13T13:35:25Z,as for an input image with fileopendialog
392230883,436,devshgraphicsprogramming,2020-03-13T13:36:07Z,this goes in `EColorSpace.h`
392231247,436,devshgraphicsprogramming,2020-03-13T13:36:43Z,"images only have EOTF, only displays are relevant for OETF"
392231360,436,devshgraphicsprogramming,2020-03-13T13:36:57Z,don't have name in the general metadata.
392232890,436,devshgraphicsprogramming,2020-03-13T13:39:45Z,"AFAIK NONLINEAR sRGB will only be the case for non-floating point image format (image depth 8 bit or less)

float16 or higher will be LINEAR sRGB without an EOTF (linear EOTF)"
392233115,436,devshgraphicsprogramming,2020-03-13T13:40:14Z,name is something exr specific etc.
392588838,436,AnastaZIuk,2020-03-14T13:34:22Z,what do you mean?
392589548,436,devshgraphicsprogramming,2020-03-14T13:45:41Z,if its linear then the EOTF_ is literally nothing
392589620,436,devshgraphicsprogramming,2020-03-14T13:46:24Z,"add a `EOTF_IDENTITY` to the list (pass through, no transformation of inputs occurs)"
392589719,436,devshgraphicsprogramming,2020-03-14T13:47:59Z,"I don't like the vulkan enum split between `NONLINEAR` and `LINEAR`, you should delete these sufficies (and the `KHR` and `EXT`) 

whether the pixels are linear or not will be given by `ELECTRO_OPTICAL_TRANSFER_FUNCTION`

(together the pair of `E_COLOR_SPACE` and `ELECTRO_OPTICAL_TRANSFER_FUNCTION` will give the equivalent Vulkan enum)"
392589769,436,devshgraphicsprogramming,2020-03-14T13:48:34Z,still native file dialog or command like arg to give us the filename (I want this to be a tool I actually want to use rather than a pointless example)
278430596,271,devshgraphicsprogramming,2019-04-25T07:47:24Z,why enable exceptions?
278430756,271,manhnt9,2019-04-25T07:47:54Z,"check other mails too, I explained it in the issue"
278430811,271,devshgraphicsprogramming,2019-04-25T07:48:07Z,I think this may fail if the output directory is not present there yet
278431403,271,devshgraphicsprogramming,2019-04-25T07:49:58Z,why did you remove this?
278432189,271,devshgraphicsprogramming,2019-04-25T07:52:17Z,"A. Why are you using `FORCE` all over the place?
B. All of the subfolders specify the things with `option` not `set`, why are you using `set` ?"
278432365,271,manhnt9,2019-04-25T07:52:49Z,The folder is guaranteed by the submodule (this is a verified fix by Criss and shaderc's devs). Still a dirty work-around though but it's out of my support scope anyways.
278432443,271,manhnt9,2019-04-25T07:53:03Z,explained in other issue
278432663,271,manhnt9,2019-04-25T07:53:42Z,here: https://github.com/buildaworldnet/IrrlichtBAW/issues/264
278433110,271,manhnt9,2019-04-25T07:55:06Z,Using `FORCE` so CMake overwrite current settings and people don't need to clear build folder and run CMake again. A minor issue though.
336540984,381,devshgraphicsprogramming,2019-10-18T15:11:49Z,"not like this, look at https://github.com/buildaworldnet/IrrlichtBAW/blob/master/include/irr/config/BuildConfigOptions.h.in"
336541245,381,devshgraphicsprogramming,2019-10-18T15:12:25Z,"```cpp
#else
#error ""Need GLI""
```"
336541831,381,devshgraphicsprogramming,2019-10-18T15:13:39Z,"if you did https://github.com/buildaworldnet/IrrlichtBAW/pull/381/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.ktx&file-filters%5B%5D=.txt&file-filters%5B%5D=No+extension#r336541245

then we wouldn't need this `#ifdef` clutter"
336543143,381,devshgraphicsprogramming,2019-10-18T15:16:35Z,"if you want to support 1d,2d array textures or cubemaps you need to call this something else, and touch index 1 or 2 so you have the correct 3d extent"
336544406,381,devshgraphicsprogramming,2019-10-18T15:19:23Z,I suggest to rename it to `minOffset`
336544776,381,devshgraphicsprogramming,2019-10-18T15:20:10Z,"you need to do
```cpp
minOffset[is1D ? 1:2] = face;
```

then everything shall work"
337404445,381,devshgraphicsprogramming,2019-10-22T09:10:05Z,"gli loads both DDS and KTX, you could nuke our DDS loader and have this class handle both KTX and DDS."
337404608,381,devshgraphicsprogramming,2019-10-22T09:10:29Z,ktx and dds would be nice.
337404833,381,devshgraphicsprogramming,2019-10-22T09:10:54Z,would be good to load dds as well since GLI does both (and you could get rid of our awful DDS loader).
185208710,80,devshgraphicsprogramming,2018-05-01T12:03:31Z,"whats going on here?

why would createMeshBufferDuplicate give a null meshdataandformat if _inbuffer has a non null one ???"
185208979,80,devshgraphicsprogramming,2018-05-01T12:06:44Z,"There's an SGPUMesh for such operations on an IGPUMesh

should there be an SCPUMesh derived from ICPUMesh too?
(if one wants to add and remove meshbuffers)"
185209139,80,devshgraphicsprogramming,2018-05-01T12:08:13Z,"don't add mutability to ICPUMesh API, if you have code that requires mutability and manipulation then create an SCPUMesh (or skinned mesh) and cast it when you're done"
185209261,80,devshgraphicsprogramming,2018-05-01T12:09:35Z,CCPUSkinnedMesh should ONLY contain SCPUSkinMeshBuffers!!!
185327755,80,Crisspl,2018-05-01T20:40:10Z,And there's appropriate dynamic_cast
185331642,80,Crisspl,2018-05-01T20:55:47Z,But how you know that _inbuffer has a non null one?
186552886,80,devshgraphicsprogramming,2018-05-07T21:11:58Z,"You took away my unordered_set optimization it seems

Edit: checked the rest, it seems you didn't but you changed my include files :)"
186552955,80,devshgraphicsprogramming,2018-05-07T21:12:17Z,functional is needed for delete and add keyframes functions
186553376,80,devshgraphicsprogramming,2018-05-07T21:13:55Z,rename to denormalized for consistency
283866246,297,devshgraphicsprogramming,2019-05-14T15:36:39Z,spit out the profiling only in `_IRR_DEBUG` if defined
283867451,297,devshgraphicsprogramming,2019-05-14T15:38:52Z,"this needs to be the default to the `calculateSmoothNormals` function's std::function parameter, need to support user define-able vertex comparison criterions"
283868908,297,devshgraphicsprogramming,2019-05-14T15:41:35Z,instead of epsilon I want a `std::function` vertex comparison predicate
283870151,297,devshgraphicsprogramming,2019-05-14T15:44:05Z,This is 100% correct ;)
283870569,297,devshgraphicsprogramming,2019-05-14T15:44:57Z,you know you could just use a std::vertex::resize instead of a reserve+emplace loop
286832703,297,devshgraphicsprogramming,2019-05-23T08:34:34Z,"this needs to be an actual `assert(!core::isPoT(_hashTableMaxSize))`, we want the program to crash (with a message) 

`_IRR_DEBUG_BREAK_IF` only breaks the debugger if one is used, otherwise execution continues."
286835874,297,devshgraphicsprogramming,2019-05-23T08:42:27Z,"Maybe take heed from 
https://github.com/buildaworldnet/IrrlichtBAW/blob/839516417231e3a47dcb1781b9414965ca74a85b/include/irr/asset/IMeshManipulator.h#L105

because the mesh does not always need to be created as a duplicate (in-fact that can be harmful to other optimizations)."
286836094,297,devshgraphicsprogramming,2019-05-23T08:43:00Z,"you also need to check whether the index type is `EIT_UNKNOWN` 
(that the mesh has no shared vertices)"
502294384,539,devshgraphicsprogramming,2020-10-09T09:10:15Z,"change the theshold to `(0x1<<COALESCING_DWORDS_LOG2)`

Also does changing the `COALESCING_DWORDS_LOG2` to 5 and deleting the `notEnoughInvocations` (always false) change the perf of the benchmark much?"
502295127,539,devshgraphicsprogramming,2020-10-09T09:11:29Z,"wonder if we hoisted the `BoneData_dword retval` above the if, and had only one SSBO with the `restrict` keyword, how the perf would change then (both branches do `toBoneData`"
338171364,386,AnastaZIuk,2019-10-23T17:09:08Z,"@devshgraphicsprogramming shouldn't it actually be a uint64_t, should it? I mean, you could use then || and specify more than one flag at once"
338267516,386,devshgraphicsprogramming,2019-10-23T20:41:06Z,nope all good.
338268369,386,devshgraphicsprogramming,2019-10-23T20:43:08Z,"If it isn't set, compatibility with left-handed coordinate camera is assumed."
338268703,386,devshgraphicsprogramming,2019-10-23T20:43:48Z,"const reference, not just a const"
338269317,386,devshgraphicsprogramming,2019-10-23T20:45:10Z,`ET_BUFFER` it already exists
338269564,386,devshgraphicsprogramming,2019-10-23T20:45:46Z,"no need to grab, you only grab if you expect to hold onto the object after the function returns."
338272012,386,devshgraphicsprogramming,2019-10-23T20:51:16Z,wtf? there's only ever one file to read!
338272227,386,devshgraphicsprogramming,2019-10-23T20:51:44Z,what on earth is this?
338272381,386,devshgraphicsprogramming,2019-10-23T20:52:07Z,the SAssetBundle should return exactly one `ICPUBuffer`
338274857,386,devshgraphicsprogramming,2019-10-23T20:57:24Z,"we already have a function for getting the file extension, see how other loaders use it."
338276152,386,devshgraphicsprogramming,2019-10-23T21:00:24Z,"You do realize that the whole point of `const char** getAssociatedFileExtensions()` is that the `IAssetManager` does all this for you?

The `bool isALoadableFileFormat(io::IReadFile* _file) const` function should only check the ability to load the file based on the file contents (not the extension) such as the presence of a header, etc.

In this case we can obviously see that the function need always `return true` because a .bin file does not have a header."
473275042,530,devshgraphicsprogramming,2020-08-19T19:40:58Z,default should not blend!
473275898,530,devshgraphicsprogramming,2020-08-19T19:42:43Z,"layouts, shaders and metadata are common for both actual MTL pipelines and a dummy default one.

Also why are you creating this default pipeline in OBJ loader, and not MTL loader?"
473276182,530,devshgraphicsprogramming,2020-08-19T19:43:17Z,what's this new function?
473282414,530,Hazardu,2020-08-19T19:55:07Z,"because if there is no mtl file, the pipeline for a mesh buffer is assigned in obj loader"
473306098,530,devshgraphicsprogramming,2020-08-19T20:41:52Z,the default result of a loader should be handled by the loader.
474269262,530,Hazardu,2020-08-20T20:59:18Z,I'm getting access violations on this line. I have no idea why
474270775,530,Hazardu,2020-08-20T21:02:25Z,"when using loadAsset() from the constructor, _override is equal to null ptr, and only then. The plan is to load the cached descriptor set with the magenta checkerboard and use it."
474309545,530,devshgraphicsprogramming,2020-08-20T22:36:58Z,"bundle is empty?
"
474311925,530,Hazardu,2020-08-20T22:44:24Z,"i found the problem, CImageWriterPNG was initialized after CGraphicsPipelineLoaderMTL"
474332581,530,devshgraphicsprogramming,2020-08-20T23:52:17Z,"erm, maybe
just maybe

we should have adding of built-in assets be separate from the constructors?

i.e. first all loaders are constructed and added, then we call `init` ?"
250556965,213,devshgraphicsprogramming,2019-01-24T10:56:46Z,"what about the check that all the mips that don't have format `EF_UNKNOWN`, must have the same format?"
250653003,213,Crisspl,2019-01-24T15:31:06Z,"Since constructor (and those init functions as well) is protected, construction code assumes that `create()` already make sure that input `core::vector<asset::CImageData*>` is perfectly valid"
250682872,213,devshgraphicsprogramming,2019-01-24T16:35:18Z,ok so this sort of validation takes place somewhere else?
250684222,213,Crisspl,2019-01-24T16:38:26Z,take a look at `create_impl()` and `validateMipchain()`
254303586,213,devshgraphicsprogramming,2019-02-06T14:56:13Z,"that will break, badly I have need for both in the current codebase

Also what MSVC version are you using? this compiles for us on windows."
254308841,213,Crisspl,2019-02-06T15:08:25Z,"VS 2017 (15.9.3)
i'll try changing toolset version.
Also i'll have to update cmake because it generates projects for VS 2015 and maybe there's the differenece between our setup"
254311169,213,Crisspl,2019-02-06T15:13:53Z,"yea, that was it! With v141 toolset it builds just fine"
255296826,213,devshgraphicsprogramming,2019-02-09T12:05:32Z,isn't `std::enable_if_t`c++17?
255303095,213,Crisspl,2019-02-09T15:59:02Z,"Nah, all this `_v` and `_t` from `<type_traits>` is c++14. And i'm always checking the standard version of a feature if i'm not sure, so don't worry :)"
478504166,531,devshgraphicsprogramming,2020-08-27T15:25:38Z,"need this for anything?
"
478507492,531,devshgraphicsprogramming,2020-08-27T15:29:57Z,don't assert that texture for bumpmap (or a texture in general will be there).
478507816,531,devshgraphicsprogramming,2020-08-27T15:30:22Z,(it might not be)
478578220,531,devshgraphicsprogramming,2020-08-27T17:23:42Z,they should be adjacent no matter the min alloc size (if you `alloc` and `commit` the whole list of meshes that you wish to be adjacent)
478578772,531,devshgraphicsprogramming,2020-08-27T17:24:40Z,you just set minimum number of triangles to 2^16-1?
478579218,531,devshgraphicsprogramming,2020-08-27T17:25:18Z,why not `alloc` all at once?
478579349,531,devshgraphicsprogramming,2020-08-27T17:25:32Z,why not `commit` all at once?
478581296,531,devshgraphicsprogramming,2020-08-27T17:28:56Z,why?
478581976,531,devshgraphicsprogramming,2020-08-27T17:30:04Z,move this below `camera->render()`
478582469,531,devshgraphicsprogramming,2020-08-27T17:30:54Z,this is going to be a problem
501222758,542,devshgraphicsprogramming,2020-10-07T18:24:58Z,this a bit messed up.
501223295,542,devshgraphicsprogramming,2020-10-07T18:25:54Z,this a bit messed up.
501223679,542,devshgraphicsprogramming,2020-10-07T18:26:36Z,"WTF?

What is `stb` doing in my repo!?"
501224643,542,devshgraphicsprogramming,2020-10-07T18:28:19Z,this a bit messed up.
501224751,542,devshgraphicsprogramming,2020-10-07T18:28:31Z,this a bit messed up.
501225757,542,devshgraphicsprogramming,2020-10-07T18:30:09Z,this is a bit messed up.
501248486,542,devshgraphicsprogramming,2020-10-07T19:11:05Z,this rule needs updating.
501248559,542,devshgraphicsprogramming,2020-10-07T19:11:12Z,include dir
501249015,542,devshgraphicsprogramming,2020-10-07T19:12:02Z,"oh boy many more example cmakes needs to be updated then, make sure you run all examples."
501633440,542,devshgraphicsprogramming,2020-10-08T11:03:20Z,"IRR_ROOT_DIR not CMAKE_SOURCE_DIR

this would cause problems when a large project attempts to use our engine via `add_subdirectory`"
282001731,295,devshgraphicsprogramming,2019-05-08T10:09:13Z,@Crisspl what changed?  how does this fix the bug?
341873066,398,devshgraphicsprogramming,2019-11-03T21:18:27Z,"use a reference, the functional object is very expensive to pass around by copy

In all honesty I'd prefer a bunch of nice staateless static methods to a lambda"
341873311,398,AnastaZIuk,2019-11-03T21:23:48Z,"yup, it will be fixed "
344511522,398,AnastaZIuk,2019-11-10T19:55:01Z,"@devshgraphicsprogramming  well, how should it look like?
do you mean a static method expecting two lambdas for handling orientation?"
344714999,398,AnastaZIuk,2019-11-11T13:40:49Z,"@devshgraphicsprogramming  I mean, if there should be such a method, it should have access to `_params`. Should I create a pointer to it as a member? How would you like it to look like?"
344730426,398,AnastaZIuk,2019-11-11T14:17:09Z,@devshgraphicsprogramming how should I apply flipping on BAW Loader exactly?
345335150,398,devshgraphicsprogramming,2019-11-12T17:13:57Z,are there still questions?
345375327,398,AnastaZIuk,2019-11-12T18:36:48Z,"it's been valid still
> how should I apply flipping on BAW Loader exactly?"
425650789,489,devshgraphicsprogramming,2020-05-15T08:36:11Z,do the `load` and `dump` actually get called without polymorphism?
425675833,489,Przemog1,2020-05-15T09:21:14Z,"yup, check out parameters of `load` and `dump` functions
https://github.com/greg7mdp/parallel-hashmap/blob/master/parallel_hashmap/phmap_dump.h#L120"
425710171,489,devshgraphicsprogramming,2020-05-15T10:26:05Z,"ah, sweet!"
173868891,48,devshgraphicsprogramming,2018-03-12T16:52:58Z,"this is not very parallel, i'm sure there is a more efficient way to do this"
173871068,48,devshgraphicsprogramming,2018-03-12T16:59:19Z,"generate the matrices to be multiplied BEFORE starting the main loop, otherwise rand() will take most of the computation time!"
173874438,48,devshgraphicsprogramming,2018-03-12T17:09:17Z,this needs acquire and release orders at once
173874920,48,devshgraphicsprogramming,2018-03-12T17:10:46Z,"this is a kind of 'lock', doesn't it need acquire ?"
173875026,48,devshgraphicsprogramming,2018-03-12T17:11:05Z,"this is a a sort of 'unlock', doesnt it need release?"
173875713,48,devshgraphicsprogramming,2018-03-12T17:13:07Z,this may need both acquire and release
232599234,165,devshgraphicsprogramming,2018-11-12T10:15:06Z,this shoud not be a static/singleton multiple contexts should be possible
232599699,165,devshgraphicsprogramming,2018-11-12T10:16:26Z,"we need both functions, for example when the OpenCL device has already been created externally and we need to see if its the right one for sharing with the OpenGL GPU. "
232602044,165,devshgraphicsprogramming,2018-11-12T10:23:49Z,"do not init an OpenCL device context by default for everyone, only if asked for in device creation parameters.

While I'm not asking for a full #162 fix and implementation, that API calls for a query OpenCL devices and a list of devices for which to create contexts in device creation paramters...

Basically a simple `createOpenCLInteropContext` boolean in device creation parameters will do for now."
234398089,165,manhnt9,2018-11-17T05:59:41Z,"whole COpenCLHandler is current used as static, so everything is static
I will store a COpenCLHandler object in COpenGLDriver, is that OK?"
234261182,177,devshgraphicsprogramming,2018-11-16T16:13:38Z,"are you sure MSVC is complaining here?

Because I will get linking errors in GCC if the `constexpr` is not `static inline` and I sure as hell compile with `-std=c++11`
"
234261686,177,devshgraphicsprogramming,2018-11-16T16:14:59Z,"good fix, however try to scope the vectors so they go out of scope after the `multi_alloc_addr`"
234308495,177,Crisspl,2018-11-16T18:41:22Z,wanted to make it same scope as those arrays. Anyway `dummyBytes` is used once more after `multi_alloc_addr` (line 246)
234310148,177,devshgraphicsprogramming,2018-11-16T18:47:19Z,ok as you wish.
234314646,177,devshgraphicsprogramming,2018-11-16T19:02:58Z,_IRR_STATIC_INLINE_CONSTEXPR should replace the whole `static` and `contexpr` 
234314745,177,devshgraphicsprogramming,2018-11-16T19:03:18Z,"I see you defined the macro correctly, so just take the extra qualifiers away"
259598572,219,devshgraphicsprogramming,2019-02-24T00:35:55Z,"what happens if can't find Bullet on system? Can it build without?

(BTW there is some code in the top-level CMake that skips building with Vulkan if Vulkan SDK is not detected on the system, maybe you can steal that approach)"
260376476,219,khomsidakhun,2019-02-26T16:38:30Z,I'd assume it won't spew errors and you'd be able to do without but just to be safe I'll add some sanity checks if they leave it blank and not glob_recurse over a blank string
288491740,219,devshgraphicsprogramming,2019-05-29T10:10:08Z,now your Bullet lib needs to come from the submodule
336174449,378,AnastaZIuk,2019-10-17T18:58:55Z,@devshgraphicsprogramming could I create a protected function in ISceneNodeAnimator handling that? DRY
336175065,378,AnastaZIuk,2019-10-17T19:00:23Z,in reference to https://github.com/buildaworldnet/IrrlichtBAW/pull/378/files#r336174449
336347770,378,devshgraphicsprogramming,2019-10-18T07:13:10Z,"nope, that would lead to clutter.

you can acutally use `core::mix(-expression,expression,bool)`"
396362414,443,devshgraphicsprogramming,2020-03-23T10:51:43Z,you don't need this in this example
396367420,443,devshgraphicsprogramming,2020-03-23T11:00:30Z,no need for this
396367522,443,devshgraphicsprogramming,2020-03-23T11:00:39Z,nor this
396368044,443,devshgraphicsprogramming,2020-03-23T11:01:40Z,no need for this
396368123,443,devshgraphicsprogramming,2020-03-23T11:01:47Z,or this
461148272,522,devshgraphicsprogramming,2020-07-27T20:25:15Z,"rename this header, its not common to all material compilers, only one particular backend (or split out the common and non common part).

For example virtual texturing is only really a part of a backend that does not use the descriptor indexing Vulkan capability.

also path is wrong, should be `irr/builtin/glsl/material_compiler` I think

"
461202065,522,Crisspl,2020-07-27T22:16:54Z,"> its not common to all material compilers, only one particular backend

thats why its in subdir for glsl backend

> also path is wrong, should be irr/builtin/glsl/material_compiler I think

that would imply scattering material_compiler sources over language/backend-based directories like glsl/material_compiler, backendX/material_compiler, backendY/material_compiler etc"
461204862,522,devshgraphicsprogramming,2020-07-27T22:24:21Z,"hmm ok makes sense, buut there are many possible backends for GLSL:
- GLSL separate pipeline/shader per BSDF (no multi draw indirect)
- GLSL with virtual geometry and virtual textures (no descriptor indexing)
- GLSL with bindless (descriptor indexing)

plus there is the question if the rasterizer backend will want/need the sampling functons (for stochastic shadows)"
470032036,522,devshgraphicsprogramming,2020-08-13T15:20:20Z,"@Crisspl take not of this comment, I'm closing the PR"
269774654,249,devshgraphicsprogramming,2019-03-27T21:18:25Z,"what are you doing?

I said log the metadata... i.e. the PNG header!"
269774949,249,devshgraphicsprogramming,2019-03-27T21:19:14Z,check the gamma ( JPEG has different color profiles)
269775933,249,devshgraphicsprogramming,2019-03-27T21:22:04Z,"if gamma=2.2 then its SRGB, if gamma 2.0 then you can also pretend its SRGB, if gamma 1.0 then its UNORM

anything else then return null and report an error"
269776548,249,devshgraphicsprogramming,2019-03-27T21:23:55Z,"A. Don't log the pixels!
B. Now that sRGB has been set as format, remove this squaring conversion!"
473264294,529,devshgraphicsprogramming,2020-08-19T19:20:08Z,"why add a swizzle to SAT just because one example texture uses it, it makes far more sense to have SAT be oblivious to the swizzle and make sure you apply an inverse swizzle (Same swizzle) when saving the new/output texture to file."
474168055,529,devshgraphicsprogramming,2020-08-20T17:52:28Z,investigate why `readBlockPos` has a non-zero w (go up the stack)
474168127,529,devshgraphicsprogramming,2020-08-20T17:52:35Z,this worries me
474660738,529,AnastaZIuk,2020-08-21T12:19:06Z,"it's because `readBlockPos` if filled with `localCoord+trueOffset`
and some line earlier there is the statement
`trueOffset.w = subresource.baseArrayLayer;`"
474660982,529,AnastaZIuk,2020-08-21T12:19:36Z,corrected
475111289,529,devshgraphicsprogramming,2020-08-22T17:18:17Z,ok makes sense.
234402401,181,devshgraphicsprogramming,2018-11-17T09:24:21Z,should that be a vector of std::pair ?
234415182,181,devshgraphicsprogramming,2018-11-17T17:21:19Z,"since you will always require an even number of vertices, make that a vector of vertex-pairs"
234415251,181,manhnt9,2018-11-17T17:23:35Z,I will update soon
294235784,328,devshgraphicsprogramming,2019-06-17T10:35:41Z,we don't need any of the non-virtual functions
294236013,328,devshgraphicsprogramming,2019-06-17T10:36:22Z,whenever you use `virtual` use the `override` keyword in the base classes
294236169,328,devshgraphicsprogramming,2019-06-17T10:36:52Z,need the parameter about RMB zoom here
373197275,415,devshgraphicsprogramming,2020-01-30T21:15:29Z,"no need to have it come from your own fork, its generally ok to go straight from main repo if the owner is not a maniac (unlike some repos we've had to clone)"
373197496,415,devshgraphicsprogramming,2020-01-30T21:16:00Z,since you're only adding includes I wouldn't call the macro `link`
374866481,415,devshgraphicsprogramming,2020-02-04T19:09:37Z,?
376703932,415,devshgraphicsprogramming,2020-02-08T11:12:23Z,"wrap this in a test for MSVC compiler (only enable if MSVC detected, we have plenty of these tests in the engine headers, so just copy one)"
419963846,475,devshgraphicsprogramming,2020-05-05T09:03:43Z,Did I want this?
419964028,475,devshgraphicsprogramming,2020-05-05T09:04:01Z,"oh, you merged my branch"
425632186,488,devshgraphicsprogramming,2020-05-15T08:00:41Z,also if CEGUI is getting built
425633454,488,devshgraphicsprogramming,2020-05-15T08:03:14Z,"should that be public for everyone, or should we have a special getter just for loaders?"
425634614,488,devshgraphicsprogramming,2020-05-15T08:05:30Z,what's this about?
426883899,488,devshgraphicsprogramming,2020-05-18T20:45:38Z,"tha layout of a bitfield is not standardised, warning can and may backfire"
409096639,462,devshgraphicsprogramming,2020-04-15T19:55:31Z,"code snippets will be necessary (more like it)

ask for a smallest reproducible example either as inline code, gist or a Pull Request/separate repo (cpp code listing)."
409096849,462,devshgraphicsprogramming,2020-04-15T19:55:53Z,I need CPU and commit hash/tag/branch
409097139,462,devshgraphicsprogramming,2020-04-15T19:56:26Z,this is more like for a PR rather than a feature request Issue
460003961,520,Crisspl,2020-07-24T11:46:26Z,I'd move this to IComputePipeline.h or make separate utility header and move all 3 there
460004377,520,Crisspl,2020-07-24T11:47:23Z,Probably separate header is best option
460061262,520,Przemog1,2020-07-24T13:45:04Z,@devshgraphicsprogramming what do you think?
460354435,520,devshgraphicsprogramming,2020-07-25T02:42:39Z,"I second criss, this (all indirect structs) should move to `irr/asset/IPipeline.h` "
257990844,222,devshgraphicsprogramming,2019-02-19T11:03:41Z,why is this constructor implicitly adopting memory?
258016649,222,Crisspl,2019-02-19T12:26:07Z,just using the adopting constructor but as you can see it allocates its own mem. However it's missing memcpy
