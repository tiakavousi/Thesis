id,pr_number,user,created_at,body
627440957,835,Paul-Licameli,2021-05-06T13:52:48Z,"Is the effect of this line to let any one of these libraries access the header files of any other one of the libraries?

I see inclusions like:
#include ""lib-string-utils/UrlEncode.h""

Therefore lib-telemetry depends on lib-string-utils.  You can also see that from its CMakeLists.txt where it uses target_link_libraries.

But what I'm hoping to do with the libraries I'm developing is avoid #include directives with more than one path component.

And I think target_link_libraries will let you do just that -- shorten the #include path, so long as the library dependent on (here lib-string-utils) does not use PRIVATE in target_sources.

See my commit 45ff9419864c079cbd6f51cdd5e11f58ec882c30.

"
627445357,835,crsib,2021-05-06T13:57:50Z,"This could be done in a different way, as well as the `*LibName*Api.h`

I can change it if you want, no problem 💯 "
627506072,835,Paul-Licameli,2021-05-06T15:05:50Z,"You took the ctor out-of-line to avoid a nested header file.  Good!
"
627506600,835,Paul-Licameli,2021-05-06T15:06:27Z,"You figured out TranslatableString::Debug().  Good!
"
627510621,835,Paul-Licameli,2021-05-06T15:11:06Z,We aren't distinguishing a really failed import from the user cancelling it in the progress indicator.  Maybe that does not matter.
627515066,835,Paul-Licameli,2021-05-06T15:16:26Z,"Q: How do you know this string is un-internationalized (to be consistent with other uses of ReportBuiltinEvent)?
A: Because of how we use type distinctions for strings!
"
627535303,835,Paul-Licameli,2021-05-06T15:40:29Z,"What event to you think you are reporting?  I think the effect is not necessarily ""selected"" interactively if we come to this line.  It might be part of a macro invocation.  I know people often master their tracks with macros.

Maybe that distinction does not matter, but comment at least what you really mean.
"
627537546,835,Paul-Licameli,2021-05-06T15:43:22Z,"Why is the opening of this one non-modal dialog important to report, but not the others (Mixer board, Karaoke, Macro editor, Contrast, History window)?  Just asking.
"
627543880,835,Paul-Licameli,2021-05-06T15:50:24Z,"I'd like this table and the enum definition to refer to each other in comments
"
627626167,835,Paul-Licameli,2021-05-06T17:26:24Z,"Can I start another review?  Yes I can.  This is just a test of GitHub.

And it seems you found a bug in a 3pl to fix with a null check.  Did it crash for you in testing?"
627756976,835,Be-ing,2021-05-06T20:52:38Z,This is too vague. Tell users what is being collected and why.
627762185,835,Be-ing,2021-05-06T21:01:37Z,"This URL does not currently show a privacy policy. That should be online *before* merging this.

Moreover, a wall of legalese is not really sufficient for informed consent. There should be concise summaries of what information is being collected and why directly in the GUI, not only on a webpage external to the application."
627763498,835,Be-ing,2021-05-06T21:04:02Z,"Be more specific
```suggestion
better in the future. This includes: \n
  * what times you open and close Audacity
  * the file formats you use in Audacity
  * crash logs""
```

What is ""etc""? Be specific. List *all* the information that is collected."
627764300,835,nemobis,2021-05-06T21:05:24Z,"""Anonymous"" is unlikely to be correct. Audacity cannot guarantee that Google or Yandex won't be able to link the user's IP address to their identity, so you'd better avoid making promises which might be seen as lies."
627767257,835,nemobis,2021-05-06T21:11:00Z,"Indeed. The privacy policy will probably need, among other things, to list Yandex and Google as sub-processors, state that the user's personal data will be sent outside the EU, and probably offer a DPO contact, in addition to the usual things.

You can find instructions at
https://ec.europa.eu/info/law/law-topic/data-protection/reform/rules-business-and-organisations_en
https://edps.europa.eu/data-protection/eu-institutions-dpo/case-law-guidance_en

Spoiler: it's going to be practically impossible to respect GDPR and Schrems II if you use Google."
627780325,835,tastytea,2021-05-06T21:35:31Z,"Also, if the UUID is saved it is at best *pseudo*nymous."
627844475,835,xTibor,2021-05-07T00:20:11Z,"This seems to be a downscaled version of Apple's ""Chart with Upwards Trend (U+1F4C8)"" emoji according to Emojipedia. I'm not a lawyer but I'm fairly sure you're not supposed to redistribute it under GPL."
627870880,835,gohanko,2021-05-07T01:50:52Z,"However, if Google or Yandex says it's anonymous then the blame shifts to these corporations in case it turns out otherwise, which in this case saying that it's ""Anonymous"" is correct."
627903275,835,fangfufu,2021-05-07T03:41:50Z,"Surely you need to include the privacy policy in the distributed software, rather than asking the user to view it? Surely when I download a copy of Audacity, I didn't agree to a copy of privacy policy that you can update at any time. "
627993755,835,fungiboletus,2021-05-07T07:36:22Z,I'm afraid you cannot claim anonymous tracking and do that in the same pull request.
627994491,835,PowerMan2206,2021-05-07T07:37:38Z,Can someone translate what this does to English?
627995654,835,Be-ing,2021-05-07T07:39:40Z,This is saving some sort of unique identifier of the user.
627995927,835,ccoenen,2021-05-07T07:40:13Z,"Even if this was removed, Google could easily de-pseudonymize your IP. So anyone claiming ""it's anonymous"" just shows that they don't know what they are talking about OR are intentionally deceiving you."
627996939,835,y0tka,2021-05-07T07:41:57Z,Google and Yandex also track IP addresses on their side.
628005925,835,dvzrv,2021-05-07T07:56:12Z,Does this mean you will now create a release of audacity whenever [curl has another CVE](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=curl)? Have you considered the security implications that you open the door for in this scenario?
628006320,835,Be-ing,2021-05-07T07:56:50Z,Vendoring curl?! Of all dependencies? :scream: 
628008821,835,dvzrv,2021-05-07T08:00:59Z,"This will not work on some Linux distributions as it downloads sources during build (build systems do not allow internet connection during build).

Apart from that, this suffers from the [same issue as the custom wxwidgets fork](https://github.com/audacity/audacity/issues/625): Including custom sources where in reality you should build against a system provided version of the library"
628068662,835,IGBC,2021-05-07T09:34:07Z,"There is no mention here (as in the PR) to SQLite database corruption. As I mention in a comment these databases are peoples save files it. Needs to be explicitly noted here that information about project files is collected. (or just scrap this whole PR, which is the better move)"
628076637,835,petterroea,2021-05-07T09:46:58Z,"This conveniently hides that the service provider, Google Analytics, can be assumed to collect IP addresses. This is Personally Identifiable Information under GDPR. You should be clear about the third parties involved in this process."
628124998,835,fungiboletus,2021-05-07T11:06:14Z,"> Consent should be given by a clear affirmative act establishing a freely given, specific, informed and unambiguous indication of the data subject's agreement to the processing of personal data relating to him or her, such as by a written statement, including by electronic means, or an oral statement. This could include ticking a box when visiting an internet website, choosing technical settings for information society services or another statement or conduct which clearly indicates in this context the data subject's acceptance of the proposed processing of his or her personal data.
> **Silence, pre-ticked boxes or inactivity should not therefore constitute consent.**

[GDPR regulation](https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32016R0679&from=EN)"
628156527,835,tastytea,2021-05-07T12:05:03Z,"> However, if Google or Yandex says it's anonymous then the blame shifts to these corporations in case it turns out otherwise, which in this case saying that it's ""Anonymous"" is correct.

That's not how law usually works. And we already *know* that it's not anonymous. Google is an advertising company."
628295126,835,ri0t,2021-05-07T15:14:38Z,"Oh, my. This story gets weirder the deeper one crawls.

* Some days ago, ""Muse Group buys Audacity"" -> :confused:
* a few days - nothing happens -> :cold_sweat:
* fefe blogs about this PR -> :scream:
* It's about ""embedding"" G**gle -> :angry: 
* You start digging and find friends already all over it -> :weary:
* They dig out stuff like ***THIS*** -> :rage: :exploding_head: :boom: :meat_on_bone: :fried_shrimp: :bone: 

I am very, very disappointed, Muse Group. And sad. Very sad, too.

------
In other recognition, thanks @dvzrv for pointing it out! It's pretty telling of the whole thing, I'd say...."
628398239,835,Be-ing,2021-05-07T17:43:11Z,"To be fair, Audacity had a problematic practice of vendoring dependencies long before Muse Group got invovled."
628413918,835,immibis,2021-05-07T18:11:18Z,liblib-foo?
628415242,835,immibis,2021-05-07T18:13:45Z,Web APIs should not require cookies - they are unnecessarily complex. This reeks of bloat.
628419362,835,immibis,2021-05-07T18:21:19Z,I would guess they want to know how many people are using the spectrum feature specifically
628437539,835,xTibor,2021-05-07T18:55:16Z,This line seems to default the telemetry to be enabled when the config key doesn't exist. Not having a config key is not a consent to be tracked.
628470707,835,Qix-,2021-05-07T19:52:48Z,"FWIW I'm currently discussing this in the Audacity discord with the OP. ~~This appears to be a workaround for a UI bug, to be completely fair.~~

https://github.com/audacity/audacity/blob/2c14a12b4f3ded3b24181f2b08f32c71ddbaea01/src/telemetry/TelemetryHelper.cpp#L31

That is where the telemetry is being initialized - you can see it default to `false`.

Why it's `true` here is unclear and ~~I'm pushing for a proper comment explanation (or even better, a fix) to be added.~~

Good catch here though.

---

Seems to be a copy-and-paste error that was made. It's set to be updated in a later commit, as I understand it."
628500849,835,xTibor,2021-05-07T20:34:45Z,"The `wxOS_UNKNOWN` return value of `GetOperatingSystemId()` is not handled. In that case you'll end up here as `Unix`, which is not correct."
628504922,835,IGBC,2021-05-07T20:40:23Z,yea controversy aside this isn't even a well coded PR
628774985,835,xTibor,2021-05-08T17:24:00Z,"Tabs -> spaces, as per the Audacity coding standards docs. Also at other places in this file.
(Please don't start a holy war about which one is better.)"
628775096,835,polyjitter,2021-05-08T17:25:17Z,"Yeah, sure, a holy war about tabs and spaces. Let's go with that"
628776876,835,collinalexbell,2021-05-08T17:43:02Z,You are giving a review to code that will never reach production.
628777286,835,xTibor,2021-05-08T17:47:24Z,I'm just trying to show how bad quality it is.
628792423,835,xTibor,2021-05-08T20:22:26Z,"This doesn't seem correct. `GetArchitecture()` gives you the bit-width of your architecture, not an exact Intel instruction set. This will report for example Audacity on ARM as x86 or x64, giving you bogus telemetry info. "
628806502,835,BenBE,2021-05-08T23:01:29Z,"If the original curl release is used, why not simply take the one installed on the system?"
628806749,835,BenBE,2021-05-08T23:03:57Z,"If this is auto-generated, then why not generate it at build-time?"
628806847,835,BenBE,2021-05-08T23:06:00Z,"Why is library example code replicated here, when only the library itself is needed?"
628807072,835,BenBE,2021-05-08T23:08:56Z,Those braces should indicate what opening element (namespace) they belong to.
628807184,835,BenBE,2021-05-08T23:09:50Z,"Include LF @ EOL.

Also indicate what those braces refer to syntactically."
628807205,835,BenBE,2021-05-08T23:10:16Z,Excessive semicolon.
628807269,835,BenBE,2021-05-08T23:10:50Z,LF @ EOL.
628807296,835,BenBE,2021-05-08T23:11:06Z,LF @ EOL.
628807304,835,BenBE,2021-05-08T23:11:25Z,LF @ EOL.
628807398,835,BenBE,2021-05-08T23:12:08Z,LF @ EOL.
628807428,835,BenBE,2021-05-08T23:12:42Z,LF @ EOL.
628807450,835,BenBE,2021-05-08T23:13:10Z,LF @ EOL.
628807489,835,BenBE,2021-05-08T23:13:50Z,"LF @ EOL.

Also should include a blank line before the closing braces for the namespaces."
628807633,835,BenBE,2021-05-08T23:15:31Z,Potential for Integer Overflow issues.
628807643,835,BenBE,2021-05-08T23:15:46Z,LF @ EOL.
628807769,835,BenBE,2021-05-08T23:16:45Z,Why traverse directory paths upwards instead of properly setting up the include path in the cmake configuration?
628807781,835,BenBE,2021-05-08T23:17:00Z,Indentation
628807790,835,BenBE,2021-05-08T23:17:08Z,Indentation
628807809,835,BenBE,2021-05-08T23:17:25Z,Indentation.
628807816,835,BenBE,2021-05-08T23:17:34Z,LF @ EOL.
628807889,835,BenBE,2021-05-08T23:18:26Z,LF @ EOL.
628807929,835,BenBE,2021-05-08T23:19:09Z,"LF @ EOL.

Inconsistent with other files of this library regarding blank line between closing braces of namespaces."
628807951,835,BenBE,2021-05-08T23:19:31Z,"LF @ EOL.

Also should include a blank before the closing braces for the namespaces (and when opening them, before defining classes insdie the namespace)."
628808061,835,BenBE,2021-05-08T23:20:47Z,LF @ EOL.
628808075,835,BenBE,2021-05-08T23:21:09Z,LF @ EOL.
628808231,835,BenBE,2021-05-08T23:22:39Z,"Reinventing the wheel / NIH syndrome:
https://en.cppreference.com/w/cpp/locale/isxdigit"
628808256,835,BenBE,2021-05-08T23:23:01Z,LF @ EOL.
628808338,835,BenBE,2021-05-08T23:24:08Z,"LF @ EOL.

Also prefer blank lines after opening and before closing brace of namespace …"
628808417,835,BenBE,2021-05-08T23:25:21Z,"Why not use function from curl for this task?

Smells like NIH."
628808659,835,BenBE,2021-05-08T23:28:48Z,"Shouldn't you lock your internal state BEFORE modifying it for actual persistence? Looks wrong.

Also this client ID makes Telemetry no longer anonymous, but at best pseudonymous. Clear objection to this kind of telemetry from my side."
628808801,835,BenBE,2021-05-08T23:30:32Z,Unchecked return value …
628809087,835,BenBE,2021-05-08T23:34:00Z,"Claiming anonymity and also having some clear interface for user tracking purposes, doesn't go well together. Especially when service providers are known to heavily mine data ""entrusted"" to them."
628809293,835,BenBE,2021-05-08T23:36:34Z,LF @ EOL.
628809311,835,BenBE,2021-05-08T23:36:49Z,LF @ EOL.
628809317,835,BenBE,2021-05-08T23:37:01Z,LF @ EOL.
628809322,835,BenBE,2021-05-08T23:37:14Z,LF @ EOL.
628809406,835,BenBE,2021-05-08T23:38:31Z,Reaching this comment while reviewing I already need my second hand to count review comments … in binary …
628809435,835,BenBE,2021-05-08T23:38:51Z,LF @ EOL.
628809438,835,BenBE,2021-05-08T23:39:02Z,LF @ EOL.
628809462,835,BenBE,2021-05-08T23:39:18Z,LF @ EOL.
628809469,835,BenBE,2021-05-08T23:39:31Z,LF @ EOL.
628809473,835,BenBE,2021-05-08T23:39:40Z,LF @ EOL.
628809616,835,BenBE,2021-05-08T23:41:35Z,Shouldn't this normally be `const std::function<void ()>& callback`?
628809655,835,BenBE,2021-05-08T23:41:49Z,LF @ EOL.
628809677,835,BenBE,2021-05-08T23:41:59Z,LF @ EOL.
628809715,835,BenBE,2021-05-08T23:42:25Z,LF @ EOL.
628809732,835,BenBE,2021-05-08T23:42:33Z,LF @ EOL.
628809954,835,BenBE,2021-05-08T23:46:04Z,Even trying to compile those files in should be subject to conditional compilation. Having this code included is an unreasonable liability and a potential attack vector due to its network surface.
628809985,835,BenBE,2021-05-08T23:46:40Z,Should be optionally included based on actual use of telemetry by this build.
628810022,835,BenBE,2021-05-08T23:47:17Z,"Why is this change needed? What breaks without it and why can't that not be repaired otherwise?
Is telemetry the only reason to break BC with old MacOS versions?"
628810319,835,BenBE,2021-05-08T23:50:53Z,Is this change actually related to this PR?
628810470,835,BenBE,2021-05-08T23:52:45Z,Excess WS @ EOF.
628810586,835,BenBE,2021-05-08T23:54:36Z,Indentation seems off …
628810828,835,BenBE,2021-05-08T23:57:59Z,"This should also include information on the exact data collected, reasons for collection. Those information should be current with the implementation of the telemetry."
628810910,835,BenBE,2021-05-08T23:59:30Z,Information about collected data should be specific to the current build. Thus it should be available from inside audacity WITHOUT need for an internet connection.
628811007,835,BenBE,2021-05-09T00:00:43Z,"Should better read ""User & usage surveillance settings"" …"
628811420,835,BenBE,2021-05-09T00:06:39Z,"Avoid marketing speak in the wording of that paragraph and be honest.

> As we have no clue about what we are doing, we'd like to do what everyone else does and collect data about our users just to have that data available. For this we'll track every type of file you open, every time the program produces some sort of error or whenever you would like to use it. This data will likely not help us make your user experience any better, but at least we got some data.

Well, maybe could be even more specific, but yeah: you get the gist of it."
628811519,835,BenBE,2021-05-09T00:07:55Z,It's NOT anonymous!
628811627,835,BenBE,2021-05-09T00:09:17Z,LF @ EOL.
628811720,835,BenBE,2021-05-09T00:10:14Z,LF @ EOL.
628813650,835,SndChaser,2021-05-09T00:36:12Z,This would definitely invalidate the claim that a cmake flag would prevent the telemetry code from being compiled.
628816050,835,xTibor,2021-05-09T01:03:56Z,`&nbsp` -> `&nbsp;`. Using semicolons after HTML character entity references are strongly recommended.
628818054,835,xTibor,2021-05-09T01:30:15Z,Goggle
628821083,835,xTibor,2021-05-09T02:10:20Z,"This is not a very thorough UUID verification. The minimum would be to check if the UUID version field is within the currently defined values. (1, 2, 3, 4, 5)"
628821257,835,aaaaaa123456789,2021-05-09T02:12:10Z,"It's also not correct, as zero bytes are very much allowed in UUIDs."
628821424,835,Pokechu22,2021-05-09T02:14:32Z,"It's using `std::any_of`, not `std::all_of`.  Since it's using `any_of`, it's just making sure that one of the bytes is not zero, i.e. it's not all zeros."
628823333,835,SndChaser,2021-05-09T02:39:53Z,Maybe they meant [GogglesMM](https://github.com/gogglesmm/gogglesmm). ;)
628877519,835,schmittlauch,2021-05-09T11:37:02Z,"A NixOS package maintainer here: side effects like downloading sources during build are problematic indeed for many build systems. I'd kindly ask you to reconsider this, otherwise several distributions need to patch this downstream."
628891908,835,Megaf,2021-05-09T13:38:14Z,Over 9000!
628921058,835,xTibor,2021-05-09T17:40:31Z,Leftover commented code that needs to be removed.
628923883,835,xTibor,2021-05-09T18:07:53Z,Are there any safeguards that `USE_UUID_CREATE` and `USE_LIBUUID` are not defined at the same time? Both of them seems to work on Windows. Does this function silently fail if none of these three libs are present?
682794994,1384,crsib,2021-08-04T16:55:23Z, I think that this line can safely be removed now!
682796436,1384,crsib,2021-08-04T16:57:23Z,"Let's add the `cmd_option` for `${_OPT}use_libtorch`. There are some examples in the root CMakeLists.txt :)

I think we should switch it off by default because of how big is libtorch, so it doesn't affect every developer."
682797245,1384,crsib,2021-08-04T16:58:31Z,"Probably `cmake_dependent_option` is an even better idea, because the feature depends on ${_OPT}has_networking"
682798001,1384,crsib,2021-08-04T16:59:31Z,cmake_dependent_option will simplify this code to just `$<BOOL:${USE_LIBTORCH}>`
682801268,1384,crsib,2021-08-04T17:04:05Z,"Probably MessageBoxException is a better choice for the base here. Looks like Resample, for example, is called outside try{}catch{} (Or I missed something)"
682801576,1384,crsib,2021-08-04T17:04:36Z,Generally it's better to keep implementation in source files :)
682802318,1384,crsib,2021-08-04T17:05:42Z,The same about the base
682804250,1384,crsib,2021-08-04T17:08:06Z,"Please use wxFIle API, they will handle encoding correctly. This is a major pain point on Windows"
682805146,1384,crsib,2021-08-04T17:09:22Z,Similar as above. You can implement your own writer or even simply serialize to string first
682805764,1384,crsib,2021-08-04T17:10:18Z,The same about the base :)
683677723,1384,hugofloresgarcia,2021-08-05T18:05:27Z,resolved [here](https://github.com/audacity/audacity/pull/1384/commits/ab4a59dbcf320a54d8b88e230abb2c4caf6e7bee)
683677771,1384,hugofloresgarcia,2021-08-05T18:05:31Z,resolved [here](https://github.com/audacity/audacity/pull/1384/commits/ab4a59dbcf320a54d8b88e230abb2c4caf6e7bee)
683717884,1384,hugofloresgarcia,2021-08-05T19:07:35Z,resolved [here](https://github.com/audacity/audacity/pull/1384/commits/67c7f1f5734e390d24ee0bfca1232824d40a42f5)
683717955,1384,hugofloresgarcia,2021-08-05T19:07:41Z,resolved [here](https://github.com/audacity/audacity/pull/1384/commits/67c7f1f5734e390d24ee0bfca1232824d40a42f5)
686659439,1384,crsib,2021-08-11T09:27:22Z,"This is fine for now but should be defaulted to off I think. We should figure out the best way to deliver the effect first, as it is huuuuge :)"
686672894,1384,crsib,2021-08-11T09:45:45Z,"Let's add another atomic, that controls thread termination. `detach` should really never be used :-)

So it will be like `cancel.store(true); threa.join();`"
686677310,1384,crsib,2021-08-11T09:51:42Z,This still blocks the UI thread! At least `wxSafeYield` should be used instead. 
686685650,1384,crsib,2021-08-11T10:03:19Z,No C-casts please!
686686121,1384,crsib,2021-08-11T10:04:02Z,std::make_unique?
686686241,1384,crsib,2021-08-11T10:04:11Z,std::make_unique?
686688810,1384,crsib,2021-08-11T10:07:52Z,Why do we need shared_ptr?
686689696,1384,crsib,2021-08-11T10:09:04Z,I would prefer explicit encoding here. lib-strings can help with it :-)
686690339,1384,crsib,2021-08-11T10:09:59Z,Why .c_str?
686690540,1384,crsib,2021-08-11T10:10:16Z,Why .c_str?
686693372,1384,crsib,2021-08-11T10:14:09Z,"In this case, I prefer having a no-throw overload, that provides a default value.

Like:
```
std::string tryGetString(std::string key, std::string default, Doc doc);
```

Also, passing the document as a first argument would allow defaulting the default value!"
686696554,1384,crsib,2021-08-11T10:18:42Z,"You can write the lambda inline!

```
auto it = std::find_if(this->begin(), this->end(), [&](ModelCardHolder a) {
      return (*card) == (*a);
});
```
"
686701937,1384,crsib,2021-08-11T10:26:53Z,I would prefer sticking to CamelCase
686874055,1384,hugofloresgarcia,2021-08-11T14:14:56Z,fixed [here](https://github.com/audacity/audacity/pull/1384/commits/617ff8699525ce6f628803d10d2fe0459d3c8fdc)
686874142,1384,hugofloresgarcia,2021-08-11T14:15:02Z,fixed [here](https://github.com/audacity/audacity/pull/1384/commits/617ff8699525ce6f628803d10d2fe0459d3c8fdc)
686874216,1384,hugofloresgarcia,2021-08-11T14:15:06Z,fixed [here](https://github.com/audacity/audacity/pull/1384/commits/617ff8699525ce6f628803d10d2fe0459d3c8fdc)
686896814,1384,hugofloresgarcia,2021-08-11T14:38:56Z,resolved [here](https://github.com/audacity/audacity/pull/1384/commits/f9a04711ed9344d0d4175051681e6c6071996dd7)
686958202,1384,hugofloresgarcia,2021-08-11T15:47:45Z,fixed [here](https://github.com/audacity/audacity/pull/1384/commits/0b86aa94ae39d4b4c2d96d4d9eadbd3efeddfe15)
686971224,1384,hugofloresgarcia,2021-08-11T16:03:01Z,resolved [here](https://github.com/audacity/audacity/pull/1384/commits/ca58c5ac56f90af078855384a42fb05d725976f0)
686980913,1384,hugofloresgarcia,2021-08-11T16:15:23Z,"Hmm, I'm not entirely sure what you mean. Would you mind clarifying? Thanks!"
686984438,1384,crsib,2021-08-11T16:19:47Z,`audacity::ToUTF8` from `CodeConversions.h`
690735089,1384,hugofloresgarcia,2021-08-17T21:26:42Z,https://github.com/hugofloresgarcia/audacity/commit/f1371ccd74ea8a1b38a3f2c14fa30cc0200f4188
690735982,1384,hugofloresgarcia,2021-08-17T21:28:13Z,https://github.com/hugofloresgarcia/audacity/commit/c28a4cce86556566fd7c4d10829014828b225ad9
690737254,1384,hugofloresgarcia,2021-08-17T21:30:22Z,https://github.com/hugofloresgarcia/audacity/commit/92519a712487ac6177c13b4b57a25bb6c64bb95f
691138871,1384,crsib,2021-08-18T11:14:15Z,static_cast please :)
691139543,1384,crsib,2021-08-18T11:15:23Z,This can be `retrun mResampler->forward(inputs).toTensor();`
691140495,1384,crsib,2021-08-18T11:16:55Z,"I think it is worth commenting what is `NoGradGuard` and why it is needed.
Also, *cameCase* for the variable name please."
691140827,1384,crsib,2021-08-18T11:17:21Z,New line before `throw` and `XO`
691140929,1384,crsib,2021-08-18T11:17:28Z,New line before `throw`
691141255,1384,crsib,2021-08-18T11:17:57Z,And let's wrap it in `XO` as it is possibly user visible.
691148602,1384,crsib,2021-08-18T11:29:38Z,As with the previous case - let's move everything under the `try`
691148869,1384,crsib,2021-08-18T11:30:02Z,Let move them to the `private` section below
691149156,1384,crsib,2021-08-18T11:30:30Z,If there are no sub-classes planned - let's mark it `final`
691149496,1384,crsib,2021-08-18T11:31:04Z,"Does it modify internal state? It not, it should be `const`"
691149679,1384,crsib,2021-08-18T11:31:21Z,Make it `const` please 
691149874,1384,crsib,2021-08-18T11:31:37Z,Make it `const` please
691149990,1384,crsib,2021-08-18T11:31:46Z,"Does it modify internal state? It not, it should be `const`"
691150568,1384,crsib,2021-08-18T11:32:42Z,"Initialize it please.

Like

```
int mSampleRate { 0 };
```"
691150703,1384,crsib,2021-08-18T11:32:59Z,Initialization could and should be movede here
691155282,1384,crsib,2021-08-18T11:40:28Z,`final`?
691157054,1384,crsib,2021-08-18T11:43:09Z,"Do we really need to explicitely initialize the mCards?

Also, please put the initializer list to a new line"
691158831,1384,crsib,2021-08-18T11:46:00Z,"`const std::string` and `audacity::ToUTF8` please.

Or even it can be left as `wxString` or `wxFileName`?

On Windows there should be lots of care about string encodings when working with files."
691159472,1384,crsib,2021-08-18T11:46:57Z,"`= default` probably will be sufficient here.

Althoug there is a bug in older GCC versions, so probably this change will be reverted :)"
691162211,1384,crsib,2021-08-18T11:51:03Z,`httpCode != 200 && httpCode != 302`?
691163084,1384,crsib,2021-08-18T11:52:22Z,"Something like should work: `wxLogDebug(""saving modelcard for %s \n"", card->GetRepoID())`;"
691163414,1384,crsib,2021-08-18T11:52:52Z,Possible encoding issues again
691163480,1384,crsib,2021-08-18T11:53:00Z,ditto
691164716,1384,crsib,2021-08-18T11:54:45Z,Do you really need to store the response? It seems you capture it in `DownloadModel` inside the finished callback
691190892,1384,crsib,2021-08-18T12:31:33Z,"Actually, it seems to be a bug in NetworkManager :)

Let's fix it! 

`if (mHttpCode == 0)` should be removed from the CurlResponse.cpp:307

After this, check for `httpsCode != 200` will be sufficient!"
691192032,1384,crsib,2021-08-18T12:33:13Z,I think checking for errors is good idea here
691192345,1384,crsib,2021-08-18T12:33:37Z,You can throw if Remove fails
691192509,1384,crsib,2021-08-18T12:33:52Z,`!=`
691192822,1384,crsib,2021-08-18T12:34:14Z,`const std::string`
691193282,1384,crsib,2021-08-18T12:34:54Z,"Oh, I see you need it! Ignore my previous comment on it :)"
691197326,1384,crsib,2021-08-18T12:40:24Z,"`const std::string&`

There are cases, when plain `std::string` is preferred. 
For example:

* You always change the string inside
* You can move the string (for example, as initializer in constructor)

In this case, unnessesary copy will be created.
"
691197805,1384,crsib,2021-08-18T12:41:00Z,Explicit capture list please!
691197974,1384,crsib,2021-08-18T12:41:12Z,ditto
691198373,1384,crsib,2021-08-18T12:41:43Z,"`return ""https://huggingface.co/""+repoID+""/resolve/main/""` will work too"
691201529,1384,crsib,2021-08-18T12:45:51Z,std::make_shared please.
691202932,1384,crsib,2021-08-18T12:47:36Z,"Well, at least `const std::string`

But I think this should be extracted into a method as well. Something like `GetUrl(""models.json"")`"
691203624,1384,crsib,2021-08-18T12:48:32Z,!=
691203722,1384,crsib,2021-08-18T12:48:39Z,ditto
691205228,1384,crsib,2021-08-18T12:50:29Z,const std::string
691205807,1384,crsib,2021-08-18T12:51:14Z,!=
691205886,1384,crsib,2021-08-18T12:51:20Z,"ditto
"
691206019,1384,crsib,2021-08-18T12:51:30Z,std::make_shared
691206574,1384,crsib,2021-08-18T12:52:03Z,Look like this variable is not used. Let's remove it.
691207327,1384,crsib,2021-08-18T12:52:57Z,"static_cast!

Please, don't use C-casts, unless you are writing C code. "
691208000,1384,crsib,2021-08-18T12:53:47Z,ditto
691208312,1384,crsib,2021-08-18T12:54:08Z,The fix to CurlResponse and !=
691208526,1384,crsib,2021-08-18T12:54:23Z,No cerr please!
691208794,1384,crsib,2021-08-18T12:54:43Z,std::make_shared
691209415,1384,crsib,2021-08-18T12:55:22Z,const std::string
691209909,1384,crsib,2021-08-18T12:55:58Z,No explicit wxString
691211041,1384,crsib,2021-08-18T12:57:22Z,"Also, we don't really use Hungarian notation. I would prefer something like `cardAuthor` and `cardName`"
691211429,1384,crsib,2021-08-18T12:57:54Z,You can `return true` from try block... 
691211715,1384,crsib,2021-08-18T12:58:14Z,... and just return false here
691213058,1384,crsib,2021-08-18T12:59:50Z,"But do we really need try ... catch ... ?

Is this block run on a different thread? Maybve just throwing will be sufficient?"
691213306,1384,crsib,2021-08-18T13:00:06Z,See above :)
691213606,1384,crsib,2021-08-18T13:00:27Z,ditto
691213727,1384,crsib,2021-08-18T13:00:34Z,ditto
691213866,1384,crsib,2021-08-18T13:00:46Z,const!)
691214806,1384,crsib,2021-08-18T13:01:55Z,See above about the CurlResponse!
691217303,1384,crsib,2021-08-18T13:05:03Z,"wxFile doesn't throw, so you should check the errors differently."
691217428,1384,crsib,2021-08-18T13:05:12Z,Why is it needed? 
691218747,1384,crsib,2021-08-18T13:06:47Z,"I don't quite undestand, how this error will be presented to the user. "
691219611,1384,crsib,2021-08-18T13:07:49Z,final?
691220571,1384,crsib,2021-08-18T13:08:59Z,"This is the case where you should have plain `std::string`.

Then - `m_msg(std::move(msg))`"
691221156,1384,crsib,2021-08-18T13:09:39Z,Do we really need the sub-project?
691222395,1384,crsib,2021-08-18T13:11:02Z,This is the case where `std::string` should be used. Than `m_msg(std::move(msg))`
691222975,1384,crsib,2021-08-18T13:11:45Z,"Also, I think msg should be a `TranslatableString`"
691223688,1384,crsib,2021-08-18T13:12:32Z,final?
691223854,1384,crsib,2021-08-18T13:12:43Z,const?
691223913,1384,crsib,2021-08-18T13:12:47Z,const?
691224173,1384,crsib,2021-08-18T13:13:05Z,const?
691224267,1384,crsib,2021-08-18T13:13:11Z,const?
691224309,1384,crsib,2021-08-18T13:13:15Z,const?
691224452,1384,crsib,2021-08-18T13:13:25Z,"Well, you know... 

const?"
691224821,1384,crsib,2021-08-18T13:13:50Z,const?
691224882,1384,crsib,2021-08-18T13:13:55Z,const?
691225018,1384,crsib,2021-08-18T13:14:05Z,"const? Also, see the CPP file"
691225253,1384,crsib,2021-08-18T13:14:23Z,Some formattring issues here
691230612,1384,crsib,2021-08-18T13:20:21Z,Do you really need to copy to a different array?
691230815,1384,crsib,2021-08-18T13:20:32Z,`: mOutputTracks->SelectedLeaders<WaveTrack>()`
691234742,1384,crsib,2021-08-18T13:24:57Z,"Well, sleep is still here :)"
691237056,1384,crsib,2021-08-18T13:27:36Z,"But this won't block forward pass, will it? I think an exception should be thrown here.

Also, the e.what() should be included in the message. Otherwise it is hard to understand what has happened. 

Given that ModelException is MessageBoxException I think that it makes sense just to remove try-catch here."
691238692,1384,crsib,2021-08-18T13:29:19Z,This method is called from a different thread. You should not interract with the UI from threads other than the main thread.
691239045,1384,crsib,2021-08-18T13:29:43Z,The context is lost here again. e.what should be included in the error message.
691239733,1384,crsib,2021-08-18T13:30:29Z,!=
691240926,1384,crsib,2021-08-18T13:31:41Z,"I'm not sure, but maybe something derived from Audacity exceptions hierarchy shoul be used?"
691241014,1384,crsib,2021-08-18T13:31:47Z,const void* here ...
691242420,1384,crsib,2021-08-18T13:33:23Z,... static_cast here
691242512,1384,crsib,2021-08-18T13:33:29Z,const!
691242934,1384,crsib,2021-08-18T13:33:57Z,Do we need try catch here? 
691244124,1384,crsib,2021-08-18T13:35:16Z,Look for `/* i18n-hint: ` examples in the code. It is important to clarify how placeholder will be replaced to translators
691244643,1384,crsib,2021-08-18T13:35:48Z,Probably XC should be used here (and above)
691244890,1384,crsib,2021-08-18T13:36:04Z,See above
691246118,1384,crsib,2021-08-18T13:37:22Z,"oooph, lets probably create IsSame method in ModelCard?"
691246702,1384,crsib,2021-08-18T13:38:01Z,"ditto

May this should be moved to a separate method?"
691247250,1384,crsib,2021-08-18T13:38:39Z,"Please, move the initialization here from the constructor"
691247300,1384,crsib,2021-08-18T13:38:43Z,ditto
691248186,1384,crsib,2021-08-18T13:39:44Z,TranslatableString?
691248249,1384,crsib,2021-08-18T13:39:48Z,TranslatableString?
691250093,1384,crsib,2021-08-18T13:41:53Z,"Generally, if you pass a pointer to the function - it should check if it is not nullptr.

Or you can pass `const Document&` here and to the functions below, which will simplify them as well.

(This applies to every function in the namespace)"
691251372,1384,crsib,2021-08-18T13:43:11Z,TranslatableString with Format?
691251809,1384,crsib,2021-08-18T13:43:39Z,Explicit ToUTF8 please
691252299,1384,crsib,2021-08-18T13:44:11Z,Can this guy be defaulted? 
691252488,1384,crsib,2021-08-18T13:44:25Z,= default please
691252756,1384,crsib,2021-08-18T13:44:43Z,See comment about checking the pointers!
691253685,1384,crsib,2021-08-18T13:45:43Z,"Well, you know. TranslatableString and Format?"
691255159,1384,crsib,2021-08-18T13:47:22Z,Is it intentional?
691255435,1384,crsib,2021-08-18T13:47:43Z,How do we report the error to the user?)
691255998,1384,crsib,2021-08-18T13:48:20Z,"If we are ok with default values, let's use overloads with them"
691256598,1384,crsib,2021-08-18T13:49:02Z,`GetRepoID() == that.GetRepoID()`?
691256872,1384,crsib,2021-08-18T13:49:17Z,= default
691257456,1384,crsib,2021-08-18T13:50:00Z,`if( it == this->end() )`
691259716,1384,crsib,2021-08-18T13:52:21Z,You should use `std::back_inseter` in `copy_if`! 
691261127,1384,crsib,2021-08-18T13:53:49Z,With back_inserter - you wont need this method.
691261285,1384,crsib,2021-08-18T13:54:00Z,final?
691261398,1384,crsib,2021-08-18T13:54:06Z,ditto
691262196,1384,crsib,2021-08-18T13:55:00Z,Do you use this functions outside the ModelCard? If not - they should not be in the header!
691262826,1384,crsib,2021-08-18T13:55:40Z,final!
691263487,1384,crsib,2021-08-18T13:56:21Z,Probably let's still use CamelCase?
691263645,1384,crsib,2021-08-18T13:56:32Z,MSVC failed to compile
691266431,1384,crsib,2021-08-18T13:59:28Z,final?
691266884,1384,crsib,2021-08-18T13:59:57Z,I prefer inline intialization whnever possible
691267438,1384,crsib,2021-08-18T14:00:30Z,The only reason for this class is Filter?
691267765,1384,crsib,2021-08-18T14:00:51Z,static const int!
691269917,1384,crsib,2021-08-18T14:03:14Z,std::move?
691285109,1384,crsib,2021-08-18T14:19:22Z,"More explicit name for the class.

And let's move it to a different set of h/cpp"
691286239,1384,crsib,2021-08-18T14:20:35Z,Why?
691287316,1384,crsib,2021-08-18T14:21:42Z,`Verbatim` should be used here. XO/XC are for strings that should be translated.
691289565,1384,crsib,2021-08-18T14:24:02Z,Why do we need Show?
691290030,1384,crsib,2021-08-18T14:24:32Z,XC here for sure
691290199,1384,crsib,2021-08-18T14:24:42Z,XC
691290466,1384,crsib,2021-08-18T14:24:59Z,static_cast!
691290811,1384,crsib,2021-08-18T14:25:24Z,Translation?
691292518,1384,crsib,2021-08-18T14:27:14Z,Different set of h/cpp?
691294833,1384,crsib,2021-08-18T14:29:36Z,Capitalize constatants please!
692202978,1384,hugofloresgarcia,2021-08-19T15:08:56Z,"yes! The reason I do this is because `mOutputTracks->SelectedLeaders<WaveTrack>()` is an iterator, and source separation appends to `mOutputTracks` while it's iterating, meaning that we will then feed the output tracks back into the loop (in a possibly infinite loop)"
692212170,1384,hugofloresgarcia,2021-08-19T15:15:30Z,"the `static_cast` doesn't like the const qualifier:

**code**:
```cpp
   // get the data pointer
   const void *data = waveform.contiguous().data_ptr<float>();
   size_t outputLen = waveform.size(-1);

   // add the data to a temporary track, then
   // paste on our output track
   WaveTrack::Holder tmp = track->EmptyCopy();
   tmp->Append(static_cast<samplePtr>(data), floatSample, outputLen);
   tmp->Flush();
```

**error stack**:
```
/Users/hugo/audacity/src/effects/deeplearning/EffectDeepLearning.cpp:315:16: error: static_cast from 'const void *' to 'samplePtr' (aka 'char *') casts away qualifiers
   tmp->Append(static_cast<samplePtr>(data), floatSample, outputLen);
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
```
"
692213097,1384,hugofloresgarcia,2021-08-19T15:16:11Z,(casting to `const samplePtr` (aka `char *const`) doesn't work either 
692226377,1384,hugofloresgarcia,2021-08-19T15:26:03Z,resolved in https://github.com/hugofloresgarcia/audacity/commit/eb0ddcf13af9473788cc39c2b8f447b30894e955
692227800,1384,hugofloresgarcia,2021-08-19T15:27:02Z,https://github.com/hugofloresgarcia/audacity/commit/eb0ddcf13af9473788cc39c2b8f447b30894e955
692227894,1384,hugofloresgarcia,2021-08-19T15:27:06Z,https://github.com/hugofloresgarcia/audacity/commit/eb0ddcf13af9473788cc39c2b8f447b30894e955
692228118,1384,hugofloresgarcia,2021-08-19T15:27:15Z,https://github.com/hugofloresgarcia/audacity/commit/eb0ddcf13af9473788cc39c2b8f447b30894e955
692229424,1384,hugofloresgarcia,2021-08-19T15:28:11Z,https://github.com/hugofloresgarcia/audacity/commit/eb0ddcf13af9473788cc39c2b8f447b30894e955
692231504,1384,hugofloresgarcia,2021-08-19T15:29:38Z,https://github.com/hugofloresgarcia/audacity/commit/eb0ddcf13af9473788cc39c2b8f447b30894e955
692266364,1384,hugofloresgarcia,2021-08-19T16:00:10Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692266475,1384,hugofloresgarcia,2021-08-19T16:00:19Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692266584,1384,hugofloresgarcia,2021-08-19T16:00:26Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692266680,1384,hugofloresgarcia,2021-08-19T16:00:32Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692266740,1384,hugofloresgarcia,2021-08-19T16:00:38Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692266809,1384,hugofloresgarcia,2021-08-19T16:00:43Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692266912,1384,hugofloresgarcia,2021-08-19T16:00:50Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692267297,1384,hugofloresgarcia,2021-08-19T16:01:23Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692267381,1384,hugofloresgarcia,2021-08-19T16:01:29Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692267472,1384,hugofloresgarcia,2021-08-19T16:01:35Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692267556,1384,hugofloresgarcia,2021-08-19T16:01:40Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692267626,1384,hugofloresgarcia,2021-08-19T16:01:46Z,https://github.com/audacity/audacity/pull/1384/commits/80ad19f75facdbfac3b7bd1d996d2e43479c1fed
692304216,1384,hugofloresgarcia,2021-08-19T16:34:29Z,https://github.com/audacity/audacity/pull/1384/commits/791676603e52a49dc2323f8a3e1f72eb1e3a2409
692304326,1384,hugofloresgarcia,2021-08-19T16:34:39Z,https://github.com/audacity/audacity/pull/1384/commits/791676603e52a49dc2323f8a3e1f72eb1e3a2409
692305082,1384,hugofloresgarcia,2021-08-19T16:35:38Z,https://github.com/audacity/audacity/pull/1384/commits/791676603e52a49dc2323f8a3e1f72eb1e3a2409
692312971,1384,hugofloresgarcia,2021-08-19T16:46:58Z,https://github.com/audacity/audacity/pull/1384/commits/851e5d06e4082887d8c85b1383c99ae9914c8d02
692313053,1384,hugofloresgarcia,2021-08-19T16:47:05Z,https://github.com/audacity/audacity/pull/1384/commits/851e5d06e4082887d8c85b1383c99ae9914c8d02
692339679,1384,hugofloresgarcia,2021-08-19T17:25:04Z,https://github.com/audacity/audacity/pull/1384/commits/851e5d06e4082887d8c85b1383c99ae9914c8d02
692340088,1384,hugofloresgarcia,2021-08-19T17:25:40Z,https://github.com/audacity/audacity/pull/1384/commits/851e5d06e4082887d8c85b1383c99ae9914c8d02
692340329,1384,hugofloresgarcia,2021-08-19T17:26:00Z,https://github.com/audacity/audacity/pull/1384/commits/851e5d06e4082887d8c85b1383c99ae9914c8d02
692340584,1384,hugofloresgarcia,2021-08-19T17:26:23Z,https://github.com/audacity/audacity/pull/1384/commits/851e5d06e4082887d8c85b1383c99ae9914c8d02
692342728,1384,hugofloresgarcia,2021-08-19T17:29:17Z,"This shouldn't need to face the user, just the model contributor who is debugging a model. "
693039240,1384,hugofloresgarcia,2021-08-20T15:34:48Z,https://github.com/audacity/audacity/pull/1384/commits/8d5285a0c5c9ff3d18c46ad23c78a0a50859370c
693056631,1384,hugofloresgarcia,2021-08-20T16:01:25Z,"this block is run from a NetworkManager thread, when each card is retrieved from HuggingFace, so we need to catch any exceptions to avoid not throwing them in the main thread"
693060087,1384,hugofloresgarcia,2021-08-20T16:06:59Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060161,1384,hugofloresgarcia,2021-08-20T16:07:07Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060232,1384,hugofloresgarcia,2021-08-20T16:07:12Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060278,1384,hugofloresgarcia,2021-08-20T16:07:16Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060344,1384,hugofloresgarcia,2021-08-20T16:07:21Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060394,1384,hugofloresgarcia,2021-08-20T16:07:26Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060455,1384,hugofloresgarcia,2021-08-20T16:07:31Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060527,1384,hugofloresgarcia,2021-08-20T16:07:38Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060579,1384,hugofloresgarcia,2021-08-20T16:07:42Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060630,1384,hugofloresgarcia,2021-08-20T16:07:47Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060705,1384,hugofloresgarcia,2021-08-20T16:07:53Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060757,1384,hugofloresgarcia,2021-08-20T16:07:59Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060817,1384,hugofloresgarcia,2021-08-20T16:08:04Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693060984,1384,hugofloresgarcia,2021-08-20T16:08:23Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693061007,1384,hugofloresgarcia,2021-08-20T16:08:26Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693061039,1384,hugofloresgarcia,2021-08-20T16:08:30Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693061073,1384,hugofloresgarcia,2021-08-20T16:08:33Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693061119,1384,hugofloresgarcia,2021-08-20T16:08:38Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693061203,1384,hugofloresgarcia,2021-08-20T16:08:46Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693061263,1384,hugofloresgarcia,2021-08-20T16:08:50Z,https://github.com/audacity/audacity/pull/1384/commits/cde009e4b4e1cba86173de4e82b2437852118c06
693073965,1384,hugofloresgarcia,2021-08-20T16:29:28Z,https://github.com/audacity/audacity/pull/1384/commits/b93e3abaede63864072c5041ef26ab263c7cf4e5
693077758,1384,hugofloresgarcia,2021-08-20T16:35:42Z,why use std::move if `card` is a shared_ptr? 
693117896,1384,hugofloresgarcia,2021-08-20T17:45:33Z,https://github.com/audacity/audacity/pull/1384/commits/e3a958eabcae9c70e5c3c94bfab6993f2ccef402
693117936,1384,hugofloresgarcia,2021-08-20T17:45:38Z,https://github.com/audacity/audacity/pull/1384/commits/e3a958eabcae9c70e5c3c94bfab6993f2ccef402
693117972,1384,hugofloresgarcia,2021-08-20T17:45:44Z,https://github.com/audacity/audacity/pull/1384/commits/e3a958eabcae9c70e5c3c94bfab6993f2ccef402
693118042,1384,hugofloresgarcia,2021-08-20T17:45:49Z,https://github.com/audacity/audacity/pull/1384/commits/e3a958eabcae9c70e5c3c94bfab6993f2ccef402
693118104,1384,hugofloresgarcia,2021-08-20T17:45:55Z,https://github.com/audacity/audacity/pull/1384/commits/e3a958eabcae9c70e5c3c94bfab6993f2ccef402
693118163,1384,hugofloresgarcia,2021-08-20T17:46:01Z,https://github.com/audacity/audacity/pull/1384/commits/e3a958eabcae9c70e5c3c94bfab6993f2ccef402
693130577,1384,hugofloresgarcia,2021-08-20T18:08:28Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130654,1384,hugofloresgarcia,2021-08-20T18:08:35Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130737,1384,hugofloresgarcia,2021-08-20T18:08:42Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130773,1384,hugofloresgarcia,2021-08-20T18:08:46Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130806,1384,hugofloresgarcia,2021-08-20T18:08:51Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130855,1384,hugofloresgarcia,2021-08-20T18:08:55Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130918,1384,hugofloresgarcia,2021-08-20T18:09:00Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693130952,1384,hugofloresgarcia,2021-08-20T18:09:04Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693131001,1384,hugofloresgarcia,2021-08-20T18:09:08Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693131035,1384,hugofloresgarcia,2021-08-20T18:09:13Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693131125,1384,hugofloresgarcia,2021-08-20T18:09:21Z,https://github.com/audacity/audacity/pull/1384/commits/2fffddd82e5bd791accf1b012cc26200dae1837e
693140031,1384,hugofloresgarcia,2021-08-20T18:25:35Z,"yes, and Insert. I had other plans for it, but I don't think I'll have time for that"
693140737,1384,hugofloresgarcia,2021-08-20T18:26:55Z,Ah! I wanted to keep a difference between methods for the DTO and just data fields. I'd be happy to switch everything over to CamelCase though
693141873,1384,hugofloresgarcia,2021-08-20T18:28:56Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693141906,1384,hugofloresgarcia,2021-08-20T18:29:01Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693141977,1384,hugofloresgarcia,2021-08-20T18:29:07Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142032,1384,hugofloresgarcia,2021-08-20T18:29:11Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142097,1384,hugofloresgarcia,2021-08-20T18:29:16Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142153,1384,hugofloresgarcia,2021-08-20T18:29:21Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142198,1384,hugofloresgarcia,2021-08-20T18:29:25Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142243,1384,hugofloresgarcia,2021-08-20T18:29:30Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142311,1384,hugofloresgarcia,2021-08-20T18:29:35Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142362,1384,hugofloresgarcia,2021-08-20T18:29:41Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142409,1384,hugofloresgarcia,2021-08-20T18:29:46Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142463,1384,hugofloresgarcia,2021-08-20T18:29:52Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693142516,1384,hugofloresgarcia,2021-08-20T18:29:58Z,https://github.com/audacity/audacity/pull/1384/commits/574bd9ffd5ca3b221eaba030be39b4dd5c226a5d
693269001,1384,hugofloresgarcia,2021-08-20T23:53:48Z,https://github.com/audacity/audacity/pull/1384/commits/c35bf2320839b284103a5cbbbc34bd76a301fa39
693271245,1384,hugofloresgarcia,2021-08-21T00:05:27Z,https://github.com/audacity/audacity/pull/1384/commits/7293f28d6d440d1f09126fa5fb19ddb03f7add85
693280688,1384,hugofloresgarcia,2021-08-21T01:08:32Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693280716,1384,hugofloresgarcia,2021-08-21T01:08:40Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693280727,1384,hugofloresgarcia,2021-08-21T01:08:47Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693280783,1384,hugofloresgarcia,2021-08-21T01:09:03Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693280795,1384,hugofloresgarcia,2021-08-21T01:09:08Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693282249,1384,hugofloresgarcia,2021-08-21T01:20:54Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693282262,1384,hugofloresgarcia,2021-08-21T01:21:03Z,https://github.com/audacity/audacity/pull/1384/commits/aaa2a10099651e222bf48ccc11ba8c0eea204658
693406264,1384,hugofloresgarcia,2021-08-21T22:01:18Z,"Once the download is completed, the UI thread checks to see if the files were installed with IsInstalled(). If IsInstalled() returns false, then an error is presented to the user. "
693407698,1384,hugofloresgarcia,2021-08-21T22:16:50Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407778,1384,hugofloresgarcia,2021-08-21T22:17:27Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407780,1384,hugofloresgarcia,2021-08-21T22:17:31Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407782,1384,hugofloresgarcia,2021-08-21T22:17:37Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407799,1384,hugofloresgarcia,2021-08-21T22:17:44Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407802,1384,hugofloresgarcia,2021-08-21T22:17:50Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407808,1384,hugofloresgarcia,2021-08-21T22:17:55Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407811,1384,hugofloresgarcia,2021-08-21T22:17:59Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407812,1384,hugofloresgarcia,2021-08-21T22:18:04Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407827,1384,hugofloresgarcia,2021-08-21T22:18:08Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407829,1384,hugofloresgarcia,2021-08-21T22:18:12Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407847,1384,hugofloresgarcia,2021-08-21T22:18:17Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407849,1384,hugofloresgarcia,2021-08-21T22:18:21Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407861,1384,hugofloresgarcia,2021-08-21T22:18:25Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407873,1384,hugofloresgarcia,2021-08-21T22:18:29Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407886,1384,hugofloresgarcia,2021-08-21T22:18:34Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
693407887,1384,hugofloresgarcia,2021-08-21T22:18:39Z,https://github.com/audacity/audacity/pull/1384/commits/12576ea53aab7575c0a5e281f26b32156fbe0fc2
694082485,1384,hugofloresgarcia,2021-08-23T15:34:06Z,fixed in rebase!
694132330,1384,hugofloresgarcia,2021-08-23T16:36:17Z,https://github.com/audacity/audacity/pull/1384/commits/b6111c2eb813ebb7dda743613f7ed79d6d93c8b7
694132474,1384,hugofloresgarcia,2021-08-23T16:36:26Z,https://github.com/audacity/audacity/pull/1384/commits/b6111c2eb813ebb7dda743613f7ed79d6d93c8b7
694132593,1384,hugofloresgarcia,2021-08-23T16:36:36Z,https://github.com/audacity/audacity/pull/1384/commits/b6111c2eb813ebb7dda743613f7ed79d6d93c8b7
694132671,1384,hugofloresgarcia,2021-08-23T16:36:42Z,https://github.com/audacity/audacity/pull/1384/commits/b6111c2eb813ebb7dda743613f7ed79d6d93c8b7
694288567,1384,hugofloresgarcia,2021-08-23T20:33:07Z,https://github.com/audacity/audacity/pull/1384/commits/86de51c7ce1748f7fa8b7be080f3ae91b86759d1
694288629,1384,hugofloresgarcia,2021-08-23T20:33:13Z,https://github.com/audacity/audacity/pull/1384/commits/86de51c7ce1748f7fa8b7be080f3ae91b86759d1
694291557,1384,hugofloresgarcia,2021-08-23T20:37:41Z,[x]
694298071,1384,hugofloresgarcia,2021-08-23T20:48:24Z,https://github.com/audacity/audacity/pull/1384/commits/2e175be2e7bfea335758eb5395ee95dac8dc08e2
694303025,1384,hugofloresgarcia,2021-08-23T20:56:41Z,https://github.com/audacity/audacity/pull/1384/commits/6dde137c8009100a80f266333939a82bfc03f230
694307761,1384,hugofloresgarcia,2021-08-23T21:04:34Z,https://github.com/audacity/audacity/pull/1384/commits/58d35ab2319857918e136104d6ed9ac05e370951
694307972,1384,hugofloresgarcia,2021-08-23T21:04:54Z,https://github.com/audacity/audacity/pull/1384/commits/58d35ab2319857918e136104d6ed9ac05e370951
778742227,1384,Paul-Licameli,2022-01-05T11:20:54Z,"macOS
"
778743288,1384,Paul-Licameli,2022-01-05T11:22:43Z,"Remove these changes from the branch please
"
778746112,1384,Paul-Licameli,2022-01-05T11:27:22Z,"Better to write `set( SOURCES`, in case the variable SOURCES inherits some value from parent scope that woud influence the CMake evaluation incorrectly.
"
778747373,1384,Paul-Licameli,2022-01-05T11:29:39Z,"Similarly, precede the loop with the command `set( OUTPUTS )` to be sure that variable is empty before you append to it.
"
778748755,1384,Paul-Licameli,2022-01-05T11:31:52Z,"""tags"" not required.  Is that correct?
"
778750215,1384,Paul-Licameli,2022-01-05T11:34:28Z,"Why was this change necessary to your build?
"
778754080,1384,Paul-Licameli,2022-01-05T11:41:24Z,"@crsib this is ok?
"
778757977,1384,Paul-Licameli,2022-01-05T11:48:17Z,"I would like every new CMakeLists.txt file for a library or a module to begin with long-form comments at the top giving some overview of the purpose:
```
#[[
Deep-learning extension module for Audacity

Implements an effect to transform sounds and an analyzer to attach labels ...
]]
```

You might explain what some of the individual source files do but it is not necessary for all of them.
"
778760176,1384,Paul-Licameli,2022-01-05T11:52:21Z,"Now I see an explanation in AudacityHeaders.h.  Please repeat it here.
"
778775338,1384,Paul-Licameli,2022-01-05T12:18:53Z,"Before diving deeply in these new source code files to understand them, the first thing I did was look through the #include directives to understand their dependencies, so that I could understand how to approach understanding bottom-up or top-down.  I made this graph with Graphviz of dependencies among the .cpp/.h file pairs:

![graph dot](https://user-images.githubusercontent.com/11670369/148216264-99ca6b94-2470-418b-abfc-6cd4d1afefca.gif)

Ideally dependencies among source code files should have no cycles, but I find two non-trivial strongly connected components here, as boxes.

Can these dependencies be broken?  Maybe my further exploration will tell me.
"
778778433,1384,Paul-Licameli,2022-01-05T12:24:27Z,"A good rule to follow is that each .cpp file will # include its corresponding h file before any other, so that we are sure each .h file is compiled at least once in the system as the first header, and therefore contains all other nested inclusions that it depends on.  This forces the # include directives to tell the complete story of compilation dependencies, and you know I care about getting a correct picture of those dependencies.

You followed that rule but with two exceptions.  This is one, and ModelManager.cpp is the other.

I rearranged the # include lines in my own build, to be sure things still compile.  They do.

Please make those changes too.
"
778916640,1384,crsib,2022-01-05T15:34:27Z,Yes
779167788,1384,Paul-Licameli,2022-01-05T22:05:00Z,"You can `std::move` from `msg` too for a small efficiency
"
779169807,1384,Paul-Licameli,2022-01-05T22:08:56Z,"`noexcept` is more modern C++ style than `throw()`
"
779177722,1384,Paul-Licameli,2022-01-05T22:25:07Z,"Thank you for documenting the exception safety contract!  But here and elsewhere, write it correctly, `@excsafety` not `@execsafety`.  It is supposed to be a promise that the object does not change its state at all in case of exceptions.  It is often implemented by building a copy, and swapping it with the original only when the copy is completed.

But is this comment event right?  I read the implementation and I see no checking of the schema, no throwing of an exception.

That is a Doxygen alias defined in audacity.dox.in.
"
779178516,1384,Paul-Licameli,2022-01-05T22:26:52Z,could be `const`
779182550,1384,Paul-Licameli,2022-01-05T22:35:20Z,const
779183227,1384,Paul-Licameli,2022-01-05T22:36:43Z,"Iteration over a const container (so you can't insert into it) but exposing shared pointers to non-const cards.  Do you want that, or do you want ""deep const?""
"
779184717,1384,Paul-Licameli,2022-01-05T22:39:53Z,"unnecessary `;`
"
779186943,1384,Paul-Licameli,2022-01-05T22:44:59Z,"The files in this namespace are used only in ModelCard.cpp.  So should you move them there, and simplify this interface file?"
779188438,1384,Paul-Licameli,2022-01-05T22:48:20Z,"""long-distance"" friendship, with a class defined in a different header file, is something to avoid.  It implies I can't really understand ModelCard without understanding DeepModelManager.

Why not just publicize more methods of ModelCard?

What are invariant conditions of the ModelCard object that must be maintained by functions in its public interface?  If you can state them, and if use of the mutating methods that are made public when you remove the friend declaration don't lead to violations of them -- then DeepModelManager doesn't really need to be a friend.

"
779190027,1384,Paul-Licameli,2022-01-05T22:52:05Z,const
779191720,1384,Paul-Licameli,2022-01-05T22:56:09Z,"You are inconsistent in the convention for naming of ""setter"" functions, some with ""Set"" in the name, some without.

Actually I suggest you use the without convention, and further allow the ""chain-call"" idiom:

```
ModelCard &name(const std::string &name) { m_name = name; return *this; }
```

And similar, then elsewhere:

```
      card->name(cardName);
      card->author(cardAuthor);
      card->SetLocal(false);
      card->SetLocalPath(audacity::ToUTF8(GetRepoDir(card)));
```

could instead be nicely:

```
(*card).name(cardName)
      .author(cardAuthor)
      .local(false)
      .localPath(audacity::ToUTF8(GetRepoDir(card)));
```
"
779193627,1384,Paul-Licameli,2022-01-05T23:00:16Z,"I have a mild preference for the new uniform-initialization, curly-brace syntax in constructor expressions.
"
779195789,1384,Paul-Licameli,2022-01-05T23:05:55Z,"I see from uses elsewhere that these predicates assume a non-null pointer, and the fact that the pointer is a smart one is irrelevant.  Also the card isn't mutated.

Say all of this with types.  Use a reference to const, not a pointer to modifiable.  Make the type `std::function<bool(const ModelCardHolder&)>`

This complicates the implementation of Filter() below, but makes the interface in this header file simpler to understand.  I know more about what the predicate is and isn't allowed to do.
"
779198488,1384,Paul-Licameli,2022-01-05T23:12:38Z,"The implementation of the non-throwing function might be a little bit cheaper, if it and the throwing function are both implemented in terms of a third, non-throwing function, visible only in this .cpp file, that returns a `std::optional<std::string>`; rather than having to catch an exception whenever defaulting of the value applies.

Similar for other pairs of functions below.
"
779200973,1384,Paul-Licameli,2022-01-05T23:19:29Z,"`d.Parse` is called twice.  Is that a mistake?  Is it a harmless mistake that makes no difference to the final state of `d`?  I don't know rapidjson enough to answer the questions for myself.
"
779201564,1384,Paul-Licameli,2022-01-05T23:21:06Z,"I looked at all uses of this type, and I don't see a non-empty second argument given anywhere to the constructor.
"
779204628,1384,Paul-Licameli,2022-01-05T23:29:29Z,"Perhaps the error message should quote the path to be more helpful to the user.

Perhaps call the static member function `TranslatableString FileException::WriteFailureMessage(const wxFileName &fileName);` to format the message consistently with other messages in Audacity.
"
779205799,1384,Paul-Licameli,2022-01-05T23:32:50Z,"Should comment that only GetRepoID is meant to be significant in comparison, not the other fields:  I was surprised to learn this when I got to reviewing the implementation.

Now I wonder why you need operator ==.  It raises the question, could this type also usefully be hashable or comparable with `<` ?
"
779206462,1384,Paul-Licameli,2022-01-05T23:34:38Z,No insertion happens that would make non-unique ids.  Perhaps the return should be boolean.
779207018,1384,Paul-Licameli,2022-01-05T23:36:19Z,"MIght take the lambda argument by const reference for tiny efficiency, avoiding reference count changes
"
779207529,1384,Paul-Licameli,2022-01-05T23:37:57Z,"Might `move(card)` for another tiny efficiency, or make the argument of `Insert()` a const reference, avoiding one shared pointer copy

"
779208610,1384,Paul-Licameli,2022-01-05T23:40:50Z,"I see `m_is_local` and `m_local_path` are omitted.  Should I think it's a possible bug or should a comment tell me that is intended?
"
779208939,1384,Paul-Licameli,2022-01-05T23:41:43Z,"""metadata"""
779209049,1384,Paul-Licameli,2022-01-05T23:42:04Z,"""HF"" means HuggingFace, right?
"
779209784,1384,Paul-Licameli,2022-01-05T23:44:18Z,"Permuting these lines so the order agrees with the serialization function would help a reviewer verify it's complete.
"
779212086,1384,Paul-Licameli,2022-01-05T23:51:26Z,"Better to use the `@file` (or `\file`, no difference) command to name and briefly describe a file's purpose.

I prefer not to use the `\class` command at all, but instead just prefix the Doxygen comments to the class definition itself.
"
779212439,1384,Paul-Licameli,2022-01-05T23:52:30Z,"No such class (any more?).  Remove this comment
"
779213129,1384,Paul-Licameli,2022-01-05T23:54:24Z,"Might precede this line with
`//i18n-hint <explanation of ""Models"" for the translators>`
I believe Dmitry has already emphasized to you the importance of the special i18n-hint comments, which get extracted from the source into the translation catalog, which human translation experts must fill in.  Unusual words out of context might need some more helpful explanation.
"
779215264,1384,Paul-Licameli,2022-01-06T00:01:04Z,Might `move`
779215895,1384,Paul-Licameli,2022-01-06T00:03:02Z,"""its"""
779217550,1384,Paul-Licameli,2022-01-06T00:08:19Z,"Again, ""@excsafety""
"
779218839,1384,Paul-Licameli,2022-01-06T00:12:16Z,"I only now noticed a systematic mistake of yours in Doxygen comments.

Please read this: https://www.doxygen.nl/manual/docblocks.html#specialblock

Your comment blocks are not correct, and none of your intended documentation comments for methods are going into the generated html pages.  (You can generate those for yourself if you install doxygen and run at the project root: `doxygen nographs.dox`)

To make the extraction work, you need to start line comments with
`//!`
Or you can make long comments with
```
/*!
...
*/
```
"
779220630,1384,Paul-Licameli,2022-01-06T00:17:36Z,"Might preced with
`//! @copydoc Load(std::string&)`
"
779220908,1384,Paul-Licameli,2022-01-06T00:18:32Z,"""attributes"""
779220962,1384,Paul-Licameli,2022-01-06T00:18:41Z,"""model's"""
779223379,1384,Paul-Licameli,2022-01-06T00:26:23Z,"This is NOT implemented with a strong exception safety guarantee, as the header comment claims, if `eval()` might throw.  Any previous data in `mModel` is lost.

You should insead put the model in a temporary unique_ptr, then move that into mModel only after any possibly throwing operations are done.

UNLESS -- you mean it to be a precondition that `Load()` may only be called for a `DeepModel` that has not yet been loaded.  In that case, header comments should say that, and the top of this function might assert the precondition.

"
779223945,1384,Paul-Licameli,2022-01-06T00:28:08Z,"If you follow my first suggestion, `Cleanup()` would be eliminated (here and in all other places), and mutation of members of `*this` would happen only on the success paths and only after all possibly throwing steps are done.
"
779224852,1384,Paul-Licameli,2022-01-06T00:30:52Z,Might `move`
779224970,1384,Paul-Licameli,2022-01-06T00:31:16Z,"And if `mCard` is moved, don't resuse it here"
779225077,1384,Paul-Licameli,2022-01-06T00:31:37Z,"Unnecessary use of type name
"
779225711,1384,Paul-Licameli,2022-01-06T00:33:31Z,"""prevents"""
779226374,1384,Paul-Licameli,2022-01-06T00:35:58Z,"Is this truly strongly exception-safe, meaning that if `forward` throws, `*mModel` is in an unchanged state?  To answer that would require knowing what promises Torch makes.
"
779228061,1384,Paul-Licameli,2022-01-06T00:41:31Z,"""series""
"
779229662,1384,Paul-Licameli,2022-01-06T00:46:41Z,"""bar"""
779229759,1384,Paul-Licameli,2022-01-06T00:47:05Z,"An in-class initializer might help the reviewer
"
779230903,1384,Paul-Licameli,2022-01-06T00:50:41Z,"This is the third time I'm reading a similar new exception class, defining `what()`.  Perhaps the common pattern needs to be a new utility I should add to lib-exceptions.
"
779234202,1384,Paul-Licameli,2022-01-06T01:01:10Z,"Would be nice to add `{}` initializers
"
779234645,1384,Paul-Licameli,2022-01-06T01:02:25Z,"More ""stupid"" pointer members, which should be initialized
"
779235877,1384,Paul-Licameli,2022-01-06T01:06:54Z,"I prefer to see member initialization before the constructor body where possible, not as assignments.  (In fact you have no choice when a member is const or is a reference.)  Or, as mentioned, initializing in-line in the class.  Again all this helps a reviewer check correctness of things.
"
779236747,1384,Paul-Licameli,2022-01-06T01:09:26Z,Might comment that this is an abstract class
779238324,1384,Paul-Licameli,2022-01-06T01:14:48Z,"You omitted `mApplyButton` !

Again, in-class initializers for the pointers would make it easier to check that there is no omission.
"
779240720,1384,Paul-Licameli,2022-01-06T01:22:20Z,"This, and the following two vector-valued accessors, might return const reference, and the places that use them might bind variables with `const auto &tags = ...`, for avoidance of vector copies.
"
779241073,1384,Paul-Licameli,2022-01-06T01:23:31Z,"Uses of `std::cout` for debugging purposes should be removed from production code.
"
779242441,1384,Paul-Licameli,2022-01-06T01:27:45Z,"Should be like
`XO(""%s Labels"").Format(leader->GetName()).Translation()`
1. ""Labels"" needs to be internationalized
2. And ""substitute, don't concatenate"" is a rule for translations that include some variable part: other languages might want other word orders
3. And an i18n-hint comment should precede
"
779243999,1384,Paul-Licameli,2022-01-06T01:32:53Z,"Don't need the cast, widening size_t to sampleCount
"
779244885,1384,Paul-Licameli,2022-01-06T01:36:02Z,"I would pass labelTrack by reference, since the smart pointer ownership policy is not relevant to what the function does."
779247857,1384,Paul-Licameli,2022-01-06T01:46:11Z,"`Stamp(...)` is unnecessary; `emplace_back` itself is a variadic function passing arguments to the element type constructor.
"
779758600,1384,hugofloresgarcia,2022-01-06T18:16:10Z,resolved in bf7a9ac5f
779773337,1384,hugofloresgarcia,2022-01-06T18:40:12Z,resolved with rebase
779778482,1384,hugofloresgarcia,2022-01-06T18:48:30Z,resolved in 7e642c2d8da630073e45fe99d4e9687131e97a22
779778841,1384,hugofloresgarcia,2022-01-06T18:49:08Z,resolved in 7e642c2d8da630073e45fe99d4e9687131e97a22
779779313,1384,hugofloresgarcia,2022-01-06T18:49:50Z,"yes! we're not using them for now, but could be useful once search capabilities are possible"
779784214,1384,hugofloresgarcia,2022-01-06T18:58:09Z,resolved in 3b4f57d5c
779786672,1384,hugofloresgarcia,2022-01-06T19:02:15Z,resolved in 548b8a32d77953433c6d4025cc08a10c7af4d98e
780292383,1384,Paul-Licameli,2022-01-07T14:20:11Z,"You say it is intentional that ""tags"" is not required, so no mistake.  Good.  Can that be # commented for the next reader? 
"
780296391,1384,Paul-Licameli,2022-01-07T14:26:36Z,"This mention of ASIO duplicates what is elsewhere in the file, and I think it's not relevant to deep learning and was mistakenly included.
"
780336161,1384,Paul-Licameli,2022-01-07T15:26:36Z,"This is correct
"
780337823,1384,Paul-Licameli,2022-01-07T15:29:01Z,"This is incorrect though.  Sorry I wasn't clear.  It is correct to have `list (APPEND` and incorrect to have `set` within this loop.  But there should be `set( OUTPUTS )` before `foreach` to be sure `OUTPUTS` is empty before each appending.
"
780340475,1384,Paul-Licameli,2022-01-07T15:32:55Z,"The consequence of the mistake could be that resampler.pt is changed but deeplearning-models target would not be updated by the build step.
"
780346186,1384,Paul-Licameli,2022-01-07T15:41:12Z,"I think there are assumptions elsewhere that the first member of Stamp is always less than or equal to the second.  Is there any guarantee that the data delivered by Torch will satisfy that condition?  If not, should you check it and enforce it here?  Either by discarding bad stamps, or swapping the bounds?
"
780355458,1384,Paul-Licameli,2022-01-07T15:55:09Z,"CMakeLists.txt suggests that this effect has other uses besides source separation.
"
780360334,1384,Paul-Licameli,2022-01-07T16:01:59Z,"https://manual.audacityteam.org/man/source_separation.html does not (yet) exist.  Will it?  Likewise for the other ManualPage for the analyzer.

Remember to discuss with @LWinterberg how this should be documented on-line.  Our system for documentation may change.
"
780367373,1384,Paul-Licameli,2022-01-07T16:12:49Z,See corresponding place in DeepLearningAnalyzer.  Maybe we need to be careful about internationalization of names of track.  Maybe it would be nice to translate the labels.  But labels depend on some imported model and are not known from the source code tree.  (They come ultimately from the .json data?) An open question how this might be fixed.
780369072,1384,Paul-Licameli,2022-01-07T16:15:32Z,"Is this short description the source of the strings appended to track names?

Do we have any control over this schema?  Can we somehow provide optional translations of user-visible short and long descriptions into other locales?
"
780374218,1384,Paul-Licameli,2022-01-07T16:23:45Z,"I checked again to see which of the ""setter"" member functions of ModelCard are used.

long_description, short_description, and labels are never used (where I think we might want to solve the i18n problem).

Also sample_rate, multichannel, effect_type, domain_tags and tags are not used.

Do you need to repair these omissions?
"
780377514,1384,Paul-Licameli,2022-01-07T16:28:37Z,"Fix ""to to""
"
780381957,1384,Paul-Licameli,2022-01-07T16:35:18Z,"This function is used in two places, the analyzer and the effect.

Should it have a simple early exit path in case the sample rates are equal?
"
780384377,1384,Paul-Licameli,2022-01-07T16:38:56Z,"I observe downmixing after resampling in the Analyzer, but the opposite in the Effect.  Is the difference a mistake?  Or is it significant, and should be commented?  Or is it unimportant?
"
780391006,1384,Paul-Licameli,2022-01-07T16:48:57Z,"Is this resampling needed or is it redundant with the second resampling in `ProcessOne`?
"
780406580,1384,Paul-Licameli,2022-01-07T17:13:36Z,"As many tracks are made, as there are labels.  But not, number of labels times number of channels in the leader.

Is this right?  Should there be more commentary about how stereo tracks are handled?  Does a stereo-capable model ""label"" left and right outputs separately?  If so, then how do you inform the model that the input is not stereo?  (By a tensor dimension?)

Are you making any hidden assumptions that the input is at most stereo?  That is correct for now, but who knows how Audacity might generalize in the future.  If the assumption is important, put in a comment like other comments elsewhere in the source tree:

`// TODO: more-than-two-channels`

"
780417412,1384,Paul-Licameli,2022-01-07T17:31:34Z,"Why was this postprocessing step important?

I don't like it that the several effect subclasses have, some of them, special clip-handling logic, rather than having a generalized logic defined in just one place.  But I'm not sure what that should be, given possible time-stretching.

I'm not telling you to change anything, just noting something that bothers me."
780418881,1384,Paul-Licameli,2022-01-07T17:34:06Z,"I notice that only the clip boundaries of the leader track influence the result.  But the clip boundaries of a right channel of a stereo track are not always in correspondence.

Again I ask how I should understand the results applied to stereo input tracks.  I only know that output tracks correspond to labels, an I also see that they are always unlinked, above.  So, surprisingly, results of this effect are never stereo.

Is stereo track handling in fact all unfinished business of this project?
"
780429074,1384,Paul-Licameli,2022-01-07T17:52:05Z,"So, I understand that this effect is doing an outer loop over intervals of time, while any loops over channels are inner loops.

GetBlockIndices() looks like it was a lot of work in pursuit of efficiencies, but was there measurement of the benefit?

I think you are assuming too that the block boundaries for efficient access occur at the same times in the two channels, but that might be untrue in unusual cases.

The division into blocks should have no effect on the outputs of the model.  Can I be sure that is so?  Does the model know how to carry state from one pass of the loop to the next?  Is that exactly one of the points of the TensorFlow library, to process large amounts of data piecewise?"
780430131,1384,Paul-Licameli,2022-01-07T17:53:52Z,"If this pattern of efficient iteration over the blocks of a track is really important, I should think about how to extract it into a reusable utility, and also treat the multiple channel case, for reuse in other effects and analyzers.
"
780432673,1384,Paul-Licameli,2022-01-07T17:58:04Z,"Now here is another indexing into `sourceTracks`.  Whatever the first dimension of the output tensor is, update that many channels in sourceTracks.

So what guarantees that this output dimension is equal to (or, just not more than) the number of ""labels""?
"
780437451,1384,Paul-Licameli,2022-01-07T18:06:55Z,"mClasses might remain not-clear when the analyzer exits, occupying a bit of memory needlessly.

But I think it is easily changed to a local variable instead of a class member variable, and passed as an argument to TensorToLabelTrack.
"
780443105,1384,Paul-Licameli,2022-01-07T18:17:34Z,"This function executes inside a destructor (a ""finally"" block in Effect.cpp) and should be guaranteed not to let exceptions escape.  Can I be sure of that, for the following steps?

You could wrap all in `GuardedCall<void>([&]{ ... });`

Which just eats the exceptions, not handling them, but if exceptions are of subclasses of `MessageBoxException`, then a delayed action is enqueued to the event loop, to show the user a message later.
"
780447444,1384,Paul-Licameli,2022-01-07T18:25:17Z,"Let's use `std::max` and `std::min` instead
"
780447880,1384,Paul-Licameli,2022-01-07T18:26:01Z,"You mean, overridden in sub-classes
"
780450716,1384,Paul-Licameli,2022-01-07T18:31:02Z,"This calls a function, which displays a message box and returns int, then throws the int.  That's wrong.

Either do the message box immediately and propagate an error code as the return value, or throw `SimpleMessageBoxException` to delay the display of a message box.
"
780454901,1384,Paul-Licameli,2022-01-07T18:39:15Z,"instead,
```
using namespace std::chrono;
std::this_thread::sleep_for(50ms);
```
"
780462241,1384,hugofloresgarcia,2022-01-07T18:53:05Z,resolved in  fafafa2af
780462263,1384,hugofloresgarcia,2022-01-07T18:53:08Z,resolved in fafafa2af
780463178,1384,Paul-Licameli,2022-01-07T18:54:45Z,"Does the library provide no means to execute `forward` incrementally and interruptibly?  That is unfortunate if so, and would explain some of what I am reading.

Or do I understand that there is such a means, and you did use it at the higher level, where the effect and the analyzer iterate over blocks of the track?

So you are only adding precautions here against a model that still gets hung doing a small piece?

Should you explain that in comments?
"
780467740,1384,Paul-Licameli,2022-01-07T19:03:20Z,"Precede this line with
`if (thread.joinable())`
else, a std:: exception will be thrown in the case that the thread was detached.
"
780470520,1384,Paul-Licameli,2022-01-07T19:08:41Z,"In the case that the thread detaches, because the user clicks the cancel button in progress, are we sure it will exit before too much time and not keep consuming resources?  There is no portable way to kill a std::thread that invokes bad code.
"
780477619,1384,Paul-Licameli,2022-01-07T19:22:26Z,"There is a greater danger in the case of a detached thread.  The lambda capture of the thread function will have dangling references to stack variables of this function after it exits!

There is also still a data race updating `output` in this path.  The thread might be in the middle of assignment to output before it sees the change of state of `success`.

I think you should to this:

Make a shared_ptr to a structure containing variables that the thread needs.  Capture that shared_ptr BY VALUE in the thread function.  If you take the path that joins the thread, copy the `torch::jit::IValue` that the thread wrote into a result variable.  (Copies of that type are inexpensive?) But if you take the path that detaches the thread, then zero out the result instead; let the detached thread keep running, but never touching the result variable.
"
780481801,1384,Paul-Licameli,2022-01-07T19:30:40Z,"indentation
"
780486199,1384,Paul-Licameli,2022-01-07T19:38:56Z,"Still unused
"
780488371,1384,Paul-Licameli,2022-01-07T19:42:58Z,"Do I understand right that this scroller may get populated with stuff, and grow before your eyes, as a result of asynchronous activity of the ModelManager?  That is unusual, as our dialogs go, and is worth a comment!
"
780488661,1384,Paul-Licameli,2022-01-07T19:43:30Z,"And this changes contents according to the selected card.
"
780494845,1384,Paul-Licameli,2022-01-07T19:55:06Z,"Or simply
`auto name = Verbatim(tag);`
"
780500290,1384,Paul-Licameli,2022-01-07T20:06:07Z,"Rather than all this retitling and rebinding of the buttons, you might find this solution more elegant:

Use `ShuttleGui` members `StartSimpleBook` and `EndSimplebook`.  In those brackets, use `StartNotebookPage` and `EndNotebookPage` one for each status.  And inside those brackets, add buttons and texts that don't need to change.  Then just use the `SetSelection` of the notebook control.
"
780500814,1384,Paul-Licameli,2022-01-07T20:07:14Z,"Maybe the pages could even have different layouts, not every one of them having one button and one text.
"
780501631,1384,Paul-Licameli,2022-01-07T20:08:56Z,"You would not need to show and hide the gauge, but just put it in one page.  Changing the notebook page is then enough to hide it.
"
780502539,1384,Paul-Licameli,2022-01-07T20:10:44Z,"unused
"
780503298,1384,Paul-Licameli,2022-01-07T20:12:10Z,"unused
"
780507620,1384,Paul-Licameli,2022-01-07T20:21:04Z,"Better to internationalize the user-visible string with i18n-hint comment that it abbreviates an unknown number of megabytes.
"
780507783,1384,Paul-Licameli,2022-01-07T20:21:21Z,"Internationalize this too.
"
780508627,1384,Paul-Licameli,2022-01-07T20:23:05Z,"Not the first `Verbatim(""%s"")` I see, which could be simplified"
780509077,1384,Paul-Licameli,2022-01-07T20:24:05Z,"Such a small ambiguous word without context needs its i18n-hint comment that it means ""programmed by"" someone
"
780510591,1384,Paul-Licameli,2022-01-07T20:26:49Z,Should I worry about a possibly unbouded list of tags laid out horizontally?
780512003,1384,Paul-Licameli,2022-01-07T20:29:47Z,"This is not properly balanced with `EndHorizontalLay` !
"
780513187,1384,hugofloresgarcia,2022-01-07T20:32:21Z,resolved in 479a35ad4
780513231,1384,hugofloresgarcia,2022-01-07T20:32:26Z,resolved in 479a35ad4
780513324,1384,hugofloresgarcia,2022-01-07T20:32:40Z,resolved in 8fe2f0dab
780513385,1384,hugofloresgarcia,2022-01-07T20:32:47Z,resolved in 479a35ad4
780513429,1384,hugofloresgarcia,2022-01-07T20:32:53Z,resolved in 580b7f943
780515090,1384,hugofloresgarcia,2022-01-07T20:36:39Z,resolved in 1a5105597
780518680,1384,hugofloresgarcia,2022-01-07T20:44:02Z,"resolved in 0d3f97f48
"
780519580,1384,hugofloresgarcia,2022-01-07T20:45:56Z,resolved in fafafa2af
780520154,1384,hugofloresgarcia,2022-01-07T20:47:12Z,resolved in 09844aa67
780520191,1384,hugofloresgarcia,2022-01-07T20:47:18Z,resolved in 09844aa67
780525319,1384,hugofloresgarcia,2022-01-07T20:58:15Z,resolved in 8cce7502a
780525334,1384,hugofloresgarcia,2022-01-07T20:58:16Z,resolved in 8cce7502a
780525349,1384,hugofloresgarcia,2022-01-07T20:58:18Z,resolved in 8cce7502a
780525366,1384,hugofloresgarcia,2022-01-07T20:58:20Z,fixed in 8cce7502a
780527031,1384,hugofloresgarcia,2022-01-07T21:01:47Z,4164841bf
780596738,1384,Paul-Licameli,2022-01-08T00:19:12Z,"""tensor""
"
780601452,1384,Paul-Licameli,2022-01-08T00:42:13Z,"No longer TODO ?
"
780603332,1384,Paul-Licameli,2022-01-08T00:52:38Z,"I see this question, and I think a solution might be: https://en.cppreference.com/w/cpp/thread/promise and the related `std::future`, which establish a channel between threads that can perform a one-time communication of either a result value or an exception.  You can read details, while I try to understand your code better to see whether this might really apply here.
"
780718425,1384,Paul-Licameli,2022-01-08T23:50:02Z,"There is an incomplete thought in that comment
"
780718824,1384,Paul-Licameli,2022-01-08T23:57:05Z,"I made some trial runs, and the color choices should be adjusted.  The yellow color for ""installing"" made a poor contrast between text and background which was hard to read.  But this is one of the easiest things to change.

"
780720000,1384,Paul-Licameli,2022-01-09T00:19:24Z,"Now it's time to speak of the difficult topic of thread safety, where I see problems.

1. I understand now that this and other progress and completion callbacks ultimate are given to NetworkManager, which will execute them on non-main threads.
2. I see many uses of `CallAfter` in ModelCardPanel.cpp and ModelManagerPanel.cpp that had no explanation in the comments, but they make sense now that I understand this fact about threads.  An inner lambda, given to `CallAfter` by the outer lambda, means the inner lambda is sure to be enqueued to execute in the main thread later at idle time of the event loop, and that serializes those inner lambdas so there are no data races between them.
3. You may not have known this, but:  you don't need a window to invoke CallAfter.  You can also invoke this method on the global object, `wxTheApp` defined in `<wx/app.h>`.
4. In fact, I recommend you do exactly this, here at the low level of DeepModelManager.cpp, in all places that some callback is passed to NetworkManager.  Wrap all callbacks passed in from above in lambdas that pass them to `wxTheApp->CallAfter`; pass the wrapped callbacks, only, to NetworkManager; and then in DeepModelManager.h, where the callback `std::function` types are declared, comment that they are guaranteed to execute in the main thread.  Then, the callbacks upstairs in the Dialog files can be simplified.
5. Lambdas like this one should also be wrapped (DownloadModel in this case would wrap them, but they would remain unchanged here).  Because, as it is now, there is a dangerous data race.  `IsInstalling` uses `mResponseMap`, here in the thread pool, but the same map might be mutated concurrently in the main thread by `CancelInstall`.  Dangerous!  You could guard accesses with a mutex, but you can also just use CallAfter to serialize all the work in the main thread.
"
780720745,1384,Paul-Licameli,2022-01-09T00:34:00Z,"I have more to say, about a better way to handle the lifetime of window objects.
1. The code comment above suggest to me you discovered a crash, and worked around it.  The workaround was not perfect, becase `this->IsInstalling(card)` might have transitioned from true above to false below, because of a thread context switch at just the wrong time.  Serializing all on the main thread will solve that.  Still, the need for the workaround points to something not right elsewhere in the program.
2. The only lambda that is ever wrapped inside this one is `onProgress` defined in `ModelCardPanel::OnInstall`, and I think you discovered a dangling pointer crash in that lambda because the `this` that was captured, no longer existed when the callback happened.  Am I right?
3. A solution for dangling pointers is to use a weak pointer.  I do not mean `std::weak_ptr` in this case, becuase it is not recommended to use standard smart pointers with certain wxWidgets objects, that have their own special memory management.  Instead, see this: https://docs.wxwidgets.org/3.0/classwx_weak_ref_3_01_t_01_4.html
4. So, better that `ModelCardPanel::OnInstall` should capture a `wxWeakRef` to `this`, and not `this` itself, in the lambda.  Then that allows a null pointer check inside that lambda, that the window still exists.  (No danger in that case that the non-null pointer will become stale because of the action of other threads.  All deletion of windows is done in the main thread.)
5. Really it is the responsibility of `onProgress`, defined there, to guard against capturing a dangling pointer.  Fix it there, then simplify here, removing this intermediate level of wrapping.
6. Should you do the same in the five other places that now use CallAfter in the *Dialog.cpp files?  I haven't proved yet to myself that it's necessary in all cases, but it is easy to do to enhance safety.  So, do that!"
780721852,1384,Paul-Licameli,2022-01-09T00:53:52Z,"When making a ""singleton"" class like this, these lines, to prohibit copying, are also useful:
```
DeepModelManager(const DeepModelManager&) = delete;
DeepModelManager &operator=(const DeepModelManager&) = delete;
```
The are redundant to stop copying in this case, because of the private destructor and the `std::mutex` member, but still it makes the intent plain and the impossibility of copy more obvious to the reviewer.

Banning copy causes the compiler to flag this mistake:
```
auto manager = DeepModelManager::Get();
```
where `&` to declare a reference variable was omitted.

I have been guilty of such mistakes.
"
780722560,1384,Paul-Licameli,2022-01-09T01:06:03Z,"I see the string literals ""model.pt"" and ""metadata.json"" repeated in many places.  Better to write each literal only once and give it a variable name, then reuse the name.  This matters less inside one .cpp file, but I don't like it when I see long-distance coincidence of number or string literals in different .cpp files.  Might this file have need to grow and split in future?

"
780722839,1384,Paul-Licameli,2022-01-09T01:10:39Z,"Which call above might throw `const char *`?
"
780723110,1384,Paul-Licameli,2022-01-09T01:16:18Z,"I'm not very sure of this assumption, even after all is serialized in the main thread.  It's harmless if the assumption is wrong.  I wouldn't make an assertion.
"
780723396,1384,Paul-Licameli,2022-01-09T01:21:48Z,"The mutex locked above could be eliminated as I have suggested elsewhere, and `Insert` does not throw that exception type, so couldn't this simplify?
"
780724814,1384,Paul-Licameli,2022-01-09T01:46:35Z,"""anywhere""
"
780724842,1384,Paul-Licameli,2022-01-09T01:46:59Z,"""it's""
"
780725347,1384,Paul-Licameli,2022-01-09T01:56:23Z,"`Uninstall` throws if the card was already not installed.  Are you sure it won't throw here?  Maybe make Uninstall non-throwing, and insert throws at other uses of it?

Is there a guarantee that `CancelInstall` aborts the response and that this callback is not invoked again?  I'm not sure.
"
781577694,1384,hugofloresgarcia,2022-01-10T21:44:14Z,e27545cbe5c2905cc9555f14c840eb8d3d870e5d
781584234,1384,hugofloresgarcia,2022-01-10T21:50:08Z,539a3ead07f5a298c8bca75203e772f8f74321a9
781593996,1384,hugofloresgarcia,2022-01-10T21:59:08Z,94de8a3bbcca7f5c348a4b98865eed91a3b0a8b3
781599543,1384,hugofloresgarcia,2022-01-10T22:04:31Z,b447514d38b84c98c1d08508c2f6d12ca752d1c0
781650490,1384,hugofloresgarcia,2022-01-10T23:27:10Z,3a45be1d37e3b81b72ce5da358dab578a0144474
781650952,1384,hugofloresgarcia,2022-01-10T23:28:13Z,30f12ed7fc19470527419f8782fceb3ca7c15386
781653205,1384,hugofloresgarcia,2022-01-10T23:33:10Z,1c33a378e460e0e1b8d7cd9028b13f906646f4b3
781655027,1384,hugofloresgarcia,2022-01-10T23:37:31Z,c2b6d73b7606a41209e160878eba7699e451cd45
781663991,1384,hugofloresgarcia,2022-01-11T00:00:58Z,"added a clarification

```
    // note: the fields ""is_local"" and ""local_path""
   // are not deseralized because they are filled out
   // by the ModelManager when the ModelCard is saved to / loaded from disk. 
```
"
781664158,1384,hugofloresgarcia,2022-01-11T00:01:19Z,8d42c80dded1ba5dd6b0d02155d8f145c67549d2
781665081,1384,hugofloresgarcia,2022-01-11T00:03:54Z,a51ac92a90a6efb6243d1cf208da660f7819823c
781667603,1384,hugofloresgarcia,2022-01-11T00:10:30Z,525fb9b9e497bcd38a812067cf7ce69350e9bcec
781667642,1384,hugofloresgarcia,2022-01-11T00:10:38Z,4619c09faa3e0b2f4f54f70adb7e3b8721b4e646
781667666,1384,hugofloresgarcia,2022-01-11T00:10:42Z,4619c09faa3e0b2f4f54f70adb7e3b8721b4e646
781668259,1384,hugofloresgarcia,2022-01-11T00:12:17Z,2161ece9c7f4b4533f82c7acaeaf375c1c9f3a48
781668407,1384,hugofloresgarcia,2022-01-11T00:12:42Z,525fb9b9e497bcd38a812067cf7ce69350e9bcec
782375025,1384,hugofloresgarcia,2022-01-11T17:28:18Z,d19180bd489b299b7e7a8caee2c5a9f13bd2e689
782375135,1384,hugofloresgarcia,2022-01-11T17:28:26Z,d19180bd489b299b7e7a8caee2c5a9f13bd2e689
782392255,1384,hugofloresgarcia,2022-01-11T17:46:47Z,7ae287f72127a0f04e62564fc227c7c958ee76c1
782392311,1384,hugofloresgarcia,2022-01-11T17:46:52Z,7ae287f72127a0f04e62564fc227c7c958ee76c1
782396413,1384,hugofloresgarcia,2022-01-11T17:52:29Z,358f92a21c5048518f61d8a9e5c83045659791ad
782409290,1384,hugofloresgarcia,2022-01-11T18:10:31Z,3db261fb8644bbb764504db69d4fd10223f7dec0
782409381,1384,hugofloresgarcia,2022-01-11T18:10:39Z,3db261fb8644bbb764504db69d4fd10223f7dec0
782409424,1384,hugofloresgarcia,2022-01-11T18:10:43Z,3db261fb8644bbb764504db69d4fd10223f7dec0
782409467,1384,hugofloresgarcia,2022-01-11T18:10:47Z,3db261fb8644bbb764504db69d4fd10223f7dec0
782409550,1384,hugofloresgarcia,2022-01-11T18:10:56Z,3db261fb8644bbb764504db69d4fd10223f7dec0
782410994,1384,hugofloresgarcia,2022-01-11T18:12:51Z,"yes, the labels do come from the .json data, meaning that they would have to be translated on the fly somehow. "
782431016,1384,hugofloresgarcia,2022-01-11T18:41:58Z,"this is the short, 50-something character description shown on the scrolled window on the left. It helps users browse through models and pick the one suited for their needs. 

Because these models (along with their json metadata) are meant to be contributed by the community (and hosted in HuggingFace repositories), I can't think of a way to provide optional translations. Maybe querying a translation API?

<img width=""1116"" alt=""Screen Shot 2022-01-11 at 12 38 22 PM"" src=""https://user-images.githubusercontent.com/55194054/149001811-e65c8c2d-fe0f-4b98-9f87-427035459c22.png"">
 "
782432357,1384,hugofloresgarcia,2022-01-11T18:43:48Z,"mmmm, I think those setters are not used because those fields are filled out in `ModelCard::Deserialize` always (since they come from json data), but I wanted to leave them there for completeness. Any thoughts?"
782435099,1384,hugofloresgarcia,2022-01-11T18:47:51Z,"it is unimportant,  but I fixed it for consistency. 1756e7ca96f0dcdd5650aaebc950f8390d3dbc3d"
782436380,1384,hugofloresgarcia,2022-01-11T18:49:46Z,the content in `sourceTracks` contains the result audio output by the deep model. Deep models process audio at their own sample rates (typically 16k). This resampling step resamples each output track from the deep model's sample rate to the input track's original sample rate.  
782471486,1384,hugofloresgarcia,2022-01-11T19:41:10Z,5ffa9262fd2870e777e192f70b74b4d64b4e1638
782477323,1384,hugofloresgarcia,2022-01-11T19:49:58Z,"yeah, the input to the deep model can currently have any number of channels (more-than-two-channels is supported), but each output track has to be mono. I don't think it would be too hard to support multichannel output tracks though. "
782490022,1384,hugofloresgarcia,2022-01-11T20:09:24Z,355d1e08c421b7605144e20d965125c36b8b47b3
784335483,1384,hugofloresgarcia,2022-01-13T21:25:50Z,f09c89099133a4bc51f6837a54627a504452fc7c
784335513,1384,hugofloresgarcia,2022-01-13T21:25:53Z,fixed in f09c89099133a4bc51f6837a54627a504452fc7c
785067143,1384,hugofloresgarcia,2022-01-14T18:31:21Z,using wxTheApp->CallAfter works!
785071005,1384,hugofloresgarcia,2022-01-14T18:37:56Z,"Removed those unnecessary checks from Uninstall. Now, it will only throw if there was an error in wxFileRemove when the file actually exists. CancelInstall should always abort the response"
785073768,1384,hugofloresgarcia,2022-01-14T18:42:41Z,"libtorch does not provide a way to execute `forward` incrementally and interruptibly. I'm processing the audio clip-by-clip. Each clip is processed in blocks, where I use `track->GetBestBlockSize` to get the size of each block. I find that the blocks are in the order of a few seconds, but deep learning models can still take a while when processing a few seconds of audio. @crsib suggested to not do `forward` in the main thread, because of how slow some deep models are to process audio. "
785074545,1384,hugofloresgarcia,2022-01-14T18:44:02Z,done! added a struct that holds all necessary variables for as long as the detached thread runs
785084387,1384,hugofloresgarcia,2022-01-14T19:00:22Z,"Is it possible to just process the track clip-by-clip? Would it cause any memory problems if the clip is too large? Using `track->GetBestBlockSize` was just the way a few other effects are implemented in Audacity, so I figured I would try to follow the pattern."
785086380,1384,hugofloresgarcia,2022-01-14T19:03:39Z,"this should work better
```cpp
for (size_t idx = 0; idx < std::min(sourceTracks.size(), (size_t)output.size(0)) ; idx++)
```"
787038773,1384,hugofloresgarcia,2022-01-18T18:27:45Z,"I don't think const is really needed here, so I removed it for now. "
805384996,1384,chrahunt,2022-02-13T16:42:17Z,Should this be `audacity_has_deeplearning`?
1137383630,4414,Paul-Licameli,2023-03-15T16:15:56Z,"I see you have got used to the boilerplate for making new attached objects.

`ClientData::Site` is a great idea if I may say so immodestly, but I find this kind of repetition a bit painful.

I have some ideas for using a CRTP template to automate the writing of all this `Get` junk, requiring only that you supply the factory.

Please review my #4395 .  That, or something close to it, may be part of the solution.
"
1137394761,4414,Paul-Licameli,2023-03-15T16:22:52Z,"As we mentioned today, maybe we join this with lib-time-frequency-selection, just to avoid too many libraries.  That did not previously have the two dependencies above, while it also depends on lib-screen-geometry and lib-project-history.  All four of these are comparatively low level things -- screen geometry is even a leaf.
"
1137403722,4414,Paul-Licameli,2023-03-15T16:28:36Z,"Did I ever explain the PROHIBITED macro and why I don't still use it and sometimes remove it?

Wow, seven years ago. 9e5d31d347873f7e54f5a4b7e8528fa61490b792

While purging all the old naked news and deletes, I wanted easy text scans to see where remaining ones were that needed work.  `safenew` also dates from this time for certain news that are correctly unpaired and don't need smart pointers -- any construction of a wxWindow with a non-null parent, because the parent assumes deletion responsibility (and I think Qt works the same?)."
1137417646,4414,Paul-Licameli,2023-03-15T16:37:37Z,"Did you also look at the examples of registry item subclasses in namespace `MenuTable`?  That incidentally was a focus of the cycle-busting I was doing yesterday.
"
1137427920,4414,Paul-Licameli,2023-03-15T16:44:12Z,"What you did here, to adapt one abstract visitor interface to another, might be more nicely done with a template convenience defined in Registry.h itself."
1137429473,4414,Paul-Licameli,2023-03-15T16:45:16Z,... because one can easily foresee much repetition of the pattern
1137434318,4414,Paul-Licameli,2023-03-15T16:48:29Z,I would use `final` not `override` for these three functions
1137435686,4414,Paul-Licameli,2023-03-15T16:49:22Z,"All of which are defined below.  So, why a registry?  Do you anticipate more, and scattered add-on cases?
"
1137441222,4414,Paul-Licameli,2023-03-15T16:53:04Z,"That you for figuring out and reapplying the Registry system.

How would you rate your first experience?

- [ ] 😑 
- [ ] 🙄 
- [ ] 🥱 
- [ ] 🤯 
- [ ] 🤩 
- [ ] 🤮 "
1137447227,4414,Paul-Licameli,2023-03-15T16:56:54Z,"The files-changed count looks less frightening to me now
"
1137450851,4414,Paul-Licameli,2023-03-15T16:59:18Z,Good riddance
1137454464,4414,Paul-Licameli,2023-03-15T17:00:57Z,"As we mentioned today -- moving ALL of the persistency code into the green, if my other PRs for track subclasses are merged too.  Good milestone."
1137471312,4414,Paul-Licameli,2023-03-15T17:11:53Z,"I didn't see yet what happens to src/Snap.*

In a branch that I haven't shared yet, I made it the home of the new attached object, I moved the functions that draw yellow lines out into TrackArt.cpp, and I moved them to lib-time-frequency-selection

I also found a way to break dependency of ProjectSelectionManager on WaveTrack, and then I moved that too into lib-time-frequency-selection
"
1137475798,4414,Paul-Licameli,2023-03-15T17:14:28Z,"Good for you, I should do more like it
"
1137480587,4414,Paul-Licameli,2023-03-15T17:17:40Z,"A CMake long comment, please, as with other libraries
"
1137491592,4414,Paul-Licameli,2023-03-15T17:24:43Z,"We should just nuke this file and the other listener too
"
1138122564,4414,Paul-Licameli,2023-03-16T04:59:27Z,Document the assertion with a @pre comment here
1138134394,4414,Paul-Licameli,2023-03-16T05:10:03Z,I think it is wrong to delete this.  Instead change it to modify the ProjectRate object.
1138135178,4414,Paul-Licameli,2023-03-16T05:11:04Z,Likewise here set ProjectRate
1138138969,4414,Paul-Licameli,2023-03-16T05:18:56Z,Does As_SetRate become unused at this commit?
1138148897,4414,Paul-Licameli,2023-03-16T05:32:53Z,Is that function unused now?
1138159875,4414,Paul-Licameli,2023-03-16T05:52:52Z,"Was all this per project persistency of signatures stipulated in design explicitly?  If not, be sure there is agreement"
1138161914,4414,Paul-Licameli,2023-03-16T05:56:35Z,Unless you agree to put it into an existing library not a new one
1138165658,4414,Paul-Licameli,2023-03-16T06:03:31Z,Comment is wrong
1138605804,4414,Paul-Licameli,2023-03-16T12:48:43Z,"The second commit in the sequence breaks the build with this line, and the build is fixed but wrongly, at ""SelectionBarListener no longer controls snapping"", by deleting the line.
"
1138611667,4414,Paul-Licameli,2023-03-16T12:52:55Z,"Answer, no, but still the function just calls through to `ProjectRate::Get( project ).SetRate( rate );` and there is no need I see for that extra level of abstraction around it in the remaining place.
"
1138613979,4414,Paul-Licameli,2023-03-16T12:54:35Z,"I'm sure it's wrong -- the command parameter has no effect now
"
1138693157,4414,Paul-Licameli,2023-03-16T13:46:13Z,"When I build the commit that introduces this Button on my MacBook, the button fails to display and I don't know why.  There is just a blank space on the toolbar below the title.
"
1138829158,4414,Paul-Licameli,2023-03-16T14:58:51Z,"Ah, the commit comment mentions that visuals aren't all correct yet.

I didn't see the second line.  You know my habit of adding ellipsis... to the first line of a commit comment to direct the reviewer not to skip more explanation.  I recommend it
"
1138830470,4414,Paul-Licameli,2023-03-16T14:59:25Z,"I also observed at that commit that if you drag the toobar off the dock, it does not give you a resizer grip at the corner as other toolbars do.
"
1138941112,4414,Paul-Licameli,2023-03-16T16:00:50Z,"I notice now, most toolbars did not have the resizer grip.  The two new ones do not.  The few that do have it are the meters and play-at-speed, for which it makes sense, and also the Time toolbar.

The Time toolbar adapts the numeric control to a bigger font or smaller.

Maybe there is a question for design @LWinterberg @DilsonsPickles @Tantacrul whether that feature would also be desirable for the other toolbars that have this numeric control too -- the selection spectral selection toolbars (that last is hidden by default).

Or maybe we just ignore that question until after rebasing to Qt.
"
1138985998,4414,crsib,2023-03-16T16:16:44Z,"Yeah, turns out there was an indirection, let me fix that"
1138991305,4414,crsib,2023-03-16T16:18:53Z,"Bad merge with master, sorry for that"
1139229718,4414,Paul-Licameli,2023-03-16T18:50:31Z,"If you add a setting object, be sure to eliminate all repetitions of the path elsewhere.  So you must also change PluginMenus.cpp
"
1139272127,4414,Paul-Licameli,2023-03-16T19:34:05Z,The `SetName` call got lost and that has bad implications for the screen reader.
1139290648,4414,Paul-Licameli,2023-03-16T19:55:41Z,"The commit that does all of this -- should be squashed with the commit two previous, and the commit that adds images should be before that, If you want to eliminate the unfinished intermediate step of the history."
1139295666,4414,Paul-Licameli,2023-03-16T20:01:22Z,"I am trying for myself a rebasing onto recent master and building each commit.  So you will discover too if you do that, the need to change this path because the file is now in a library.
"
1139296200,4414,Paul-Licameli,2023-03-16T20:01:56Z,"The commit adding this file just disappears when you rebase.
"
1139305344,4414,Paul-Licameli,2023-03-16T20:11:43Z,"The commit adding this file has an easily resolved conflict in libraries/CMakeLists.txt
"
1139309451,4414,Paul-Licameli,2023-03-16T20:16:29Z,"Visibility isn't needed for this and the previous struct, but no harm"
1139310878,4414,Paul-Licameli,2023-03-16T20:17:49Z,Avoiding repeated expression `ProjectTimeSignature::Get(mProject)` might be nice
1139315045,4414,Paul-Licameli,2023-03-16T20:20:35Z,"So the distinction between nearest and prior is lost after saving and reloading the project.  Should we try to fix that?
"
1139331308,4414,Paul-Licameli,2023-03-16T20:33:40Z,is `cassert` really needed?
1139334097,4414,Paul-Licameli,2023-03-16T20:36:48Z,"Should that instead be
`return SnapToSetting.GetDefault();`
"
1139335740,4414,Paul-Licameli,2023-03-16T20:38:47Z,Another easily resolved conflict here
1139338441,4414,Paul-Licameli,2023-03-16T20:42:05Z,You didn't use this function yet at this commit
1139351064,4414,Paul-Licameli,2023-03-16T20:56:58Z,"Please comment what the second member means.

I had thought the meaning of the second member would be that the output time is different from the input time.  But that is not consistent with the examples of snap functions in SnapUtils.cpp.

If the purpose of the boolean is to indicate that a snap function is not found, while a snap function is expected always to return true in second place -- then a snap function should just return double.

If that is not the intent, please comment what it is, and change the snap functions so that they sometimes return false.
"
1139353409,4414,crsib,2023-03-16T20:59:41Z,"The whole library is not used in this commit, what's the point?"
1139354553,4414,crsib,2023-03-16T21:01:08Z,I do know how to resolve conflicts.
1139355410,4414,crsib,2023-03-16T21:02:09Z,That's unfortunate omission that I forgot to implement. This function will be quite a bit more complex.
1139355769,4414,crsib,2023-03-16T21:02:37Z,This is the original behavior 
1139359378,4414,Paul-Licameli,2023-03-16T21:07:03Z,"The ordering preference initializer makes hints unnecessary.

Hints will be useful if ever there are scattered snap function definitions in other files"
1139359891,4414,Paul-Licameli,2023-03-16T21:07:45Z,"I do not yet understand the purpose of grouping in this registry.  I have not yet seen BeginGroup or EndGroup used for any purpose.
"
1139363563,4414,Paul-Licameli,2023-03-16T21:12:15Z,The transparency of the groups doesn't matter unless they are nameless
1139365079,4414,Paul-Licameli,2023-03-16T21:14:07Z,I recall some strange detail about the non-uniformity of one of these frame formats.  Is the snap function correct?
1139366033,4414,Paul-Licameli,2023-03-16T21:15:17Z,This is just like `SnapToTime`.  Will it be changed?
1139370694,4414,Paul-Licameli,2023-03-16T21:21:24Z,"This function is removed, but there is still one comment mentioning it.  Remove that comment.
"
1139371805,4414,Paul-Licameli,2023-03-16T21:22:39Z,"The commit that adds this file needs four `#include` directives to change so that it builds.
"
1139373026,4414,Paul-Licameli,2023-03-16T21:24:09Z,This answers an earlier question of mine
1139377657,4414,Paul-Licameli,2023-03-16T21:29:37Z,"Let this stand for now, but be aware that I'll probably need to break dependencies on TrackPanel and also ProjectWindow to make further progress to toolkit neutrality for larger parts of the code.

TrackPanel should instead either subscribe to change in selection and refresh itself, or poll for changes in idle time.
"
1139386221,4414,Paul-Licameli,2023-03-16T21:41:21Z,This should be in the previous commit if it fixes the build
1139390390,4414,Paul-Licameli,2023-03-16T21:47:15Z,This function might be removed at the earlier commit where SelectionBar stops using it
1139394942,4414,Paul-Licameli,2023-03-16T21:53:52Z,"The commit that removes this can replace `#include ""NumericTextCtrl.h""` with ""ComponentInterfaceSymbol.h"", lowering this guy in the dependency graph.

That will require other `#include`s added in other places that depended on transitive inclusions.
"
1139397405,4414,Paul-Licameli,2023-03-16T21:57:21Z,"You no longer use mConverter in the general case to define snapping -- and indeed it is excessively complicated for most uses.

But for the weird cases of PAL and/or NTSC frames, conserve old behavior.  Let SnapToFrames include ""NumericConverter.h"" and define snapping the old way just for the weird case.



"
1139416898,4414,Paul-Licameli,2023-03-16T22:26:34Z,"Why use XO(“%d”)?  For locale dependent decimal point, or maybe even other digit characters."
1139417047,4414,Paul-Licameli,2023-03-16T22:26:50Z,Maybe more places need to do that
1139420789,4414,Paul-Licameli,2023-03-16T22:30:20Z,"This event handler changes the project rate but does not change preferences in the .cfg file which is what preference dialog pages are supposed to do.  Furthermore the commit says you “moved” quality but this does not remove it from the other page.

who specified this change?  I think it is not necessary for bears and bars and needs more thought."
1139422292,4414,Paul-Licameli,2023-03-16T22:32:43Z,"I think the only other place where we used that project argument in the page factory, is for spectrogram preferences, because this dialog was reused (by me, several years ago) for the new purpose of also changing per-track spectrogram settings."
1139444057,4414,Paul-Licameli,2023-03-16T23:12:21Z,Does snap to prior become unavailable?
1139445092,4414,Paul-Licameli,2023-03-16T23:14:30Z,Does it update for change of language?
1139445287,4414,Paul-Licameli,2023-03-16T23:14:59Z,Wrong comment
1139446648,4414,Paul-Licameli,2023-03-16T23:17:52Z,Comment
1139447893,4414,Paul-Licameli,2023-03-16T23:20:30Z,"Again, language?"
1139933529,4414,crsib,2023-03-17T08:38:55Z,"TBH the last place I would be looking for snapping would be ""time-frequency-selection"", but I can move the code I you want. When I have started working on this there was no `lib-time-frequency-selection` either."
1139934225,4414,crsib,2023-03-17T08:39:42Z,I had to look over all the places to understand how to use registries. 
1139957109,4414,crsib,2023-03-17T08:56:46Z,"The whole registry thing was done in anticipation of your criticism about the lack of open endlessness.  I would personally agree with this criticism this time, so I took an open ended approach. 

Doing it not open-endedly or even writing ""own"" would be much quicker, however I have tried to stick to the standard approach used in other places in Audacity. This has costed me quite a lot of time.  
"
1139959942,4414,crsib,2023-03-17T08:58:48Z,"I will do it in the following PR, probably not for 3.3 though"
1139963848,4414,crsib,2023-03-17T09:01:40Z,Snapping is out of the selection TB
1139965757,4414,crsib,2023-03-17T09:03:36Z,"For the music creation time signature is a vital part of the project. You have reminded me that I forgot about project history though, that I will fix (if @LWinterberg @Tantacrul  have no objections). "
1139967697,4414,crsib,2023-03-17T09:05:31Z,That's unfortunate. 
1139969415,4414,crsib,2023-03-17T09:07:16Z,"I've tried to keep history consistent and easy for review. I failed horribly in the end anyway, because nice history never matches the actual history. "
1139970887,4414,crsib,2023-03-17T09:08:42Z,Probably not anymore
1139974722,4414,crsib,2023-03-17T09:12:40Z,"I would love to omit the ordering preference initializer, but turns out nothing works without it. By the time I figured that out I've spent to much time already to continue experiment on how things work. 

I would like to keep it this way though, this improves the readability somewhat."
1139975849,4414,crsib,2023-03-17T09:13:45Z,"This is a draw back of commit by commit review, yes. It gets worse when everything is split into multiple pull requests too. "
1139978553,4414,crsib,2023-03-17T09:16:27Z,Potentially we will change the transparency or even make it dependent on user preferences.
1139979134,4414,crsib,2023-03-17T09:17:01Z,It only affects the display for NTSC with drop frames. 
1139979916,4414,crsib,2023-03-17T09:17:45Z,No. I like it to have an explicit name. 
1139989806,4414,crsib,2023-03-17T09:27:26Z,"I have read carefully about the NTSC drop frames. This excessive complexity is only needed for the display purposes. On top of that:

* There is a question to design team about the chosen format. We do not have `23.97` display format in Audacity. (@LWinterberg @Tantacrul FYI)
* We handle `29.97` in a straight forward way. We have a separate format that accounts for NTSC drop frames.
* I don't really know how important is this format for snapping at all.

So should I change this behavior now? I doubt it and I will have to extend the formats of NumericConverter to do so. 
"
1139990913,4414,crsib,2023-03-17T09:28:24Z,"Unfortunate leftover, I had `%d Hz` before. "
1140021548,4414,crsib,2023-03-17T09:56:02Z,"> who specified this change? I think it is not necessary for bears and bars and needs more thought.

@DilsonsPickles did. I agree that this is very questionable change, we have discussed it at some point during the design review.

`ProjectRate` in Audacity is a very confusing thing per se, which is made far worse by this change.

Quality preference page allows you to set the project rate to be used by a new project. This setting is called ""Default project rate"". 

Selection tool bar, on the other hand, controlled the sampling rate of the project (only by changing the ProjectRate value). This is now moved to Audio Preferences. So there is nothing wrong with what the commit message says. 

I do not understand the value of changing the sample rate of the project without the tracks resampling (or in allowing tracks to have different sample rates in one project). 

I think that we need to discussed it carefully again. I don't think that it is a blocker for 3.3 though. 

@Tantacrul @LWinterberg FYI"
1140021716,4414,crsib,2023-03-17T09:56:12Z,As per design. 
1140022966,4414,crsib,2023-03-17T09:57:22Z,"This needs to fixed, yes. Turns out that the TimeToolbar doesn't work either. "
1140157729,4414,Paul-Licameli,2023-03-17T12:16:04Z,"Snapping modifies what is time-selected, so it is related.

I don’t feel very strongly on this"
1140160995,4414,Paul-Licameli,2023-03-17T12:19:23Z,"What did not become a registry yet is the table of formats in NumericConverter.  I thought I might see that, when you mentioned registries.

I hope you agree that registries have their value and will be easier for you to use again."
1140162921,4414,Paul-Licameli,2023-03-17T12:21:13Z,Or allow me to clean it up?  I may still rebase that PR that removes dependencies on toolbars 
1140165394,4414,crsib,2023-03-17T12:24:00Z,"It's up to you :-)

I can do that without problems "
1140173728,4414,Paul-Licameli,2023-03-17T12:30:30Z,"Actually, there was never undo/redo for rate changes either."
1140176906,4414,Paul-Licameli,2023-03-17T12:33:14Z,"I do want to follow this with refactoring that demotes ProjectSelectionManager to lib-time-frequency-selection, so that will depend on lib-snapping if it still separate."
1140183689,4414,Paul-Licameli,2023-03-17T12:38:59Z,"Maybe an edge case in little used functionality.

It seems the snap functions for the weird cases might be good as separately registered stuff."
1140184662,4414,Paul-Licameli,2023-03-17T12:39:44Z,Which makes more obvious sense as needing i18n 
1140191284,4414,Paul-Licameli,2023-03-17T12:45:07Z,Maybe lib-beats would push things into this registry and into the tables of numeric formats in the ideal reorganization — but it would not paint any more things green. 
1140203302,4414,crsib,2023-03-17T12:57:31Z,"My point is that right now we do not have snap-to format that needs the complexity of the NTSC drop frames. Snapping the time to 29.97 (or, more correctly, to 30 * 1000 / 1001) does not require the magic from the numeric converter, as we do not care about the frame number - we only want to snap to the frame boundary."
1140267333,4414,Paul-Licameli,2023-03-17T13:53:10Z,But the code to do it remains in the library for future use maybe.
1140366935,4414,crsib,2023-03-17T15:15:23Z,I have rechecked and this change is correct. The name is now set in `SelectionBar::SetSelectionMode`. This method is called from `SelectionBar::Populate()` so the name is always set and correct.
1140396408,4414,crsib,2023-03-17T15:41:09Z,"Yeah, I think I will leave it for now."
1140412848,4414,crsib,2023-03-17T15:54:39Z,"I have rechecked, changing the language re creates all the toolbars from scratch. I thought that time toolbar was broken as I had untranslated Beats&Bars mode set"
1140598603,4414,Paul-Licameli,2023-03-17T18:52:28Z,"One thing I overlooked in the first round of review.  This `RedrawProject` call was lost.  My branch to break dependencies on toolbars, which conflicts so much with this one, adds a subscription to ProjectWindow so it redraws itself.

Meanwhile: your rebased branch is failing some builds"
1140652807,4414,crsib,2023-03-17T19:52:45Z,"> Meanwhile: your rebased branch is failing some builds

It fails sanity test with the timeout, I will check why. 

"
1140658314,4414,crsib,2023-03-17T20:00:31Z,"> This RedrawProject call was lost

Is it really need though? I don't know. Fix is quite easy, provided that RedrawProject defers the action."
1140977365,4414,Paul-Licameli,2023-03-18T09:30:07Z,"As I said, now I have done that rebase to clean this up.
"
1140978102,4414,Paul-Licameli,2023-03-18T09:36:25Z,I'll do that cleanup in another branch
1140979535,4414,Paul-Licameli,2023-03-18T09:49:12Z,"You removed the repetition of the path literal, which is good.

But you introduced an `extern` declaration, which I don't like.

It lets you ""cheat"" without properly declaring this setting in a header file, and including that file, so that the tool that produces the ""jungle"" graph doesn't reflect the complete, real dependencies.

Please declare the setting in SelectionBar.h.

That does not add dependency on SelectionBar -- the dependency was already there because of this extern; now it is made more obvious.

And we may not like adding dependencies on the toolbars, but from a src/menus file it is  not bad.  These files are already tops of the dependency graph -- note that they are .cpp files without corresponding .h and rely on registration to add their functionality.


"
1140979988,4414,Paul-Licameli,2023-03-18T09:54:24Z,I'm satisfied
1140980107,4414,Paul-Licameli,2023-03-18T09:55:21Z,"It's not ""horrible""
"
1140987831,4414,Paul-Licameli,2023-03-18T10:05:50Z,"Thanks for the explanation.

If the boolean means nothing more or less than a success indicator -- then I might instead just use `using SnapResult = std::optional<double>;`
"
1140988422,4414,Paul-Licameli,2023-03-18T10:10:44Z,"But too I think the functions might be scattered to other files in a later library reorganization (which I don't demand with this PR).  The snapping routines special to beats and also the numeric format special to beats would live together and push their special case stuff into registries.
"
1140988601,4414,Paul-Licameli,2023-03-18T10:12:38Z,"On the other hand I see now, that you reuse transparency explicitly for another purpose.  I was only thinking of how Registry.cpp assigns meaning to transparency in the merging procedure."
1140988838,4414,Paul-Licameli,2023-03-18T10:14:51Z,Maybe we start `lib-video` just to register this with a big `WIP` in CMakeLists.txt :-)
1140989378,4414,Paul-Licameli,2023-03-18T10:18:45Z,"What I described is now part of my own PR, to follow this one
"
1140990446,4414,Paul-Licameli,2023-03-18T10:27:36Z,"I wonder sometimes though, should XO(""%d"") be a thing? https://en.wikipedia.org/wiki/Devanagari_numerals

We still use sexagesimal time units after all https://en.wikipedia.org/wiki/Cuneiform_Numbers_and_Punctuation
"
1140990683,4414,crsib,2023-03-18T10:30:25Z,Ideally any formatting function should handle the locale. But it seems to be not the case for wxString::Format
1140991031,4414,Paul-Licameli,2023-03-18T10:33:26Z,"I had forgot whether you needed special work with each toolbar to get translation update, besides setting the label.  Seeing `UpdatePrefs` reminded me that language is one preference.
"
1146257989,4414,Paul-Licameli,2023-03-23T14:08:32Z,"Build failure on macOS -- use operator * instead
"
1146273798,4414,crsib,2023-03-23T14:19:12Z,"Yeah, I found it out already...
"
1146414914,4414,Paul-Licameli,2023-03-23T15:56:09Z,unused
1146415365,4414,Paul-Licameli,2023-03-23T15:56:29Z,unused
1146420544,4414,Paul-Licameli,2023-03-23T16:00:07Z,"Answering that question, I have suggested that a lib-time-signature, or lib-beats or whatever you name it, would make sense as a place in which to collect all special behavior related to beats and bars, and put registrations that push more behavior into the other libraries.

It was true before this commit that all `UndoStateExtension` subclasses and their factories were in green libraries, not in Audacity.  Given lib-beats, that could remain so."
1146422856,4414,Paul-Licameli,2023-03-23T16:01:48Z,They could be `const`
1146425341,4414,Paul-Licameli,2023-03-23T16:03:19Z,"Commit comment disagrees with the new name you really chose
"
1146435462,4414,Paul-Licameli,2023-03-23T16:10:16Z,"The changes for focused digit are good ones I hoped to see, after I reviewed the existing NumericConverter code.

But now this function requires the precondition `mDigits.size() > 0`.

Where is the proof of that?  "
1146436253,4414,Paul-Licameli,2023-03-23T16:10:52Z,"As noted, insufficiently safe, unless you test first for no digits and exit with no effect.
"
1146438051,4414,crsib,2023-03-23T16:12:15Z,Great catch! But what should be index of the focused digit in this case? I think `-1` is as good value as any. 
1146441509,4414,Paul-Licameli,2023-03-23T16:14:53Z,"Visibility should be unnecessary if there are no non-inline member functions
"
1146443278,4414,crsib,2023-03-23T16:16:14Z,`lib-time-frequency-selection` is a library that depends on `lib-project-history`. So should `ProjectTimeSignature` go there? Should beats go there as well?
1146443618,4414,Paul-Licameli,2023-03-23T16:16:31Z,"I see this cast, and think, better that `i`, `j`, `pos` and the members of the structure be `size_t` -- unless -1 for invalid values is used somewhere?
"
1146449663,4414,crsib,2023-03-23T16:20:56Z,"I kinda kept that cast intact (it was implicit previously). 

It is weird that old code (and the one moved to a new class) haven't really used the `DigitInfo::field`. Instead it tried to match the `pos` of the digits to get the corresponding field. "
1146473549,4414,Paul-Licameli,2023-03-23T16:39:22Z,"I would even make the structure members `const size_t`

Then also, `NumericField::digits` should be `size_t`
"
1146483111,4414,Paul-Licameli,2023-03-23T16:47:05Z,"This commit is good.

I would now make it better:

`NumericConverter::mFields` should be private, and a protected member function gives `NumericTextCtrl` only the `const` access to the array that it requires.
"
1146488616,4414,Paul-Licameli,2023-03-23T16:51:34Z,This naming convention for ctor arguments isn't necessary.  They can just be the same as the members.
1146506146,4414,Paul-Licameli,2023-03-23T17:05:48Z,"Seeing `-1` made me pause in my review to reason about all uses of `pos` to be sure there was no missing bounds checks.

I would instead write `size_t pos{ wxString::npos };` but seeing that, still I would do the same check.

Really the safety condition is this:  when `ParseFormatString` builds the vector of `NumericField`, it is always a legal subscript in `mValueTemplate`, which will also have the same length as `mValueString` when that is built.

That should be commented somewhere

"
1146508308,4414,crsib,2023-03-23T17:07:38Z,`mValueTemplate` was never read. It haven't survived :-)
1146511348,4414,crsib,2023-03-23T17:09:26Z,"In any case - it was left uninitialized previously, so it really had some random value. I need to revisit the code, probably we can remove the `pos` as well"
1146515550,4414,Paul-Licameli,2023-03-23T17:11:19Z,"I notice that the `if` and the `else` branch below choose the same format string always.  Zero padding was made always true, somewhere else in this file, some long time ago.  But maybe this function should not be aware of that and still prepared to eliminate the zero padding.
"
1146518854,4414,Paul-Licameli,2023-03-23T17:13:16Z,"I see the enum, I think it's closed-endedness, and I would rather see registration remove the enum completely.

Maybe I'm about to see that.  No spoilers, please!
"
1146519179,4414,crsib,2023-03-23T17:13:32Z,In later code you will find the checks (but somewhat too late). This can be fixed easily
1146520942,4414,crsib,2023-03-23T17:14:59Z,That function is wrong in any case. I think I should rewrite it. Passing `11` as the range doesn't quite work :-)
1146522706,4414,crsib,2023-03-23T17:16:19Z,This on stays. It can be quite easily removed though.  
1146530366,4414,Paul-Licameli,2023-03-23T17:21:12Z,"The commit introducing this enum class fails to build.  It does not yet remove the old enumeration.  One line of the ctor of `NumericConverter` should change to

`   if (type == NumericConverterType::TIME )`

"
1146567685,4414,Paul-Licameli,2023-03-23T17:42:18Z,"`fields` is not defined.

I would write it
```
@post result: `GetFields().size() == result.fieldValueStrings.size()`
```

So that the formalized postcondition could be cut and pasted and compiled as the
last line before returninng from a definition of `ValueToString`, assuming a local variable called `result`

"
1146568563,4414,Paul-Licameli,2023-03-23T17:43:08Z,"And so that the post could also be written just after the point of call, supplying the missing `this` and changed variable names appropriately, and using only public member functions of the class"
1146605477,4414,Paul-Licameli,2023-03-23T18:01:36Z,"I would make these three `const` (returning the value of scalingFactor from `ParseFormatString`)
"
1146606579,4414,Paul-Licameli,2023-03-23T18:01:55Z,"`mutable` is unhappy but then Ntsc is just a weird case
"
1146632977,4414,Paul-Licameli,2023-03-23T18:14:56Z,"Why was this new line needed?
"
1146703074,4414,Paul-Licameli,2023-03-23T19:10:08Z,Assigned but not yet used at the commit that introduces it.
1146704668,4414,Paul-Licameli,2023-03-23T19:11:51Z,"simplify with `clamp`
"
1146975498,4414,Paul-Licameli,2023-03-23T23:32:37Z,The second `move` is a little strange
1146976689,4414,Paul-Licameli,2023-03-23T23:35:05Z,"This does nothing, but I haven't seen whether later commits add to it"
1146983044,4414,Paul-Licameli,2023-03-23T23:49:11Z,"spelling
"
1146983991,4414,Paul-Licameli,2023-03-23T23:51:29Z,"That looks like a dangerous by-reference capture, but it isn't so long as the tables remain static... worth a commen
"
1146985093,4414,Paul-Licameli,2023-03-23T23:54:04Z,"The three ""begin"" hints can't all be satisfied -- but Registry will sort by the internal identifiers for determinacy.

But I think the ordering of this registry really doesn't matter for anything the user sees.
"
1146986792,4414,Paul-Licameli,2023-03-23T23:57:56Z,"The commit that deletes this finally repairs the build of the commit sequence (except for the porblem building tests on mac)
"
1146987295,4414,Paul-Licameli,2023-03-23T23:59:11Z,"You know ""iff"" is a mathematician's shorthand for ""if and only if?""  When you see that word, it isn't a spelling mistake!
"
1146987591,4414,Paul-Licameli,2023-03-23T23:59:48Z,"But you can also write ""whether"" as I do sometimes, to be more precise than ""if""
"
1147306902,4414,crsib,2023-03-24T09:21:04Z,"Hmm, I thought tests on mac are fixed, at least CI passes..."
1147308366,4414,crsib,2023-03-24T09:22:21Z,"In the previous version, I had crashes without `OrderingPreferenceInitializer`, if I remember correctly.  "
1147330274,4414,Paul-Licameli,2023-03-24T09:42:14Z,"I'm still marching up the commit sequence to c9f0e36d59
"
1147412088,4414,Paul-Licameli,2023-03-24T10:47:49Z,"Not obvious, but -- this introduces the change to `Adjust` that you mentioned in meeting, to fix a bug.  Clamping the stepped value to bounds, and scaling, were done in the wrong sequence.

Please mention this subtletly in a commit comment.

You must have observed the bad interaction of scaling and min and max while trying to make things work for beats.  Was this also a bug in the spectral selection toolbar?

In fact, maybe it used to be, but see commits 24c2c6e, 0dd3aef where the setting of minimum and maximum were disabled.


"
1147414226,4414,crsib,2023-03-24T10:49:44Z,This came solely from the code observation
1147432921,4414,Paul-Licameli,2023-03-24T11:08:12Z,"The template argument is not for CRTP.  It's to specify the type of argument supplied to Computed registry items, which you don't need in this registry.

So just use empty angle brackets to default the argument: `<>`"
1147437269,4414,crsib,2023-03-24T11:13:10Z,"This won't link due to the symbols duplication. This is the reason the Snap registry uses some type as well, but you have missed it probably because it is called Visitor as well. The `template< typename VisitorType = ComputedItem::DefaultVisitor ` is really confusing, it took me a lot of time to figure out that VisitorType is not related to the Visitor, rather it is a factory.

 I can use some random tag type here, if you think this would improve the code. 

TBH, I think Registries need quite a lot of work to be done. "
1147437597,4414,Paul-Licameli,2023-03-24T11:13:25Z,"Seeing you write things like this again, to define another registry, I'm thinking I didn't do enough with the template magic to make the definition of new registry types easier.

I have ideas.  So, wait for it in 3.4...
"
1147438486,4414,Paul-Licameli,2023-03-24T11:14:14Z,"More shortcomings in the registry system, if you must use `BaseItem` rather than a more specific type as your template parameter.  I must think about that.
"
1147438647,4414,crsib,2023-03-24T11:14:24Z,"Registries should be simplified, not made more complex. "
1147440785,4414,Paul-Licameli,2023-03-24T11:16:15Z,"A new registry -- and yet, there is still a closed-ended enum class as an argument, which means, the purpose of a registration system still isn't realized.

Ideally instead of an enum value, there would be a dynamically assigned small integer value (suitably wrapped perhaps in some other new type) passed to the registrator.
"
1147444756,4414,Paul-Licameli,2023-03-24T11:20:06Z,"This is the stuff that the factory type below needs: the parameters of a formatter that are not known at compile time.

And I see beat and bar specific stuff here, and I think again that this is a failure of open endedness.  There should instead be some type erasure.

Maybe the argument of the factory should just be `void*` after all?  Or, `std::any` so that there could be some dynamic type checking by the function, that the expected sort of data are given to it.

"
1147451295,4414,Paul-Licameli,2023-03-24T11:26:09Z,There is an assumption that groups don't nest.
1147456471,4414,crsib,2023-03-24T11:31:04Z,"> `std::any`

Please consider it to be NO written in the largest font possible. `std::any` does not helps open endianness in any way. How would the NumericConverter knows what is expected by the converter? 

I have not yet seen a place where `any` is an indication of anything but bad design in C++. `void*` can be justified in C due to lack of closures, but not in C++.

This specific place is even worse than EffectSetting: there is no 1-1 correspondence between the user (NumericFormatter) and the implementation (formatter), so such architecture would become unusable. 

I can propose passing a reference to AudacityProject instead, if you are ok with this dependency. This would be a simple and easily extensible solution."
1147457198,4414,crsib,2023-03-24T11:31:44Z,There is indeed. BeginGroup assumes it as well. 
1147459035,4414,crsib,2023-03-24T11:33:02Z,There could be a string based identifier. We need to be able to set the type in the controls. 
1147475446,4414,Paul-Licameli,2023-03-24T11:46:02Z,"The ""hack"" that the commit comment mentions is, I now see, the `GetFraction()` function.  Please mention that specifically in the commit comment.
"
1147480107,4414,Paul-Licameli,2023-03-24T11:50:29Z,"I also notice now that this big commit in 2021 171d8cf added the special hack of '>' in the mini-language, but the long comment explaining the syntax of the language wasn't update for it.  And there is a confusing long i18n comment repeated in many places.

I haven't thought whether there was a better way to localize the decimal point.  Have you?
"
1147482028,4414,crsib,2023-03-24T11:52:11Z,We need to use system one. However this is a problem for future us :-)
1147485500,4414,Paul-Licameli,2023-03-24T11:55:21Z,"There would ideally be a nicer way to express this more in the style of the menu definitions, just using a variadic constructor expression that includes all the details of all the formats.  But never mind that for now."
1147506327,4414,crsib,2023-03-24T12:15:31Z,"Actually, I think that passing AudacityProject would be an only option when we implement the ability to have a different tempo and signature across the project :-)"
1147518277,4414,Paul-Licameli,2023-03-24T12:29:08Z,"Ideally this could use Observer, but that change would be a lot of work, and the places using the message will not be in green libraries soon if ever."
1147520331,4414,Paul-Licameli,2023-03-24T12:31:13Z,"The integer information is no longer set.  So I made a careful check of all old uses of these events to be sure the integer value is never retrieved from the event.

But there IS one such place still!  In `SpectralSelectionBar::OnUpdate`

But then it's only this inialization `int index = evt.GetInt();` of a variable that is never used, so delete that please

"
1147520992,4414,Paul-Licameli,2023-03-24T12:31:53Z,"If there were an Observer message with only the necessary information, I would not have needed to check all that.  But you would have written much more stuff.
"
1147537177,4414,Paul-Licameli,2023-03-24T12:48:42Z,"Oh no -- now I think you should do all the work of using Observer, after all.

Whereas `TT_SetAudioTimeFormat` received a `NumericFormatSymbol` before, now instead it gets `NumericFormatSymbol` constructed from the internal identifier only, possibly losing translatable string information.

In fact, in the tables now, all the NumericFormatSymbols are like `{ XO(""seconds"") }`,
that is using the constructor `ComponentInterfaceSymbol( const TranslatableString &msgid )`, so none will really lose information.

Yet, it doesn't work now with the correct, future-proof generality.
"
1147539755,4414,Paul-Licameli,2023-03-24T12:51:29Z,"Similar remarks about the calls to `SSBL_SetFrequencySelectionFormatName`, `SSBL_SetBandwidthSelectionFormatName`"
1147541080,4414,Paul-Licameli,2023-03-24T12:52:50Z,"And yet again -- I do have that other pending branch to clean up all that stuff, eliminating those bogus listener classes.

Maybe it would be less work for us all if I simply pushed that bit of work onto your brnach!  That would avoid the problem.

"
1147552464,4414,crsib,2023-03-24T13:03:05Z,"I was under impression that the match is done by `Internal`. I don't really understand what could be the reason behind the locale specific matching for identifiers.

If this is the case - saving to the configuration was broken long before this PR."
1147553405,4414,Paul-Licameli,2023-03-24T13:04:03Z,"This commit removes this without restoring an equivalent.  A later commit does that.  Stringly speaking it breaks a feature.  But I agree it's already too much to squash it all. 
"
1147554340,4414,crsib,2023-03-24T13:05:01Z,How can you break a feature that doesn't work?)
1147555917,4414,Paul-Licameli,2023-03-24T13:06:39Z,"The introduction of long-distance coincidence of strings literals between two source files is unfortunate.

I don't see yet how these functions could be moved into ParsedNumericConverterFormatter.cpp
"
1147558302,4414,crsib,2023-03-24T13:08:54Z,Why should they?
1147558925,4414,Paul-Licameli,2023-03-24T13:09:33Z,"No -- that's wrong.  With only one exception (DefaultSelectionFormat), they are not used within this file, but are only used by various dialogs and toolbars.  So they easily can and should be moved to that other file.

What to do about DefaultSelectionFormat to make it nicer, I don't know yet.
"
1147560673,4414,crsib,2023-03-24T13:11:14Z,"> So they easily can and should be moved to that other file

I do agree with this. I've just tried to keep this review 1% less long and boring"
1147565296,4414,Paul-Licameli,2023-03-24T13:15:08Z,"I think that since ""hh:mm:ss + milliseconds"" is a string with special significance in NumericConverter as the default -- then, ParsedNumericConverterFormatter.cpp should call the function that returns that string where it initializes the table, instead of duplicating the literal.

And the suggests that the return type of `DefaultSelectionFormat` should be `NumericFormatSymbol`.
"
1147567321,4414,crsib,2023-03-24T13:17:05Z,"Sorry, I don't understand this point at all."
1147583433,4414,crsib,2023-03-24T13:31:20Z,"As an option I can move this specific formats into the NumericConverter.cpp, so I can keep all the constants in one file. This will, however, affect the user visible ordering. I don't think that this is desirable."
1147694948,4414,Paul-Licameli,2023-03-24T14:54:42Z,"> > `std::any`
> 
> Please consider it to be NO written in the largest font possible. `std::any` does not helps open endianness in any way. How would the NumericConverter knows what is expected by the converter?
> 
> I have not yet seen a place where `any` is an indication of anything but bad design in C++. `void*` can be justified in C due to lack of closures, but not in C++.
> 
> This specific place is even worse than EffectSetting: there is no 1-1 correspondence between the user (NumericFormatter) and the implementation (formatter), so such architecture would become unusable.
> 
> I can propose passing a reference to AudacityProject instead, if you are ok with this dependency. This would be a simple and easily extensible solution.

I do not understand or agree with your uncompromising opposition to all uses of `any`.

However my review is not complete enough for me to know whether even I think it is right.  I have not yet examined how these configuration things are built and used.
"
1147697008,4414,Paul-Licameli,2023-03-24T14:56:21Z,"AudacityProject is a sort of all-purpose ""context"" oftentimes, it's true
"
1147859880,4414,Paul-Licameli,2023-03-24T17:11:30Z,"> > So they easily can and should be moved to that other file
> 
> I do agree with this. I've just tried to keep this review 1% less long and boring

You do -- good, please do the small cut and paste.  Seeing well organized code pleases me rather than bores me.

For the same reason we like `BoolSetting` and similar for eliminating repetition of a string literal in favor of just one named object -- so this would be good.
"
1147861044,4414,Paul-Licameli,2023-03-24T17:12:43Z,"> As an option I can move this specific formats into the NumericConverter.cpp, so I can keep all the constants in one file. This will, however, affect the user visible ordering. I don't think that this is desirable.

I would not like that.

Really I think time and frequency formats would be nicer separated into their own files, but let's not do that yet.
"
1147867445,4414,crsib,2023-03-24T17:19:32Z,"> For the same reason we like BoolSetting

Introducing new (bad) unintended dependencies by doing that, as we saw in this PR already. That specific case should be solved differently though, we should instead have listeners for the preferences reset.  

TBH I'm quite confused by how you don't like enums, but instead replacing them with constants or global objects :-)
"
1147872072,4414,crsib,2023-03-24T17:23:52Z,"Speaking of preferences objects - personally I see shared global writable preferences as a massive source of potential bugs. Using objects doesn't make it worse, but it doesn't really fix a problem either. "
1147873072,4414,Paul-Licameli,2023-03-24T17:24:48Z,"It's not saving to config that would be broken.  I just haven't followed the chain of consequences to see whether some l10n would be broken afterward in-session.

And even then it might only become broken if for any reason the tables had to change their English strings and use the two-argument constructor of the symbol to keep compatibiliy (but that is unlikely to happen).  So it would be not broken, but fragile.

But as I say, really the selection bar listener classes should be eliminated, and I have a commit already to do that which does not require all else that is in my branch.  I would like to append that commit to this branch.
"
1147875340,4414,crsib,2023-03-24T17:27:06Z,"In any case, you have not convinced me that I am wrong. 

Citing ComponentInterfaceSymbol implementation:

```
   friend inline bool operator == (
      const ComponentInterfaceSymbol &a, const ComponentInterfaceSymbol &b )
   { return a.mInternal == b.mInternal; }

   friend inline bool operator != (
      const ComponentInterfaceSymbol &a, const ComponentInterfaceSymbol &b )
   { return !( a == b ); }

   //! Comparator for use in ordered containers, using internal name only
   friend inline bool operator < (
      const ComponentInterfaceSymbol &a, const ComponentInterfaceSymbol &b )
   { return a.mInternal < b.mInternal; }
```

We do store `Internal` in preferences, so I don't think that I have introduced any kind of bug here."
1147876547,4414,Paul-Licameli,2023-03-24T17:28:25Z,"Right, that too would eliminate an enum type.
"
1147878449,4414,Paul-Licameli,2023-03-24T17:29:53Z,"If you mean the usage of them should be simplified, then the added template metapoetry is the complexity than enables the simplicity of use.

Are you opposed to the effort of investing in better templates?
"
1147882026,4414,crsib,2023-03-24T17:31:43Z,So should I proceed?
1147882434,4414,Paul-Licameli,2023-03-24T17:32:08Z,"> This won't link due to the symbols duplication. This is the reason the Snap registry uses some type as well, but you have missed it probably because it is called Visitor as well. The `template< typename VisitorType = ComputedItem::DefaultVisitor ` is really confusing, it took me a lot of time to figure out that VisitorType is not related to the Visitor, rather it is a factory.
> 
> I can use some random tag type here, if you think this would improve the code.
> 
> TBH, I think Registries need quite a lot of work to be done.

Explain more some time.

I hope you recognize the good purpose they serve.  If you mean it should be easier to define new registries to serve that purpose, then I agree and I have some ideas.
"
1147883996,4414,Paul-Licameli,2023-03-24T17:33:48Z,"You found it deductively?  Well that is good too, even better."
1147897047,4414,Paul-Licameli,2023-03-24T17:48:37Z,"> > For the same reason we like BoolSetting
> 
> Introducing new (bad) unintended dependencies by doing that, as we saw in this PR already. That specific case should be solved differently though, we should instead have listeners for the preferences reset.
> 
> TBH I'm quite confused by how you don't like enums, but instead replacing them with constants or global objects :-)

I see the Settings object as revealing the need to make a link dependency explicit.  The problems of bad global state may not be solved but the naming of an object with linkage, instead of the reliance on coincident string literals, forces a more deliberate choice about where to define the global object and which place to make dependent on the other place.
"
1147899245,4414,Paul-Licameli,2023-03-24T17:51:08Z,"I dislike enums for a different reason.  It's closed-endedness.  If instead the set of possibilities may need to grow and serve very unrelated special cases, I would rather have a registry and also good dependency inversion.
"
1147900686,4414,crsib,2023-03-24T17:52:41Z,"I've started writing the comment about how I do not understand why this value was ""switched"", but understood the reason in process. I still think that it could be written differently - in the end we know the frame length is fixed, only the string representation can be different. "
1147901243,4414,crsib,2023-03-24T17:53:19Z,The real question is how it worked without this line before
1147902262,4414,crsib,2023-03-24T17:54:24Z,This was not intentional
1147908225,4414,Paul-Licameli,2023-03-24T18:01:23Z,"There is more in that class than just its equality and comparison operators.
"
1147909252,4414,crsib,2023-03-24T18:02:37Z,"For one - I don't think `InlineGroupItem` should not be parametrized with a factory which is called visitor :-) 

In the end, you can only have single `dllexport`ed subclass using the default parametrization, otherwise Audacity won't link due to the symbol conflicts between libraries. So I had to use some kind of tagging to overcome this issue. Somehow you have missed `struct SnapRegistryGroup : public Registry::InlineGroupItem<SnapRegistryVisitor>` which is wrong too, because InlineGroupItem expects a factory, not a visitor :-)"
1147912476,4414,crsib,2023-03-24T18:06:40Z,"There is. But we only use equality here and we store this value in preferences. And this value **was** stored in preferences before. So if it will break - it will break globally, not because code here relies only on Internal part.

For display purposes  NumericFormatSymbol can still be retrieved from the registry. This is how the menu is built!"
1147915205,4414,Paul-Licameli,2023-03-24T18:09:50Z,"Allow me to push the commit that removes the listener classes so I can relieve my doubts, the code gets simpler, and we can stop arguing about this point.
"
1147920512,4414,crsib,2023-03-24T18:16:17Z,"Sure, go ahead "
1147964952,4414,Paul-Licameli,2023-03-24T19:08:27Z,"> For one - I don't think `InlineGroupItem` should not be parametrized with a factory which is called visitor :-)
> 
> In the end, you can only have single `dllexport`ed subclass using the default parametrization, otherwise Audacity won't link due to the symbol conflicts between libraries. So I had to use some kind of tagging to overcome this issue. Somehow you have missed `struct SnapRegistryGroup : public Registry::InlineGroupItem<SnapRegistryVisitor>` which is wrong too, because InlineGroupItem expects a factory, not a visitor :-)

No, it is really parametrized by a Visitor type, which can also act as the context expected by the lambdas that become ComputedItems in the registry.  Read this closer:
`void AppendOne( const ComputedItem::Factory<VisitorType> &factory )`
The VisitorType is a template parameter of a ""factory"" type alias but is not itself a factory type.  It's the input to the factory.

Example from PluginMenus:
```
      Section( ""RepeatLast"",
         // Delayed evaluation:
         [](AudacityProject &project)
         {
            const auto &lastEffect = MenuManager::Get(project).mLastEffect;
            TranslatableString buildMenuLabel;
            if (!lastEffect.empty())
               buildMenuLabel = XO(""Repeat %s"")
                  .Format( EffectManager::Get().GetCommandName(lastEffect) );
            else
               buildMenuLabel = XO(""Repeat Last Effect"");

            return Command( wxT(""RepeatLastEffect""), buildMenuLabel,
               OnRepeatLastEffect,
               AudioIONotBusyFlag() | TimeSelectedFlag() |
                  WaveTracksSelectedFlag() | HasLastEffectFlag(),
               wxT(""Ctrl+R"") );
         }
      ),
```

Change the argument of the lambda to AudacityProject* (and project to *project inside) and it properly fails to compile the call to AppendOne.

The class `ToolbarMenuVisitor` (bad name, I will change it in the PR for lib-menus) implicitly converts to AudacityProject & and is also the template argument of the group items used in the menu registry.
"
1148016919,4414,crsib,2023-03-24T20:18:20Z,"I can see how ToolbarMenuVisitor is a visiting factory, this doesn't help establishing that relationship when one tries to figure out how to use the Registry :-) Nor does it help with the linking problems or writing simple registries. For both registries introduced in this PR I had to hack my way through.

I understand what you have tried to achieve and I find this solution to be very elegant, but I have a strong opinion that this should be not be done by `InlineGroupItem`.  Instead, some well documented `ComputableGroupItem` can be used (naming is my weakness, yes)."
1148037873,4414,Paul-Licameli,2023-03-24T20:49:39Z,"Some details may be revisited, but what I wanted was the convenient variadic calls to `Items` or `Section` or `Menu`, which usually accept `Command` but can sometimes just take a lambda in-line for the computed item.  The lambda must accept the correct argument type for that registry.  What that type is -- had to be given somehow as a template argument.
"
1148044451,4414,Paul-Licameli,2023-03-24T20:53:04Z,"Better comments, maybe newer C++17 template tricks for more convenience -- all of this is needed.  I need to look over Registry.* with fresh eyes after having first done it some years ago, and the pull request for registry-changes has been waiting as a draft for a long time, still needing its self review and cleanup as non-draft.

Then also I hope you will learn Registry inside and out -- read all of Registry.cpp and understand how this pull request makes some bug fixes and improvements.
"
1148346368,4414,Paul-Licameli,2023-03-25T10:34:16Z,"A stray character
"
1148375233,4414,Paul-Licameli,2023-03-25T14:01:38Z,"Repeated work when you come here from `SetCustomFormat`, but there are other paths
"
1148376419,4414,Paul-Licameli,2023-03-25T14:10:43Z,"Pedantically... this commit should be squashed with ""Use ParsedNumericFormatConverter in the NumericConverter"""
1148376627,4414,Paul-Licameli,2023-03-25T14:12:13Z,I should have noticed when I reviewed that commit.  I am sorry my review was so hasty and careless.
1148383999,4414,Paul-Licameli,2023-03-25T14:31:51Z,"Checking again to see what else I might have missed in that commit, I found nothing.
"
1148384934,4414,Paul-Licameli,2023-03-25T14:39:47Z,"wrong comment
"
1148385809,4414,Paul-Licameli,2023-03-25T14:46:44Z,"Really -- this is an unnecessary file!  When the .cpp accomplishes all its influence on program behavior by registrations, it can be headerless.  See src/menus or src/import for other examples.
"
1148386128,4414,Paul-Licameli,2023-03-25T14:49:30Z,"Give that an `i18n-hint` comment
"
1148386269,4414,Paul-Licameli,2023-03-25T14:50:28Z,"And at `XO(""Bar"")`  in SnapUtils.cpp, too
"
1148386368,4414,Paul-Licameli,2023-03-25T14:51:47Z,i18n-hint
1148386466,4414,Paul-Licameli,2023-03-25T14:52:21Z,"""one""

Where is the bug you refer to?  Can you fix it?
"
1148386672,4414,Paul-Licameli,2023-03-25T14:54:21Z,"I notice that `fracField` gets no label
"
1148387006,4414,Paul-Licameli,2023-03-25T14:56:52Z,"I notice `false` passed to the `frac` ctor argument, a little surprising, but then I also see it only influences a different override of `ValueToString` that this class doesn't use"
1148388748,4414,crsib,2023-03-25T15:09:58Z,I need it for unit tests
1148388903,4414,crsib,2023-03-25T15:11:14Z,Using log10 is a bad idea. I will rewrite that function anyway.
1148388942,4414,crsib,2023-03-25T15:11:30Z,Yes
1148389655,4414,Paul-Licameli,2023-03-25T15:17:32Z,"That leads me to think that maybe `NumericFields` should contain only the commonly needed fields, and the subclasses of `NumericConverterFormatter` privately add whatever else is special-purpose, in .cpp files and not included elsewhere.

`base` is not needed by this new class.

`range` isn't needed by this class either after `CreateDigitFormatStr` uses it to decide the format string.

`zeropad` isn't needed as a member either -- for EITHER subclasss!  It can be just an argument of the constructor of `NumericField` and `CreateDigitFormatStr `.

`pos` and `formatStr` are used by each subclass, but there is no common code in the base class that uses them, except initialization in the constructor.  So they too might be removed.

That could shrink `NumericField` to just `digits` and `label` -- which are used in the UI layeer code in NumericTextCtrl.

Then that means the public interface of lib-numeric-formats is simplified.  This structure, which is exposed to NumericTextCtrl, would have less in it needing documentation.

"
1148390245,4414,Paul-Licameli,2023-03-25T15:22:15Z,The same can be said of ParsedNumericConverterFormatter.h
1148390888,4414,Paul-Licameli,2023-03-25T15:26:49Z,indent
1148392894,4414,Paul-Licameli,2023-03-25T15:43:27Z,"Didn't this cause you divide-by-zero crashes?
"
1148393925,4414,crsib,2023-03-25T15:52:11Z,There is a check mFracPart and there are no integer divisions. 
1148395294,4414,Paul-Licameli,2023-03-25T16:02:30Z,"Should this be an `override`?  (I'm not sure..)
"
1148395371,4414,Paul-Licameli,2023-03-25T16:03:06Z,"Why not call `HandleFormatterChanged`?  (Which will do one extra thing)
"
1148396620,4414,Paul-Licameli,2023-03-25T16:13:48Z,"Revisiting the question of where this should go.

I like the idea of a `lib-beats` for other reasons, but even without that, it makes most sense to keep this registration in the file ProjectTimeSignature.cpp.

This would require you to change `lib-project-interface` to  `lib-project-history-interface` in lib-numeric-formats/CMakeLists.txt.

I don't think that is a bad dependency.  I consider lib-project and lib-project-history as low-level things (and have even thought that they might be merged).
"
1148403891,4414,Paul-Licameli,2023-03-25T17:10:09Z,"At last I have reached the commit in which `NumericConverterConfig`, introduced five commits previously, is fully used.

Forget what I said about `std::any`, yet I'm still uncomfortable with that structure and how the messages are passed.

Mostly it's analogous with how changes of project rate are communiated to the formatter -- and I have decided I dislike that too.

Figuring out the more pleasing organization looks like it will turn into another proposed commit from me insted of an explanation, because I wanted to make the change myself to see if it made sense and compile, and it became rather extensive.

"
1148405083,4414,Paul-Licameli,2023-03-25T17:19:34Z,"I'm catching up with this commit now, which did some of what I suggested to simplify `NumericField`.
"
1148408286,4414,crsib,2023-03-25T17:46:26Z,"I've planned to change that to AudacityProject reference, if you don't mind."
1148408395,4414,crsib,2023-03-25T17:47:18Z,And I plan to move beat/bar duration calculation to the ProjectTimeSignature
1148410009,4414,Paul-Licameli,2023-03-25T18:00:04Z,"Essentially this is a many-to-one mapping from identifiers of selection formats, to identifiers of their grain size, and the latter identifiers are then mapped to snap functors by another registry.

This repetition of lots of string literals that are private to ParsedNumericConverterFormatter.cpp doesn't feel good.

Let it stand for now, but now I think the registry of snap functors wants to be placed in the same library with the registry of NumericConverterItems, and that registry should implement this map with extra information in the registered items, which is then accessed from SnapUtils with a Visit.

"
1148410803,4414,crsib,2023-03-25T18:07:06Z,"This is only needed for config migration, it is not used otherwise. Please, let's not overcomplicate this. I would rather remove it and stick to default values."
1148411403,4414,Paul-Licameli,2023-03-25T18:11:25Z,No mistake here?
1148411472,4414,crsib,2023-03-25T18:11:43Z,I really want to stress that again - I don't think that snapping and numeric formatters are related. They are separate concepts and snapping must not be handled by lib-numeric-format.
1148411568,4414,crsib,2023-03-25T18:13:02Z,If you mean the changed tittle - consider it as bug fix :-)
1148415858,4414,Paul-Licameli,2023-03-25T18:48:01Z,"> I need it for unit tests

Good answer"
1148416367,4414,Paul-Licameli,2023-03-25T18:53:01Z,I disagree — I think it is reasonable that some form of information about the unit could be part of the registry of formats and accessible to the visitor.
1148417744,4414,crsib,2023-03-25T19:01:38Z,"So do I. Formatting time to string is unrelated to snapping, they must not share libraries. What happens now is just a configuration migration. It is safe (that's it - a failure has no user visible implications), it is not used anywhere in calculations. It will not be used anywhere in calculations.

If you are uncomfortable with it - the only fix is to remove it. I have very strong opinion about it. Half of this PR is about breaking the ties between snapping and time display. 

Under absolutely no condition snapping should rely on numeric format functions. What you see in this map is a simple way of converting the list of well known values from the old Audacity versions to the new one. It does not introduce any kind of dependency between libraries."
1148422279,4414,Paul-Licameli,2023-03-25T19:36:48Z,"Ok there is agreement about something.

I said “let it stand” and still think that.

There are more important structural issues.

But this change made me think that:

Some notion of “identifier of time unit” is needed

These identifiers should not be a closed-ended list all in one place and each string literal should occur only once in the source

The registry of formats includes one such identifier in each leaf, which a Visitor can see, so that repetition of that registry’s key strings is not needed

The registry of snap functions is keyed on the same

These criteria are not met yet in the PR
"
1148422948,4414,Paul-Licameli,2023-03-25T19:43:18Z,"Maybe I’m arguing that this bit of logic needs to be elevated to a higher level library.  Maybe lib-snapping holds the registry of snap functions but SnapUtils, which finds and applies the functions, goes up to lib-time-frequency-selection."
1148423600,4414,Paul-Licameli,2023-03-25T19:46:58Z,"Maybe the correction of the Setting object at startup time, migrating an old config, is the only thing to elevate to a higher library.  Then snapping and formats depend neither on the other?"
1148423844,4414,crsib,2023-03-25T19:49:22Z,"Why? What complex logic do you expect from ""finding"" snapping functions? Unlike NumericConverterType it is not set anywhere explicitly in code. "
1148429315,4414,crsib,2023-03-25T20:35:46Z,I have pushed a commit trying to clarify the intention of the `ReadSnapTo`. If you are not satisfied and still consider it to be dependency - I will remove that code. Resetting snap value to second would be just a minor inconvenience for the users. 
1148560671,4414,Paul-Licameli,2023-03-26T13:49:20Z,"> I've planned to change that to AudacityProject reference, if you don't mind.

I approve.

So no more `NumericConverterConfig`?

AudacityProject is at a low level of the dependency tree and you can think of it as the context argument for many things that need per-project state, and of course attaching more stuff non-intrusively to the project is what `ClientData` is all about.

All that was very much not true of the source code tree before 2019.  The Project depended on almost everything else becuase it had accessor functions defined in it to retrieve all those others.  This was a major reason why hundreds of source files were in a big strongly connected component of the graph.

Inventing `ClientData` was a great exercise of the Dependency Inversion Principle.  I didn't know the SOLID jargon at the time actually but I was led to the principle by experience.

"
1150445931,4414,Paul-Licameli,2023-03-28T11:29:17Z,"I'm not convinced yet that there is no path that divides by `mFracPart` when it is zero.  There is a test here, but you don't then reassign it as 1 or anything like that."
1150450287,4414,crsib,2023-03-28T11:32:10Z,"There is no integer division. There cannot be any exception. In any case, please do not continue the review now, specifically of this file. "
1150473241,4414,Paul-Licameli,2023-03-28T11:49:50Z,"> There is no integer division. There cannot be any exception. In any case, please do not continue the review now, specifically of this file.

Yes, `const auto fracLength = beatLength * mLowerTimeSignature / mFracPart;` is not an integer division because `mFracPart` is coerced to floating point.

But that is irrelevant and  my objection is still unanswered.  I do not see a guard against division by `mFracPart` when it is zero.
"
1150475185,4414,crsib,2023-03-28T11:51:37Z,"It. Is. Safe.

And again - do not review this file now."
1150482811,4414,Paul-Licameli,2023-03-28T11:56:47Z,"The comment isn't right.  ""/SelectionFormat"" is still used and still written but does not control snapping at all.

What is right is to say, older versions of Audacity did not have the ""/Snap/To"" key.  Come to this function only when that key is undefined.

I think `SnapToSetting` should be static in this file, then, so that all reads of it must go through `ReadSnapTo`.  That implies a change in `OnResetConfig` in PluginMenus.cpp
"
1150487379,4414,crsib,2023-03-28T12:00:06Z,"This comment is right. `SelectionFormat` no longer controls snapping. 

This review already contains 300 comments, which were so far converted to around 30 action point, most of which were extremely minor. This is extremely frustrating and time consuming."
1150495748,4414,Paul-Licameli,2023-03-28T12:06:38Z,"This change is good, and to make it even better, used `TaggedIdentifier`.

`using NumericConverterType = TaggedIdentifier<struct NumericConverterTypeTag>`

(The tag is an ""elaborated type"" that you don't need to define)

This makes a type distinction between this and all other `TaggedIdentifier` specializations so they won't impliciatly interconvert.

Note, Identifier.h contains several `TaggedIdentifier` specializations, but do NOT add to that list.  I don't like that list and need to move those aliases elsewhere after fixing some still remaining legacy confusions about the right levels for certain declarations.  (See also lib-components, a library with an unclear purpose.)

"
1150504124,4414,Paul-Licameli,2023-03-28T12:12:32Z,"Changing an enumeration to an identifier type opens the possibility of an open-ended scattering of the different types, yet, that does not yet happen at this commit
"
1150543430,4414,Paul-Licameli,2023-03-28T12:39:11Z,"Danger!

Define this as a static variable inside a function which returns a reference to that variable.

Otherwise, if the registered formats are later scattered to other files, then you may suffer from the problems of unspecified sequence of static inititalizations across translation units.
"
1150570330,4414,crsib,2023-03-28T12:57:22Z,The map is guaranteed to be initialized before the first use and only once. There is precisely zero need for lazy initialization here.
1150575214,4414,Paul-Licameli,2023-03-28T13:01:04Z,"Then once again, you went to the trouble to make a registry, without taking actual advantage of a registry, so what was the point?
"
1150608375,4414,crsib,2023-03-28T13:24:40Z,"Common, really? You've blocked this PR because you thought that having a format type as a string was not open ended enough. 

NumericFormatters ARE registered from different places now. I don't plan to move them to a different library  because I don't want to create `lib-beats-formats` and I don't want the potential `lib-beats` to depend on `lib-numeric-formats`, because it would be a lower level library. 

What I agree is that implementing my own registry would've saved me days of time."
1150622269,4414,Paul-Licameli,2023-03-28T13:33:53Z,"Suppose we wanted the well-known frequency and bandwidth formats to be kept separate from time formats, which might make some sense for better separation of concerns.  Then there would be some scattering of the cases of this new small registry, and then what I said about the static variable would be relevant.

This need for a static defined within a function is such a frequency occurring pattern with registrations that I had to mention it.
"
1150693108,4414,Paul-Licameli,2023-03-28T14:13:58Z,"Consider this (please, not ""blocking!"") suggestion about what would seem to me a better organization.

- `FrequencyConverterFormats_`, and what depends on it, `parsedFrequency`, move out of `ParsedNumericConverterFormatter.cpp` into some new file.
- Then `NumericConverterType_FREQUENCY`, used by `parsedFrequency`, also moves its definition into that new file and its declaration into the corresponding header.  That requires `frequencyDefault` to move too.
- Now `NumericConverterType.*` don't mention frequency cases at all.
- Do similar for bandwidths: collect all that is special to bandwidth formats in one file.
- Even the time-specific formats and registrators might be separated from `ParsedNumericFormatConverter`.  Then that file is responsible for defining and interpreting the little language, but is (almost) agnostic about special case details.  (But there are still some legacy oddities about sample rates and NTSC frames.)
- Then `NumericConverterType.*` aren't needed.
- Dependency inversion and open endedness are really achieved:  the special cases (time, frequency, bandwidth) depend on the general case, each special case concentrated into one source file.  The open-endedness of the registration system is really used to advantage to get this.

All that would seem the more natural organization of things to me, and when you first mentioned you were using registrations, I hoped that this was where it was tending.


"
1150718191,4414,Paul-Licameli,2023-03-28T14:30:49Z,"So far the only instance of a new Registrator object that is really scattered is `beatsTime`.

Whether you make a new library for time signature or not, still I think it makes sense to concentrate all that is special-case to time signature into one or a few related files, not mixed up with others.

So I think `beats` and `triplets` should move out of SnapUtils.cpp and join `beatsTime` in one file.

This does not make format conversion dependent on snapping, or the opposite.  The general purpose files for those two things are kept separate.

But there would be one higher level place that pushes related things for time signature into each of those registries.
"
1150730408,4414,Paul-Licameli,2023-03-28T14:39:18Z,"Correct, selection format did control snapping too.  Anyway I understand the explanation that emphasizes that this is only for migration."
1150735501,4414,Paul-Licameli,2023-03-28T14:42:53Z,"Registries let us ""scatter"" special cases away from certain closed-ended central listings so that instead we ""gather"" in one place the things that implement a new feature, such as time signature, or spectral selection.  The new feature can be non-intrusive in the general case code, which is ""open for extension but closed to modification."""
1150759857,4414,crsib,2023-03-28T14:59:16Z,"> So I think beats and triplets should move out of SnapUtils.cpp and join beatsTime in one file.

Absolutely not.
 
> are really achieved

There is absolutely no difference to open-endedness in where those initializations reside. They are in the same file for the sake of reducing the number of changes so your own rule is followed.






"
1150794125,4414,crsib,2023-03-28T15:22:55Z,"> Then NumericConverterType_FREQUENCY, used by parsedFrequency, also moves its definition into that new file

This will make the `NumericConverter` to be an absolute nightmare to use. It does expect a fixed type by design, there is no audacity-user choice in that. Making it an Identifier made things bad. Your IDE no longer can help you. Your compiler no longer can help you.  Scattering the possible values across the files will leave the developer without any clue about how to use `NumericConverter` or `NumericTextCtrl`. Enum are not always bad. Not everything need to be extensible. 

Speaking of software design - `NumericTextCtrl` should not be a subclass of `NumericConverter`. They are unrelated types. Considering that you chose not to make methods like ControlsToValues to be virtual - they cannot be even interchanged safely.
"
1150872628,4414,Paul-Licameli,2023-03-28T16:21:28Z,"
> Speaking of software design - `NumericTextCtrl` should not be a subclass of `NumericConverter`. They are unrelated types. Considering that you chose not to make methods like ControlsToValues to be virtual - they cannot be even interchanged safely.

No disagreement on that -- and that it still is doesn't reflect any particular wish of mine.

I think you will discover that James separated the classes first, very long ago.
"
1151666171,4414,Paul-Licameli,2023-03-29T09:40:48Z,"Edge case.

On repeat review, I realized the subscriptions are incomplete.  Snapping may also be influenced by rate, and might need to change with project rate change, if you are so closely zoomed in, you can resolve samples.

Yes, unlikely.

But then I also thought:  there might be just one subscription here to ProjectSnap.  Project snap could listen to changes of rate and time signature (and whatever else might be snapped to in future) and translate it into a single message for change of parameters relevant to snap."
1151670105,4414,Paul-Licameli,2023-03-29T09:44:01Z,"Two statements on one long line, the second, a no-op
"
1151672837,4414,crsib,2023-03-29T09:45:39Z,Wait for the commit I will push in couple hours! Or probably not xD
1151674560,4414,crsib,2023-03-29T09:47:07Z,"Nah, I think it won't be really changed by the next commit."
1151746641,4414,Paul-Licameli,2023-03-29T10:48:10Z,"Can this be a `const` member?
"
1151751703,4414,Paul-Licameli,2023-03-29T10:52:55Z,"A minor point.  These two are not made mutually exclusive and custom will quietly override the symbol in case someone give both.  But who cares.
"
1151775879,4414,Paul-Licameli,2023-03-29T11:15:54Z,"TimeToolBar and SelectionBar listen for changes and then inform their NumericTextCtrls.  This feels unsatisfactory -- the controls should do their own subscriptions.  But getting AudacityProject& into the constructors of all NumericTextCtrl everywhere is too bothersome.

I believe these toolbars (and the spectral selection bar, never mind it) are the only non-modal text controls.

There are others in TimeDialog and the label editing dialog and effects that are modal.

Edge case (I haven't tried it yet):  New project.  Set time signature, and make beat the preferred format.  Another new project.  Set a different time signature.  Switch back to first project.  Open a modal NumericTextCtrl.

Which time signature is used?

If it's the wrong one, it's because the NumericTextCtrl (and NumericConverter) are not correctly initialized for the project's time signature but instead use the last values saved in preferences.

Please just note this, don't try to fix it!
"
1151777286,4414,crsib,2023-03-29T11:17:18Z,"Yeah, just wait me to press push xD"
1151781861,4414,Paul-Licameli,2023-03-29T11:22:06Z,"I noticed today (it escaped me in an earlier round of review) that the earlier change in DevicePrefs changed project rate immediately in the event handler and ignored dialog cancellation, but this now delays the side effect on the project until the OK button.

I think that's better, and consistent with how preferences are changed.  But is there any debate?

"
1151785294,4414,crsib,2023-03-29T11:24:42Z,Why there would be any debate?
1151786008,4414,petersampsonaudacity,2023-03-29T11:25:05Z,"> Edge case (I haven't tried it yet): New project. Set time signature, and make beat the preferred format. Another new project. Set a different time signature. Switch back to first project. Open a modal NumericTextCtrl.
> 
> Which time signature is used?
> 
> If it's the wrong one,

There are many rough-edges with having multiple projects open - this is just the latest one."
1151786426,4414,Paul-Licameli,2023-03-29T11:25:29Z,"Oh damn it's outdated now
"
1151788255,4414,crsib,2023-03-29T11:27:15Z,"This is a problem with commit by commit review, yes. Especially when every commit does a step by step transformation.

I hope you understand my concerns about matryoshka PRs now."
1151789756,4414,Paul-Licameli,2023-03-29T11:28:49Z,"Is this refactoring written or just contemplated?
"
1151790590,4414,crsib,2023-03-29T11:29:39Z,Does it matter for this review?
1151818975,4414,Paul-Licameli,2023-03-29T11:53:37Z,"Will I see a commit doing that today?
"
1151819721,4414,Paul-Licameli,2023-03-29T11:54:14Z,"I don't know, there might be another opinion about UI guidelines
"
1151819964,4414,crsib,2023-03-29T11:54:23Z,It is literally the next commit on the branch
1152167972,4414,Paul-Licameli,2023-03-29T15:59:16Z,"I notice that the behavior of the false branch changed, and documentation doesn't explain it, but then too, it is never reached anyway because the second argument is always true.
"
1152188698,4414,Paul-Licameli,2023-03-29T16:16:52Z,"Thanks for this assertion which explains that crash you saw.  I wanted to know how to reproduce this.  So, it was in resetting the configuration.

I reproduced the assertion failure at the commit before this one. Then  I rebased my long waiting registry-changes draft PR branch onto it and tried again, and confirmed that the problem is fixed.

Sorry for the pain that the withholding of that fixed caused.  Let's get that branch self-reviewed, and reviewed, and merge early in 3.4 so the Registry system is more reliable.

"
1152190027,4414,Paul-Licameli,2023-03-29T16:18:06Z,"Is the change from 12 to 11 at 50d15a573ca3fc478b09ef94a9009b22c099cd76 intended?
"
1152214827,4414,crsib,2023-03-29T16:35:06Z,"Yep, bug in NumericField is fixed. In some of the next commits this will be further improved

> The bug was that for range [0, 11) NumericField calculated 1 digit because `log10(11 - 1)` was a very precise 1 :-) "
1152261300,4414,Paul-Licameli,2023-03-29T17:15:35Z,"`std::move`?
"
1152273902,4414,Paul-Licameli,2023-03-29T17:27:38Z,"Might as well do this for the spectral selection bar too, though in fact sample rate is never used when formatting frequencies or bandwidths.

"
1152284780,4414,Paul-Licameli,2023-03-29T17:37:11Z,"TimeDialog is constructed only in the function `OnSetRegion` where AudacityProject& is available, so it could easily have more complete context
"
1152288450,4414,Paul-Licameli,2023-03-29T17:40:45Z,"`TagsEditorDialog` is constructed only in `ShowEditDialog` and all calls to that have `AudacityProject&` near at hand, so likewise, they can have fuller context
"
1152291368,4414,Paul-Licameli,2023-03-29T17:43:44Z,"TimerRecordDialog already has a project reference in it, so more context
"
1152295299,4414,Paul-Licameli,2023-03-29T17:47:41Z,"You could sneak AudacityProject& in here too, with a change to the factory function at the bottom of the file -- but only when it is given non-null.

Oh well, at least one use of `EmptyContext()' is necessary then.

"
1152298374,4414,crsib,2023-03-29T17:50:52Z,TimerRecordDialog uses custom format strings and doesn't use rate at all. 
1152304461,4414,Paul-Licameli,2023-03-29T17:56:52Z,"Are these necessary before a project can be created?  It is not obvious why so, but I am guessing the construction of the things hooked onto `ClientData::Site` by the libraries that lib-numeric-formats uses, made it necessary.  Those include lib-project-rate now.
"
1152306027,4414,crsib,2023-03-29T17:58:26Z,ProjectRate has a very complex initialization. 
1152309562,4414,Paul-Licameli,2023-03-29T18:01:47Z,"That's right, and `QualitySettings::DefaultSampleRate` unusually uses a computed default value, using `AudioIOBase`

If it were just the constant 44100.0, I wonder if the test could simplify
"
1152309940,4414,crsib,2023-03-29T18:02:09Z,"MockedAudio can be omitted if two assertions are removed from the AudioIO. It is not possible to omit MockedPrefs, because ProjectRate flushes unconditionally. 

It seems that some of this class are hanging on CI for some reason. I'm trying to figure that out, it is not reproducible locally or in the Windows Sandbox."
1152330345,4414,Paul-Licameli,2023-03-29T18:22:35Z,"It returns bool now, and not all false returns are ultimately checked (via UpdateFormatter or SetCustomFormat), but maybe it doesn't matter.

What mattered was to verify sufficient null checks of `mFormatter` (yes)
"
1152342762,4414,Paul-Licameli,2023-03-29T18:35:55Z,"After deleting these lines, these preferences used only to initialize a new project or to show the values in the preference dialog.

There are written not only by the dialog, but also in ProjectTimeSignature whenever a project's time signature is changed.

Is that the right behavior?  It is not like how ProjectRate behaves, so it seems inconsistent.
"
1152362810,4414,Paul-Licameli,2023-03-29T18:56:30Z,"This commit was a tremendous effort.  I'm still not done reviewing it.  I thought the idea of it was one we would abandon as just too hard.  Did you have the insights to make it happen only yesterday?

Thanks for doing it.

I assume you are thinking that elimination of these uses of `SampleRateContext` from src/effects, in favor of `ProjectContext`, would be a good thing, but I hope you are not now attempting it and will be satisfied to leave this as a known issue to fix in future.

As you know I have pending draft PRs for `EffectContext`, to make the Effect objects even more stateless.

I moved the project rate into context, and when I rebase that work onto this, I will try to put formatter context into effect context too.

"
1152372288,4414,crsib,2023-03-29T19:06:28Z,"I'm not sure what dialog you are talking about. I do agree that what is done is not quite ideal.

Do we need this Setting at all? Do we want to have preferences for the default values? I don't really know, but I don't think it matters a lot now.

Reusing the last project rate for new projects is as good approach as the other ones.
"
1152380439,4414,Paul-Licameli,2023-03-29T19:15:32Z,"Aha, I was misled by these remaining, unnecessary lines in GUIPrefs.cpp, when I looked for all uses of the settings:
```
   BeatsPerMinute.Invalidate();
   UpperTimeSignature.Invalidate();
   LowerTimeSignature.Invalidate();
```

So there is in fact no longer anything in the dialog then to make them available, unlike for the preferred project rate.
"
1152381754,4414,Paul-Licameli,2023-03-29T19:16:55Z,"Can also remove:
```
   ChoiceSetting LowerTimeSigSettings{ LowerTimeSignature,
      { ByColumns, mLTSChoices, mLTSCodes },
      mDefaultLTSIndex
   };
```"
1152400089,4414,Paul-Licameli,2023-03-29T19:36:53Z,"don't need that assignment
"
1152406706,4414,Paul-Licameli,2023-03-29T19:44:09Z,"Besides `mFormat` these can be const, and that might help understanding
"
1152418385,4414,Paul-Licameli,2023-03-29T19:56:37Z,unused function
1152425106,4414,Paul-Licameli,2023-03-29T20:03:01Z,Should it be deleted or should the defensive checks of tempo and time signature values be put back into `UpdateFormat`?
1152426222,4414,crsib,2023-03-29T20:04:17Z,"The check is different now, considering that Formatter listens to the changes of the ProjectTimeSignature"
1152426327,4414,crsib,2023-03-29T20:04:24Z,I will remove it
1152445495,4414,Paul-Licameli,2023-03-29T20:26:29Z,"members might be const
"
1152455145,4414,Paul-Licameli,2023-03-29T20:35:10Z,Should the condition be `hasFracPart`?
1152456077,4414,crsib,2023-03-29T20:36:00Z,"Great catch, thank you!"
1152470936,4414,Paul-Licameli,2023-03-29T20:50:06Z,"This function checks that the width allocated to the field is at least the minimum number of digits, and otherwise just sufficient to show the given, maximum, 1-based value.

I would comment that.
"
1152544292,4414,Paul-Licameli,2023-03-29T22:22:44Z,Still needs update
1152545770,4414,Paul-Licameli,2023-03-29T22:25:08Z,I still agree it ought to be easier to write and it’s on me to improve Registry.h so you can
1152546675,4414,Paul-Licameli,2023-03-29T22:26:34Z,It should look more like a menu definition — which uses things not all in Registry.h.  There are template patterns there that could become more general utilities.
1152550986,4414,Paul-Licameli,2023-03-29T22:32:35Z,Please do this 
1152555991,4414,Paul-Licameli,2023-03-29T22:40:56Z,“functionIdentifier”
1152560678,4414,Paul-Licameli,2023-03-29T22:48:36Z,Please stay tuned for these improvements!
1152561807,4414,Paul-Licameli,2023-03-29T22:50:37Z,I hope this comment proved to be a good stimulus
1152562405,4414,Paul-Licameli,2023-03-29T22:51:48Z,The long comment all out the mini language might still be updated 
1152565165,4414,Paul-Licameli,2023-03-29T22:56:37Z,Still…
1152569736,4414,Paul-Licameli,2023-03-29T23:00:49Z,"Still, wrong comment "
1152578738,4414,Paul-Licameli,2023-03-29T23:13:36Z,This suggestion stands
1152581286,4414,Paul-Licameli,2023-03-29T23:18:38Z,@petersampsonaudacity have You tried this edge case? The latest commit as of this comment may include fixes for that 
1152582528,4414,Paul-Licameli,2023-03-29T23:21:17Z,"There was not, in fact, a refactoring of AudioIO, which I feared would add even more burden to this long review.

Not to imply that there are not still many virtuous refactorings to be done there some day."
1152827812,4414,Paul-Licameli,2023-03-30T07:13:31Z,It’s only AudioIOBase of lib-audio-devices that is the actual dependency?
1153100185,4414,crsib,2023-03-30T11:10:18Z,I think this is a missing feature of the Setting classes. They should reset when the configuration resets. The need to manually reset preferences wrapped in Setting violates Open/Closed - every time you add such preference you end up updating PluginMenus. Ideally `CachingSettingBase` should listen to reset preferences events and call `Invalidate`
1153110975,4414,Paul-Licameli,2023-03-30T11:21:00Z,"I have formed a different opinion:  I blame how ShuttleGui presently handles Settings objects.  It bypasses them and directly uses gPrefs->Write() on the path.  That happens in ShuttlePrefs.cpp.

Instead, in all places where the Tie... functions are called with Settings object, these should be rewritten always as named Settings objects, cleaning up many preference paths that are not yet Settings, and passed as non-const references.  Then, rewrite ShuttleGui to use the interface of Settings only; and then Invalidate() will become unnecessary.

The waiting work to do this cleanup is already in my OTHER monster branch attempting a revised ShuttleGui and would be the first stage of that ambitious project.

"
1153118323,4414,Paul-Licameli,2023-03-30T11:28:25Z,"Right, the huge commit did not touch ProjectSelectionManager.

So the edge case could be fixed with one more subscription, to ProjectRate, there.
"
1153122991,4414,crsib,2023-03-30T11:32:12Z,"I don't  think we are talking about the same thing.

I am talking about `ResetPreferences` not actually resetting any of the `CachingSettingBase`, I don't see how changing ShuttleGui will help to solve this problem. For this reason `OnResetConfig(const CommandContext &context)` growth every time new `CachingSettingBase` setting is created (if one cares about resetting of this value). BTW this is an example, where everything is scattered between translation units, but Open/Closed is violated. 

On top of that, it creates inconsistent behavior: if specific `CachingSettingBase` is not manually added to `OnResetConfig` there is a different state between gPrefs and `CachingSettingBase`. If that setting is not modified, it will be reset on the next launch, so it won't be kept.

At very list we need a global message that preferences were reset.
"
1153146471,4414,Paul-Licameli,2023-03-30T11:53:33Z,"I see it now, and agree.

I think Invalidate() should be made unnecessary.  I did not remember this other necessary part of that work.

Generally, naked `gPrefs` must be discouraged in new code and fixed in a big cleanup.

Open/Closed, correctly done, allows things to scatter.  I never claimed that conversely, if things are scattered, therefore Open/Closed is realized.

In fact I never did claim Settings objects in particular as an example of application of Open/Closed as I understand it.  But I want them for the other reason that magic literals (here not numbers but string literals) should be avoided.
"
1153149867,4414,Paul-Licameli,2023-03-30T11:56:48Z,"What bugs can be demonstrated?  In fact this should not be difficult to fix now.  Make every Settings object an observer of a singleton Publisher that fires after `gPrefs->DeleteAll().`
"
1153156625,4414,crsib,2023-03-30T12:03:26Z,"> In fact this should not be difficult to fix now

Not difficult,  but not for now. I expect extensive testing. 

> What bugs can be demonstrated?

1.  Remove the line we are discussing
2.  Change the selection mode
3. Reset the configs using menu
4. Observe selection mode has not changed
5. Relaunch Audacity
6. Observe selection mode changed to deafult.

I expect that there are other similar problems, or problems with the stickiness which are not so easy to observe. "
1153340810,4414,Paul-Licameli,2023-03-30T14:21:05Z,"""note"""
1153350909,4414,Paul-Licameli,2023-03-30T14:27:52Z,"Good, but there are still a few mistaken ""i18-hint"" comments in SnapUtils.cpp and UpdateNoticeDialog.cpp
"
1153353043,4414,crsib,2023-03-30T14:29:19Z,"Well, that is weird, grepping last time gave me no results. I have 6 now :-(

Will fix ASAP"
1153453479,4414,Paul-Licameli,2023-03-30T15:41:07Z,"Are we really making that string visible to the end user?
"
1153464466,4414,crsib,2023-03-30T15:49:50Z,"You mean Beta? Yes, this is by design "
1153582365,4414,Paul-Licameli,2023-03-30T17:37:19Z,"You put this in the red library, not src/widgets.  Okay."
1153591319,4414,Paul-Licameli,2023-03-30T17:45:59Z,"I might have used a chain-calling Options class for “named parameter idiom” for the ValueTypes and the bool, so the call sites might be easier."
1153631387,4414,Paul-Licameli,2023-03-30T18:23:57Z,"Hey, I want an initializer too! 😢"
1153632058,4414,Paul-Licameli,2023-03-30T18:24:25Z,Spelling
1153633249,4414,Paul-Licameli,2023-03-30T18:25:15Z,Spelling — and please don’t have an infarction 
1153640242,4414,Paul-Licameli,2023-03-30T18:31:17Z,static_cast?
1153653455,4414,Paul-Licameli,2023-03-30T18:42:37Z,"Trying to run it on Mac, I got strange looking results for the lts —  but my environment was not clean.  I deleted Audacity.cfg and tried again, and saw 4 not blank, and the down arrow of the combo looked more normal.  But I see rounded corners and slightly different height mismatching the tempo and Uts boxes which are square and positioned a bit higher."
1153674197,4414,crsib,2023-03-30T18:58:24Z,"Well, this is not a c-cast and this form is much shorter. I don't have any hard feelings either"
1153674757,4414,crsib,2023-03-30T18:58:53Z,It is initialized in constructor 
1153676625,4414,crsib,2023-03-30T19:00:23Z,"I will check that, thank you. This constant inconsistency is a primary reason for the migration to a different UI toolkit"
1153689129,4414,Paul-Licameli,2023-03-30T19:12:12Z,Have you seen valnum.h?  Our own adapted versions of these classes for reasons I don’t know.
1153693327,4414,Paul-Licameli,2023-03-30T19:17:10Z,I don’t understand this asymmetry between spin up and down
1153706325,4414,Paul-Licameli,2023-03-30T19:32:42Z,I see that now
1153722866,4414,crsib,2023-03-30T19:51:05Z,"Looks to be a copy from the wx source tree. I am confused.

The code comes from 2013 with a message 

``` 
Backported wxWidgets-3.0rc1 number validators

The are pretty darn slick.  There's an integer one and a floating point 
one.  They support automatic range limiting (ex., you can't even type a 
number outside of the range), proper number formats (ex., you can't 
enter a decimal point in an integer field), you can't enter bogus 
numbers like ""0.3-.2"", thousands separators are supported, decimal 
precision may be specified and proper number formatting for string 
values (or automatic conversion to int, double, float, etc.).
```

I think they match wx validators exactly"
1153724570,4414,crsib,2023-03-30T19:53:11Z,"I forgot to delete that line... It makes no harm, but it is not really needed anyway."
1153735536,4414,crsib,2023-03-30T20:05:22Z,Fun fact - wxComboCtr and wxComboBox look disturbingly differently on macOS.
1153821587,4414,crsib,2023-03-30T21:50:45Z,"I've tried to do wxComboCtrl, but it is not focusable in read-only mode. So I have just adjusted the height to make it look a tiny bit better on macOS"
1153862388,4414,Paul-Licameli,2023-03-30T22:49:51Z,Was it at that point a future version of wxWidgets?
774289430,2295,Paul-Licameli,2021-12-23T03:06:11Z,"I'm skipping review of the three module* files of course, assuming they are cut-and-pasted from third party code.
"
774301814,2295,Paul-Licameli,2021-12-23T03:56:53Z,"Unnecessary include
"
774306264,2295,Paul-Licameli,2021-12-23T04:15:48Z,"Let's comment that this line is the (sole?) entry into platform-specific code in one of three conditionally compiled files.
"
774307778,2295,Paul-Licameli,2021-12-23T04:22:15Z,"""It reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable.""

https://en.cppreference.com/w/cpp/error/logic_error

Maybe that doesn't really describe what happens here, maybe system_error is more like it, but this is not important. I see all of these standard exceptions do get caught.

If there is need to propagate an error beyond this module, better that a subclass of AudacityException be used for that.
"
774308803,2295,Paul-Licameli,2021-12-23T04:26:35Z,"spelling
"
774495020,2295,Paul-Licameli,2021-12-23T11:04:48Z,"The same block of code except for the string literal.  I would make a lambda to avoid the duplication.
"
774501770,2295,Paul-Licameli,2021-12-23T11:17:35Z,"There is an include dependency cycle between VST3Effect.h and VST3EffectsModule.h.  A cycle of just two files doesn't concern me much, but it would be nice to figure out the extra effort to break the cycle.  I think the module depends one-way on the effect, becuase it must be a factory of effects.
"
780837786,2295,Paul-Licameli,2022-01-09T22:07:59Z,"Should there be a destructor too that uses the FUNKNOWN_DTOR macro for some debug checking?
"
780841541,2295,Paul-Licameli,2022-01-09T22:45:12Z,"I am pleased to see that the new files in internal/ have no dependency cycles.  I can study them in a bottom-up order to understand them.

Please write a little more commentary about the purposes of the classes.
"
780841713,2295,Paul-Licameli,2022-01-09T22:46:41Z,"Start the comment with `//!` and Doxygen will extract it as the brief description of the class that follows.

You can write a long comment for detail after the brief comment if you enclose it in
```
/*!
...
*/
```"
780842530,2295,Paul-Licameli,2022-01-09T22:54:28Z,"This function never assigns `index`.  But does the caller expect that you do?
"
780843534,2295,Paul-Licameli,2022-01-09T23:03:38Z,"The deleter in the .cpp file is always the same lambda, with an empty capture, so you could declare a zero-sized deleter class here with an `operator ()`, and define it in the .cpp file, and make this unique_ptr just one pointer wide.
"
780843938,2295,Paul-Licameli,2022-01-09T23:08:01Z,"I think there is an incomplete clause in that comment
"
780844294,2295,Paul-Licameli,2022-01-09T23:11:38Z,"This return path does not assign `index`.  Is that ok?
"
780844525,2295,Paul-Licameli,2022-01-09T23:13:59Z,"Incorrect `@file`
"
780844708,2295,Paul-Licameli,2022-01-09T23:15:25Z,"You mean ""in real life"" ?
"
780845810,2295,Paul-Licameli,2022-01-09T23:26:14Z,"""Try to grab"""
780854633,2295,Paul-Licameli,2022-01-10T00:49:13Z,"I think I missed some interesting discussions during my week off.

What's the proof of correctness of this algorithm?

1. Tthere are two `ParameterChanges` objects, and at all times each is held in exactly one of five places (editor, processor, first, second, or pending) and each place holds at most one.
2. Only the editor thread ever makes pending non-null.
3. Only the editor thread ever makes second null.

Every exchange satisfies those conditions; from that you can deduce that editor never fails to lock one of the objects.

Do I reason right?  Is this reasoning worth commenting?
"
780856074,2295,Paul-Licameli,2022-01-10T01:01:05Z,"Is it worth the trouble to write `auto cleanup = finally([&]{ handler->endEdit(id) })` after the ""begin"" call?

"
780856959,2295,Paul-Licameli,2022-01-10T01:08:50Z,"There are four cases above for controls.  Do you try examples of VST3 plug-ins that exercise all four of these paths?
"
781136120,2295,Paul-Licameli,2022-01-10T12:08:24Z,"See also the class MessageBuffer in PlaybackSchedule.h where I solved the same problem in a lock-free, but not wait-free algorithm, yet very probably looping only very rarely, and using only two slots.

Which of these solutions is better?

I think there is a utility to be extract from it into one of the lower libraries.

Which are the threads that communicate?

In the cases of my MessageBuffer, it's the main thread sending messages to a worker thread -- the one which must maintain high throughput but can tolerate variation in latency, not the one that executes as the callback for the PortAudio library.  Changes of looping play bounds are the sort of changes done there.

In your case, I presume this is also about adjustment of sliders detected by the main thread.  It is the low-latency thread that is receiving the messages.  However, I believe that is a wrong implementation (an old error and nothing wrong with this PR).  See issue #2082.  Things should be restructured so the receiver thread for your messages is the same as those using MessageBuffer.

"
781571869,2295,Paul-Licameli,2022-01-10T21:38:01Z,"The build is broken if not on Windows.  That must be fixed of course.  One if the fixes is simply to omit ""/msw"" in that path.  There are other fixes to do in VST3Utils.cpp
"
781576529,2295,Paul-Licameli,2022-01-10T21:43:02Z,"I see shared_ptr, also many IPtr because you must use them with VST3 objects, and those are shared pointers.

But in fact only mModule, mEffectClassInfo, and mSetup are shared among copies of the object (which must be made for master-slave connections), which isn't obvious unless you read the copy constructor.

Make it more obvious here in the header with comments, and perhaps rearrange the sequence so the really shared members are separate from the really unique ones.
"
781615139,2295,Paul-Licameli,2022-01-10T22:19:04Z,"I see how three of these values are ultimate communicated to the VST3 library in VST3ProcessBlock, but I don't see where the sample rate is given to it.  Is that an omission?

Have you tested with non-default sample playback rate?  (Change it in the drop-down at bottom left)

If you have an effect like an equalizer, but VST3 is misinterpeting the sample rate, then you might hear wrong results at non-default sample rate choices.

"
781621506,2295,Paul-Licameli,2022-01-10T22:26:24Z,"This needs a catch block to stop std::exceptions, as is done in the two other places that may construct VST3Effect
"
781623698,2295,Paul-Licameli,2022-01-10T22:30:41Z,"Need null check on mEditController, as elsewhere
"
781624051,2295,Paul-Licameli,2022-01-10T22:31:22Z,"need null check
"
781625140,2295,Paul-Licameli,2022-01-10T22:33:18Z,"This isn't null checked, but I think you guarantee the invariant that it is not null, if mEditController is not null
"
781625559,2295,Paul-Licameli,2022-01-10T22:34:12Z,"null check?
"
781628571,2295,Paul-Licameli,2022-01-10T22:39:44Z,"Please add comments about which of the above are invariantly non-null, after construction.  I think that includes mEffectComponent, not mComponentHandler; and mPendingChanges is sure to be non-null provided that mComponentHandler is not null.

"
781635738,2295,Paul-Licameli,2022-01-10T22:54:13Z,"Use `reinterpret_cast` consistently here
"
781636698,2295,Paul-Licameli,2022-01-10T22:56:18Z,"And perhaps make a little inline function to do this query.  It happens in seven places.
"
781647075,2295,Paul-Licameli,2022-01-10T23:18:50Z,"This writes a number as the key into CommandParameters.  But ParameterInfo also has short and long titles.  Maybe the title should be written, or (if that is not certain to be unique among parameters) a concatenation of a title and the id.

If you use a VST3 effect in a macro and edit the settings, that key is stored in the macro text file, and will be visible to anyone who tries to read it.

Maybe an advanced user might try to edit the text of a macro file directly, and mnemonic names for the parameters, instead of simple numbers, would be helpful.

Of course SetAutomationParameters must be correspondingly changed too.

"
781648083,2295,Paul-Licameli,2022-01-10T23:21:17Z,"beginEdit/EndEdit pair again.  Maybe make a little ""ParamEditScope"" utility object to do them in ctor and dtor.
"
781653725,2295,Paul-Licameli,2022-01-10T23:34:15Z,"Are these two just ""Dummies"" that you will never do, or should the comments say TODO?  I think you will need to do them in future, to complete the analogy with VST2 handling, and allow the user to save settings.  But we aren't near that stage of testing yet.
"
781657832,2295,Paul-Licameli,2022-01-10T23:44:34Z,"Is this also unfinished work?

I looked a little bit into VST headers and I think a ""factory preset"" is in their jargon a ""program"" (so it was in VST2) and the relevant interface for getting the information is IUnitInfo in ivstunits.h.
"
781679000,2295,Paul-Licameli,2022-01-11T00:41:55Z,"Should this `performEdit`be bracketed with `beginEdit` and `endEdit` (outside the loop)?
"
781679158,2295,Paul-Licameli,2022-01-11T00:42:23Z,"Should this `performEdit`be bracketed too?
"
781679982,2295,Paul-Licameli,2022-01-11T00:44:23Z,"This function isn't a dummy
"
781681372,2295,Paul-Licameli,2022-01-11T00:48:17Z,"Why does GetLatency() take a maximum over the group of processors but this function does not?

The GetTailSize() function isn't yet used, and there are some old comments from Leland about that, but I'm not sure what they should be used for, unless maybe they matter in generation of sounds.
"
781684573,2295,Paul-Licameli,2022-01-11T00:57:36Z,"This function might be called in a worker thread.  Maybe it should not log messages.
"
781685312,2295,Paul-Licameli,2022-01-11T00:59:45Z,"Maybe blockLen should be cast from an unsigned to a signed type before you take a minimum.  Could the other argument to min be a negative that indicates an invalid value?
"
781688902,2295,Paul-Licameli,2022-01-11T01:10:02Z,"For the VST2 effect, ProcessInitialize is called.  For VST3, you only `SyncParameters` but don't do the other side effects.  Is it correct?
"
781690870,2295,Paul-Licameli,2022-01-11T01:16:00Z,"I see suspend and resume only call `setProcessing` for slaves, not for `this`.  That is not like VST 2.  However maybe VST 2 did that unnecessarily, because it was only for the unnecessary calculations that I removed at commit 81951abe5dbc3c263bc5e4d40ccb3e685bfa0170.  Is this what you were thinking?  Then maybe my commit was not complete, in its removal of unnecessary things.
"
781692193,2295,Paul-Licameli,2022-01-11T01:20:06Z,"Do not ignore the `forceModal` argument.  Show modally or non- as in the other overrides.
"
781694777,2295,Paul-Licameli,2022-01-11T01:27:35Z,"Is this TODO?

Other overrides re-load last used settings from saved preferences.  This function is called the first time the effect is used again in a session.

"
781696148,2295,Paul-Licameli,2022-01-11T01:31:56Z,"This should return false when the plain dialog was last used in PopulateUI, to be like the VST 2 implementation
"
781699191,2295,Paul-Licameli,2022-01-11T01:41:16Z,"I presume the four functions above are TODO
"
782203556,2295,vsverchinsky,2022-01-11T14:32:42Z,"Yep, accidentally was added multiple times by the IDE, and I overlooked that, thanks!"
782228580,2295,vsverchinsky,2022-01-11T14:58:06Z,"The only reason why VST3EffectsModule is needed here is that VST3Effect duplicates itself when the effect requests to add a new realtime processor, no details about VST3EffectModule itself actually are needed here, so to make everything clearer I'll extract VST host access function from VST3EffectsModule to some other place  "
782229511,2295,vsverchinsky,2022-01-11T14:59:04Z,Won't harm 
782249781,2295,vsverchinsky,2022-01-11T15:19:34Z,"Our implementation does not use it. VST documentation is not very wordy about the use of this parameter, and there are no examples of how this parameter is used in the SDK samples as well. Moreover, it's not stated that the index should be persistent, but plugins can access our implementation through `IParameterValueQueue ` interface. So yes, it would be safer to assign a value to it. Thanks for spotting this"
782255977,2295,vsverchinsky,2022-01-11T15:25:56Z,Good point
782948877,2295,vsverchinsky,2022-01-12T10:53:10Z,"It should be ""Though both getParameterData and addParameterData return pointers to shared objects"", but now I have doubts that such restriction is correct since VST plugins are allowed to access those objects as well"
783005202,2295,vsverchinsky,2022-01-12T11:53:09Z,"> I think I missed some interesting discussions during my week off.
> 
> What's the proof of correctness of this algorithm?
> 
> 1. Tthere are two `ParameterChanges` objects, and at all times each is held in exactly one of five places (editor, processor, first, second, or pending) and each place holds at most one.
> 2. Only the editor thread ever makes pending non-null.
> 3. Only the editor thread ever makes second null.
> 
> Every exchange satisfies those conditions; from that you can deduce that editor never fails to lock one of the objects.
> 
> Do I reason right? Is this reasoning worth commenting?


1 - yes, 2 - yes, 3 - yes, and first one as well.
There are only two threads (at most): processing and UI/Editor thread. There are only two buffers that are used to store changes, any of them is either: 
1) stored in `mFirst` or `mSecond` and considered to be empty, UI thread may move one of them to `mPendingChanges`
2) stored in `mPendingChanges`, only UI thread is allowed to store on of the buffers in that variable.
3) stored in unique pointer returned by `getPendingChanges`, and isn't accessible from UI thread until buffer is returned to `mFirst` or `mSecond` by processing thread

UI thread will try to lock the buffer in `mPendingChanges` first, if it locked one in `mFirst` or `mSecond` instead it may happen so that `mPendingChanges` isn't yet read by processing thread and then the implementation may become a bit more complicated.
At most one of the buffers is hold by processing thread, at least one of the buffer is available from UI thread (`mPendingChanges`, `mFirst` or `mSecond`)"
783939505,2295,vsverchinsky,2022-01-13T13:06:40Z,"I believe that `VST3Effect::SetSampleRate` and `VST3Effect::SetBlockSize` are used to set up the effect. Yes, I've tested effects with non-default sample rates."
784004437,2295,vsverchinsky,2022-01-13T14:24:18Z,"Well, probably neither of them doesn't make sense. Especially GetTailSize(). As I understand tail is used to process effects that produce more samples than they consume (like reverb or delay). And the problem is that different tracks may have different sample rates thus, different tail sizes. Block size, however, is always the same for each track/processor."
784005363,2295,vsverchinsky,2022-01-13T14:25:11Z,"Yes, thanks"
784021462,2295,vsverchinsky,2022-01-13T14:42:05Z,"Shouldn't be the case, `maxSamplesPerBlock` is always positive (see `VST3Effect::SetBlockSize`) and is set before the processor is activated, and `blockLen` should be positive as well. "
784026313,2295,vsverchinsky,2022-01-13T14:47:09Z,"I believe so, the `RealtimeInitialize` is called before any call to `RealtimeAddProcessor`, so we cannot configure them here (but they are initialized in `RealtimeAddProcessor` instead), and there is no need to set up the ""container"" effect since it's not used for realtime processing."
784031524,2295,vsverchinsky,2022-01-13T14:52:22Z,"Maybe VST2 implementation does not need to initialize the ""master effect"" too, there is no need to do so in the VST3 implementation since all the processing is done by ""processor effect"" instances, in the case of realtime processing  master effect simply holds initial parameters with which other instances would be initialized"
784743631,2295,vsverchinsky,2022-01-14T10:47:26Z,Yep
785984806,2295,vsverchinsky,2022-01-17T12:59:42Z,"It's unfinished, yes, but I don't think that ""program"" is a synonym for ""factory preset"", as it does not contain a set of parameter values, but rather enables or disables processing units "
792489681,2295,Paul-Licameli,2022-01-26T10:16:40Z,"Don't need `PluginSettings::`
"
792495541,2295,Paul-Licameli,2022-01-26T10:23:46Z,"`static_cast` would be modern
"
792496956,2295,Paul-Licameli,2022-01-26T10:25:28Z,"`static_cast` again
"
792500253,2295,Paul-Licameli,2022-01-26T10:29:43Z,and `size_t`
792509916,2295,Paul-Licameli,2022-01-26T10:41:57Z,`size_t`
792510092,2295,Paul-Licameli,2022-01-26T10:42:12Z,`size_t`
792519190,2295,Paul-Licameli,2022-01-26T10:53:50Z,"Indentation
"
794419146,2295,Paul-Licameli,2022-01-28T11:22:59Z,"""conditionally"""
794437458,2295,Paul-Licameli,2022-01-28T11:49:41Z,"This line was introduced in the commit ""Some basic loading functionality"" and the source file is added to the build in the following commit ""VST3 sources added to CMakeLists"" and the build fails because the include path should remove ""../../""

Do an interactive rebase to fix the include path in the earlier commit.  Then each commit in the sequence will build.
"
794505654,2295,Paul-Licameli,2022-01-28T13:32:41Z,"I would prefere a reference return type to indicate that it is never null
"
794529789,2295,Paul-Licameli,2022-01-28T14:03:45Z,"Do not use unique_ptr to a wxWindow object.  Pointers to them are never supposed to be given to operator delete.

Instead just use `safenew`.

Whenever you make a wxWindow with a non-null parent, it is owned and will be correctly destroyed when the parent is destroyed.  So, a naked new is the correct thing in this case.

"
794530120,2295,Paul-Licameli,2022-01-28T14:04:11Z,"Likewise, do not use `unique_ptr` here.
"
794532075,2295,Paul-Licameli,2022-01-28T14:06:24Z,"Complete the analogy with `VSTEffect::BuildPlain`.  Do not omit the `SetName` call.  David Bailes will tell you it is important so that the screen reader pronounces the name.
"
794545551,2295,Paul-Licameli,2022-01-28T14:21:36Z,"I would like this function better if it returned `IPtr<PresetsBufferStream>`
"
794546556,2295,Paul-Licameli,2022-01-28T14:22:40Z,"Returning a ""stupid"" pointer means I have to check all uses of the function to be convinced there is no leak
"
794560097,2295,Paul-Licameli,2022-01-28T14:37:54Z,"I would prefer the string literals ""ProcessorState"" and ""ControllerState"" appearing in only one place each and given a name
"
794563350,2295,Paul-Licameli,2022-01-28T14:41:28Z,"Is setting component state twice through two different interfaces necessary?  (A eustion to answer from Steinberg documentation)

"
794839927,2295,Paul-Licameli,2022-01-28T19:45:54Z,"Avoid new calls to `AudacityMessageBox`.  Instead include `BasicUI.h` and use `BasicUI::MessageBox`.  Leave fewer calls to rewrite later when we try to make this toolkit neutral.
"
794855352,2295,Paul-Licameli,2022-01-28T20:05:13Z,"A raw string literal would help the reader: `R""([\\*?/:<>|])""`
"
794862540,2295,Paul-Licameli,2022-01-28T20:18:15Z,"Unnecessary #include is still there.

Remember `VST3Effect` does not inherit `Effect`, strange but true

"
794873064,2295,Paul-Licameli,2022-01-28T20:38:01Z,"""to shared objects"""
794873300,2295,Paul-Licameli,2022-01-28T20:38:25Z,"""because they are pointers to temporary objects""
"
794875681,2295,Paul-Licameli,2022-01-28T20:43:02Z,"""try to grab"" again
"
794891948,2295,Paul-Licameli,2022-01-28T21:11:09Z,Need two `reinterpret_cast`s for consistent style
795050324,2295,Paul-Licameli,2022-01-29T13:06:51Z,"I see that this function is new since my last round of review but not used.  (It was declared then, but not defined.  Now it is defined but never called.)

"
795050543,2295,Paul-Licameli,2022-01-29T13:08:35Z,"Why is `PLUGIN_API` linkage visibility necessary?  Nothing needs to link to these functions.  These are overrides, so the pointers to functions are discovered by the framework at runtime instead.  That's the point of virtual function tables.
"
795052241,2295,Paul-Licameli,2022-01-29T13:24:12Z,"Is that last sentence still true?  I think all of that has been fixed now.
"
795052629,2295,Paul-Licameli,2022-01-29T13:28:20Z,"Doxygen extracts the brief description but not the detailed description.  Keep this separation of brief and detailed, and rewrite the detailed inside

```
/*!
...
*/
```
"
795054204,2295,Paul-Licameli,2022-01-29T13:46:07Z,"More PLUGIN_API we may not need
"
795054350,2295,Paul-Licameli,2022-01-29T13:47:44Z,"This comment block does not separate brief and detailed descriptions.  So all will appear only in the detailed description on the Doxygen pages.

This isn't wrong, but you might reconsider what would best help someone else using those pages.
"
795055533,2295,Paul-Licameli,2022-01-29T14:01:45Z,"More `PLUGIN_API` to remove
"
795055786,2295,Paul-Licameli,2022-01-29T14:03:43Z,"Ещё раз
"
795062072,2295,Paul-Licameli,2022-01-29T14:51:08Z,"I see you broke the dependency cycle between VST3EffectsModule and VST3Effect.  The module depends on Effect, one-way.  You removed things from VST3EffectsModule.h and defined them in VST3Effect instead.

That is good, but now I see a duplication of this string constant.

Could you make a static function in VST3Effect.h and use it here?

."
795114188,2295,Paul-Licameli,2022-01-30T01:49:36Z,"I think the two fields above are non-null only when the object is not constructed by copy and should be in the section with `mPlugView` etc., below.
"
795114831,2295,Paul-Licameli,2022-01-30T01:59:35Z,"The non-copy constructor may leave mEditController null.  It makes mComponentHandler non-null only if mEditController is.  These things should be stated here in comments.

In my first round of review, I looked at uses of these two fields to see if null checks were sufficient.

Every use of mEditController should be preceded by a null check of it or of mComponentHandler.  That condition is satisfied everywhere.

Every use of mComponentHandler needs a null check.

I checked again and it looks good now.
"
795115207,2295,Paul-Licameli,2022-01-30T02:05:07Z,"There are two calls to `BuildPlainUI` here.  They pass pointers to mEditController and mComponentHandler.  A look inside the function shows that it is assumed that the pointers are not null, but there is no comment to that effect.  That condition is guaranteed here, so there is not a bug.

Still, I would prefer to say what I mean with types: make `BuildPlainUI` take references instead of pointers to make clear that null is not allowed.  Then at the places where we call it, we have to dereference pointers.  That would make me look for the proof that the pointers are not null, and I would get it from the suggested comments in the header about invariants.

"
795116131,2295,Paul-Licameli,2022-01-30T02:19:02Z,"Ah no you don't, if non-null mComponentHandler implies non-null mEditController
"
795116406,2295,Paul-Licameli,2022-01-30T02:22:40Z,"Still needs resolution
"
795116821,2295,Paul-Licameli,2022-01-30T02:29:03Z,"Reassigning nulls in a destructor should be unnecessary
"
795117196,2295,Paul-Licameli,2022-01-30T02:34:05Z,"Which is correct, doing this call before or after endEdit?  It changed since my first round of review here, but is consistent with the other call to it now.
"
795117447,2295,Paul-Licameli,2022-01-30T02:39:01Z,"This function is called in a worker thread.  It's not good to call wxASSERT there.  If the assertion is violated for any reason, the debug build will try to make a dialog from a non-main thread.

Maybe just a simple `assert` instead if you must express some assertion.
"
795117559,2295,Paul-Licameli,2022-01-30T02:40:53Z,"As I wrote in the first round of review, more should happen in this function, like reading last-used effect settings which were stored in preferences during the last session of Audacity."
797794762,2295,vsverchinsky,2022-02-02T16:30:01Z,"According to VST documentation, it's not prohibited to change parameter names. It's not difficult to append suffix if parameter has a title to a parameter key, like `0_Vol`. Then, to read it from a CommandParameters we would need to extract id number and discard suffix. "
797856375,2295,vsverchinsky,2022-02-02T17:36:00Z,"Not used as an index, but rather a loop iteration counter"
797856586,2295,vsverchinsky,2022-02-02T17:36:16Z,Thanks
797935247,2295,vsverchinsky,2022-02-02T19:08:09Z,Thank you
797965177,2295,vsverchinsky,2022-02-02T19:57:35Z,Yes
797968315,2295,vsverchinsky,2022-02-02T20:01:49Z,This would be inconsistent with other use cases of PluginSettings then
797989759,2295,vsverchinsky,2022-02-02T20:33:04Z,Turned out there is a safer and shorter for to query interfaces via `FUnknownPtr<>`
797992403,2295,vsverchinsky,2022-02-02T20:37:09Z,"I'll remove it, we don't need it now, since we don't have automation support yet"
797995551,2295,vsverchinsky,2022-02-02T20:41:40Z,"`PLUGIN_API` expands to `__stdcall`, under Windows platform it does not make difference when compiling for x64 or ARM processors, but when compiling for x86 there would be an error."
797997661,2295,vsverchinsky,2022-02-02T20:44:44Z,"This comment relates to the `ComponentHandler` class itself, not the client code which uses it."
798007030,2295,vsverchinsky,2022-02-02T20:58:24Z,"For that purpose it would be better to read `IParameterChanges` documentation, I cannot imagine anything helpful I could add that isn't a duplicate of what's written there"
798029156,2295,vsverchinsky,2022-02-02T21:31:18Z,"Doesn't matter actually, because EditController should not notify ComponentHandler about parameter change when seyParamNormalized is invoked directly "
798029972,2295,vsverchinsky,2022-02-02T21:32:28Z,"Yep, thanks"
800606836,2295,Paul-Licameli,2022-02-07T12:29:13Z,"I see you have removed a check in ""programfiles(x86)"" that was in an earlier version of the PR.  No mistake?
"
800616258,2295,Paul-Licameli,2022-02-07T12:41:47Z,"In this and other effects that must be noexcept, but call untrusted foreign code -- do similarly to what I did for the other effect families.  Wrap the body in

```
return GuardedCall<bool>([&]{
   ...
});
```

It is not implemented yet, but I think we should detect errors turned into return codes, and disable the effects that raise them.

"
800664114,2295,Paul-Licameli,2022-02-07T13:39:46Z,"I see that since the last version of this branch, you moved ActivateBuses out of ProcessInitialize into the constructor, and there is no longer a complementary de-activation.  That seems wrong, like a kind of leak."
800687982,2295,Paul-Licameli,2022-02-07T14:05:57Z,"I suspect off-by-one mistakes in these lines.

If the right coordinate of ViewRect is non-exclusive, which is how it works with wxSize, then it is left + width - 1.  Similarly for top, height, and bottom.
 "
800689380,2295,Paul-Licameli,2022-02-07T14:07:28Z,"""its""
"
800689710,2295,Paul-Licameli,2022-02-07T14:07:52Z,"""its""
"
800690038,2295,vsverchinsky,2022-02-07T14:08:13Z,"Yes, there is no need to search x86 plugins in x64 bit Audacity as they will not be loaded anyway"
800698407,2295,Paul-Licameli,2022-02-07T14:17:16Z,"The commit ""Generator effect duration control added"" doesn't compile.  The commit ""User Presets"" adds this include directive, which fixes it.  It would be nice to do an interactive rebase and make all the commits compile.
"
800705937,2295,vsverchinsky,2022-02-07T14:24:43Z,"The ViewRect's definitions of width and height:
```
	int32 getWidth () const { return right - left; }
	int32 getHeight () const { return bottom - top; }
```
They aren't same as in wxRect"
800719407,2295,vsverchinsky,2022-02-07T14:37:47Z,"```
/** The bus should be activated by the host per default on instantiation (activateBus call is requested). By default a bus is inactive. */
kDefaultActive = 1 << 0,
```
Well, probably the funciton name is misleading here. Some plugins may have `kDefaultActive` flag set which means that we need to activate the bus manually (this also means that some plugins do not requrire manual bus actiavtion at all), there is nothing said about bus deactivation. As I understand deactivation may be required when changes to bus arrangement are made (we don't support this feature yet, we always use default arrangement), so we don't need to make additional calls to `IAudioProcessor::activateBus`

This `ActivateBuses` activates only that are flagged with `kDefaultActive`

But I actually not 100% sure about this, the documentation is either incomplete on this topic, or I miss something. There are two places where bus activation is mentioned and mentions are made in a different context, though they do not contradict each other. Especially if you take them literally I think. Thank you for that question.

Anyway everything seems to work fine, considering restrictions on bus arrangements we do have now."
800742245,2295,vsverchinsky,2022-02-07T14:59:21Z,"I'm not sure that understand your question.
The type of `runLoop` variable is `IPtr<RunLoop>`. `owned` is a macro which grabs raw pointer and constructs IPtr object without reference count increment. `runLoop.get()` returns a raw pointer, but `RunLoop` constructor assigns it to the field of type IPtr<IRunLoop>"
800837598,2295,Paul-Licameli,2022-02-07T16:31:01Z,"I misunderstood, I thought this was about dllexport linkage.
"
800839781,2295,Paul-Licameli,2022-02-07T16:33:16Z,"Should this and the following declarations have ""override""?
"
800843144,2295,Paul-Licameli,2022-02-07T16:36:51Z,"`gpointer` is an alias for `void *` so `static_cast` is appropriate, and less surprising to read
"
800844163,2295,Paul-Licameli,2022-02-07T16:37:54Z,"What is `condition` for ?  It is ignored
"
800846983,2295,Paul-Licameli,2022-02-07T16:40:52Z,"The map is keyed on the handler only, not the handler and file descriptor pair.  Is that all right?  Or is it possible to reassign `mEventHandlers[handler]` ?
"
800851152,2295,Paul-Licameli,2022-02-07T16:45:17Z,"Why a search loop in the hash map when instead you could write:
`if (auto end = mEventHandlers.end(), iter = mEventHandlers.find(handler); it != end)`"
800853943,2295,Paul-Licameli,2022-02-07T16:48:12Z,"Give `EventData` a destructor that does those two steps (with a null check first), and a move constructor tha nulls the channel and id.  Then this would simplify just to erasing the iterator.  It would also make it clearer that there is no leak of GTK resources when the RunLoop is destroyed.
"
800856852,2295,Paul-Licameli,2022-02-07T16:51:13Z,"I suggested that `EventData` should be a smart RAII handler with a destructor, and so too, the above two resource acquiring calls could be done inside its constructor so that there aren't any ""naked"" pointers.
"
800862179,2295,Paul-Licameli,2022-02-07T16:56:42Z,"I suggested a constructor, move constructor, and destructor in this structure for simpler resource management"
800863072,2295,Paul-Licameli,2022-02-07T16:57:36Z,"Similarly the data type of this map might be instead a structure that calls `g_source_remove` in its destructor
"
800875588,2295,Paul-Licameli,2022-02-07T17:10:40Z,"This function will return zero the second time it is called.  That is strange.  Why?
"
800882338,2295,Paul-Licameli,2022-02-07T17:18:08Z,"`size_t` would be a better type, unless you need -1 for invalid?
"
800887933,2295,Paul-Licameli,2022-02-07T17:24:14Z,"Can the duplication be eliminated?  Can this file be shared with the old VST implementation?
"
800892403,2295,Paul-Licameli,2022-02-07T17:29:11Z,"The commit that introduces `FUnknownPtr` can be squashed as a fixiup of
""Plugin GUI & processing fixes""
"
800894291,2295,Paul-Licameli,2022-02-07T17:31:17Z,"The commit ""Plain UI imporvements"" has a mis-spelling in the commit comment, and it doesn't build, because the line above is introduced only in the following commit.  Please fix that up.
"
800914613,2295,Paul-Licameli,2022-02-07T17:54:24Z,"In fact, shouldn't the whole commit be squashed with ""Plugin GUI & processing fixes""?  I say that commits in a new feature branch should not be too few and too big, but also should not leave a record of errors and corrections.


"
800916987,2295,Paul-Licameli,2022-02-07T17:57:06Z,"`SetHost` is now no longer empty, but it is still incomplete.  See how the Private configuration ""Parameters"" is loaded and stored for the other effect families.
"
800918064,2295,Paul-Licameli,2022-02-07T17:58:24Z,"""an"""
800926998,2295,Paul-Licameli,2022-02-07T18:10:02Z,"I think it is incorrect to restrict what you write into `parms` by this condition.  There is some unfortunate confusion in terminology in Audacity, where ""automation"" refers to macro programming itself, not automation curves of effects (which is what I think the Steinberg API refers to).

The intention for macros is that any kind of user control that the effect supports should be programmable by macros.

And this is not only for macros.  It is also for saving in the .cfg files as your default, preferred settings for the effect.  If you exit Audacity, then restart, then reopen the effect dialog (maybe to apply the effect destructively) -- then you should see all dials, pushbuttons, etc. as they were before.
"
800928479,2295,Paul-Licameli,2022-02-07T18:11:53Z,"See my other comment about ""Parameters"" being restored in SetHost.  That is also part of the persistency of last user choices.
"
800935507,2295,Paul-Licameli,2022-02-07T18:21:01Z,"Good.  The difference between the toolkits is surely worth commenting, as a possible source of confusion."
802817603,2295,vsverchinsky,2022-02-09T15:55:48Z,It's not used by the event handler
802825051,2295,vsverchinsky,2022-02-09T16:02:12Z,VST SDK examples and VSTGUI implementation use only handler to identify channel 
802851479,2295,vsverchinsky,2022-02-09T16:24:55Z,That's how it implemented in other effects
802859577,2295,vsverchinsky,2022-02-09T16:30:57Z,You expect that list of options will stay same for both VST and VST3?
802872849,2295,vsverchinsky,2022-02-09T16:43:18Z,"Unfortunately some VST plugins may expose many thousands of parameters, which sometimes aren't present in the plugin interface, it's the safest option i see right now to remove such parameters from the list"
804624386,2295,Paul-Licameli,2022-02-11T12:57:45Z,"I think the destuctor of `eventHandler` destroys some resources too early, but you can fix this by giving the struct a move constructor that zeroes the id and channel pointer in the source of the move.
"
804625114,2295,Paul-Licameli,2022-02-11T12:58:35Z,"Likewise you may need a nontrivial move constructor.
"
804678207,2295,vsverchinsky,2022-02-11T14:03:24Z,"Not sure that I understand. The type of `eventHandler` is `std::unique_ptr<>`, once the ownership is moved, `eventHandler` doesn't point to the object any more. Do I miss something here?"
804687803,2295,Paul-Licameli,2022-02-11T14:14:28Z,"You are right, it is a unique_ptr, and I overlooked that.

But implementing the move copy in EventHandler and TimerHandler, which act as resource handles, would be the right thing to do in those classes, considering what they do independently of how they are allocated: make sure that they are move-only and never are copied by mistake. It would allow you to avoid the unnecessary extra indirection of a unique_ptr.
"
1431719151,5791,saintmatthieu,2023-12-19T17:16:49Z,"I just removed the contrast measure in a follow-up commit, improving performance of the classifier and simplifying the procedure. Please ignore this part while reviewing."
1432541543,5791,Paul-Licameli,2023-12-20T10:33:23Z,Fix the comment
1432541703,5791,Paul-Licameli,2023-12-20T10:33:33Z,"fix the comment
"
1432557844,5791,Paul-Licameli,2023-12-20T10:48:23Z,"Put a banner on the file and `#include` guard
"
1432561554,5791,Paul-Licameli,2023-12-20T10:51:30Z,"I wish we had `std::span` from C++20.  I wish we could use `std::vector` less often to pass contiguous ranges of values.  Because `std::vector` specifies storage management details that are extraneous to the algorithm.

Without `span` you would need at least one extra `size_t` argument so that you could pass simple pointers.

Don't fix this but remember it and think about it.
"
1432595750,5791,Paul-Licameli,2023-12-20T11:25:23Z,The assertion should be commented as a precondition
1432603856,5791,Paul-Licameli,2023-12-20T11:34:12Z,"You use template parameters T and U, not requiring them to be the same.

You use `double` in the return type.

Maybe you might make this more general?  (Could there be some future need to use it with `long double` or `std::complex<float>?)

Maybe

`template<typename ResultType = std::common_type_t<double, T, U>, typename T, typename U>`

Maybe also the common cases where T and U are both double or both float could also declare `extern MATH_API` explicit template instantiations here, and a companion .cpp file could generate the definitions.


"
1432619243,5791,Paul-Licameli,2023-12-20T11:51:25Z,"See here for a formula that suggests a one-pass accumulation of the answer which might or might not make a difference in performance https://en.wikipedia.org/wiki/Covariance#Mathematics

But see also https://en.wikipedia.org/wiki/Catastrophic_cancellation
"
1432624512,5791,Paul-Licameli,2023-12-20T11:56:43Z,"Here too, this is just variance (times N)
"
1432630039,5791,Paul-Licameli,2023-12-20T12:02:26Z,"I think this line is unnecessary to build
"
1433207325,5791,Paul-Licameli,2023-12-20T21:38:37Z,"Banners for this and other new source files
"
1433214534,5791,Paul-Licameli,2023-12-20T21:48:51Z,"Previous contents of `buffer` matter -- this is addition, not assignment.  A header comment should say that."
1433224802,5791,Paul-Licameli,2023-12-20T21:58:57Z,I figured out that the only uses of `GetFloats` are in this function.  Is there a guarantee that `frame.data()` used as the buffer will be zero-initialized first?  Only if the given `frame` is empty before this `resize`.  Precede this with `resize(0)` and then there is no more doubt.
1433228708,5791,Paul-Licameli,2023-12-20T22:03:18Z,"Here is the use of `GetNextFrame` but I see no zeroing out of the buffer between passes.

Is there in fact a bug here?
"
1433236151,5791,Paul-Licameli,2023-12-20T22:15:18Z,"To treat the short file boundary case really fully, should there be a while loop below?  With a careful test that the loop makes progress each time?  Or should you be sure to zero-fill any uninitialized part remaining after the second read?  (Which would be a consequence of first resizing the buffer to zero above)"
1433937999,5791,Paul-Licameli,2023-12-21T11:19:40Z,"Clarify with comments that this class does not calculate STFT, but is only a source of time-domain frames, with windowing function applied
"
1433947119,5791,Paul-Licameli,2023-12-21T11:28:25Z,"You might just write `std::plus{}`
"
1434000357,5791,Paul-Licameli,2023-12-21T12:17:17Z,"Not clear in context here, what string you mean.

Use `//!` instead of `//` and it becomes a Doxygen brief comment.
"
1434003078,5791,Paul-Licameli,2023-12-21T12:20:08Z,"Make a `@pre` comment
"
1434010393,5791,Paul-Licameli,2023-12-21T12:27:27Z,"I might write
```
if (index >= 0)
   index = index % fullSize;
else
   index = fullSize - (-index % fullSize);
```
"
1434011342,5791,Paul-Licameli,2023-12-21T12:28:28Z,"Are you also assuming `fullSize > 0` ?  (Loops below won't terminate if it is 0)  Can it be unsigned?
"
1434012512,5791,Paul-Licameli,2023-12-21T12:29:40Z,"Incorrect if x is 0 or negative; again consider an unsigned argument
"
1434017222,5791,Paul-Licameli,2023-12-21T12:34:13Z,"The function name doesn't suggest exactly what it does.  6 is not a power of 2 or of 3.
"
1434018673,5791,Paul-Licameli,2023-12-21T12:35:01Z,"Or simply `n % 9 == 0`
"
1434019919,5791,Paul-Licameli,2023-12-21T12:36:16Z,"So really `GetPowersOf2And3` could generate just the powers of 2 and the triples of those
"
1434020216,5791,Paul-Licameli,2023-12-21T12:36:36Z,"I don't know what `odf` abbreiviates
"
1434020791,5791,Paul-Licameli,2023-12-21T12:37:12Z,"`j` is never 0
"
1434021455,5791,Paul-Licameli,2023-12-21T12:37:54Z,This condition too is always false
1434024820,5791,Paul-Licameli,2023-12-21T12:41:25Z,"I would make a small companion `.cpp` file, just to define the destructor non-inline, so that the linker doesn't need to de-duplicate the virtual function table but will allocate it just in that .cpp.

Not very important for a header file that is not widely used, but I make a habit of this whenever I make a new abstract base class.

"
1434031768,5791,Paul-Licameli,2023-12-21T12:48:13Z,"I took another look this morning, and I'm still not convinced, that the loop using `GetNextFrame` in `MirDsp.cpp` is correct.  I still think later passes have a buffer contaminated with previous data.

But all of that could be fixed down at this level, if only the first `AddChannel` instead assigned the buffer, not accumulating into it.  Only the second `AddChannel` should remain.  And then no special header comments would be needed.
"
1434034892,5791,Paul-Licameli,2023-12-21T12:49:28Z,"This type is nowhere used
"
1434044316,5791,Paul-Licameli,2023-12-21T12:56:07Z,"If I correctly understand the statistical methods of ROC, then whether the allowed false positive rate is consistent with the threshold, depends on probability distributions of ... whatever `threshold` measures, in two different populations of sound files, those that have rhythmic content and those that do not.

So then are the four magic numbers below derived experimentally from a certain corpus of example files that you take as representative?
"
1434069456,5791,Paul-Licameli,2023-12-21T13:19:02Z,"`timeSignature` is not assigned on all paths.  Better to make it consistent that way.

Or maybe better, why not return `MusicalMeter` by value and eliminate arguments?
"
1434071254,5791,Paul-Licameli,2023-12-21T13:20:46Z,"Maybe one `MusicalMeter` member instead, directly initialized
"
1434082468,5791,Paul-Licameli,2023-12-21T13:31:21Z,"Should this standard deviation be defined in the same place as the mean, `bpmExpectedValue`?
"
1434084722,5791,Paul-Licameli,2023-12-21T13:33:36Z,"Redundant words
"
1434091283,5791,Paul-Licameli,2023-12-21T13:40:04Z,"This use of the normalized Hann window is only as a moving-average kernel -- spectral properties are not important.  Am I right?
"
1434092641,5791,Paul-Licameli,2023-12-21T13:41:15Z,"Maybe that loop can just be `std::accumulate` on one or two ranges
"
1434604163,5791,Paul-Licameli,2023-12-22T00:10:43Z,"I don't understand this multiplier.
"
1434604568,5791,Paul-Licameli,2023-12-22T00:11:55Z,"Make a `@pre`
"
1434608698,5791,Paul-Licameli,2023-12-22T00:23:44Z,"Can this divide by 0?
"
1434615304,5791,Paul-Licameli,2023-12-22T00:41:14Z,"The argument is called `sampleRate` but at the point of usage it is passed a frame rate, which is sample rate divided by a hop size -- hop rate?  Hops per second.

"
1434616135,5791,Paul-Licameli,2023-12-22T00:43:31Z,"I don't pretend to know the theory here.  Maybe school me later.
"
1434617207,5791,Paul-Licameli,2023-12-22T00:46:16Z,Maybe reserve `frameProvider.GetNumFrames()` ?
1434618791,5791,Paul-Licameli,2023-12-22T00:50:11Z,"If performance is concern enough for a progress indicator, perhaps we should seek optimizations.  Maybe the old functions in FFT.cpp could be improved.  Such as by avoiding the un-permuting and re-permuting of the spectrum.

"
1434621683,5791,Paul-Licameli,2023-12-22T00:57:49Z,"No such parameter
"
1434623670,5791,Paul-Licameli,2023-12-22T01:03:19Z,"Is minNumBars <= maxNumBars always?
"
1434625719,5791,Paul-Licameli,2023-12-22T01:09:13Z,<= not < ? (twice)
1434964131,5791,Paul-Licameli,2023-12-22T11:07:30Z,"I wish we had C++20 ranges.  Without them, you could use standard algorithms without needing these temporary vectors just to hold integers.

Making these vectors seems wasteful and only obscures the two outer loops that might just as easily be written with an integer loop variable.
"
1435028287,5791,Paul-Licameli,2023-12-22T12:48:04Z,Maybe call that `pulseTrainPeriod`
1435035906,5791,Paul-Licameli,2023-12-22T12:59:29Z,This comment makes me think of the problem of applying a varying stretch to correct irregularities of rhythm... have you thought of that?
1435038076,5791,Paul-Licameli,2023-12-22T13:02:55Z,"`std::accumulate` defaults the operation to addition, so you can shorten that
"
1435039421,5791,Paul-Licameli,2023-12-22T13:04:53Z,"`std::abs`
"
1435040457,5791,Paul-Licameli,2023-12-22T13:06:23Z,Why `2 *`?
1435041792,5791,Paul-Licameli,2023-12-22T13:08:25Z,You can default the last two arguments
1435052545,5791,Paul-Licameli,2023-12-22T13:22:13Z,"It looks like you just want an `unordered_set` hashed on the third member
"
1435053706,5791,Paul-Licameli,2023-12-22T13:23:44Z,"Is the normalized distance really a ""probability"" (vertical axis if you plot the distribution) or is it the ""random variable"" (horizontal axis)?
"
1435054420,5791,Paul-Licameli,2023-12-22T13:24:45Z,"Explain ""contrast"" -- the same thing as the ""score""?

"
1435055143,5791,Paul-Licameli,2023-12-22T13:25:42Z,"I would write inner braces around the first three members
"
1435059237,5791,Paul-Licameli,2023-12-22T13:31:40Z,"Is it correct to choose the hypothesis that minimizes error as the most likely correct hypothesis -- or, is there need to do something fancier with a Bayesian formula?  Which would make some assumptions about the unconditional probabilities of the hypotheses (how often will a loop have 6/8? how often 4/4?  etc.) and those data again might need to be derived from some corpus of examples we take as representative.
"
1435061216,5791,Paul-Licameli,2023-12-22T13:34:30Z,"e.g. find a large enough population of examples where time signature is deduced from explicit metadata, not calculation?
"
1435061963,5791,Paul-Licameli,2023-12-22T13:35:44Z,What is the source of all the numbers in these three maps?
1435063626,5791,Paul-Licameli,2023-12-22T13:38:23Z,"The data in the third map -- however derived -- might be used in that suggested Bayesian formula.
"
1435097509,5791,Paul-Licameli,2023-12-22T14:18:00Z,"That has units of samples / beat, so I might call it `beatLength`"
1435102383,5791,Paul-Licameli,2023-12-22T14:22:15Z,"You are testing increasing periods, not frequencies -- maybe that should really be called ""sub-harmonic""
"
1435121700,5791,Paul-Licameli,2023-12-22T14:38:41Z,"I think you could sequence this test before all the rest of the calculation of autocorrelation and scores, and skip all that if it is true"
1437553342,5791,saintmatthieu,2023-12-28T10:43:13Z,"I do think the case where `x` is of integer type is quite common. That's the use case I had, rounding onsets to tatum (or ""tick"") indices.
For the rest, it's a bit complicated to find a solution that satisfies all cases without compiler warnings. I just generalized the weight type for usage convenience, but the return type is just double. Users who need float coefficients shouldn't have trouble downcasting."
1437562009,5791,saintmatthieu,2023-12-28T10:59:41Z,"Yes indeed, this wasn't intended behaviour. Addressing."
1437566802,5791,saintmatthieu,2023-12-28T11:09:01Z,https://github.com/audacity/audacity/pull/5791#discussion_r1437562009
1437566923,5791,saintmatthieu,2023-12-28T11:09:16Z,https://github.com/audacity/audacity/pull/5791#discussion_r1437562009
1437582367,5791,saintmatthieu,2023-12-28T11:39:05Z,"Yes, the perfect circular read-out would need a while loop. But it probably makes implementation easier not to care for this use case, which would be too short to be a musical loop anyway.
I think initialization to 0 would only improve situations where the underlying file is less than twice the FFT size, but it's cheap and easy, so will do."
1437605887,5791,saintmatthieu,2023-12-28T12:24:48Z,That's an outdated comment - thanks.
1437620103,5791,Paul-Licameli,2023-12-28T12:52:01Z,"Onset detection function
"
1437620190,5791,saintmatthieu,2023-12-28T12:52:11Z,"Making it unsigned doesn't protect against invalid input, since `fullSize > 0` is a pre-condition, so I don't see that much of a benefit.
But yes, I should handle invalid argument values.
"
1437656088,5791,saintmatthieu,2023-12-28T13:09:30Z,`n % 27 == 0` - we hold musical rhythms with two triple levels for realistic (e.g. a swung 6/8). But thanks for the tip.
1437710949,5791,saintmatthieu,2023-12-28T14:44:55Z,"Right - and this was a bug, missing the presence of a peak at index 0. Thank you, addressing this has improved the performance of the classifier. See c0b0d85123b5403d4c8355ffdfc92374c4b46da0"
1437712724,5791,saintmatthieu,2023-12-28T14:48:03Z,An obsolete remnant.
1437721323,5791,saintmatthieu,2023-12-28T15:01:49Z,"Two distributions of the score returned by the algorithm, yes, one for files whose ground truths say they are not music loops, and the other for the others. If the distributions do not overlap, then you have a perfect classifier and the threshold can be set anywhere between the two. But ours do, and we set the threshold such that it splits the non-loop population in 99% / 1% for the strict case, and 90% / 10% for the lenient case, the upper part of the split being the false-positive area.
Representativeness is indeed a topic. Ideally I could take a representative sample set from what users are importing, but I don't have this. So I need a data set I'm happy with, and believe in it. The one use in this PR (next commit) is worth what it's worth. A follow-up ticket, #5795, may provide something more representative (although the goal of that ticket is first and foremost to make the dataset available to others for reproducibility)."
1437727259,5791,saintmatthieu,2023-12-28T15:12:41Z,Absolutely.
1437729291,5791,saintmatthieu,2023-12-28T15:16:37Z,"These will be subject to change in follow-up improvement PRs, I'm reluctant to invest time centralizing them, as little work as that may be."
1437735052,5791,saintmatthieu,2023-12-28T15:26:33Z,I suppose it is in some way. The average of the signal is like its DFT at 0Hz. The window function reduces the amount of leakage of non-zero components in the 0Hz measurement.
1437744848,5791,saintmatthieu,2023-12-28T15:45:35Z,"It's a poorly documented yet important multiplier.
The moving average of the raw ODF will be subtracted from it to yield the final ODF, negative results being set to 0. This is to remove noise of small ODF peaks before the method's quantization step.
Changing this value can impact dramatically the performance of the classifier.
I'm still not completely happy with the ODF. In some cases it can be very noisy in comparison with our perception of where onsets are. I'm exploring better solutions, and if I do find one, this smoothing may become obsolete.
Still, adding a comment."
1437745147,5791,saintmatthieu,2023-12-28T15:46:10Z,It's in the header.
1437746376,5791,saintmatthieu,2023-12-28T15:48:11Z,Not unless the input is only zeroes. Adding a check.
1437750934,5791,saintmatthieu,2023-12-28T15:56:47Z,"#5794 is planned for optimization. Downsampling to 16kHz is already something that could augment speed drastically.
But I'm keeping that ticket for later. Like I said, I'm not completely happy with the ODF, and reworking it would put any optimization at risk.
Also, I don't mind the algorithm to underperform on master for a while, so that team members and especially @LWinterberg and @Tantacrul get to experience the progress bar and the nuisance it can be on file import before the final release."
1437754501,5791,saintmatthieu,2023-12-28T16:03:13Z,Will `IotaRange` complain if it isn't?
1437755466,5791,saintmatthieu,2023-12-28T16:05:08Z,"Given that `tatumRate` is not an integer, that won't make much difference. `minTatumsPerMinute` and the other are ballpark values anyway."
1437759423,5791,saintmatthieu,2023-12-28T16:12:52Z,"This could be an application of the result of this analysis indeed. We could offer the user the possibility to automatically warp the onsets to the nearest tatum. Generalizing our integration of the time-stretching from StaffPad may not be that tricky, but there would be real difficulties related to waveform painting. Or maybe the painting would be so subtle we wouldn't even need to address it ... then pencil and brush would also have to be disabled for time-warped clips, but UX-wise that wouldn't be too bad either."
1437760382,5791,saintmatthieu,2023-12-28T16:14:52Z,Of course.
1437760807,5791,saintmatthieu,2023-12-28T16:15:48Z,"Such that the error nicely spans `[0, 1)`. Will comment.    "
1437768333,5791,saintmatthieu,2023-12-28T16:30:23Z,"You're right, it's not a probability, `1 - distance` it's just a score. The probability of the file being a loop given that score is what we use in the benchmarking to determine the thresholds."
1437769308,5791,saintmatthieu,2023-12-28T16:32:25Z,"Outdated comment, thanks. (See https://github.com/audacity/audacity/pull/5791#discussion_r1431719151 if you wish)"
1437769719,5791,saintmatthieu,2023-12-28T16:33:08Z,In fact `score` and `error` are rather redundant. I simplified.
1437771920,5791,saintmatthieu,2023-12-28T16:37:43Z,"This is part of the following, disambiguation step of the algorithm. For now we're only interested in tatum quantization. But since tatum rate typically is faster than beat rate, a follow-up disambiguation step is necessary. There, time signature ""popularity"" are taken into account to decide how tatums should be grouped in beats and beats in bars. See the introductory comment in the header."
1437789624,5791,saintmatthieu,2023-12-28T17:10:15Z,"You're right, I am using probabilistic measures that may be more clearly be brought together with a clear formulation of the Bayes theorem. I just created a ticket for that: https://github.com/audacity/audacity/issues/5826"
1437790733,5791,saintmatthieu,2023-12-28T17:12:39Z,It's more the period index that I'm increasing. Renaming.
1437817932,5791,saintmatthieu,2023-12-28T18:15:45Z,"Nice! That may be a non-negligible speed improvement. I may remove this `fourFourIt` in a follow-up algorithmic improvement, but until then ..."
1437818400,5791,saintmatthieu,2023-12-28T18:16:57Z,I don't understand.
1439751210,5791,saintmatthieu,2024-01-02T19:29:23Z,This won't help for very small x.size().
1439982307,5791,Paul-Licameli,2024-01-03T00:42:05Z,"I see it is now corrected, though there are two passes over the buffer (to zero it, then to add to it).  Maybe that marginal inefficiency is unimportant.
"
1439987617,5791,Paul-Licameli,2024-01-03T00:58:04Z,"Are you trying to handle corner cases?  You deal with zero for `numSamples`.

log2 returns -infinity for a zero argument, NaN for a negative, and idealHopSize might be zero.  I'm just trying to think of abusive inputs... the numbers come from virtual functions of `audio` below which have no postconditions.

"
1440989748,5791,Paul-Licameli,2024-01-03T21:46:24Z,"Considering that crash I fixed in the unit test -- you might comment that the lifetime of the source encloses that of this?
"
1441009640,5791,Paul-Licameli,2024-01-03T22:07:42Z,"I notice now the window is periodic in `size`, not symmetrical; perhaps worth a header comment
"
1441091266,5791,Paul-Licameli,2024-01-03T23:30:37Z,Did you mean `0 < delta && delta < 1. / 8`
1441172648,5791,Paul-Licameli,2024-01-04T01:13:18Z,"This may be a problem:  The function may take paths that do change the tracks, but do not push an undo state.  Therefore those changes of the tracks will be lost if you Undo the Import command that was previously pushed, then redo again.  Or the changes will be consolidated as part of the next Undo item that is pushed, which may be for an unrelated editing operation.
"
1441177270,5791,Paul-Licameli,2024-01-04T01:25:29Z,"It may loop infinitely because the termination test is == not >=
"
1441520403,5791,Paul-Licameli,2024-01-04T09:25:57Z,"It's only for debug purposes.  Do you want to push `powSpec` before or after the swap?
"
1441521466,5791,Paul-Licameli,2024-01-04T09:26:58Z,"Do you want to push one more power spectrum for debug output?
"
1441534993,5791,Paul-Licameli,2024-01-04T09:40:05Z,"I don't understand the context of the remark
"
1441538832,5791,Paul-Licameli,2024-01-04T09:43:52Z,"`const auto size = x.size()` (lift that out of the loop)
`k = (k + n + i + size()) % size()`

I don't know whether that might make this hot inner loop run faster -- measure
"
1441560820,5791,Paul-Licameli,2024-01-04T10:05:46Z,like not alike
1441603585,5791,Paul-Licameli,2024-01-04T10:50:57Z,`const auto odfSr = odf.size() / audioFileDuration;`
1441605940,5791,Paul-Licameli,2024-01-04T10:53:37Z,"Comments at least for the more abbreviated member names?  Remind the reader what ""odf"" means"
1441610040,5791,Paul-Licameli,2024-01-04T10:57:34Z,"Good, I like to see the ""IIFE"" technique used to make clear that something remains const after once computed.

(Immediately Invoked Function Expression)


"
1441612574,5791,Paul-Licameli,2024-01-04T11:00:28Z,"""numbers"""
1441614613,5791,Paul-Licameli,2024-01-04T11:02:48Z,"So write `const int maxNumBars = std::max(minNumBars, ...);`"
1441630225,5791,Paul-Licameli,2024-01-04T11:20:52Z,"I wonder about this use of `IsRound` sometimes wrongly rejecting a hypothesis.  Would it be better to do it with integer operations?

Suppose `tatumsPerBeat` contains nums and denoms,

`(beatsPerBar * num) % denom == 0`

is the condition
"
1441637157,5791,Paul-Licameli,2024-01-04T11:29:02Z,Maybe one `MusicalMeter` member
1441638902,5791,Paul-Licameli,2024-01-04T11:31:02Z,"You assigned that already above

Maybe just collect all assignments here
"
1441668743,5791,Paul-Licameli,2024-01-04T12:01:26Z,"`numTatums` is the key of the map but also duplicated as part of the value.

It's not important.
"
1441695829,5791,Paul-Licameli,2024-01-04T12:31:34Z,"I got confused reviewing elsewhere -- this member actually is a number of tatums, not divisions
"
1441703771,5791,Paul-Licameli,2024-01-04T12:40:53Z,"I feel a similar doubt here, as with `IsRound` -- you should express the test with integer arithmetic only"
1441710043,5791,Paul-Licameli,2024-01-04T12:48:21Z,"Is this so hard?  `BarDivision` is constructed in only one place, at line 98.  You can prove there with little difficulty that `beatsPerBar` is not more than 4.

What I might do:  Give `BarDivision` a constructor with explicit preconditions -- and since its members are const, the preconditions become invariants.  Then this function can assume the invariant is satisfied.  The burden of proof of the precondition shifts to the place of construction.
"
1441712395,5791,Paul-Licameli,2024-01-04T12:51:08Z,"Do as in the previous suggestion, and `ts` will not be optional.
"
1441713794,5791,Paul-Licameli,2024-01-04T12:52:49Z,"I still don't know the source of the numbers.
"
1441734642,5791,Paul-Licameli,2024-01-04T13:13:52Z,"Now I feel confused about whether this mapping is correct.  Wasn't the autocorrelation just half of a vector expected to be conjugate-symmetric?
"
1441736767,5791,Paul-Licameli,2024-01-04T13:16:08Z,"So, this while loop is climbing up to a local peak?  Summarize with a comment if I understand right"
1441747025,5791,saintmatthieu,2024-01-04T13:26:50Z,"Sorry, was just a not for myself. If `x.size() == 1`, this crashes. Have to fix this."
1441756487,5791,saintmatthieu,2024-01-04T13:36:42Z,"`minBarDuration < maxBarDuration`, and they divide the same value, so `minNumBars <= maxNumBars`."
1441852551,5791,Paul-Licameli,2024-01-04T14:52:23Z,"You don't need to capture this in the lambda -- it's a constant
"
1441858919,5791,Paul-Licameli,2024-01-04T14:57:41Z,"I've done bottom-up review of all these calculations, twice now.  I'm doing one more pass, top-down, depth first.

Now I think it would be clearer if moved this multiplication by 1.5, into MirDsp where the moving average is used.

Then this so-called `GetMovingAverage` will really do what the function name suggests, and only that.
"
1441888072,5791,Paul-Licameli,2024-01-04T15:20:10Z,unused
1441895973,5791,Paul-Licameli,2024-01-04T15:23:01Z,"Maybe this function could be called `GenerateTempoHypotheses`
"
1441947117,5791,Paul-Licameli,2024-01-04T16:03:41Z,This is used only in `RunQuantizationExperiment` -- maybe this computation could be lowered into that function for clarity; pass `possibleDivs` into it instead
1441948037,5791,Paul-Licameli,2024-01-04T16:04:27Z,"""Generate hypotheses"" here about tempo..."
1441948663,5791,Paul-Licameli,2024-01-04T16:04:58Z,"Maybe call this ""Best fit tatum number""
"
1441952465,5791,Paul-Licameli,2024-01-04T16:08:28Z,"Could there be more than one hypothetical bar division with a four/four signature?  If so, why should the first be preferred?
"
1442111329,5791,saintmatthieu,2024-01-04T18:22:17Z,"The autocorrelation is not conjugate-symmetric, only symmetric: it's real numbers. I'm confident that the code below is correct."
1442137606,5791,saintmatthieu,2024-01-04T18:51:59Z,Actually not: we are pushing another ODF frame because it's based on the adjacent differences. The correct number of power spectra already has been pushed.
1442164412,5791,saintmatthieu,2024-01-04T19:23:17Z,"Absolutely, thanks."
1442881884,5791,Paul-Licameli,2024-01-05T13:27:38Z,"Incidentally noticed that `GetPossibleBarDivisors` in `MirUtils` are not used at all
"
1442889694,5791,Paul-Licameli,2024-01-05T13:33:39Z,"C++23 would let you write `0uz` instead to make a size_t literal
"
1442895173,5791,Paul-Licameli,2024-01-05T13:36:39Z,"are not is
"
1446746636,5791,saintmatthieu,2024-01-10T00:05:22Z,"Comment from @Paul-Licameli:
> So I understand you change this to true, run locally, and then decide just two magic number thresholds to put into the application, in MusicInformationRetrieval.h. The very last thing in GetMeterUsingTatumQuantizationFit.cpp is use of those thresholds.
>
> Maybe that header file should have a comment about how the numbers are experimentally derived."
1446747135,5791,saintmatthieu,2024-01-10T00:06:14Z,"From @Paul-Licameli:
> I think this branch should return greatest score plus some epsilon."
1446747506,5791,saintmatthieu,2024-01-10T00:07:02Z,"From @Paul-Licameli:
> Maybe write it in functional style, taking a value and returning a new value.
>
>I lift eyebrows to see a floating point type for a ""hash"" value. I looked for uses of this function. You are not really using it in a standard unordered container, which would require some quantization of the value to size_t. I think ""checksum"" better describes the use of the value."
1446747865,5791,saintmatthieu,2024-01-10T00:07:39Z,"From @Paul-Licameli:
> That's strange -- I thought the checksum would be a summation of samples of audio files, which would tend to average toward 0."
1446748202,5791,saintmatthieu,2024-01-10T00:08:20Z,"From @Paul-Licameli:
> fewer -- sorry to be pedantic"
1446749099,5791,saintmatthieu,2024-01-10T00:10:03Z,"From @Paul-Licameli:
https://github.com/audacity/audacity/pull/5843#discussion_r1443255418
(Comment is a bit long to be copied.)"
1446749399,5791,saintmatthieu,2024-01-10T00:10:39Z,"From @Paul-Licameli:
> inadvertent"
1446749736,5791,saintmatthieu,2024-01-10T00:11:07Z,"From @Paul-Licameli:
> I think you might not get a precise match of numbers if you run the tests an a different platform or CPU"
1446749918,5791,saintmatthieu,2024-01-10T00:11:32Z,"From @Paul-Licameli:
> I notice the checked-in summary.txt was not generated by this version of the .cpp file"
1446755880,5791,saintmatthieu,2024-01-10T00:23:32Z,ok
1446760245,5791,saintmatthieu,2024-01-10T00:27:33Z,"It could, but since the false-positive tolerance itself being rather arbitrary, we shouldn't be preoccupied with that kind of precision."
1446762289,5791,saintmatthieu,2024-01-10T00:31:38Z,"I agree, checksum is a better choice of name.
Also changing the signature to something more straightforward."
1446770627,5791,saintmatthieu,2024-01-10T00:49:50Z,"Looks ok. I've just run the benchmarking again, counting the total number of samples, which is 84540711. To get the average DC offset in dB, `20*log10(1840.31005859375/84540711) == -93.24349792273436`, close to the noise floor for 16bit audio."
1446770802,5791,saintmatthieu,2024-01-10T00:50:11Z,I don't mind - thanks.
1446772745,5791,saintmatthieu,2024-01-10T00:54:37Z,"That could be a problem. I expect it will be close, though, since I don't expect the false-positive and true-positive rates to differ much or at all. As for the floating-point arithmetic ...
In a follow-up PR I intend to make the evaluation dataset easily available, not only on the machine I'm using right now. When I'm there I'll test it on the macbook I have, see what happens."
1446774458,5791,saintmatthieu,2024-01-10T00:58:01Z,"Yes, the commits I'm preparing should fix this. Most importantly, the calculated thresholds are consistent with the values used in `MusicInformationRetrieval.h`,
```
static const std::unordered_map<FalsePositiveTolerance, LoopClassifierSettings>
   loopClassifierSettings {
      { FalsePositiveTolerance::Strict, { .01, 0.8367879995455243 } },
      { FalsePositiveTolerance::Lenient, { .1, 0.7336582045210642 } },
   };
   ```"
1304419878,5043,Paul-Licameli,2023-08-24T14:23:54Z,"Replicated in another PR -- again, wrong number?
"
1304421081,5043,Paul-Licameli,2023-08-24T14:24:45Z,"Please edit the commit comment.  Put breaks in the very long line that is the third paragraph, and remove the last line.
"
1304433990,5043,Paul-Licameli,2023-08-24T14:33:47Z,"""Adequate"""
1304436302,5043,Paul-Licameli,2023-08-24T14:35:22Z,"Do I understand the intention:  If I cut from a project with 60 bpm tempo, and paste into a project with 120 bpm tempo, it is not meant to play back the same, but play twice as fast?  And so the selection change too?"
1304440543,5043,Paul-Licameli,2023-08-24T14:38:15Z,"A test of the branch tells me I have described how it behaves.  Whether that is as design specified, I don't know, but assuming so, I update the QA checklist.

"
1304458265,5043,Paul-Licameli,2023-08-24T14:50:19Z,"`mProjectTempo` can be private and this branch still builds.  Please do that.

Is there a commit I didn't review yet in another branch that needs `mProjectTempo`?  If so, rewrite that to use `Track::GetProjectTempo` which as you see is not a simple accessor.  Remember I rewrote it that way to fix the uninitialized variable that made the error drawing stereo clips.
"
1304485954,5043,Paul-Licameli,2023-08-24T15:11:20Z,"This one line:  I think in an earlier version you duplicated this unnecessarily in `WaveTrack` at places where `Init` had already been called, which was why the member was protected, but I pointed out the redundancy.
"
1304490863,5043,Paul-Licameli,2023-08-24T15:15:09Z,"It builds for me without this inclusion and without Prefs.h
"
1304497323,5043,Paul-Licameli,2023-08-24T15:20:27Z,"Does this added line, with the other at 630, fix a known bug in copy-paste?  Strictly speaking that's not the scope of the PR or the stretching project.  Is there an issue number that it fixes?
"
1304497728,5043,Paul-Licameli,2023-08-24T15:20:48Z,"I will add to the QA checklist anyway
"
1304502614,5043,Paul-Licameli,2023-08-24T15:24:53Z,"The function might be more understandable if you do that stretch only when `!stretchOtherBeforeResampling`

But I understand that if `stretchOtherBeforeResampling`, then the line does nothing because the stretch ratio is already unit.
"
1304513357,5043,Paul-Licameli,2023-08-24T15:33:27Z,"Did experimentation with larger numbers might find an easy way to improve performance?
"
1304520980,5043,Paul-Licameli,2023-08-24T15:39:36Z,"I like this swap for better exception safety, but it is still imperfect.

Now it is set up to happen if an exception occurs before `newSequences` were fully filled, which is also possible because of a dB failure.

So really you need another boolean for a stage of partial success.

That is, `bool swappedOnce = false;` above.  Make the `swap` in the Finally only if `swappedOnce`.  Assign `swappedOnce = true;` after the other swap below.

"
1304555599,5043,Paul-Licameli,2023-08-24T15:57:47Z,"Why this exception?
"
1304560199,5043,Paul-Licameli,2023-08-24T16:01:26Z,"1. What happens inside a `Finally` may happen during stack unwinding, so the called functions should be `noexcept`.  (I don't believe in adding `noexcept` just because you can; but only when there are certain strong reasons for it like here.)

2. This might not restore the state of the other track exactly.  `mRawAudioTempo` in a clip may go from empty to non-empty and not back again.

"
1304561614,5043,Paul-Licameli,2023-08-24T16:02:44Z,"I wonder if instead this should be an assertion that is stated as a precondition.  But then the precondition may need to be repeated for the functions that call this, and so on up the stack until somewhere you can give some convincing argument that the condition is guaranteed.

"
1304563394,5043,Paul-Licameli,2023-08-24T16:04:18Z,"The two places that use this function also use `const_cast`.  I feel some unease.  I might approve reluctantly.
"
1304572521,5043,Paul-Licameli,2023-08-24T16:11:05Z,"Move this to a `default:` case of the `switch` to remove a compile warning.
"
1304590123,5043,Paul-Licameli,2023-08-24T16:27:31Z,"This overload is not used
"
1305005742,5043,Paul-Licameli,2023-08-25T00:57:16Z,"The definition of this function is better now, but it is still not used"
1310213549,5043,saintmatthieu,2023-08-30T12:41:35Z,Spot on.
1314963314,5043,Paul-Licameli,2023-09-04T13:41:21Z,Still unresolved
1315985724,5043,saintmatthieu,2023-09-05T14:28:53Z,I reverted this change - wrong since `mProjectTempo` became part of `ChannelGroupData`.
1315996337,5043,saintmatthieu,2023-09-05T14:36:40Z,"Yes, that's correct. It's a simple UX rule: preserve the length in beats rather than in seconds."
1316032511,5043,saintmatthieu,2023-09-05T15:02:41Z,"The reason is obscure, but there is one.
`copy->ClearSequence(playEndTime, sequenceEndTime)` clears the trimmed data. If we don't call `copy->SetTrimLeft(0)`, one may still think the hidden data is valid.
Further down I call `newClip->ApplyStretchRatio()`. This provisionally sets left and right trim to 0, to reduce the ramping in/out of the effect if possible ...
Note that, in 5-of-6, I remove that call on `newClip`, but this is a healthy change in any case, making changes in the lines below safer."
1316038681,5043,saintmatthieu,2023-09-05T15:06:58Z,"I didn't experiment with larger numbers, no. This number is the hop size for either the analysis or the synthesis (depending on the stretch direction), so it might spare iterations."
1316049842,5043,saintmatthieu,2023-09-05T15:15:24Z,Agreed. Cherry-picked your fix-commit d15f03a1c4ca0b6f59d286ac59862635b3d27457.
1316069242,5043,saintmatthieu,2023-09-05T15:29:57Z,"Now I think this throw behaviour is too strict. This method is used so far in `WaveTrack::PasteWaveTrack` and `WaveTrack::ClearAndPaste`. I cannot think of a reason for either of them not to be callable before they are made part of a project, but maybe I'm not thinking hard enough.
A more pragmatic approach would be for this method to assert and return without doing anything instead of throwing, without stating a pre-condition. The assert might reveal a concrete example where this doesn't hold in the future, yet there might not be any consequence at all (e.g. if no stretching occurred), in which case bothering the user with it would just be annoying to everyone.
Ok for assert without pre-condition ?"
1316084753,5043,saintmatthieu,2023-09-05T15:41:45Z,">  the called functions should be `noexcept`

I never used that keyword before. I notice, though, that
```
void foo() { throw std::runtime_exception(""""); }
void bar() noexcept { foo(); }
```
doesn't yield a warning, which would make even more tedious checking that all nodes of the call tree of `OnProjectTempoChange` also are `noexcept`. Or am I missing something ?"
1316096726,5043,saintmatthieu,2023-09-05T15:51:10Z,"> This might not restore the state of the other track exactly.

I hadn't thought about that, but looks like I'm a lucky guy: `track.GetProjectTempo().has_value()` if and only if `track.OnProjectTempoChange` was called at least once. If it wasn't, then this method doesn't proceed. If it was, then all clips have `mRawAudioTempo` set."
1321898836,5043,Paul-Licameli,2023-09-11T18:08:09Z,"""scope""
"
1321914868,5043,Paul-Licameli,2023-09-11T18:25:06Z,"I still dislike the `const_cast` in two places and the non-obvious reasoning why there is never a net side effect on `WaveClip`.

An alternative is that `ProvisionallySynchronizeProjectTempo` (renamed maybe) takes a reference to a `const WaveTrack` and returns a shared pointer to a new, duplicate WaveTrack that has the project tempo change in it.  Its scope is only as long as this `finally` would be.

Maybe a lot of memory allocations and deallocations but a sharing of all the blocks in the Sqlite database so none of the very expensive things are done.
"
1321918816,5043,Paul-Licameli,2023-09-11T18:28:58Z,"Consider too that duplication of the in-memory WaveTrack structures, but with sharing of Sqlite resources, happens all the time when you push and pop the Undo stack, or even just modify the current entry because of a change of the selected interval.  And we hardly notice the performance."
1321920000,5043,Paul-Licameli,2023-09-11T18:30:07Z,"

Now I think, let the exception stand. Rewrite the function as I suggested so it doesn't mutate other but constructs a copy.

If the preconditions are not satisfied, throw. The two places where this function is called are in pasting and I already made sure years ago with exhaustive examination of call paths that these are safe places to throw and have AudacityApp::OnExceptionInMainLoop catch it and deal with it.
"
1322570488,5043,saintmatthieu,2023-09-12T07:28:35Z,"That's a good idea, better than this kind of magic I was doing.
See 8604d5726a239849bdd80636a3d948c31e076ccd."
1322756916,5043,Paul-Licameli,2023-09-12T09:35:30Z,"The commit comment ""Preserve beat length of selection when copying across projects"" describes this part of it.  Perhaps the rest of this commit needs other commit comments, whether in the same or a separate commit.


"
1322767017,5043,Paul-Licameli,2023-09-12T09:43:47Z,I don't remember what this line fixes -- was it only necessary when you were using temporary side effects on clips?
1322767574,5043,Paul-Licameli,2023-09-12T09:44:18Z,"But this change makes sense regardless
"
1322772367,5043,Paul-Licameli,2023-09-12T09:48:10Z,"`@pre`
"
1322776133,5043,Paul-Licameli,2023-09-12T09:51:18Z,"`leader` is assumed to be non-null, so I would instead type it as `WaveTrack *& leader` and in the header
write a Doxygen comment
`@param[out] leader`
"
1322825731,5043,Paul-Licameli,2023-09-12T10:24:46Z,"A small change.  But I remember some of the surprises in getting effects figured out, were the unintended consequences of changing `<` to `<=` tests in certain `WaveTrack` and `WaveClip` member functions that were more widely used.

Are there such surprises here?

I did review all uses of `GetClipTime` and now, I think not.

"
1322848756,5043,Paul-Licameli,2023-09-12T10:39:18Z,"This simple change raises similar doubts.  But I presume you have retested the destructive effects with this change?  This PR is based on all of that other stuff.

I have in fact noticed zero-length clips sometimes as a thing that ought to be debugged later.

Is there a way of making zero length clips in 3.3.3 that gets fixed by this?

Maybe there are existing issues about them?
"
1322866977,5043,Paul-Licameli,2023-09-12T10:57:24Z,"I might write this without the vector:

`const auto range = tracks.Any<PlayableTrack>() + [&](const auto pTrack){ return SyncLock::IsSyncLockSelected(t) || (notLocked && playable); }`
"
1322867386,5043,Paul-Licameli,2023-09-12T10:57:48Z,"Then just use `range` twice in range-for statements
"
1322869820,5043,Paul-Licameli,2023-09-12T11:00:11Z,"Strings.  @LWinterberg  ?
"
1322871847,5043,Paul-Licameli,2023-09-12T11:02:16Z,"I see a repetition of these strings and would like to see a convenience function to make the progress indicator, so the strings occur in just one place
"
1322887539,5043,Paul-Licameli,2023-09-12T11:17:14Z,"A conditional call to `Join` is now unconditional.  Does this change behavior?

In the case that the selected portion of track for EQ contains split lines, not at the extremes of the selection, then this is intended to put the lines back where they were.  Does this conserve that behavior?
"
1327184799,5043,saintmatthieu,2023-09-15T11:53:49Z,"Not sure anymore either, but it still is better this way: `WaveClip::OnProjectTempoChange` is the only way a clip's project tempo can be set, hence `WaveTrack::InsertClip` calling it with `oldTempo == nullopt`.
Best would be to add a dedicated API, but I'm lazy."
1329514717,5043,saintmatthieu,2023-09-19T03:04:54Z,"When I changed the boundary check in the first place, it was to redefine clip intervals as standard closed-begin, open-end. Consistently, and for adjacent clips, `clipA.GetPlayEndTime() == clipB.GetPlayStartTime()`.

This is a place that went against this rule of thumb that I haven't addressed earlier, and would prevent me from using `GetClipAtTime` in `PasteOne`: there I don't want a clip whose end is at `t0` to interfere.

I also looked at uses of `GetClipAtTime`. It's used in `GetEnvelopeAtTime`. My testing of envelope editing showed that it still worked properly. Will add a QA checkbox.
"
1329555946,5043,saintmatthieu,2023-09-19T04:15:37Z,"Not that I know of. #2263 wrongly reports zero-length clips, but that's actually the click-to-merge vertical line.
In any case, it'd be wrong indeed to split a track on the first sample of a clip.
One could even question whether a track should be splittable at the second-last sample of a clip, leaving a length-1 clip, barely more usable than a length-0 clip. But I didn't venture that far."
1329662375,5043,saintmatthieu,2023-09-19T07:02:43Z,"IIUC, the `+` overload works like an ""&&"", and your proposal would yield another condition: `playable && (IsSynCLockSelected || notLocked)`.
I think what could work is
```
const auto range = tracks.Any<Track>() + [&](const auto pTrack) {
      return SyncLock::IsSyncLockSelected(t) ||
             (notLocked && dynamic_cast<const PlayableTrack*>(pTrack) != nullptr);
   };
```
but that's not so important."
1329663385,5043,saintmatthieu,2023-09-19T07:03:52Z,Addressed - see proposal in more recent commits.
1329664152,5043,saintmatthieu,2023-09-19T07:04:40Z,Part of the utility functions proposed in recent commits.
1329771617,5043,saintmatthieu,2023-09-19T08:36:51Z,"I think that `clipRealStartEndTimes` contain the original clip boundaries, and `Join` isn't called across any of these.

But I'm trying to figure out if this function is needed at all. What it does:
Takes `newContents`, a one-clip track with the output of the effect, replaces the content of `oldTrack` in `region = [start, start + len)` with it, preserving existing clip boundaries strictly within `region`, but merging at `start` if it splits a clip underneath, and likewise for `start + len`.
This is the intended behaviour for other effects - if merging doesn't mean stretch-rendering, else there is no merging. Can you recall why this is a special case ?

Also, it crashes on `master` for [this project](https://github.com/audacity/audacity/files/12657643/test.zip): not modifying the selected region, apply some eq. `GetClipAtTime` above returns an unchecked nullptr. I haven't got to the bottom of this but if this function isn't needed I may not have to. #5138 doesn't repair it but this branch does somehow.
"
1332881044,5043,Paul-Licameli,2023-09-21T11:03:39Z,"This commit eliminates some duplication.  But it doesn't do enough.

See this in `EffectOutputTracks.cpp`:

```
      auto reportProgress = [&](double progressFraction) {
         const auto overallProgress = (count + progressFraction) / numTracks;
         const auto result = progress->Poll(overallProgress * 1000, 1000);
         if (result != ProgressResult::Success)
            throw UserException {};
      };
```

This lambda needs to be defined only once, and reusable.  In the other two places that use the strings, they repeat part of this lambda, but not the reset of it -- therefore those progress indicators have non-functional Cancel buttons!

The utility should take a reference to `count` and construct a lambda that captures it.  The utility returns a `std::function` and comments that it may throw `UserException`.
"
1332886781,5043,Paul-Licameli,2023-09-21T11:08:58Z,"There is a fourth place -- in AutoDuck.  The identical lambda could be eliminated.

The utility could construct the progress indicator.  Do you know C++14 extended lambda capture?  It lets a lambda hold a `unique_ptr` which C++11 could not do.

```
[
   progress = MakeProgress(...),
  ...
]
```

There is need to vary the progress bar message for AutoDuck but nothing else.  So the utility could take that as another parameter.
"
1332900153,5043,Paul-Licameli,2023-09-21T11:21:47Z,"You would need another parameter too, the denominator of the division.
"
1332907224,5043,Paul-Licameli,2023-09-21T11:28:47Z,"Okay, this commit totally rewrites the previous.  But it does it with a very weird and unnatural inversion of control.  What led to this choice?

I think it would make more understandable code if instead you had a factory making a function object that you just call to update the user, and you write loops more naturally, just bumping the count captured by reference in the factory.

Did you not do this just because you could not figure out the lambda capture?

Abstracting just the test for user cancellation means decisions about how to iterate the range aren't forced -- and you would not need the line above but could iterate with `rbegin` and `rend` as it was.

Really I don't like this.  Try it as I suggested.

"
1332922020,5043,Paul-Licameli,2023-09-21T11:42:49Z,"This commit reuses the utility, for nested loops.

Maybe I understand better now why that led to the strange inverted flow of control.

Still I don't like it.  The simpler alternative to eliminate repetition would be to write another utility that wraps one progress reporter in another, that takes another denominator and another reference to a count.
"
1333211418,5043,Paul-Licameli,2023-09-21T15:00:18Z,"This commit is small, but I remember now the doubts I had about it.  The changes in Generator led me here, and just that led me to separate the destructive effects branch first, and get all of its problems figured out first.

My doubt is because is that the boolean `merge` governs more than just the internal splitting of the new pasted clip:  see all the rest in `ClearAndPasteOne` under `if (merge && splits.size() > 0)`

I was thinking then, and write it down now, that I think the correct fix may require more boolean arguments to control the details more finely.
"
1333221516,5043,Paul-Licameli,2023-09-21T15:06:07Z,"Contrast the behavior:
- Select part of a track, with a stretch.  Apply an effect. Drag the new clip to another track.  Drag (don't stretch) clip edges.
- Similar but pasting instead of applying an effect (and there doesn't need to be any stretch).

For the effect, the clips containing unchanged data retain hidden clip information.  But for paste -- as a consequence of this commit -- they do not.  (Without this commit, of course there were no new splits at the selection bounds.)

Which is the correct behavior?  I think there should be consistency between these cases.

As for the new clip in the middle -- for the effect, it turns out to preserve the rest of the clip, stretched but without the effect applied.  (But #5220 will change that behavior for performance reasons).

For paste, the middle clip can still carry hidden data from the place from which it was originally cut or copied.
"
1334305998,5043,Paul-Licameli,2023-09-22T12:20:10Z,"The argument `startTime` is now unused, so remove it
"
1334321714,5043,Paul-Licameli,2023-09-22T12:35:18Z,"This needs scope only within the `else` block
"
1334325421,5043,Paul-Licameli,2023-09-22T12:38:52Z,"One could rewrite this with `std::lower_bound`
"
1335545546,5043,saintmatthieu,2023-09-25T08:17:46Z,"Is the following a correct understanding of your proposal?
```
ProgressReporter
MakeChildReporter(size_t total, size_t& count, ProgressReporter parent)
{
   return [&](double progress) { parent((count + progress) / total); };
}
```
```
   size_t count = 0;
   auto childReporter = MakeChildReporter(NChannels(), count, reportProgress);
   for (auto pChannel : TrackList::Channels(this)) {
      pChannel->ApplyStretchRatioOne(startTime, endTime, childReporter);
      ++count;
   }
```
If it is, yes, it's more standard and straightforward at first, but as client you still ought not to forget to update your `count`, which I did, scatterbrained me, forget already (but which you spot during review).

So I wonder what is better: straightforward but incomplete, or quirky but complete."
1335604306,5043,Paul-Licameli,2023-09-25T09:07:58Z,Yes like that BUT — the lambda must capture with = not & or you get a dangling reference!
1335661830,5043,saintmatthieu,2023-09-25T09:55:01Z,"Great catch, thank you.
We could add one more boolean, to control the `split` argument of the internal call to `HandleClear`, currently hard-coded to false. This would solve the problem you describe, but would introduce new problems: ""There is not enough room ..."" if the pasted data is larger than `[t0, t1]`, and a unfilled gap if the pasted data is less than `[t0, t1]`.
And me believing I was done with it ..."
1335742997,5043,saintmatthieu,2023-09-25T11:16:27Z,[Generalize ClearAndPaste to allow preservation of cleared interval](https://github.com/audacity/audacity/pull/5043/commits/fbfbbf5f5d1ab873db6eec0437a6130a0def8f41)
1335780924,5043,saintmatthieu,2023-09-25T11:55:53Z,"... which makes me realize that, in `WaveTrack::PasteWaveTrack` and `ClearAndPasteOne`, the `endTime` argument was wrongly passed as `insertDuration` argument to `PasteOne`. I suppose this wasn't noticed by QA because these two outer methods are called with temporary tracks, all with their first clip at 0."
1335798729,5043,saintmatthieu,2023-09-25T12:12:00Z,I find this simpler to understand.
1336097248,5043,saintmatthieu,2023-09-25T16:00:21Z,"Following-up our discussion, I tried your idea to get inspiration from `std::for_each` - _that_ is the kind of suggestion I was hoping you were going to make from the beginning. Works like a charm, see [More standard-conform SplitProgress](https://github.com/audacity/audacity/pull/5043/commits/3d0ba5ae52150a11564272ab476aec01bc4c937d)."
1337008460,5043,Paul-Licameli,2023-09-26T10:41:33Z,"Just make another deduced template type parameter for the callable.  Don't implicitly and unnecessarily construct a `std::function` from a lambda.  See how `for_each` deduces the callable type.
https://en.cppreference.com/w/cpp/algorithm/for_each

"
1337009849,5043,Paul-Licameli,2023-09-26T10:42:46Z,"Now the utility function is nicer to use, but I feel that BasicUI.h is the wrong place for it.  I'm not sure what is the right place for it.
"
1337014141,5043,Paul-Licameli,2023-09-26T10:46:49Z,"`ProgressReporter` too can be a deduced type, allowing more generality and avoiding some more `std::function` constructions.
"
1337021340,5043,Paul-Licameli,2023-09-26T10:53:53Z,"""intersected"" typo
"
1337025914,5043,Paul-Licameli,2023-09-26T10:58:10Z,"The loops and nested loops surely look much nicer now.

I think the function needs a better name than `SplitProgress`.  Perhaps `WithRedenominatedProgress` and some comments explaining the change of denominator as the size of the given iterator range.

"
1337054677,5043,Paul-Licameli,2023-09-26T11:25:18Z,"Not just commenting assertions but adding one.  So can you prove this new one is satisfied at the point of the call?

"
1337638631,5043,saintmatthieu,2023-09-26T18:41:42Z,"I made several attempts at finding a better name, but then came to think that it wasn't such a bad name after all.
Added a description in 1bc93b7."
1337640474,5043,saintmatthieu,2023-09-26T18:43:38Z,But doesn't the user then loose the information that it takes a double and returns a void just by looking at the function's signature?
1337641818,5043,saintmatthieu,2023-09-26T18:45:05Z,"Provided that the comment I added is correct, yes."
1338442899,5043,Paul-Licameli,2023-09-27T11:08:36Z,"Indentation
"
1338443933,5043,Paul-Licameli,2023-09-27T11:09:42Z,"Space after ,
"
1340008513,5043,Paul-Licameli,2023-09-28T11:54:12Z,"Should you reassign `clipAtT0` after `SplitAt`?  To be sure you shift the correct one and make no assumptions about how `SplitAt` mutates the clips previously present?

"
1340105094,5043,saintmatthieu,2023-09-28T12:54:36Z,"Yes, that's a potential crash indeed. Will publish a fix ..."
1347001862,5043,Paul-Licameli,2023-10-05T08:21:03Z,"I see the commit that fixes envelopes.  I read through all uses of envelopes in this file, to see if it is complete.

Do these need any changes?  I think not, but let me know the code paths were tested too and recommended to QA.

`InsertSilence` 

`AppendSilence`

`ClearAndAddCutLine`

`ExpandCutLine`
"
1347007576,5043,Paul-Licameli,2023-10-05T08:25:03Z,"This comment raises a lot of questions about a function used in many places.  Did you study all those uses?
"
1347012550,5043,Paul-Licameli,2023-10-05T08:28:47Z,"You don't need the comment above.  We have done the work to guarantee it now that this is always so: upgrading the opening of old files with misalignment, and changing what happens when mono tracks are joined into stereo.
"
1347017085,5043,Paul-Licameli,2023-10-05T08:32:03Z,"That comment line might be kept
"
1347020577,5043,Paul-Licameli,2023-10-05T08:34:45Z,"I see this commit that changes join behavior, and I ask whether it might make unnecessary changes in case clips already have equal stretches.
"
1347037548,5043,Paul-Licameli,2023-10-05T08:47:11Z,"If the function can already return false for failure, and uses of it are checked, maybe there should not be an assertion.
"
1347115648,5043,Paul-Licameli,2023-10-05T09:38:49Z,"I'm confused.  `true` not `false` must be passed if the intention is NOT to change behavior in this path, as the comment suggests.  That is, to pass the default for `split` to `PasteOne`, which is `true`, but is also the negation of `merge`.

Places where you can reach this: 
- Repeat effect
- Paulstretch
- Cut, copy, split cut by label
- Track::SyncLockAdjust (but is this in fact unreachable because of overriding functions?)

Other places, but where I think the destination track is always empty so it does not matter:
- Stereo to mono
- Benchmark
"
1347123797,5043,Paul-Licameli,2023-10-05T09:43:43Z,"Reviewing this commit, I looked at all uses of `PasteOne`, and there is one call that was not rewritten, because it passes a defaulted value.

That is in sync-lock adjustment of a WaveTrack to lengthen it with silence.

Was this case tested?  Is the desired behavior to insert silence without splits, or with them?  Is this consistent with other insertions of silence, like the Silence Audio command?

"
1347132765,5043,Paul-Licameli,2023-10-05T09:49:16Z,"The commit that made this change fails to compile because one more use of `split` remains in `WaveTrack::PasteOne`
"
1347149817,5043,Paul-Licameli,2023-10-05T09:59:31Z,"I see an exact comparison of floating point values, and I want to know whether they were first rounded to a multiple of the same inverted rate.  That's not obvious in context here.
"
1347154419,5043,Paul-Licameli,2023-10-05T10:02:20Z,"And:  please amend the comment for this commit, with some line breaks
"
1347155278,5043,Paul-Licameli,2023-10-05T10:02:47Z,"This repairs the build failure of two commits previous
"
1347159059,5043,Paul-Licameli,2023-10-05T10:05:09Z,"So, behavior may change in the case editing can't move clips, and merge is true.  The lines after this small-scope `if` happen when they did not happen before.
"
1347162011,5043,Paul-Licameli,2023-10-05T10:06:50Z,"Same question here as in the previous commit:  should times be rounded before comparison?
"
1347165474,5043,Paul-Licameli,2023-10-05T10:09:13Z,"Good catch, now I'm embarrassed I didn't flag this problem in earlier reviews
"
1347177601,5043,Paul-Licameli,2023-10-05T10:15:21Z,"Remember, I prefer to keep include directives sorted by the last path component only, because path prefixes will often change (shorten) as we make more libraries.  So omit this please.
"
1347216475,5043,Paul-Licameli,2023-10-05T10:43:40Z,"Ignore what I said about exception safety:  this is still right.

But I would like to conserve this assertion of the postcondition.
"
1347227511,5043,Paul-Licameli,2023-10-05T10:53:54Z,"Yes, this corrects a mistake I introduces at af5911aa2e59f1ebcdc0c4e5e8c8e9581fb49dd5
"
1347264826,5043,saintmatthieu,2023-10-05T11:27:10Z,"Not tested but examined: the other places pass unstretched time values to the envelope methods, which looks correct. I added QA test cases nevertheless 👍 "
1347265299,5043,saintmatthieu,2023-10-05T11:27:33Z,No I haven't.
1347267718,5043,saintmatthieu,2023-10-05T11:29:40Z,"That doesn't invalidate this statement that we are assuming equal boundaries, though, does it?"
1347277062,5043,saintmatthieu,2023-10-05T11:34:58Z,"Ah, crap, I forgot that check ... Thank you !"
1347280362,5043,saintmatthieu,2023-10-05T11:36:28Z,Yeah sure.
1347291255,5043,Paul-Licameli,2023-10-05T11:44:40Z,"We do assume that, and there will be nothing left TODO later"
1347302944,5043,saintmatthieu,2023-10-05T11:54:19Z,"Right, should be `true`.
Your mention of Paulstretch made me uncover another bug, where when applied to a stretched clip results in the not-enough-room error. I'll have a fix commit for that."
1347311317,5043,saintmatthieu,2023-10-05T12:01:27Z,"> Reviewing this commit, I looked at all uses of PasteOne, and there is one call that was not rewritten, because it passes a defaulted value.

The default value was negated, and so was its usage in `PasteOne`, so all good here. The intention was from the very start not to change the behaviour for existing usages, so I haven't reconsidered them."
1347325893,5043,saintmatthieu,2023-10-05T12:13:31Z,"> I see an exact comparison of floating point values, and I want to know whether they were first rounded to a multiple of the same inverted rate. That's not obvious in context here.

You're right, adding some rounding at the beginning of that method."
1347326823,5043,saintmatthieu,2023-10-05T12:13:55Z,"> And: please amend the comment for this commit, with some line breaks

Where do you see the need for line breaks?"
1347334124,5043,saintmatthieu,2023-10-05T12:19:01Z,They probably should. Addressing ...
1347489450,5043,saintmatthieu,2023-10-05T14:10:43Z,"I remember your objection from a previous PR, but in that case the headers were ordered if one omitted the `../..`. Here they were out of order whether accounting for path prefixes or not."
1348897726,5043,Paul-Licameli,2023-10-06T15:46:49Z,"Why is `preserve` non-default?  Other effects using a time warper pass the default `true` -- except Nyquist, which lets the Lisp code choose.

And now I also see that NoiseReduction uses non-default for `merge` and I question that other inconsistency.

"
1348915632,5043,saintmatthieu,2023-10-06T16:02:41Z,"Just being extra cautious: the code before didn't preserve splits, and I didn't want to change that behaviour here."
1348917117,5043,saintmatthieu,2023-10-06T16:03:49Z,"Motivation in NoiseReduction.cpp would have been the same, I should think."
1348922399,5043,Paul-Licameli,2023-10-06T16:07:53Z,"Must you also copy `mProjectTempo` to be sure `GetStrectchRatio` returns the same for both clips?
"
1348924445,5043,Paul-Licameli,2023-10-06T16:09:47Z,"This part looks good -- but you might even add `+ 1` to this `begin`
"
1348936136,5043,saintmatthieu,2023-10-06T16:20:45Z,"This used to be the case when I put my Designer cap on and decided the leftmost ratio were to be applied to the other clips, but that's not true anymore: all clips must be rendered unless there is consensus."
1348940881,5043,saintmatthieu,2023-10-06T16:24:43Z,"I don't expect there to be a use case for that: an empty clip normally is something freshly created for future insertion into a track, at which stage it gets the project tempo update.
But it wouldn't hurt to be extra cautious. Will add a to-be-squashed commit for that."
1348952204,5043,Paul-Licameli,2023-10-06T16:29:39Z,Oh I'm a fool
1255092217,4881,Paul-Licameli,2023-07-07T01:18:36Z,Doxygen
1255092935,4881,Paul-Licameli,2023-07-07T01:19:42Z,No
1255094311,4881,Paul-Licameli,2023-07-07T01:22:04Z,Project tempo is not copied.  I might understand why but comment that
1255094586,4881,Paul-Licameli,2023-07-07T01:22:29Z,Here too
1255567193,4881,Paul-Licameli,2023-07-07T09:50:22Z,"First commit fails to build.  WaveformView.cpp and SampleHandle.cpp.
"
1255579024,4881,Paul-Licameli,2023-07-07T09:59:37Z,"`GetSequenceStartSample` is now used only in `GetBestBlockSize` and that function exists only to give hints for destructive effects that loop over all samples of a channel, grabbing them in blocks and processing.

So that too may disappear, later.
"
1255584134,4881,Paul-Licameli,2023-07-07T10:03:43Z,"Should all mentions of ""play"" in function names or comments in this header file also change to ""visible"" for consistency?

"
1255589990,4881,Paul-Licameli,2023-07-07T10:08:44Z,"The commit that changes this name fails to compile SpectrumView.cpp and SpectrumCache.cpp
"
1255597405,4881,Paul-Licameli,2023-07-07T10:15:00Z,"The commit for pencil tool does some irrelevant things in Spectrum view.

I'd like the minimal changes to maintain compilation to go into the previous commit, and all the more substantial changes attempting to correct spectrum view, in the last one.
"
1255598241,4881,Paul-Licameli,2023-07-07T10:15:45Z,"... But compilation of spectrum code is still broken in this commit anyway.
"
1255675636,4881,Paul-Licameli,2023-07-07T11:22:25Z,"SampleHandle.cpp is the first part of this pull request that I am studying more deeply.

I see how this function, used in hit testing, now changes rate when inside a clip.

But there is still a use of `WaveTrack::GetFloats` in `SampleHandle::HitTest.`

Should we eliminate all uses of `GetFloats` in here?

Should hit test fail if the cursor is not inside the x coordinate boundaries of a clip?  (or within some pixel width tolerance or the boundaries?)


"
1255677502,4881,Paul-Licameli,2023-07-07T11:24:07Z,"I also see `GetEnvelopeAtTime` is used, but that calls `GetClipAtTime`, so if the latter hit-tests correctly for the x coordinate, so does the former.
"
1255681050,4881,Paul-Licameli,2023-07-07T11:27:24Z,"`Envelope::GetValue` is also called, passed a sample duration.

Maybe that use of rate needs to be corrected for the clip, and maybe it is unimportant when getting just one value.
"
1255685692,4881,Paul-Licameli,2023-07-07T11:31:45Z,"I'm looking at what did not change in these routines, as well as what did.

There are sampleCount members of SampleHandle.h and the track's LongSamplesToTime is used to quantize the time value to a discrete sample count, by the WaveTrack's rate.

I think that should no longer happen -- instead it should always quantize according to a clip's rate and stretch.
"
1255702075,4881,Paul-Licameli,2023-07-07T11:46:09Z,"Some edge-case behavior of the paintbrush tool will change.

First, maybe two clips are touching, you click just right of the boundary, and where before the left hand clip might be changed too, now it isn't.

Secondly, this routine has an asymmetry.  Fetching some initial out-of-bounds zeroes lets it succeed, but you fail instead of fetching right.

To be really conservative, getting and setting of samples from neighboring clips, when there are only unit sample rations (because the user doesn't use tempo or time stretch at all), should work.

But this is a very edgy edge-case in a little known and used feature.
"
1255715005,4881,Paul-Licameli,2023-07-07T11:58:41Z,"Good question, and I should have asked it too about the other use of `Envelope::GetValue` in this file.

The previous commit ""Project tempo changes affect WaveClip stretch ratios ..."" updates the times and durations stored directly in the WaveClip immediately whenever there is a tempo change.  And presumably that will happen too when adjustment of individual clips is implemented.  And therefore when you hit-test clips by time, no additional accounting for ratio is needed.

But you did not, in that commit, to anything to adjust the envelope values.

Either you should do that, or else adjust time with ratios here.

Maybe it's easier to understand to update all times and durations, in Envelope as well as WaveClip, to complete this.

And maybe that would incidentally fix other misbehavior of envelope display that you showed me yesterday?
"
1255724157,4881,Paul-Licameli,2023-07-07T12:07:24Z,"I'm reviewing changes in Drag now, paying attention to what did not change as well as what did.

I mentioned before the two `sampleCount` typed members of SampleHandle.  They are 

```
   sampleCount mClickedStartSample{};
   sampleCount mLastDragSample{};
```

and they are used in drag.  But they depend on `LongSamplesToTime` and `TimeToLongSamples` which should be avoided now.

Change those two to store pixel x coordinates instead -- that is, `ViewInfo::TimeToPosition` values will quantize the time, suitable for a comparison of click position with drag position.
 "
1255727060,4881,Paul-Licameli,2023-07-07T12:09:58Z,"Compute a time value at the top of Drag, not a sampleCount value s0.
"
1255730947,4881,Paul-Licameli,2023-07-07T12:13:30Z,"I have no more to say about the Sample handle.

It was good to review this -- and understand how pixel to time and inverse mappings will work with the new data structures, and to understand what's missing for envelope.
"
1255732539,4881,saintmatthieu,2023-07-07T12:14:52Z,"I haven't felt the need to change these, possibly because these refer to time points, hence stretching makes no difference."
1255896420,4881,saintmatthieu,2023-07-07T14:17:53Z,This morning I addressed spectrum drawing in a decent way I think. I squashed those changes and force-pushed. These lines are outdated.
1255942967,4881,saintmatthieu,2023-07-07T14:48:02Z,"Nice that you found that `GetValue` use and the potential for confusion the sample-step argument has.
AFAICS in the implementation, step size only becomes relevant for queries of more than one value. This step size defaults to 0. With more time I'd consider removing that optional argument and hard-code it to zero when it calls `GetValues` underneath. But here I'll just use the default value instead of the sample period."
1255947453,4881,saintmatthieu,2023-07-07T14:50:51Z,"> Should we eliminate all uses of GetFloats in here?

It's preferable ; using `GetFloatAt` instead. Thank you."
1255952870,4881,saintmatthieu,2023-07-07T14:54:20Z,"> Maybe it's easier to understand to update all times and durations, in Envelope as well as WaveClip, to complete this.

Indeed this is the approach taken, in that one-liner commit, calling `mEnvelope->RescaleTimesBy(ratioChange)` when project tempo change is reported."
1288491442,4881,Paul-Licameli,2023-08-09T13:32:57Z,"Reviewing the first commit.  Rather than removing all bounds checks on t, I think you should just change the initialization of `mRange`.  See how there are checks on the neighboring clips, to limit the drag so that clips do not overlap.

Are you sure that stretching will still also avoid clip overlap?  Also will it avoid dragging the left end of the clip beyond the right end?  (Though I suppose negative stretch on a clip could make sense in theory)
"
1288649198,4881,Paul-Licameli,2023-08-09T14:51:54Z,"Uniform initialization syntax?
"
1288757612,4881,Paul-Licameli,2023-08-09T15:44:01Z,"Skipping ahead to one of the easier small commits:  Persistency looks correct.  I might this up while I had an excuse to change it, eliminating the repetition of string literals like ""rawAudioTempo"" and the rest, using named constants.

Take or leave that suggestion.
"
1288793795,4881,Paul-Licameli,2023-08-09T15:56:19Z,"I would rename it `RemapCutlines` and only do the `ShiftBy`, which later determines the point to paste at, when the cutline is later expanded. 

Only then, do the `StretchRightTo` part.

This delays not only the expense of stretch calculation until it is really needed, but would also avoid compounding of data losses in case stretching happens more than once before cutline expansion.

`WaveClip::ExpandCutLine` is already defined in terms of `WaveClip::Paste`, so maybe whatever you do to change Paste will also cover cutline expansion -- except that, perhaps the new clip boundaries should not be made for cutline expansion.
"
1288923727,4881,Paul-Licameli,2023-08-09T17:08:23Z,"You mean ""Stretches"" not ""Sets""
"
1288930148,4881,Paul-Licameli,2023-08-09T17:14:31Z,"You add this comment, only to remove it in a later commit.  Maybe amend this commit instead.
"
1288971606,4881,Paul-Licameli,2023-08-09T17:48:36Z,"I think the comments don't match the function names and are confusing.

""StretchLeftTo"" is really stretching the left bound while fixing the right bound.  The clip is stretched ""From"" the invariant right visible bound ""to"" a new left bound.

Or say ""Stretches the left from its present position to the absolute time""

It would also be good to comment that nothing happens if `to` is right of the present right bound.

Mutatis mutandis for the other function.
"
1289807213,4881,Paul-Licameli,2023-08-10T09:06:07Z,"Reviewing the fifth commit.  If I read the function above in isolation, I see there might be a crash if when `oldTempo.has_value()` but `mProjectRatio` does not.

I had to reread other code outside of WaveClip to convince myself the crash won't happen (`WaveTrack::InsertClip`).

I would prefer you just crash-proof the function by changing the numerator  to
`mProjectTempo.value_or(*oldTempo)`"
1289811957,4881,Paul-Licameli,2023-08-10T09:09:53Z,"Then, more than that:  I think you are making an assumption that `mProjectTempo` is a cache of the previously seen `newTempo` value, which is expected to be the same as `oldTempo`.  The cache is needed for `GetStretchRatio`.

So you can use an assertion to document this assumption.  It won't crash release code if violated, but violations might mean something plays at wrong tempo.

So, a precondition:
`assert(!(mProjectTempo.has_value() && oldTempo.has_value()) || *mProjectTempo == *oldTempo);`

Re-stated maybe informally in the header file: ""@pre First ever invocation on this object, or else `oldTempo` equals the last seen `newTempo`""
"
1289816243,4881,Paul-Licameli,2023-08-10T09:13:33Z,"I see this change, and the first thing I think is, was similar stretching of `GetVisibleSampleCount` also done where needed at every other call of that function or use of its underlying member variables?

I don't know the answer just now.  It's not so quick to determine that.  Code review often means examining what did not change, not only what did change.
"
1289818359,4881,Paul-Licameli,2023-08-10T09:15:18Z,"I read this, and I want to change the function name to `DurationToSamples`.  If this change is correct, that better describes the meaning of the return value.  As with the distinction of durations from time points (as types!) in std::chrono.

"
1289818870,4881,Paul-Licameli,2023-08-10T09:15:43Z,"And then I would reexamine every use of the function to be sure they are correct.
"
1289821070,4881,Paul-Licameli,2023-08-10T09:17:39Z,"This too might change its name
"
1289830556,4881,Paul-Licameli,2023-08-10T09:24:39Z,"This function could be private, and instead `GetPlayStartTime` and `GetPlayEndTime` can be commented, that the return values are always multiple of the inverse of the track's stored rate, but that rate is independent of tempo changes or stretch.
"
1289838970,4881,Paul-Licameli,2023-08-10T09:30:54Z,"This function is not yet used at the commit I am reviewing.  Can it be made private?
"
1289842871,4881,Paul-Licameli,2023-08-10T09:34:12Z,"What this function really does, is get the play end time, which is on the realtime time-line, but then subtract one sample duration, but that duration is on the different scale of the track's internal rate unadjusted for stretch.

Am I mistaken or is the purpose confused?
"
1289846959,4881,Paul-Licameli,2023-08-10T09:37:12Z,"The correction by `GetAppendBufferLen` was removed.  Was that your omission or an intended bug fix?
"
1289859277,4881,Paul-Licameli,2023-08-10T09:44:27Z,"You are changing edge case behavior!

I don't know what subtle off-by-one errors may result, or may be corrected.

I looked back in history and found this comment added at commit e5dc8928dcc3a26bbd878d85682e9dbc1fd6f492 which references  https://bugzilla.audacityteam.org/show_bug.cgi?id=2288

```
// Bug 2288 allowed overlapping clips.
// This was a classic fencepost error.
// We are within the clip if start < t <= end.
// Note that BeforeClip and AfterClip must be consistent 
// with this definition.
```
This commit changed < to <= for the test at the right boundary.

I suggest you go to the Bugzilla page, and do the steps to reproduce, to be sure there is no regression.
"
1289860629,4881,Paul-Licameli,2023-08-10T09:45:17Z,"See also later commits 1cc2f3b6fe250c71fc919b5738e726f360d1758d, a58328c3df0e9ace0362c28e93f449dba3322ee0, to understand the ancestry of this function."
1289867121,4881,Paul-Licameli,2023-08-10T09:50:24Z,"Please comment these new data members and also the old ones.

The invariant assumed for `mSequenceOffset`, `mTrimLeft`, `mTrimRight` are that they are always realtime durations.

But the sample interval `1 / mRate` is NOT necessarily realtime duration.

`mClipStretchRatio` is used in `GetStretchRatio` which computes the factor, by which the sample interval is multiplied, to get a realtime duration.
"
1289869862,4881,Paul-Licameli,2023-08-10T09:52:34Z,Should instead `GetStretchRatio() / mRate` be the subtracted term?
1289874104,4881,Paul-Licameli,2023-08-10T09:56:07Z,"Also:  at commit 1cc2f3b6fe250c71fc919b5738e726f360d1758d, Vitaly changed some member function names but neglected to update the comment.

I would not only fix this, but improve the statement:

`BeforePlayRegion, AfterPlayRegion, and WithinPlayRegion are mutually exclusive and exhaustive.`

And now I must prove to myself that this remains true.  And that was easily done with inspection.
"
1289877734,4881,Paul-Licameli,2023-08-10T09:59:11Z,"What you assert at the top of this and the following new functions should be mentioned in the header file comments as `@pre`
"
1289922506,4881,Paul-Licameli,2023-08-10T10:30:15Z,"This function is true in case the play region is a proper subset of [t0, t1)
"
1289951582,4881,Paul-Licameli,2023-08-10T10:57:56Z,Maybe `IntersectsPlayRegion` -- this is the non-disjointness test
1289953251,4881,Paul-Licameli,2023-08-10T10:59:31Z,Maybe it is correctly used but maybe the name misleads. 
1289955042,4881,Paul-Licameli,2023-08-10T11:01:17Z,"This one is the test for what you might describe as ""properly partial overlap"" excluding the case that either interval is a subset of the other"
1289955952,4881,Paul-Licameli,2023-08-10T11:02:12Z,"Or simply ""IncludesPlayRegion""?
"
1289959253,4881,Paul-Licameli,2023-08-10T11:05:32Z,"That name is unsatisfactory -- rather ""PlayRegionWithin"" ?

Its the interval that extends the play region, not the opposite.  When I read a member function name, I think of `this` as the subject of whatever verb is in it.

All right, some better naming is needed for this set of functions, and I haven't necessarily given the best names yet.
"
1289972224,4881,Paul-Licameli,2023-08-10T11:19:00Z,This change is not equivalent to the original.  Do you mean `ExtendsPlayRegionOnBothSides`
1289984388,4881,Paul-Licameli,2023-08-10T11:31:08Z,"Maybe you did this at a later commit -- but while I review ""Make waveform display work again"", I see that the `0.5` should be changed to `true`
"
1289992943,4881,Paul-Licameli,2023-08-10T11:39:26Z,"The variable name might be updated.  `sppMatch` perhaps.  And update ""pps"" in the comment.
"
1290005838,4881,Paul-Licameli,2023-08-10T11:49:36Z,"I assume you change this line in a later commit, but why not make it right in this commit?
"
1290029961,4881,Paul-Licameli,2023-08-10T12:11:33Z,"I have a doubt about the correctness.  Where did the `averagePixelsPerSample` value come from?  I found it in the function `CalculateAdjustmentForZoomLevel`.  That function uses clip rate but not stretch ratio.  So I think it computes an incorrect pixels per sample value.  I'm not sure what consequences follow.
"
1290034967,4881,Paul-Licameli,2023-08-10T12:15:43Z,"I think the fix for that may just be to initialize `ClipParameters::rate` accounting for ratio, and also remove `stretchRatio` in `DrawClipWaveform`

and maybe I haven't seen that yet in a later commit where you did it?
"
1290049746,4881,Paul-Licameli,2023-08-10T12:27:53Z,"I reexamined just what is done with `ClipParameters::rate` and I see that for spectrograms, sometimes the rate is used for calculations relating to the y coordinate on the frequency scale -- and those should still use the unadjusted clip rate, but other calculations that convert sample counts to time points should be updated.

So I anticipate seeing this as I review later commits.
"
1290055171,4881,Paul-Licameli,2023-08-10T12:32:36Z,"It's good to see these comments.  Strictly they should be added in the commit ""Project tempo changes affect WaveClip stretch ratios"""
1290072883,4881,Paul-Licameli,2023-08-10T12:47:07Z,"I am skipping review of the pencil tool for now to work on the commit for spectrum view.

I think this commit and the one for waveform view should be combined into one -- the commit for waveform that I reviewed is not really complete without some of these changes.

As I anticipated, you needed to change `ClipParameters` to remember the sample rate and the stretch, from which a correct sample rate can be computed.

However -- were all the necessary changes made in all places where the old code used rate?

I doubt it, and will give details.
"
1290076227,4881,Paul-Licameli,2023-08-10T12:49:44Z,"It's good to see `const` members replacing assignments within the constructor body.  That aids understanding of the rest of the class and its uses.  Maybe you can do the same for more of the member variables.
"
1290434250,4881,Paul-Licameli,2023-08-10T17:04:26Z,"I would prefer that you don't permute these lines.  Leave them alphabetical by the last path component.  As more files move to libraries, and the `#include` lines change, there is just removal of `../` and can make a smaller diff."
1290443728,4881,Paul-Licameli,2023-08-10T17:12:51Z,"These lines change the resulting time selection, but I don't understand why.
"
1290455407,4881,Paul-Licameli,2023-08-10T17:23:08Z,"I think this omission should have been detected sooner, when testing #4867 or #4870.

I think it will affect copy/paste and undo/redo for all track types.

I will add to the QA checklist.
"
1290877515,4881,saintmatthieu,2023-08-11T04:17:46Z,"Indeed that's a better approach. No, stretching could have led to overlapping clips. I pushed a fix commit on top of this branch."
1291195130,4881,Paul-Licameli,2023-08-11T10:49:33Z,"I think this line is unnecessary because `Track::Init` was called in `EmptyCopy` and that copied the tempo.
"
1291210799,4881,Paul-Licameli,2023-08-11T11:07:13Z,"But -- the comments are contradicted now by the changes in ""Repair WaveTrack Copy/Paste/Join""

So what's right?

Did you try the cross-project case of copy/paste?

Did you copy copying to clipboard, closing source project, then pasting?
"
1291214374,4881,Paul-Licameli,2023-08-11T11:11:11Z,"Some objections I raised in earlier commits are resolved here.  It is easily seen that none of the optionals are dereferenced without checking first.
"
1291220522,4881,Paul-Licameli,2023-08-11T11:18:21Z,"Good to see these `SetTrim*` calls for completeness.  Did you see any bad consequences when they were omitted?
"
1291224769,4881,Paul-Licameli,2023-08-11T11:23:21Z,"You apply stretch ratio after any needed resampling or change of format.

Resampling to a lesser rate might be theoretically lossless for a band-limited signal, but maybe not practically.  Change of format to a lesser bit width mixes in some dither noise.

Maybe it's better to stretch first and make those other transformations after, for better quality?
"
1291227416,4881,Paul-Licameli,2023-08-11T11:26:22Z,"I would add `assert(GetStretchRatio() == 1);` which is the postcondition
"
1291229599,4881,Paul-Licameli,2023-08-11T11:28:53Z,"You make side-effects on the WaveClip object here, but before all operations have succeeded, and some might fail throwing exceptions because we run out of drive space for the database.

I would rather bullet-proof this.  Add `bool success = false;` and assign it true only at the bottom of the function.

Test `success` in the `Finally` and if it is false, restore trim-left and trim-right to their old values.
"
1291234679,4881,Paul-Licameli,2023-08-11T11:34:44Z,"Maybe too small.  Did you see if it helps performance of clip joining to go larger?
"
1291237505,4881,Paul-Licameli,2023-08-11T11:38:03Z,"`Flush` might fail and throw.  So instead, swap `newSequences` into place.  In the `Finally`, if there is not success, then swap again.
"
1291239332,4881,Paul-Licameli,2023-08-11T11:40:08Z,"`numProcessedSamples` never varies.  Should you remove it and use `numOutSamples`?
"
1291239911,4881,Paul-Licameli,2023-08-11T11:40:50Z,"This function follows a comment that used to be attached to the following function.
"
1291245486,4881,Paul-Licameli,2023-08-11T11:47:32Z,"Some of my earlier comments are irrelevant now after these changes in the interval test functions
"
1293207703,4881,saintmatthieu,2023-08-14T09:13:12Z,"Nice that you spot this, it's outdated. I later realized there were places where a track was copied for the clipboard, but before it was re-contextualized by being added to a project, boundary-related queries were made onto its clips. Hence the change of strategy: clip and track copies inherit the context from `orig`, and the pasting code is repsonsible for re-contextualization.
Will remove."
1293215009,4881,saintmatthieu,2023-08-14T09:20:30Z,"Perfect, thanks for doing my job."
1293221039,4881,saintmatthieu,2023-08-14T09:25:32Z,"... Although, it can be that a clip (and its track) is copied from one project to another, in which case cached project tempo and `oldTempo` may differ."
1293226595,4881,saintmatthieu,2023-08-14T09:30:32Z,"As we agreed verbally last thursday, I will leave it as is, since `StretchRightTo` does not apply time-stretching, but only modifies the `double mClipStretchRatio` value."
1293232028,4881,saintmatthieu,2023-08-14T09:34:58Z,"Yes. Can't remember exactly what, probably overlapping clips."
1293258140,4881,saintmatthieu,2023-08-14T09:59:12Z,"Thanks for that remark.
Resampling:
Computational cost: the fastest would be to time-stretch before in case of upsampling, and after in case of downsampling.
Quality: I do not know the algorithm sufficiently to say what influence the order has. I would have guessed that it can only be better with more frequency information, hence in case of downsampling I'd have first stretched and then downsampled. David Hearn doesn't believe this to have a noticeable consequence.

Sample-format:
Computational cost: I suppose calculations are faster on lower precision samples, but I'm largely ignorant on the matter - that'd be a question to @crsib.
Quality: I don't expect a perceivable difference here. If someone is of another opinion I'd consider testing.

The only obvious impact I see is wrt performance when resampling. I'll push something that handles this."
1293259727,4881,saintmatthieu,2023-08-14T09:59:36Z,"Thanks for that remark.
Resampling:
Computational cost: the fastest would be to time-stretch before in case of upsampling, and after in case of downsampling.
Quality: I do not know the algorithm sufficiently to say what influence the order has. I would have guessed that it can only be better with more frequency information, hence in case of downsampling I'd have first stretched and then downsampled. David Hearn doesn't believe this to have a noticeable consequence.

Sample-format:
Computational cost: I suppose calculations are faster on lower precision samples, but I'm largely ignorant on the matter - that'd be a question to @crsib.
Quality: I don't expect a perceivable difference here. If someone is of another opinion I'd consider testing.

The only obvious impact I see is wrt performance when resampling. I'll push something that handles this."
1293261630,4881,saintmatthieu,2023-08-14T10:00:50Z,"Thanks for that remark.
Resampling:
Computational cost: the fastest would be to time-stretch before in case of upsampling, and after in case of downsampling.
Quality: I do not know the algorithm sufficiently to say what influence the order has. I would have guessed that it can only be better with more frequency information, hence in case of downsampling I'd have first stretched and then downsampled. David Hearn doesn't believe this to have a noticeable consequence.

Sample-format:
Computational cost: I suppose calculations are faster on lower precision samples, but I'm largely ignorant on the matter - that'd be a question to @crsib.
Quality: I don't expect a perceivable difference here. If someone is of another opinion I'd consider testing.

The only obvious impact I see is wrt performance when resampling. I'll push something that handles this."
1293263289,4881,saintmatthieu,2023-08-14T10:02:31Z,Sure.
1293270591,4881,saintmatthieu,2023-08-14T10:09:33Z,"Ah, this one is confusing. It's not related to analysis/synthesis size. The result will be bit-exact independently on it. It's just to limit the amount of memory in our buffer. Would `bufferSize` be better?"
1293274081,4881,saintmatthieu,2023-08-14T10:13:30Z,"Oj - thanks. This was a bug, likely appending unwanted silence samples."
1293294690,4881,saintmatthieu,2023-08-14T10:33:11Z,"To restore the original sequences I'd have the `Flush` in a try-catch, so that I can detect if it's failed. But it seems to me that you're suggestion something different? Also, there's another such a `Flush` call that's not handled (I copy-pasted from it) ; is the situation there different?"
1293305548,4881,saintmatthieu,2023-08-14T10:44:14Z,I'm afraid I don't understand.
1293314106,4881,saintmatthieu,2023-08-14T10:54:05Z,"I often thought that having a type-safe differentiation between absolute and clip-relative times would spare us a few bugs and a little mental strain. I find the analogy between `std::chrono` time point and duration interesting, but I can't see how it fits here. What makes you say that `time` is a duration? `TimeToSamples` could very well be used to get the sample index closest to the time point `time`."
1293396349,4881,saintmatthieu,2023-08-14T12:29:24Z,"I only remember I had a reason at the time, I'm sorry I should have written this down. Now it seems wrong to me the way it is, and is inconsistent with `GetPlayEndSample()`.
In any case, I really would like to clarify the meaning of the append buffer length.
I guess this append buffer is here for optimization, to reduce calls to SQL. If that's right, shouldn't these not-yet-committed samples _always_ be reported? `GetNumSamples()` doesn't account for it, and is used in several places where I don't see why it shouldn't (e.g., in `TimeToSequenceSamples`, non-committed samples are not accounted for)."
1293473093,4881,saintmatthieu,2023-08-14T13:39:18Z,"> I suggest you go to the Bugzilla page, and do the steps to reproduce, to be sure there is no regression.

Good suggestion. I did and the behavior is correct.

You will see in `b742621` that I augmented the collection of `WaveClip` methods for those kind of comparison, in an effort to make clip boundary checks in `WaveTrack` easier to understand. These new methods (and renamed existing methods) have a consistent documentation and the comment you mention is probably not needed anymore."
1293473853,4881,saintmatthieu,2023-08-14T13:39:56Z,Thanks - the comment is obsolete now.
1293475637,4881,saintmatthieu,2023-08-14T13:41:28Z,I added those `@pre` later and squashed them in the relevant commit.
1293483965,4881,saintmatthieu,2023-08-14T13:48:28Z,"> This function is true in case the play region is a proper subset of [t0, t1)

Are you sure? For a clip with boundaries `[0, 1)`, `PartlyWithinPlayRegion(0.2, 0.3)` would return false, wouldn't it?"
1293487839,4881,saintmatthieu,2023-08-14T13:51:49Z,"Perfect. If it returns `false`, then the intersection of clip boundaries and `[t0, t1)` is empty."
1293500542,4881,saintmatthieu,2023-08-14T14:01:10Z,"Indeed those are poor. Thanks for the suggestion, will address."
1293510007,4881,saintmatthieu,2023-08-14T14:06:27Z,"I had a need for it some place in `WaveTrack`, probably, then not anymore, I suppose since I added the new boundary-check methods. Will remove. Sorry for having wasted your time."
1293516876,4881,saintmatthieu,2023-08-14T14:09:45Z,All good suggestions.
1293534592,4881,saintmatthieu,2023-08-14T14:22:28Z,Sure.
1293558819,4881,saintmatthieu,2023-08-14T14:39:38Z,"In other words you are requesting a strong guarantee for this method? I would agree. Coincidentally, not restoring the original trim values is a mistake, even in the case of successful stretching. There's a fix-up commit that does this. I don't see another state-changing method whose side-effect I should revert in case of failure.
It would be useful to have a helper for this safety, like `EffectOutputTracks` making a copy of the track and only replacing the original with it if successful."
1293572896,4881,saintmatthieu,2023-08-14T14:46:28Z,It's for copy-pasting across project with different tempi. A selection of 10 seconds of audio in project A should become 5 seconds in project B if tempo in B is twice as fast.
1293573391,4881,saintmatthieu,2023-08-14T14:46:43Z,Will comment.
1293577117,4881,saintmatthieu,2023-08-14T14:49:36Z,"I did just that, but your review would of course be welcome."
1293589025,4881,saintmatthieu,2023-08-14T14:58:32Z,That was wrong indeed. `CoversEntirePlayRegion` is what's in use now.
1294348826,4881,saintmatthieu,2023-08-15T08:56:49Z,"> And then I would reexamine every use of the function to be sure they are correct.

I did."
1294363185,4881,saintmatthieu,2023-08-15T09:13:45Z,">  I think of this as the subject of whatever verb is in it.

Interesting to observe is that `BeforePlayRegion(double t)` and other methods taking a time point, this ambiguity doesn't seem to arise. I guess `ExtendsPlayRegionOnBothSides` has this problem because `t0` and `t1` may be interpreted as a play region.
Renaming `ExtendsPlayRegionOnBothSides` to `PlayRegionIsExtendedOnBothSidesBy(t0, t1)` would require also renaming `BeforePlayRegion` and the likes to `PlayRegionIsAfter` ; do we really want this? I think getting used to `ExtendsPlayRegionOnBothSides` is easy.
"
1294446369,4881,Paul-Licameli,2023-08-15T10:50:54Z,"This is an error in conflict resolution!  Shift the clips of each channel, not only those of `this` `WaveTrack`.
"
1294466839,4881,Paul-Licameli,2023-08-15T11:18:50Z,"This isn't right, and not what I suggested.

This block is visited on function exit, whether normal or exceptional.

What I suggested is:
1. At top of the function, `bool success = false;`
2. At the very bottom of the ""happy path"", after all possibly throwing calls have not thrown, assign `success = true;`
3. In this Finally block, reassign the old trim left and trim right values, ONLY if `!success`
4. Also do the swapping, not assignment, of `mSequences`.  One swap below before the `Flush`, and another conditional swap here if not successful.  So, this also requires `newSequences` is declared before the `Finally`.
"
1294469612,4881,Paul-Licameli,2023-08-15T11:22:43Z,"We both forgot something about cutlines last week:  they too can have envelopes and paste envelope points into the clip when they are expanded.

Did you test this possibility?

Just as, one of these commits is a one-line fix to rescale envelopes of the main clip -- so too here, I think you must remap any envelope points in the cutline.
"
1294513487,4881,Paul-Licameli,2023-08-15T12:08:50Z,"Is the clip stretching handle completely correct, or must you also restore the `std::clamp`?  What happens below if snapping is disabled?  I don't see where `t` is limited by `mRange` on that path.
"
1294530613,4881,Paul-Licameli,2023-08-15T12:29:03Z,"Generally we prefer American spellings, ""neighbor"""
1294531730,4881,Paul-Licameli,2023-08-15T12:30:19Z,"I would simply write `as_const(*this)`

`std::as_const` is new in C++17 and you can leave off `std::` because `WaveTrack` inherits `std::enable_shared_from_this`
"
1294561771,4881,Paul-Licameli,2023-08-15T12:58:09Z,"Maybe make that `>=`
"
1294594545,4881,saintmatthieu,2023-08-15T13:25:24Z,Cool!
1294595756,4881,saintmatthieu,2023-08-15T13:26:32Z,"Me too, since Audacity is originally American. That one slipped. Thanks."
1294599413,4881,saintmatthieu,2023-08-15T13:29:55Z,Thank you: that's a change I forgot to revert.
1294601556,4881,saintmatthieu,2023-08-15T13:31:58Z,"I coincidentally thought about this earlier today and already pushed a fix. Spot on, though."
1294613583,4881,saintmatthieu,2023-08-15T13:42:01Z,"> At top of the function, bool success = false;

That's the piece I was missing, thank you.

Regarding the trimming, I attempted to explain in my earlier reply that it is correct to restore the original trim values, whether success or not. Rendering stretching should not modify a clip's boundaries, trimming included. I'll add a comment."
1294617389,4881,saintmatthieu,2023-08-15T13:44:51Z,Oj ... 🥇 
1294622219,4881,saintmatthieu,2023-08-15T13:48:39Z,"... In fact I'm renaming this ""GetNextClip"". ""Neighbor"" could be confused with ""adjacent""."
1294636793,4881,Paul-Licameli,2023-08-15T14:00:49Z,"This loop repeatedly sorts the clips by time in `GetNeighbourClip`.

Avoid that by using `GetSortedClipArray` once at this level.
"
1294639886,4881,Paul-Licameli,2023-08-15T14:03:37Z,"The default can simply be '{}' provided then that you null-check it where you use it
"
1294641488,4881,Paul-Licameli,2023-08-15T14:05:13Z,"Here too; and I would also make a `using` type alias for the repeated type.
"
1294649150,4881,Paul-Licameli,2023-08-15T14:10:52Z,"And for `std::pair<double, double>` which gets repeated a lot in the overrides.  Nicer to name it with a single word like `UnstretchInterval`
"
1294651298,4881,Paul-Licameli,2023-08-15T14:12:41Z,"Simplify the default here too
"
1294659894,4881,Paul-Licameli,2023-08-15T14:18:08Z,"Maybe `std::lower_bound` instead of `find_if` for logarithmic not linear complexity in the number of clips.  After all we are encouraging the making of many little clips.  At least that's what I saw in the demo of the prototype.
"
1294662613,4881,Paul-Licameli,2023-08-15T14:20:26Z,"Null check on `reportProgress` here
"
1294665108,4881,Paul-Licameli,2023-08-15T14:22:37Z,"Just pass '{}'
"
1294666683,4881,Paul-Licameli,2023-08-15T14:24:02Z,"Null check on `reportProgress`
"
1294670159,4881,Paul-Licameli,2023-08-15T14:27:11Z,"Any `XO` that you add, ask @LWinterberg if he likes the exact words.
"
1294670340,4881,Paul-Licameli,2023-08-15T14:27:20Z,Here too
1294670490,4881,Paul-Licameli,2023-08-15T14:27:28Z,Here too
1294670985,4881,Paul-Licameli,2023-08-15T14:27:55Z,"You didn't use `count`
"
916481945,3176,Paul-Licameli,2022-07-08T05:45:55Z,"This commit is ok except I think this comment should be clearer.  What is “valid”?

say maybe instead, “mpTrack points to the removed track, if some other shared pointer is preventing its deletion”"
916602347,3176,crsib,2022-07-08T08:47:22Z,"Hmm, I'm trying to say that track pointer is valid during the event in any case"
927519791,3176,Paul-Licameli,2022-07-22T10:29:10Z,"I don't understand why NoiseReduction required special treatment.  Can you explain?

This new function needs to be called only from RealtimeEffectStateUI, and Noise Reduction is not one of the realtime capable effects, so I don't understand how you can ever reach this override.
"
927538618,3176,crsib,2022-07-22T10:55:46Z,"As you know, I do not trust in ""something is not called now"" :-) The reason `GetEffectUIClientInterface` is there for symmetry. I had some reasoning why this was not done for `NyquistEffect`, but I don't remember it. "
929698270,3176,Paul-Licameli,2022-07-26T08:50:21Z,"Maybe the commit that does this should logically be last in the sequence, because all else is in place not to cause bugs in non-modality only then
"
929701820,3176,crsib,2022-07-26T08:53:47Z,Agreed!
929703752,3176,Paul-Licameli,2022-07-26T08:55:35Z,"This member should move earlier in the header file, before `mMainSettings` (and the initializers ordered appropriately) just so that the `@name` section comments are correct.
"
929710046,3176,Paul-Licameli,2022-07-26T09:01:30Z,"RealtimeEffectState has a `Site` which has this thing in a slot which has a `shared_ptr` to the good stuff.

I might have arranged it differently:  RealtimeEffectState has a `shared_ptr` to a SharedState structure that it declares, as a `Site`; then this would be a simple attachment and would not need to be cloneable.

Either would work.  What other attchments to states might be needed in future?  I don't know yet.  The latter way of doing it would make it impossible for them to be un-shared.

"
929713360,3176,Paul-Licameli,2022-07-26T09:04:48Z,"At first I feared a leaky `shared_ptr` cycle but then I saw `mCurrentState` is a `weak_ptr`.  Good, so use `weak_from_this()` instead to make that more obvious.
"
929725117,3176,Paul-Licameli,2022-07-26T09:15:56Z,"Should there be a null check on `currentState`?
"
929726910,3176,Paul-Licameli,2022-07-26T09:17:42Z,"""its""
"
929728669,3176,Paul-Licameli,2022-07-26T09:19:15Z,"its
"
929731588,3176,Paul-Licameli,2022-07-26T09:22:08Z,or just `assert(false)`
929738833,3176,crsib,2022-07-26T09:29:14Z,"Ironically, there was assert(false), but at some point I have decided to make it more explicit"
929749332,3176,Paul-Licameli,2022-07-26T09:39:38Z,"The `shared_ptr` is only lazily initialized.
I think this means that different versions of the state in the undo history my or may not shared state.  Would that have bad consequences?

- make a new state
- do some other edit
- click the cogwheel

Then the current track list points to the shared state but the pushed undo state does not.  Does this mean I could undo, click the wheel again, and have two non-modal dialogs open at once?  Or is there something I haven't seen yet that destroys the dialog whenever you undo and redo?  (But then why have this shared state)?

But swap the last two steps, and then there is sharing.

If I am right that there could be a bug, then the shared_ptr should instead be assigned eagerly whenever a new state is made, then always copied.

So either rearrange the storage as I suggested, or used `BuildAll` in the constructor of `RealtimeEffectState` and have `RealtimeEffectStateUI` alway make the shared state.
"
929755881,3176,Paul-Licameli,2022-07-26T09:45:58Z,"The deleted code for a modal dialog restored state as it was in case the dialog is cancelled or the Esc key is hit, and it pushes an undo history item for change of state if the dialog is OK'd.

I don't see where this commit preserves that behavior by other means.
"
929762349,3176,Paul-Licameli,2022-07-26T09:52:31Z,"Replacing a weak pointer with a reference might look unsafe, but I think it is a safe enough assumption that this window will be destroyed only before the associated project.
"
929772087,3176,crsib,2022-07-26T10:02:43Z,"As it was mentioned in PR description - the Undo/Redo is intentionally left unimplemented for the effect parameters. And for the reference - there are several DAWs that do not implement it all as well and at least for Ableton there were problems observed with the implementation (i. e. Undo  restored the parameter value to some unexpected state).

If and when we decide to implement the undo/redo for stacked effect parameters - we will have to create an item for each parameter user changes (see Ableton as the reference). 

The potential problem I expect now is that Audacity project won't get ""dirty"" on parameter change, but I would rather fix it in a different PR."
929772367,3176,Paul-Licameli,2022-07-26T10:02:59Z,"When the user deletes an effect from the stack, hide the dialog.

When the user replaces one effect with another in the stack, that too should hide the dialog.  But I don't see a corresponding change in `OnEffectListItemChange`.  That is the function reached through an Observer callback.
"
929773833,3176,crsib,2022-07-26T10:04:38Z,"Thank you for pointing this out, I will check."
929774489,3176,Paul-Licameli,2022-07-26T10:05:21Z,"Does this line properly belong to the earlier commit ""Adds a class to manage stacked effects settings UI"" ?
"
929778856,3176,crsib,2022-07-26T10:10:08Z,I would say no
929779427,3176,crsib,2022-07-26T10:10:44Z,Will fix
929779805,3176,crsib,2022-07-26T10:11:04Z,RealtimeEffectPanel is a child of ProjectWindow
929780772,3176,Paul-Licameli,2022-07-26T10:12:08Z,"Why is this not done in case of replacements (as indicated by evt.mExtra)?  I think I do understand that this can happen if you do a destructive effect application via other UI, or you finish recording, if I look for uses of `TrackList::Replace`.  The commit comment gave some explanation, and this code should too.

But then in the case of replacement, shouldn't there be another branch to call `UpdateRealtimeEffectUIData`?  The Track object is replaced with another one which is now the current state of the track in the project.
"
929783149,3176,Paul-Licameli,2022-07-26T10:14:33Z,"Aha, here it is then.  You are relying on the DELETION and ADDITION events both arriving, which is part of the contract in Track.h.  And you don't rely on the sequence of their arrival.
"
929790241,3176,Paul-Licameli,2022-07-26T10:21:36Z,"Was it agreed then with designers that the formerly specified undo/redo behavior is now abandoned?

Do we open another issue for the future effort to figure out the problem?

If there will not be undo/redo states for the OK button, still I think something could be done:  the OK button should call `ModifyState` -- what also happens for the power button changes.  Then the change of settings becomes, not another state, but fused with whatever is the latest undo state.  This is similar to what is done when you simply change the selection, and makes for argubly less surprising behavior, if after OK-ing the dialog, you undo and redo again, expecting the settings to be unchanged.

Besides all that, there is also the reasonable expectation that if you cancel the dialog, tentative changes of settings should be cancelled and old state restored.  But nothing does that now.

"
929790387,3176,Paul-Licameli,2022-07-26T10:21:47Z,"Right
"
929790788,3176,Paul-Licameli,2022-07-26T10:22:13Z,"Not sure I understood why.
"
929795060,3176,crsib,2022-07-26T10:26:36Z,">Was it agreed then with designers that the formerly specified undo/redo behavior is now abandoned

I've talked with @Tantacrul on that. Can I  see the previous specification please? AFAIK the dialog specified has no Ok/Cancel buttons whatsoever. 

>the OK button

There will be no OK button

"
929799884,3176,crsib,2022-07-26T10:32:08Z,"Please see #3090 for the design. Stackable effects are really different from what happens on destructive path so there are different assumptions about the behavior.

Unfortunately we have a chicken-egg problem here: we cannot reasonably implement #3090  before non modality is achieved and without it there seems to be a confusion about the behavior of the buttons that will be removed from the dialog."
929806309,3176,Paul-Licameli,2022-07-26T10:38:52Z,"So then I looked at slide 8.0 (macOS examples) and that is so.

But is that an omission in the design?  How is the user supposed to close the dialog?  If it's only with Esc or the close button, then there is no way to distinguish between committing and cancelling the changes.
"
929810091,3176,Paul-Licameli,2022-07-26T10:43:23Z,"I have commented at #3090 
"
929812957,3176,crsib,2022-07-26T10:46:51Z,"This matches the behavior for stacked effects in other DAWs though. In most of the cases I saw (including Garage Band) settings are always committed (on every change) and software provides no way to undo them. Ableton tracks each and every parameter change, but every change is committed immediately as well. 

![image](https://user-images.githubusercontent.com/2660628/180988441-71a3d622-6109-4a86-a70e-dbdb3f35122c.png)
"
929820667,3176,Paul-Licameli,2022-07-26T10:55:56Z,"So maybe we have an opportunity to do things a bit better than those.
"
930946734,3176,crsib,2022-07-27T11:27:21Z,Turned out that this commit is not needed at all
930998848,3176,crsib,2022-07-27T12:27:05Z,Turned out that removing wasn't handled properly either
932657977,3176,Paul-Licameli,2022-07-28T20:49:09Z,"This `#include` is new since my last round of review, and unfortunately makes bad depenency cycles.

This is from a ""before"" picture made by scripts/graph.pl:
<img width=""236"" alt=""Screen Shot 2022-07-28 at 4 36 18 PM"" src=""https://user-images.githubusercontent.com/11670369/181633036-fbdf035f-a809-43c2-8058-307edbfeb224.png"">

Bad -- cycles crept in this release that we should fix later.  But let's not make them worse:


<img width=""285"" alt=""Screen Shot 2022-07-28 at 4 33 14 PM"" src=""https://user-images.githubusercontent.com/11670369/181633774-1f0a9ce6-4ff0-4792-8274-286836ad37ea.png"">

Remove the one `#include` and this bubble still grows by one, including the new file RealtimeEffectStateUI.  I'm not sure which is the edge to cut so that this doesn't happen.  But at least this does not tie in AudioIO and the other Realtime* files.  My unmerged library extractions in progress would move those files down into lib-audio-io.

And how to do the rest of the code change to break the dependency is easy to see: the two functions of `RealtimeEffectList` that you modify already do `Publish` so you can make subscriptions elsewhere to handle this.
"
932704050,3176,Paul-Licameli,2022-07-28T21:44:22Z,"You followed one of the suggestions for changing the management of lifetimes of the shared state.  Is it all correct?

- generate noise, open sidebar, add any effect, but do NOT yet click the gear
- Do something undo-able
- undo
- click the gear
- redo
- click the gear again

This was a sequence that I feared might erroneously leave two non-modal dialogs opened connected to the same effect state.

This doesn't happen.  Yet, the reasons why it doesn't happen seem a little fragile to me.

It doesn't happen because `ProjectHistory::PopState` fires many track deletion, then addition, events in these lines:

```
   dstTracks.Clear();
   for (auto t : tracks->Any())
      dstTracks.Add(t->Duplicate());
```

And the Subscription you added calls `HideRealtimeUIForTrack` -- with the consequence, that ANY undo or redo makes the non-modal dialog disappear, I think? -- which might be considered unacceptable to QA.

Now, the ""lazy"" creation of `RealtimeEffectStateUI` happens anyway almost always, whenever you cause a push or pop of the Undo stack -- which can mean, there is little point in avoiding doing it sooner, eagerly.  And the way to do that, as I suggested, is to have `RealtimeEffectState` call `mEffectStateExtensions.BuildAll()` in the constructor.  That would defeat my doubts.

Or it would also do so, if you do the other thing:  have `RealtimeEffectState` hold a `shared_ptr` to its `Extensions` and copy that pointer in the copy ctor.  Then `BuildAll` won't be needed.  And not needing `BuildAll` might mean economy in case `Extensions` ever needs to host some other attachment.
"
933009150,3176,crsib,2022-07-29T08:44:09Z,"Shoot, my bad! Will be fixed for sure!"
942317293,3176,Paul-Licameli,2022-08-10T11:03:31Z,"The comment is not correct -- NoiseReduction does not override the function.  And I don't think it needs to because it is not eligible for effect stacks.
"
942328581,3176,Paul-Licameli,2022-08-10T11:17:03Z,"This change is new since I last reviewed, and I would describe this oppositely -- what was a deep copy is now shallow.

This has the consequence that the state is only transient state.  There is no longer any undoing or redoin of changes of settings, but only of the composition of the effect list.
"
942333700,3176,Paul-Licameli,2022-08-10T11:23:20Z,"This comment is not consistent with `RealtimeEffectList::MoveEffect` which leaves the pointer in the message null
"
942336684,3176,crsib,2022-08-10T11:27:04Z,"Yeah, you are right, my bad"
942340307,3176,Paul-Licameli,2022-08-10T11:31:40Z,"The `#include` that made the bad dependency cycle is still here, but not needed to build now so easily deleted.

"
942342813,3176,Paul-Licameli,2022-08-10T11:34:51Z,"Deletion of the copy constructor might be done in the commit ""RealtimeEffectList performs shallow copy for states""
"
942360561,3176,Paul-Licameli,2022-08-10T11:56:33Z,"I think this may fail to fire when intended, in case `mCurrentTrack` expired because the track was replaced because some other edit was done to it that caused TrackList::Replace


"
942362538,3176,Paul-Licameli,2022-08-10T11:58:57Z,"The problems of dangling pointers to states or parts of states are surely fixed now, so no fear.

Maybe though, this event handler closes the dialog too often because it isn't discriminating about which track.

But to do that right might require a shared pointer to the interesting track, not weak.

And then there would be the problem of invalidating that shared pointer, and updating it to find the corresponding track in a different undo state.

Because I observe that Undo or Redo causes the dialog to disappear, because of this case of the switch.  Maybe that is acceptable for now.  Maybe testing will result in some request to change the design.
"
942363957,3176,crsib,2022-08-10T12:00:41Z,I have checked and mCurrentTrack is always consistent
942365511,3176,crsib,2022-08-10T12:02:28Z,"I do not see your point. `mExtra == 0` means that the track is removed from the project as per contract. Please, provide an STR of a behavior you think is wrong."
942372541,3176,crsib,2022-08-10T12:10:45Z,"Seems that undo is calling Clear, readding the duplicate back later"
944514606,3176,Paul-Licameli,2022-08-12T14:20:49Z,"I should have noticed this last round -- `pState` is moved-from therefore null.  Nothing in non-modality depends on this but the events should anyway behave as advertised.
"
944524872,3176,Paul-Licameli,2022-08-12T14:30:26Z,"The commit that removes this copy constructor should also remove the comment in the header file, `Members that are copied for undo and redo`
"
944532833,3176,Paul-Licameli,2022-08-12T14:38:14Z,"spelling
"
944537676,3176,Paul-Licameli,2022-08-12T14:43:06Z,"The variable name `effect` might be less confusing as `state`
"
944544520,3176,Paul-Licameli,2022-08-12T14:50:10Z,"Wow, that's CRTP x 3 !
"
944546074,3176,Paul-Licameli,2022-08-12T14:51:51Z,"Can the non-modal dialog exist but be hidden?  Then this function name might mislead.
"
944546798,3176,Paul-Licameli,2022-08-12T14:52:35Z,"But, no, I see.
"
944553013,3176,Paul-Licameli,2022-08-12T14:58:51Z,"We come here when rebuilding the side bar.

But can there be edits of the track name that don't get reflected in the dialog title?

A complete solution might be done with subscription to undo/redo events.  Which I suggest as a bug fix after this PR, not a blocking problem.

"
944556390,3176,Paul-Licameli,2022-08-12T15:02:36Z,"To be REALLY complete... it would also subcribe also to changes of preferences, in case the effect name is a built-in that can be retranslated for changed of locale.
"
944576108,3176,Paul-Licameli,2022-08-12T15:25:03Z,"copy-pasted comment refers to a nonexistent variable
"
944578566,3176,Paul-Licameli,2022-08-12T15:27:45Z,"Comment is trying to explain why `release()` doesn't leak below.  It's because the dialog has a non null parent.
"
944581549,3176,Paul-Licameli,2022-08-12T15:31:17Z,"Why was this subscription needed?
"
944600040,3176,Paul-Licameli,2022-08-12T15:52:12Z,"Did you intend to hide a non-modal dialog but not destroy it?

The closing of the project window does cause the dialog to be destroyed, because it sets its parent pointer to the ProjectWindow.

There are other non-modal dialogs associated with a project -- like Tools > Macros... -- and nothing special is needed to ensure that they are cleaned up.
"
944603941,3176,Paul-Licameli,2022-08-12T15:56:24Z,"I have also
"
944607314,3176,crsib,2022-08-12T16:00:25Z,It fixes an assert in `EffectUIHost::~EffectUIHost()`. Is this assert important? You tell me.
944610558,3176,Paul-Licameli,2022-08-12T16:04:45Z,"I think BuildAll is now unnecessary for correct lifetimes of `RealtimeEffectStateUI`, now that the state objects are shared across Undo history states.

Undo/Redo still closes the window.  If there is an enhancement to avoid that, remember that test case should be:
- Add an effect to a stack but don't open settings yet
- make some undoable edit
- undo
- click the gear
- redo (here, the sidebar must reconnect to another track)
- click the gear again
And the second click should hide the dialog, not open a second dialog.

"
944611928,3176,crsib,2022-08-12T16:06:41Z,"I had naïve expectation that TRACK_DATA_CHANGE will be fired, because, well, track data has changed. But you are right, it is not"
944617228,3176,crsib,2022-08-12T16:13:37Z,"Ironically, MSVC now has a diagnostic for that
![image](https://user-images.githubusercontent.com/2660628/184398360-3106dde9-aff2-4904-9b65-2bfe93e18d75.png)
"
944630731,3176,crsib,2022-08-12T16:30:09Z,"Well, that means it's a bad comment anyway :-) It should be about `EffectInstance` lifetime"
944631650,3176,crsib,2022-08-12T16:31:19Z,"It is no longer needed on the other hand, the (weak) pointer to EffectInstance is no longer stored"
944632936,3176,crsib,2022-08-12T16:33:03Z,"Let's keep it for now, probably, it does no harm either"
944686380,3176,Paul-Licameli,2022-08-12T17:52:47Z,"If any more ClientData are attached to the RealtimeEffectState, they too would be built non-lazily.

Well we don't care about that now.
"
944686924,3176,Paul-Licameli,2022-08-12T17:53:35Z,"Okay, and maybe that old assertion is an inappropriate one.  But let it all stand.
"
944781910,3176,Paul-Licameli,2022-08-12T19:36:06Z,"Also for the `Reset`?  You can make that happen with the History dialog
"
944785429,3176,Paul-Licameli,2022-08-12T19:40:44Z,"This requires that #3365 be merged first, so that the dialog is closed when it must be.  
"
944785785,3176,crsib,2022-08-12T19:41:11Z,Will do
944786276,3176,crsib,2022-08-12T19:41:48Z,"Yep, right now it is  kind of no-op"
944789217,3176,Paul-Licameli,2022-08-12T19:45:38Z,"This commit breaks the build but the next and final commit fixes it.
"
944795215,3176,Paul-Licameli,2022-08-12T19:53:15Z,"This commit is insufficient to update langauges in (e.g.) the dialog for Reverb.  It only fixes the dialog title, not the static texts and label buttons.  Destroying and recreating the dialog may do it.  That is I think `RealtimeEffectStateUI::Hide` then `RealtimeEffectStateUI::Show` 
"
944801183,3176,Paul-Licameli,2022-08-12T20:01:22Z,"Correct that, it is rather, still closing the dialog unnecessarily.

We want the dialog to close exactly when it should.
"
944819650,3176,Paul-Licameli,2022-08-12T20:26:34Z,"Now I'm trying to make it work by cherry-picking my fix onto this branch, and it doesn't, revealing an incompleteness of my proposed fix.  So watch for an amendment of #3365 !
"
944842857,3176,Paul-Licameli,2022-08-12T20:46:12Z,"Okay, I amended #3365, which you should review first.

But still not enough:  if I cherry-pick it onto your branch, I must make one more change:

Your message handler must do nothing for messages of type `Purge`.

With that change I observe that undo and redo close the dialog only exactly as needed.

So, are we done yet, debugging undo/redo?

No, I think there is one more problem.  Wait for more.
"
945580952,3176,Paul-Licameli,2022-08-15T09:56:26Z,"Spelling
"
945582413,3176,Paul-Licameli,2022-08-15T09:58:36Z,"The last commit in the sequence is still correcting a build error of the previous commit.  I'd like both commits to be compilable.
"
945583722,3176,Paul-Licameli,2022-08-15T10:00:39Z,"You don't update UI for the Reset message, which can happen if you choose a state using the History dialog, and so the title of a dialog might be incorrect in that case.  However that case will correctly fall through to the check for reachability of states below.
"
945584090,3176,crsib,2022-08-15T10:01:12Z,"Well, rebase error again. Rebasing takes like half a time on this branch now"
945587636,3176,Paul-Licameli,2022-08-15T10:06:57Z,"I merged other approved things to master lately, so please also rebase onto those.
"
1295776515,5041,Paul-Licameli,2023-08-16T11:49:56Z,"Should this comparison use discrete sample counts?
"
1295797495,5041,Paul-Licameli,2023-08-16T12:06:45Z,"Non-ascii mathematical notation in comments, nice
"
1295799474,5041,Paul-Licameli,2023-08-16T12:08:32Z,"See uses of `@name` with `@{` and `@}` elsewhere in the source tree, so that Doxygen can associate a comment with multiple class members.

The generated pages will have nicer information and just looking at the source code makes clearer the intended ""scope"" of your comment.
"
1295801264,5041,Paul-Licameli,2023-08-16T12:10:15Z,"Here you can simply use `//!` for a Doxygen comment on one member.
"
1295805487,5041,Paul-Licameli,2023-08-16T12:14:16Z,"I think this function should use `TimeToLongSamples`
"
1296367556,5041,Paul-Licameli,2023-08-16T19:58:39Z,"No, just delete the function!  It is defined but not used anywhere in these six PRs
"
1296369747,5041,Paul-Licameli,2023-08-16T20:01:08Z,"Delete this comment please
"
1296777100,5041,saintmatthieu,2023-08-17T07:18:27Z,Isn't it too much to have private members show up in Doxygen?
1296828948,5041,saintmatthieu,2023-08-17T08:00:03Z,"The playtime boundary getters return sample-rounded values, but results can be different whether we round `t` or not, so it's an important question.

Mathematically it is correct as it is. Someone can use the method to check whether the cursor splits the clip visually. But we also use this method to decide whether a clip should be split or not, in which case it's a headache to figure out what should be done when splitting a clip a fraction of a sample before its play end time.

I'm thinking now that these boundary-check methods should take `sampleCount` arguments. Then it's the responsibility of the users to decide what rounding they want. The internal variables (`mSequenceOffset`, etc) must stay `double`s because of stretching.

I haven't seen a problem related to that, though, perhaps because the places that use this already pass rounded values. For the sake of time, would you agree to leave it as-is for now and keep this in mind if problems are reported?"
1296837406,5041,saintmatthieu,2023-08-17T08:07:46Z,It's deleted.
1296845751,5041,saintmatthieu,2023-08-17T08:15:08Z,"It is used, in `WaveTrack::ApplyStretchRatio`, in PR 5. I'll remove it from this PR, and rebasing will force me to re-introduce it. Then I'll use `TimeToLongSamples`."
1296934657,5041,Paul-Licameli,2023-08-17T09:28:54Z,"All might help someone needing to understand the implementation, not just interface.

There is the notion of “representation invariant” for instance — invariant conditions involving private member variables.  Might as well follow conventions with `@invariant` There too"
1298376288,5041,Paul-Licameli,2023-08-18T12:08:14Z,"I think I wrote this elsewhere, bug again:  `0.5` should change to `true` at the commit ""Make waveform display work again"" to match the change of argument type.
"
1298392366,5041,Paul-Licameli,2023-08-18T12:26:25Z,"near the end of this function `findCorrection`, clean up two things please:  use `std::clamp` and `assert`
"
1298407552,5041,Paul-Licameli,2023-08-18T12:42:25Z,"I see this change in `DrawIndividualSamples`.  I wonder whether it's complete.  I see another use of `clip->GetRate()` that is not corrected for stretch later.  But it's only fetching one value from the envelope and passing a time-step value for successive samples that doesn't matter and could be 0.
"
1298408977,5041,Paul-Licameli,2023-08-18T12:43:52Z,"The domain of the Envelope (viewed as a curve or function) is always updated with ration changes to be real time, correct?  So `time` given to `GetValue` is right?

Did you test display of individual samples with an envelope too?
"
1299369268,5041,Paul-Licameli,2023-08-20T12:30:11Z,"As I wrote on the closed PR, the commit ""Make waveform display work again"" doesn't completely do what it says.  Instead the next commit ""Spectrum display..."" completes the work for waveform display too.

So properly, these two commits should be squashed into one (plus the fixup I pushed).  Maybe that commit would be too large and you might find a nice way to separate small steps like changes of arguments of functions or construction of `ClipParameters`

But then I see the next commit ""WaveChannelView clean-up ..."" does yet more things that correct the calculations, which comes after ""Spectrum drawing does not need a WideSampleSequence ..."" but that one is easy, just deletions.

I have to look at the diff of a sequence of four commits to understand the whole transformation and be confident it's right.  This isn't easy.
"
1299370732,5041,Paul-Licameli,2023-08-20T12:40:19Z,"Is this comment in commit ""Spectrum Display..."" correct?
"
1299402809,5041,Paul-Licameli,2023-08-20T16:25:35Z,"If 0 is an excluded value, maybe the member doesn't need to be `std::optional` but instead you would test the value wherever it is used.
"
1299403106,5041,Paul-Licameli,2023-08-20T16:28:47Z,"I spent a surprising amount of time studying this small commit to convince myself it was correct.  Rereading the whole class led me to push one more commit for an possible undiscovered problem.  I think backwards scrubbing with stretch applied might be wrong.
"
1299403836,5041,Paul-Licameli,2023-08-20T16:35:56Z,"I found this small commit difficult to understand because `durationToDiscard` is multiplied by the clip's rate only in one place, but then also divided by stretch ratio in another place.

I think the members `mLastReadSample` and `mTotalNumSamplesToProduce` should be commented.

`mLastReadSample` counts raw samples but `mTotalNumSamplesToProduce` counts stretched.

Also, what should have made the bug ""obvious"" in earlier reviews -- is that the clip's rate should always be divided by the stretch ratio, never multiplied by it.
"
1299843850,5041,saintmatthieu,2023-08-21T09:15:19Z,"You've fixed a bug indeed, thank you. Added the missing unit test that would have caught it."
1299913890,5041,saintmatthieu,2023-08-21T10:16:58Z,"I considered some time ago already providing a class only for the implementation of `TimeAndPitchSource` and let `ClipSegment` use it. It could have avoided this confusion. Now `mLastReadSample` is a member of the source, and represents a sample index before stretching. `mTotalNumSamplesToProduce` is a member of `ClipSegment` and represents a sample count after stretching."
1299914648,5041,saintmatthieu,2023-08-21T10:17:42Z,"Now I did it. The commit ""review comments: extract TimeAndPitchSource from ClipSegment ..."" only just does that - no change in logic."
1299924255,5041,saintmatthieu,2023-08-21T10:27:15Z,One advantage of `optional`: the compiler will tell you if you are not de-referencing when you should. A bare double won't warn against unchecked uses.
1299926094,5041,saintmatthieu,2023-08-21T10:29:10Z,"It's outdated, stemming from the time when spectrum display did not account for stretching. Thanks."
1299940579,5041,Paul-Licameli,2023-08-21T10:43:57Z,"I tried to demonstrate backwards scrubbing going wrong without this fix, but I could not.

Maybe `samplesPerChannel` is never greater than `remainingSamplesInClip` because of other tests elsewhere, but the class `ClipSegment` should not depend on that pattern of usage.
"
1299968117,5041,saintmatthieu,2023-08-21T11:11:56Z,"Right. I did not a good job with my interactive rebase for this part. I may mistakenly have attempted to re-order and squash the ""WaveChannelView clean-up ..."" into ""Make waveform display work again"", but actually it should have been squashed into ""Spectrum display ..."" (and then squashing that into ""Make waveform display work again"" as you suggested). I don't mind doing it, but is now a good time, since you've reviewed this already? "
1299992835,5041,saintmatthieu,2023-08-21T11:37:56Z,"> The domain of the Envelope (viewed as a curve or function) is always updated with ration changes to be real time, correct?

Correct. The x-position of the samples is scaled by the stretch ratio because the audio samples are stored in stretched state. The envelope is, though.

> Did you test display of individual samples with an envelope too?

I did, yes, and that works to the extent I tested it. Not so confident about the corner cases, though."
1300674381,5041,Paul-Licameli,2023-08-21T21:38:12Z,Change “pps ” in the comment
1300674948,5041,Paul-Licameli,2023-08-21T21:38:49Z,And the variable name 
1301768815,5041,Paul-Licameli,2023-08-22T14:49:02Z,"This moved function is now more general than it needs to be.  The first argument is always a size one vector at the sole place where you call it.  Maybe you feel like cleaning that up?
"
1301771445,5041,Paul-Licameli,2023-08-22T14:50:48Z,"Your search-and-replace made the comment read strangely
"
1302278623,5041,Paul-Licameli,2023-08-22T23:16:42Z,"First two arguments are unused
"
1302281321,5041,Paul-Licameli,2023-08-22T23:22:33Z,"Remember `min` is not `lowest` when the type is floating! -- but that's not the case here
"
1302284604,5041,Paul-Licameli,2023-08-22T23:29:32Z,"Fix the variable name `clipEndingAdjustment`
"
1302296428,5041,Paul-Licameli,2023-08-22T23:34:02Z,"Arguments `track` and `selectedRegion` are not used
"
1302300193,5041,Paul-Licameli,2023-08-22T23:38:47Z,"`t1` is not used outside this constructor, so it might be a local variable
"
1302317307,5041,Paul-Licameli,2023-08-23T00:16:59Z,"Below, change `rate` to `sampleRate` in commented-out code.  Sample rate NOT corrected for stretch ratio would be right because we assume the envelope already stretches its time coordinates.
"
1302317789,5041,Paul-Licameli,2023-08-23T00:18:09Z,"Or `6 * threshold1`
"
1302320333,5041,Paul-Licameli,2023-08-23T00:22:01Z,"Below, likewise, change commented-out code
"
1302328378,5041,Paul-Licameli,2023-08-23T00:41:07Z,"`params` is unused
"
1302334192,5041,Paul-Licameli,2023-08-23T00:55:02Z,"unused
"
1302337814,5041,Paul-Licameli,2023-08-23T01:03:33Z,"Maybe the first real bug I have found:

While dividing by `GetWidth` may correct a mistake introduced earlier -- yet I look at the uses of `SpecCache::Populate` and I see one (in DrawClipSpectrum) passed the visible sample count, while the other (in this file) passed the sequence sample count.  But now both use the sequence count.

Why is this right?
"
1302345661,5041,Paul-Licameli,2023-08-23T01:21:26Z,"Notice how `GetFloats` had a `mayThrow` argument defaulting true but passed false here.

I added that years ago.  I reasoned that if reading sample blocks failed for any reason, but only in display code, it should be non-throwing, and instead just zeroes should be substituted.

But now that is lost with this transformation.

See where `SampleBlock.cpp` used to use the `mayThrow` argument.

But that was a guard around the concrete class that implemented `DoGetSamples`.

So I think `SqliteSampleBlock::GetFloatSampleView` should now add a try-catch around its new call to `DoGetSamples` and the catch block needs to add zeroes.

So that the behavior in exceptional cases does NOT change.
"
1302593980,5041,saintmatthieu,2023-08-23T07:24:52Z,"At last I know what the `mayThrow` is about - my bad not for having actively searched its meaning.
`GetFloatSampleView` is used for both display and playback, though, so adding a try-catch would override the current playback, throwing behaviour.
It's not too much work to add this boolean to `GetFloatSampleView`. Otherwise we'd have to choose one behaviour for both use cases - always catching would also affect playback behaviour.
Added a commit that does this."
1302701314,5041,saintmatthieu,2023-08-23T08:52:55Z,"Thanks for this question, it motivated me to (try and) understand this whole code better.

I think it is okay the way it is. `numSamples` will be used to know whether the time-domain input to the spectrogram needs zero-padding, if the window goes beyond that. Providing the sequence sample count, as opposed to the _visible_ sample count, allows the code to fetch samples beyond the visible boundary to draw the spectrum, which is good.

The other call used to use `GetVisibleSampleCount`, and leading to unnecessary zero-padding in case of right trimming. Note, though, that that other call only gets executed if the fisheye state is `PINNED`, but it never is, as it's hard-coded to `HIDDEN`, so I cannot test that it indeed works with these changes.

What I could test, though, is that an impulse, whether at the beginning or end of the clip, has its spectrogram displayed properly, also with left- and/or right-trimming."
1302703735,5041,saintmatthieu,2023-08-23T08:54:47Z,ty
1302703807,5041,saintmatthieu,2023-08-23T08:54:51Z,ty
1302722329,5041,saintmatthieu,2023-08-23T09:09:49Z,How could I miss that ... thank you.
1302723907,5041,saintmatthieu,2023-08-23T09:11:04Z,"Haha, ""adjustemt"""
1302743915,5041,saintmatthieu,2023-08-23T09:27:37Z,"Good that you spot this. This means that this function is actually not useful, and `SpectrumCache` can call `AudioSegmentSampleView::Copy` directly instead. (It would probably be useful if `WaveTrack::GetSampleView` were used, but that's not the case.) Removing."
1302851106,5041,Paul-Licameli,2023-08-23T11:01:45Z,"I'll let your decisions stand on this, but maybe it should be reexamined later.  Maybe a clip with unusually large hidden data will cause caching to do too much work and even defeat the purpose of caching for performance.  Maybe there should be a smarter way to bound the cache size, more than the visible samples but fewer than the whole.
"
1302867397,5041,Paul-Licameli,2023-08-23T11:18:08Z,"Now there is only a direct call to `Copy`.  The limiting of sample buffer size and the filling of extra space with zeroes don't happen.  Should they be restored?
"
1302886734,5041,Paul-Licameli,2023-08-23T11:37:31Z,"You are right.  `timeCorrection` is scaled to the clip's raw sample rate, without the stretching ratio correction for real time.  We want to find the correct X coordinate for that.

So remove ""todo"" and explain in the comment more confidently.
"
1302890888,5041,Paul-Licameli,2023-08-23T11:41:35Z,"Reference #2 on this page was my guide to implement this algorithm long ago.  https://en.wikipedia.org/wiki/Reassignment_method#References

I used to be able to find freely available pdfs
"
1302914256,5041,Paul-Licameli,2023-08-23T12:03:40Z,"Almost completing review!  The last thing I must understand is why you changed arguments in the other call of `Grow` but not this one.  Are you correcting an old error?

But I examined things and I find this added comment misleading.  `t0` is, and was before the changes, a time relative to clip start.  Not absolute.  And relative time is in fact what `Grow` was expecting.  The `t0` value is stored in `start` and ultimately used only in `GetSpectrogram` just above us here to check for a cache hit.  The `t0` in the comparison is the same `t0` used here.

"
1302915781,5041,Paul-Licameli,2023-08-23T12:05:06Z,"`GetSpectrogram` (this function, here) is called in only one place, and the `t0` value supplied there is from `ClipParameters::t0`, and that value is initialized with a duration relative to clip play start, not an absolute time."
1302920214,5041,saintmatthieu,2023-08-23T12:09:28Z,"Right. I just pushed a commit that changes the `Copy` behaviour to something more usual, with trailing samples being zeroed. I might have decided against it at the time to ease the implementation of `FillBufferFromTrackBlockSequence`, but now that it's gone it's better to make the life of clients easier. Sorry for the re-implementation and please take a close look at that commit."
1302920390,5041,Paul-Licameli,2023-08-23T12:09:38Z,"All right, now I think the other call of `Grow` was correct all along, but the comment added there is incorrect.

And this call was correct, but the added code, more seriously, is now incorrect.

`t0` above also comes from `ClipParameters` and therefore is relative to clip start.  Subtracting start time again will be wrong when start time is not 0.
"
1302922352,5041,saintmatthieu,2023-08-23T12:11:23Z,You have an IEEE subscription ?? :star-struck:
1302925681,5041,saintmatthieu,2023-08-23T12:13:54Z,"Copy-pasting your explanation as comment here, tagging it with your initials."
1302926607,5041,Paul-Licameli,2023-08-23T12:14:44Z,"> You have an IEEE subscription ?? :star-struck:

Actually no
"
1302937403,5041,saintmatthieu,2023-08-23T12:24:35Z,"There's no trace of absolute time here, I wonder what brought me to think there was. Even then I was inconsistent. I wonder how my extensive testing didn't get me to spot the error, maybe because it ""only"" induced more cache misses ? Anyway, fixing it."
1307364845,5041,saintmatthieu,2023-08-28T12:32:30Z,@LWinterberg I need your benediction :)
1307523722,5041,Paul-Licameli,2023-08-28T14:44:04Z,"I don't feel competent to review this without much more time for study of the library.  I'll just ask:
- does this affect performance only or does it change the calculations?
- The reassignment of `hop_s_err` and `hop_a_err` used to happen once per function call.  Do you mean to make it happen at most once, or sometimes multiple times?
- If not multiple times, then should `hop_s` and `hop_a` be changed after these two assignments?
- "
1307526669,5041,Paul-Licameli,2023-08-28T14:46:20Z,"Again, I'll just trust this change without digging deep
"
1308470363,5041,saintmatthieu,2023-08-29T09:16:50Z,"The naming of these variables isn't really descriptive. As I understand this code, `hop_a_err` is the analysis samples ""credit"". `exact_hop_a`, the ""exact analysis hop size"", can be a fractional number of samples, but of course, one can only feed discrete samples at a time. So when you need 2.5 samples to perform one FFT, as soon as you get the 3rd sample, all 3 samples are processed, but you have a credit of 0.5 samples. This goes into `hop_a_err`. Same principle for `hop_s_err` but in the IFFT direction.
There were situations (when `numSamples` wasn't the 1024 ""default"" or the stretch ratio is so low that `exact_hop_s < 1`) where those state variables were updated although no analysis or no synthesis happened. As a result, no samples were ever produced, and we were falling in an endless loop.

Now to your questions:
* no, negligibly
* sometimes multiple times, which is the correct thing to do: update your credit variables if and only if analysis/processing happened

@dozzzzer also tested the other extrem: stretching from 30s to 12h. I also did and these changes do not help. Looking into it."
1310090700,5041,Paul-Licameli,2023-08-30T11:00:07Z,"What's your proof that the assertions in `as_size_t` are satisfied -- that there is no narrowing of a negative or a too-large `SampleCount` value?
"
1310111527,5041,Paul-Licameli,2023-08-30T11:18:28Z,Same question
1310111679,5041,Paul-Licameli,2023-08-30T11:18:36Z,"Same question
"
1310180780,5041,Paul-Licameli,2023-08-30T12:17:34Z,"I see that before this commit, `AudioSegmentSampleView` was constructed in only one place outside tests, in `Sequence`, and always passing `size_t length` to the `sampleCount` argument.

If `AudioSegmentSampleView` really eliminated use of type `sampleCount` and only used `size_t`, it would move the need to use `as_size_t` to the point of construction.

There are new places where it is constructed, all of them in `WaveTrack` and added by this commit.
"
1310182741,5041,Paul-Licameli,2023-08-30T12:19:20Z,"In fact, the accessor `AudioSegmentSampleView::GetSampleCount` was used nowhere before this commit.
"
1310192407,5041,Paul-Licameli,2023-08-30T12:27:10Z,"Here and elsewhere, ""half as many"" would read better than ""twice as few""
"
1310200723,5041,Paul-Licameli,2023-08-30T12:32:14Z,"""intervals""

Same spelling error in one other place
"
1310204578,5041,Paul-Licameli,2023-08-30T12:34:41Z,"""the raw"" x 4 places
"
1310212486,5041,Paul-Licameli,2023-08-30T12:40:45Z,"I must remember to fix this when I rebase #5031 onto this again:  use the ""narrow"" not the ""wide"" clip when this class holds references to two clips.
"
1310235623,5041,Paul-Licameli,2023-08-30T12:57:58Z,"I hope that writing this commit was a good exercise in understanding the new channel and interval interfaces.
"
1310373638,5041,Paul-Licameli,2023-08-30T14:29:31Z,"Inner pair of `{}`?
"
1310386165,5041,Paul-Licameli,2023-08-30T14:38:26Z,"Just as `Start` and `End` are non-virtuals in `ChannelGroupInterval`, so should the be too in the base class `ChannelInterval`, I think.  But that can be fixed later
"
1310426966,5041,saintmatthieu,2023-08-30T15:06:38Z,"No proof, just assuming that users request reasonable amounts of time of reasonably stretched clips. In `MixerBoard` usage, ~= 50ms are queried at a time. Stretch ratio to get an overflow would have to be
```py
>>> numSampsIn50ms = 0.05 * 44100
>>> numSampsInSize_t = 2**31
>>> overflowStretchRatio = numSampsInSize_t / numSampsIn50ms
973915.4866213152
```"
1310465013,5041,Paul-Licameli,2023-08-30T15:33:01Z,"My own, old comment in the file says
`   // Expect that the difference of t1 and t0 is the part of a track played
    // in about 1/20 second (ticks of TrackPanel timer), so this won't overflow
`
I didn't make a really rigorous proof then.  But can we do better?

Stretches aren't limited yet to ""reaonable"" bounds and also the calculation above is specific to default sample rate.

"
1310465997,5041,saintmatthieu,2023-08-30T15:33:44Z,"I agree, I should be consistent with myself. A sample view is typically used to store a temporary buffer, and the total amount should never exceed what `size_t` can hold. Shall I simplify this?"
1310469168,5041,Paul-Licameli,2023-08-30T15:36:02Z,"Add to the comment ""unless stretch ratio is extreme""

"
1310469413,5041,saintmatthieu,2023-08-30T15:36:14Z,sure
1310475830,5041,saintmatthieu,2023-08-30T15:40:50Z,"That's not the part that causes me the most headache. I find this model quite sensible, and was happy to be able to easily use consistent aliases, such as `ChannelGroupSampleView` and `ChannelSampleView`. Remains `AudioSegmentSampleView` that on the occasion I'd rename `ChannelSegmentSampleView`. (I wouldn't use `ChannelIntervalSampleView`, because ""segment"" is now coined to either clip or silence segments. A `WaveChannelInterval`, in practice, implies (the channel of) a clip under the hood.)"
1310478763,5041,Paul-Licameli,2023-08-30T15:43:00Z,"The deleted `as_size_t` is now instead inside the function called above.

I'm not convinced there won't ever be an extreme stretch ratio.

If the assertion ever fired in a debug build -- the release build might continue, with a wrapped, small value.  No harm except an inaccurate meter that put too few floats in its update queue.

But with a less extreme value, which doesn't cause the assertion, still a large size_t value might not be allocable and the release build would crash.

So how about this little bit of bullet-proofing here.

```
Floats tempFloatsArray;
try {
   tempFloatsArray.reinit(nFrames);
}
catch(const std::bad_alloc &) {
   return;
}
```"
1310479365,5041,saintmatthieu,2023-08-30T15:43:28Z,"Indeed, whenever there's the need, we do this."
1310481244,5041,saintmatthieu,2023-08-30T15:44:53Z,"Extremely low, to be precise. Added."
1310484318,5041,Paul-Licameli,2023-08-30T15:47:08Z,"Do this also when constructing `meterFloatsArray`.
"
1310495993,5041,saintmatthieu,2023-08-30T15:55:45Z,"I just tried to crash it, calling `Floats tempFloatsArray{ std::numeric_limits<size_t>::max() };`. The exception was caught by the `Publisher` code, which visits its observers within a try/catch block. This is the case here, since this scope reacts to an `OnTimer` change. So 🤷 "
1310524201,5041,Paul-Licameli,2023-08-30T16:17:07Z,"Something very basic:  Does `mSampleView` really need a longer lifetime than this function?  I think not, it can be a local, not a member.
"
1310688754,5041,saintmatthieu,2023-08-30T18:49:49Z,"It does, if we want the caching to work properly.
Actually I notice one improvement: emptying this view upon start/stop so as to allow cache eviction."
1311360418,5041,Paul-Licameli,2023-08-31T09:30:20Z,good
1311361719,5041,Paul-Licameli,2023-08-31T09:31:24Z,"That wasn't the suggestion:  I said limit the try-catch scope to only the allocation, as in the code sample above.
"
1311366124,5041,Paul-Licameli,2023-08-31T09:34:58Z,"would be better
"
1311401413,5041,Paul-Licameli,2023-08-31T10:04:39Z,I think this was wrong:  it should be `TimeToSamples(t0 - GetSequenceStartTime())`
1312743652,5041,saintmatthieu,2023-09-01T08:39:15Z,"No, the user is already supposed to give clip-relative times."
1312745290,5041,saintmatthieu,2023-09-01T08:40:53Z,"But what use would this be, since the exception is already caught above ? I'm not sure we're understanding each other."
1312750926,5041,saintmatthieu,2023-09-01T08:44:22Z,An elaboration in this comment would be welcome.
666612403,1207,Paul-Licameli,2021-07-09T01:28:53Z,"Oh no, adding colors to the theme.  That has not been done in a long time -- since 2017.  James Crook is more familiar with the theming system than anyone.  A question is whether these choices of colors need to be different in other themes.  If so, it's not obvious how to do it.  It involved DarkThemeAsCeeCode.h, etc. which are generated by strange processes.

"
666824151,1207,vsverchinsky,2021-07-09T09:48:52Z,"I was relying on https://wiki.audacityteam.org/wiki/Theming_HowTo, page doesn't provide information on theme source code generation though"
666928146,1207,Paul-Licameli,2021-07-09T12:56:06Z,"I think it involved making a special build with EXPERIMENTAL_THEME_PREFS and doing other things.

But I also think the colors at the end of the table are just used unchanged in the other themes that don't redefine them.

If you had inserted the lines in the middle, I think that might have messed up the non-default themes worse if they were not regenerated.

I think there is much inconvenience in extending the theming system, which needs rewrites.  But that's another topic.

"
668382981,1207,Paul-Licameli,2021-07-13T02:34:22Z,"Following the analogy with VRuler controls, this function should not be virtual"
668386256,1207,Paul-Licameli,2021-07-13T02:44:12Z,"This is not a pure virtual:  you should commend that the default behavior is to return null.
"
668386343,1207,Paul-Licameli,2021-07-13T02:44:28Z,*controls
668386571,1207,Paul-Licameli,2021-07-13T02:45:10Z,"More simply: `return {};`
"
668386734,1207,Paul-Licameli,2021-07-13T02:45:46Z,"Just analogous with the vruler controls of course.
"
668390314,1207,Paul-Licameli,2021-07-13T02:57:10Z,"This implements the item ""Play head should be rendered over a track panel (not separate tracks)"" of #1181 ?

It's correctly done.

Please make it a separate commit then, for a single independent task, rather than making this one huge commit.
"
668392220,1207,Paul-Licameli,2021-07-13T03:03:21Z,"I do not understand the changes in this file.  This disables the vertical stroke to indicate the zero-length selection.  Why?  And why do you use that particular EXPERIMENTAL?  Where is this change specified?

Can this be another small commit?
"
668393441,1207,Paul-Licameli,2021-07-13T03:07:24Z,"This constant is only used in TrackPanel.cpp -- perhaps it should be defined only in that file, until need arises to reuse the constant elsewhere.
"
668395775,1207,Paul-Licameli,2021-07-13T03:15:04Z,"You have redefined subdivisions in this file.  I like that.  It would be good to make a commit just of the changes of TrackPanel.cpp, and the changes in TrackView necessary for it.  Then, other commits to implement affordance controls specially for WaveTrack and for NoteTrack."
668396103,1207,Paul-Licameli,2021-07-13T03:16:08Z,"I have observed this:  If you minimize a Wave track (the button with a black triangle), it is taller than it was before.  ""Mute"" and ""Solo"" buttons still appear.

Is this an intended consequence?  Is it desirable?  Please point it out to the designers and ask.
"
668399111,1207,Paul-Licameli,2021-07-13T03:26:27Z,"Update this comment!  It's not longer a complete description.
"
668399369,1207,Paul-Licameli,2021-07-13T03:27:21Z,"explicit maybe
"
668399479,1207,Paul-Licameli,2021-07-13T03:27:42Z,"Consider that whenever a ctor has one argument.
"
668400572,1207,Paul-Licameli,2021-07-13T03:31:17Z,"Why was this change needed?  Because of EmptyPanelRect not inheritinc CommonTrackPanelCell?
"
668402214,1207,Paul-Licameli,2021-07-13T03:37:15Z,unnecessarily moved lines
668403314,1207,Paul-Licameli,2021-07-13T03:40:40Z,"These lines aren't gone, but hoisted -- ok
"
668404269,1207,Paul-Licameli,2021-07-13T03:43:58Z,"Why not matching #endif here?
"
668404418,1207,Paul-Licameli,2021-07-13T03:44:35Z,"Compilation fails if the EXPERIMENTAL is turned off.  Fix it
"
668404536,1207,Paul-Licameli,2021-07-13T03:45:00Z,"I don't think the lines above should be compiled only when the EXPERIMENTAL is on
"
668404774,1207,Paul-Licameli,2021-07-13T03:45:56Z,"This new #include is not needed, remove it
"
668404809,1207,Paul-Licameli,2021-07-13T03:46:03Z,"This new #include is not needed, remove it
"
668405627,1207,Paul-Licameli,2021-07-13T03:48:42Z,"We aren't yet wholly consistent about comment at tops of files, but see some examples with my name and imitate with your name in this and other new files.
"
668406718,1207,Paul-Licameli,2021-07-13T03:52:18Z,"all good
"
668407327,1207,Paul-Licameli,2021-07-13T03:54:24Z,"I'd prefer to avoid including TrackPanel.h
"
668407509,1207,Paul-Licameli,2021-07-13T03:54:55Z,"Just ViewInfo::Get(*pProject) and you can avoid use of TrackPanel
"
668408863,1207,Paul-Licameli,2021-07-13T03:59:15Z,"I'm glad you figured out the use of lastState from other examples!
"
668409067,1207,Paul-Licameli,2021-07-13T03:59:49Z,"Remembering the rule that a .cpp file's own header should be the first included, good
"
668410054,1207,Paul-Licameli,2021-07-13T04:03:14Z,"I might want to make a RAII class, perhaps in TrackArtist.h, called TempClippingRegion which does SetClippingRegion in its ctor DestroyClipppingRegion in its dtor... Define it once, reuse the class in a few places.
"
668410631,1207,Paul-Licameli,2021-07-13T04:05:20Z,"This constant might be made private to the .cpp file
"
668410995,1207,Paul-Licameli,2021-07-13T04:06:41Z,Remove this comment
668412203,1207,Paul-Licameli,2021-07-13T04:10:34Z,"But then... perhaps the setting and destroying of the clipping region can happen inside DrawClipAffordance?  Because that function always requires it?  Then you don't need to repeat it for wave track affordance.
"
668413060,1207,Paul-Licameli,2021-07-13T04:13:19Z,Assuming the clipping region is such that the bottom corners are not drawn.
668413268,1207,Paul-Licameli,2021-07-13T04:13:57Z,"Reminder to check whether these and other new colors look good in all four of the built-in themes.  Ask the designers.
"
668414417,1207,Paul-Licameli,2021-07-13T04:17:43Z,"What happens if the text is so long that it extends past the clip's right boundary?

Another clip's affordance might be painted after over part of it.

The text is now always empty, but maybe you will need to truncate it with ...
"
668415428,1207,Paul-Licameli,2021-07-13T04:21:02Z,"The TrackArtists additions might make a small separate commit, followed by commits for wave and note tracks
"
668416973,1207,Paul-Licameli,2021-07-13T04:26:00Z,"This might be a simple pointer.  It's safe to assume no clip you point to will be destroyed during the drawing of the track panel.  So ownership semantics are irrelevant to the function.

"
668418318,1207,Paul-Licameli,2021-07-13T04:30:17Z,"Unecessary, remove it
"
668418892,1207,Paul-Licameli,2021-07-13T04:32:08Z,"Again, this might be a simple pointer"
668419774,1207,Paul-Licameli,2021-07-13T04:34:58Z,"Good, if not strictly needed correction; do the same for SpectrumView
"
668420905,1207,Paul-Licameli,2021-07-13T04:38:52Z,"Good that you figured out the need for this -- it must have been by recording?
"
668421296,1207,Paul-Licameli,2021-07-13T04:40:16Z,"I think that could safely be a static cast.  WaveTrackView controls the definition of its affordance cell as always of this type.

"
668421451,1207,Paul-Licameli,2021-07-13T04:40:39Z,"`return {};`
"
668423099,1207,Paul-Licameli,2021-07-13T04:46:01Z,"Eliminate this #include, as for NoteTrackAffordanceControls
"
668424281,1207,Paul-Licameli,2021-07-13T04:49:39Z,"simplify`: {}`
"
668424479,1207,Paul-Licameli,2021-07-13T04:50:15Z,"`return {};`
Avoid repeating the type.  Let the compiler deduce it.
"
668424693,1207,Paul-Licameli,2021-07-13T04:50:51Z,"unused
"
668426013,1207,Paul-Licameli,2021-07-13T04:54:43Z,"Why the change?  Again because of that empty square above the ruler?
"
668426456,1207,Paul-Licameli,2021-07-13T04:55:55Z,"The logic has changed so that the following lines might execute with `clickedTrack==nullptr` which didn't happen before.  Fix that.
"
668428028,1207,Paul-Licameli,2021-07-13T05:00:36Z,"I'd like to avoid adding more WXUNUSED
"
668428704,1207,Paul-Licameli,2021-07-13T05:02:31Z,"out-dent please
"
668428996,1207,Paul-Licameli,2021-07-13T05:03:36Z,"Just `const AudacityProject *` if you don't use the argument.  It will make no compiler warning.
"
668429273,1207,Paul-Licameli,2021-07-13T05:04:34Z,"Design specified this string?
"
668429847,1207,Paul-Licameli,2021-07-13T05:06:24Z,"Might be a const reference argument to avoid the nontrivial copy of shared_ptr.  Not very important.
"
668430952,1207,Paul-Licameli,2021-07-13T05:09:36Z,"What does this line do?
"
668432370,1207,Paul-Licameli,2021-07-13T05:13:55Z,"This line looks weird.

The conversion of shared to weak can just be left implicit.

"
668433530,1207,Paul-Licameli,2021-07-13T05:17:11Z,"What is really meant by this condition?

That the clip was not dragged, but just clicked and released?

I think a more correct test could be written, than reliance on the return code of Release.

Add something to the base class for this purpose if you must.
"
668434138,1207,Paul-Licameli,2021-07-13T05:19:12Z,"I don't like the existing TypeSwitches, I hope to eliminate many of them, and I want to avoid adding more of them.

Better:  AffordanceHandle defines another virtual function;  and WaveTrackAffordanceHandle is a further subclass supplying the behavior in the block below in an override.
"
668437145,1207,Paul-Licameli,2021-07-13T05:27:47Z,"unnecessary
"
668437812,1207,Paul-Licameli,2021-07-13T05:29:27Z,"What are the ""clip frame drawing fixes?""  Corrections to the previous commit, or some intentional changes specified in the design?  If the first, squash with other commits for wave and note track affordances once those are separated.  If the second, explain more in commit comments.

"
668632210,1207,crsib,2021-07-13T10:23:13Z,"It casts to the subclass, so static_cast is not safe."
668734988,1207,Paul-Licameli,2021-07-13T12:55:09Z,"@crsib that's not a complete answer.  static_cast can be safe in special cases where the programmer has some other way to prove that the cast is always correcct.

The static_cast was a safe thing before that was in the code for years.  I want to understand, why is it no longer so.
"
668785396,1207,vsverchinsky,2021-07-13T13:52:54Z,"If it's guranteed to be a pointer to CommonTrackPanelCell, why then we use TrackPanelCell instead?
And in this case the problem is that EmptyPanelRect class is not derived from CommonTrackPanelCell, and the signature of TrackPanelGroup::Children doesn't say it has to be"
668808232,1207,vsverchinsky,2021-07-13T14:17:08Z,"I don't remember that desiners would requested such behaviour, it rather a unforseen consequence of having an affordance area which increases minimum track size. I'll let them know about this."
669207340,1207,Paul-Licameli,2021-07-14T01:04:17Z,"The complete answer why the old code was not wrong to use static_cast:  you can examine the subdivision of the area in TrackPanel, and prove that the ultimate cells were always of subclasses of CommonTrackPanelCell.  That's not true in general for a CellularPanel (the base class of TrackPanel), but it is true for this subclass of it.

This is no longer true after these changes.  It might be made true again if EmptyPanelRect could also be a CommonTrackPanelCell, knowing which track it is associated with (at construction time), and overriding DoFindTrack() to return that track.

In fact it might be mildly advantageous to rewrite that class this way.  Then the static_cast can be restored.






"
669208972,1207,Paul-Licameli,2021-07-14T01:09:41Z,"> If it's guranteed to be a pointer to CommonTrackPanelCell, why then we use TrackPanelCell instead?
> And in this case the problem is that EmptyPanelRect class is not derived from CommonTrackPanelCell, and the signature of TrackPanelGroup::Children doesn't say it has to be

Good points:  but TrackPanelGroup is misleadingly named for historical reasons (and my fault): CellularPanelGroup would be a better name.  It is now meant to cooperate with CellularPanel, a more general base class of TrackPanel but also of AdornedRulerPanel (the timeline above it).

""TrackPanelCell"" might be better called CellularPanelCell, and ""CommonTrackPanelCell"" is really the common subclass of all cells, specifically of TrackPanel, so ""TrackPanelCell"" should be the name only for that.

The guarantee that the pointer to the visited cell is really of this subclass -- that guarantee is not given by CellularPanel, but it IS given by TrackPanel.

Did I make that clear?  I'm not sure I did, but that's my explanation.
"
669209322,1207,Paul-Licameli,2021-07-14T01:10:58Z,"That is, I mean compile them irrespective of that EXPERIMENTAL
"
669210136,1207,Paul-Licameli,2021-07-14T01:13:37Z,"Also mentioned today:  What about right-to-left languages?  Maybe the code to draw the text needs to change in that case?
"
669211256,1207,Paul-Licameli,2021-07-14T01:17:22Z,"The static_cast was justified by the fact that this UIHandle class is produced only by cell objects that are part of TrackPanel, and all other cells of a TrackPanel were guaranteed to be derived from CommonTrackPanelCell.
"
669211508,1207,Paul-Licameli,2021-07-14T01:18:13Z,"Or again, the static_cast could remain, if the new empty cell type is also a CommonTrackPanelCell.

"
669737397,1207,vsverchinsky,2021-07-14T15:45:37Z,"No, but we definitely will need another hit text for this handle, do i need to talk to designers about that or strings will be reviewed and updated later before we start next release?  "
670327277,1207,vsverchinsky,2021-07-15T10:11:38Z,"Let solve this with PR related to clip names, until then i remove label from affordances"
670333513,1207,vsverchinsky,2021-07-15T10:20:30Z,"You are saying that there is an agreement that TrackPanel should contain only entities derived from CommonTrackPanelCell. I've made a small research and found out that these are not the only places where such assumption is used, so i believe it would be safer to do what you said. Refactoring of this, if required at all, is outside of the scope of this PR."
670335173,1207,vsverchinsky,2021-07-15T10:22:50Z,"The comment above says: constants related to y coordinates in the track panel
And this is not the only constant used only in TrackPanel.cpp, I'd preffer to keep it here to group related things together"
670335623,1207,vsverchinsky,2021-07-15T10:23:32Z,Thanks!
670337026,1207,vsverchinsky,2021-07-15T10:25:28Z,"DrawClipAffordance does not have enough of context to make proper clipping, also in example with wave clips, that would lead to redundant calls"
670343523,1207,vsverchinsky,2021-07-15T10:35:46Z,"Thanks! Fixed whole drawing, should be fine now "
670350500,1207,vsverchinsky,2021-07-15T10:46:58Z,do you mean use {} within ternary operator? I don't think C++ allows that
670351341,1207,vsverchinsky,2021-07-15T10:48:16Z,"Yep, typo, thanks!"
670353167,1207,vsverchinsky,2021-07-15T10:51:13Z,This is to highlight affordance on hover
670364406,1207,vsverchinsky,2021-07-15T11:09:06Z,"This is an error, thanks. Still i did some changes, which allow me to draw cursor over affordance area properly"
671088706,1207,Paul-Licameli,2021-07-16T09:04:31Z,"I see the change now at 6888d9006ff9286ec38e8dd1c3e3c0324240269a, but I don't yet approve that.
"
671103855,1207,Paul-Licameli,2021-07-16T09:28:07Z,"Still unresolved
"
671104835,1207,Paul-Licameli,2021-07-16T09:29:34Z,"I'm sure it does, at least in C++14 and later.  I have compiled lines like it.
"
671108370,1207,Paul-Licameli,2021-07-16T09:35:11Z,"I made a card for this question in the project board.
"
671109400,1207,Paul-Licameli,2021-07-16T09:36:53Z,"The correct way to do that is to override UIHandle::Enter.  See other examples.
"
671110431,1207,Paul-Licameli,2021-07-16T09:38:34Z,"This is still unresolved
"
671117229,1207,Paul-Licameli,2021-07-16T09:49:43Z,"Remove these two functions
"
671117477,1207,Paul-Licameli,2021-07-16T09:50:07Z,"*thickness
"
671119264,1207,Paul-Licameli,2021-07-16T09:53:00Z,"This might be constructed also with a shared_ptr to the associated track
"
671119411,1207,Paul-Licameli,2021-07-16T09:53:13Z,"Changed base, good
"
671120456,1207,Paul-Licameli,2021-07-16T09:54:53Z,"... and then this might return non-null.  It may be slightly advantageous to do that.  Certain click-drag-release actions query for the track the mouse is over during the drag, which might not be the same as at the click point.  This information can be found when the mouse is over a vertical ruler or over a resizing area.  It might as well be available too for this small rectangle.
"
671123726,1207,Paul-Licameli,2021-07-16T10:00:18Z,"I do not approve this commit.

Was this change of appearance explicitly specified?  To draw the zero-width selection over the affordance too?  But, not do to that with non-zero-width selection?

As implemented here, the line will also be stroked over the separator between stereo channels.
"
671126301,1207,Paul-Licameli,2021-07-16T10:04:35Z,"Another point of the old implementation of the zero-width cursor is that the function DrawOverlays() knows how to redraw certain simple strokes over the track panel area cheaply, without repainting everything, and existing calls to DrawOverlays() after change of selection assume that the erasing of old selection and drawing of new will be done.

"
671126888,1207,Paul-Licameli,2021-07-16T10:05:35Z,"And that happens only for drawing implemented by subclasses of Overlay.  Not TrackPanelDrawable.
"
671156327,1207,vsverchinsky,2021-07-16T10:58:46Z,What for we do need it now?
671195732,1207,vsverchinsky,2021-07-16T12:12:00Z,"None of my compilers allow that.
Clang bundled with xcode 12.4 says: Initializer list cannot be used on the right hand side of operator ':'
MSVC does not compile this as well. And minimum C++ Standard version is set to C++17 in CMake (i didn't change that)"
671209382,1207,Paul-Licameli,2021-07-16T12:30:15Z,"I'm not sure which picture I should look at there.

Still, if it is the correct design, the implementation should use Overlay classes.
"
671211138,1207,Paul-Licameli,2021-07-16T12:32:34Z,"When I click that link, the picture shows me a mono track, with a non-point selection -- and it id NOT painting over the affordance.  And that behavior will happen with no other change.

Where is there a picture specifying a change for drawing of point selection?  And also showing a stereo example?
"
671214266,1207,Paul-Licameli,2021-07-16T12:36:46Z,"For instance, if you click in one track to select, then drag the mouse into another track, then the other track also becomes selected.  This happens not only if the mouse drags into the waveform area, but even if it drags into the vertical ruler or control area.  It should happen also if the mouse drags into the new empty cell.  So the empty cell should report which track it is associated with.

This may not be a very important case to fix, that anyone will notice.  However, it is very easily implemented, and makes behavior a bit more consistent, so I say, do it.



"
672271568,1207,Paul-Licameli,2021-07-19T12:55:48Z,"You are right, but nullptr will work instead of {}, and we should prefer that brevity and non-repetition of type information.

"
672338180,1207,vsverchinsky,2021-07-19T14:16:05Z,Does not compile either: Non-pointer operand type 'const std::weak_ptr<WaveClip>' incompatible with nullptr
672587955,1207,vsverchinsky,2021-07-19T19:56:03Z,"As far as i can see, changing selection involves redrawing anyway (i didn't add any line to invoke redrawing), so from that perspective i don't see difference. Right now i don't see solid solution for solving this issue with overlays, i can come up only with workarounds."
672815010,1207,Paul-Licameli,2021-07-20T05:25:36Z,"Is there a reason you can't implement the change in this file, rather than in TrackPanel?
"
672815319,1207,Paul-Licameli,2021-07-20T05:26:35Z,oh well
672815664,1207,Paul-Licameli,2021-07-20T05:27:35Z,"Now it's resolved, thanks!

I see you copied the implementation of SelectHandle's double click, which still has one of the unfortunate TypeSwitches, but that can be fixed later.
"
672817051,1207,Paul-Licameli,2021-07-20T05:31:28Z,"It may be a problem that we do too much unnecessary redrawing and should figure out how to do less of it.

I don't see why you can't have the EditCursorOverlay dynamic_cast to tack affordance cell types and then that's not null, then draw over the cell, just as with TrackView.
"
672817236,1207,Paul-Licameli,2021-07-20T05:31:59Z,"approved this commit
"
672819112,1207,Paul-Licameli,2021-07-20T05:36:48Z,This dynamic cast could safely be static instead.  WaveTrackAffordanceHandle can assume that it is only created by hit-tests on affordance areas of wave tracks.
672819389,1207,Paul-Licameli,2021-07-20T05:37:36Z,"Thanks for this commit
"
672819514,1207,Paul-Licameli,2021-07-20T05:37:56Z,"I approved this commit
"
672901673,1207,vsverchinsky,2021-07-20T08:07:40Z,"Then the only reason for having a class for affordance cell (which is required to be a CommonTrackCell now) would be to detect it's type with dynamic_cast (or to check for WaveTrackAffordanceControls and NoteTrackAffordanceControls separately). But when drawing is done in ChannelGroup, we don't need neither of these (separate class, type check)."
672913037,1207,vsverchinsky,2021-07-20T08:23:34Z,"I don't like dymamic_cast, but for me it's a general rule to use it when downcasting is required, it spots places where refactoring may be needed."
674899986,1207,Paul-Licameli,2021-07-22T15:10:37Z,"This is not sufficient reason not to make the affordance cell class.

When I rebase my long branch onto the part of affordances already merged, and resolved conflicts, I needed the new common class for other reasons.

The code in TrackPanel may be simpler, avoiding casts, but that also does not address the possible performance problems.

Short answer:  I still have my doubts about moving the drawing.  It may prove to be better this way.  But, I also don't want to delay merging this, and the appearance is right.

Therefore:  don't delete the lines above, but comment them out, as the possibly useful alternative way of drawing the cursor, which we may want to use again in future.
"
674921133,1207,Paul-Licameli,2021-07-22T15:30:19Z,"Spelling, ""navigation""
"
674923652,1207,Paul-Licameli,2021-07-22T15:33:23Z,"Very good:  you found out that the right-click case needs handling too.  Maybe just comment `right-click`
"
674935280,1207,Paul-Licameli,2021-07-22T15:47:25Z,This is a large block of moved code.  It used to happen in the click.  I'm not sure how I reach it in the debugger now.  Can the commit comment explain the purpose of this move?
674937142,1207,Paul-Licameli,2021-07-22T15:49:32Z,"More is happening here than the routine changes needed elsewhere for the distinction of the two indices.  If it were me, I might make two commits.

Rather than that, add more explanation to the commit comment about the intention.
"
674937374,1207,Paul-Licameli,2021-07-22T15:49:48Z,"More commit comments about this.
"
674940702,1207,Paul-Licameli,2021-07-22T15:53:30Z,"I disagree with that general rule.  static_cast is appropriate instead of dynamic_cast, when you have good reasons to tell the compiler, ""trust me, I can prove that the check is not necessary.""

dynamic_cast is also justifiable sometimes.
"
750178462,2121,Paul-Licameli,2021-11-16T11:33:11Z,"By eliminating UTF8CTOWX, are you requring that tag strings to be canonicalized into utf-8 already, or requiring them just to be ASCII strings?  They are all ASCII in practice (I just had to  review them all).  It is worth a comment.

You know I like to say things with type disctinctions where I can.  If we were using C++20, I would use std::u8string_view instead of std::string_view.  Not having C++20 and char8_t, what can we do?  Maybe at least make a different type alias to make the disctinction in function declarations, thought we won't have type checking by the compiler.


"
750178577,2121,Paul-Licameli,2021-11-16T11:33:19Z,"By eliminating UTF8CTOWX, are you requring that tag strings to be canonicalized into utf-8 already, or requiring them just to be ASCII strings?  They are all ASCII in practice (I just had to  review them all).  It is worth a comment.

You know I like to say things with type disctinctions where I can.  If we were using C++20, I would use std::u8string_view instead of std::string_view.  Not having C++20 and char8_t, what can we do?  Maybe at least make a different type alias to make the disctinction in function declarations, thought we won't have type checking by the compiler.


"
750204812,2121,Paul-Licameli,2021-11-16T12:06:15Z,"I'm taking this whole file on trust.  Are there any differences from the original I should know?  As there were with ToChars?
"
750206466,2121,Paul-Licameli,2021-11-16T12:08:37Z,"""not matching the pattern""
"
750206711,2121,Paul-Licameli,2021-11-16T12:08:59Z,"""too"""
750208447,2121,Paul-Licameli,2021-11-16T12:11:23Z,"""signed"" (in 4 places)

""singed"" means ""burned"" -- which you could also say as ""charred"" :-)
"
750209264,2121,Paul-Licameli,2021-11-16T12:12:33Z,"(And it rhymes with ""cringed"")
"
750212179,2121,crsib,2021-11-16T12:16:37Z,This time it is just the latest release of the library!
750214047,2121,Paul-Licameli,2021-11-16T12:19:15Z,"`unsigned(c) - '0'` ?

I'm paranoid of signed char now.
"
750222814,2121,Paul-Licameli,2021-11-16T12:30:48Z,"I think you don't need `- 1`.  You treat the last safe digit in the second loop below instead of the first.  Not wrong, but is it too much caution?
"
750222917,2121,crsib,2021-11-16T12:30:56Z,"I don't actually think that char8_t implies any checks on encoding. However, we use Expat, and Expat seems to convert the output to UTF8 internally. So specifically for this case, I imply UTF8, and that is what originally implied.

The UTF8 allows to safely compare to ASCII strings given that all the symbols are from the first half of the table. This covers Audacity needs for 100% when working with tags and names. For attribute values - we explicitly convert from UTF8 to wxString where needed."
750223873,2121,crsib,2021-11-16T12:32:07Z,Probably `std::deque`? It can be more efficient on some platforms
750225781,2121,Paul-Licameli,2021-11-16T12:34:38Z,"This if-else is redundant with line 74
"
750229472,2121,crsib,2021-11-16T12:39:21Z,"I'm pretty sure that this will generate the same code because of integer promotion rules. https://godbolt.org/z/4T8cfsMej

Can do it you way, no probs :-)
"
750229756,2121,Paul-Licameli,2021-11-16T12:39:38Z,"Should this be
`std::is_signed_v<ResultType>
   ? static_cast<UnsignedResultType>(
      std::numeric_limits<ResultType>::max() / 2 + (isNegative ? 1 : 0))
   : std::numeric_limits<ResultType>::max()`
"
750234840,2121,crsib,2021-11-16T12:44:52Z,"I want to keep the consistent overflow checks.

I.e. for uint8_t digits10 is 3, but 257 is an overflow. So we allow to parse ""57"" quickly but give more caution while parsing ""157"" because we expect that it can be ""557"""
750238413,2121,crsib,2021-11-16T12:48:29Z,"Hmm, thank you for pointing out, line 74 is redundant actually! I want `if constexpr` here exlicitlely.
"
750244438,2121,Paul-Licameli,2021-11-16T12:54:38Z,"> I want to keep the consistent overflow checks.
> 
> I.e. for uint8_t digits10 is 3, but 257 is an overflow. 

Is it really 3, not 2?  See immediately under ""Example"" https://en.cppreference.com/w/cpp/types/numeric_limits/digits10


"
750246737,2121,crsib,2021-11-16T12:57:07Z,"Hmm, could be a bit faster, yes!"
750249896,2121,crsib,2021-11-16T13:01:05Z,"Hmm, yes, you are completely right!"
750266429,2121,Paul-Licameli,2021-11-16T13:22:05Z,"Certainly it's safe when a tag is ASCII, and all of them are.  But I'm asking, are we _requiring_ them to be ASCII now that you remove UTF3CTOWX ?

You may miss my point about char8_t -- it is that, where a string or string_view is required to be utf8 encoding, it would be good to say that with one type, and where required to be ASCII, to say that without another type, and it would be best if the types do not implicitly interconvert, so the compiler will help us catch misuses.
"
750277735,2121,Paul-Licameli,2021-11-16T13:35:11Z,"I thought `deque` deals with big pages.  Existing ProjectFileIORegistry (alias XMLMethodRegistry<AudacityProject>) registrations are maybe too few to justify it, and they happen only at startup.

Whereas, the lookups into the map may be many, and we want all the savings we can find during deserialization.

The lookups may not really be many, yet, but XMLMethodRegistry may be reused for many more fields later.
"
750278915,2121,Paul-Licameli,2021-11-16T13:36:35Z,"Not just faster, but correct.  It was wrong without `/ 2`.  You want overflow of the absolute value of the signed value at a lower threshold than with unsigned.
"
750284456,2121,crsib,2021-11-16T13:42:54Z,">are we requiring them to be ASCII 

We can't even do it, because Expat will always output UTF8 encoded string.

>where a string or string_view is required to be utf8 encoding

The safest assumption is that all std::string are UTF8 encoded to be fair."
750314906,2121,Paul-Licameli,2021-11-16T14:15:46Z,"temp > maxValue is useless in the unsigned case.

temp < result is an insufficient check for overflow!

Try it for example with ResultType as unsigned char, and the string ""724"".  You will get 212 and no error detected.

Please review another suggested commit from me to fix this."
750320590,2121,Paul-Licameli,2021-11-16T14:21:24Z,"Sorry, I was wrong, because the template argument is `<ResultType>` not `<UnsignedRestultType>`
"
750322072,2121,Paul-Licameli,2021-11-16T14:22:52Z,"But the original was wrong too, because the cast to UnsignedResultType should be done before adding 1 !  (Maybe it works, but the small change technically avoids actual overflow in the computation of maxValue itself)"
750350620,2121,crsib,2021-11-16T14:50:27Z,"Yes, I rewrote it correctly"
750351568,2121,crsib,2021-11-16T14:51:21Z,"> temp < result is an insufficient check for overflow!

Hmm, it will, but probably not for the `uint64_t`, let me think. Definitely works for  `uint8_t`:

https://crsib-screenshots.s3.amazonaws.com/202111161744-bs5nq.png

>temp > maxValue is useless in the unsigned case.

We can compile it out by if constexpr, but I don't think if it really matters though"
750356412,2121,Paul-Licameli,2021-11-16T14:55:54Z,"""text"""
750356878,2121,Paul-Licameli,2021-11-16T14:56:18Z,"""a number of Get overloads""
"
750359433,2121,Paul-Licameli,2021-11-16T14:58:41Z,"""uninitiallized""
"
750361227,2121,Paul-Licameli,2021-11-16T15:00:27Z,"Isn't string_view cheap to pass by value?
"
750370636,2121,Paul-Licameli,2021-11-16T15:09:43Z,"You use noexcept a lot.  What is your understanding of the usefulness of it?

My understanding is that noexcept is mainly useful for a few special functions like constructors, destructors, moves, and swaps so that standard library containers and algorithms can sometimes produce more efficient specializations.

That is, where something like this might occur:

```
if constexpr(noexcept( expression ) ) {
   ... efficient special case ...
}
else {
   ... careful general case making strong exception safety guarantee ...
}
```

But all these accessors, even if they don't ever throw, are unlikely to bring any such benefit by having the annotation.
"
750381700,2121,Paul-Licameli,2021-11-16T15:20:25Z,"You just overloaded one function name ""Get"" for the functions without default values.  Why not do the same for this other series?

Overloading one name makes nice uses of Visit of a variant possible, with a simple generic lambda, as I did in this commit in master.  3acbcb4c2d8ada1e74991be79ecb3844568bcc0a
"
750385688,2121,Paul-Licameli,2021-11-16T15:24:10Z,"As I showed in commit 3acbcb4c2d8ada1e74991be79ecb3844568bcc0a in master, we can use variant, with some restrictions.  Use `get_if` not `get`.
"
750390367,2121,Paul-Licameli,2021-11-16T15:28:34Z,"`std::is_signed_v<bool>` is false:  https://en.cppreference.com/w/cpp/types/is_signed

So maybe you should do like the standard library?
"
750411836,2121,Paul-Licameli,2021-11-16T15:48:38Z,"Unused expression, and incorrect result!
"
750418726,2121,Paul-Licameli,2021-11-16T15:55:20Z,"Maybe cast to unsigned and express this with one bitwise &
"
750420153,2121,Paul-Licameli,2021-11-16T15:56:42Z,"This entire source file makes me want to find a nicer rewrite with variant and Visit and less repetition...  but not now
"
750430536,2121,crsib,2021-11-16T16:07:05Z,It is
750436381,2121,crsib,2021-11-16T16:12:58Z,"For two reasons:
1. It's a part of contract for the user of the interface. Similar to `const`. If I see `noexcept` - I expect that I don't have to handle the exception.
2. It impacts the code generation even more than const. (https://isocpp.org/blog/2014/09/noexcept-optimization)"
750438879,2121,crsib,2021-11-16T16:15:32Z,I'm not sure if I understand what you mean. Get(bool&) and GetBool(bool) behavior is completely different.
750439405,2121,crsib,2021-11-16T16:16:02Z,"Sure, why not!"
750439522,2121,crsib,2021-11-16T16:16:10Z,Ooops
750442507,2121,crsib,2021-11-16T16:19:12Z,"Well, this will only replace switch by mType to switch by variant::index. I expect the compilation speed to be much worse in the case of a variant though."
750452184,2121,crsib,2021-11-16T16:28:56Z,"There will be a huge set of nested ifs by a type, won't it? So the amount of code will be roughly the same, the compilation speed will be much worse though.

Get can be rewritten easily using a template, but again, the cost will be the compilation time."
750454812,2121,crsib,2021-11-16T16:31:46Z,"(You know, like)

```
template<typename T>
bool Get(T& value) const
{
  if constexpr(std::is_integral_v<T>) 
    return GetInteger(value);
 else ...
}
```"
750480476,2121,Paul-Licameli,2021-11-16T16:58:54Z,"I notice this change to the call to WriteAttr.  (Only to this call.)  But the function XMLWriter::WriteAttr was not changed.  There is still an implicit construction of a wxString each time it is called.

Did you mean yet another change of arguments, to take std::string_view?  This might squeeze some more performance out of serialization.  But this PR is about the deserialization.

"
750482515,2121,crsib,2021-11-16T17:01:09Z,"Well, this is a mistake :-(

>This might squeeze some more performance out of serialization.

I do, but not with this PR"
750484914,2121,Paul-Licameli,2021-11-16T17:03:46Z,"Instead of naming the overloads taking a default value as GetBool, GetInt16, ... they might all be called Get, but then a non-deduced template parameter would be needed when the default is not specified, thus Get<bool>().  That might be an extra bother to type, but if for some reason you wanted these functions in a variant visitor, there would be a uniform syntax Get<T>() for some T.

Well never mind.  I'm now reading how these functions are used in practice in a later commit.
"
750490877,2121,Paul-Licameli,2021-11-16T17:10:31Z,"Is this a not always correct assumption that sizeof(long) is sizeof(int32_t)?
"
750505433,2121,crsib,2021-11-16T17:27:26Z,"The compiler replaces it with something like `(value - min) < (max - min)` if the ResultType is smaller than int64_t and simply compiles out this check if ResultType is int64_t.

I feel like the direct comparison here expresses the intention better both for the reader and for the compiler."
750507449,2121,crsib,2021-11-16T17:29:41Z,"On our platforms  - yes, but let me rewrite it in a safer way."
750508446,2121,crsib,2021-11-16T17:30:53Z,"Hmm, I've looked below, we convert it to `int` later on"
750510604,2121,crsib,2021-11-16T17:33:27Z,"Actually, previous code could lead to an undefined value in viewInfo.vpos. 

`ToLong` docs state `false if the string does not represent a valid number in the given base (the value of val may still be modified in this case).`"
750515070,2121,crsib,2021-11-16T17:38:57Z,I can rename Get to `TryGet` if you want :-) This will allow to name this set of functions as simply `Get` then.
750516792,2121,crsib,2021-11-16T17:41:04Z,"Just to clarify - I've tried to keep the diffs as small as possible, and I guess it was your intention as well when you were extracting this code into a library. "
750518936,2121,crsib,2021-11-16T17:43:46Z,"What's worse, now I see that in some cases (see `zoom` nearby) the original code had undefined behavior and I'm no longer sure that my changes are equivalent. I think I will go ahead with that TryGet refactoring, this will force me to rewrite all such code as `a = value.Get(a)`. "
750663472,2121,Paul-Licameli,2021-11-16T21:09:04Z,"And yet isn’t there generation of code to detect an exception trying to escape the scope, and forcing a call to terminate instead?  My understanding is that this is required by the standard and is not free.  See also the mention of “table” implementation at the end which seems to be questioning what Scott said."
750664829,2121,Paul-Licameli,2021-11-16T21:11:09Z,"I think you could just call them all Get and rely on overload resolution, but maybe you would not want to.

Or maybe Get_Or?  (See std::optional::value_or)
"
750666165,2121,Paul-Licameli,2021-11-16T21:13:07Z,"Who cares, we will be at C++20 with modules speeding up our builds next month.  Right after the similarly easy replatforming.  Yeah."
750667658,2121,Paul-Licameli,2021-11-16T21:15:30Z,Cool.  Well at least one compiler.
750673307,2121,Paul-Licameli,2021-11-16T21:24:23Z,"I like avoidance of repetition where I can get it with templates, with its advantages for maintainability.  Maybe I should care more about build time.  But you know... “Lisp programmers know the value of everything and the cost of nothing.”  Substitute “meta” for “Lisp”"
750683088,2121,crsib,2021-11-16T21:39:36Z,"Templates have a significant cost attached. They are slow to compile; they bloat the executables and libraries. In this case, having all the internal of the class exposed seems a bit much to me. There are places where they are extremely helpful, but I really don't think that this is the one."
750685706,2121,crsib,2021-11-16T21:43:54Z,"I've checked it over Clang, MSVC, and GCC. All three generated a single comparison instruction here and compiled out the int64_t case. "
750688783,2121,crsib,2021-11-16T21:48:39Z,">Get and rely on overload resolution

Overloading with reference and value type doesn't really play well."
750699351,2121,crsib,2021-11-16T22:05:32Z,"Only if the compiler sees that there is a potentially-throwing expression, and unlike throw() noexcept is not required to generate unwinding code at all. It may do it, though. 

In our case, as we build loads of shared libraries, the only case the compiler can know that for sure is if we correctly mark exported methods as noexcept. 

BTW CppCoreGuidelines E.12 is ""Use noexcept when exiting a function because of a throw is impossible or unacceptable"" "
751127787,2121,Paul-Licameli,2021-11-17T10:57:37Z,"Should you shrink the default to be sure the operating system doesn't grab a second 4K page that is mostly wasted?
"
751130788,2121,Paul-Licameli,2021-11-17T11:01:44Z,"Why not just memcpy?
"
751134680,2121,Paul-Licameli,2021-11-17T11:06:44Z,"There is no check of the return value of ReadValue!
"
751134937,2121,Paul-Licameli,2021-11-17T11:07:03Z,ditto
751143337,2121,Paul-Licameli,2021-11-17T11:19:00Z,"""handler""
"
751153283,2121,Paul-Licameli,2021-11-17T11:32:49Z,"XMLAttributeValueView.h
"
751155116,2121,Paul-Licameli,2021-11-17T11:35:23Z,"I like the encapsulation of the IsGoodInt tests and similar now
"
751159254,2121,Paul-Licameli,2021-11-17T11:41:07Z,"This line made me look here and check the rules for copying of unions https://en.cppreference.com/w/cpp/language/union
"
751162357,2121,Paul-Licameli,2021-11-17T11:45:25Z,"Squash the commit that made this change with the previous, to keep buildability of all commits in the branch
"
751165090,2121,Paul-Licameli,2021-11-17T11:49:25Z,"The skipping of empty tags was not preserved
"
751171706,2121,Paul-Licameli,2021-11-17T11:58:58Z,"I notice a few case insensitive comparisons in the old code.  Maybe it doesn't matter.

Some of the other ones are only about very old file formats.
"
751172865,2121,Paul-Licameli,2021-11-17T12:00:44Z,"Wait, you did take care of case-insensitive comparisons.  But, you missed one of the old wxStricmps, above.
"
751177260,2121,Paul-Licameli,2021-11-17T12:06:53Z,"I think you need a pop-front of mAttrs to preserve this old behavior now, skipping ""filename"" before examining the rest.

Did you test importing of an Audacity 2 file?
"
751197669,2121,crsib,2021-11-17T12:35:08Z,"I'm not sure if I fully understand your concern. In case of a page fault, OS always will fetch more than one page from the swap. In case the memory read can be satisfied from RAM there is a balance of how many cache lines we are willing to waste for the buffer purposes vs the cost of reading data. 

4k is usually a good compromise, but the optimal performance for SQLite reader proved to be around 32k, otherwise, the cost of reading itself reduced performance noticeably. 

Speaking of how virtual memory is allocated the page size is rarely relevant too. And we have no control over it anyway, most likely an allocation will occupy the adjacent pages.

`fread` buffer size is 4k by default in Microsoft CRT, 8kb on GLIBC.

Please keep in mind, that in our configuration SQLite does not use memory-mapped IO, reading from disk usually is not implemented via memory mapping.
"
751212938,2121,crsib,2021-11-17T12:55:10Z,"This class was written to avoid the `memcpy`, specifically because memcpy was the number one hot spot. This would be odd to use it here.

Both on ARM64 and x86(-64) this code will generate a single instruction on all the compilers we use. This code remains safe for older ARM CPUs. 

However, it was noted that MSVC fails to optimize `memcpy` sometimes."
751216894,2121,crsib,2021-11-17T13:00:10Z,"As with the restructuring you do - I had no intentions to fix all possible issues with the original code. 

The `LastRead` was not checked either."
751219015,2121,crsib,2021-11-17T13:02:44Z,I will squash it before merging
751224588,2121,crsib,2021-11-17T13:09:55Z,Fixed!
751225858,2121,Paul-Licameli,2021-11-17T13:11:29Z,"Still have a comment typo
"
751226156,2121,crsib,2021-11-17T13:11:51Z,"Thank you pointing out, fixed!"
751228882,2121,Paul-Licameli,2021-11-17T13:15:14Z,"Reference and const reference is what I should have said
"
751229426,2121,Paul-Licameli,2021-11-17T13:15:59Z,"Triple cool.
"
751236670,2121,Paul-Licameli,2021-11-17T13:24:39Z,"I was thinking of allocating the memory for a vector of 4096 chars, which will have some small memory allocaiton overhead.  Does the memory allocator try to page-align such big requests, and if so, is there any small advantage in shrinking the vector size just a little so that data plus overhead fits that page?
"
751247216,2121,crsib,2021-11-17T13:37:05Z,"Not this specific case. wavetrack doesn't handle ""filename"" attribute anyway, so it should be safe. I will add pop_front anyway."
751255004,2121,Paul-Licameli,2021-11-17T13:46:32Z,"I like to clean up these WXUNUSED things when I have excuse to disturb a function.  Just omit the argument name.  Or, use `[[maybe-unused]]` if you want to be very modern.
"
751263512,2121,crsib,2021-11-17T13:56:09Z,"I don't like it either, but I've tried to leave as much of the original code as possible
"
751264867,2121,Paul-Licameli,2021-11-17T13:57:38Z,"I just checked again the definitions of IsGoodString and IsGoodLongString.  The first had an additional check that the other did not, that a string isn't over 4096 characters and possibly from a malicious file, or so the comment said.

Are you intentionally removing the excessive length check?  I don't see where in the PR it is preserved.

See commit 7547de9 which was recent and relevant, changing the bound used for the check.  Although in that commit, pehaps the better thing would have been to use IsGoodLongString somewhere to avoid the check.


"
751274098,2121,Paul-Licameli,2021-11-17T14:07:11Z,"A general comment about these XMLValueChecker functions:  some become unused, so add a commit to remove them.

Do they all become unused?  If they don't, maybe you missed one of the needed rewrites.

In each place where one of the calls to these functions was eliminated, I want to review again to make sure that some other validation is there, with TryGet() not Get().
"
751278298,2121,Paul-Licameli,2021-11-17T14:11:19Z,"Or maybe I should not bother?
"
751285403,2121,crsib,2021-11-17T14:18:32Z,"IsGoodLongString() only checks that string has no `\0` except for the null terminator. It probably was relevant someday, but I don't see any point in keeping it. 

IsGoodString() exposes some arbitrary global constraint on all the strings originating from the XML file. I'm glad it is no longer used because such constraints should be implemented in a way that informs the user about it, not simply by discarding the data during the parsing. 

Before https://github.com/audacity/audacity/commit/7547de9f5298a4fb710c1a44069e10dbc982c2e0 the situation was especially bad because projects would open differently on different platforms.

My point is - I see no reasoning behind checking for null characters or why the limit of 4096 characters is used.

The first check is redundant by construction. Expat is a C library, and it could not produce a string with null characters in the middle."
751286043,2121,crsib,2021-11-17T14:19:12Z,Good point!
751819819,2121,Paul-Licameli,2021-11-18T01:48:27Z,"Good to see this change.  There are other new inclusions of XMLTagHandler.h that also only need XMLAttributeValueView.h in other files.  Fix those too if you feel like it.  But it's not very important.
"
751827747,2121,Paul-Licameli,2021-11-18T02:10:07Z,"GetBlob is now unused, so remove it
"
751861865,2121,Paul-Licameli,2021-11-18T02:38:08Z,"Is it OK to ignore .ptr in the FromCharsResult?  (This is the only place you do ignore it)
"
751913308,2121,Paul-Licameli,2021-11-18T05:19:23Z,"I thought the emptiness of this function was a bug until I stepped in the debugger and figured out that it is visited only when reading back the xml header data from  ProjectFileIO::WriteXMLHeader which we don't really need.  (But still write to avoid compatibility breaks, right?)

A comment explaining that would help.
"
751922010,2121,Paul-Licameli,2021-11-18T05:43:55Z,"mStringsCache is a deque, I assume because you need non-relocation of the strings that you cache in it (so that you can make string_views later).

But could repeated clearing of the deque and then re-allocation in it doing some wasteful reallocations?  Are all pages freed when you clear()?  Standard says std::vector::clear() does not change capacity, but I don't see the same stipulated for deque.

Maybe you can keep one dummy string in it, and resize to 1 instead of clearing, if it matters.


"
751922593,2121,Paul-Licameli,2021-11-18T05:45:27Z,"This looks correct, but I don't understand what economy it gives you.  Still there is one std::string construction.  Are you sure there are in fact even more allocations in the non-ascii path?
"
752005989,2121,crsib,2021-11-18T08:29:38Z,"Around 15-20 percent speedup. C++ standard library fails horribly when it comes to working with strings and locales (nothing new, really. It was this way since the STL was created).  Another approach would be to use alternative converters. It will be a bit slower in general, but much faster if there are lots of non ASCII labels in the project."
752023252,2121,crsib,2021-11-18T08:52:18Z,"You really don't like deque ;-)

Usually, the problem with deque is considered to be different: the memory costs just for one item are very high because deque allocates in large chunks. std::sting is usually around 24-32 bytes (why, libc++?. No, really, why 32 bytes?). On Clang deque allocates no less the 4k, on GCC - 512 bytes, which surely fits quite a bit of strings in. Even horrible MSVC implementation is not a performance concern here. We have worse problems to be solved first, for example, `Sequence::HandleXMLTag` is currently the #1 issue, because it never estimates the resulting blocks count, so `mBlock.push_back(wb);` is consuming most of the time right now. Still, we have a 40x speed up, and that problem can be easily addressed in a separate, much smaller, and easier to review PR.

In case we ever end up having deque to be a performance problem here - the fix will be as easy as a custom allocator. And trust me - you have to write them a lot when you are fighting for the performance :-)
"
752088347,2121,Paul-Licameli,2021-11-18T10:09:07Z,"I change my mind.  Ignore these requests for changes.
"
752094757,2121,Paul-Licameli,2021-11-18T10:17:10Z,"Custom allocator.  I was wondering if you would find use for `std::pmr::string` and some other allocator for the character data.
"
752131656,2121,Paul-Licameli,2021-11-18T11:02:02Z,"I found nothing wrong.

Only this:  two tests of in WaveClip and CommandManager, where it's not clear to me why you substituted that for IsGoodString there but not elsewhere.

But IsGoodString, we agree, was a check we just didn't need.
"
639997120,836,crsib,2021-05-26T17:57:05Z,This should be removed too
639997491,836,crsib,2021-05-26T17:57:33Z,"We need to make sure, that this is not merged"
640013632,836,Paul-Licameli,2021-05-26T18:15:32Z,Do you mean the whole file @crsib?
640015630,836,Paul-Licameli,2021-05-26T18:18:39Z,"I make no comments on this file
"
640016264,836,Paul-Licameli,2021-05-26T18:19:43Z,"https://cmake.org/cmake/help/latest/prop_tgt/XCODE_ATTRIBUTE_an-attribute.html
That documentation page says to use this CMAKE variable as a last resort and with great caution.

Are we sure this is necessary to get usable debug symbols?
"
640036886,836,Paul-Licameli,2021-05-26T18:50:01Z,"Chain-call idiom is nice.

The naming convention in Audacity is that member functions begin with a capital letter.  Perhaps just delete ""set"" from each name.

 Nothing serious.
"
640037306,836,vsverchinsky,2021-05-26T18:50:32Z,done
640042208,836,Paul-Licameli,2021-05-26T18:57:59Z,"reinterpret_cast is the cast operator of last resort.

static_cast is more appropriate when a void* context argument, given back to you by a C library, must be down-cast to a real type.

That applies to the other uses of reinterpret_cast in this commit.

And this declaration might also read better with auto.  (Which you did use elsewhere.)
"
640042457,836,Paul-Licameli,2021-05-26T18:58:22Z,"But thank you for not using C style casts!
"
640044377,836,Paul-Licameli,2021-05-26T19:01:04Z,"It helps to avoid compiler warnings about unused parameters.  Either omit the variable name, or comment it out, or inside the function write
`
exinfo;
assertion;
`"
640044670,836,vsverchinsky,2021-05-26T19:01:33Z,"https://docs.sentry.io/platforms/apple/dsym/#uploading-symbols-with-sentry-cli
this is the only option which works, known to me at least (with XCode, other generators will require another solutions)"
640046867,836,Paul-Licameli,2021-05-26T19:05:03Z,"Consider C++11 raw string literal syntax instead of piling up the \ characters:
`
R""(=\)""
`
and
`
R""(\"")""
`
https://en.cppreference.com/w/cpp/language/string_literal
"
640052516,836,Paul-Licameli,2021-05-26T19:14:28Z,"What is the reason to use fixed-size strings?
"
640056219,836,vsverchinsky,2021-05-26T19:20:32Z,to avoid using heap allocations after exception occurs
640058179,836,Paul-Licameli,2021-05-26T19:23:24Z,"final is good.

The class needs a few comments as to purpose, and make the habit to use Doxygen commands too.  At least:

`
//! A short description
`
or
`/*!
A long description
*/
`
before this line.

I had to read AudacityApp.cpp to understand its purpose:  use it at startup time to initialize crash reporting.  Also that this object needs only a short lifetime, unlike the CrashReportContext
"
640059001,836,Paul-Licameli,2021-05-26T19:24:49Z,"A brief Doxygen comment about this function at least, being the most important one in the class.  Also, Capital naming convention.
"
640059744,836,Paul-Licameli,2021-05-26T19:26:03Z,"This is a slight abuse of the non-short-circuiting &= operator.
`ok = ok && ...;`
is more proper.
"
640064763,836,Paul-Licameli,2021-05-26T19:34:16Z,"Also because it is statically constructed?  Yet it is a static constructed in a function, not file scope, and that function is done when already starting up the application, somewhat late in the startup process.
"
640066189,836,Paul-Licameli,2021-05-26T19:36:29Z,"Is this an early enough place to initialize?

Is this the earliest possible place?

Maybe the answer to the last in fact no, but the question should be asked and your answer should be a code comment.

This source file contains the actual definition of main() if you look elsewhere.
"
640067423,836,Paul-Licameli,2021-05-26T19:38:19Z,Comments should emphasize that this function is for initialization...
640068872,836,Paul-Licameli,2021-05-26T19:40:43Z,"... while this function executes after a crash, and so is constrained, such as, not to allocate memory.

If I understand correctly.
"
640070682,836,Paul-Licameli,2021-05-26T19:43:32Z,"When you write a .cpp / .h file pair, it is good to make the #include of the .h file the first of all #include directives.

That compels you to put all the necessary nested #include directives or forward declarations in that header, so that other source code files might also #include the header as a self-contained thing.

I noticed that one version of CrashReportContext.h has the standard map header but the other doesn't, but appears to need it because you include <map> before it in the .cpp file.
"
640073164,836,Paul-Licameli,2021-05-26T19:47:48Z,"I figured out that this function executes in the context of a crash, as also the makeCommand and send member functions, and therefore do unusual things to avoid memory allocation.  But these three should contain comments, to make that clearer."
640073807,836,Paul-Licameli,2021-05-26T19:48:53Z,"This and the remaining functions do not operate under the constraints of uploadReport().  Say that too in comments.
"
640075011,836,Paul-Licameli,2021-05-26T19:50:47Z,"wcscpy_s is not necessitated by crash context here.  Is there another reason to prefer it to string class operations?
"
640075281,836,Paul-Licameli,2021-05-26T19:51:12Z,as above?
640075396,836,Paul-Licameli,2021-05-26T19:51:23Z,"as above again?
"
640076295,836,Paul-Licameli,2021-05-26T19:52:49Z,"You might use std::optional.

Except we are not at C++17 yet.

But there is an imitation of optional in src/MemoryX.h.

But maybe you can't include from src/ here.

Hm.  Make a ""TODO C++17"" comment.

"
640076850,836,Paul-Licameli,2021-05-26T19:53:49Z,"Explain that ""this"" is context passed back to uploadReport."
640077867,836,Paul-Licameli,2021-05-26T19:55:18Z,"Can you comment, or point to documentation, explaining the call signature that this function must have?

For instance I don't understand ""succeeded"" just reading this.
"
640079390,836,Paul-Licameli,2021-05-26T19:57:33Z,"final ?

Comments, again, about purpose?  Likewise for Unix version.

I had to read other things to understand that this class is intended for statically constructed singleton use."
640081041,836,Paul-Licameli,2021-05-26T20:00:21Z,"Audacity has a convention (not always very strictly followed) that non-static member variables have names beginning with ""m"" followed by a capital.  (And ""s"" for static).  Exceptions are for POD (plain-old-data) struct classes that don't need to maintain important invariant conditions, but this isn't a class like that.

Yes, ""m_"" might be a better convention.  I wouldn't mind encouraging that for new code.
"
640081752,836,Paul-Licameli,2021-05-26T20:01:29Z,"I forget that ""command"" was a member variable and had to look around again.  ""m_Command"" might have helped.

I was trying to understand how much stack or other memory might have needed allocation.  Now I see it was allocated at startup time.
"
640086365,836,Paul-Licameli,2021-05-26T20:09:19Z,"I looked up the documentation of the _s family of functions, and now I wonder if we also need to bulletproof this by proper use of:

https://en.cppreference.com/w/c/error/set_constraint_handler_s

""If set_constraint_handler_s is never called, the default handler is implementation-defined: it may be abort_handler_s, ignore_handler_s, or some other implementation-defined handler. ""

So I think we want to be sure abort_handler_s is never called, preventing the crash report from happening.


"
640087178,836,Paul-Licameli,2021-05-26T20:10:28Z,"What is the context in which this function runs?

Is it a dedicated thread?

Is it a signal handler?
"
640092350,836,Paul-Licameli,2021-05-26T20:18:50Z,"As else where with &=, here too |= is abused.

Non-short circuiting, and not appropriate with the type of err, which is errno_t

Better to write
`err = err || ...;`
 
and stop after the first error if any.

"
640095452,836,vsverchinsky,2021-05-26T20:23:50Z,"lots of things could go wrong, but keeping this data in a static storage should make it less vulnerable i guess"
640096700,836,Paul-Licameli,2021-05-26T20:25:47Z,"I read this and I question whether this static construction captures a dangling reference to descriptor or not.  Is it passed by value?  Then you are safe, but comment so.  Or better, say it in code by eliminating descriptor and just using the expression.
"
640099134,836,Paul-Licameli,2021-05-26T20:29:49Z,"Mostly for this file and its header, I omit remarks I would make analogous to Windows case.  There are a few others to make.
"
640100938,836,Paul-Licameli,2021-05-26T20:32:38Z,"Why do you hardcode a command name here but not for Windows?

Should the string literals be only in crashreports and not in src?

If so, maybe the repetition of the string literal could also be eliminated by using a macro for the executable name that you set up in CMake.

I don't like to see coincident string literals:  it's fragile.  Define the literal once, then use a repeated symbolic name.
"
640101174,836,Paul-Licameli,2021-05-26T20:33:06Z,"Comments elsewhere about the string literal.
"
640101919,836,Paul-Licameli,2021-05-26T20:34:23Z,"I think the literal should be mentioned in only one place, as a compiler command-line macro definition supplied by CMake, then just use the macro.

And perhaps not use it at all under src/ but make it private to crashreports.
"
640110131,836,Paul-Licameli,2021-05-26T20:48:22Z,"I'd like this new CMakeList.txt file (and all new ones) to have comments at top explaining the purpose.  Perhaps in
#[[
long form
]]#
"
640122910,836,Paul-Licameli,2021-05-26T21:10:11Z,"So this defines a special library statically linked into Audacity, which uses breakpad::client, which is -- shared or static?

I was thinking maybe these files should just be part of src/, but then I reconsidered the special need to have an easier build-time off switch for the whole thing, so this organization may be better.

So let's explain all that in comments for the next reader.
"
640123182,836,Paul-Licameli,2021-05-26T21:10:39Z,"Explain too how parts execute at startup, others in the immediate post-crash context.
"
640123641,836,Paul-Licameli,2021-05-26T21:11:31Z,"Thank you for including all the relevant files in SOURCES, even the .h files.  Which are not needed to make it build, but add convenience in the IDE browser.
"
640124114,836,Paul-Licameli,2021-05-26T21:12:25Z,"This sub-directory structure for the crashreporter executable, however, feels a bit wrong to me...

More in that file
"
640127443,836,Paul-Licameli,2021-05-26T21:18:32Z,"Again, a long comment at top.

This builds a separate executable from Audacity, which is a sister of the Audacity object file in the installed tree.  So I think it should be at the same level of the source tree.  Is there any reason that would not work?

So I think top CMakeLists might first visit this, which defines the crashreporter target.

The crashreports library is in effect dependent on this target.  Not really for build purposes, but at runtime it assumes this executable is present to be called.

Perhaps that dependency should be encoded in the CMake relations, by having this target have a compile_define in its INTERFACE (such as, the string literal ""crashreporter"" that I mention elsewhere).


"
640131255,836,Paul-Licameli,2021-05-26T21:23:03Z,"final?

Comments?
"
640131527,836,Paul-Licameli,2021-05-26T21:23:33Z,"Move up to first line?
"
640135270,836,Paul-Licameli,2021-05-26T21:30:48Z,"If we do use lib-strings in this executable, then you could change the return type to TranslatableString, which is not interconvertible implicitly with wxString, and that would help document the purpose of this function and raise confidence that you don't mix translatable strings with other strings mistakenly.
"
640136204,836,gera-gas,2021-05-26T21:32:27Z,"Also I think simple conditions will be have a more readable.
```
if (con1 && cond2)
```
For optimization compiler is convoling all conditions itself for each CPU model. I saw something like this in old GCC version (around of 4.6).
C++ code
```
if (con1 && cond2)
```
Asm code
```
cmp, cr1 ... // compare and set flag into field-1 of codition register.
cmp, cr2 ... // compare and set flag into field-1 of codition register.
crnor cr1,cr2,cr0 // AND flags
bneq cr0 // ONLY ONE jump if not null.
```
I think you can don't worry about this moment.
PS:
Sorry for using PowerPC assembler syntax in example, just very forgot x86."
640145745,836,gera-gas,2021-05-26T21:51:00Z,"May be remove this repeated `if (parameterIndex < parametersCount)` to something like this?
```
for (...)
{
    stream << ... << ""\"""" << "","";
}
// Just remove last ','
auto resultStreamString = steram.str();
return resultStreamString.resize (resultStreamString.size() - 1);
```
"
640156950,836,Paul-Licameli,2021-05-26T22:11:25Z,"Where are the catches for this and the other throw statements?

Could the crash reporter itself crash on bad inputs?  It should not.

"
640157063,836,Paul-Licameli,2021-05-26T22:11:38Z,"catch?
"
640158125,836,Paul-Licameli,2021-05-26T22:14:15Z,"Comment that this intentionally quits the application, having done its job.
"
640161352,836,Paul-Licameli,2021-05-26T22:21:39Z,"catch?
"
640164742,836,gera-gas,2021-05-26T22:30:21Z,"I saw you sometimes using `static` variables for store various buffers length, may be put this values into single `enum` into `CrashReportContext`?
```
enum ...
{
    kMaxDumpApplePathLength = 4096,
    kMaxBufferLength = 2048
..."
640165419,836,Paul-Licameli,2021-05-26T22:32:11Z,"@vsverchinsky but it's constructed before the exception.
"
640166032,836,Paul-Licameli,2021-05-26T22:33:49Z,"Yes, maybe that is a good point.  Even though this function is not one of those called after the crash."
640178191,836,gera-gas,2021-05-26T23:06:51Z,"I agree with @Paul-Licameli and we should dividing headers, that needed for `.h` file should included only into `.h` file and that needed for `.cpp` should be included only in `.cpp` after `#include <target>.h`.

Also @Paul-Licameli, @crsib, I think it will be great if we can using `path/to/file` conception in `#include` directive. That means when we have file tree (example): `src/base/base.h`, `src/modules/module_a.h` and `src/app.h`, all path in `#include` will be same for each.
For example:
We want to include `src/base/base.h` in `src/modules/module_a` and `src/app.h`.
Therefore, `#include` directive will be same for both as:
```
#include ""base/base.h"" // Good
#include ""src/base/base.h"" // Good

// No Good
#include ""../base/base.h"" // for src/modules/module_a
#include ""base/base.h"" // for src/app
```
Of course, I understand that is need to remake all dependiency connections, but may be in father use it?
"
640182164,836,gera-gas,2021-05-26T23:17:29Z,"@Paul-Licameli `m` or `m_` usual using for coloring private class members, and `_` in end of name (google style). Better if we using `s` or `s_`. for example: `static int sSomStatic` or `static int s_SomeStatic`, I think second case better looking with `s_`."
640186051,836,gera-gas,2021-05-26T23:28:39Z,"I think need move this function into some `breakpad` folder, because I don't see a reason to declarate it in `AudacityApp.cpp`, because `InitBreakpad` not dependenly (not using) of various `AudacityApp` constructions."
640462593,836,crsib,2021-05-27T09:39:33Z,This changes when CI builds. Vitaly used it for testing 
640487639,836,vsverchinsky,2021-05-27T10:13:30Z,"It will bring lots of dependencies into crashreports module, and  InitBreakpad's job is to configure environment (which is defined by application) for breakpad to run."
640495647,836,vsverchinsky,2021-05-27T10:25:43Z,"Makes sense, will fix"
640503229,836,vsverchinsky,2021-05-27T10:37:12Z,">This source file contains the actual definition of main() if you look elsewhere.

Isn't it generated by IMPLEMENT_APP for Windows target? I thought that this is a ""reasonably early"" place to initialize breakpad"
640507916,836,Paul-Licameli,2021-05-27T10:44:59Z,"@gera-gas I'm not sure I understand you.

But if you mean paths with ../ are bad -- though now numerous under our src/ -- then I agree with that, and my big branch misc-modules eliminates many of those.

It simplifies almost all inclusions to just a file name, with no directory names, by supplying appropriate -I options on the compiler command line.

"
640511965,836,Paul-Licameli,2021-05-27T10:51:38Z,"@gera-gas and in fact, it would be nicer to use size_t not int, when the intention is a constant that describes an array bound.  Because size_t is supposed to be the type sufficient to describe the size of any contiguous array in memory.

So either
static constexpr size_t MaxBufferLength{ 2048 };

or

enum : size_t { ...

(I hope we all know that notation to specify the underlying type of an enum.  You need it to properly forward-declare an enum type without the enumerators.)

"
640514413,836,Paul-Licameli,2021-05-27T10:55:32Z,"I don't understand @gera-gas.  InitBreakpad() is in fact defined in another folder.  AudacityApp must call it.

@vsverchinsky makes the point (as I also noted in comments about the CMakeLists.txt files) that the breakpad folder makes a static library for Audacity, and that library itself depends on other libraries.  CMake variables make it easy to eliminate all of that from a build if that is desired, so Audacity does not have the (transitive) dependencies on breakpad.



"
648171483,836,Paul-Licameli,2021-06-09T10:24:51Z,"At least one more thing before merging:

Make sure new translated strings and i18n-hint comments are exactly as in UnusedStrings.h, then delete them from there.   Commit that.

Run locale/update_po_files.sh to verify that the strings are not removed from Audacity.pot.  (The lines may move.). Do not commit that.
"
648187471,836,Paul-Licameli,2021-06-09T10:49:53Z,"Why was this needed?

I'm only asking.
"
648195605,836,Paul-Licameli,2021-06-09T11:02:52Z,"Perhaps use lib-string-utils for this and similar
"
648398370,836,vsverchinsky,2021-06-09T15:00:06Z,"This line was defining _DEBUG symbol in RelWithDebInfo and MinSizeRel configurations, which vc++ compiler does not expect to see when include system headers"
648459255,836,vsverchinsky,2021-06-09T16:03:12Z,Done
648483733,836,Paul-Licameli,2021-06-09T16:34:34Z,"I see this one isn't used in the code any more.  No problem, just some extra space taken up by translation catalogs.
"
648485506,836,Paul-Licameli,2021-06-09T16:36:59Z,This string had an i18n-hint comment that was not preserved in the cut-and-paste.  That should be done.  The comment must be on the line before the string.  This will guarantee that we preserve this comment in the audacity.pot file in future versions.  The comment helps the translator when the English string alone isn't completely self-explanatory.
648487053,836,Paul-Licameli,2021-06-09T16:39:07Z,"This string was not cut and pasted exactly into the code, where ""the"" was omitted.  It must be done exactly now that audacity.pot is finalized for this release.  Otherwise, the translations will not be found by lookup and all users will see the English string as in the code.
"
648514181,836,vsverchinsky,2021-06-09T17:16:45Z,"I added a temproary XC macro definition to CrashReportApp.cpp, also i've checked that each string in UnusedString.h has a matching string in CrashReportApp.cpp (including msgctxt, spelling etc.), but still, somehow, i missed ""the"" one"
648587970,836,Paul-Licameli,2021-06-09T18:50:45Z,"Preservation of the i18n-hint comments is still not done after the recent force push.
"
648592833,836,Paul-Licameli,2021-06-09T18:55:46Z,"I understand you need another definition of XC if you don't include lib-strings.

But the ctx argument must not be ignored.  Otherwise, the runtime lookup of the string will not find the translation.  The string and the context must be passed to the wxTranslation system.

I think the macro should expand to

`wxGetTranslation( msg, wxString{}, ctx )`

If you rebase this work onto more recent master, you can change to one of the updated languages (Dutch, Hindi, Ukrainian, or Corsican) and test that it works.
"
651883576,836,Paul-Licameli,2021-06-15T15:03:39Z,"*intentional
"
651883729,836,Paul-Licameli,2021-06-15T15:03:49Z,"*intentional
"
651885062,836,Paul-Licameli,2021-06-15T15:05:15Z,"This has been replaced by the intentional memory leak to ensure the handler is never destroyed, but will catch crashes even in the cleanup of other static objects.
"
651904480,836,Paul-Licameli,2021-06-15T15:26:01Z,"Comment should emphasize that this builds a separate executable, invoked by fork-exec or Windows equivalent, when the main program is trapping a crash.
"
651913537,836,Paul-Licameli,2021-06-15T15:35:53Z,"There are many ""naked news"" in this file.  I won't insist on cleaning them up, in this small, separate, short-running executable.

But you should know about the conventions I insist on in Audacity.

1) When you heap-allocate anything derived from wxWindow, and its parent is null, then that may ""leak"" a window that gets cleaned up only when the application exits.  So this looks like a bug.  (But modal dialogs may have null parent windows, because they are stack allocated.)
"
651918283,836,Paul-Licameli,2021-06-15T15:41:00Z,"2) sizer objects are not windows.  This should instead be:
`auto mainLayout = std::make_unique<wxBoxSizer>(wxVERTICAL);`

and ultimately you pass `mainLayout.release()` to SetSizer below.

This eliminates a suspicious naked new, guaranteeing cleanup.

(It would be better if the wxWidgets function took a std::unique_ptr argument, and you used `std::move(mainLayout)`.  But wxWidgets was developed for C++98 and just uses a plain pointer in the interface, while explaining in documentation that it does take over responsibility to delete it.  In C++11 and later, it is much better to let the types of arguments make this clear, and that is what we try to do in functions defined in Audacity.)


"
651920540,836,Paul-Licameli,2021-06-15T15:43:29Z,"3) This is a wxWindow object constructed with a parent window, and that means its deletion is guaranteed, if the parent's deletion is guaranteed.

It is not right, then, for headerText to be a smart pointer.

In Audacity, there is a macro `safenew` for these cases, and it simply expands to `new`.  I defined that macro to help me make a textual scan for new naked-news added to the program, that need to be corrected.

"
651925158,836,Paul-Licameli,2021-06-15T15:48:48Z,"Finally, this use of new is unlike the others.  It isn't ""naked"" because it is the constructor argument of unique_ptr.

Still I prefer not having the keyword new appear at all, and would write instead:

```
static auto sLocale = std::make_unique<wxLocale>(wxLANGUAGE_DEFAULT);
```

Which is also briefer to read, avoiding repetition of the type name `wxLocale`.

Understand that all these remarks are not just about style:  they are about the right habits for writing leak-free code using idioms consistent with much of Audacity.  Especially point 2 above.  It's proper ""RAII"".  It means I don't have to examine later lines of code to see whether they might throw exceptions or return early before the pointer is passed along to some other owner.

This completes my comments about allocations.

"
651936150,836,Paul-Licameli,2021-06-15T16:02:00Z,"Comment should say ""exception"" not ""assertion.""  But the important thing is that there is a i18n-hint comment now, which will be in future updates of audacity.pot, and help the translator understand that the word means something in the technical sense of C++."
651936333,836,Paul-Licameli,2021-06-15T16:02:14Z,"ditto
"
651939238,836,Paul-Licameli,2021-06-15T16:05:58Z,"Comment it?
"
652032998,836,Paul-Licameli,2021-06-15T18:06:48Z,"*as command-line
"
652041607,836,Paul-Licameli,2021-06-15T18:15:58Z,"If this were a more general purpose program, you would escape "" characters in the value string, here and in the Windows version of this function too, and in parseArguments() of CrashReporterApp.cpp.

I had to find the use of SetParameters in Audacity.cpp to confirm this doesn't happen.
"
652045305,836,Paul-Licameli,2021-06-15T18:20:56Z,"Shlemiel the painter! :-)

https://en.wikichip.org/wiki/schlemiel_the_painter%27s_algorithm

But it's unimportant.
"
652050003,836,Paul-Licameli,2021-06-15T18:27:49Z,"Good point.  And that's why it's important to comment that CrashReportContext has a trivial destructor which doesn't change the memory -- not just static allocation of storage.
"
652054159,836,Paul-Licameli,2021-06-15T18:34:01Z,"Is there a difference between shell programs on different platforms explaining why you need the extra \ characters in stream here and not on unix?
"
1220397608,4771,saintmatthieu,2023-06-06T21:34:24Z,also for debugging
1220405402,4771,saintmatthieu,2023-06-06T21:39:11Z,"I wrote that debugging code to make sure that 
> cached data is released soon after last needed

Playback of a 20s mono track yielded for me
```
0 00000250D1D69EE0: Hello!
5315 00000250D1D68EE0: Hello!
5357 00000250D1D69EE0: Bye!
10765 00000250D1D68F60: Hello!
10808 00000250D1D68EE0: Bye!
16209 00000250D1D69A60: Hello!
16262 00000250D1D68F60: Bye!
20354 00000250D1D69A60: Bye!
```
Columns are `elapsed time (ms) / object address / ctor-dtor message` (See implementation of `LibSampleTrack::Block` for more detail)."
1220411458,4771,saintmatthieu,2023-06-06T21:44:34Z,Sorry for the inadvertent formatting ...
1220414063,4771,saintmatthieu,2023-06-06T21:46:31Z,"Oj, one `clip->GrabFloats(start, len);` too many ; useless but doesn't break anything."
1220417760,4771,saintmatthieu,2023-06-06T21:50:05Z,"I haven't tried this yet, but now we should be able to query not more than the amount of samples required by the playback buffer (2400 for me on Windows)."
1221362315,4771,Paul-Licameli,2023-06-07T10:38:47Z,"I would prefer a solution that does not require “polluting” the interface of SampleTrack with any mention of caching, but instead, lift the creation of caching scope up to places where WaveTrack is known, and we also construct the “decorator” tracks.

And that must wait on my other refactoring work, part of which I asked for review yesterday."
1221382539,4771,Paul-Licameli,2023-06-07T10:53:50Z,"You are thinking of “double checked locking” but that is considered an anti pattern now because of our-of-order execution possibilities.

https://en.cppreference.com/w/cpp/memory/shared_ptr/atomic

I think a proper solution must use these functions instead somewhere, but they are for shared pointers not weak.

Even the check of the weak pointer before the lock is not thread safe.  The standard library requires different shared and weak pointers to maintain the managed objects control block with thread safety, yes.  But races on the pointers themselves can cause undefined behavior.

So really you must put a lock scope around the weak pointer.  You might use the spin lock class that is already in out libraries.

You might also use two, more limited lock scopes by constructing the cache outside of the lock, and only then locking and assigning.

money thread might lose the race to assign non null, in which rare case, it can just release what it allocated.
"
1221386700,4771,Paul-Licameli,2023-06-07T10:57:53Z,I misplaced my comment— modifying this class in lib-wave-track is acceptable.  But the new types it uses should also be defined in this library and not in the lower one.
1221392556,4771,Paul-Licameli,2023-06-07T11:02:46Z,"No.

This will conflict seriously with other refactoring I want you to review which introduces the wide sample sequence abstraction into the mixer.

And I repeat, we should seek a solution where cache maintenance is entirely internal to lib-wave-track, and control of cache lifetime is upstairs in Audacity, and it is all completely non-intrusive in lib-sample-track."
1221410295,4771,Paul-Licameli,2023-06-07T11:19:50Z,"This holds shared pointers to blocks, so there is no dangling pointer problem.   But this might construct a cache that becomes out of date with changing sequence contents.

Maybe it won’t matter in actual uses but comments should explain the limitation.

Or maybe a complete redesign of caching with have Sequence maintain more state and keep consistency."
1221431298,4771,saintmatthieu,2023-06-07T11:35:17Z,"> we should seek a solution where cache maintenance is entirely internal to lib-wave-track

Currently cache maintenance is in your to-be-introduced `lib-mixer`, through still persisting `SampleTrackCache`. So this proposal wouldn't be worse than what we have now (with respect to your concern).

Giving responsibility of cache maintenance to the consumers of `SampleTrack` (e.g. `MixerSource`, `SpectrogramCache`) makes the problems of eviction and cache miss avoidance easy. I cannot think of a solution that easy if this responsibility were to be that of `WaveTrack`."
1221444925,4771,crsib,2023-06-07T11:46:01Z,"I have looked into the spinlock implementation, and it calls `yield` every other time, so it's not better. I think we need extend it with a policy, that does not `yield` at all. Yielding make the spinlock at least as expensive as the `mutex`, it should be avoided in threads that have latency guarantees. "
1221449066,4771,saintmatthieu,2023-06-07T11:49:51Z,"> This will conflict seriously with other refactoring I want you to review which introduces the wide sample sequence abstraction into the mixer.

I wouldn't mind so much rebasing my draft on top of your branch."
1221457167,4771,saintmatthieu,2023-06-07T11:56:25Z,"> we should seek a solution where cache maintenance is entirely internal to lib-wave-track

If that's of concern, we could define an abstract wrapper for `SampleTrack` (to become `WideSampleSequence`), whose implementation (in `lib-wave-track` or a new lib only `lib-wave-track` would depend on) is injected in consumers of ´WaveTrack` and does the cache maintenance."
1221461338,4771,Paul-Licameli,2023-06-07T11:59:36Z,"A shared pointer to a structure containing the weak pointer may seem weird but then it could be updated using the standard, non-member functions specialized for `atomic<shared_ptr<T>>`
"
1221462751,4771,Paul-Licameli,2023-06-07T12:00:55Z,"> > we should seek a solution where cache maintenance is entirely internal to lib-wave-track
> 
> Currently cache maintenance is in your to-be-introduced `lib-mixer`, through still persisting `SampleTrackCache`. So this proposal wouldn't be worse than what we have now (with respect to your concern).
> 
> Giving responsibility of cache maintenance to the consumers of `SampleTrack` (e.g. `MixerSource`, `SpectrogramCache`) makes the problems of eviction and cache miss avoidance easy. I cannot think of a solution that easy if this responsibility were to be that of `WaveTrack`.

The not-worse organization should become a positively better one.
"
1222021571,4771,saintmatthieu,2023-06-07T18:44:18Z,"Maybe. If not I don't imagine this would get in the way of time stretching, meanwhile our current caching problem is."
1222047582,4771,saintmatthieu,2023-06-07T19:08:49Z,"What could be executed out of order here? According to https://en.cppreference.com/w/cpp/memory/weak_ptr/lock, the creation of the shared ptr is executed atomically, and all other variables before the mutex are local."
1222103934,4771,saintmatthieu,2023-06-07T20:09:56Z,"> I think a proper solution must use these functions instead somewhere, but they are for shared pointers not weak.

You shared a link to a solution for the case where multiple threads access the _same shared_ptr object_. Here a new `shared_ptr` object is created each time - in which case ""All member functions (including copy constructor and copy assignment) can be called by multiple threads on different instances of shared_ptr without additional synchronization"". (https://en.cppreference.com/w/cpp/memory/shared_ptr)"
1224280955,4771,Paul-Licameli,2023-06-09T13:08:13Z,"Remove this unnecessary line; then, this revision of the pull request makes no changes in `lib-sample-track`, which is very good.
"
1225623025,4771,Paul-Licameli,2023-06-10T22:21:57Z,"Just replacing `//` with `//!` on a brief comment line before a member variable allows
Doxygen to extract the comment.  Do that with each member of this structure and also explain `usefulLength`.

"
1225624759,4771,Paul-Licameli,2023-06-10T22:26:56Z,"I had to read Sequence.cpp to understand that `usefulLength` is a span of sample positions not necessarily covered by the blocks.  Better that I could have read a comment explaining that here.
"
1225629007,4771,Paul-Licameli,2023-06-10T22:35:18Z,"Slow down.

You are only setting yourself up for more conflict with stuff I have to do.
"
1225631057,4771,Paul-Licameli,2023-06-10T22:38:08Z,"This solution no longer intrudes in SampleTrack but still does intrude in lib-mixer.

I am not yet decided whether I like it.
"
1225635110,4771,Paul-Licameli,2023-06-10T22:44:58Z,"> What could be executed out of order here? According to https://en.cppreference.com/w/cpp/memory/weak_ptr/lock, the creation of the shared ptr is executed atomically, and all other variables before the mutex are local.

""Effectively returns expired() ? shared_ptr<T>() : shared_ptr<T>(*this), executed atomically.""

Okay, I learned something -- `lock()` on a `std::weak_ptr` is thread safe.  My memory though is that you can't have unsynchronized usage of a `shared_ptr` object.

"
1225635720,4771,Paul-Licameli,2023-06-10T22:46:15Z,"There were more naive implementations of the double checked locking pattern in older days before C++11 that were later understood to be an anti-pattern.
"
1225639615,4771,Paul-Licameli,2023-06-10T22:56:51Z,"Other related and interesting C++ things to know are the thread safety guarantees in the language specification for the first time construction of static variables inside functions, and the related `std::once_flag` defined in `<mutex>`.
"
1228334012,4771,Paul-Licameli,2023-06-13T15:31:55Z,"As we have discussed:  the decorator should also remap envelope values on the time axis, and also remap the end time, and not just pass through the calls.
"
1228454730,4771,Paul-Licameli,2023-06-13T17:12:09Z,"If you say it's a precondition, then it should be commented where the member function is declared in the header file, preferably with the `@pre` Doxygen comment convention
"
1229407370,4771,Paul-Licameli,2023-06-14T10:53:21Z,"Yes, why not instead
```
blocks[i] = std::move(newBlocks);
```"
1229409591,4771,Paul-Licameli,2023-06-14T10:55:15Z,"This reassings `mCacheHolders`, recreating the complete cache stucture, each time `Get` is called -- but t0 and len may vary between calls.

So this is why eviction works.  Only sufficient cache for the request is kept.  When the old value of mCacheHolders is released after the reassignment, reference counts in the caches for individual blocks may drop to zero.

It may work but I wonder how it might be improved.

"
1229411562,4771,Paul-Licameli,2023-06-14T10:56:46Z,"This function is no longer used
"
1229461716,4771,Paul-Licameli,2023-06-14T11:44:27Z,"I understand better how it works now.

Every time you call `Get` on the decorator, it goes back to the Sequence and finds the blocks that overlap the range.  The old cache is not yet destroyed when a new one is made.  Any blocks with a non-expired weak pointer to a vector of samples use that.

If the underlying Sequence has been changed between calls to `Get`, there is no invalidation problem.  The range of the request is just mapped to the new blocks.
"
1238333002,4771,Paul-Licameli,2023-06-22T10:31:32Z,"I don't like quiet narrowing conversion from `sampleCount` to `size_t` and made a point of eliminating that in many places years ago.

Please use `limitSampleBufferSize` which contains some assertions, and initialize `toWrite` then with `{}` syntax.

`sampleCount` is a wide integral type used for positions in a sample stream or durations, because you can overflow 32 bits at 44.1 kHz with only about 13.5 hours, unlikely but not impossible.

`size_t` is sufficient for buffer sizes that fit in memory.

"
1238340681,4771,Paul-Licameli,2023-06-22T10:39:02Z,"I prefer to use C++11 universal initialization syntax  '{...}' where I can for member initializers.
"
1238346190,4771,Paul-Licameli,2023-06-22T10:43:49Z,"Only the lesser of `bufferSize` and `GetSampleCount` is written, instead of filling the buffer up to `bufferSize` with zeroes as needed.

That behavior is not obvious to guess from the un-commented header file.  So please comment.
"
1238346998,4771,Paul-Licameli,2023-06-22T10:44:38Z,"Replace `//` with `//!` for Doxygen
"
1238349098,4771,Paul-Licameli,2023-06-22T10:46:27Z,"""Double checked locking"".  Use that in the comment.
"
1238350721,4771,Paul-Licameli,2023-06-22T10:47:59Z,"Please mention that `std::weak_ptr::lock()` guarantees atomicity, which is important to make this work without races.
"
1238352478,4771,Paul-Licameli,2023-06-22T10:49:48Z,"Notice this `mSampleCount` correctly does NOT have type `sampleCount` but instead `size_t` because it is for an in-memory block.
"
1238360853,4771,Paul-Licameli,2023-06-22T10:56:05Z,"Note `as_size_t` contains an assertion that you are not narrowing, so I like it better than the unchecked narrowing.
"
1238361338,4771,Paul-Licameli,2023-06-22T10:56:27Z,"`limitSampleBufferSize` might also express this
"
1238363608,4771,Paul-Licameli,2023-06-22T10:58:00Z,"That function also guards against the case that the `sampleCount` is negative.  That can happen because the type is also meant to expressed signed differences of positions in audio streams.
"
1238373819,4771,Paul-Licameli,2023-06-22T11:05:59Z,"I do not like new assertions with no accompanying comments to explain why they are justified.  Assertions should document assumptions you are making and explain them to the user.

I consider an assumption at the top of a function to be justified if the header file has a `@pre` Doxygen comment.

"
1238374605,4771,Paul-Licameli,2023-06-22T11:06:50Z,"You need more commentary to explain `ii` and state the precondition on its legal values.

Then, it is understood that the burden of a guarantee of the correctness of the assumption lies not in the function but in the places that use it.
"
1238375242,4771,Paul-Licameli,2023-06-22T11:07:36Z,"```
   /*!
    @param ii identifies the channel
    @pre `ii < GetWidth()`
    */
```
"
1238381167,4771,Paul-Licameli,2023-06-22T11:13:46Z,"But see `WaveTrack::Get`.  You can easily copy some of that to make this function more robust.

```
   const auto pOwner = GetOwner();
   if (!pOwner) {
      //! an un-owned track should have reported one channel only
      assert(nChannels == 1);
      nBuffers = std::min<size_t>(nBuffers, 1);
   }
```"
1238383737,4771,Paul-Licameli,2023-06-22T11:16:19Z,"This is better than your not wholly justified `assert(false)`.  Instead it asserts a postcondition of `NBuffers()`.

Actually that's not an explicitly stated postcondition in the header, but that can and should be added easily.
"
1238406402,4771,Paul-Licameli,2023-06-22T11:39:32Z,"It seems wasteful to allocate a lot of zeroes for this case.  With some more effort in `AudioSegmentSampleView` the silent case might be treated differently without the allocation.
"
1238408658,4771,Paul-Licameli,2023-06-22T11:41:49Z,"What's a proof that this is a save `as_size_t` ?  I think it can be deduced that `len` is not more than `length`.  An `assert` of that with some explanation of that deduction would be welcome.
"
1238462448,4771,Paul-Licameli,2023-06-22T12:32:32Z,"Rename as `ChannelSampleView` ?
"
1238738373,4771,Paul-Licameli,2023-06-22T16:00:03Z,"That should be `as_size_t` and there should be some comments why that is not narrowing
"
1238741217,4771,Paul-Licameli,2023-06-22T16:02:11Z,"Comment why this doesn't narrow
"
1238790063,4771,Paul-Licameli,2023-06-22T16:46:16Z,"I think this call (but only this one) should be changed to `GetSequenceStartTime` so that the cache will have the correct contents in case a smart clip has any hidden data at the left end.
"
1238807811,4771,Paul-Licameli,2023-06-22T17:04:13Z,"I think the comment should simply say ""One per channel""
"
1238811732,4771,Paul-Licameli,2023-06-22T17:07:16Z,"Some Doxygen commentary please about the purpose of the class.
"
1238812133,4771,Paul-Licameli,2023-06-22T17:07:36Z,"`{}` member initializer syntax?
"
1238813349,4771,Paul-Licameli,2023-06-22T17:08:30Z,"Again, use `limitSampleBufferSize`
"
1238815527,4771,Paul-Licameli,2023-06-22T17:10:36Z,"You assume `bufferSize >= written` but what proves that?  Should there be a check?
"
1238819419,4771,Paul-Licameli,2023-06-22T17:14:28Z,"You assume after this a post of `GetSampleView`:  `size() == nBuffers - iChannel`

Please make that explicit in header comments, and assert the post here
"
1238822643,4771,Paul-Licameli,2023-06-22T17:17:59Z,"You need only the second
"
1238831461,4771,Paul-Licameli,2023-06-22T17:27:15Z,"I recall this was some non-team member's experiment that wasn't completed
See commit 8e1b084f01f97266eb843af72ec8d31045aa11fa
"
1238833592,4771,Paul-Licameli,2023-06-22T17:29:03Z,Fix indent of line 347 (new numbers)
1238841017,4771,Paul-Licameli,2023-06-22T17:35:59Z,"Please comment that only the 0th channel of `sequence` is really used.

In the interim, this still works correctly for `WideSampleSequence` backed by a right channel track, which always ignores its partner.

Please comment in the PR that QA should test spectrograms of stereo tracks, in which there is some obvious difference of content between the channels, to be sure the correct channel's stuff is drawn in each rectangle.


"
1238915138,4771,Paul-Licameli,2023-06-22T18:52:50Z,Could use alloca for this small allocation
1239371068,4771,saintmatthieu,2023-06-23T06:29:49Z,"Why on this particular class? Class comments are the exception in this repo, if there's a rule of thumb I'd like to know it (besides that's it's a cool class)."
1239388718,4771,saintmatthieu,2023-06-23T06:51:21Z,"I don't understand this comment, I think you might be referring to the time-stretching decorator, which is another PR."
1239435299,4771,saintmatthieu,2023-06-23T07:13:54Z,`limitSampleBufferSize` is handy :thumbs-up:
1239449516,4771,saintmatthieu,2023-06-23T07:17:54Z,Thanks.
1239466395,4771,saintmatthieu,2023-06-23T07:24:23Z,"I'm addressing this reluctantly, I was hoping for no debate and time spending over this. It's not only about correcting `nBuffers`, but also handling a more complex situation underneath, where `pOwner` can be null."
1239475904,4771,saintmatthieu,2023-06-23T07:34:46Z,"You're right, that's not good."
1239513248,4771,saintmatthieu,2023-06-23T08:13:40Z,"`as_size_t` already does the assertion, but I'm adding a comment."
1239549349,4771,saintmatthieu,2023-06-23T08:49:37Z,"That'd be wrong.
Say we have one noisy clip starting at 0, the first second of which is trimmed. Now `start` is 0, and `length` is 2s.
In your proposal, the returned view would be 2s of noise. `WaveTrack` has to account for trimming ; the 1st second should be silence."
1239550829,4771,Paul-Licameli,2023-06-23T08:51:01Z,"Comment it at least because the class is meant for use outside the library that defines it.  I don’t think you must comment every type defined in anonymous namespaces.

If many classes don’t have DOxygen, that’s not an excuse for improving practice now."
1239556690,4771,saintmatthieu,2023-06-23T08:56:12Z,Thank you.
1239557572,4771,saintmatthieu,2023-06-23T08:57:05Z,"Right, I never took the habit for some reason."
1239562710,4771,saintmatthieu,2023-06-23T09:02:04Z,"This is based on the fact that `AudioSegmentSampleView::Copy` won't return more than `toWrite` samples. A unit-test proves this, which I'd argue is enough ?

EDIT: That specific unit test didn't exist, you're comment made me aware of that. Now it does, though."
1239596874,4771,Paul-Licameli,2023-06-23T09:29:47Z,"I understand the bug fix commit and expect you will squash it after complete review.
"
1239606798,4771,saintmatthieu,2023-06-23T09:38:41Z,"`nBuffers - iChannel`, really?
I have been interpreting those arguments as ""give me `nBuffers` starting from index `iChannel`"", which results in `size() == nBuffers`.
An alternative interpretation that would lead to `size() == nBuffers - iChannel` is ""give me buffers from index `iChannel` to index `nBuffers` (exclusive)"", but I don't think that's the intended one, or the naming would have been another.
(Your implementation of `WaveTrack::Get` does neither, but I think it attempted the former interpretation. I'm attempting a fix accordingly.)"
1239617693,4771,Paul-Licameli,2023-06-23T09:48:23Z,"Sorry, what I wrote was mistaken.

What I was thinking was, how to prove you don't index `buffers` out of bounds.

So what I should have said is, there is an unstated postcondition that `GetSampleView` always returns a vector of size `nBuffers`.

So it would be good to make that explicit in that function's header.
"
1239619435,4771,saintmatthieu,2023-06-23T09:50:13Z,"Mmh, but this commit is just making use of it in some other file. In any case, if you're correct now one should care if I removed those ifs. Will append a tentative commit that does that."
1239625677,4771,Paul-Licameli,2023-06-23T09:56:37Z,"Tests are just one line of defense ensuring code quality and raising our confidence.  I think they should be complemented with assertions in the program.  (I mean both `assert` and also the informal statement of pres and posts and invariants.)

When I write assertions it means I'm very serious about persuading the unfamiliar reader (who might be you, or future me) that the code is CORRECT, because I was working hard at the time to convince myself first and to make more explicit the assumptions that I relied on.

A test, though automated, is the weaker form of ""well it seems to work"".

True, human reasoning is still fallible and tests may still catch mistakes (perhaps because of future modifications by someone understanding the code imprefectly).

Still -- write contracts first, I think, and a well thought contract is then a guide for writing the test cases themselves.

Some correspondence between test cases and formal or informal assertions in the program is a good idea.

"
1239627978,4771,saintmatthieu,2023-06-23T09:58:59Z,Can do that.
1239628014,4771,Paul-Licameli,2023-06-23T09:59:02Z,"You should also remember, though, that sometimes you must use `()`.  One example is initializing a vector with a size.  If the element type is implicitly constructible from an int or size_t, the `{}` syntax will invoke the wrong constructor.

This danger exists when a class has a constructor taking `std::initializer_list`.
"
1239637056,4771,Paul-Licameli,2023-06-23T10:09:02Z,"Did you try this case?  I didn't, but I thought I deduced a problem.

`WaveClip::GetPlayStartTime()` returns `mSequenceOffset + SamplesToTime(TimeToSamples(mTrimLeft));` which is assigned to `clipStartTime`

Then we compute `clipS0` as so many samples into the PLAYABLE part of the clip (the unhidden part)

Then we pass that into `WaveClip::GetSampleView` as `start` and it is passed unchanged into `Sequence::GetFloatSampleView`

BUT that function is interpreting `start` as relative to the start of the sequence (which doesn't know about the trimming) and that includes the left trimmed part.  So doesn't this mean that the cache contains the wrong stuff, left of the correct place by a shift equal to the trim length?

"
1239637062,4771,saintmatthieu,2023-06-23T10:09:03Z,This fix attempt relates to https://github.com/audacity/audacity/pull/4771#discussion_r1239606798
1239637615,4771,crsib,2023-06-23T10:09:44Z,"Numerous times, I have seen well-thought assertions fail on the first run."
1239638587,4771,Paul-Licameli,2023-06-23T10:10:50Z,"You saw my retraction of my mistaken comment of yesterday?
"
1239639084,4771,Paul-Licameli,2023-06-23T10:11:23Z,"I said I finished review, but then I wrote some more in answer to your answers.
"
1239639358,4771,saintmatthieu,2023-06-23T10:11:44Z,"> If many classes don’t have DOxygen, that’s not an excuse for improving practice now.

That wasn't my intention, but I don't want to feel I have to comment every single class where not necessary.

The visibility-beyond-hosting-library sounds like a good rule of thumb to me."
1239643498,4771,Paul-Licameli,2023-06-23T10:16:37Z,"Yes, we are fallible, but still we should value well thought assertions and make attempts at rigor.

As I said, I think contracts should be a guide to what cases should be tested.  Or if you like the TDD approach of writing failing tests first, and then then changing the program to succeed, I think then you should write something in the contract too after those iterations.

Tests might be ""executable documentation"" but I like documentation in the header itself, explaining all that is important in the interface in one place.




"
1239652779,4771,saintmatthieu,2023-06-23T10:27:14Z,"I actually found an alternative implementation, where it is obvious that `written < bufferSize`, and which does not unnecessarily iterate over segments after if `written` already `== bufferSize`.

But I'd have complied."
1239665994,4771,saintmatthieu,2023-06-23T10:42:33Z,"Ok.
I already added a `@return` line to that header stating this. Is that good enough?"
1239673937,4771,saintmatthieu,2023-06-23T10:52:06Z,"Good catch!
But I'm fixing it in `WaveClip::GetSampleView`, accounting for `mTrimLeft` like `GetSamples` does."
1239685273,4771,saintmatthieu,2023-06-23T11:05:43Z,"> You saw my retraction of my mistaken comment of yesterday?

I did, yes, but I still think this assertion is incorrect."
1239925635,4771,Paul-Licameli,2023-06-23T14:57:34Z,I didn't mention the file banners -- good that you remembered
1239929085,4771,Paul-Licameli,2023-06-23T15:00:27Z,"This comment block was ignored by Doxygen because it did not begin with `/*!` or `/**`
"
1239938288,4771,Paul-Licameli,2023-06-23T15:09:13Z,"The grave accents are markdown that make text appear in typewriter font.  I often use it in `@pre` and `@post` when a pre/post-condition can be written formally in C++.

It's less important here -- Doxygen will recognize the class name and format it as an html link.  The grave accents cause the link to have typewriter font too.

""BlockSampleViews"" however will fail to link because it's not the exact type alias name.
"
1239941916,4771,Paul-Licameli,2023-06-23T15:12:45Z,"You might use the `@file` and `@brief` Doxygen commands in this banner, so the summary html page of files has a comment about the purpose.

Here's the reference for all commands. https://www.doxygen.nl/manual/commands.html
"
1239946410,4771,Paul-Licameli,2023-06-23T15:16:59Z,"You corrected the formal statement of the assertion.  Thank you.
`nBuffers - iChannel <= NChannels()` is still the incorrect precondition in WideSampleSequence.h.  My fault, but please correct it there too.
"
1239949995,4771,Paul-Licameli,2023-06-23T15:20:28Z,"Just use my initials `PRL:` as in many other comments
"
1239978455,4771,Paul-Licameli,2023-06-23T15:48:07Z,"This function is not intended to work with long lengths.  The argument should be `size_t`.  Where it is used in `WaveTrack::GetOneSampleView`, there is a use of `as_size_t` which could use some comments.
"
1239997878,4771,Paul-Licameli,2023-06-23T16:07:05Z,"The last `@pre` is not quite executable as written, so if I wrote it, I would not put only variable names in grave accents and leave the statement informal.
"
1240003352,4771,Paul-Licameli,2023-06-23T16:12:53Z,"I like the improved test!

My last irritating trivial comment for today:  ""FEWER"" not ""LESS"" is better English according to the grammar books, but a lot of English speakers don't observe that usage.
"
1241763844,4771,saintmatthieu,2023-06-26T07:42:44Z,"Good that you noticed the `as_size_t` to in the end call the implicit `sampleCount` ctor.
It probably will never be used for more than `size_t` can represent, yet semantically this is an audio segment between two clips, which `sampleCount` can help realize. (Also, I'd have to change it in the other ctor for consistency.)"
842691225,2668,Paul-Licameli,2022-04-05T11:47:55Z,"Unused constant VSTCMDKEY no longer needs a definition
"
842694518,2668,Paul-Licameli,2022-04-05T11:52:13Z,"Remove this enum with VSTSubProcess
"
842745902,2668,Paul-Licameli,2022-04-05T12:49:23Z,"My recent changes in EffectManager may make the benefits of these changes less but still not zero.  After my changes, instance initialization is avoided, but still not the plugin initialization.
"
842837621,2668,Paul-Licameli,2022-04-05T14:13:54Z,"I wonder if this incomplete old idea would be valuable later, but still then, it would make sense to implement filtering by type in one common dialog accessible in common from all four menus.  So it's all right.
"
842892916,2668,Paul-Licameli,2022-04-05T15:00:44Z,"I'm looking at EXPERIMENTAL_EFFECT_MANAGEMENT elsewhere, and I think it's time to retire this experimental flag.  It's not going to turn off.  So remove it from Experimental.cmake and remove the related bits in EffectsPrefs.cpp
"
842913096,2668,Paul-Licameli,2022-04-05T15:18:19Z,"I don't believe in using `noexcept` too widely, but functions meant to be called inside a `finally` and therefore inside a destructor should have it.
"
842915460,2668,Paul-Licameli,2022-04-05T15:20:27Z,That applies to `OnPluginValidationFinished `
856141445,2668,Paul-Licameli,2022-04-22T11:32:21Z,"Second '#' isn't needed.

Add a few words about the general purpose of these files.
"
856144242,2668,Paul-Licameli,2022-04-22T11:36:44Z,"""vice versa"""
856146202,2668,Paul-Licameli,2022-04-22T11:39:44Z,"When you need an abstract base class with just one virtual function besides the destructor, an alternative is just to generate the type you need from std::function:

```
using IPCChannel = std::function< void(const void *bytes, size_t length) >;
```

It's your choice whether you prefer that suggestion here.  Maybe you anticipate more functions in the interface later.
"
856149035,2668,Paul-Licameli,2022-04-22T11:43:41Z,"Is the argument never null?

If so, I would prefer to use a reference to say what I mean with types, leaving no doubt in the reader's mind about that, while needing no extra comments either.
"
856150919,2668,Paul-Licameli,2022-04-22T11:46:43Z,"""description"""
856154091,2668,Paul-Licameli,2022-04-22T11:51:35Z,"This yields only every 2 failed tests.  I'm curious, why 2, not 1, or some other number.  Did some article recommend that?
"
856159951,2668,Paul-Licameli,2022-04-22T11:58:35Z,"`explicit` ?
"
856161653,2668,Paul-Licameli,2022-04-22T12:01:12Z,"Would a more careful definition be
```
#define NFDS(x) ((x) + 1)
```"
856162816,2668,Paul-Licameli,2022-04-22T12:02:52Z,"So I read the class to understand that it's a move-only object for RAII cleanup when a socket is opened.

Comment that before the class.  Perhaps too, ""unique_socket_guard"" would be a name that suggests that it is move-only.
"
856166482,2668,Paul-Licameli,2022-04-22T12:08:18Z,"Perhaps comment
`// TODO C++20: use std::byte`
"
856168238,2668,Paul-Licameli,2022-04-22T12:10:52Z,"This line should be added in the same commit that defines the source code files in lib-pic.  Not later.
"
856169882,2668,Paul-Licameli,2022-04-22T12:13:18Z,comment likewise
856170400,2668,Paul-Licameli,2022-04-22T12:13:58Z,"Can the second argument be a reference?
"
856170921,2668,Paul-Licameli,2022-04-22T12:14:40Z,Can this be a const reference or a `*const`?
856171314,2668,Paul-Licameli,2022-04-22T12:15:18Z,"Can this member be const?
It's always good to add const when you can to help the reader understand what parts never vary after construction.
"
856175350,2668,Paul-Licameli,2022-04-22T12:21:01Z,"Indeed this assumes callback isn't null, so I would rather have a reference argument then"
856177354,2668,Paul-Licameli,2022-04-22T12:23:47Z,"What feature in wxWidgets was needed?  Say in the commit comment
"
857198166,2668,Paul-Licameli,2022-04-25T00:35:16Z,"ToUTF8 used here, utf8_str used instead in the following function -- made me check in the wxWidgets headers to be sure they were not really different.

Why not simply use utf8_str as in the existing function making the differences between the two functions less?
"
857199685,2668,Paul-Licameli,2022-04-25T00:47:13Z,"While you are touching this class, please do these things too:

- Use in-class member initializers so that the body of the constructor shrinks to nothing.
- Make sure no other members of non-class types are uninitialized.
- Remove the friend declaration, because long-distance friendships are bad for understanding code.  Make Load() and Set() public so you can.
"
857200783,2668,Paul-Licameli,2022-04-25T00:55:36Z,"This include becomes redundant when PluginDescriptor.h is separated
"
857441676,2668,Paul-Licameli,2022-04-25T09:40:08Z,"What were you intending the directory structure of the new library to mean?  Why not just leave it flat?

The `internal` sub-directory and the parent directory are in fact in a dependency cycle because of the #include above.  So as a whole the subdirectory is not lower-level.

However, at the finer level of source code files, there is no dependency, which is good.

Just leave a flat folder structure, I say.
"
857447545,2668,Paul-Licameli,2022-04-25T09:46:58Z,"- callback is assumed non-null inside the function -- therefore, make it a reference argument
- id is a ""naked"" int.  I would write a small ChannelId class wrapping the int and preventing implicit conversions to and from int.  Probably it would need operators == and != and maybe < (or just <=> if we had C++20)"
857448756,2668,Paul-Licameli,2022-04-25T09:48:19Z,"If channel becomes a reference instead of pointer, remember to pass `std::ref(channel)` to avoid the copy constructor.
"
857462566,2668,Paul-Licameli,2022-04-25T10:04:25Z,"What is the purpose of the unique_ptr making another layer of indirection?

Could you just use std::thread and use `joinable` to test for its activity instead of `operator bool` ?"
857465421,2668,Paul-Licameli,2022-04-25T10:07:53Z,"Is there no ""un-binding"" needed later for INET?
"
857473523,2668,Paul-Licameli,2022-04-25T10:18:03Z,"`man poll` tells me that -1 is a possible return value, indicating an error, stored in `errno` (which is a macro, not really a variable, on my system:  I suppose they addressed the thread safety problem).

So please make the check more exhaustive.
"
857480996,2668,Paul-Licameli,2022-04-25T10:27:39Z,"On Windows this is a possibly-failing constructor but there is no indication to the caller of the failure.  Either you need a boolean method to test for success, or should throw an exception.

Same applies to the server, on Windows only.
"
857481739,2668,Paul-Licameli,2022-04-25T10:28:30Z,"ditto question use of `unique_ptr`
"
857482642,2668,Paul-Licameli,2022-04-25T10:29:46Z,"... Oh I see,  but then CreateChannel() can indicate error.  OK then.
"
857485844,2668,Paul-Licameli,2022-04-25T10:33:53Z,"The IPCServer object itself is not thread safe -- I mean `CreateChannel` could race to assign `Impl::mWorker` if two threads called it.  Maybe that is worth a comment.
"
857486974,2668,Paul-Licameli,2022-04-25T10:35:19Z,"As with server, this initialization is not itself a thread safe function
"
857490010,2668,Paul-Licameli,2022-04-25T10:39:26Z,"Return void and throw, or return boolean for error?  You made inconsistent choices for client and server.  And client, unlike server, makes no error if mImpl failed initialization on Windows.

I think it is eaiser to make both return boolean and not throw.

"
857490714,2668,Paul-Licameli,2022-04-25T10:40:19Z,"Ditto use of a reference for the callback, and `std::ref`
"
857500082,2668,Paul-Licameli,2022-04-25T10:52:36Z,Argument `id` is not used
857505976,2668,Paul-Licameli,2022-04-25T11:00:38Z,"In fact the unique use of OnConnect in BufferedIPCChannel.cpp is always passing non-null (`this`).

"
858065531,2668,Paul-Licameli,2022-04-25T22:10:01Z,"Too much is happening in the commit ""PluginValidator interface"" with too few code and commit comments.  I am having trouble understanding it.

The second line of the commit comment says ""Code path that is used with ""bFast"" flag in CheckForUpdates was extracted into InitializePlugins function"" and that explains this function.

It might help to separate a commit that does only this part.  Perhaps ""RevalidatePlugins"" is also a clearer name for what this does.

"
858070813,2668,Paul-Licameli,2022-04-25T22:20:24Z,"Four new abstract classes are introduced in the commit ""PluginValidator interface"" but I'm not sure what they really do, or how they are meant to be used, from reading their names alone and from the lack of comments.  I must study other code to understand.


"
858163257,2668,Paul-Licameli,2022-04-26T01:51:29Z,"I am beginning to understand this new file.  If you are here, you are in the main thread of a child process.  The Serve() loop detects requests and sends responses, while the overridden functions do work on another thread.

Nothing ever blocks inside Serve(), which makes it a busy loop, in the admittedly unlikely event that it handles its requests faster than the responses arrive.  Whereas `OnDataAvailable` contains an assertion that is not provable from what I read here, and migh fail with unusual timing, unless there is more I don't understand yet about the main process.

I would be more satisfied to see:

- a std::mutex and associated std::condition_variable.
- Serve() waits https://en.cppreference.com/w/cpp/thread/condition_variable/wait for the condition: `!running || (request && channel)`
- OnConnectionError, OnDisconnect, an OnDataAvailable may make the condition true, so they call https://en.cppreference.com/w/cpp/thread/condition_variable/notify_one
- Serve() releases the mutex only after moving from mRequest.
- OnDataAvailable holds the mutex while assigning to mRequest
  - After taking the mutex, it also waits on the condition variable for `!mRequest`, which really ""proves"" it
  - OnDisconnect, which can make the condition true, also notifies the variable
- The spin lock should still guard the use of mChannel so that Serve() doesn't race with OnDisconnect() destroying the channel.

"
858458893,2668,Paul-Licameli,2022-04-26T08:52:56Z,"should be `desc->GetUntranslatedVersion()`
"
873150365,2668,Paul-Licameli,2022-05-15T10:59:08Z,"Commit comment misspelled ""instance""
"
873152034,2668,Paul-Licameli,2022-05-15T11:12:48Z,"Commit comment misspelled ""stability""
"
873154718,2668,Paul-Licameli,2022-05-15T11:33:04Z,"Is the convention `details` or `detail`?  I used `detail`
"
873154822,2668,Paul-Licameli,2022-05-15T11:34:17Z,"""builds""
"
873155033,2668,Paul-Licameli,2022-05-15T11:36:08Z,"All these comments might use Doxygen format
`//! ...`
or
`
/*!
...
*/
`
"
873156128,2668,Paul-Licameli,2022-05-15T11:45:04Z,"An assertion without proof -- but sufficient ""proof"" for me would be that you document in the header file,

```
//! @pre `CanPop()`
```

So the burden of further proof is properly on the caller.
"
873156396,2668,Paul-Licameli,2022-05-15T11:47:05Z,"This comment disagrees with the implementation, and I think you want to change the comment.

Result is valid if and only if there is no error and there is at least one descriptor.
"
873156865,2668,Paul-Licameli,2022-05-15T11:50:30Z,"Why not `std::move(desc)`?  You need it to avoid copying, because `desc` alone still is an lvalue reference even though the argument is declared with `&&`.

And that might allow vector instead of list for the container, but maybe there is a reason for list I don't understand yet, some requirement of non-relocation of the memory.

"
873157284,2668,Paul-Licameli,2022-05-15T11:54:12Z,"Duplicated string literal
"
873159303,2668,Paul-Licameli,2022-05-15T12:08:53Z,"Now I'm wondering about the proper internationalization of error messages.  Does `Translation` really work, or has the host process not intiailized translations before this point is reached?  If it doesn't, maybe `Translation()` can be applied to the msgid on the host side, if the `TranslatableString` is a simple one without format arguments.

"
873159366,2668,Paul-Licameli,2022-05-15T12:09:15Z,"And, two new non-internationalized messages.
"
873160538,2668,Paul-Licameli,2022-05-15T12:16:38Z,"In AudacityApp.cpp, `PopulatePreferences` follows `InitPreferences` and that is where translation is initialized.

That function, or pieces of it, should be moved out of AudacityApp.cpp and demoted into one of the lib-s, so it can be used here too, resolving the doubts about `Translation()` I mentioned before.
"
873161195,2668,Paul-Licameli,2022-05-15T12:22:07Z,"""condition""
"
873161894,2668,Paul-Licameli,2022-05-15T12:27:17Z,"Another non-translated string
"
873162046,2668,Paul-Licameli,2022-05-15T12:28:31Z,"This implies that this server expects messages as formatted by `MakeRequestString`.  Then that should be commented in the header file.
"
873162723,2668,Paul-Licameli,2022-05-15T12:33:51Z,"An assertion without proof.  To fix it, improve documentation to explain that a request must be sent only after responses of all previous requests have been received by the client -- otherwise, requests may be lost:  they don't queue up.

That makes this class more understandable without reading the code that uses the class -- and that code doesn't exist yet, at the commit introducing this.


"
873168899,2668,Paul-Licameli,2022-05-15T13:20:07Z,"Maybe it won’t be difficult to build a small executable that links only this library and its dependencies.  Avoid wxModule and wasteful loading of another Audacity with all of its static initializations.

Not essential to making this PR."
873188687,2668,Paul-Licameli,2022-05-15T15:51:40Z,"Maybe less misleading to write, ""Starts and communicates with a dedicated process to perform plugin validation"".

But the member functions of it are available to call in the main process.
"
873188880,2668,Paul-Licameli,2022-05-15T15:53:13Z,"A thread join happens at the closing brace, so callbacks to members may happen before that completes, making mDelegate null matters while joining.  Am I right?  It may help to explain a little more.
"
873190041,2668,Paul-Licameli,2022-05-15T16:02:40Z,"If you really want to minimize the time inside the lock_guard:  Note that swap of an `optional` with another empty one does perform a move-construction, see https://en.cppreference.com/w/cpp/utility/optional/swap ...

BUT for wxString that performs a string copy anyway, because wxWidgets is an old library not defining move constructors.

You can improve this using `optional<std::string>` or you can use the member function `wxString::swap` on *mRequest.  (Then `mRequest.has_value()` is still true, it has an empty string in it; so `mRequest.reset()` would be needed.)

"
873190093,2668,Paul-Licameli,2022-05-15T16:03:09Z,"You also used `optional<wxString>` in PluginHost and might change it.
"
873192911,2668,Paul-Licameli,2022-05-15T16:26:39Z,"What you wrote is equivalent to
```
bool lck = (!self.expired() && mDelegate)
```

but does not lock the weak pointer for the intended scope!  It should be
```
if (auto lck = self.lock(); lck && mDelegate)
```
"
873193971,2668,Paul-Licameli,2022-05-15T16:35:20Z,"This means, handling of one request is complete, and another may be sent.

It is very pleasing to see only one virtual function interface here, and the simplified implementation without the state machine and a switch.  I find it more understandable than the first draft.
"
873194219,2668,Paul-Licameli,2022-05-15T16:37:27Z,"I would also write the lambda capture without this, only with self to access this.  And that would have caused a compilation error after the incorrect if, which might make you fix it correctly.
"
873194573,2668,Paul-Licameli,2022-05-15T16:40:19Z,"The sixth commit, which introduces this file, fails to compile.  It requires the overload of `RegisterPlugin` added at the next commit.
"
873195130,2668,Paul-Licameli,2022-05-15T16:45:49Z,"The constants `STATE_New` and `ID_ShowNew` might also exist only when conditionally compiled.  That would make it more obvious that the changes in this commit are complete and correct.

That would mean one of the event bindings in the table is also eliminated, and one case of a switch statement, and one if-block in `SetState`.

"
873195338,2668,Paul-Licameli,2022-05-15T16:47:32Z,"""plugins still exist""
"
873199958,2668,Paul-Licameli,2022-05-15T17:27:31Z,"Comments should explain that the callbacks occur on the main thread when the event loop idles or is yielded to.
"
873200977,2668,Paul-Licameli,2022-05-15T17:36:53Z,"It's good to make members of new classes `const` where possible as an aid to understanding.  This is one member that could be const.
"
873201782,2668,Paul-Licameli,2022-05-15T17:44:19Z,"Is this where errors from PluginHost are used at last?  Then fixing the setup of locale in the other process is unimportant after all, and literal English string errors are all right.  But then, where `Translation()` was used, make it `Debug()`.
"
873202738,2668,Paul-Licameli,2022-05-15T17:52:01Z,This could be just a local variable
873202904,2668,Paul-Licameli,2022-05-15T17:53:18Z,"`Poll` already did a `Yield` too
"
873204773,2668,Paul-Licameli,2022-05-15T18:10:46Z,"If the definition of `CheckPluginUpdates` is moved here, it makes the commit easier to review.  More black lines, fewer red and green.

"
873205563,2668,Paul-Licameli,2022-05-15T18:17:24Z,"Moving the definition makes it clearer that false became true in this line.  A more complete check of validity is done.

Still now, I wonder about this.  What happens if a plug-in is upgraded to a newer version reinstalled at the same path?  Should that be detected and cause another load again in the sandbox?

Nyquist.cpp contains checks for advance of the modification date of the plug-in file, making it easier to try changes while you develop a plug-in.  But those are just interpreted source code.

Maybe recording of time stamps is a future enhancement to do.

"
873206763,2668,Paul-Licameli,2022-05-15T18:28:15Z,"Does this leak?  A wxWindow is managed when it has a non-null parent, but this non-modal dialog does not!
But I see it does not leak because all the button event handlers cause it to destroy itself.  Very well, mention that here, to justify `safenew` (which is something like an assertion -- something needing a proof when you see it.)
"
873206968,2668,Paul-Licameli,2022-05-15T18:30:02Z,"You do a lot with explicit sizers and control creations and so on.  Are you not comfortable enough with ShuttleGui?  All right if not, but a rewrite of this should be in the future to make all of this desirable plug-in checking platform neutral too.

Besides which:  perhaps this dialog belongs in its own small source file.
"
873991893,2668,vsverchinsky,2022-05-16T17:37:16Z,"Depends on project I believe, do we have such convention?"
874022697,2668,vsverchinsky,2022-05-16T18:12:50Z,">Why not std::move(desc)? You need it to avoid copying, because desc alone still is an lvalue reference even though the argument is declared with &&.

Right, thanks!

>And that might allow vector instead of list for the container, but maybe there is a reason for list I don't understand yet, some requirement of non-relocation of the memory.

There is no such requirement, `PluginDescriptor` will be copied later, when added to `PluginManager`"
874052822,2668,vsverchinsky,2022-05-16T18:48:10Z,"Hm, didn't think of it, thanks. It's hard to answer such questions without a complete understanding of requirement. Though we can initialize i18n on the host side too, but then there is a question of language preference change. So, I don't have a complete answer, not use i18n in messages is a possible solution I think."
874066172,2668,vsverchinsky,2022-05-16T19:05:22Z,"I was thinking of it too, and there is a downside - the size of application will increase, don't know how much though."
874075230,2668,vsverchinsky,2022-05-16T19:17:51Z,"Yes, it's correct"
874084138,2668,vsverchinsky,2022-05-16T19:28:59Z,Thanks! `this` is needed for class-member access
874091829,2668,vsverchinsky,2022-05-16T19:39:08Z,Fixed
874108555,2668,vsverchinsky,2022-05-16T20:01:30Z,Thanks!
874117743,2668,vsverchinsky,2022-05-16T20:13:48Z,"Wasn't aware of that, thanks!"
874119431,2668,vsverchinsky,2022-05-16T20:16:06Z,It will cost some time because from what I see it doesn't yield each `Poll`. In my case the difference was 2-4 seconds.
874121599,2668,vsverchinsky,2022-05-16T20:19:09Z,">Still now, I wonder about this. What happens if a plug-in is upgraded to a newer version reinstalled at the same path? Should that be detected and cause another load again in the sandbox?

I'd say yes. But for this we need to track module file timestamp (if there is a file)"
874128773,2668,vsverchinsky,2022-05-16T20:27:40Z,">Are you not comfortable enough with ShuttleGui?

I'm still not very comfortable with wxWidgets)

>Besides which: perhaps this dialog belongs in its own small source file.

Probably, you are right"
875640947,2668,Paul-Licameli,2022-05-18T08:53:31Z,"You didn't take this suggestion yet in the lastest force-push.  Did you not understand it?
"
1241278381,4797,Paul-Licameli,2023-06-25T20:03:09Z,"My first comment on this PR.

I did not review the PR that added this library, so I must become familiar with that first.

I see `libraries/lib-time-and-pitch/CMakeLists.txt` lacks a long-form CMake comment at the top, which is the convention with other libraries.

Please supply that comment, about the general purpose of the library.
"
1242063703,4797,Paul-Licameli,2023-06-26T11:40:43Z,"I see this header file changes in the second commit in the sequence, and nothing else changes in lib-mixer thereafter.

You know I dislike the notion of an internal, stateful cursor leaking out of the abstract interface, and I would think it more elegant instead to change the `Get` function to take a direction argument, and also to specify the reversal of samples is done in the result.

But I think I will not insist on this if the schedule presses.
"
1242064721,4797,Paul-Licameli,2023-06-26T11:41:38Z,"Some breaks in this very long comment line
"
1242480129,4797,Paul-Licameli,2023-06-26T16:51:38Z,"Good, now please add to the Doxygen comments above, explaining the argument, and the expectation that the outputs are reversed.

And likewise for `GetEnvelopeValues`
"
1242522012,4797,Paul-Licameli,2023-06-26T17:27:48Z,"I would rather not see this ugly cast.  I would rather see `WideSampleSequence::GetFloats` take `bool backwards = false` as the first optional argument.  The ""narrow"" overload in `SampleTrack` may simply supply false instead of exposing that argument to its callers.
"
1242541090,4797,Paul-Licameli,2023-06-26T17:43:16Z,"I see reversal of the envelope values.  But I was expecting to see `ReverseSamples` too, restoring the removed call in MixerSource.

I think this means the first commit breaks backward scrubbing, and that should not be.  I haven't yet reviewed later commits, which might make it work again, when the WaveTrack has its stretching decorator, but logically, shouldn't the proper place to apply reversal be here in WaveTrack?

"
1242547769,4797,Paul-Licameli,2023-06-26T17:48:42Z,"Library header comment, please
"
1242550701,4797,Paul-Licameli,2023-06-26T17:50:57Z,"If you really want to include this in the tree, the CMakeLists.txt comment can refer the reader to it for more explanation.
"
1242561625,4797,Paul-Licameli,2023-06-26T17:58:42Z,"I'm skipping the rest of this big commit for now, I will return and review it in detail last
"
1242562583,4797,Paul-Licameli,2023-06-26T17:59:25Z,"`override` is still missing for `GetRate` and that makes clang give warnings
"
1242564384,4797,Paul-Licameli,2023-06-26T18:00:43Z,"You should also delete the `@pre` mentioning `ii`
"
1242569948,4797,Paul-Licameli,2023-06-26T18:05:19Z,"This call no longer needs to satisfy the removed precondition, but must now not index the array out of bounds, and so `ClipInterface::GetSampleView` should have a `@post` or `@return` comment guaranteeing the size of the result equals the width.

And `ClipInterface::GetWidth()` should replicate the promise of `WideSampleSequence::NChannels`:

```
   //! A constant property
   /*!
    @post result: `result > 0`
    */
```
"
1242573033,4797,Paul-Licameli,2023-06-26T18:08:48Z,"However, I'm not yet sure I agree that `ii` should be removed as an argument.
"
1242575438,4797,Paul-Licameli,2023-06-26T18:11:11Z,"You are assuming here that all channels will be needed in the cache.  But remember what I explained about drawing code, including spectrogram, needing to stride ""channel-major"" but ""clip-minor"".

The caches for spectrogram drawing might now be doing wasteful duplicated work?  Creating a left and right side cache, but only using one side, destroying that cache, then repeating for the right channel?

."
1242578220,4797,Paul-Licameli,2023-06-26T18:14:07Z,"Might `move` the shared pointers
"
1242582501,4797,Paul-Licameli,2023-06-26T18:17:38Z,"I think you really mean: 
```
`left` is not null, and `right` is null, or else etc.
```"
1242587232,4797,Paul-Licameli,2023-06-26T18:22:31Z,"You handle un-owned tracks anyway, so weaken the `@pre`.

Now remember too, that clips are not necessarily stored, sorted by start time.  But are you assuming that where you use the results of this function?
"
1242596374,4797,Paul-Licameli,2023-06-26T18:32:29Z,"This line, and the one in src/CMakeLists.txt, are unnecessary for the build, and I would prefer you omit them so that the generated library graph does not have unnecessary edges.
"
1242614503,4797,Paul-Licameli,2023-06-26T18:41:23Z,"Oh, never mind.  The caching for spectrum view will not include the stretching decorator.
"
1242632520,4797,saintmatthieu,2023-06-26T18:58:41Z,"The stretching decorator re-implements ::Get, where the clip samples are reversed before being passed to the stretching algorithm. As a result scrubbing does work when injected that decorator, but you're right, `WaveTrack::Get` should reverse the samples, even if no other code has use for it. `WaveTrack::GetSampleView` isn't a virtual function and `backwards` could/should be removed from its arguments, leaving `CachingPlayableSequence::Get` do the reversal."
1242634945,4797,saintmatthieu,2023-06-26T19:01:12Z,"I have to update this, thanks for reminding."
1242654735,4797,saintmatthieu,2023-06-26T19:19:16Z,"Not the stretching decorator, but `CachingPlayableSequence` also uses `WaveClip::GetSampleView`.
Currently it calls it on two separate tracks each with mono clips, so there's no unnecessary work. When we do use wide clips, though, there'll be only one stereo track, `WaveTrack::GetSampleView` will call `GetSampleView` on clips, and yes, doing unnecessary work if it stays at that.
Looks like I indeed need to preserve the `ii` argument ..."
1242659656,4797,saintmatthieu,2023-06-26T19:24:26Z,"Ok for the `@pre`.
The stretching decorator sorts the clips this method returns, so we're good."
1242665641,4797,saintmatthieu,2023-06-26T19:27:43Z,Done.
1242669658,4797,Paul-Licameli,2023-06-26T19:31:51Z,"In the interests of progress I will not block the PR if this is left unfinished, and scrubbing works in the end result, but you are aware of a need to come back and clean it up.

Really you should make sure that the sample reversal is part of the stated contract of `WideSampleSequence` and that all overrides of `Get` do it correctly -- whether it's the undecorated or the decorated WaveTrack.  Maybe some overrides of `Get` won't be directly called in 3.4, but you should not assume it will always be so.  The classes should make sense in isolation and in test harnesses, fulfilling the base class contract.  That's what the L of SOLID is all about.

"
1242671677,4797,Paul-Licameli,2023-06-26T19:34:11Z,"Then perhaps the lack of promise of sortedness should be mentioned in a header comment.
"
1242672606,4797,Paul-Licameli,2023-06-26T19:35:21Z,"If you just make a `// TODO` note to revisit the efficiency problem in a later PR, I would accept that.
"
1242952609,4797,Paul-Licameli,2023-06-26T23:55:32Z,This interface looks strange -- I don't see what tells it how many `buffers` are there.
1242952675,4797,Paul-Licameli,2023-06-26T23:55:38Z,Class comments?
1242954199,4797,Paul-Licameli,2023-06-26T23:58:05Z,"I would define `AudioSegment.cpp` just to define the destructor non-inline -- so that the linker can avoid de-duplication of the definition of the destructor and the virtual function table of the class; also so that ""AudioSegment.h"" is included in at least one translation unit before any other header, and we can be sure the header does not require any earlier #include for it to compile.
"
1242955371,4797,Paul-Licameli,2023-06-27T00:00:03Z,"Likewise for this class -- I would make one wimpy little translation unit just to give the virtual function table a unique home at link time.
"
1242960804,4797,Paul-Licameli,2023-06-27T00:08:40Z,"`size_t` seems a strange choice of type to describe a sample rate.  It's not sizing something in memory.
"
1242978913,4797,Paul-Licameli,2023-06-27T00:19:25Z,"You did make a tiny translation unit for this one
"
1242979326,4797,Paul-Licameli,2023-06-27T00:20:02Z,"Uniform member initialization syntax, here and elsehwere, maybe?
"
1242982974,4797,Paul-Licameli,2023-06-27T00:24:14Z,"Only now do I understand the meaning of the return value of `GetFloats`.  But AudioSegment.h, lacking comments, didn't help me.

Please write some informal description of the contract in that header file.

If it were me, I would even add a pure virtual `size_t GetWidth() const` just so that I could use it to state a precondition on the size of `buffers` and call it just in not-NDEBUG builds to assert the precondition.
"
1242990876,4797,Paul-Licameli,2023-06-27T00:35:18Z,"Maybe that should be `>=` just to be sure there is eventual emptiness even in the presence of an off-by-few error
"
1242991936,4797,Paul-Licameli,2023-06-27T00:37:07Z,Maybe `limitSampleBufferSize`; and are you sure that subtraction never underflows?
1242993992,4797,Paul-Licameli,2023-06-27T00:40:27Z,"> Maybe `limitSampleBufferSize`; and are you sure that subtraction never underflows?  Maybe state an invariant and prove that you preserve it in this function.

"
1243259149,4797,saintmatthieu,2023-06-27T07:25:44Z,"I don't know of evidence that the compilation time gain is worth the manual effort. The early-include verification... yeah, all right."
1243282022,4797,saintmatthieu,2023-06-27T07:43:02Z,"The effective number of channels is known in the context instances are used by both implementation and user. But you're right, looking back that's unusual. I'll pass a vector reference instead."
1243287075,4797,saintmatthieu,2023-06-27T07:47:21Z,Never thought of `size_t` that way ... Will use just int.
1243291295,4797,saintmatthieu,2023-06-27T07:51:02Z,Because I initially added this in `lib-mixer` and wanted to be consistent with the code around me :D
1243301827,4797,saintmatthieu,2023-06-27T07:58:40Z,"> Maybe state an invariant and prove that you preserve it in this function.

I don't understand what you mean here.

In any case, I think it's obvious enough from the code that `mTotalNumSamplesToProduce >= mTotalNumSamplesProduced`, asserting this would make the code look uncertain."
1243304395,4797,saintmatthieu,2023-06-27T08:00:15Z,"Similarly to above, `mTotalNumSamplesProduced` simply can't be larger than `mTotalNumSamplesToProduce`. I wouldn't want the reader to start doubting this."
1243306415,4797,saintmatthieu,2023-06-27T08:01:33Z,Absolutely.
1243325682,4797,saintmatthieu,2023-06-27T08:17:20Z,"Oops : I added `AudioSegment.cpp` and moved the dtor definition there, and now I'm getting unresolved external symbol. I can't see why, so at least for now I'll leave it with the inline definition."
1243342042,4797,crsib,2023-06-27T08:30:17Z,You likely need to export the interface 
1243429233,4797,saintmatthieu,2023-06-27T09:31:45Z,I'm addressing it.
1243881096,4797,Paul-Licameli,2023-06-27T14:48:01Z,"`start` is an inclusive bound for the usual forward fetch and the other bound is exclusive.

But as I recall how mixer works, `start` is exclusive and the other inclusive for backwards fetch.

Worth commenting.
"
1243881563,4797,Paul-Licameli,2023-06-27T14:48:17Z,"Likewise, clarify inclusive and exclusive bounds.
"
1243920278,4797,Paul-Licameli,2023-06-27T15:10:05Z,"I see `backwards` is used to construct the cache, but is ignored when using it.  Samples are not taken from the end and reversed.

So this implementation of `CachingPlayableSequence` is incomplete, and so in the first commit, backwards scrubbing won't work right.

But I see that later commits stop using this class for audio io, and in the remaining uses for spectrogram, there is never any backwards fetch.

So for now just `assert(!backwards)` and comment about it.
"
1243937000,4797,Paul-Licameli,2023-06-27T15:21:26Z,"You changed `float *const *` to `std::vector<float*>&` so there is information about the number of buffers.

This is all right.  But `std::vector` carries the irrelevancy about the allocator type in its second template argument, and this doesn't allow the caller simply to stack-allocate the pointers if desired.

This is why I wanted `std::span` for such uses, but that is C++20.  However it might be easily imitated in a new utility.

It's also why my preference, lacking `span`, is to pass two arguments, the array of pointers and its size.

Now should there be an explanation about which buffers are filled?  If the caller happens to pass more buffers then the width, should you expect zeroes in the extra buffers or unspecified?

This abstraction still has no interface to query the width.

None of the above is a blocking criticism.

"
1243942756,4797,Paul-Licameli,2023-06-27T15:25:34Z,"You changed `sampleRate` from `size_t` to `int`.  In other Audacity code, inconsistently, `int` and sometimes `double` is used for rates.  If we really never need fractions of Hz, then maybe `unsigned` would make most sense.

Let it remain `int`.

You changed `numChannels` to `int` too, but I didn't ask for that -- `size_t` does make sense for that.  But this too can stand.
"
1243961691,4797,Paul-Licameli,2023-06-27T15:39:05Z,"Here, an override of a pure virtual function is adding an assertion at the top -- that's an unstated, stricter precondition than the base class specified.

That's bad form (violating the L principle) -- so again, I think `GetWidth` should also be a pure virtual of the base class, so that the base class can formally state the precondition.  And that would answer the question about excess buffers -- they are just not allowed.

"
1243997086,4797,Paul-Licameli,2023-06-27T16:02:18Z,"This test file fails to compile in the commit that introduces it.  The Audacity executable compiles.
"
1244004069,4797,Paul-Licameli,2023-06-27T16:08:10Z,"This line now breaks the build at ""WaveClip inherits ClipInterface""
"
1244016857,4797,Paul-Licameli,2023-06-27T16:17:21Z,"Again -- if I see a new assertion at the top of a function, I want to see it commented too as an explicit precondition.

The commit introducing this function repairs all the previous build problems.
"
1244022320,4797,Paul-Licameli,2023-06-27T16:21:41Z,"The informally stated (and not `assert`ed) precondition of the constructor of `WaveClip` can be violated if you make a track with misaligned clips.

But of course it doesn't matter much.  WideClip is provisional only until I make real wide WaveClips and misaligned clips become impossible.

"
1244024256,4797,Paul-Licameli,2023-06-27T16:23:14Z,"Still an unnecessary arc in the modules graph
"
1244028528,4797,Paul-Licameli,2023-06-27T16:26:27Z,"Still missing one more `override`, for `GetRate`
"
1244036941,4797,Paul-Licameli,2023-06-27T16:31:58Z,"I'm actually recommending an L principle violation with that assertion!  But I understand the fix as not worth the effort now

"
1244044290,4797,Paul-Licameli,2023-06-27T16:37:59Z,"I would clarify, ""provided in each buffer""
"
1244047969,4797,Paul-Licameli,2023-06-27T16:41:08Z,"That #include at least is unnecessary, maybe some others too
"
1244053321,4797,Paul-Licameli,2023-06-27T16:45:46Z,"Wrong comment
"
1244057709,4797,Paul-Licameli,2023-06-27T16:49:32Z,"This is only test code, but I don't like naked `new`.  You could `make_unique` and then `move` it.
"
1244062273,4797,Paul-Licameli,2023-06-27T16:53:34Z,"You mean `.h`
"
1244069683,4797,Paul-Licameli,2023-06-27T16:59:36Z,"You need `#include <cstddef>` to define `size_t` and fix Linux builds.
"
1244071290,4797,Paul-Licameli,2023-06-27T17:00:23Z,"That's a path on your computer only!
"
1244080427,4797,Paul-Licameli,2023-06-27T17:05:29Z,"I think you do need MOCK_PREFS but why MOCK_AUDIO?
"
1244082608,4797,Paul-Licameli,2023-06-27T17:07:34Z,"Declared, nowhere defined
"
1244083679,4797,Paul-Licameli,2023-06-27T17:08:30Z,"add `override` please
"
1244114407,4797,Paul-Licameli,2023-06-27T17:34:20Z,"`lib-stretching-sequence` does not depend on `lib-wave-track`, but the opposite.

However the test executable depends on `lib-wave-track`.

The build system let you do this, but I think I don't like it and should consider it a cycle.

Instead, you could lift all testing files that depend on WaveTrack and WaveClip into a new `lib-wave-track/test` directory.

That may mean `lib-wave-track/test` might need to used some of the mocks defined in `lib-stretching-sequence/test`.

Does the test build system allow that dependency?  @crsib ?


"
1244123947,4797,Paul-Licameli,2023-06-27T17:42:48Z,"I think the second base could be `private`
"
1244128493,4797,Paul-Licameli,2023-06-27T17:46:41Z,"If the constructor is not meant for public use, but instead only the `Create` factories -- maybe use the `CreateToken` trick as in `EffectStage`.  The constructor has to be public, but `Create` needs make-shared so `std` functions have to call the constructor.  But the trick is a way to restrict the usage without the `std` functions needing to be `friend`s.

"
1244132350,4797,Paul-Licameli,2023-06-27T17:49:07Z,"More uniform initializations might be done for this and other test classes.
"
1244740804,4797,saintmatthieu,2023-06-28T06:25:40Z,Thank you!
1244742856,4797,saintmatthieu,2023-06-28T06:28:14Z,Removed - thanks!
1244748628,4797,saintmatthieu,2023-06-28T06:35:02Z,`AudacityProject::Create()` leads to an audio-io setup in my `TestWaveTrackMaker`. Not sure if/how it could be avoided.
1244764341,4797,saintmatthieu,2023-06-28T06:49:53Z,"Makes sense, there must be modifications in `WaveTrack` needed for this integration test that I added in follow-up commits."
1244767098,4797,saintmatthieu,2023-06-28T06:53:02Z,I need a refererence to `factory` after the move. It's feasible without this `new` but more complicated.
1244773513,4797,saintmatthieu,2023-06-28T06:59:19Z,"I don't think we have a cyclic dependency. In fact, if I could remove `lib-stretching-sequence` from the list of libraries needed by this test executable and it would still compile. It's just one unnecessary arrow in the dependency graph ;)"
1244783569,4797,saintmatthieu,2023-06-28T07:10:03Z,"If we're picky, yes, we'll want `GetWidth` and specifications about `buffers.size() > GetWidth`.
`AudioSegment`s are used in `StretchingSequence`, which, like all `PlayableSequence`s in Audacity as of now, has either only mono or stereo clips. This is why a need for `GetWidth` wasn't felt in the first place.
I suggest we leave it at that for now, and address it properly when/if we ever support tracks of mixed channel counts."
1244785635,4797,saintmatthieu,2023-06-28T07:12:10Z,I wish C++ had a strictly-positive-integer type ...
1244795399,4797,saintmatthieu,2023-06-28T07:21:05Z,"Oh well, you win :D"
1244798716,4797,saintmatthieu,2023-06-28T07:24:21Z,"Could it ? Checking ...
... no, because it passes itself as `TimePitchAndSource` to `mTimeAndPitch`."
1244802968,4797,saintmatthieu,2023-06-28T07:28:31Z,"It's ok, it can be used publicly, it's just that clients usually don't want to bother about injecting a factory and are happy with the default one. One test case, though, needs it.
But that's a nice trick, never thought about it."
1244809125,4797,saintmatthieu,2023-06-28T07:34:22Z,"I agree. It'd be hard to test, too. Spot on, though."
1244820395,4797,saintmatthieu,2023-06-28T07:44:18Z,"> WaveTrack::Get should reverse the samples

I meant by that that I was going to address it. It's done now."
1244823328,4797,saintmatthieu,2023-06-28T07:46:51Z,addressed
1245249641,4797,Paul-Licameli,2023-06-28T13:53:55Z,"But I think the test directory for a library should be responsible to test only that library.

If a test executable involves other libraries higher in the graph, that argues for moving those tests.
"
1318465255,5138,saintmatthieu,2023-09-07T11:26:05Z,`WaveTrack::Duplicate` does this check for you. We should consider making it a public helper method of WaveTrack to places like these simpler.
1318469813,5138,saintmatthieu,2023-09-07T11:30:56Z,"Pardon me I thought it did: not really, or intricately.
That said, `Duplicate` won't apply stretch ratio if no clip is stretched in the interval. So behaviour would be preserved removing those checks - although it would have a negative impact on performance."
1318475502,5138,saintmatthieu,2023-09-07T11:35:02Z,Nice !
1318477159,5138,saintmatthieu,2023-09-07T11:36:08Z,👍 
1318805924,5138,saintmatthieu,2023-09-07T15:46:48Z,"I've been using `TimeInterval` on my other branch, which I think is appropriate since it's a pair of doubles."
1318811510,5138,saintmatthieu,2023-09-07T15:51:38Z,I prefer the way it was before: easier to understand (I always have to look up the subtlety between lower_bound and upper_bound) and on usage average seldom more expansive performance-wise. But sure ...
1319676421,5138,Paul-Licameli,2023-09-08T10:25:57Z,"I will change the name
"
1321321559,5138,Paul-Licameli,2023-09-11T10:16:17Z,"Eliminate `WXUNUSED` when you have an excuse to disturb a function with that macro.
Just declare `double, double`

Or if you want to be really modern: https://en.cppreference.com/w/cpp/language/attributes/maybe_unused
"
1321323557,5138,Paul-Licameli,2023-09-11T10:18:11Z,New strings.  @LWinterberg 
1321327006,5138,saintmatthieu,2023-09-11T10:21:37Z,FYI copy-paste of agreed-upon strings from other places where pre-rendering is needed.
1323233683,5138,Paul-Licameli,2023-09-12T15:38:32Z,"@LWinterberg 
"
1324068459,5138,saintmatthieu,2023-09-13T07:06:48Z,"You mentioned this utility in our meeting yesterday, but I didn't get the advantage over adding member functions to `WaveTrack` ?"
1324075017,5138,saintmatthieu,2023-09-13T07:13:16Z,"In the ""TimeAndPitchInterface::IsPassThroughMode"" commit of #5191, I'm consolidating checks of whether a clip is stretched with the decision in `StaffPadTimeAndPitch` to be in pass-through mode or not. Provided that what I did there is correct, the check here should be `pClip->StretchRatioEquals(1)`."
1324095801,5138,saintmatthieu,2023-09-13T07:32:00Z,"Now that I pay attention to the progress bar, I realize that there are two buttons: stop and cancel. I don't see a difference in behaviour between the two. `EffectBase.cpp` uses just `ProgressShowCancel`, which seemingly we should here too."
1324096486,5138,saintmatthieu,2023-09-13T07:32:36Z,I'd be interested in knowing the difference between stop and cancel if anyone knows.
1324108499,5138,saintmatthieu,2023-09-13T07:42:49Z,"Not sure how much this matters, but we get boxes of different look and feel depending on whether we've selected too many samples
![image](https://github.com/audacity/audacity/assets/22740106/e2f7eee5-082d-4361-99d7-08f3abe396f9)

or when selection intersects stretched data:
![image](https://github.com/audacity/audacity/assets/22740106/b619aeb1-9790-4b91-920c-392ec09c2497)
"
1324112857,5138,saintmatthieu,2023-09-13T07:46:43Z,"A shortcoming that was already there that this commit should fix:
This check should be placed before the `if (repairLen > 128) {` check : if you expand a clip by a factor of 2, and select 100 visible samples, the `repairLen > 128` fails. I've experienced it and it took me time to understand why. A lambda user would probably perceive this as a bug."
1324134494,5138,saintmatthieu,2023-09-13T08:04:19Z,"I don't think someone should be able to call `ApplyStretchRatio` with an empty interval. I'd rather have `@pre `!unstretchInterval || unstretchInterval->second > unstretchInterval->first`. Then, in EffectOutputTracks.cpp, if the interval is empty, call `WaveTrack::Duplicate` with an `std::nullopt` (or equivalent)."
1324171053,5138,LWinterberg,2023-09-13T08:33:37Z,wording sounds good
1324240268,5138,saintmatthieu,2023-09-13T09:28:04Z,I realize that the `unstretchInterval` arguments of `Track::Duplicate` and `WaveTrack::ApplyStretchRatio` have opposite meanings: stretch nothing in the former and everything in the latter. Maybe we should remove that argument from `Duplicate` and `Clone` and let the callers make a call after that to `ApplyStretchRatio` if needed.
1324245267,5138,Paul-Licameli,2023-09-13T09:32:07Z,"I think smaller is often better for classes.

The function I move into that file was defined in an earlier commit without intrusion into WaveTrack.  It wasn't necessary.  The existing public interfaces were sufficient to define it.

So then, why disturb and complicate the interface of WaveTrack without need?  I'm making the function available for reuse but keeping it separate from the class.

I think we may identify more inessential member functions of WaveTrack that could also be moved out.  It's a big file doing too much.

I think it would be better to have a smaller WaveTrack class someone could study, which provides just the essential services and maintains important class invariants.
"
1324274370,5138,LWinterberg,2023-09-13T09:55:52Z,"semantically, the (i) message is wrong in both cases anyway as we error out and abort. The red (x) would be more appropriate here. 

I have no strong feeling whether to use the big or the small text version. The big version feels a bit Vista/7, but I also have no strong desire to see it changed at the moment. The smaller version is the more appropriate to use going forward though."
1324293909,5138,Paul-Licameli,2023-09-13T10:13:03Z,"Done.

I recall there was a difference between Stop and Cancel for import and export.  I didn't look to see if that was conserved after all the refactoring in this release.

It was possible to Stop with a partially exported file instead of aborting the whole thing and deleting the file.
"
1324302385,5138,saintmatthieu,2023-09-13T10:21:01Z,"All right, so change to red, but what's the required change for the looks-and-feel (if any) ?"
1324306575,5138,saintmatthieu,2023-09-13T10:25:04Z,No strong objection to that.
1325374795,5138,saintmatthieu,2023-09-14T05:32:44Z,If you get the chance while squashing: `if (bGoodResult && tempList)`.
1325375457,5138,saintmatthieu,2023-09-14T05:33:52Z,`if (clip->GetStretchRatio() != 1.0)`. I'll make the change myself.
1325510340,5138,saintmatthieu,2023-09-14T07:43:33Z,"If nothing is selected, then `mT0 == mT1 == 0` and the assert this commit introduces in `EffectOutputTracks::EffectOutputTracks` is hit."
1325553634,5138,saintmatthieu,2023-09-14T08:11:30Z,"Neither of these false returns prevent the output tracks to be committed, actually. Maybe we should fix this now, i.e. `bGoodResult = false` if `processOne` fails."
1325690407,5138,Paul-Licameli,2023-09-14T09:43:02Z,This makes a progress indicator for each wave track separately.
1325694045,5138,Paul-Licameli,2023-09-14T09:45:19Z,Instead you could move stretching after this loop.  Count wave tracks or maybe only the tracks needing a stretch first and construct a progress indicator with that denominator.  Then another loop to do stretching.
1325696223,5138,Paul-Licameli,2023-09-14T09:47:00Z,Remove that comment line
1325699106,5138,Paul-Licameli,2023-09-14T09:49:23Z,"Maybe the progress indicator for stretch can be built by a reusable utility function in WaveTrackUtils.h.  It would take another std::function just to report the varying `count` and give back another std::function.
"
1325700464,5138,Paul-Licameli,2023-09-14T09:50:30Z,"When a zero duration interval is given, will there be a split there or will nothing happen?   Comment that"
1325702052,5138,Paul-Licameli,2023-09-14T09:51:46Z,Does this stretch all or nothing?  Should be nothing
1325703923,5138,Paul-Licameli,2023-09-14T09:53:13Z,Tell me what warning this fixes
1325704517,5138,Paul-Licameli,2023-09-14T09:53:44Z,"Duh
"
1325709520,5138,saintmatthieu,2023-09-14T09:57:32Z,`warning C4273: 'AudioGraph::Sink::~Sink': inconsistent dll linkage `
1325710384,5138,saintmatthieu,2023-09-14T09:58:14Z,Nothing.
1325714500,5138,saintmatthieu,2023-09-14T10:01:48Z,"I'm doing something like that in 4-of-6, where rendering happens also e.g. when joining."
1325716937,5138,saintmatthieu,2023-09-14T10:03:59Z,"It's implied: `in which case clips are split at these boundaries before rendering - if rendering is needed` -> empty interval, no rendering needed."
1325722459,5138,saintmatthieu,2023-09-14T10:08:58Z,Sounds better. Trying that ...
1326142429,5138,Paul-Licameli,2023-09-14T15:35:41Z,"So I understand that means, yes there is a split?
"
1326212380,5138,Paul-Licameli,2023-09-14T16:18:53Z,"I see, it was a duplicate definition of `~Sink` which is still defined elsewhere.
"
1326212997,5138,Paul-Licameli,2023-09-14T16:19:16Z,"Good
"
1326216721,5138,Paul-Licameli,2023-09-14T16:21:38Z,"On further thought, the new utility function could just take a reference to a counter variable instead of a function.  It would return a function.

Of course you would need to use C++14 ""extended capture"" [] syntax to allocate the progress indicator with `make_unique` so it would be destroyed along with the `std::function` when no longer needed.

"
1326222270,5138,Paul-Licameli,2023-09-14T16:25:03Z,"That's a very alert catch.  Thank you.
"
1326226835,5138,Paul-Licameli,2023-09-14T16:28:01Z,"You are right.  But you have fixed this with another commit that weakened the assertion.
"
1326227168,5138,Paul-Licameli,2023-09-14T16:28:13Z,"Again, duh
"
1326227552,5138,Paul-Licameli,2023-09-14T16:28:28Z,"Later
"
1326232006,5138,saintmatthieu,2023-09-14T16:31:37Z,"Not so alert, but through testing. Other effects behave like that, I didn't comment them all."
1326234006,5138,saintmatthieu,2023-09-14T16:33:02Z,"No, there is no split. I didn't realize this was so unclear - will clarify the comment when I get the chance."
1327532539,5138,Paul-Licameli,2023-09-15T16:27:13Z,What if output tracks contains un-selected tracks of the sync lock group?  They would be analyzed too
1327539472,5138,Paul-Licameli,2023-09-15T16:33:55Z,This looks like an abandoned experiment you don’t want to commit
1327541723,5138,Paul-Licameli,2023-09-15T16:35:54Z,I checked for the other use of FindSilences but that is correctly left unchanged as it already applies to an output track.
928817018,3278,Paul-Licameli,2022-07-25T12:16:52Z,"Most one-argument constructors should be `explicit`
"
928831728,3278,Paul-Licameli,2022-07-25T12:33:36Z,"I see you add two virtual functions to the wrapper when you moved Load() into it.

I understand virtual `Unload` lets wrapper avoid mention of `mDialog`.

But I think the last part of `Unload`:

```
   if (mModule)
   {
#if defined(__WXMAC__)
      mResource.reset();
      mBundleRef.reset();
#endif

      mModule.reset();
      mAEffect = NULL;
   }
```

should be the responsibility of Wrapper, balancing what it does in load.  Make those lines a non-virtual function; call it in the destructor of LV2Wrapper, and also on the failure path of `Load()`.

And I think you defined virtual `callSetProgram` to avoid dependending on `mSlaves`.  But `Load()` only needs `callSetProgram` to initialize a plug-in or an instance which will not yet have any slaves.  So I think you don't need this function, and can instead let `Load` call `callSetProgramB`"
928835270,3278,Paul-Licameli,2022-07-25T12:37:38Z,"Might simplify it with an inherited constructor:
`using DefaultEffectUIValidator::DefaultEffectUIValidator `
"
928847591,3278,Paul-Licameli,2022-07-25T12:51:01Z,"The commit that stubs `ProcessInitialize` and others is incomplete.  My fault for giving an incomplete description for step 4.  (Now updated)

`ProcessFinalize` should also be moved to the instance, and you will know all is correct when the effect also inherits `PerTrackEffect` not `StatefulPerTrackEffect`.

Please figure out step 4 as a whole and squash all the 4.x commits.
"
928882020,3278,Paul-Licameli,2022-07-25T13:25:41Z,"Your last commit fails to build because `VSTInstance` becomes an abstract class when it inherits `VSTWrapper`.

I mentioned before why `Unload` is the only virtual function you really need, and at this commit, you should define it for `VSTInstance`.

What part of `VSTEffect::Unload` should be moved into that function?  This part, but not the part mentioning a dialog:

```
   if (mAEffect)
   {
      // Turn the power off
      PowerOff();

      // Finally, close the plugin
      callDispatcher(effClose, 0, 0, NULL, 0.0);
      mAEffect = NULL;
   }
```

That is because powering on is only something the Instance needs to do, not the effect.

In fact I think `PowerOn()` and `PowerOff()` should end up in the Instance class only.  But to do step 4 without step 5, you will first need to move them into the Wrapper class.  Then move them again in step 5.

Also in step 4, the `PowerOn()` in `BuildFancy()` should be changed to call it on the Instance, not on `this`.
Pass the Instance into `BuildFancy()` from `PopulateUI()`.


"
928906077,3278,Paul-Licameli,2022-07-25T13:48:02Z,"`VSTEffectInstance` will also need to define all the other pure virtuals that were added to `VSTEffectWrapper`.

Some of the new functions should be empty stubs, others should have the lines from the corresponding VSTEffect functions moved into them, and data members should be moved too as needed to compile it.

Or a third possibility is that some members should be moved into VSTWrapper and the functions become non-virtual.

Which of the new functions of `VSTEffectInstance` should be empty?  I think NeedIdle, UpdateDisplay, SizeWindow all serve UI purposes only so should be empty.

What about the rest of them?  I'm not decided yet.

"
928911549,3278,Paul-Licameli,2022-07-25T13:52:55Z,"The virtual functions with non-void return are `GetTimeInfo` and `GetSampleRate`.  If we have a vst handle for the plug-in distinct from the instances, will it need to report meaningful values out of `AudioMaster` or will those cases never be invoked?

I'm not sure of the answer.  But I suggest this, and let experiment see if there is a problem:

Make default implementations of these non-pure virtuals to return nullptr at 44100.

Make overrides in the Instance class.

Move the member mTimeInfo to the instance.

"
928914011,3278,Paul-Licameli,2022-07-25T13:55:01Z,"It's unclear what `GetProcessLevel` is supposed to report to the plug-in, but the legacy code in fact never returned anything but 1 because mProcessLevel is never changed.

I say move mProcessLevel into the Wrapper class and provide a default implementation to the non-pure virtual.  Maybe we will figure out the need for an override later.

"
928915400,3278,Paul-Licameli,2022-07-25T13:56:16Z,"I think the `void`-returning `SetBufferDelay` and `Automate` are meaningful only for instances.  Make default implementations that do nothing.  Override them in the instance.
"
928923914,3278,Paul-Licameli,2022-07-25T14:03:44Z,"Hm, making `Automate` an override in the instance requires the array of slaves, which should move to the instance, but you can't really to that completely until step 5.

I suggest, construct the Instance with a reference to the array in the Effect, to complete step 4.  But then step 5 moves mSlaves into the instance.
"
928927838,3278,Paul-Licameli,2022-07-25T14:07:22Z,"Last comment for this round of review!

This definition of `GetLatencyB` seems weird to me.  I think you do it because the `SetBufferDelay` virtual function must be defined for all Wrappers.  But I say again, make it non-pure and let it do nothing in the base class.  Let the Instance override it properly.  Then, that leaves no need to move the two data members into the wrapper.  They belong in the Instance only.


"
928929153,3278,Paul-Licameli,2022-07-25T14:08:30Z,"Ah, one more comment.  Honestly the last.

I don't think this function is necessary.
"
929017250,3278,pietro68,2022-07-25T15:27:06Z,"ok, done"
929084842,3278,pietro68,2022-07-25T16:35:37Z,"ok, done"
929095502,3278,pietro68,2022-07-25T16:47:52Z,"ok, done"
929219542,3278,pietro68,2022-07-25T19:20:21Z,"Automate also references mMaster, so to have it a member of the instance, I had to move it to the wrapper.

I think I implemented all your suggestions here? please check commit ""4.3 Implement some virtuals in the instance"""
929229108,3278,pietro68,2022-07-25T19:32:57Z,"That's right, I could add the PluginPath as an arg to the Instance constructor. Done in commit 4.4"
929823312,3278,Paul-Licameli,2022-07-26T10:59:05Z,"This call within `Unload` is unnecessary.

"
929832062,3278,Paul-Licameli,2022-07-26T11:08:54Z,"This too is unnecessary.
"
929838102,3278,pietro68,2022-07-26T11:14:34Z,"I commited part of your suggestion in 4.5. `mUseLatency` can not be moved to the instance, because it is referenced by `VSTEffect::ShowOptions` - any idea on how to solve that?"
929843308,3278,Paul-Licameli,2022-07-26T11:20:58Z,"You did not remove `GetLatencyB` or undo the move of the two data members `mUseLatency`, `mBufferDelay`"
929844691,3278,Paul-Licameli,2022-07-26T11:22:40Z,"If you examine how mMaster is used, it's really just a boolean that is true when an instance (a VSTEffect) is NOT the master.
"
929845571,3278,Paul-Licameli,2022-07-26T11:23:49Z,"You need mMaster in Automate, but the wrapper has a no-op override of Audomate, so there should be no need to put mMaster in the Wrapper.  You also moved mTimeInfo into the Wrapper but it should be in the Instane.
"
929861858,3278,Paul-Licameli,2022-07-26T11:43:17Z,"Just duplicate that boolean in the instance.  Make it a constructor argument.
"
929965233,3278,pietro68,2022-07-26T13:28:23Z,"> You need mMaster in Automate, but the wrapper has a no-op override of Automate, so there should be no need to put mMaster in the Wrapper.

but `mMaster` is set and used in 3 different `VSTEffect` methods - that's why I put it in the wrapper. I probably could rework the code in a way that `VSTEffect` does not need it anymore, but I'd leave that for later

"
929969259,3278,pietro68,2022-07-26T13:31:46Z,"> You also moved mTimeInfo into the Wrapper but it should be in the Instance.

`mTimeInfo` is again written/used in different methods of `VSTEffect`. Should I figure out how to move these uses of it from `VSTEffect` to `VSTEffectInstance` as part of step 4?

"
930042679,3278,pietro68,2022-07-26T14:32:49Z,"Now implemented in commit 4.6: I moved `mUseLatency` and `mBufferDelay` in the instance, leaving a copy of `mUseLatency` in the Effect class which is passed to the instance at construction time."
930049704,3278,pietro68,2022-07-26T14:38:17Z,"ok, removed"
930049889,3278,pietro68,2022-07-26T14:38:25Z,"ok, removed"
931625588,3278,Paul-Licameli,2022-07-27T22:17:35Z,"Please do an interactive rebase, squashing this commit onto the second one, so that all commits are buildable.
"
932072268,3278,pietro68,2022-07-28T10:51:52Z,"ok, now done and force-pushed"
932073188,3278,pietro68,2022-07-28T10:52:55Z,"oops I should delete the ""build fix for OSx"" commit - it's only whitespaces now"
934373560,3278,Paul-Licameli,2022-08-01T10:22:32Z,"I just noticed in review today, the omission of `virtual` from this destructor, though there are other virtual functions.

It might look nicer to add it.  It's not in fact important, so long as there are never yet any unique or shared pointers to a VSTEffectWrapper.
"
934374964,3278,Paul-Licameli,2022-08-01T10:24:16Z,"The minimal validator class doesn't yet appear to be necessary for the VST2 transformation, unlike the case for AudioUnits and VST3.  But no harm in keeping the commit that adds it.
"
934390914,3278,Paul-Licameli,2022-08-01T10:44:47Z,"It is not necessary to move these two into the Wrapper and I think they will eventually be in the Instance.
"
934392244,3278,Paul-Licameli,2022-08-01T10:46:28Z,"The existing `StatefulEffect` class might also serve the purpose
"
934393090,3278,Paul-Licameli,2022-08-01T10:47:37Z,"The `#include` at top of the file can now be `PerTrackEffect.h`, not needing the stateful subclass
"
934397810,3278,Paul-Licameli,2022-08-01T10:53:59Z,"An earlier version of this PR copied mUseLatency into the Instance in its constructor.  That change should remain.

What I should have said too:  the block size, and the user block size, should also be passed into the constructor of the instance.

Also the array of slaves used to be passed as a reference into the constructor.  Why no longer?  Do that too.

"
934402106,3278,Paul-Licameli,2022-08-01T10:59:29Z,"I don't like `DoProcessFinalize`, `DoProcessInitialize`, or `ProcessBlockB`.  Too much is stil being done in the wrapper class, and therefore the Effect still has more state that it should.  The purpose of this PR should be to remove as much effect state as possible, identifying the parts that should be per-instance state.

And I think the reason you thought you needed this is:  you let the slaves remain VSTEffect objects, and did not change the type of the slaves to be VSTEffectInstance.  But you can do this.

The array of slaves remains temporarily in the Effect, until step 5 is done.  But the virtual functions needed in the slaves are only `ProcessFinalize` and `ProcessBlock`, now in the Instance class, and other functions already in the Wrapper.
"
934403493,3278,Paul-Licameli,2022-08-01T11:01:18Z,"I would prefer to have these virtual functions defined non-inline, with comments inside the class about what they do (which is mostly nothing)
"
934407047,3278,Paul-Licameli,2022-08-01T11:06:00Z,"This function should be marked `override` and its definition should be non-inline
"
934443631,3278,Paul-Licameli,2022-08-01T11:53:56Z,"If all is done right, `DoMakeInstance` and the `const_cast` should no longer be needed.
`mUseLatency` and `mUserBlockSize` don't need to be member variables of the effect.  They can become local variables of this function.  But then they must be passed to the constructo of Instance which stores them.

But this may need to wait until step 5.
"
935610976,3278,pietro68,2022-08-02T13:41:00Z,Correct. Now moved back in the effect.
935618589,3278,pietro68,2022-08-02T13:47:25Z,"Hmm... `StatefulEffect` does not inherit `PerTrackEffect` though. I gave it a try anyway, and I got compiler errors. Never mind, this is only a temporary class that should disappear at point 5."
935629969,3278,pietro68,2022-08-02T13:56:51Z,"ok, done"
935638171,3278,pietro68,2022-08-02T14:03:30Z,"mUseLatency, block size, user block size are now passed into the constructor of the instance and saved there.

I chose not to pass the array of slaves into the Instance constructor, because I now turned slaves from effects into instances - given that, it seems conceptually wrong that an instance should be interested in all other instances."
935639151,3278,pietro68,2022-08-02T14:04:26Z,"I now implemented the ""middle class"" VstInstanceBase as we discussed, please have a look there."
935639803,3278,pietro68,2022-08-02T14:05:02Z,I made them inline now.
935643373,3278,pietro68,2022-08-02T14:08:11Z,"ok, done"
935644368,3278,pietro68,2022-08-02T14:09:04Z,"I now pass them to the Instance constructor. As you said, later in step 5. I could remove them from the effect."
935685405,3278,pietro68,2022-08-02T14:43:03Z,"Well actually at this point I need it, because I pass the instance it belongs to in its constructor, to retrieve it later in ::ShowClientInterface"
935691503,3278,Paul-Licameli,2022-08-02T14:48:02Z,"I do not yet see a force-push with that update
"
943325912,3278,Paul-Licameli,2022-08-11T10:20:53Z,"This is the one virtual function of `VSTEffectWrapper` that we can define in the base and then not override again, or so we think now.

So the first commit might also remove `VSTEffect::GetProcessLevel()`
"
943357199,3278,Paul-Licameli,2022-08-11T11:02:32Z,"Is this part of the comment still correct?
"
943372086,3278,Paul-Licameli,2022-08-11T11:22:56Z,"I did not mention this before, but if you look for the analogous uses of `StoreSettings` on AudioUnit instances, one of them happens here.  And `StoreSettings` now happened here too, because `ProcessInitialize` did it next.

Call `ProcessInitialize` not `DoProcessInitialize` below; remove the duplicate steps above (beginning and end of set-program and what comes between, and also the storing of chunks).
"
943385375,3278,Paul-Licameli,2022-08-11T11:40:36Z,"Automate() is changed to use `callSetParameterB`, losing the loop over slaves.  That seems like a wrong change in side-effects.

You should call `callSetParameter`.   But that doesn't exist in `VSTInstanceBase`.

The fix should then be:  move Automate() to the Instance class in step 4, which is what the header file says should happen.

Also move `callSetParameter` (which includes the loop) into Instance, out of the Effect object.

But then `VSTEffect::OnSlider` won't compile.  But the solution for that will be, the Validator object will call `callSetParameter` on the Instance.  That function will ultimately be in the validator.

So make this temporary fix here in step 4:  Let the Effect retain a pointer to the last constructed Validator.  Assume there is never more than one Valdator at once and that its lifetime will include any call to `OnSlider`, which will happen only while a non-fancy, plain UI dialog is open.

"
943390744,3278,Paul-Licameli,2022-08-11T11:47:19Z,"Can the distinction between `callSetProgram` and `callSetProgramB` now be eliminated?  I think so, but it needs some longer explanation from me.
"
943418946,3278,Paul-Licameli,2022-08-11T12:21:18Z,"I think there is no longer any need to make `DoProcessFinalize` a separate function.
"
943428303,3278,Paul-Licameli,2022-08-11T12:31:21Z,"Do not do this.

We don't want to do mutex locking and unlocking in a worker thread.

We will trust `settings` to be a copy of settings, properly updated in an atomic fashion, by the `EffectSettingsAccess` object.

Yes, strictly speaking you are right that a data race on the `VSTEffectSettings` stored in the effect, is possible while the transition to statelessness is not complete, and you might remove this mutex locking then.

But I think that is excessive caution.  I didn't transform AudioUnit effects with similar caution and I don't recommend you do it for VST.


"
943431694,3278,Paul-Licameli,2022-08-11T12:34:58Z,"Your step 5.1 removes these lines.  I already explained how it should be done in step 4, eliminating the need for two versions of the set-parameter function.
"
943435828,3278,Paul-Licameli,2022-08-11T12:39:19Z,"You made these changes in 5.1.  I don't like the mutex.

Does experiment show that this is called on the main thread only in response to slider changes?

I need the answer to that, before I can recommend the correct thing  to do.
"
943440357,3278,Paul-Licameli,2022-08-11T12:43:55Z,"There is nothing in the instance now corresponding to `Process`.  Instead you trust `PerTrackEffect` to do destructive effect processing in its `Process`, calling the `ProcessBlock` function of the instance.  And after other recent refactorings, that happens in member functions of an `EffectStage` object.
"
943447380,3278,Paul-Licameli,2022-08-11T12:51:16Z,"I think step 5.3 makes more sense squashed with step 4
"
943450530,3278,Paul-Licameli,2022-08-11T12:54:29Z,"This change might be squashed onto step 4, making 4 more correct
"
943455507,3278,Paul-Licameli,2022-08-11T12:59:27Z,"More experience tells you that the division of responsibilities between instance and effect should change.

Redo the earliest commits to reflect this.

So I think you are saying Automate really is for the main thread only?
"
943518826,3278,pietro68,2022-08-11T13:57:50Z,"Removing it at this stage is not so simple, because DoProcessFinalize is in VSTInstanceBase and it is used by VSTEffect; but VSTEffect does not know VSTEffectInstance... we'd need to wait until step 5"
945551468,3278,pietro68,2022-08-15T09:10:50Z,OK done that in commit 4.2 (yet to be pushed while I am writing this) - you will see that to make it work I also had to add a call to `FetchSettings` inside `Automate`.
945572258,3278,pietro68,2022-08-15T09:43:00Z,"The short answer is: not, when doing realtime processing, at least at this stage (I mean, step 4)

Why? I tried the following: 
1) place breakpoint in CallSetProgram
2) choose a factory preset: when we reach CallSetProgram, mSlaves is empty

So if we did only destructive processing, then we could go with callSetProgramB only (i.e. the version which ignores slaves)

but:
if I start realtime processing and then choose a factory preset, when I reach callSetProgram, mSlaves is not empty - it has one item and I guess it is the item doing the realtime processing."
945847407,3278,pietro68,2022-08-15T15:04:12Z,"I was wrong when I said that Automate has to belong to the instance. 
It must indeed belong to the Effect, because changes in sliders are intercepted by the Effect vst callback.

That being said, yes it is still wrong that Automate() loses the loop over slaves. In commit 4.3 I fix that by having Automate use callSetParameter and that required that mInstances move to the instancebase class. 
"
946051875,3278,pietro68,2022-08-15T19:18:56Z,"As I told you during our talk, without introducing this mutex, I always ran into a crash when I moved a slider while processing realtime. This is because mSettings was written in the main thread (when moving the slider), while it was read in the worker thread. 
But I will add a comment about the mutex being a temporary thing until the validator is fully implemented."
946052670,3278,pietro68,2022-08-15T19:20:08Z,Please see my comment above https://github.com/audacity/audacity/pull/3278#discussion_r946051875
946085934,3278,pietro68,2022-08-15T20:09:27Z,"Ok, done in commit 4.5"
946843636,3278,pietro68,2022-08-16T14:22:32Z,ok
951888329,3278,Paul-Licameli,2022-08-22T20:36:18Z,"""Validator""
"
951909361,3278,Paul-Licameli,2022-08-22T21:01:22Z,"Step 5.1 adds this assignment, but never uses the member, and never reassigns it back to null.  But I'm still progressing through the 5.x commits, which may be squashed into one if I approve them.
"
952310838,3278,pietro68,2022-08-23T08:27:38Z,ok
952325909,3278,pietro68,2022-08-23T08:41:41Z,"Correct. I introduced `mValidator` as a way to call `callSetParameter` on the Validator's instance, in `::OnSlider`, as you previously suggested (or so I understood). Then I found out that things work also without that call (and I left the code there commented out) so I could delete `mValidator` now. Shall I do it?"
952394641,3278,Paul-Licameli,2022-08-23T09:44:57Z,"In step 5.3, add:
`subeffect.Load()`
to preserve the behavior.
"
952408298,3278,Paul-Licameli,2022-08-23T09:58:28Z,"In step 5.4, think `PowerOn` and `PowerOff` should not move to Wrapper.  They are only for the Instance.

Power comes ON, only in an instance.  Note `vstEffInstance.PowerOn()` -- it's not done on This.

But there are calls to `PowerOff` done on the Effect.

The right thing is to change those.

Where `CloseUI` does `PowerOff`, do it instead to the Instance stored in the Validator.  Which is why `VSTEffect::mValidator` finds a use after all.

Als in `CloseUI`, reassign `mValidator` to null when done.

The `PowerOff()` in the unloading of the effect should just be deleted.


"
952410181,3278,pietro68,2022-08-23T10:00:22Z,Good catch! ok
860817187,2867,Paul-Licameli,2022-04-28T12:14:09Z,"This changes the format for the monolithic ""sprite sheet"" for dropping in a custom theme.  After merging this we must remember to give @LWinterberg the updated sheet to put in the Wiki page.  If more changes to this file are expected during this release cycle, then that can wait until they are all done.

"
860820331,2867,Paul-Licameli,2022-04-28T12:18:03Z,"""which simplify""
"
860825525,2867,Paul-Licameli,2022-04-28T12:24:10Z,"You include this for `EVT_THEME_CHANGE` and not `PrefsPanel`?

As you might have guessed, that is a usage of wxEvent that I would rather simplify with Observer.

In fact, I have a commit waiting in my big branch of module extractions doing just that.

I should cherry-pick it, and push it onto your branch, and let you merge it with this branch.

"
860830707,2867,Paul-Licameli,2022-04-28T12:30:14Z,"Perhaps say ""which decorate given base classes with simplified theme support""

This is sort of a ""decorator pattern"" only it inserts behavior with inheritance, not object composition.
"
860834913,2867,Paul-Licameli,2022-04-28T12:34:48Z,"I'm more hesitant about using `noexcept` liberally.  I saw a CppCon talk by John Lakos describing reasons for caution.  I need to review it again.  I mostly use it only when I know something must be called inside a destructor.

I look at this and I see it doesn't have a bounds check on the array access.
"
860836592,2867,Paul-Licameli,2022-04-28T12:36:39Z,"Given that the index is in bounds (might say it with a `@pre` comment), should this return a reference to a guaranteed non-null object?  Perhaps.  But maybe warn too about invalidation in case states are added or removed."
860837463,2867,Paul-Licameli,2022-04-28T12:37:39Z,"Use `std::rotate` to simplify this
"
860839214,2867,Paul-Licameli,2022-04-28T12:39:26Z,"And because this does all that `Swap` can do, and more -- then remove `Swap`
"
860842206,2867,Paul-Licameli,2022-04-28T12:42:33Z,"Failing linux build wants (at least) `#include <memory>`
"
860848516,2867,Paul-Licameli,2022-04-28T12:49:02Z,"Good comment, saying what they types don't alone imply
"
860853746,2867,Paul-Licameli,2022-04-28T12:54:20Z,"Please put this new file pair directly into `src` not `src/widgets`

The sub-folder division of `src` was never really ever done on any consistent principle, whereas the coming modularization will only move files again.

The seeming intention of `src/widgets` is for reusable, and reused, windows like `Ruler` but this looks like it will only ever have one use, closely associated with ProjectWindow.

"
860881143,2867,Paul-Licameli,2022-04-28T13:21:03Z,"`#include <wx/dcclient.h>` needed to build non-Windows
"
860890600,2867,Paul-Licameli,2022-04-28T13:29:44Z,"Just default it?
"
860976273,2867,Paul-Licameli,2022-04-28T14:41:12Z,"`name` is not used
"
860978214,2867,Paul-Licameli,2022-04-28T14:42:56Z,"Maybe you will want to set the window name, for reasons of the screen reader, if perhaps these things can be tabbed to -- talk to @DavidBailes about it.  In fact, accessibility for this new UI might need to be another issue with another PR, involving wxAccessible classes -- but I don't want to delay merge of this one for that.
"
861071667,2867,Paul-Licameli,2022-04-28T16:05:12Z,"Proof?

If none, make a `@pre` comment to license it, but then examine the calls to this function , where the burden of proof is then shifted."
861072688,2867,Paul-Licameli,2022-04-28T16:06:22Z,"As I said elsewhere, what you assert here, should also be an explicitly commented precondition of the function called here."
861080679,2867,Paul-Licameli,2022-04-28T16:14:39Z,"Or else, just return and do nothing if the condition fails.  Other event handlers here do that."
861084877,2867,Paul-Licameli,2022-04-28T16:18:57Z,Do you need a null check on the return value?
861091914,2867,Paul-Licameli,2022-04-28T16:26:38Z,"Another assumption of non-null ness, prove how?"
861098456,2867,Paul-Licameli,2022-04-28T16:33:46Z,Assuming not null again as at 374
861126575,2867,Paul-Licameli,2022-04-28T17:05:33Z,A future PR?
861128339,2867,Paul-Licameli,2022-04-28T17:07:51Z,Might simplify with comparison of two std::pairs?
861129183,2867,Paul-Licameli,2022-04-28T17:08:51Z," Correct filer by real-time capability, ok"
861129419,2867,Paul-Licameli,2022-04-28T17:09:08Z,Filter
861130866,2867,Paul-Licameli,2022-04-28T17:10:55Z,Quadratic insertion sort instead of n log n std::sort? Shrug
861133308,2867,Paul-Licameli,2022-04-28T17:14:06Z,I imagine different sorting and grouping criteria might be future demands.  Do what now?  Nothing but think about it
861134236,2867,Paul-Licameli,2022-04-28T17:15:23Z,And?
861136261,2867,Paul-Licameli,2022-04-28T17:17:50Z,"Can the return type of this function be Identifier then, not naked wxString?"
861137058,2867,Paul-Licameli,2022-04-28T17:18:53Z,Indent
861401952,2867,Paul-Licameli,2022-04-29T00:44:58Z,"An alternative possibility:  Don't define this event.  Don't post it from RealtimeEffectControl.

Instead, make the RealtimeEffectList a `Publisher` of messages when its item list changes -- analogous to what TrackList does.  (Don't delay events with CallAfter as TrackList does for legacy reasons.  Let listeners CallAfter to delay their reactions as they need.)

Then the RealtimeEffectsWindow subscribes.

This way of doing it is more consistent with existing designs and would allow other subscribers if we ever need them, which won't need to cooperate specially with RealtimeEffectControl.

"
861402675,2867,Paul-Licameli,2022-04-29T00:48:03Z,I like this solution better for the possible future expansions.  But you can do just enough for present needs:  let the list publish only deletions.  We might generalize for additions and permutations later.
861404043,2867,Paul-Licameli,2022-04-29T00:53:33Z,"For these other event types, closer coupling of this window and the item controls is proper."
861417115,2867,Paul-Licameli,2022-04-29T01:49:12Z,"Good, now also state it as a postcondition comment for `AddState`"
861421048,2867,Paul-Licameli,2022-04-29T02:07:03Z,"I see now that there is a serious problem in this design.

There should be undo and redo of changes to the effect list.  This is not yet part of this pull request.  I anticipated the need at commit 5da76c6eae0aceb1823be43bcb9009aa20ead755 with some support.

If this window persists through pushes and pops of the undo stack, then storing this pointer is the wrong thing.  It might point into a version of the state that is in undo history but not the present project state, and it might become a dangling pointer if redo states are destroyed after an undo and then other edits.

Should the parent window just rebuild itself entirely whenever the undo stack is pushed or popped?  Maybe that's easiest to do.  Just subscribe to events from UndoManager.

In fact, you don't have a choice.  If you can't predict at all how the composition of the RealtimeEffectList changes with undo or redo, you just have to read it all and rebuild.

Okay, that eliminates the dangling pointer danger."
861421643,2867,Paul-Licameli,2022-04-29T02:09:42Z,"I see uses of `Translation` here and elsewhere when building buttons.  That means one of these windows should be a `PrefsListener` and recreate those labels, in case the user changes the language in Interface preferences."
861421997,2867,Paul-Licameli,2022-04-29T02:11:15Z,"This side-effect on the effect list should cause a push of the Undo history.  See my previous comment mentioning Undo/Redo matters.
"
861422173,2867,Paul-Licameli,2022-04-29T02:12:02Z,"This too needs an Undo push.
"
861422400,2867,Paul-Licameli,2022-04-29T02:13:01Z,"And here, another Undo push.
"
861422807,2867,Paul-Licameli,2022-04-29T02:14:50Z,"What I said there:  the list window needs to subscribe to the UndoManager so it can rebuild after undo and redo commands that might change the current list of effects, to avoid pointers into the wrong version of the RealtimeEffectList.

"
861425681,2867,Paul-Licameli,2022-04-29T02:28:20Z,"I see no callback bound to this toggle button.  Maybe bind an empty lambda with one more explicit TODO comment, like other TODOs in this commit.

"
861426747,2867,Paul-Licameli,2022-04-29T02:33:10Z,"Let's also have an `else` and another TODO comment in case of other IDs, so one effect can replace another.  Let's make as many TODOs as we can to make clear how much work remains.
"
861431754,2867,Paul-Licameli,2022-04-29T02:54:40Z,"Still more Undo stack pushes are needed, for changes of settings in an effect stack.

But this doesn't work -- as you may have known from testing.  I think it was something you needed to discuss with me, but didn't find the opportunity?

It doesn't work because for realtime capable effects, a non-modal dialog is opened, and ModifySettings exits before the dialog closes.

Maybe then, the individual effect has other ModifySettings calls in its event handlers, so it sort-of works.  But not as you might expect from reading this code, and it won't interact correctly with undo and redo.

How to fix this then?  See the example of `EffectManager::PromptUser` and `MacroCommands::PromptForParamsFor` which calls it, while inside this scope object's lifetime:

```
   auto cleanup = EffectManager::Get().SetBatchProcessing(ID);
```

That forces effect dialogs to open modally, even for realtime effects, if you are editing a macro, which is how you can step through those functions and understand.

But they change the global EffectSettings for the effect, which is of course not the right thing here.

"
861433554,2867,Paul-Licameli,2022-04-29T03:02:47Z,"Another question to ask is whether all these things requiring pushes and pops of the undo stack are safe to do while playback is in progress.

I think we surely want that -- one hope is that you listen as you change settings of a single effect, or even change the composition of the effect list.  But now I doubt whether all is set up correctly in the audio engine for that, both to avoid dangling pointers and crashes, and to communicate changes of the sequence of effects properly inter-thread.

The limited thing that I know was anticipated by Leland's work, is the powering on and off of individual effects, which is what the suspending and resuming of states is for.

And the point of the EffectSettingsAccess class I developed is to communicate changes of settings of an individual effect correctly -- what this piece of code here will do.

But adding, deleting, and permuting effects?  Or changing the whole stack at one with undo and redo?

I must think.

"
861441863,2867,Paul-Licameli,2022-04-29T03:38:49Z,"I see what this subscription is doing and I understand why you need something like it.

I question whether this is exactly what we will want.  First, sometimes multiple tracks are selected, as when you select all.  This might, wastefully, visit this function once for each track, rebuilding the window many times, and finally leaving it as for the last selected track.

Would it be better to scan the track list for a unique selected track -- and empty the effect list if there is no such track?

But then -- as I pointed out long ago, critiquing the design proposals -- there is a distinction between selection, which is non-exclusive, and focus (indicated by the yellow border), which is.

I think it makes more sense to show the effect stack for the focused track, which means you should listen for what is now the `EVT_TRACK_FOCUS_CHANGE` event (but, like theme change, ANOTHER thing I want to rewrite with Observer, and I also have a waiting commit for that, which I can cherry-pick and push onto your branch).

@DavidBailes will surely want to test this new feature and be satisfied with keystroke navigation, and again, the notion of a ""focused"" object, rather than a ""selected"" one, is in general relevant to the targeting of commands given by keystroke.  See for instance `OnTrackMenu` in `TrackMenus.cpp` which handles Shift+M in default key bindings.  That keyboard shortcut opens the track drop-down menu for the (unique) *focused*, not selected, track.


"
861648672,2867,DavidBailes,2022-04-29T09:39:25Z,"> @DavidBailes will surely want to test this new feature and be satisfied with keystroke navigation

Is there a current design specification for the effects panel which includes the keyboard navigation? I have asked this question on https://github.com/audacity/audacity/issues/2845, but have not yet received a reply.

Concerning whether the effects panel show the effects stack for the focused or selected track. The normal pattern is for a side panel to show some property of a selected item in a list. However, I don't think it fits the current case. A user might want to look at the effect stack without changing which track or track was selected, and each audio track having its own effect button implies this. Note however, that when a user presses an effect button, then I presume the intention is that the focus is automatically moved to the effects panel. This means that the track is not the focus and won't have a yellow outline. Are the designers happy with that?

Concerning the list of effects in the Effects panel. When the figma designs of this were originally shared by Jouni, the keyboard navigation of the list of effects, including the controls in each item, was specified as just a series of tabs. I commented on discord at the time that it would be much better if the keyboard navigation was appropriate for a list. Unfortunately, nobody replied to that comment. It is still my view that the list of effects should have keyboard navigation which is appropriate for a list where each list item contains a number of controls, and in addition, the list is read as being a list by users of screen readers. Given that these requirements have implications for how the code for the list is structured, first writing it so that works only with mouse interaction, and then ensuring that it works properly with keyboard interaction and screen readers will probably end up involving more work than if it was written with all types of interaction from the start."
861704031,2867,Paul-Licameli,2022-04-29T11:05:59Z,"Also possible:  the sidebar changes only if you press Effects on another track.  (Or delete that track)

The Effects button of that track only is painted as down.
"
874889410,2867,vsverchinsky,2022-05-17T14:27:03Z,Added a commetary and replaced pointer with reference type
874890343,2867,vsverchinsky,2022-05-17T14:27:38Z,"I'll skip it, as you've already done that"
874923721,2867,vsverchinsky,2022-05-17T14:52:44Z,"Perhaps, what is implemented is not what was asked in the task description actually."
874924172,2867,vsverchinsky,2022-05-17T14:53:05Z,There is no link yet)
875835230,2867,vsverchinsky,2022-05-18T12:31:49Z,"There is no much sense in doing so: `MovableControl` is a wxWidgets based component, Qt has it's own component drag&drop logic"
876172182,2867,Paul-Licameli,2022-05-18T17:39:51Z,"I do not understand your response.  I think you did not understand my objection.

Changes in the RealtimeEffectList — a UI neutral internal entity— should be published with our UI neutral Publisher class, as is also done for changes of the TrackList.  Then this new UI works more indirectly:  one drag and drop changes the RealtimrEffectList object, then it publishes its message, then the other control reacts.  But then it is also possible for other things that need to be kept consistent with the real-time effect list to react also.

I do not want to use Qt signals and slots outside of a UI layer of code built on a toolkit neutral layer.
"
878047364,2867,Paul-Licameli,2022-05-20T11:30:15Z,"You repeated ""message""
"
878048128,2867,Paul-Licameli,2022-05-20T11:31:18Z,"""number"" would be a better word than ""amount"" (for a count-noun, not a mass-noun)
"
878076191,2867,Paul-Licameli,2022-05-20T12:07:29Z,"Maybe `std::variant` is the more proper thing when the alternatives are not open-ended but instead all enumerated here :shrug:  To my mind, `std::any` is more appropriate where there is open-endedness (if, say, RealtimeEffectListMessage was the root of a class hierarchy)

Or simply make it a numerical field that is ignored for the other message types.
"
878089468,2867,Paul-Licameli,2022-05-20T12:25:23Z,"You need to update the text of labels and buttons for changes of language -- and deriving from `PrefsListener` is how that is done.

It is not sufficient to update the labels when the theme changes -- and I don't understand why it is necessary then either, but maybe I don't know.

Ah, but is it that the dismissing of the Preferences dialog coincidentally sends theme change and PrefsListener messages together, always?

So maybe this appears to work when you test change of language, but still I don't think it is done properly.  And who knows, we might invent a different UI for language change some day that doesn't have this coincidence.

"
878090547,2867,Paul-Licameli,2022-05-20T12:26:45Z,"See what was done in commit 20ace31
"
878106163,2867,Paul-Licameli,2022-05-20T12:45:51Z,"Please squash this and other compilation fixes into earlier commits
"
878108968,2867,Paul-Licameli,2022-05-20T12:49:15Z,"This breaks the macOS build.  Only the pointer-valued overload of `any_cast` is available, with our minimum targeted version.
"
878353711,2867,vsverchinsky,2022-05-20T16:53:20Z,">Ah, but is it that the dismissing of the Preferences dialog coincidentally sends theme change and PrefsListener messages together, always?

I didn't think it was a coincidence, as I understand making a change to a single parameter in a settings group (""interface"" or ""effects"") updates values for all parameters in that group"
879295413,2867,Paul-Licameli,2022-05-23T10:30:44Z,"i18n-hint comment does not match the string which has three format directives.
"
879297182,2867,Paul-Licameli,2022-05-23T10:32:44Z,"Should you add 1 to from and to?  Users may understand 1-based indices better.
"
879318802,2867,Paul-Licameli,2022-05-23T10:58:45Z,"The changes for undo and redo look good, though incomplete.  Replacement of one effect with another is not yet implemented and will also push an undo state.  Changing on/off states will use `ModifyState` not `PushState`.

Changing settings after clicking OK the settings dialog should also push an undo state.

The details of the short and long user visible messages for undo and redo may disagree with the specifictaion, but maybe the specification will be corrected.

None of what I just wrote here will block this pull request.
"
879324057,2867,Paul-Licameli,2022-05-23T11:05:16Z,"This pair of files is still in `src/widgets` and I would rather just put it under `src` pending other folder reorganizations later.
"
879354145,2867,Paul-Licameli,2022-05-23T11:37:56Z,"This still subscribes to selection change efents, but we have agreed that is should instead be focus changes.

Also I suggest that the effects window might subscribe itself rather than relying on `ProjectWindow` to make the changes.
"
879361713,2867,Paul-Licameli,2022-05-23T11:47:20Z,"""DropHintLineHeight""
"
879373586,2867,Paul-Licameli,2022-05-23T12:01:02Z,"I see that this call pops a menu and returns a plugin id which is ignored.  So it's still to do:  substitute one effect for another in the list, and also push an undo item.

This PR might be merged with this known incompleteness.  (Should have a TODO comment)
"
879386393,2867,Paul-Licameli,2022-05-23T12:16:09Z,"When the button is pressed to change the track whose effect list is shown -- then the track focus should also be changed to that track.
"
879585955,2867,Paul-Licameli,2022-05-23T15:22:49Z,"I tested this, and Undo/Redo did not have the desired effect, and I figured out why.

`mTrack` is a shared pointer, so there isn't a danger of a dangling pointer.  However, it must be reassigned when the undo state is pushed or popped, so that it points at a track in the current version of the track list.

See `Track::GetId()` for an identifier of a track across undo/redo states.  This window needs to store that ID, then find that ID again with each undo and redo.

It may also be necessary to `Refresh()` after `SetTrack()`.


"
879613557,2867,Paul-Licameli,2022-05-23T15:44:07Z,"Here and in `ReloadEffectList`, please check that the track is a WaveTrack before getting the `RealtimeEffectList`, just to avoid creation-on-demand of a useless, empty list in case the track is of non-wave type.
"
879754655,2867,vsverchinsky,2022-05-23T18:21:24Z,"Hm, seems like I've lost part of my changes during commit history rewrite
"
879918652,2867,vsverchinsky,2022-05-23T22:43:21Z,Thanks!
879936195,2867,vsverchinsky,2022-05-23T23:26:30Z,"But turns out this is not neccessary. `ProjectWindow` gets notification from `TrackFocus` about changed focus, and given that focus now points to a new track instance `RealtimeEffectPanel` updates anyway"
879938092,2867,vsverchinsky,2022-05-23T23:31:33Z,"Shouldn't be the case as if we do not show ""effects"" button for other types of tracks"
880259917,2867,Paul-Licameli,2022-05-24T09:10:29Z,But changing track focus using the up and down arrow keys is another way to change the contents of the sidebar.
880273742,2867,vsverchinsky,2022-05-24T09:23:58Z,"Didn't think of that, thanks. Check is already there"
880280498,2867,Paul-Licameli,2022-05-24T09:30:19Z,"Should it also call through to the base class’s UpdatePrefs?

I think yes in general, but it might call through to a pure virtual.  Which might be given a default do nothing implementation.  (Did you know that a pure virtual can have a definition but also remain pure?  Yes it can, so subclasses must define it to be constructible, while qualified calls to the function are also allowed.)"
880285622,2867,Paul-Licameli,2022-05-24T09:35:18Z,"Ditto.

Preference changes might be written to send messages like theme changes, but it was implemented this way with virtual functions before Observer existed.  That rewrite would eliminate the problem of missed call throughs but would be the bigger work now."
880317073,2867,Paul-Licameli,2022-05-24T10:06:53Z,"""an individual"""
880326434,2867,Paul-Licameli,2022-05-24T10:17:04Z,"I understand you need to repaint a track if effects are inserted or removed in its stack, because the button may need to change its appearance when the effect list becomes empty or becomes nonempty.

I do not see why you need to refresh the whole panel when there are changes in the global list of effects.

No harm would be done, but a needless repainting.
"
880340197,2867,Paul-Licameli,2022-05-24T10:32:48Z,"You also took this header file out of `src/widgets`

Actually I don't mind this file being in that folder, because it is more general-purpose and reusable.

I only wanted `RealtimeEffectPanel.h` to move out of it.

But this file can stay in `src` too
"
880341996,2867,Paul-Licameli,2022-05-24T10:34:54Z,"Will that line un-collapse the effects panel if it was hidden, whenever I use the up and down arrow keys?  Maybe not desirable if so.
"
880350123,2867,Paul-Licameli,2022-05-24T10:44:34Z,"Still misspelled 
"
880352516,2867,Paul-Licameli,2022-05-24T10:47:31Z,"were
"
880378065,2867,Paul-Licameli,2022-05-24T11:18:13Z,"I don't understand why you changed mProject to a `wxWeakRef` but still assume it is non-null anyway.

Is there any reason to think the project will ever be destroyed before the associated effects window?  Did your experiments suggest that is so?

See `ProjectManager::OnCloseWindow` where there is some care about the sequence of destruction of things.  But note the ProjectWindow is destroyed there (which should destroy its descendants), just before the last line which destroys the Project object.

So I think there is no need at all for wxWeakRef for safety.

"
880382503,2867,Paul-Licameli,2022-05-24T11:23:37Z,"See `RealtimeEffectList::HandleXMLEndTag` for some answer to your question.  Yes, there is a check on success of `GetEffect` at the time the project is reopened, which we can assume, I think, follows all plugin initializations at startup.  And I think there is then no way to insert an effect from a plug-in that does not exist.

But can a plug-in ever be un-loaded while the session continues?  I don't think that ever happens.  If it did, perhaps then more uses of Observer and subscriptions might let the RealtimeEffectLists update themselves, and they would
 further propagate `Publish`-ed messages to these windows."
880386351,2867,Paul-Licameli,2022-05-24T11:28:05Z,"ditto
"
880413080,2867,vsverchinsky,2022-05-24T11:57:42Z,">I don't understand why you changed mProject to a wxWeakRef but still assume it is non-null anyway.

Right, it does not make sense

>See ProjectManager::OnCloseWindow where there is some care about the sequence of destruction of things.

`wxWindow::Destroy` does not destroy window immediately, but I'm not sure about exact order of things happening after that."
880420187,2867,Paul-Licameli,2022-05-24T12:05:54Z,"""wxWidgets delays actual deletion of the window until all events have been processed, since otherwise there is the danger that events will be sent to a non-existent window.""

https://docs.wxwidgets.org/3.0/overview_windowdeletion.html

So maybe your precaution does make sense in event handlers, but it was not fully realized without adding the null checks

"
880423269,2867,vsverchinsky,2022-05-24T12:09:22Z,">See RealtimeEffectList::HandleXMLEndTag for some answer to your question

But it happens silently, without any warnings, isn't it?

>And I think there is then no way to insert an effect from a plug-in that does not exist.

If there was a warning, user could have decided to close the project, install plugin and reopen this project again. Also, it's not necessary to remove `RealtimeEffectState` if plugin which it refers to is missing. There might be something that indicates a faulty plugin in the stack. But this is more UI/UX question I guess. "
596395393,759,bitigchi,2021-03-17T21:28:29Z,"""%s hakkında"" olmalı"
596396976,759,bitigchi,2021-03-17T21:31:26Z,"Türkçede ""website"" diye bir kullanım yok, ""web sitesi"" doğru."
596397559,759,bitigchi,2021-03-17T21:32:33Z,"Ses bağlamında ""çıkış"" daha yaygın olarak kullanılıyor."
596398428,759,bitigchi,2021-03-17T21:34:16Z,"GUI üç sözcüğün kısaltması olduğu için büyük harfle yazılıyor, bu yüzden arayüzü büyük harfle yazmaya gerek yok. ""grafik arabirim"" olarak çevrilebilir."
596398705,759,bitigchi,2021-03-17T21:34:48Z,yapı
596398963,759,bitigchi,2021-03-17T21:35:17Z,bit
596399675,759,bitigchi,2021-03-17T21:36:34Z,"Bir önceki çeviri doğru, yeni çeviri tümüyle hatalı."
596400189,759,bitigchi,2021-03-17T21:37:22Z,Taramak daha düzgün bir çeviri.
596402279,759,bitigchi,2021-03-17T21:41:15Z,viki
596402752,759,bitigchi,2021-03-17T21:42:15Z,"Çeviri mantıkı hatalı, eski çeviri doğru."
596403203,759,bitigchi,2021-03-17T21:43:12Z,Eski çeviri doğru.
596403914,759,bitigchi,2021-03-17T21:44:37Z,Mümkün olduğunca soru edatı kullanılmalı.
596405013,759,bitigchi,2021-03-17T21:46:26Z,olmak Hatalı çeviri.
596406714,759,bitigchi,2021-03-17T21:49:41Z,İleti varken mesaj kullanılmamalı...
596407163,759,bitigchi,2021-03-17T21:50:30Z,Sesi olmalı
596407786,759,bitigchi,2021-03-17T21:51:45Z,hacim ne alaka? Ses düzeyinden söz ediyor burada.
596408185,759,bitigchi,2021-03-17T21:52:31Z,hacim?
596408395,759,bitigchi,2021-03-17T21:52:56Z,hacim?
596668573,759,bitigchi,2021-03-18T09:05:53Z,yüzde işaretinden sonra boşluk yok
596669805,759,bitigchi,2021-03-18T09:07:26Z,Ofseti
596671123,759,bitigchi,2021-03-18T09:09:12Z,Lin yerine doğ veya doğrusal
596671493,759,bitigchi,2021-03-18T09:09:45Z,Veri şuraya yazıldı:
596672297,759,bitigchi,2021-03-18T09:10:49Z,: eksik
596672877,759,bitigchi,2021-03-18T09:11:42Z,Davulu. Altta da aynı terim için tambur denmiş.
596673389,759,bitigchi,2021-03-18T09:12:24Z,tırnak işaretinden sonra ek gelirse boşlukla ayrılmaz
596674064,759,bitigchi,2021-03-18T09:13:22Z,Zayıf vuruşun MIDI perdesi
596677821,759,bitigchi,2021-03-18T09:18:20Z,"bazı yerlerde parça, bazı yerlerde iz kullanılmış. hangisi?"
596678334,759,bitigchi,2021-03-18T09:18:58Z,aşağıda çubuk varken çoğu yerde bar olarak çevrilmeden bırakılmış
596679401,759,bitigchi,2021-03-18T09:20:28Z,süzgeç varken neden filtre? aynı şey ve biri Türkçe
596680346,759,bitigchi,2021-03-18T09:21:45Z,-sXz eki neden ayrı? çift kanallı varken neden stereo?
596681199,759,bitigchi,2021-03-18T09:22:56Z,"çevirirken değişkenlere kesme işaretiyle ek getirilmez, değişkenin büyük ünlü uyumuna uyacağı garantisi yok."
596682016,759,bitigchi,2021-03-18T09:23:58Z,düzeyin nesi yanlış?
596683487,759,bitigchi,2021-03-18T09:25:52Z,"... varsa süren bir eylemi belirtir. ""Vuruşlar bulunuyor..."""
596685050,759,bitigchi,2021-03-18T09:27:49Z,vuruş varken ritim ne alaka? ritim rhythm yerine kullanılıyor zaten
596686345,759,bitigchi,2021-03-18T09:29:29Z,% burada yüzde işaretini değil de bir değişkeni belirtiyor olsa gerek. başa yazılması hatalı.
596687952,759,bitigchi,2021-03-18T09:31:35Z,sonunda as olduğu için başka bir ifade izliyor olsa gerek. Şunun gibi başla/bitir: daha yerinde olabilir. Programdan kontrol edilmeli.
596689332,759,bitigchi,2021-03-18T09:33:25Z,"Karartma anlaşılır değil. Sesi açarak gir, diğeri için sesi azaltarak çık vb. gibi terimler kullanılmalı."
596689764,759,bitigchi,2021-03-18T09:34:01Z,solma? karartma? hangisi?
596690121,759,bitigchi,2021-03-18T09:34:32Z,aşağıda belirttiğim gibi açma/azaltma en iyi karşılık fade için duruma göre
596690765,759,bitigchi,2021-03-18T09:35:23Z,"GNU Genel Kamu Lisansı, ikinci sürümün koşulları altında yayımlanmıştır."
596691979,759,bitigchi,2021-03-18T09:37:01Z,binlerce oktav
596692490,759,bitigchi,2021-03-18T09:37:38Z,santihertz
596693522,759,bitigchi,2021-03-18T09:39:03Z,"Command düğmesi olduğu gibi bırakılmalı, klavyelerin üzerinden aynen böyle yazıyor."
596694248,759,bitigchi,2021-03-18T09:40:02Z,çift kanallı'nın nesi yanlış?
596695029,759,bitigchi,2021-03-18T09:41:05Z,"bu bağlamda Türkçede tire kullanılmaz, böyle bir kural yok. ""Çoklu görünüm"""
596695915,759,bitigchi,2021-03-18T09:42:16Z,format kullanılmaya başlansa da biçim hala çok yaygın çevirilerde. değiştirilmesi için bir neden yok
596696329,759,bitigchi,2021-03-18T09:42:51Z,"artı çeviri hatalı. ""Örnek biçim değiştiriliyor"""
596696871,759,bitigchi,2021-03-18T09:43:38Z,doğru olan çeviriyi neden değiştiriyorsunuz?
596697689,759,bitigchi,2021-03-18T09:44:47Z,""" bin"" olarak çevrilmeli (boşluğa dikkat). Türkçede 10k diye bir kullanım yok."
596698065,759,bitigchi,2021-03-18T09:45:19Z,yanlış tire kullanımı...
596698653,759,bitigchi,2021-03-18T09:45:59Z,yanlış tire kullanımı
596699351,759,bitigchi,2021-03-18T09:46:54Z,kanal neden silindi?
596699857,759,bitigchi,2021-03-18T09:47:31Z,müzik ne alaka?
596837159,759,bitigchi,2021-03-18T12:51:23Z,"kısayol düğmeleri genelde öncelikli olarak türkçe karakter olmayan harflere atanır erişilebilirliği iyi olsun diye. her klavye düzeninde türkçe harf olmayabilir. ö, ü, ı, ş, ğ gibi karakterleri kullanmamak gerek."
596837746,759,bitigchi,2021-03-18T12:51:54Z,"s-expr türkçesi sembolik ifade, bu şekilde kullanılmalı"
596839239,759,bitigchi,2021-03-18T12:53:14Z,"""%s (%s, %s, %s, %s ve %s içerir)"""
596840893,759,bitigchi,2021-03-18T12:54:59Z,"yeni çeviri hatalı, eskisi doğru."
596841458,759,bitigchi,2021-03-18T12:55:44Z,"""%s"", Audacity yerine gelmeli, hatalı çeviri"
596842102,759,bitigchi,2021-03-18T12:56:39Z,"geniş zaman olmalı, ""içerir"""
596843187,759,bitigchi,2021-03-18T12:58:04Z,"""Hata ayıklama yapısı""

(derleme: compilation)"
596846233,759,bitigchi,2021-03-18T13:02:09Z,Yayın sürümü/yapısı daha doğru. Sürüm derlemesi anlam bakımından doğru; ancak kavramlar karışıyor.
596848144,759,bitigchi,2021-03-18T13:04:51Z,"Yeni çeviri hatalı, eskisi doğru. Scrub'a gidin bir anlam ifade etmiyor. Aramak da sözlük anlamı olarak doğru olsa da kavram olarak hatalı."
596849423,759,bitigchi,2021-03-18T13:06:28Z,"Audacity'yi yine de başlatmak istiyor musunuz?

Çevirirken kavramları çevirmeye sondan başlamak daha doğru. Özne burada Audacity."
596850423,759,bitigchi,2021-03-18T13:07:46Z,"ı ekinden önce boşluk gelmez, tırnak işaretine yanaşık kullanılır."
596850960,759,bitigchi,2021-03-18T13:08:26Z,Türkçe karaktere atanan kısayol
596851576,759,bitigchi,2021-03-18T13:09:17Z,Ses Başlatma Hatası (belirtisiz kullanım)
596853227,759,bitigchi,2021-03-18T13:11:27Z,"düzey yerine seviye kullanımı çeviriye pek fazla bir şey katmıyor, aksine Türkçe kökenli sözcük kullanımını azaltıyor. Lütfen Türkçe sözcüklerin kullanımını yaygınlaştıralım. Diğer örnekler için de geçerli."
596853969,759,bitigchi,2021-03-18T13:12:24Z,Hala yerine Hâlâ kullanabilirsiniz.
596854728,759,bitigchi,2021-03-18T13:13:28Z,Lütfen aygıt yerine cihaz kullanmayın.
596855743,759,bitigchi,2021-03-18T13:14:51Z,"Dosyadaki tüm ""hacim"" sözcüklerini aratıp ""ses düzeyi"" olarak değiştirin lütfen."
596856187,759,bitigchi,2021-03-18T13:15:23Z,Şu çıkışı destekler:
596856582,759,bitigchi,2021-03-18T13:15:48Z,Şu girişi destekler:
596857269,759,bitigchi,2021-03-18T13:16:40Z,At
596858133,759,bitigchi,2021-03-18T13:17:41Z,"""\""Evet\"" seçeneği, seçilen projeleri anında kalıcı olarak siler."""
596858639,759,bitigchi,2021-03-18T13:18:21Z,"Yeni çeviri hatalı, eskisi doğru"
596859625,759,bitigchi,2021-03-18T13:19:30Z,Tutarsız büyük harf kullanımı
596860036,759,bitigchi,2021-03-18T13:20:00Z,-yu gereksiz
596860362,759,bitigchi,2021-03-18T13:20:28Z,-yu gereksiz
596860932,759,bitigchi,2021-03-18T13:21:13Z,Parametresiz
596862012,759,bitigchi,2021-03-18T13:22:37Z,anlaşılamadı bu bağlamda doğru. batch için toplu iş olarak kullanılır genelde. tanınmadı doğrudan çeviri oluyor.
596862533,759,bitigchi,2021-03-18T13:23:15Z,türkçe karakterde kısayol
596862828,759,bitigchi,2021-03-18T13:23:40Z,Türkçe karakterde kısayol
596863186,759,bitigchi,2021-03-18T13:24:05Z,Türkçe karakterde kısayol
596863527,759,bitigchi,2021-03-18T13:24:32Z,Türkçe karakterde kısayol
959061547,3432,Paul-Licameli,2022-08-31T01:31:07Z,Don’t need second ‘#’
959061901,3432,Paul-Licameli,2022-08-31T01:32:03Z,"I prefer PRIVATE only before wxBase, otherwise allowing transitive dependencies"
959062976,3432,Paul-Licameli,2022-08-31T01:34:59Z,Sent
959063782,3432,Paul-Licameli,2022-08-31T01:37:09Z,Synchronously
959064213,3432,Paul-Licameli,2022-08-31T01:38:21Z,Completedhandler
959290855,3432,crsib,2022-08-31T08:13:28Z,"Yeah, I keep copying it :-("
959468199,3432,Paul-Licameli,2022-08-31T11:24:34Z,"A singleton object instead of a namespace for all these functions, but it is stateless, for now at least.  Will that need to change?  Will there ever be more than one ServiceConfig?

"
959469004,3432,Paul-Licameli,2022-08-31T11:25:30Z,"Or to be cuter
```
using std::chrono;
return 3s;
```"
959470426,3432,Paul-Licameli,2022-08-31T11:27:17Z,"I like seeing `string_view` and wish we could have C++20 soon, so we can also use `std::span` to pass ranges of constant data, instead of `const std::vector<T>&`, without some irrelevant allocator type as a template parameter."
959470973,3432,Paul-Licameli,2022-08-31T11:27:57Z,"I have build lib-cloud-audiocom and I want to understand all that is in it, and I begin here at the bottom of the dependency graph of files.
"
959480176,3432,Paul-Licameli,2022-08-31T11:39:02Z,"Incorrect comment
"
959484535,3432,Paul-Licameli,2022-08-31T11:44:16Z,"Perhaps overload 3 might express it more clearly: https://en.cppreference.com/w/cpp/algorithm/mismatch
"
959492329,3432,Paul-Licameli,2022-08-31T11:53:48Z,"That comment above makes me nervous.  `Observer.h` says `intended for single-threaded use only`.  Should you use `CallAfter` wherever you publish, and change the comment to say, ""Messages are received in the main thread in idle time"" ?
"
959493388,3432,crsib,2022-08-31T11:54:59Z,"No, I'd rather stop using Observer. "
959494211,3432,Paul-Licameli,2022-08-31T11:55:53Z,"Or, should there be mutual exclusion around all `Publish` calls?  What might stil happen is that a Subscription is destroyed concurrently with a publication.  That might not have bad consequences, but I would have to reexamine Observer.h to be sure of that.
"
959517551,3432,Paul-Licameli,2022-08-31T12:22:53Z,"What is this lock guard guarding?  Is it the static `refreshToken` ?

I also need to be convinced that you don't need a `std::recursive_mutex`.
"
959581678,3432,Paul-Licameli,2022-08-31T13:23:48Z,"I thought so... it is possible, though unlikely, that the two-argument overload of `AuthorizeRefreshToken` holds the mutex, and calls the other overload, which calls this function, which sets the lambda as the callback -- and this lambda may be called at once before `setRequestFinishedCallback` exists, making a self-deadlock.  But `recursive_mutex` would eliminate the possibility.
"
959607746,3432,Paul-Licameli,2022-08-31T13:45:54Z,"Shadowing of the static `refreshToken`
"
959630146,3432,Paul-Licameli,2022-08-31T14:04:44Z,"If it is stipulated in the header file as a precondition that all functions that may use this global are to be called in the main thread only then there is no need for mutexes to guard it and you can avoid the recursive mutex.  I think that is true from inspection of the entire PR, but not obvious.  The functions would be `ValidateAuth`, `HasRefreshToken`, `UnlinkAccount` "
959651506,3432,Paul-Licameli,2022-08-31T14:22:43Z,"This is equivalent to simply `!GetAccessToken().empty()`
"
959663393,3432,Paul-Licameli,2022-08-31T14:32:12Z,"Do you want to defend against a string the defines one of the arguments more than once?
"
959671306,3432,Paul-Licameli,2022-08-31T14:38:54Z,"`UnexpectedResponse`
"
959678525,3432,Paul-Licameli,2022-08-31T14:44:50Z,"I think this is more like a future than a promise?
"
959679362,3432,Paul-Licameli,2022-08-31T14:45:35Z,"If this is generally like `std::async`, then call the return object a future
"
959685049,3432,Paul-Licameli,2022-08-31T14:50:05Z,"incorrect comment
"
959687055,3432,Paul-Licameli,2022-08-31T14:51:45Z,"Four types recognized here, but only three in the enumeration in ServiceConfig.h?
I notice now, that enum is only for the return of `AudioFormat GetPreferredAudioFormat` and it's always the same.  Did you forget to define an `EnumSetting` to save it as a preference?
"
959692088,3432,Paul-Licameli,2022-08-31T14:56:00Z,"`move` doesn't help with `wxString`, but no harm.
"
959695952,3432,Paul-Licameli,2022-08-31T14:59:07Z,"Above four members can be `const`
"
959766579,3432,Paul-Licameli,2022-08-31T16:03:00Z,"What should happen in case this ""promise"" (or future) is destroyed before completion, without any calls to `Abort` or `DiscardResult` ?  It could be that `UploadOperation` still occupies some resources unnecessarily because `mAborted` isn't true.

Should `UploadPromise` call `Abort()` in its detructor if not completed?  What are you crazy?  That would be a pure virtual function call!  The base class can't do that...
"
959772546,3432,Paul-Licameli,2022-08-31T16:08:59Z,"... so instead, the destructor of the concrete class could guarantee that one of completion, abort, or discard has happened, and then the lambdas should capture weak, not strong, references to self.

I think this would make better RAII guarantees on the main thread.  The ""leak"" in case there is no explicit abort on the main thread isn't until program exit, but it could mean the other thread works longer than needed before stopping.



"
959773507,3432,Paul-Licameli,2022-08-31T16:10:01Z,"What does ""S3"" abbreviate?
"
959775627,3432,crsib,2022-08-31T16:12:08Z,"Well, it kinda means S3 (or Simple Storage Service, but I doubt anyone calls it that). It's a somewhat standard protocol for object storages. 

https://aws.amazon.com/s3/ "
959783108,3432,crsib,2022-08-31T16:19:43Z,"This will complicate the code. Abort is not synchronous and I don't see much reason to change that (although it is achievable). Passing weak pointers will additionally increase complexity of the implementation.

Right now Promise (or future, or operation) outlives the dialog at most until lubcurl invokes any of it's callbacks. Making Abort synchronous would basically just delay the dialog closing for that specific time. I do not, however, like the idea for blocking UI thread for such reasons. "
959783533,3432,Paul-Licameli,2022-08-31T16:20:06Z,"I checked to see what would happen if a nonexisted file was given.

`AddFile` throws a `SimpleMessageBoxException`.

But we get here on a worker thread, right?  Is it safe to do that?  There will be a `CallAfter` that pops up the dialog, no problem, but is there a `catch` above us here?

If not, should there be a `GuardedCall`?

Do we need to guard any other calls into `lib-network-manager`?

"
959786529,3432,crsib,2022-08-31T16:22:52Z,The file existence is checked on the main thread first. But I will improve safety here anyway. 
959786813,3432,Paul-Licameli,2022-08-31T16:23:12Z,"> No, I'd rather stop using Observer.

You don't like `Observer` for other reasons, or you were thinking of the same thread safety question?

I got as far as finishing a review of `UploadService` where I see you define another message type but do not use `Observer`.

I must review `UserService` and that will complete a review of this commit.  Still leaving several other commits.
"
959789106,3432,crsib,2022-08-31T16:25:33Z,"However, I've thought of solution that will make both of us happier! :-)"
959789571,3432,Paul-Licameli,2022-08-31T16:26:04Z,"Did I misunderstand the intended context of use of this, then?

Is there going to be a non-modal dialog in Audacity giving an interface that lets the user abort the operation?  Or will that be on a web page only?
"
959791151,3432,Paul-Licameli,2022-08-31T16:27:38Z,"It's good for a class at a lower level not to make too-strong assumptions, or else, to make those assumptions explicit in comments in the header.
"
959792885,3432,crsib,2022-08-31T16:29:36Z,"There is a modal dialog in Audacity that calls Abort when closing, if the promise was not fulfilled. "
959795660,3432,crsib,2022-08-31T16:32:34Z,"This is private class. The file existence is checked by a public ""factory"" class before the object of this class is  created. There is a subtle chance that the file will be deleted while we are waiting to get here, so I will improve the exception guarantees at this specific point."
959796069,3432,crsib,2022-08-31T16:33:01Z,"This class is not even listed in a header, to be fair. "
959806839,3432,Paul-Licameli,2022-08-31T16:44:41Z,"This is the safe, main-thread publishing done my UserService."
959807533,3432,Paul-Licameli,2022-08-31T16:45:23Z,"But this is the unsafe subscription to OAuthService which will be rewritten.  Correct?
"
959815581,3432,Paul-Licameli,2022-08-31T16:54:02Z,"Perhaps the string literals given to `setHeader` should be named constants to avoid repetition of them within this new library.
"
960497941,3432,Paul-Licameli,2022-09-01T10:47:43Z,"You understand that `SetName` affects audible screen reader output?
"
960510189,3432,crsib,2022-09-01T11:02:32Z,"Yes, that is the reason for SetName here"
960515841,3432,Paul-Licameli,2022-09-01T11:06:30Z,"This commit reminds me that I turn off wavpack in my local build because for some reason I never got it to work.  `wavpack/wavpack.h` can't be found.
"
960518007,3432,Paul-Licameli,2022-09-01T11:07:40Z,"If I choose `system` not `local` for `audacity_use_wavpack` it doesn't even configure.
"
960519798,3432,crsib,2022-09-01T11:09:44Z,"I'm not sure why it should. Do you have a system version of wavpack installed?

>This commit reminds me that I turn off wavpack in my local build because for some reason I never got it to work. wavpack/wavpack.h can't be found.

I was sure that we have overcame this problem by dropping your Conan cache."
960530001,3432,Paul-Licameli,2022-09-01T11:20:52Z,"Let it stand for alpha, but I don't like these `extern`s and I hope you don't either.  It makes the dialog dependent on src/export files but the dependency is not made explicit in an `include` directive.  Those export files are header-less because they are supposed to be highest-level things in the dependency graph, and candidates for easy removal as modules, if we can ever return to the extraction refactorings.

I'm sure you or I will think up something in the future to rewrite the necessary parts of this file as a registry that the exporters can plug into.  Making possible tinier builds of Audacity that only know Wav exporting for instance.
"
960532075,3432,crsib,2022-09-01T11:23:21Z,"I don't like it, nor do I think that it is feasible to rewrite the whole Export framework. It is highly coupled with the UI and provides pretty much no sane way to configure the exporting plugin."
960538335,3432,Paul-Licameli,2022-09-01T11:30:42Z,"Here it is... that preference that I noted before, is not a preference.  It's always WAV.  No memory of a user choice.  Must that be fixed for release?
"
960539989,3432,crsib,2022-09-01T11:32:24Z,"I should be always wavpack (if available), I will tipple check that. There are no plans to give the user control of exporting right now, so this is not a bug."
960540355,3432,crsib,2022-09-01T11:32:55Z,"And it is part of service *configuration*, it is not a preference."
960540530,3432,Paul-Licameli,2022-09-01T11:33:09Z,"You want a busy-wait when numerator equals denominator?
"
960542837,3432,crsib,2022-09-01T11:35:47Z,This is the behavior from the original progress bar.
960552488,3432,Paul-Licameli,2022-09-01T11:47:29Z,"Is this the right power of 10?
"
960555306,3432,crsib,2022-09-01T11:50:23Z,"This value is unrelated to the original progress dialog. I can use virtually any number greater that 1.

10000 is probably an overkill, but it doesn't affect the result much. Rescaling is needed because wxGauge does not allow 64 bit values."
960560219,3432,Paul-Licameli,2022-09-01T11:55:53Z,"I'm not competent in this language yet
"
960563642,3432,Paul-Licameli,2022-09-01T11:57:13Z,"What was the reasoning to put this in `src/cloud` but the rest in `src/cloud/audiocom`?
"
960604442,3432,crsib,2022-09-01T12:40:19Z,For the miniscule chance of adding other services :-) Can be easily moved into audiocom 
960625019,3432,crsib,2022-09-01T13:00:19Z,"I have reviewed the usages, it can be moved to main thread for now. "
960646100,3432,crsib,2022-09-01T13:19:56Z,Nope
960770078,3432,crsib,2022-09-01T15:04:44Z,"Only the first two. I want to be able to reset the handlers, so the associated resources can be released as well "
960910612,3432,crsib,2022-09-01T17:12:05Z,"I have revised it and see no problem here: even if the exporter calls `Poll` multiple times with `numerator == denominator`, which is not the case - the only side effect is yielding every time the exporter calls Poll.

And I would say that 50 msec is like 5 times more than we need. 20 FPS is noticeable laggy. Ideally, Export plugin should use a background thread, so the events are processed by the main thread normally."
961015127,3432,Paul-Licameli,2022-09-01T19:14:51Z,I’m not asking for a change.
961019587,3432,Paul-Licameli,2022-09-01T19:17:48Z,"By the way, it’s minus-cule not mini-scule but everybody gets it wrong unless they like typography and know that “majuscule” is a thing too… "
961158407,3432,Paul-Licameli,2022-09-01T22:45:37Z,"This line is new since the last push.  Is it correct?
"
961161532,3432,Paul-Licameli,2022-09-01T22:53:00Z,"New too
"
961163113,3432,Paul-Licameli,2022-09-01T22:56:44Z,"Also new... okay I trust this is a pattern done for a good reason
"
961167520,3432,Paul-Licameli,2022-09-01T23:07:26Z,"Lock the callbacks mutex first
"
961172709,3432,Paul-Licameli,2022-09-01T23:20:26Z,"It's still true in the latest push that the return value of this function never changes.  Is it your intent to check availability of WavPack?

I think I know how to do that.  Wait for me to push a PR onto your PR.

"
961764150,3432,Paul-Licameli,2022-09-02T14:48:51Z,ExportPlugin
961764378,3432,Paul-Licameli,2022-09-02T14:49:05Z,ExportPlugin
685508915,1193,Paul-Licameli,2021-08-09T20:45:58Z,"unnecessary # include
"
685509729,1193,Paul-Licameli,2021-08-09T20:47:23Z,"Add authorship comment at the head of this and the corresponding .h file, as you have elsewhere with the other new files.
"
685511232,1193,Paul-Licameli,2021-08-09T20:49:49Z,"Comment what this is for, and explain that the default implementation does nothing.
"
685519651,1193,Paul-Licameli,2021-08-09T21:03:49Z,"Maybe delete this using directive for an inherited constructor, now that SpectrumView has its own constructor that overloads it.
"
685520142,1193,Paul-Licameli,2021-08-09T21:04:35Z,"One-argument constructors should usually be `explicit` unless you really want implied conversions.
"
685524078,1193,Paul-Licameli,2021-08-09T21:11:16Z,"You didn't copy mStartT, mEndT.

Maybe SpectralData should supply its own copy to make this less error prone?
"
685526202,1193,Paul-Licameli,2021-08-09T21:15:00Z,"This change should also be conditional on EXPERIMENTAL_BRUSH_TOOL

Be sure all such appearance changes in the UI don't happen when the EXPERIMENTAL is off.
"
685527766,1193,Paul-Licameli,2021-08-09T21:17:39Z,"This one line deserves a tiny commit of its own because it is a bug fix in existing code, not properly part of your project.
"
685529331,1193,Paul-Licameli,2021-08-09T21:20:33Z,"You can leave one less changed file :-)
"
685534104,1193,Paul-Licameli,2021-08-09T21:29:03Z,"Comment a bit about the purpose of this time.  It's really mapping from time (as discrete sample count) to a set of bins, right?  Then maybe (1) a better name and (2) the set need not contain wide integers, because there will not be so many frequency bin values.
"
685536473,1193,Paul-Licameli,2021-08-09T21:33:16Z,"So start is minimum of all sample times so far entered, end is max?  Comment that.
"
685544382,1193,Paul-Licameli,2021-08-09T21:48:46Z,This static isn't used
685547666,1193,Paul-Licameli,2021-08-09T21:55:06Z,"This function fails to compile with EXPERIMENTAL_BRUSH_TOOL off.  Maybe you can simply wrap this whole file in an #ifdef to turn it off.  Likewise for the header.

"
685548259,1193,Paul-Licameli,2021-08-09T21:56:21Z,"explicit
"
685549977,1193,Paul-Licameli,2021-08-09T21:59:56Z,"This header file is actually not needed!   It is included only in one .cpp file, and that file influences the behavior of the program completely by means of registrations at static initialization time.  So the class definitions of this .h can simply move to the header-less .cpp file.

See all the files under src/menus -- they are headerless, but similarly manage to cause their items to appear in the toolbar menus.
"
685550816,1193,Paul-Licameli,2021-08-09T22:01:40Z,"And once you do that, you could even put the whole file inside `namespace { ... }` which could have the tiny advantage of making fewer symbols in the linkage tables.  Maybe not important.
"
685551119,1193,Paul-Licameli,2021-08-09T22:02:19Z,"Swap the last two lines so it compiles without the EXPERIMENTAL
"
685554134,1193,Paul-Licameli,2021-08-09T22:08:59Z,"Can these have in-line initializers?
"
685555352,1193,Paul-Licameli,2021-08-09T22:11:45Z,"I prefer in-line initializers in the class, or member initializers before the function body, instead of assignments in the body, where possible.  It makes it a bit easier to compare the constructor and the class and be sure everything is initialized.

In fact, when a class has const or reference data members, those are the only ways you can initialize them, and it's good when possible to make such data members to help the reader reason about the class, knowing the members are immutable.

So are any of these immutable?  I think mProject can have type `AudacityProject *const`
"
685555845,1193,Paul-Licameli,2021-08-09T22:12:49Z,Even making this one initialized here with nullptr would be nice.
685560062,1193,Paul-Licameli,2021-08-09T22:22:25Z,"I think this event handler got here because you imitated the history dialog.  But you don't use mAudioIOBusy anywhere.  And yet, you should!  We should disallow commands like the Apply button that might change the content of wave tracks while you are also playing or recording.  That is consistent with the rest of Audacity.
"
685560824,1193,Paul-Licameli,2021-08-09T22:24:11Z,"This other bit of event handling copied from the undo history dialog is less useful.  That dialog really needs to detect changes of undo history so it can update what it shows.  This dialog has no such need.
"
685563080,1193,Paul-Licameli,2021-08-09T22:29:10Z,"Finally you may wonder if you really need this bit of copied event handling from History Window.

You do!

Because one thing that might change in Preferences is the language.  We have made sure that all non-modal dialogs re-create themselves so that user-visible strings are translated into the newly chosen language.  It is right to do here.  Of course you won't see translation if you try it now, becase your new intenationalized strings (those in the `XO` macro) are not yet entered in the catalogs that human translators have yet to fill in.
"
685563727,1193,Paul-Licameli,2021-08-09T22:30:48Z,Not actually constructed anywhere?  Make these private?  Or... see below
685564259,1193,Paul-Licameli,2021-08-09T22:32:10Z,"So I understand this is the sole entry point to the code in this file, used by the dialog.  Separation of dialog code from the state it manages is a very good idea!

Maybe SpectralDataManager should be a namespace, and this the one function declared in it, and all the rest can be hidden in the corresponding .cpp file.

"
685591097,1193,Paul-Licameli,2021-08-09T23:41:00Z,"Your name, not mine!"
685591394,1193,Paul-Licameli,2021-08-09T23:41:43Z,"Your name!  And this one did not historically split from TrackPanel.cpp.

"
685594177,1193,Paul-Licameli,2021-08-09T23:49:04Z,"I find a dependency cycle of SpectrumView and BrushHandle, but no other files in that cycle.

I think BrushHandle includes SpectrumView only because it needs SpectralData.  They both do, so you can make separate new files just for that structure, and the cycle is broken.  It is a common lower-level dependency of both.

Better:  avoid a header including a header.  Make `class SpectralData;` just an incomplete type definition here, and include SpectralData.h only in BrushHandle.cpp.

Maybe you will try that and find a compilation failure -- because the compiler tries to generate an in-lin destructor of BrushHandle, which requires a dtor of `shared_ptr<SpectralData>`, which requires the dtor of SpectralData, which is only forward-declared.

And so you fix that by explicitly declaring the destructor and making it non-inline.  Maybe you will need the same for copy and assignments, or instead you can also fix that by `= delete;` - ing them.


"
685595369,1193,Paul-Licameli,2021-08-09T23:52:20Z,"I recommend this rule:  in a .cpp file, the first `#include` directive should always be for the corresponding .h file.  Putting it before any others causes that header file to be properly self-contained -- you can be sure it is not depending on some other header being included first to make it compilable.  Instead you are forced to make all necessary nested include's or make forward declarations of incomplete types.

Maybe you know this rule -- you followed it in all other examples of new .cpp files, but just forgot it once here.
"
685596259,1193,Paul-Licameli,2021-08-09T23:55:02Z,"There are several things leftover in this file because you followed the example of SelectHandle, but they are not used.  All of the time-snapping things are probably among those.  `Connect` and all the timer handling are also unneeded, I think.  I don't know if that is all of them.  Please take another look and clean up unnecessary things.
"
685598894,1193,Paul-Licameli,2021-08-10T00:02:19Z,"As I mention elsewhere, SpectralData should be in its own .cpp/.h file pair so that a dependency cycle between BrushHandle and SpectrumView can be broken.  When a .cpp file exists, you might also make more complicated functions like this non-inline.
"
685600247,1193,Paul-Licameli,2021-08-10T00:06:38Z,"Now to begin some suggestions about more difficult matters:  I finally deduced from reading other code that the values of ll_sc correspond to whatever time value is at the mouse x position.

But you know that spectrum transformers will be used, and there will be a natural ""hop"" size of 1/4 of whatever fixed FFT window length you are using.

So it may be disadvantageous to collect frequency bins for too many time coordinates that don't fall at hop widths.

Maybe all the ll_sc values ought to be rounded so that they differ by multiples of the hop size.

Maybe you can simply round every ll_sc value as it comes into this class.  Or maybe let the first value, whatever that is, be unrounded, so the user's first pick can be more precise, but afterwards all values should be rounded so their difference with the initial value is a multiple of the hop.


"
685603807,1193,Paul-Licameli,2021-08-10T00:17:16Z,You never call with maySnap true.  So why not simplify this function and remove FREQ_SNAP_DISTANCE?
685604258,1193,Paul-Licameli,2021-08-10T00:18:49Z,"some unused functions above
"
685607203,1193,Paul-Licameli,2021-08-10T00:27:57Z,"I thought Escape might have to do more work to be sure the spectral highlight goes away with the Esc key, but experiment tells me, no!"
685607405,1193,Paul-Licameli,2021-08-10T00:28:34Z,"*according to
"
685607892,1193,Paul-Licameli,2021-08-10T00:30:02Z,"These two might be const members of BrushHandle
"
685617635,1193,Paul-Licameli,2021-08-10T01:03:12Z,"I'm puzzled why the add function affects only the current state, but the subtract function rewrites all past states.

Maybe if you rounded times to discrete hops of 512 (or whatever window size / 4 is), as I suggested elsewhere, then you would find it easier to erase what you added just in the most recent state.
"
685618642,1193,Paul-Licameli,2021-08-10T01:07:00Z,"I think most of these lines are deletable copies from SelectHandle?

But maybe the click should call HandleTimeFreqData once -- if you follow the suggestion elsewhere that the first pick (at least in the life of the SpectralData object, not necessarily the first pick in the life of each click-drag-release) should be at the exact time coordinate at the mouse-down point, estabilishing the time origin for rounding to hops.
"
687604343,1193,Paul-Licameli,2021-08-12T10:54:38Z,"Maybe the first push_back should happen instead when you click, so every call to drag, including the first one, can enlarge the selection.
"
687607234,1193,Paul-Licameli,2021-08-12T10:59:27Z,"What is the reason for the clipping of coordinates here?

I think this is a wrong solution for the absense of array bounds checking somewhere else in the program.
"
687678842,1193,Paul-Licameli,2021-08-12T12:48:04Z,"Each time you call this function, a SpectrumTransformer is created and destoyed.

If you round sample times to hop sizes, you might be computing the same FFTs repeatedly.

Maybe the SpectrumTransformer object could have a longer lifetime, and a cache of FFT windows?

This may be a problem for me to think about and implement to improve my class.
"
687680957,1193,Paul-Licameli,2021-08-12T12:50:53Z,"This is an algorithm for plotting an unfillled circle.  But shouldn't there be a filled circle?

The numerical tricks used for fast plotting may be less important here than correct calculation of the time and frequency bins that must be added.

Something like:

```
For each distinct frequency bin, that coordinates in [y0 - r, y0 + r] map to:
    Map bin back to a y value
    Compute q = r^2 - (y - y0) ^ 2
    For each x, such that (x - x0)^2 <= q:
       Add the bin for (x, y)
```
"
687681494,1193,Paul-Licameli,2021-08-12T12:51:27Z,Four calls to PositionToFrequency might be reduced to two.  See how arguments do and don't change.
687696979,1193,Paul-Licameli,2021-08-12T13:11:17Z,"Maybe too:  do clamping of values to the acceptable range within this function (std::clamp is a useful little C++17 function).

No bin value needs to be less than 0 or more than the Nyquist bin (window size / 2).

Maybe that is the better replacement for the clamping of x and y values done in the drag method of BrushHandle.
"
688241187,1193,Paul-Licameli,2021-08-13T04:51:43Z,"I see a problem.  You always pass true as the first argument to the base class constructor, which means output is required, the inverse Fourier transform is done, and overlap-add, and pasting of data into the track that was supplied to Process().

All of this is unnecessary when you are only computing frequency snapping.  Could this be another reason for the slowness?

"
688241396,1193,Paul-Licameli,2021-08-13T04:52:28Z,"I think I understand things better now, and it's the right thing to do after all.
"
688243028,1193,Paul-Licameli,2021-08-13T04:58:08Z,"How will this change if all sample counts are rounded to hop sizes?  Will it mean that the inner for-loop needs only one pass?
"
688243963,1193,Paul-Licameli,2021-08-13T05:01:16Z,"You zeroed out a certain bin, but also one bin up and down in each direction.

You may have got into trouble because you lack a bounds check on the bins, so you compensated elsewhere in the program such as by limiting the coordinates in the brush tool.  But better to fix it all here.

And yet, why are you going one bin up and down like this?

Is this an unnecessary correction of the other problem, that you were ""drawing"" unfilled circles instead of filled ones?
"
688244888,1193,Paul-Licameli,2021-08-13T05:04:27Z,"I see the ""magic number"" 2048 repeated in this file.

Is the sameness of those numbers a coincidence, unimportant to the design -- or is it essential?  If it's essential, it is better to give this constant a name, and repeat the name in two places, not the literal number.

I think the hop size of 1/4 the window size may need to be used in more places outside this file -- so that hop size should be public in the header as well, as a named constant.


"
688245481,1193,Paul-Licameli,2021-08-13T05:06:28Z,As mentioned before -- be careful here too about bounds checking.  Don't fetch the array at nonexistent subscripts.
688904970,1193,Edwardhk,2021-08-14T09:08:28Z,This line is removed in latest commit
688915572,1193,Edwardhk,2021-08-14T10:53:46Z,Added abstracted method for copying.
692040865,1193,Paul-Licameli,2021-08-19T11:54:36Z,"Question:  should this rounding happen before or after the update of mStartT and mEndT?
"
693363907,1193,Paul-Licameli,2021-08-21T14:54:58Z,"If this is all in SpectrumView.cpp, then I understand this commit does not yet fix drawing problems."
693363961,1193,Paul-Licameli,2021-08-21T14:55:31Z,"Why not 512, which is 1/4 window size?

Why do you think you need more closely spaced hops?
"
693364210,1193,Paul-Licameli,2021-08-21T14:58:01Z,"You can simplify this if-else block just to the one statement after the else.

That is because operator [] of std::map may mutate the map.  If the data type has a default constructor, then it guarantees the subscripted element is present, creating it on demand in default-constructed state if it was not.

"
693365302,1193,Paul-Licameli,2021-08-21T15:09:00Z,"I checked again ho mFreqLowerBound and mFreqUpperBound are set up when you construct the brush handle.  You still exclude the lowest and hightest frequency bins from editing.  Is that still needed after better bounds checking and removing the +/- 1 hack?
"
693366036,1193,Paul-Licameli,2021-08-21T15:15:36Z,"Why are you excluding certain extreme values of x and y coordinates?  Is that also something made unnecesary by bounds checkin somewhere else?
"
693366427,1193,Paul-Licameli,2021-08-21T15:19:08Z,"You round sample counts down to find the hop, but maybe round to nearest would work better, correcting the x coordinate less in the worst case.  So add 1/2 of hop zie to the long long position, before dividing.

Similarly, round the y to the nearest frequency bin, not downward.
"
693366902,1193,Paul-Licameli,2021-08-21T15:23:18Z,"I think mMostRecentX, mMostRecentY, mAutoScrolling, and the TimerHandler class are all legacies of SelectHandle that you don't need.  There are still unnecessary things to remove from BrushHandle.cpp.
"
693367138,1193,Paul-Licameli,2021-08-21T15:25:40Z,Perhaps these variable names should be h1 and b1 to suggest the different coordinate space.
693367383,1193,Paul-Licameli,2021-08-21T15:27:25Z,"And maybe h0, b0

And maybe the twice used x -> h and y -> b transformations could each be a little lambda
"
693367777,1193,Paul-Licameli,2021-08-21T15:30:36Z,"""Line drawing"" steps are unchanged.  Only the coordinate space is different.  That's what I expected.  (But maybe you will change variable names.  Also dh, db)
"
693368265,1193,Paul-Licameli,2021-08-21T15:33:54Z,"I think you need to change this function now so it expects hop and bin values but it is still now expecting sample count and frequency values.
"
693371560,1193,Edwardhk,2021-08-21T16:04:27Z,"This is before our discussion on the rendering fix in Spectrogram, large hop size yields brush stroke that's not looking good.
Since we have found potential fix for that, will change it to 1/4 of the `mWindowSize`"
693372818,1193,Edwardhk,2021-08-21T16:15:28Z,"Yes, since dragging out of the track (to non-visible frequency) will generate wrong result for connecting coordinates."
693379100,1193,Edwardhk,2021-08-21T17:15:25Z,"`mMostRecentX` and `mMostRecentY` is used for drawing the outline of the brush tool.
Will remove the `TimerHandler` and `mAutoScrolling`"
693418988,1193,Paul-Licameli,2021-08-22T00:30:27Z,"Is this entire commit only for a debugging feature that you don't use in the final product?
"
693419129,1193,Paul-Licameli,2021-08-22T00:32:03Z,"Did you mix up the intended definitions of db and dh, sb and sh?
"
693419434,1193,Paul-Licameli,2021-08-22T00:36:06Z,"Maybe the code is correct, but the substitution of h for x and b for y in variable names isn't consistent, and is sometimes reversed, so it is hard to review it.
"
693419498,1193,Edwardhk,2021-08-22T00:36:49Z,"You are right, these lines should be removed from PR"
693422901,1193,Paul-Licameli,2021-08-22T01:19:22Z,should that say `spectrumSize -1` ?
693438775,1193,Edwardhk,2021-08-22T04:24:39Z,"Sorry you are right about this, have been corrected to stay consistent."
1245285984,4853,Paul-Licameli,2023-06-28T14:15:08Z,"When you need an abstract interface with just one interesting virtual function -- just make an alias for a `std::function<void(double)>`
"
1245287778,4853,Paul-Licameli,2023-06-28T14:16:26Z,"Can the listener and publisher be new attached objects on the project, so that no intrusion in ProjectManager is necessary?
"
1245293847,4853,Paul-Licameli,2023-06-28T14:20:51Z,"I think the listener and publisher classes should just be fused into one.
"
1245685077,4853,saintmatthieu,2023-06-28T19:46:11Z,"Sounds like a use case for an attachment, indeed : these blokes are just here to live, no one manipulates them ...
The attachment should still be defined in `src`, though, the only possible get-together place for `ProjectTimeSignature` and `TrackList` without modifying the dependency graph."
1245685661,4853,saintmatthieu,2023-06-28T19:46:52Z,"But that'd mean moving the implementation of the publisher down in `src`, meaning more code to re-implement when migrating to Qt."
900120288,2224,crsib,2022-06-17T13:32:19Z,"Please update to GPL2-or-later.

Or even better, please add `/*  SPDX-License-Identifier: GPL-2.0-or-later */` to the top of both Export and Import files"
900122535,2224,crsib,2022-06-17T13:34:41Z,"This `#ifdef` since Audacity was ported to use CMake based build. It is save, but it could be dropped."
900145911,2224,crsib,2022-06-17T13:59:08Z,Please add space before `(`
900157180,2224,crsib,2022-06-17T14:07:42Z,Please rewrite using `BoolSetting` 
900157235,2224,crsib,2022-06-17T14:07:47Z,Ditto
900159935,2224,crsib,2022-06-17T14:10:54Z,You can tie to BoolSetting
900160496,2224,crsib,2022-06-17T14:11:28Z,And this code becomes no longer needed
900161441,2224,crsib,2022-06-17T14:12:32Z,Please move all the Setting objects to the anonymous namespace above. This way you can reuse them!
900163544,2224,crsib,2022-06-17T14:14:49Z,You can write `const auto hybridMode = HybridModeSetting.Toggle();`
900163850,2224,crsib,2022-06-17T14:15:07Z,And this code will go away as well!
900165351,2224,crsib,2022-06-17T14:16:40Z,"But you still need to flush the config, so this line remains!"
900166661,2224,crsib,2022-06-17T14:18:00Z,"Let's use C++ way
```
struct WriteID final
{
    uint32_t bytesWritten {};
    ...
};
```"
900167540,2224,crsib,2022-06-17T14:18:55Z,"Please initialise values here, i.e. `wxCheckBox* mHybridMode { nullptr };`"
900171542,2224,crsib,2022-06-17T14:23:21Z,The correct code is `ProgressResult::Failed`
900171856,2224,crsib,2022-06-17T14:23:45Z,You can just use `= {}` to zero initialize the structure
900173231,2224,crsib,2022-06-17T14:25:15Z,Please use Setting object you've extracted to the anonymous namespace before
900175952,2224,crsib,2022-06-17T14:28:04Z,Missing check for `IsOpened`
900177859,2224,crsib,2022-06-17T14:30:10Z,Please remove `this` and use `nullptr`.
900190813,2224,crsib,2022-06-17T14:44:52Z,"Please use `nullptr`

To close the context - after this line please write:
```
auto closeWavPackContext = finally([wpc]() { WavPackCloseFile(wpc); });
```

This way the context will be closed using RAII and won't leak. On top of that - it will allow to simplify the code"
900199075,2224,crsib,2022-06-17T14:53:47Z,`constexpr size_t` please
900202771,2224,crsib,2022-06-17T14:57:25Z,This call will go away
900204089,2224,crsib,2022-06-17T14:58:54Z,`const auto` instead of `uint32_t` (or `const size_t`)
900204703,2224,Subhra264,2022-06-17T14:59:35Z,done
900206553,2224,crsib,2022-06-17T15:01:02Z,For consitency: `Exporting selected audio as WavPack`
900206863,2224,crsib,2022-06-17T15:01:24Z,For consistency: `Exporting the audio as WavPack`
900211786,2224,crsib,2022-06-17T15:07:17Z,"`GetBuffer` reurns `const char*` already, and I see no reason to remove const here: you do not modify the buffer and `const T*` means that you could not modify the data, the pointer itself is modifiable. "
900277760,2224,crsib,2022-06-17T15:50:23Z,"WavPack works even with float32 data, so `int16Sample` sounds like a pessimiztion to me.

I think we should allow user to choose between `16 bit`, `24 bit` and `32 bit float`, similar to ExportPCM.

"
900285527,2224,crsib,2022-06-17T16:00:11Z,"(I believe, that Audacity will return you an array of 32 ints, if you request sample24 as an output format for the mixer. Am I right, @Paul-Licameli?)"
900286019,2224,crsib,2022-06-17T16:00:47Z,This cycle should be adopted to the different sample formats
900287276,2224,crsib,2022-06-17T16:02:20Z,"This can be `return ProgressResult::Failed` now, as memory managment is handled by C++ now"
900289410,2224,crsib,2022-06-17T16:04:59Z,"`return ProgressResult::Failed`?

And I think that `BasicUI::ShowErrorDialog` should be used to notify the user about the error in places where codec has failed. 

(Please, see ExportPCM for example)"
900290066,2224,crsib,2022-06-17T16:05:54Z,Both conversions are redundant
900290152,2224,crsib,2022-06-17T16:06:00Z,Ditto
900290412,2224,crsib,2022-06-17T16:06:22Z,"Please, use `static_cast`. We do not allow C-casts in Audacity no more"
900291363,2224,crsib,2022-06-17T16:07:42Z,Sounds like that we should return ProgressResult::Failed (and see above about error messages)
900291650,2224,crsib,2022-06-17T16:08:05Z,No longer needed!
900291893,2224,crsib,2022-06-17T16:08:24Z,`Failed`
900292361,2224,crsib,2022-06-17T16:09:04Z,`static_cast`
900296054,2224,crsib,2022-06-17T16:13:44Z,Unused!
900296205,2224,crsib,2022-06-17T16:13:58Z,`return false;`
900305300,2224,crsib,2022-06-17T16:26:53Z,"This function can be rewritten with less nesting involved!

```
int ExportWavPack::WriteBlock(void *id, void *data, int32_t length)
{
    if (id == nullptr || data == nullptr || length == 0)
        return true; // This is considered to be success in wavpack.c reference code

    WriteId *outId = static_cast<WriteId*>(id);

    if (!outId->file)
        // This does not match the wavpack.c but in our case if file is nullptr - 
        // the stream error has occured
        return false; 

    if (!outId->file->Write(data, length).IsOk()) {
        outId->file.reset();
        return false;
    }

    outId->bytesWritten += length;

    if (outId->firstBlockSize == 0)
        outId->firstBlockSize = length;

    return true;
}
```

Also, this allows to remove `error` from the WriteId structure!"
902412129,2224,crsib,2022-06-21T09:54:36Z,`reinterpret_cast` please!
902414023,2224,crsib,2022-06-21T09:56:31Z,"This can be simplified as `wavpackBuffer[j*numChannels + i] = *mixed++;`, not critical"
902417415,2224,crsib,2022-06-21T10:00:11Z,"For simplicity we can cache that block in memory, but this will do too. Very good!"
902417968,2224,crsib,2022-06-21T10:00:45Z,We generally prefer to have an empty new line at the end of the file
902420526,2224,crsib,2022-06-21T10:03:25Z,"Hmm, I'm not sure why this is needed. 

And I think we need to flush settings here"
902475187,2224,crsib,2022-06-21T11:03:31Z,"We can drop ifdef here, similar to export"
902476604,2224,crsib,2022-06-21T11:04:44Z,Not really needed
902482123,2224,crsib,2022-06-21T11:09:49Z,"This can be moved up!

```
ImportFileHandle(filename),
mWavPackContext(...),
mSampleRate(WavpackGetSampleRate(...)),
...
```"
902484090,2224,crsib,2022-06-21T11:12:14Z,"It is advisable to use references whenever we have non-null guarantees. It is not critical here, because check for `nullptr` is made right on top of it, but simplifies reading the code quite a bit.

"
902488217,2224,crsib,2022-06-21T11:17:12Z,I think it would be better to call `GetMaxBlockSize()` on the first channel. It will return the number of samples Audacity uses for a single block.
902488672,2224,crsib,2022-06-21T11:17:44Z,I preffer to use `const` as much is possible!
902533050,2224,crsib,2022-06-21T12:03:07Z,"Few thoughts:

* Even though no dithering is expected here, appending sample by sample can become a bottlneck here
* 32 bit depth does not gurantee float samples, this should be checked seprately

So it looks like we have 3 cases here:

1. 24-bit or in FP mode: no conversion is needed at all. The loop can be as simple as:
```
for (auto& channel : mChannels)
   channel->Append(reinterpret_cast<constSamplePtr>(wavpackBuffer.get()), mFormat, samplesRead, mNumChannels);
```
2. 16-bit: create a temp buffer of `int16_t`, copy stripped data there, append to the channel in a way similar to the fisrt case
3. 32-bit: create a temp buffer of floats, convert int32 data into there (dividing by int min/max), copy data channels"
902534531,2224,crsib,2022-06-21T12:04:45Z,This breaks handling of Cancelled case
902539439,2224,crsib,2022-06-21T12:10:15Z,"We do not allow such allocations in most of the cases.

This case can be written as

```
std::string item (itemLen + 1, '\0');
WavpackGetTagItemIndexed(mWavPackContext, i, item.data(), itemLen + 1);
name = audacity::ToWXString(item);
```"
902539664,2224,crsib,2022-06-21T12:10:27Z,Ditto
902547525,2224,crsib,2022-06-21T12:18:54Z,The choice of separator looks a bit odd to me. Why not forward slash or '\n'?
904753835,2224,Subhra264,2022-06-23T08:52:13Z,"In the `ExportWavPack.cpp` file, I think there were some issues with float 32 bit export. Earlier, I just passed 32 bit int values for float sample export. So, I think while importing it was getting imported as 32 bit int (before adding special cases for float sample import as you suggested). Though it was ok while importing in audacity ( wtih the previous code before applying your suggestions for import), I tried to play the 32 bit exported wavpack file using the VLC media player and it sounded like corrupted. Now, when I converted the `mixed` data into `float` and then into `int32_t` while exporting as 32 bit float, both VLC media and audacity (After applying your suggestions) opened and played the 32 bit float files correctly."
904764235,2224,crsib,2022-06-23T08:57:56Z,"This branch should have additional condition, something like

```
if (mFormat == int24Sample || (WavpackGetMode(mWavPackContext) & MODE_FLOAT) == MODE_FLOAT)"
904764790,2224,crsib,2022-06-23T08:58:27Z,"```
Note that if the WavPack file contains floating-point data (as indicated by the MODE_FLOAT bit being
set in the value returned from WavpackGetMode()) then 32-bit float values are returned in the
buffer despite the defined type of the pointer
```"
904767000,2224,crsib,2022-06-23T09:00:28Z,Please use `std::numeric_limits<int32_t>::max()`
904767949,2224,crsib,2022-06-23T09:01:24Z,"We can move it to the top, and reuse it's value in decoding cycle! Please mark `const` as well"
904772293,2224,crsib,2022-06-23T09:05:26Z,"I think you should set `config->float_norm_exp: = 127;` to enable FP mode in Wavpack. In any case - you should consult `WavpackGetMode` to check, if you need to convert the values.

`1u << 31` - `std::numeric_limits<int32_t>::max()` please."
904773150,2224,crsib,2022-06-23T09:06:20Z,"(Value `127` is an exponent  bias for IEEE754 32-bit float values. We have 8 bits for exponents, so the bias is `2^7 - 1`)"
905997789,2224,crsib,2022-06-24T12:04:56Z,"Minor, but I expect a compiler warning here. Let's add `static_cast<int64_t>` here. Sorry I've missed that before... "
906003619,2224,crsib,2022-06-24T12:13:25Z,"Not that important here, but is is best to avoid memory allocations in such loops. Allocations can be quite costly."
1444013109,2224,wthrajat,2024-01-07T14:09:54Z,@crsib I am curious to know why :D
1210105253,4746,saintmatthieu,2023-05-30T11:01:31Z,`const auto sequence =`
1210105384,4746,saintmatthieu,2023-05-30T11:01:38Z,`const auto sequence =`
1210109821,4746,saintmatthieu,2023-05-30T11:05:56Z,Am I correct in understanding that this commit doesn't change any behaviour?
1210135481,4746,saintmatthieu,2023-05-30T11:29:04Z,`SharedPointer<const SampleFrameSequence>()` ?
1221277527,4746,saintmatthieu,2023-06-07T09:40:38Z,Looks like both branches of this `if` do the exact same...
1221323418,4746,saintmatthieu,2023-06-07T10:12:52Z,`const auto &input` (below too)
1221335343,4746,saintmatthieu,2023-06-07T10:20:45Z,Why not using `const std::optional<size_t>`? Reading usages with `-1` is puzzling.
1221364940,4746,saintmatthieu,2023-06-07T10:40:32Z,"Could be const, right?"
1221375158,4746,saintmatthieu,2023-06-07T10:50:16Z,Shouldn't _all_ tracks be leaders now?
1221387152,4746,saintmatthieu,2023-06-07T10:58:18Z,I don't understand why we have to make this check here. It seems to me that this implementation would result in `TrackList::NChannels(rightChannelTrack) != rightChannelTrack.NChannels()`.
1221391691,4746,saintmatthieu,2023-06-07T11:02:09Z,"So until we have the real deal, the leader will be the one iterating over all channels. Nice."
1221422271,4746,Paul-Licameli,2023-06-07T11:31:03Z,"No, track objects are not leaders only yet.

That is a farther refactoring goal."
1221426186,4746,Paul-Licameli,2023-06-07T11:33:50Z,"That is intended.

A non-leader track will count only itself and later channels and give access through the wide sample sequence interface to those channels only.  (I wrote that in general terms anticipating future more than stereo tracks).

I expect track painting code will use the WideSampleSequence abstraction too, and will require objects that only view one side."
1223988858,4746,saintmatthieu,2023-06-09T08:11:24Z,"`leftChannelTrackOfStereoTrack.NChannels()` must equal 2, and it will, that's fine.
`rightChannelTrackOfStereoTrack.NChannels()` now equals 1. What code needs to do such check? Unless there really is a need for it, I'd at least assert false for the time where we still have the concept of leaders."
1223994448,4746,saintmatthieu,2023-06-09T08:16:34Z,Looks unused.
1223997733,4746,saintmatthieu,2023-06-09T08:19:49Z,Here as well: why not `optional<size_t>`
1224034200,4746,saintmatthieu,2023-06-09T08:54:10Z,"Referring to [this comment](https://github.com/audacity/audacity/pull/4746#discussion_r1223988858): trying to figure out whether `sequence` is expected to be a leader or not.
Given `channel < 0`, if it is a leader, it will return as many instances as the track has channels. If not, it will return only one instance.
Then I suppose that clients of this function must take care not to call it with `channel = -1` and iterate over all tracks, else there would be more than one instance for the right channel of a stereo track.
Disclaimer: I probably still miss some context around this function."
1224062590,4746,saintmatthieu,2023-06-09T09:21:22Z,"Side note :
Now debugging splitting a stereo track to mono, as this is an ""multichannel"" effect.
It hit `assert(!partner->mpGroupData);` in Track.cpp, line 216. Might be related to the work you did on having tracks share mute, gain and other properties. I guess this assert could be removed, but it will require your attention."
1224088317,4746,saintmatthieu,2023-06-09T09:35:15Z,"Oops: always false if `channel = -1`, due to the implicit conversion from signed to unsigned."
1224113671,4746,saintmatthieu,2023-06-09T10:01:45Z,"Looks like this function, when used by `PerTrackEffect`, takes care that `sequence` is always a leader. I wonder if this actually always must be true. If it must, please assert. I'm giving up on reviewing that part, at least for now, I can't grasp all possible situations."
1224121854,4746,saintmatthieu,2023-06-09T10:10:47Z,Please assert in this lambda that `input.pSequence` is a leader.
1224124063,4746,saintmatthieu,2023-06-09T10:13:04Z,const
1224132088,4746,saintmatthieu,2023-06-09T10:21:49Z,"Just realized that `Mix.cpp` also uses this function, I reckon for the real-time effects. In this context `channel == -1`, but it's only called with leader sequences. So looks correct in that case too."
1224135099,4746,saintmatthieu,2023-06-09T10:25:14Z,"It's unfortunate that ""width"" here is used for bit depth when we're introducing ""wide"" sequences."
1224189285,4746,Paul-Licameli,2023-06-09T11:31:57Z,"I can't do that.  Nothing in `WideSampleSequence` mentions the notion of ""leader"" any more.

Nor do I want to add some virtual functions to it just so I could make the assertion.
"
1224194862,4746,saintmatthieu,2023-06-09T11:39:28Z,Why not getting the envelope values once and then iterate over the channels to apply it on the entries in `mSampleQueue` ?
1224197445,4746,saintmatthieu,2023-06-09T11:42:43Z,"Same here, I think `GetEnvelopeValues` can be factored out of the loop."
1224201296,4746,saintmatthieu,2023-06-09T11:47:33Z,Would be nice to access const references `mT0` and `mT1` .
1224218506,4746,saintmatthieu,2023-06-09T12:06:31Z,"The conceptual difference in `WaveClip` between ""play"" and ""sequence"" start times is the former accounts for trimming, the other not. I find this naming fairly sensible.
Now `Track` has `virtual double GetStartTime() const = 0`, `SampleTrack` has this `GetSequenceStartTime`. `WaveTrack` implements `GetStartTime` by calling `GetPlayStartTime` on its clips. As a reader used to the `WaveClip` convention, I first thought it was a bug for `MixerSource` to call `seq->GetSequenceStartTime()` to decide where to start getting the samples from.
This PR looks like a good opportunity to rename these two."
1224224775,4746,saintmatthieu,2023-06-09T12:13:38Z,I still haven't figured out the need for queuing in this class. Isn't the caching provided by `SampleTrackCache` sufficient?
1224377381,4746,saintmatthieu,2023-06-09T14:25:27Z,"Alternatively, `std::max_element` over clips."
1224384776,4746,saintmatthieu,2023-06-09T14:32:02Z,Right.
1224428951,4746,Paul-Licameli,2023-06-09T15:03:36Z,"Sorry, I want to overrule that opinion.

I expect a transitional period in which tracks are not all leaders but painting is reimplemented in terms of another abstraction that will make use of this.

Ultimately there will be no remaining notion of leader at all.
"
1224430152,4746,Paul-Licameli,2023-06-09T15:04:41Z,"Good catch.
"
1224449729,4746,Paul-Licameli,2023-06-09T15:23:29Z,"Are you saying the naming may cause confusion with the different terms in WaveClip?

I will change the name simply to `GetStartTime` and `GetEndTime` as in Track.

I got compilation errors when I did it that way at first, but I can fix that error another way without inventing other names.
"
1224716577,4746,saintmatthieu,2023-06-09T20:02:00Z,Sounds good.
1225830847,4746,Paul-Licameli,2023-06-11T14:28:29Z,"I disagree.  The Sequence object is here cast to a WaveTrack and the Track interface is still really needed.
"
1225831307,4746,Paul-Licameli,2023-06-11T14:29:17Z,Likewise I disagree here.
1225831618,4746,Paul-Licameli,2023-06-11T14:31:18Z,"Correct, the commit ""Update mSamplePos in just two places, at function exits"" is not intended to change behavior.

The transformation of `MixerSource` needs to be careful, and I'm showing small steps of transformation in these commits.  And still I made a mistake which now has its fix-up commit.

"
1225832150,4746,Paul-Licameli,2023-06-11T14:35:22Z,"You would mean `WideSampleSequence` now with changes of names, but that would not compile.  Anyway, this line (changed in the first commit) is ultimately changed again, at ""MixerSource uses SampleTrackCache ""widely"" and doesn't use Track...""
"
1225845950,4746,Paul-Licameli,2023-06-11T15:26:35Z,"Adding very little to clarity in my opinion, when the scope of the variable is so small.
"
1225855449,4746,Paul-Licameli,2023-06-11T16:00:08Z,"True, some further possible simplification after the loop splitting.
"
1225857031,4746,Paul-Licameli,2023-06-11T16:07:51Z,"But that also makes the assumption that envelope values do not depend on the channel.  That is not true now in all possible tracks that you can construct by joining mono channels, but as in other parts of this pull request, I will allow myself in these transformations to disregard such cases.

"
1225861074,4746,Paul-Licameli,2023-06-11T16:29:27Z,I agree
1225863099,4746,Paul-Licameli,2023-06-11T16:37:27Z,"This code was older than my SampleTrackCache, and that cache was also reused in spectrogram drawing.

The extra layer of queue is still useful to handle the mismatch of the number of samples fetched from the track, and the number of samples really produced, because of resampling.

I assume there is nothing for me to change in response because we will remove that cache anyway.
"
1225863126,4746,Paul-Licameli,2023-06-11T16:37:46Z,"I don't care too much
"
1225864814,4746,Paul-Licameli,2023-06-11T16:47:10Z,"> Side note :
> Now debugging splitting a stereo track to mono, as this is an ""multichannel"" effect.
> It hit `assert(!partner->mpGroupData);` in Track.cpp, line 216. Might be related to the work you did on having tracks share mute, gain and other properties. I guess this assert could be removed, but it will require your attention.

See commits 9f7d6c31b2d9fb2d4a9d01801673606830d9bab1 and c0f7aecfdb16c4cbd8cd240665a2fa7b5376d231, now merged.
"
1225865212,4746,Paul-Licameli,2023-06-11T16:49:30Z,"> Looks like this function, when used by `PerTrackEffect`, takes care that `sequence` is always a leader. I wonder if this actually always must be true. If it must, please assert. I'm giving up on reviewing that part, at least for now, I can't grasp all possible situations.

As I said, I can't assert that.  But as you will see in the next round of review, the condition must be ensured by `PerTrackEffect.cpp` to correct a bug in an earlier version of this branch, which caused assertion violations when generating a stereo chirp.
"
1225866023,4746,Paul-Licameli,2023-06-11T16:54:15Z,"It seems too much to me, when only a few small positive values are needed.
"
1226246230,4746,saintmatthieu,2023-06-12T08:04:17Z,Right. I must have missed the cast somehow.
1226246601,4746,saintmatthieu,2023-06-12T08:04:38Z,Right. I must have missed the cast somehow.
1226294227,4746,saintmatthieu,2023-06-12T08:37:08Z,"> I assume there is nothing for me to change in response because we will remove that cache anyway.

Right, this is just a question for my understanding in the prospect of the caching refactoring, not a request for change.

I see where it comes from now, given the layer of resampling, thanks for the explanation.

When you say ""remove that cache"", you are talking about the `SampleTrackCache`, right?

If so, this caching for resampling is still a problem to time stretching, since it requests 65536 samples at once. This isn't as bad as the megabyte currently queried by `SampleTrackCache`, but still this will likely be a performance bottleneck. How to solve this?

Reducing its size? I suppose the queue must have size at least as large as the largest playback buffer size possible, which might be tricky to find out and most of the time still unnecessary large.

The `StretchedWideSampleSequence` must solve the same problem : for a given requested output length, it doesn't know in advance how many samples must be pulled from its source. This makes me wonder if a good approach would be yet another, resampling decorator. Then `MixerSource` would need only one simpler method as opposed to currently two complex ones (`MixSameRate` and `MixVariableRates`). The processing chain would then go `MixerSource > (ResamplingSequence) > StretchingSequence > WaveTrack`, with `ResamplingSequence` injected only if needed. (`StretchingSequence` could also do the caching as proposed in my draft, or we'd pass it a `CachingSequence`, whichever.)"
1226314568,4746,saintmatthieu,2023-06-12T08:52:42Z,"Another interesting aspect to the resampling decorator: it could be freely injected at some other stage of the processing chain than the one proposed. I guess it's best to have it after stretching, yet who knows, there may be surprises along the way."
1226398728,4746,saintmatthieu,2023-06-12T09:55:56Z,"In that case it is not so much about clarity but rather easing optimization on the compiler. Not sure that in such cases it really _does_ make it easier on the compiler, but for us programmers it's a very easy thing to do."
1226408163,4746,saintmatthieu,2023-06-12T10:03:22Z,"I still can't grasp the use of `rightChannelTrackOfStereoTrack.NChannels()` always being equal to 1, even in terms of painting. But all right, I can live with that for now."
1235306842,4746,saintmatthieu,2023-06-20T13:53:27Z,"`trackRange` are selected leaders, so why is it necessary to use `FindLeader` and not just `Find` ?"
1235326417,4746,saintmatthieu,2023-06-20T14:07:09Z,The current behavior in Audacity is that all selected tracks will disappear and be replaced by one track with the rendered audio. Now this is removing only the first of selected leaders (causing the other leaders to move up in the UI) and appends the rendered track to the bottom. I don't expect this behavior change to be wanted.
1235329514,4746,saintmatthieu,2023-06-20T14:09:22Z,"Before ""Mix and Render"":
![image](https://github.com/audacity/audacity/assets/22740106/39e5d201-f5ae-4b1e-bd0c-0e1b0d88180b)
After:
![image](https://github.com/audacity/audacity/assets/22740106/721543cd-19fe-48ae-94cc-eba2c0bcbf87)
"
1235352954,4746,Paul-Licameli,2023-06-20T14:25:47Z,"Because, operator ++ behaves differently, iterating leaders only and not channels.

This change makes `insertionPoint` correct.  Without it, just making a new empty stereo track, and mixing-and-rendering, corrupts the track list and causes the crash.
"
1235366946,4746,Paul-Licameli,2023-06-20T14:35:34Z,"You are right.

Failure to remove right channels was part of this bug, but now it works correctly only when there is one selected track.

So please review the new, second fixup.
"
1520464592,6068,patrickvi2,2024-03-11T21:41:49Z,"This is a valid value in expected range. If you already support c++23 in your tool-chain, you might better use `std::expected` as return-type, otherwise a `std::optional` or at least a negative value to be able to sort out non-valid input."
1520471662,6068,patrickvi2,2024-03-11T21:50:41Z,"Maybe check, if it is save to assume `float` is 32bit on all machines. But I think, it is...."
1520476658,6068,patrickvi2,2024-03-11T21:57:07Z,You might want to add an early return for factor is not fullfilling expectations (`factor <= 0`)
1520489828,6068,patrickvi2,2024-03-11T22:14:44Z,Why?
1520504166,6068,patrickvi2,2024-03-11T22:35:31Z,"As you use `factor` for calculating the bounds of your iterators, it's maybe a good idea to check `factor` is in expected range."
1520506147,6068,patrickvi2,2024-03-11T22:38:38Z,Shouldn't it be `1.f / env`?
1520509149,6068,patrickvi2,2024-03-11T22:42:58Z,"As `env` can still be close to infinity small, the resulting weight might get a huge number introducing noise and artifacts. I could imagine, that either limiting `1/env` or the weight would result in less audible artifacts."
1520941304,6068,saintmatthieu,2024-03-12T06:55:42Z,"I didn't know `expected`, that's interesting, thank you. Unfortunately we still C++17, and even our CI toolchain for MacOS doesn't support the full C++17 std lib, e.g. `<filesystem>`. I don't know the exact version numbers, but the oldest MacOS version we release Audacity for cannot deal with the most recent C++ versions.
Also, we are relatively lenient in terms of safety: we document functions with `@pre` conditions, assert these preconditions, but generally don't otherwise deal with error handling. You won't find this pattern often, where the return value is checked for error. Seems to work for us 🤷 On the other hand, unit-testing is encouraged, and I have been lazy doing this time..."
1520944888,6068,saintmatthieu,2024-03-12T06:59:55Z,"I will assert at the beginning of `FormantShifter::Process` like I should have, given the pre-condition stated in that methods documentation. Concerning this particular method, given its narrow scope, it usually is tolerated without."
1521158295,6068,saintmatthieu,2024-03-12T09:45:26Z,"A remnant of me copying chunks from the [stftPitchShift repo](https://github.com/jurihock/stftPitchShift/blob/48042d72a43287676543950691d227732a46759b/cpp/StftPitchShift/Cepster.h#L48) to get started.
It's not a great protection, because, as you commented someplace else, the weights can still end up being huge. I expect this can happen if for some reason the input signal has a frequency region of near-zero values.
I'm about to push a protection that I think makes sense: the purpose of formant preservation is to boost or attenuate spectral regions by some reasonable amount of decibels. This commit will limit the amplification to +20dB, which is plenty for our purpose and then avoid crazy amplification."
1521160597,6068,saintmatthieu,2024-03-12T09:47:04Z,"Since `env` has type `float`, I expect `1` to be typecast to float, too. But sure, it doesn't hurt adding the `.f`."
1521161890,6068,saintmatthieu,2024-03-12T09:47:57Z,"Agreed, limiting the weights it will be."
1521166433,6068,saintmatthieu,2024-03-12T09:50:49Z,@Paul-Licameli would you be so kind to review that I pasted here your Discord message in a relevant way?
1521563419,6068,crsib,2024-03-12T14:23:47Z,I am confused. Why `lib-utility` instead of `lib-math`?
1521578196,6068,saintmatthieu,2024-03-12T14:32:08Z,"`lib-math` depends on `lib-soxr`. I'm reluctant to let the time-and-pitch depend on this mainly because it compiles PFFFT functions which are also found in `lib-fft`, another dependency of time-and-pitch."
1521770782,6068,crsib,2024-03-12T16:22:24Z,"I think this should be moved into a separate directory, and with `requirements.txt`"
1521779139,6068,crsib,2024-03-12T16:27:01Z,Do you plan to have different implementation?
1521779928,6068,crsib,2024-03-12T16:27:33Z,Why is this a part of a logger (which is a logger otherwise)?
1521783069,6068,crsib,2024-03-12T16:29:40Z,"I believe you only use it for tests. It's way too intrusive, TBH"
1521787959,6068,crsib,2024-03-12T16:32:52Z,"You use `FormantShifterLogger` directly here. This happens because `GetFftSizeOverride` must not be a part of it.

I think that you should have an empty logger for production and use FormantShifterLogger only for tests. 

Configurability must not be a part of logger."
1521797733,6068,crsib,2024-03-12T16:39:00Z,You do not utilize the interface again. Was there any need for it then?
1521820034,6068,crsib,2024-03-12T16:54:29Z,"We spent a lot of time and effort to optimize it, it is weird to see it go. "
1521821576,6068,crsib,2024-03-12T16:55:33Z,"Paul has introduced the class for aligned vectors, hasn't he?"
1521823952,6068,crsib,2024-03-12T16:57:10Z,"You go from SIMD to scalar algorithm, and I don't see any good reason for that"
1521826809,6068,crsib,2024-03-12T16:59:05Z,And why is it a problem? It doesn't introduce a circular dependency.
1521828029,6068,crsib,2024-03-12T16:59:55Z,"And probably, it should be called FastLog2 or whatever. "
1521830890,6068,crsib,2024-03-12T17:01:59Z,"I don't like it, but I don't have a strong opinion, either"
1521840769,6068,crsib,2024-03-12T17:09:34Z,"I don't understand this point. Why do we need it deterministic? How much do we care about this determinism? 

Provided that `srand` modifies the global state I wonder if something like https://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine should be used instead."
1521842931,6068,crsib,2024-03-12T17:11:13Z,"I understand that this is a new code, but I will stress that it is located in a known hot point"
1521843527,6068,crsib,2024-03-12T17:11:40Z,Why this include is in the header?
1521882356,6068,saintmatthieu,2024-03-12T17:38:57Z,"Not a circular dependency, but how can you be confident that it's the `lib-fft` symbols that will be used?"
1521885659,6068,saintmatthieu,2024-03-12T17:41:30Z,What is `requirements.txt` ?
1521890120,6068,saintmatthieu,2024-03-12T17:45:10Z,No. It ended up being a way for me to expose only relevant methods to `FormantShifter` and the rest (`NewSamplesComing` and override getters) to whoever integrates logger and shifter together (`StaffPadTimeAndPitch`).
1521891351,6068,crsib,2024-03-12T17:46:09Z,Your script has non-trivial dependencies. `requirements.txt` is a standard Python to define such dependencies. 
1521893360,6068,saintmatthieu,2024-03-12T17:47:43Z,"Because it's often related by usage: these allow overriding otherwise unexposed parameters, the effect of which one might not only need to hear but also to visualize, which then really implies the logger."
1521896421,6068,saintmatthieu,2024-03-12T17:50:11Z,It's convenient. What problem do you see with it?
1521897679,6068,crsib,2024-03-12T17:51:16Z,I rest my case; such configuration must not be a part of the logger.
1521898934,6068,crsib,2024-03-12T17:52:19Z,"Provided that you need a custom config in Audacity itself, why not use the ""Setting""?"
1521901490,6068,crsib,2024-03-12T17:54:25Z,"> It's convenient. What problem do you see with it?

It is a hack that hardcodes some random path into the build for no reason. "
1521902915,6068,saintmatthieu,2024-03-12T17:55:27Z,"This removal is only the removal of an earlier commit in this very PR ; the older code is left untouched.
Bad things happen if I use `vo::rotate` because it expects aligned float pointers, and `pSpec + imagingBeginBin` isn't necessarily aligned."
1521904382,6068,saintmatthieu,2024-03-12T17:56:35Z,"Not necessary here, due to [this](https://github.com/audacity/audacity/pull/6068#discussion_r1521902915)."
1521906543,6068,saintmatthieu,2024-03-12T17:58:19Z,static-asserting in the header file?
1521908741,6068,crsib,2024-03-12T18:00:08Z,Writing unit tests in a header file. 
1521935294,6068,saintmatthieu,2024-03-12T18:15:50Z,"Sounds good, I'll try."
1521941525,6068,saintmatthieu,2024-03-12T18:21:05Z,"Yes, but I cannot think of a more optimized alternative, and there are extenuating circumstances:
* only gets executed for clips that are pitch-shifted downwards,
* for a number of bins that is at most a quarter of the FFT size, when down-shifted by an octave, and less for lesser shift amounts."
1521942551,6068,saintmatthieu,2024-03-12T18:22:01Z,That's a remnant of me using something more sophisticated. Can be removed I think.
1521942994,6068,crsib,2024-03-12T18:22:26Z,Consider me convinced:-)
1522825132,6068,saintmatthieu,2024-03-13T09:19:29Z,"> Provided that you need a custom config in Audacity itself, why not use the ""Setting""?

You mean as defined in `Prefs.h`? I'd still need a write mechanism."
1522827382,6068,crsib,2024-03-13T09:20:52Z,"> I'd still need a write mechanism.

Can you explain please?"
1522862383,6068,saintmatthieu,2024-03-13T09:35:12Z,"Sure: if e.g. a method like `std::optional<int> GetFftSizeOverride()` finds `overrideFftSizeExponent.txt` in `logDir` that has a valid int value, it will use this rather than the production value. I can hear the result change on the fly by editing that file during playback. Even if I used the prefs, I'd need this functionality, and it should not be exposed to the user. (And in this regard it's actually not bad that `logDir` has some random string in the production build, as it makes it near impossible for the user to inadvertently have that file at that path and get a non-production parameter.)"
1522953750,6068,crsib,2024-03-13T10:26:29Z,"Well, you've just made it worse. During the playback, do you randomly try to open a file? I wouldn't call that a good idea at all. Open/read/close are syscalls. They are not cheap, and they can cause havoc in some scenarios. Do we want such an approach to support debug scenarios tied strictly to one machine? I say we don't.

> And in this regard it's actually not bad that logDir has some random string in the production build

Linux package maintainers will disagree. You make the build result depend on the file system structure of the computer used to build it. 

---

I'm very much confused by this approach. Probably, it doesn't cause any noticeable difference for you, but I am very much against it.

Please create a separate config for the pitch-shifter. If you want to stick to reading files for now, please make access to the files conditionally compiled. I also prefer you use an executable/data path as a root for those files.

In the future, if we want to expose these settings to users, it would be a very quick and easy operation. 
"
1523018012,6068,saintmatthieu,2024-03-13T11:06:36Z,"> I don't understand this point. Why do we need it deterministic? How much do we care about this determinism?

For A/B comparison before and after some algorithmic tweaks, for example. I might want to make sure that my modifications do affect the signal, so I render it once before and once after. If the process weren't deterministic I couldn't tell."
1523054062,6068,saintmatthieu,2024-03-13T11:29:55Z,"> You make the build result depend on the file system structure of the computer used to build it.

I don't understand how that matters: it's intended for development and functional only for local builds. But I don't mind using an app-data directory. I was lazy but it has advantages.

> Open/read/close are syscalls. They are not cheap, and they can cause havoc in some scenarios.

I didn't have this in mind. I want to reduce conditional compilation to a maximum to avoid code becoming outdated, but if it's only just around the file opening that's completely fine."
1523064406,6068,crsib,2024-03-13T11:37:11Z,">  it's intended for development and functional only for local builds

You push it to production builds, and that matters.

> I want to reduce conditional compilation to a maximum

You push the code only needed for the feature tuning into the production build. Expensive code. 
"
1523263739,6068,Paul-Licameli,2024-03-13T13:29:14Z,"What compilation warning was fixed by the first commit?
"
1523269395,6068,saintmatthieu,2024-03-13T13:32:27Z,loss of precision warning (size_t vs int or the other way round)
1523315705,6068,Paul-Licameli,2024-03-13T14:00:06Z,"This page recommends `add_compile_definitions` instead https://cmake.org/cmake/help/latest/command/add_definitions.html

You use this macro in `FormantShifterLogger.cpp`.  I would choose a different name for the macro, like THIS_DIRECTORY, just so we aren't confusing compile-time preprocessor symbols with Cmake configure-time variables.

This commit fails to compile.

```
/Users/paullicameli/Github/audacity/libraries/lib-time-and-pitch/FormantShifter.cpp:104:31: error: no member named 'getSize' in 'staffpad::audio::FourierTransform'
   const auto fftSize = mFft->getSize();
                        ~~~~~~^
```"
1523325347,6068,Paul-Licameli,2024-03-13T14:06:00Z,"Perhaps a `ComplexFloat` alias will be convenient
"
1523516686,6068,Paul-Licameli,2024-03-13T15:47:53Z,"This unnecessary temporary vector construction makes me wish we had `std::span` instead.

Maybe instead let `PrintPythonVector` take a range of iterators as two arguments.
"
1523692769,6068,crsib,2024-03-13T17:53:06Z,This code only works on Windows
1524301125,6068,saintmatthieu,2024-03-14T06:29:30Z,"That's all right, I only need it there, and if someone needs it elsewhere, she can generalize it."
1524313426,6068,saintmatthieu,2024-03-14T06:46:53Z,"Update: after some clean-up there now is an alternative, dummy implementation that's injected for production."
1528987470,6068,crsib,2024-03-18T17:35:30Z,"It seems that you use the mutex for making parts of the TimeAndPitchInterface to be thread safe. I don't understand, why this mutex is not in the TimeAndPitchInterface implementation in this case."
1529796668,6068,saintmatthieu,2024-03-19T06:27:08Z,"In `ClipSegment.cpp`, you can see that we add two callbacks for pitch shift change and formant preservation toggling. These callbacks are issued from the main thread, meanwhile the processing is on the audio thread.
Since we have the guarantee that the `StaffPadTimeAndPitch` ctor is completely executed before these callbacks are registered, it would be safe to internalize the mutex, but the safety is more straightforward to implement and for reviewers to verify this way.
The drawback with this approach is that we lock the mutex at frame rate also if there is no time stretching. I still haven't got to the bottom of whether this is a bad thing, and I was thinking maybe you could enlighten me. In our case there'd only be contention when the user changes pitch during playback."
1530019461,6068,crsib,2024-03-19T09:34:18Z,"> straightforward to implement and for reviewers to verify this way

Considering that it caught my attention, I would disagree that it is better approach from the reviewer point of view :-)"
1211374578,4668,crsib,2023-05-31T09:36:06Z,"Ideally (not critical now, though) we should ditch `m` prefix. This members are no longer private  :-)"
1211374928,4668,crsib,2023-05-31T09:36:19Z,`final`?
1211380216,4668,crsib,2023-05-31T09:40:21Z,I wonder if it is safe
1211387303,4668,crsib,2023-05-31T09:45:07Z,"No range checks are performed. I understand that it was the case in the original code, but some safety here won't hurt :-)"
1211392468,4668,crsib,2023-05-31T09:49:13Z,"We must describe what happens if the format index is not in `[0, GetFormatCount())`.

Should we return the default format? This generally happens in this commit but not for every plugin. Should we return empty format info, which will break the assumption that there is always at least one file extension? Should we throw? 

In any case, it needs to be decided and then uniformly followed. "
1222854726,4668,crsib,2023-06-08T10:40:56Z,LOL
1229181080,4668,crsib,2023-06-14T07:58:08Z,Do we really (like really) want to make the function non idempotent? I don't quite understand why 
1229186391,4668,crsib,2023-06-14T08:02:15Z,There are 9 places where such code is used in this commit. Should we give it a name?
1229187850,4668,crsib,2023-06-14T08:03:29Z,I would've called it something like `ProgressDialogProgressListener`or similar. Not Generic for sure :-)
1229197430,4668,crsib,2023-06-14T08:11:07Z,I believe that readabily would benefit from moving `ExportResult` out of the `ExportProgressListener` scope
1229201969,4668,crsib,2023-06-14T08:14:38Z,Looks like a typo to me.
1229252669,4668,crsib,2023-06-14T08:52:27Z,I think it worth documenting this flags
1229688447,4668,crsib,2023-06-14T14:12:00Z,"Usually it doesn't return nullptr. For example `return wxDynamicCast(wxWindow::FindWindowById( miId, mpDlg), wxBitmapButton);`"
1230682943,4668,crsib,2023-06-15T08:59:28Z,Early continue to reduce nesting?
1230888995,4668,crsib,2023-06-15T11:46:37Z,I wonder if we should find a way to populate this list from the module CMakeLists.txt
1234995560,4668,crsib,2023-06-20T09:26:25Z,Should the exceptions inherit AudacityException? (Or even MessageBoxException)
1235008549,4668,crsib,2023-06-20T09:37:23Z,"I wonder if this is useful at all :-)

`FFmpeg for Audacity` doesn't ship executables for a long time, `Lame for Audacity` is long deprecated"
1235012905,4668,crsib,2023-06-20T09:41:05Z,Should it be `mContext`?
1235087928,4668,crsib,2023-06-20T10:50:24Z,Should it be `lib-tags-interface`?
1235093037,4668,crsib,2023-06-20T10:54:44Z,"static_cast or ""constructor"" cast?"
1235145368,4668,crsib,2023-06-20T11:44:32Z,Why is this list empty?
1235145582,4668,crsib,2023-06-20T11:44:46Z,Ditto
1235189634,4668,crsib,2023-06-20T12:25:21Z,Should this be XO? Should there be an i18n-hint?
1235204240,4668,crsib,2023-06-20T12:37:46Z,"It doesn't look exactly clean...

Nothing better really comes to mind now"
1235223662,4668,crsib,2023-06-20T12:53:21Z,Early `continue`?
1235227009,4668,crsib,2023-06-20T12:55:56Z,Should this be moved out of the function into the anon namespace?
1239492586,4668,vsverchinsky,2023-06-23T07:52:31Z,I can do that in a separate commit
1243308114,4668,vsverchinsky,2023-06-27T08:03:03Z,"Each implementation has non-empty list of extensions, so formally - yes, it's safe
```
FileExtension ExportPlugin::GetExtension(int index)
{
   return mFormatInfos[index].mExtensions[0];
}
```
"
1243338684,4668,vsverchinsky,2023-06-27T08:27:42Z,"Isn't relevant any more, sorry for confusion :)"
1243339672,4668,vsverchinsky,2023-06-27T08:28:27Z,"Isn't relevant too, sorry again :)"
1243343210,4668,vsverchinsky,2023-06-27T08:31:10Z,This is done in the later commit
1243349786,4668,vsverchinsky,2023-06-27T08:36:16Z,Thanks!
1254218624,4668,vsverchinsky,2023-07-06T10:01:11Z,"It could be, but when I reviewed the implementation of `MessageBoxException`'s delayed handler I found out that this doesn't map well to the current behaviour, which I tried to preserve as much as possible. `ExportException` replaces (not literally ofcourse) `BasicUI::ShowMessageBox` which doesn't have counterpart in `AudacityException` hierarchy"
1268210948,4668,vsverchinsky,2023-07-19T15:03:23Z,There is a check now
1268214186,4668,vsverchinsky,2023-07-19T15:05:50Z,"Added a comments to this function about desired behaviour, also `FormatInfo`'s and `ExportPlugin`s are now accessed via Container-like `ExportPluginManager` class"
1268215587,4668,vsverchinsky,2023-07-19T15:06:53Z,"Yes, indeed, this is fixed in the later commit, but the error is still hidden somewhere in the commit history"
1268216243,4668,vsverchinsky,2023-07-19T15:07:06Z,Added in the later commit
1268216816,4668,vsverchinsky,2023-07-19T15:07:16Z,Done
1268220396,4668,vsverchinsky,2023-07-19T15:09:57Z,Done
1268220552,4668,vsverchinsky,2023-07-19T15:10:06Z,Done
1268224428,4668,vsverchinsky,2023-07-19T15:12:56Z,AFAIK OGG/Vorbis does not imply any predefined sample rate constraints.
1268225659,4668,vsverchinsky,2023-07-19T15:13:52Z,Done
1268226268,4668,vsverchinsky,2023-07-19T15:14:17Z,Replaced with ranged for
1268226586,4668,vsverchinsky,2023-07-19T15:14:33Z,Done in later commit
1269785368,4668,crsib,2023-07-20T17:49:57Z,I'd like to see a proper check here as well. 
1270509369,4668,crsib,2023-07-21T10:15:08Z,Why not `b`?
1270541588,4668,crsib,2023-07-21T10:52:58Z,But is it really a preferred option? I think joint stereo reduces the quality.
1270563482,4668,LWinterberg,2023-07-21T11:19:23Z,"I'm fairly confident that it doesn't.  Joint stereo does a per-frame M/S encoding, rather than L/R encoding where the channels are similar, and where they aren't, it switches back to L/R encoding. LAME makes this decision for every MPEG frame. 

LAME also has options to force M/S encoding (`-m f` instead of `-m j`), which I hope we don't use. "
1270568961,4668,crsib,2023-07-21T11:26:16Z,"Yeah, judging by https://github.com/enzo1982/freac/discussions/329 and LAME source code you are correct"
1270589994,4668,DavidBailes,2023-07-21T11:51:39Z,"> Yeah, judging by [enzo1982/freac#329](https://github.com/enzo1982/freac/discussions/329) and LAME source code you are correct

And here: https://wiki.hydrogenaud.io/index.php?title=Joint_stereo#MP3"
1196560264,4701,saintmatthieu,2023-05-17T13:52:39Z,"@crsib I don't know the consequences of this, but that'd be the easiest fix for me :D So tentatively proposing it."
1196649252,4701,saintmatthieu,2023-05-17T14:53:33Z,Does that mean users with MacOS < 10.15 wouldn't be able to run newer Audacity releases ?
1196748810,4701,crsib,2023-05-17T16:02:39Z,"This will break macOS. We cannot have a target greater than 10.13.

Also, raising a target requires a lot of thought and discussion. We have plenty users on older macOS versions "
1198869563,4701,saintmatthieu,2023-05-19T11:45:41Z,"That's all right, I gave up on using (experimental/)filesystem to fix this."
1205986617,4701,Paul-Licameli,2023-05-25T20:43:54Z,"I repeat my previous suggestion:  add the .h files to this list please.  It may not be necessary to build, but I will make the headers known to the IDE file browsers as part of the project, and that is more convenient."
1206358241,4701,saintmatthieu,2023-05-26T07:43:26Z,"I agree, just forgot. "
1209133382,4701,crsib,2023-05-29T09:42:56Z,`final` would be much appreciated. 
1209136334,4701,crsib,2023-05-29T09:46:30Z,Why the function is not `const`?
1209141059,4701,crsib,2023-05-29T09:50:49Z,"Maybe?
```
auto channelData = vectorVector.emplace_back(numSamplesPerChannel).data();
pointerVector.push_back(channelData);
```"
1209141440,4701,crsib,2023-05-29T09:51:10Z,More descriptive names would be much appreciated
1209144143,4701,crsib,2023-05-29T09:53:48Z,Generally we don't use such prefixes
1209149956,4701,crsib,2023-05-29T09:58:19Z,"Generally, we always use CamelCase for methods. "
1209166622,4701,crsib,2023-05-29T10:18:24Z,"I don't think that we should reformat a 3d party library. I would prefer to have it as is while it is included as a part of Audacity, so updating the library will generate sane diffs"
1209168024,4701,crsib,2023-05-29T10:20:08Z,"It is advisable to always have a new line at the end of file. At least it would remove annoying red mark from the reviews :-)

If you use VSCode, please install the EditorConfig extesnsion, it will handle this issue for you."
1209170410,4701,crsib,2023-05-29T10:23:34Z,"I wonder if we want this to be globally visible to all tests. Also, please at least prefix new files with 

```/*  SPDX-License-Identifier: GPL-2.0-or-later */``` 
and, ideally, with a longer comment with author and file name"
1209173188,4701,crsib,2023-05-29T10:26:56Z,I would much prefer relying on working directory here
1209177074,4701,crsib,2023-05-29T10:32:26Z,"Let's avoid using legacy CMake. `target_compile_definitions` is a cleaner way to achieve the result. 

However, I would prefer a different approach, without the hardcoding of the path. For example, `add_unit_test` can be extended to accept the working directory of the test."
1209179472,4701,crsib,2023-05-29T10:36:04Z,Do we need this factory method here at all though?
1209185809,4701,crsib,2023-05-29T10:45:05Z,Should we check that ratio has really changed? 
1209190216,4701,crsib,2023-05-29T10:50:04Z,I think `static_cast<double>` is redundant here
1209192167,4701,crsib,2023-05-29T10:52:44Z,I wonder if we should make this value to be configurable
1209197247,4701,crsib,2023-05-29T11:00:17Z,"Hmm, it looks a bit odd that this function does not return the number of samples that were written to the output. If it is expected, that the tail is always zero-filled - it should be stated in the docs."
1209203294,4701,crsib,2023-05-29T11:08:22Z,"I think that output buffers should be allocated only once. Allocation is not free, especially in multithreaded environments, and provided that you ask for a few kilobytes it won't be noticeable. "
1209204948,4701,crsib,2023-05-29T11:10:17Z,This looks like a UB to me. GetSamples provides no way for a caller to know if the output was modified at all.
1209210328,4701,crsib,2023-05-29T11:17:09Z,"Given that AudioSource is never copied in StaffPadTimeAndPitch, I think that `numPulledFrames = 0ULL` is sufficient here"
1209212449,4701,crsib,2023-05-29T11:20:31Z,`target_compile_options` and only on Windows please
1209213698,4701,crsib,2023-05-29T11:22:16Z,"But I would rather define something like ""USE_EXPERIMENTAL_FILESYSTEM"" only on macOS to avoid the potential compilation breakdown when some newer compiler decides to drop this headers from the stdlib"
1209216180,4701,crsib,2023-05-29T11:24:43Z,"Or this way, yes :-)"
1209218703,4701,crsib,2023-05-29T11:26:42Z,"Well, the problem is resolved now :-)"
1209220268,4701,crsib,2023-05-29T11:28:19Z,I'm not sure I understand this condition.
1209747004,4701,saintmatthieu,2023-05-30T06:09:08Z,`channelVectors` ?
1209881509,4701,saintmatthieu,2023-05-30T08:07:02Z,"Mmh, yeah. I'm most at peace editing files that are formatted, 'cos sometimes I don't realize I'm auto-formatting and end up having to triage my changes, which is really painful. But I suppose these are not files I'll be editing often."
1209891806,4701,saintmatthieu,2023-05-30T08:13:50Z,"> I wonder if we want this to be globally visible to all tests.

Not sure I understand. You'd place `WavFileIO`'s definition directly in `StaffPadTimeAndPitchTest.cpp` ?

👍 for the prefix."
1209898054,4701,saintmatthieu,2023-05-30T08:17:53Z,Why? That could be a pain to whoever wants to run this test. (It was to me.)
1209918348,4701,saintmatthieu,2023-05-30T08:30:35Z,"> accept the working directory of the test

as in a launch configuration? I only found a solution for VS : https://stackoverflow.com/questions/23950887/does-cmake-offer-a-method-to-set-the-working-directory-for-a-given-build-system"
1209931680,4701,saintmatthieu,2023-05-30T08:39:08Z,StaffPad's `TimeAndPitch` allows configuring it. I personally don't see what's the big deal so I wouldn't. It determines the capacity of some ring buffer.
1209942515,4701,saintmatthieu,2023-05-30T08:45:49Z,"Come to think of it, if `maxBlockSize` equalled the number of samples typically queried by `MixerSource` at once (I've seen 2400 in my debugging, but haven't looked for where it comes from), some looping could be avoided. Will look into this."
1209949937,4701,crsib,2023-05-30T08:50:22Z,"There are different cases. For real-time processing, we may want to have this value lower; for rendering or destructive processing - a higher value might be helpful. 

Right now, Audacity largely ignores any latency settings, using some random context-dependent hardcoded values, but this surely will change. "
1209951032,4701,crsib,2023-05-30T08:51:05Z,https://cmake.org/cmake/help/latest/prop_test/WORKING_DIRECTORY.html
1209953125,4701,crsib,2023-05-30T08:52:26Z,I'd place it near the mocks :-) That's it - in `tests` directory.
1209974295,4701,saintmatthieu,2023-05-30T09:06:39Z,"All righty: `PlaybackPolicy::BufferTimes::batchSize`, together with the sample rate, leads to those 2400.
I also did some debugging using the unit test querying the same number of samples at a time than `maxBlockSize`. Yes, there'd be a little less looping, but that wouldn't spare any significant calculation. I could wire up those two when I integrate the time stretcher, but I think the added code complexity isn't worth it."
1209976521,4701,saintmatthieu,2023-05-30T09:08:31Z,"Oj, sorry, you're also reviewing commit by commit ... This gets changed in a later commit."
1209981142,4701,crsib,2023-05-30T09:11:50Z,"Consider we have finally done ASIO or any low latency API right. In this case, something like 128 samples won't be unrealistic, but Time Stretcher will just become another place we must fix. 

> PlaybackPolicy::BufferTimes

This is something that needs to be addressed soon. `BufferTimes` manages to ignore user settings and hardware requirements simultaneously. It was a reason for a P1 bug on ALSA, which is not quite fully fixed now. 
"
1209981964,4701,crsib,2023-05-30T09:12:32Z,"Yeah, my fault xD"
1209982814,4701,saintmatthieu,2023-05-30T09:13:15Z,What's UB?
1209983585,4701,crsib,2023-05-30T09:13:54Z,Undefined behavior
1210003549,4701,saintmatthieu,2023-05-30T09:30:19Z,"Just added the following comment (not pushed yet):
```cpp
   // If our audio source isn't empty, we'll have samples to feed
   // `mTimeAndPitch` with, who in turn will yield some audio.

   // It can also be that our source is empty, but `mTimeAndPitch` still has
   // samples in its ISTFT buffer. We don't want to miss those ...

   // As for `mNumTrailingZeros`, those are zero-pad samples we had to feed
   // `mTimeAndPitch´ with such that it can make an STFT window out of it. Those
   // zeros will be seen by `mTimeAndPitch` as normal input, but for us it will
   // just be a tail of decaying near-zero values, a resonance of sort. We might
   // use it for cross-fading later, but for now just do as though it were exact
   // zeros and avoid delaying whatever `WaveClip` comes after.
```"
1210017835,4701,saintmatthieu,2023-05-30T09:42:07Z,"Aha, now I get you. You mean `tests` under root. With pleasure."
1210044126,4701,saintmatthieu,2023-05-30T10:03:49Z,"Doesn't work for me unfortunately. I tried this (in AudacityTesting.cmake)
![image](https://github.com/audacity/audacity/assets/22740106/3b67ea23-3ff3-4946-9f47-0846370999e6),
as well as `set(WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})` in that same function. Working directory is still `$(ProjectDir)`.
"
1210068756,4701,saintmatthieu,2023-05-30T10:26:48Z,To be clear : `maxBlockSize` won't change the algorithmic latency at all. We really only are talking about making the batch size with the internal ring buffer size to maybe avoid some loop iterations. The output should be bit-exact regardless of the batch size.
1210070876,4701,crsib,2023-05-30T10:28:48Z,"But the ring buffer size will change, that's the point :-)"
1210071039,4701,saintmatthieu,2023-05-30T10:28:57Z,"I just verified : batch size 512 or 1234 yield bit-exact output. However, I tried 128 as well, and there the output not only differs but it isn't stretched properly anymore ...

- [x] @saintmatthieu look into this"
1210078574,4701,saintmatthieu,2023-05-30T10:36:15Z,"I mixed up batch and maxBlockSize in my previous comment. Just verified that `maxBlockSize` 1024 or 512 yield bit-exact results. 128, on the other hand, also yields a different result, though."
1210176804,4701,saintmatthieu,2023-05-30T12:08:14Z,"> But the ring buffer size will change, that's the point :-)

So your concern is unnecessarily large memory allocation?"
1210181047,4701,crsib,2023-05-30T12:12:17Z,"No. Why? I don't quite get why to hardcode this value, while it doesn't match anything in the system :-)

Simply having SetMaxBlockSize()/GetMaxBlockSize() won't hurt, even if it won't be used for the first time :-)"
1210181656,4701,saintmatthieu,2023-05-30T12:12:49Z,"I agree that the code as is could leave some data unchanged, possibly garbage, at the tail of `output`, and a `memset` to zero may be useful. But I don't get the undefined behavior part."
1210187046,4701,crsib,2023-05-30T12:17:56Z,The caller has absolutely no way of knowing the call's results and will likely pass the buffer for further processing. I think that number of samples written should be returned in any case.
1210188531,4701,saintmatthieu,2023-05-30T12:19:15Z,"> I agree that the code as is could leave some data unchanged, possibly garbage

That's not even correct, actually. I don't see how this function cannot set all required samples. The `break` you highlighted does not break the outer loop."
1210236782,4701,saintmatthieu,2023-05-30T12:59:39Z,"I disagree that it won't hurt. Audacity's code is complex enough as it is, if there isn't a good reason for clients of this class to change that, then we shouldn't offer a way of changing it."
1210306373,4701,saintmatthieu,2023-05-30T13:50:08Z,"Oops, that was for experimenting, I should revert that.

- [x] @saintmatthieu revert"
1210512064,4701,saintmatthieu,2023-05-30T16:11:21Z,I found the 128 batch size / block size problem and pushed a fix.
1212088380,4701,crsib,2023-05-31T17:52:13Z,Should we return `true` here? If I remember correctly - this will force `SetTimeAndPitch` to reboot anyway. Chances are I am wrong :-)
1212089456,4701,crsib,2023-05-31T17:53:13Z,"So we are not making it configurable for now? That's fine, but I don't think that fixing it will take any time"
1212737492,4701,saintmatthieu,2023-06-01T07:47:03Z,"Crap, you're right. Thanks for staying vigilant."
1212789918,4701,saintmatthieu,2023-06-01T08:30:10Z,"I apologize for having wasted your time, but I just pushed [8fbb14668](https://github.com/audacity/audacity/pull/4701/commits/f734716e7e9d4a8f6eec842f0cb7b2ea9bf4343f), which removes the possibility of changing time or pitch ratios on the fly. The rationale behind is in the commit message."
1296529480,5042,Paul-Licameli,2023-08-16T23:24:22Z,“Access”
1296530631,5042,Paul-Licameli,2023-08-16T23:26:41Z,“Rules”
1297096614,5042,Paul-Licameli,2023-08-17T11:37:40Z,"Please comment that the new setting functions will succeed with out-of-bounds requests, only changing what is in bounds.
"
1297100361,5042,Paul-Licameli,2023-08-17T11:41:32Z,"Is this description really what we want?

To be REALLY strictly conservative of program behavior, in the case of not time stretching, it's possible two clips were separated by a tiny gap of one or two sample intervals, but the paint brush might affect both.

And maybe nobody in the history of Audacity actually ever did this.
"
1297103487,5042,Paul-Licameli,2023-08-17T11:44:42Z,"`backward` seems surprising as the default value.  But you never call it with the default.
"
1297105451,5042,Paul-Licameli,2023-08-17T11:46:43Z,"ditto, default argument
"
1297114599,5042,Paul-Licameli,2023-08-17T11:56:16Z,"This function is used in two places, and this change, while avoiding that pop-up when you click between clips, also will change the hit test to return a handle in the case that it did not do so before.

Does clicking and dragging in the empty space between clips make any vacuous undo/redo items?
"
1297116710,5042,Paul-Licameli,2023-08-17T11:58:25Z,"Aha, I tried the build.  Yes it does!

So instead the hit testing function should also be changed to return null when there is no clip.
"
1297121368,5042,Paul-Licameli,2023-08-17T12:02:48Z,"Actually... that's an old defect, which you might fix.

I just tried released Audacity.  When the magnification does show samples, but you click and drag outside of a clip, still you do get a bogus undo/redo item.
"
1297170255,5042,Paul-Licameli,2023-08-17T12:44:34Z,"Actually an old problem, and I was confused about something.  `HitTest` only happens with the * tool button.  With the pencil tool button, you can click anywhere and it has always been like that.

"
1297171680,5042,Paul-Licameli,2023-08-17T12:45:49Z,"`SampleHandle::HitAnywhere` is also used in WaveformView.cpp in this case.
"
1304416629,5042,Paul-Licameli,2023-08-24T14:21:44Z,"I think that's not the right issue number
"
1308414953,5042,Paul-Licameli,2023-08-29T08:32:01Z,Omitting
1308692145,5042,Paul-Licameli,2023-08-29T11:45:28Z,"You need more comments to clarify:

When direction is backward, the buffer of given samples is not reversed, and `t` rounds to the time of the clip sample corresponding to the past-the-end position.
"
1308693059,5042,Paul-Licameli,2023-08-29T11:46:10Z,"Clarify that the resulting samples are not reversed when direction is backward.
"
1312832951,5042,saintmatthieu,2023-09-01T09:59:54Z,"Now that clips can be stretched, we have to choose between constant time or constant sample-count brush radius. The approach I took is the latter. But then, samples of a clip 10 seconds away should not be taken into account. So I went for the simple rule that they have to touch each other, or nothing happens.
I also reckon we won't run into trouble because of this subtle change of behaviour."
1312833470,5042,saintmatthieu,2023-09-01T10:00:28Z,"Right, makes no particular sense - removed it (and moved this method to `private`)."
1313133479,5042,saintmatthieu,2023-09-01T14:45:43Z,"> Actually... that's an old defect, which you might fix.

Each time `SampleHandle::Release` is called (when letting go of the mouse with pencil tool activated), a history item is pushed. The easiest solution to this I can think of would be to create a `bool mSampleMoved`, whose value is set to true whenever a sample is modified, checked when releasing, and then set to false again. That'd be something totally new, and not completely trivial to review.
"
1313140314,5042,saintmatthieu,2023-09-01T14:51:53Z,Moved those to `private` and made comments a bit more precise.
1324857818,5042,Paul-Licameli,2023-09-13T17:39:32Z,"""excluding""
"
1324870922,5042,Paul-Licameli,2023-09-13T17:52:48Z,"As always, I see `as_size_t` and think, what's the proof of satsifaction of the assertion?

Here, ""it's easy to prove that the expression is bounded by numFloats"".  So just say that in a comment.
"
1324872490,5042,Paul-Licameli,2023-09-13T17:53:42Z,"likewise
"
1324882822,5042,Paul-Licameli,2023-09-13T18:00:59Z,"Please comment in the header that the function may rewrite only a subrange of `[buffer, buffer + nFloats)`, leaving unchanged the buffer positions not corresponding to part of the clip play region.
"
1324885498,5042,Paul-Licameli,2023-09-13T18:03:43Z,"Please comment that `[buffer, buffer + 2 * numSizeSamples + 1)` is assumed to be a valid span of addresses, and likewise that only a subrange may be overwritten.

In other words zero-filling is not promised for the rest.
"
1324897974,5042,Paul-Licameli,2023-09-13T18:16:01Z,"""effective""
"
1324906769,5042,Paul-Licameli,2023-09-13T18:24:20Z,"`WaveClip::SnapToSample` analogous to the `WideSampleSequence` member function might be nice
"
1324923391,5042,Paul-Licameli,2023-09-13T18:39:30Z,"I might simplify all that with 
`#include <type_traits>`
and
`template<typename T> using BufferCharType =
   std::conditional_t<std::is_const_v<std::remove_pointer_t<T>>, constSamplePtr, samplePtr>;`
"
1324929089,5042,Paul-Licameli,2023-09-13T18:45:30Z,"I think the template argument can be omitted, nicely deduced from arguments"
1324929248,5042,Paul-Licameli,2023-09-13T18:45:38Z,"here too
"
1325747821,5042,Paul-Licameli,2023-09-14T10:31:17Z,"`GetSamples` (not a new function) should also comment that `start` is relative to play start
`GetFloatAtTime` should comment that `t` is relative to play start
"
1325772934,5042,Paul-Licameli,2023-09-14T10:55:02Z,Explain the strange use of `1e6`
1325774284,5042,Paul-Licameli,2023-09-14T10:56:15Z,"Rounding to the nearest millionth of a sample?  Why?
"
1325780274,5042,Paul-Licameli,2023-09-14T11:01:54Z,"In the case that `max` above clipped a negative value to 0,  should the buffer instead get some zeroes at `buffer + alreadyRead` (if writing), and should the first member of the return be a later position?

Maybe not but I'm trying to understand the usage
"
1325782291,5042,Paul-Licameli,2023-09-14T11:03:48Z,"Some comment why this is a safe `as_size_t`?
"
1325784212,5042,Paul-Licameli,2023-09-14T11:05:36Z,"Similar question whether this is the right thing when `min` above did some work
"
1325789221,5042,Paul-Licameli,2023-09-14T11:10:28Z,"This loop may concatenate samples from clips of different stretch ratios into one buffer, and then we forget about the stretches and operate on the buffer.

Understand that I objected to this for Plot Spectrum (weightings of windows in the combined result might be wrong) and for Mixer Board (RMS calculations may be wrong again for mis-weighting, but I let that problem go).

But here, doing microscopic repairs with your pencil or the even less-known paintbrush tool, it is defensible.



"
1325796298,5042,Paul-Licameli,2023-09-14T11:17:27Z,"I think `>=` makes me surer of loop termination just looking at this function.
"
1325796813,5042,Paul-Licameli,2023-09-14T11:17:57Z,"Again `>=` would look better to me
"
1325801032,5042,Paul-Licameli,2023-09-14T11:21:49Z,"Here and elsewhere you use this or `GetNextClip`, there is a sorting of the clips each time.

Probably unimportant in practice for performance.

"
1325802214,5042,Paul-Licameli,2023-09-14T11:22:56Z,"Next, not Adjacent; and I understand why
"
1325823537,5042,Paul-Licameli,2023-09-14T11:42:50Z,"I think the ""so quantize time"" part no longer makes sense
"
1325831405,5042,Paul-Licameli,2023-09-14T11:50:15Z,"This old comment should instead say, set a range of samples around the mouse event"
1325836833,5042,Paul-Licameli,2023-09-14T11:55:14Z,"Does it ever divide by 0?
"
1325838042,5042,Paul-Licameli,2023-09-14T11:56:18Z,"Here too, shorten the confusing comment
"
1327461060,5042,saintmatthieu,2023-09-15T15:28:51Z,Ok.
1328488900,5042,saintmatthieu,2023-09-18T09:52:50Z,"It might easily be confused for `WaveTrack::SnapToSample`, though. This manipulation is safe here in this `RoundToNearestClipSample` function, I'd leave it as it is if there aren't other needs elsewhere for it."
1328605437,5042,saintmatthieu,2023-09-18T11:47:58Z,"I can't remember. Just did a quick test with regular rounding, works too. I'll use a simple rounding, and next time should comment."
1328615416,5042,saintmatthieu,2023-09-18T11:57:34Z,"I'm not sure I understand your question.
`alreadyRead` means `[buffer, buffer + alreadyRead)` are indices that already have been dealt with.
`startSamp` tells which first sample index of the clip matches `buffer + alreadyRead`.
"
1328623579,5042,saintmatthieu,2023-09-18T12:05:42Z,Will comment.
1328659124,5042,saintmatthieu,2023-09-18T12:36:42Z,"If `min` did some work, then `startOrEndTime` was past the end of the clip.
> should the first member of the return be a later position?

It may be confusing to have this buffer offsetting amidst this more complex code. All the offset is doing is moving the read-write pointer according to the number of samples already read/written. It should not be concerned with the number of samples remaining to read from the clip."
1328661572,5042,saintmatthieu,2023-09-18T12:38:48Z,Ok (for both)
1328669474,5042,saintmatthieu,2023-09-18T12:45:42Z,"Good question. The code before didn't check, but I cannot guarantee that my changes do not change that particular thing.
Adding a check upstream."
1329971569,5042,Paul-Licameli,2023-09-19T11:31:28Z,"Actually, your informal proof here is wrong.  What if `t` happens to be a very negative value?

So to be safe you should write
`const auto numLeadingZeros = limitSampleBufferSize(numFloats, effectiveStart - maybeNegativeStart);`"
1329971950,5042,Paul-Licameli,2023-09-19T11:31:52Z,See latest in the conversation
1329974376,5042,Paul-Licameli,2023-09-19T11:34:16Z,You mean `clang-format` here and again below
1329975656,5042,Paul-Licameli,2023-09-19T11:35:35Z,"""addresses""
"
1330144731,5042,saintmatthieu,2023-09-19T13:38:45Z,"No, I meant `clan-format` XD"
1330157801,5042,saintmatthieu,2023-09-19T13:46:01Z,"By substitution, `effectiveStart - maybeNegativeStart == std::max(sampleCount { 0 }, maybeNegativeStart) - maybeNegativeStart`,
and `maybeNegativeStart = TimeToSamples(t)`. So if `t < 0`, then `effectiveStart - maybeNegativeStart == - maybeNegativeStart`, that is, a positive value.

For `t` to be negative is actually not a corner case, here, and the code has proven to work well as far as my testing went, which is another evidence that it is correct."
1331399387,5042,Paul-Licameli,2023-09-20T10:13:05Z,Keep the comment of old line 221
643608503,830,Paul-Licameli,2021-06-02T02:32:09Z,"For this command, you take away the checkbox for grayscale, because there is now a more-than-binary choice.

You should put back a a choice control so that this command can still set the visuals.

See examples of the use of TieChocie in the src/commands directory for how to do it.
"
644088942,830,Paul-Licameli,2021-06-02T15:40:46Z,"In C++11 and later, it's preferable not to use typedef but instead:
`
using ColorScheme = int;
`
However -- I'd rather not use this line at all..."
644098990,830,Paul-Licameli,2021-06-02T15:52:03Z,"... and instead write
`
enum ColorScheme : unsigned {
`
I find it preferable to make static type distinctions where you can to aid compile time checking.
"
644109224,830,Paul-Licameli,2021-06-02T16:04:14Z,"You should say that somehow with a compile time assertion
`
static_assert(SpectrogramSettings::csNumColorScheme == colorSchemes, ""Broken correspondence "");
`

But don't put that line in this file.  Avoid another #include and instead put in in SpectrogramSettings.cpp

"
644113807,830,Paul-Licameli,2021-06-02T16:10:12Z,"Why changed from 512?
I'm not saying it's wrong."
644117930,830,Paul-Licameli,2021-06-02T16:15:19Z,"Add
`@file`
for Doxygen

But where is this file used?  I can't find it.
"
644119238,830,Paul-Licameli,2021-06-02T16:17:01Z,"Note that this change will also break any macro scripts in existence that happen to use this checkbox parameter.

But I think that is unimportant.  Do nothing about that.
"
644128901,830,Paul-Licameli,2021-06-02T16:29:34Z,"See examples of use of the class (template) `EnumSetting`.
Use a global `EnumSetting<SpectrogramSettings::ColorScheme>` object
It can be a static -- it isn't needed outside of this file.
Still the purpose of use is to eliminate repetition of the string literal path and also the default value passed to Read().
Replacing coincident literals with a declared name is a good thing.
"
644147080,830,Paul-Licameli,2021-06-02T16:45:39Z,"You are no longer using this preference.  But (unlike with the case of macros, a more rarely used expert feature) we do not want to ignore the problem of compatibility of old user preferences, in case someone already preferred grayscale.

So where you do use an `EnumSetting`, you should also supply this old path as the optional constructor argument.

You should also then override the Migrate() method, because the default implementation won't do the right thing.  The old possible values of 0 and 1 will not map identically to the new enumerators.  Rather 0 should go to Color (new), which we want to make the default colored spectrogram, but 1 should go to Inverse Grayscale, which is the ""old"" grayscale, in case someone did save that preference.

So see `EnumSettingBase::Migrate()` and adapt it.   Then test this by choosing grayscale as built in head, then run your build.

See audacity.cfg for where the preferences are stored.  Observe the relevant lines inside it.
https://manual.audacityteam.org/man/preferences.html#stored

"
644190366,830,Paul-Licameli,2021-06-02T17:46:14Z,"Audacity's designers are deciding which exact English strings should be shown to the user, and internationalized.

Meanwhile, you should also rewrite this table using the two-argument constructor for `EnumValueSymbol`.  For instance

`
{ L""Default"", XO(""Color (New)"") }
`
The first string, which is not internationalized, can be stable across Audacity versions, identifying the choice in saved preferences, while the user-visible name might be changed.

"
644198505,830,Paul-Licameli,2021-06-02T17:57:38Z, No problems in this file
644198735,830,Paul-Licameli,2021-06-02T17:57:59Z,no problems in this file
644202396,830,Paul-Licameli,2021-06-02T18:02:05Z,"You mean `AColor::colorSchemes`
"
644203621,830,Paul-Licameli,2021-06-02T18:04:05Z,"Also, make a non-static assertion about that correspondence, like
`
wxASSERT(result.size() == csNumColorScheme);
`"
644712456,830,dofuuz,2021-06-03T11:27:12Z,"The change you suggested breaks template type deduction and cause compile errors. (At least at VS2017)
I won't apply this."
644714228,830,dofuuz,2021-06-03T11:30:12Z,"To save memory and gain some speed. It might be trivial.
Anyway, this does not affect visual quality."
644729299,830,Paul-Licameli,2021-06-03T11:56:13Z,"OK ignore that suggestion
"
644775052,830,dofuuz,2021-06-03T13:05:41Z,Spectrogram has per-track setting. Can it really be static? I'm confused.
644783998,830,dofuuz,2021-06-03T13:17:45Z,"Added the static_assert in SpectrogramSettings.cpp, along with `wxASSERT(csNumColorScheme == result.size());`.
I coudln't find better place to put it."
644797427,830,dofuuz,2021-06-03T13:34:40Z,Both of them.
644803931,830,dofuuz,2021-06-03T13:42:50Z,Done
644806098,830,dofuuz,2021-06-03T13:45:25Z,Added 'Spectro. Color scheme' to 'Set Track Visuals' macro command.
644809347,830,dofuuz,2021-06-03T13:49:22Z,"It's included from AColor.cpp.
It contains RGB value of new spectrogram colormap."
644895071,830,Paul-Licameli,2021-06-03T15:30:29Z,"ok leave it so
"
644898960,830,Paul-Licameli,2021-06-03T15:35:23Z,"Now I see, you added the #include in the first commit.  I thought it would be in the same commit that added AColorResources.h.

This means the first commit can't compile. I prefer that each commit in a commit history should compile.

After more complete review, I would like the new commits to be squashed, but it is also good to leave the first refactoring commit separated, and fixed so it compiles.
"
644903112,830,Paul-Licameli,2021-06-03T15:38:54Z,"The old code here is in fact using a global setting.

The system of spectrogram settings leaves something to be desired -- a track can have independent settings, or it can take its settings from defaults, but it can't default individual settings separately.

Don't try to understand and fix all of that -- just understand that where you rewrite usages of a global setting (which are what gPrefs contains), then it is preferable to use an EnumSetting object instead.
"
645649380,830,dofuuz,2021-06-04T15:10:42Z,Done.
645649593,830,dofuuz,2021-06-04T15:10:59Z,Done.
645662958,830,dofuuz,2021-06-04T15:29:12Z,Applied with preference migration 😉
648791916,830,Paul-Licameli,2021-06-10T01:46:19Z,"Thank you for these changes.

But now, we are in the period of ""string freeze.""  That means the message catalog locale/audacity.pot, in which all the XO (and XC) strings are extracted, is in a final form, allowing translators to finish their work.  One of our designers reviewed this project, and specified changes to the user-visible strings.

So you must:

1) change the XO strings above to the XC strings below.  (But leave the wxT strings as they are.)
2) Find these strings in lib-strings/locale/UnusedStrings.h; be sure you have copied them exactly; and delete them from that file.
3) Rebase this branch onto more recent master.  (And while doing that, do an interactive rebase, and make sure all commits in the sequence compile.  I believe the first one does not.  And maybe do some fixups to shorten the list of commits.)
4) Test (using one of the completed languages, such as Dutch) that translation works.  (You change language using the Interface page of Preferences.)
5) Force-push your rebased branch.

```
XC(""Color (default)"",   ""spectrum prefs""),
XC(""Color (classic)"",   ""spectrum prefs""),
XC(""Grayscale"",         ""spectrum prefs""),
XC(""Inverse grayscale"", ""spectrum prefs""),
```
"
648793239,830,Paul-Licameli,2021-06-10T01:50:23Z,"Also for string freeze, the string above must be exactly as the designer specified in UnusedStrings.h.  Cut and paste this string from there (with the comment too, pasted to the line before the line with the string):

```
// i18n-hint Scheme refers to a color scheme for spectrogram colors
XC(""Sche&me"",            ""spectrum prefs""),
```
"
648793806,830,Paul-Licameli,2021-06-10T01:52:07Z,"Also for string freeze, it's too late now to add new user-visible strings -- or else they won't translate from English.  So change this to reuse the same string as in the preferences dialog:

`XC(""Sche&me"", ""spectrum prefs"")`
"
649815422,830,dofuuz,2021-06-11T09:02:24Z,Done
648541598,966,Paul-Licameli,2021-06-09T17:55:59Z,"I suggest a comment string consistent with others recently added to this file:
""Build networking features into Audacity""
""Build support for sending errors to Sentry""

That is, ""Build...""
"
648553185,966,Paul-Licameli,2021-06-09T18:10:33Z,"Dependency on Project.h should not be needed
"
648553599,966,Paul-Licameli,2021-06-09T18:11:10Z,"Project.h again should not be needed
"
648554417,966,Paul-Licameli,2021-06-09T18:12:26Z,"UpdateManager doesn't really use Project except to find its parent window.

Better then, that you simply construct it with a window.  (Passed by reference not pointer if null is not permittted.)
"
648556159,966,Paul-Licameli,2021-06-09T18:15:03Z,"As explained, you should simply pass a window to the constructor.  But even if you really needed the project for other reasons, I would also say:

reinterpret_cast is the cast of last resort which should not be used here.  And don't use C-style pointer casts either in new code.

This should be a simple up-casting operation, for which no explicit cast is needed.  But you need wx/frame.h to make that compile (the compiler needs to see the inheritance relation).
"
648557688,966,Paul-Licameli,2021-06-09T18:17:30Z,"This is where you should find the project's frame, and just pass that instead.

This is happening only when the application initializes, and the project is the empty untitled project that is always made then.

Study of UpdateManager tells me it really only wants a window.  That should be more obvious just from reading this make_unique call.

"
648565608,966,crsib,2021-06-09T18:29:26Z,"This is odd, as I've pointed it out previously and it was fixed "
648567356,966,Paul-Licameli,2021-06-09T18:31:08Z,"Now I understand differently and I'm changing the suggestions of the previous review.

The key is to reason about lifetimes of objects.

The UpdateManager lives as long as the unique AudacityApp object.  (So perhaps it doesn't even need this unique_ptr.  It might just be a static variable, if there is no problem destroying it after the AudacityApp object.)  It has a timer and checks for updates periodically (twice a day).  That might repeat of Audacity is left open a long time.

But, project windows may be opened and closed in that long time, and Audacity might even be in a state where there are no windows (it can be done on macOS, which still leaves a menu bar at top of screen and allows you to switch in and out of the Audacity application.)

This has implications.
"
648569063,966,crsib,2021-06-09T18:32:41Z,No c-cast please. 
648570267,966,Paul-Licameli,2021-06-09T18:33:51Z,"This plain C pointer is dangerous.  It might become a dangling pointer, because the UpdateManager outlives the window.

wxWeakRef<wxWindow> would be safer, but you would still need to check whether it is null whenever you use it.

But better to eliminate this pointer entirely.
"
648570556,966,crsib,2021-06-09T18:34:08Z,We should probably rename `tracking` to `UpdatesChecking` or whatever. Tracking has a lot of negativity attached to it.
648570938,966,crsib,2021-06-09T18:34:30Z,`const` please
648574280,966,crsib,2021-06-09T18:37:33Z,I feel like `ShowExceptionDialog` is a better choice for error messages. This applies to the cases below as well
648577471,966,Paul-Licameli,2021-06-09T18:40:24Z,"You use mParent just so that a modal dialog has some parent window.  But a modal dialog is allowed to have a null parent.

The dialog has a stack-like lifetime and is destroyed before that AudacityMessageBox call is completed.

(A modeless dialog can also have a null parent, but you must then do extra work to be sure it is destroyed at some time.)

I see that this code is rewritten in later commits, but the same remarks apply:

`
            mParent->CallAfter([this] {
                UpdatePopupDialog dlg(mParent, this);
                const int code = dlg.ShowModal();
`

So I say:  don't remember the mParent pointer.  Instead, find a window just when you need it to show the modal dialog.  And if you can't, just use null.

Use FindProjectFrame( GetActiveProject() ).

Include <wx/frame.h>, so the compiler knows wxFrame is-a wxWindow, rather than using a pointer cast.
"
648579401,966,Paul-Licameli,2021-06-09T18:42:18Z,"Where?  At the other closed PR?  The comment and commit history here are confusing.
"
648581014,966,crsib,2021-06-09T18:43:56Z,"Also, wxFrame is a subclass of wxWindow, so no cast is required here at all."
649088802,966,gera-gas,2021-06-10T11:19:23Z,"Renamed on ""Build updates checking features into Audacity""."
649532804,966,gera-gas,2021-06-10T21:07:07Z,"@Paul-Licameli In case, when Audacity have no project windows (macOS case), I guess `FindProjectFrame( GetActiveProject() )` returned `nullptr` and I can't executing next actions below (May be I wrong).
```cpp
wxFrame* parent = FindProjectFrame(GetActiveProject());
parent->CallAfter([this, parent]{ /*some body*/ });
```"
649539479,966,Paul-Licameli,2021-06-10T21:18:48Z,"Then write

`wxTheApp->CallAfter(...`
"
649564857,966,Paul-Licameli,2021-06-10T22:09:28Z,"As I also explained to Vitaly:

See the file FutureStrings.h.  Cut the strings from there.  Paste them into your source code.

Make sure you have copied them exactly, and also cut and pasted any i18n-hint comments that were immediately before the string.

The deletions from FutureStrings.h should also be committed to your branch.
"
649565292,966,Paul-Licameli,2021-06-10T22:10:24Z,"This was the only example in FutureStrings.h that did have an i18n-hint comment.
"
649566555,966,Paul-Licameli,2021-06-10T22:13:09Z,"This use of XO will not find a translation at runtime, because the string is not what is in FutureStrings.h or in locale/audacity.pot.

You should write instead:

```
   informationStr << wxT(""<a href = \""https://github.com/audacity/audacity/releases\"">"")
   informationStr << XC(""Read more on GitHub"", ""update dialog"");
   informationStr << wxT(""</a>"");
```
"
649567115,966,Paul-Licameli,2021-06-10T22:14:20Z,"The strings in FutureStrings.h for this file all use XC (with two arguments), not XO.  It is important to use both arguments for correct lookup.
"
649567711,966,Paul-Licameli,2021-06-10T22:15:44Z,"The convention for naming member functions in Audacity is CamelCase, but also capitalizing the first letter.
"
649570409,966,Paul-Licameli,2021-06-10T22:22:07Z,"Do not assert (parent).  It may be null, on Mac when there is no open window, and that is not because of any logical error in the program or failure to observe pre- and post-conditions.

As we discussed elsewhere, it is safe to make modal dialogs like the exception dialogs below with no parent.  So you do not need the early return."
649571442,966,Paul-Licameli,2021-06-10T22:24:32Z,"As we also discussed, replace the first `parent` with wxTheApp in case parent is null.

Instead of capturing parent in the lambda, you can repeat `FindProjectFrame(GetActiveProject());` inside it, and that may be safer.  There may be a small change that parent is destroyed between executing CallAfter now, and calling the lambda later, leaving a dangling pointer.
"
649581991,966,Paul-Licameli,2021-06-10T22:51:53Z,"An easier way:
`return std::tie(mVersion, mRelease, mRevision) < std::tie(other.mVersion, other.mRelease, other.mRevision);`
"
649582667,966,Paul-Licameli,2021-06-10T22:53:50Z,"You can use std::tie here too
"
649582964,966,Paul-Licameli,2021-06-10T22:54:27Z,"supports
"
649933469,966,gera-gas,2021-06-11T12:22:38Z,"@Paul-Licameli just I little bit confused, could you clarifying this moment please. Okay, we have two method naming styles, lets nameing it as:
 * UpperCamelCase - `SomeMethodName()`
 * lowerCamelCase - `someMethodName()`

How we should naming:
 1 - local methods? (UpperCC or lowerCC)
 2 - static methods? (UpperCC or lowerCC)
"
653185296,966,Paul-Licameli,2021-06-17T02:45:39Z,"We prefer UpperCamelCase always.

Sometimes there are exceptions -- such as when you make a container class and must name members begin() and end() so that they work right of : in the range-for statement.

"
653204067,966,Paul-Licameli,2021-06-17T03:48:05Z,"This is good:  the BoolSetting is defined in just one place as a global, and used in different files, avoiding repeating the string literal and the default value.

But should it be defined here or in the other place, UpdateManager.cpp?

I would prefer the other place.  Settings objects that influence the behavior of some component should live with it.  Preference dialog pages, which give a user interface for changing the setting, should refer to it by including a header file.  The variable is ""model"" and the preference page is ""view.""

"
653204384,966,Paul-Licameli,2021-06-17T03:49:09Z,"Note that you use the BoolSetting to mean, updates should be checked.
"
653205021,966,Paul-Licameli,2021-06-17T03:51:27Z,"You are also using the bool setting to mean:  the user asked not to be shown the box again.  Was that the design?  I think it was, I just want to make sure.
"
653205294,966,Paul-Licameli,2021-06-17T03:52:21Z,"""For"" better than ""To"" in this name
"
653206460,966,Paul-Licameli,2021-06-17T03:56:20Z,"You changed a pointer to a reference, meaning null is not allowed -- I like that.  You changed UpdateManager to VersionPatch which is just the information needed here.  I like that too.
"
653208593,966,Paul-Licameli,2021-06-17T04:04:05Z,"A very minor matter:  I would indent the closing lines of this and the other lambdas less.  `});` is the closing brace of something like a control structure, if not exactly a control structure.  So this would be like the well recognized K&R style of indents.
"
653210396,966,Paul-Licameli,2021-06-17T04:10:39Z,"Do not use static here!  (Can explain to me why?)
"
653212695,966,Paul-Licameli,2021-06-17T04:18:39Z,"""safenew"" follows the correct convention here, but perhaps you don't understand it.

I'll explain:  I want to discourage naked new in the program, using smart pointers instead.  But you can't use smart pointers with objects of classes derived from wxWindow, because they have their own special memory management done by wxWidgets.  If a window has a non-null parent, then this new without a corresponding delete is not really a memory leak.

So in cases like this, I wxASSERT that the parent is not null (easily proved within this file), and use safenew which is just a macro for new.  And then, a simple text scan of the program for ""new"" exactly doesn't find this.  It was useful for me to check that other naked news are not being introduced in the program.


"
653213732,966,Paul-Licameli,2021-06-17T04:21:27Z,"Actually this isn't all quite correct:  here is a smart pointer for wxWindow objects.  But the point is, you can't use std::unique_ptr or std::shared_ptr.

https://docs.wxwidgets.org/3.0/classwx_window_ptr_3_01_t_01_4.html
"
653215498,966,Paul-Licameli,2021-06-17T04:27:26Z,"This line isn't needed
"
653215744,966,Paul-Licameli,2021-06-17T04:28:12Z,"I can see easily from in-line initializers below that nothing is left uninitialized.  Good!
"
653217760,966,Paul-Licameli,2021-06-17T04:34:33Z,"Not needed
"
653217825,966,Paul-Licameli,2021-06-17T04:34:44Z,"Not needed
"
653218500,966,Paul-Licameli,2021-06-17T04:36:51Z,"You followed the rule that each .h file is the first `#include` in the corresponding .cpp file, so that the header file must `#include` or declare all that is necessary to parse it.  I like that.

"
653218813,966,Paul-Licameli,2021-06-17T04:37:59Z,"""parses"" (and two other repetitions)"
653218891,966,Paul-Licameli,2021-06-17T04:38:16Z,"""does not allow"""
653220910,966,Paul-Licameli,2021-06-17T04:44:36Z,"It's good to remember some Doxygen in new classes.  I would simply:

```
//! Parsing from update data format to VersionPatch fields.
/*!
   @param updateData InputData.
   @param versionPath Parsed output data.
   @return True if success.
*/
```"
653223474,966,Paul-Licameli,2021-06-17T04:52:24Z,"Are two spaces left after periods, sometimes?

You might easily strip leading spaces from each sentence before you push onto the array.  See wxString::Trim

"
653225438,966,Paul-Licameli,2021-06-17T04:58:26Z,"There is a simple finite state machine implied in this function and the previous.  I can figure out that an operating system tag is expected to be followed by a version tag (is it optional?), then a link tag.  But please comment that."
653225842,966,Paul-Licameli,2021-06-17T04:59:42Z,"""trimmed"""
653228021,966,Paul-Licameli,2021-06-17T05:06:01Z,"If I wanted to be really strict about RAII for cleanup of the side effects, making no assumptions here that ParseString won't throw, then I would write, using a class from MemoryX.h:

`ValueRestorer<VersionPatch*> setter{ mVersionPatch, versionPatch };`

Instead of the two assignments.
"
653228486,966,Paul-Licameli,2021-06-17T05:07:20Z,"""that handles managing of updates"""
653228845,966,Paul-Licameli,2021-06-17T05:08:27Z,"Do we still need comments about multiple windows after the other corrections for object lifetimes?
"
653232926,966,Paul-Licameli,2021-06-17T05:20:16Z,"Not very important, I would prefer to simplify with a static IntSetting object... but 32 bits may not be enough and it might be one of the 32 bit Windows builds we still do.

Maybe I should define LongSetting?
"
653233394,966,Paul-Licameli,2021-06-17T05:21:28Z,"Rename the member to mUpdateCheckingInterval
"
653236232,966,Paul-Licameli,2021-06-17T05:29:31Z,"In this and the other lambdas, you use nullptr for parents of dialogs.

You might safely use `FindProjectFrame(GetActiveProject())` instead.  It would be sure to center the dialog on the main project window that the user is looking at.

This may be an unimportant, small advantage.


"
653396618,966,crsib,2021-06-17T09:33:27Z,"It is because Anton then uses `!(*this < other)`. Although it can be written in one line as well, that is true"
653490847,966,gera-gas,2021-06-17T11:51:21Z,"Yes, its was designed."
653492065,966,gera-gas,2021-06-17T11:53:07Z,"Yes, if it possible `LongLongSettings`"
653893020,966,gera-gas,2021-06-17T19:58:06Z,When I tested with `wxTheApp` using it was centered too. Just I want avoid from project is not created (on macOS when menu shown only) by `wxTheApp` using.
875686102,2941,Paul-Licameli,2022-05-18T09:37:41Z,"You might make this simpler than the corresponding code in SpectrumPrefs.  There, I needed a non-empty lambda capture.  Here, you don't.  So just declare instead

```
PrefsPanel *DevicePrefsFactory(wxWindow *parent, wxWindowID winid, AudacityProject *)
```
"
875692838,2941,Paul-Licameli,2022-05-18T09:44:41Z,"If you change `wxT(""Device"")` (the internal, non-localized string), then for users who customized the layout of toolbars (preferring it in the bottom dock for instance), their preference won't be respected when they upgrade to the new version.

A minor bother but perhaps avoidable.
"
875694633,2941,Paul-Licameli,2022-05-18T09:46:36Z,"This looks like duplication from ControlToolBar.cpp.  Instead, let's lower the repeated function into ToolBar as an overload of MakeButton.
"
875697142,2941,LWinterberg,2022-05-18T09:49:21Z,"Given that the UI looks like roadkill on upgrade, I think we may need to just reset toolbar preferences altogether. See #2919"
875735583,2941,Paul-Licameli,2022-05-18T10:31:50Z,"I see more imitation of ControlToolBar.cpp here.  Do you understand what this is doing?

For ControlToolBar, it looks up `name` in the CommandManager to determine the keystroke shortcut, if any, that is associated with that name, and then formats the hover text for the button to include that shortcut key in the description.

Here, no key will be found because ""Open Audio Setup"" is not the name of any command.

But then, perhaps it should be registered as a named command so it can indeed be bound to a keystroke if the user chooses in Preferences -- even if we do not decide to give it a key binding by default.

@DavidBailes would be interested I'm sure in keystroke accessibility of the new menu under the cogwheel.
"
875744154,2941,Paul-Licameli,2022-05-18T10:42:51Z,"`Verbatim(prompt.Translation())` should simplify just to `prompt`
"
875747326,2941,Paul-Licameli,2022-05-18T10:46:40Z,"This should be `Verbatim(inputSource)`
"
879899672,2941,Paul-Licameli,2022-05-23T22:01:44Z,"No, Kit, your name here!
"
879901163,2941,Paul-Licameli,2022-05-23T22:04:45Z,"When you make a new .cpp/.h file pair, the .cpp should include the .h before any other inclusion, to be sure the .h file is really self-contained.

And you did that!  Was it accident or were you aware of this rule?
"
879903694,2941,Paul-Licameli,2022-05-23T22:10:09Z,"Maybe you copied and pasted.  I like to keep the #include directives and forward declarations minimal.  I think you can eliminate:

<vector>
class wxCommandEvent;
class wxBoxSizer;
class wxSize;
class wxPoint;
class wxMenu;
class wxString;
class AButton;
class AudacityProject;
"
879903999,2941,Paul-Licameli,2022-05-23T22:10:50Z,"`explicit` ?
"
879906339,2941,Paul-Licameli,2022-05-23T22:15:56Z,"i18n (internationalization) hint comments are significant.  They get extracted into translation catalog template files and read by human experts in foreign languages.

Don't just copy-past this from DeviceToolBar.cpp.  Adapt it meaningfully.
"
879911722,2941,Paul-Licameli,2022-05-23T22:27:43Z,"Add `#include <wx/log.h>`

You can eliminate
#include <wx/wxprec.h>
#include <wx/setup.h>
#include <wx/app.h>
#include <wx/choice.h>
#include <wx/event.h>
#include <wx/intl.h>
#include <wx/menuitem.h>
#include <wx/settings.h>
#include <wx/statbmp.h>
#include <wx/stattext.h>
#include <wx/string.h>
#include ""../TrackPanel.h""
#include ""AColor.h""
#include ""ImageManipulation.h""
#include ""Prefs.h""
#include ""Project.h""
#include ""../ShuttleGui.h""
#include ""../widgets/Grabber.h""
#include ""../widgets/AudacityMessageBox.h""
#include ""../widgets/Grabber.h""
#include ""../widgets/WindowAccessible.h""
"
879913545,2941,Paul-Licameli,2022-05-23T22:31:46Z,"Don't assign, when you can use a member initializer.
But don't use a member initializer, when you can use an in-class initializer!
"
879916132,2941,Paul-Licameli,2022-05-23T22:37:48Z,Duplicated comment is unclear here
896272675,2941,Paul-Licameli,2022-06-14T00:28:09Z,"There is no such parameter!
"
896274269,2941,Paul-Licameli,2022-06-14T00:32:46Z,"A separate commit just to move this function into Toolbar.cpp might be nice too.
"
896276542,2941,Paul-Licameli,2022-06-14T00:39:31Z,"One commit adds this file (but does much else besides), another corrects the comment.

I prefer to see a squashed sequence of commits that doesn't leave a record of mistakes and corrections."
896291545,2941,Paul-Licameli,2022-06-14T01:21:49Z,"Actually though... you don't really use this overload in the final commit
"
896672816,2941,Paul-Licameli,2022-06-14T10:55:08Z,"New uses of `GetActiveProject` should be avoided!  It dependes on a global variable to identify the project.

But this toolbar was constructed with a reference to the project, which was passed to the bass class ToolBar.

Give ToolBar a const accessor to return AudacityProject& and use that.
"
896673697,2941,Paul-Licameli,2022-06-14T10:56:09Z,"Actually, it's a protected member, so just use `mProject` directly.
"
897867728,2941,ksoze95,2022-06-15T11:34:04Z,Done.
897868288,2941,ksoze95,2022-06-15T11:34:45Z,Commit squashed.
897869380,2941,ksoze95,2022-06-15T11:35:50Z,Removed incorrect doxygen param comment.
1130864771,4384,Paul-Licameli,2023-03-09T11:34:30Z,`const` function?
1130885278,4384,Paul-Licameli,2023-03-09T11:49:02Z,"Correctness of this change assumes `SetMask` was nowhere used -- and that is true
"
1130920702,4384,Paul-Licameli,2023-03-09T12:12:51Z,"The `{}` here and elsewhere initializes `mMask` but that member is nowhere used, so simplify
"
1130950461,4384,Paul-Licameli,2023-03-09T12:23:18Z,Did you neglect `--si.channels;` after the loop?
1130954230,4384,Paul-Licameli,2023-03-09T12:25:51Z,"... And so you did in the second commit.  Just squash it.
"
1131057718,4384,Paul-Licameli,2023-03-09T13:49:55Z,"Move (or just delete) the banner comments too, for the moved classes
"
1131064937,4384,Paul-Licameli,2023-03-09T13:55:53Z,"The commit comment can also mention ExportPlugin
"
1131728486,4384,Paul-Licameli,2023-03-09T23:09:35Z,"Not obvious in this large commit -- this is not just copied and pasted, but also the type of the third argument changes.  Please mention that in the commit comment.
"
1131731849,4384,Paul-Licameli,2023-03-09T23:13:12Z,"Oh but I see now -- same type, just another alias.  So never mind.
"
1131759896,4384,Paul-Licameli,2023-03-09T23:39:42Z,"should be ""complementary""
"
1131760604,4384,Paul-Licameli,2023-03-09T23:40:32Z,"As a matter of form I'd prefer that there is also a .cpp including this so we are sure the header has all its compilation dependencies, and the destructor should have a non-inline definition there.
"
1132274550,4384,Paul-Licameli,2023-03-10T11:47:55Z,"Should I worry about the safety of that `->`? Should there be a shared or weak pointer?  Or should there be comments in the base class header explaining the assumptions that derived classes may make about lifetimes of `ImportFileHandle`?
"
1132297399,4384,Paul-Licameli,2023-03-10T12:15:40Z,"In the old logic, there was a distinction between stopping and cancelling.  In case of stopping, there was no error reported, even if `totalSamplesRead < mNumSamples`.

In the new logic, this changes.
"
1132310725,4384,Paul-Licameli,2023-03-10T12:31:04Z,"Progress dialogs had a Stop button distinct from Cancel in the previous version, but with this commit they don't.

Is this change intended?
"
1132326126,4384,Paul-Licameli,2023-03-10T12:45:04Z,"This is an unusual way to write it.

Funny C++ fact:  if you change it to
`auto hasError = {false};`

then instead the type is deduced as `std::initializer_list<bool>` and compilation fails because that is not convertible too bool.
"
1132348331,4384,Paul-Licameli,2023-03-10T13:04:47Z,"Might want a check against division by zero, as with other progress updates
"
1132363273,4384,Paul-Licameli,2023-03-10T13:17:54Z,"another denominator to check for 0
"
1132378199,4384,Paul-Licameli,2023-03-10T13:30:14Z,"Mazzoni
"
1132383812,4384,Paul-Licameli,2023-03-10T13:34:53Z,"I thought this was unnecessary for the build, but now I see it's needed for `AUDACITY_FILE_SUFFIX_EVENT`

That is one place where I omitted to change wxEvents to Observer messages, but then this is a case of wxWidgets dialogs communicating to each other.
"
1132393250,4384,Paul-Licameli,2023-03-10T13:42:25Z,"And one more denominator.

Maybe `OnImportProgress` should take numerator and denominator as two arguments, and you can write the check for zero division in one place only.
"
1132515399,4384,Paul-Licameli,2023-03-10T15:21:42Z,"The Cancel() overrides are all alike, with one exception.  I suggest
- make `mCancelled` protected and provide a default `Cancel()` implementation
- make `mCancelled` atomic, anticipating background threads
"
1132526465,4384,Paul-Licameli,2023-03-10T15:29:08Z,"I think this virtual function will be called from background threads, correct?  Then the base class will need to specify that in header file comments, and this override will need some rework.

Perhaps, it will just update some atomic variable for the numerator of the fraction.  The main thread, running the progress dialog (modally?), could intercept idle or periodic timer events to check that number and update display.  The dialog's event handler for cancel button press would update the atomic boolean that the background thread reads in `Cancel()`.


"
1132554176,4384,Paul-Licameli,2023-03-10T15:54:01Z,"It would be good to make a StringSetting now and not repeat the literal path string
"
1132563096,4384,Paul-Licameli,2023-03-10T16:02:14Z,"With this deletion, iFilterIndex becomes unused.

I expected then that Timer record would achieve this side effect otherwise, by a call to configure the exporter, but I don't see it.

"
1132575872,4384,Paul-Licameli,2023-03-10T16:14:16Z,"I think there is a proof though that this assignment was always overridden anyway?  Because `GetFileName` was on the execution path after that and made it 0?
"
1132576848,4384,Paul-Licameli,2023-03-10T16:15:12Z,"If that is correct, then `m_iAutoExportFilterIndex` is a useless member of `TimerRecordDialog`."
1132577488,4384,Paul-Licameli,2023-03-10T16:15:50Z,"And if that is removed, then `Exporter::GetAutoExportFilterIndex()` will be called nowhere.
"
1132586813,4384,Paul-Licameli,2023-03-10T16:24:40Z,"I think this has `SetFullName` where the old version had `SetName` in `Exporter::GetFileName()`.  Why the change?
"
1132609897,4384,Paul-Licameli,2023-03-10T16:43:23Z,"Why not `FileDialogWrapper` as in the original?
"
1132618119,4384,Paul-Licameli,2023-03-10T16:51:12Z,"`Export` is a misleading name.  This function only chooses a path before export really happens.
"
1132619319,4384,Paul-Licameli,2023-03-10T16:52:24Z,"I think this should be `continue` to conserve the old logic
"
1132619815,4384,Paul-Licameli,2023-03-10T16:52:53Z,"`continue` here too
"
1132620252,4384,Paul-Licameli,2023-03-10T16:53:17Z,And one more `continue`
1132620464,4384,Paul-Licameli,2023-03-10T16:53:30Z,"`continue` here too
"
1136928360,4384,Paul-Licameli,2023-03-15T11:48:38Z,"Do you understand the difference between `SampleTrack` and `WaveTrack`?  The first is an abstract base class of the second.  (And `WritableSampleTrack` is between them.)

I think these utilities would be better defined in terms of the more general interface.  We don't yet have other concrete subclasses of `SampleTrack` but it may be useful later.

`SampleTrack` does not expose the notion of a clip within the track, but I don't see that you require knowledge of subdivision into clips.
"
1136929331,4384,Paul-Licameli,2023-03-15T11:49:37Z,"I don't understand the comment.  What ""same result?""
"
1136933864,4384,Paul-Licameli,2023-03-15T11:54:07Z,"`Track` which is the base of `SampleTrack` does expose selectedness.

But it is `PlayableTrack` that defines mute and solo and it is not a base of `SampleTrack`.

Yet you still might apply `Filter` to the track range to get a range of `SampleTrack`.

Maybe `PlayableTrack` should instead become a mix-on property of tracks that you discover with a `dynamic_cast`?  That's a bigger idea I should think about for future.
"
1136934859,4384,Paul-Licameli,2023-03-15T11:55:05Z,"Feel free to ignore all the suggestions about `SampleTrack` for a draft.  But remember the idea.
"
1136966083,4384,Paul-Licameli,2023-03-15T12:18:01Z,"No preservation of the other old comments from JKC? (James)
"
1137006232,4384,Paul-Licameli,2023-03-15T12:47:53Z,"If you change lines like this, also take the opportunity to eliminate one more repeated string literal path with a `BoolSetting` object.
"
1137020938,4384,Paul-Licameli,2023-03-15T12:56:42Z,"There is still special treatment of a subclass here, which I hope you clean up in a later commit I have not yet reviewed.

Probably it's OK to keep treating `CL` as a special part of the framework, but for `FFMPEG` there should instead be some other new virtual function of the export plugin object to make this decision.
"
1137528486,4384,Paul-Licameli,2023-03-15T17:49:57Z,"Another opportunity to use `BoolSetting`.

But be careful:  this one is used as an argument to `TieCheckBox`.

When that happens, you also need to use `Invalidate` in the `Commit()` member function of the preference panel.

I intend to remove that need for `Invalidate`, but it requires first using a named Setting object in every call of the `Tie...` functions, in Preferences, and also in Export dialogs, and also in SoundActivatedRecord.cpp
"
1138584984,4384,Paul-Licameli,2023-03-16T12:33:15Z,Did you mean to pass `selectedOnly` for the third argument?
1138587212,4384,Paul-Licameli,2023-03-16T12:34:59Z,"You lifted this UI out of the testing logic,but now it duplicates a string literal in two places.  Is there a good file in which to put a single occurrence of the literal?
"
1138598539,4384,Paul-Licameli,2023-03-16T12:43:27Z,"This new function shows the file dialog after the setting of export range, but previous to this commit, the two things were in the opposite order (as they remain for timer recording).

So there may be an unintended, though unimportant, change in behavior.  Such as giving the warning dialog before any file selection.

Better to change no behavior unless really meaning to.
"
1138774330,4384,vsverchinsky,2023-03-16T14:31:15Z,Was moved to anonymous namespace
1138777550,4384,vsverchinsky,2023-03-16T14:32:57Z,Thanks!
1138871957,4384,vsverchinsky,2023-03-16T15:21:19Z,Aren't comments for `ImportProgressListener` explain this?
1139175071,4384,vsverchinsky,2023-03-16T18:06:08Z,"I think that the major distinction between them is that the data that has been been read by the time Stop button was pressed is preserved, but mpg123 importer seem to be an exception. Will update this commit so that this behavior is preserved."
1139180237,4384,vsverchinsky,2023-03-16T18:10:12Z,"Moved them to `ImportPluginHandleEx`, though I don't want to convert it's type to atomic in advance"
1139182776,4384,vsverchinsky,2023-03-16T18:12:18Z,"Probably, but similarly I don't want to do it in advance"
1139221339,4384,vsverchinsky,2023-03-16T18:41:56Z,"This should not change the behavior, considering that currently `ExportFileDialog::Show` is always called with project name without extension, but in context of `ExportFileDialog` I think it make more sense to allow user to specify full file name."
1139251072,4384,vsverchinsky,2023-03-16T19:11:25Z,"What happens now is that track range is evaluated multiple times in different places, but within same ""export flow"", I think this approach is error prone. Instead, track range should become a member variable of `Exporter` or another state-object and passed as argument where it's required (for mixing, validation etc.)"
1139294496,4384,vsverchinsky,2023-03-16T20:00:02Z,"Yes, thanks!"
1139300015,4384,vsverchinsky,2023-03-16T20:06:15Z,"No, but if I understand correctly this really shouldn't happen."
1139301755,4384,vsverchinsky,2023-03-16T20:07:50Z,The behavior is restored in one of the later commits
1143091948,4384,Paul-Licameli,2023-03-21T09:28:32Z,"At the commit ""Move `ExportMixerDialog` invocation and mix-related warnings"", this line is deleted, and I don't see where it moves.
"
1143122169,4384,Paul-Licameli,2023-03-21T09:51:54Z,"I'm pleased to see this function unified with `Process`.  It was an ugly violation of open-closed to see this as part of the Exporter interface.

Fix the spelling in the commit comment: ""became""
"
1143156447,4384,Paul-Licameli,2023-03-21T10:18:17Z,`explicit`
1164193200,4384,Paul-Licameli,2023-04-12T14:08:41Z,"I could use my new utility like this, avoiding repetition, and requiring no rewriting in case there is ever a need
to add more variant alternatives that the generic lambda handles:

```
Visit(Variant::MakeVariant(
   [](auto &val) { config.Read(mConfigKeys[index], &val); },
   [](wxString &val) {
      wxString wxStr;
      if(config.Read(mConfigKeys[index], &wxstr))
         *val = wxstr.ToStdString();
   }
), it->second);
```

Similarly in other places where you use `get_if`
"
949911011,3396,Paul-Licameli,2022-08-19T07:59:05Z,"This commit is not strictly needed for statelessness.

You must have found a case where this appeared to fix persistency of settings in the configuration file.

The analogous code for VST2, which you originally adapted to VST3, still uses Base64 encoding and to change that would have some small risk of breaking compatibility of someone's settings configuration or macros if they migrate to 3.2.

What was the original reason Base64 encoding was used at all?  I'm not certain but I think it was a way of converting binary data into something that could be stored in a config file with proper escapes and no loss of data.  Is that right, and is it a reason why you still might want to figure out some other way to keep Base64 encoding working?

"
949914369,3396,Paul-Licameli,2022-08-19T08:03:15Z,"Extra character in `#include`
"
949926652,3396,Paul-Licameli,2022-08-19T08:18:25Z,"The meanings of `FetchSettings` and `StoreSettings` got reversed, and are now inconsistent with terminology in AudioUnits.  There, `FetchSettings` is fetching state *from* an AudioUnit handle *into* an EffectSettings package of data.  `StoreSettings` does the opposite."
949929867,3396,Paul-Licameli,2022-08-19T08:21:27Z,unused local variable
949954417,3396,Paul-Licameli,2022-08-19T08:43:00Z,"Copy construction was eliminated, so perhaps you may also declare the copy with explicit `= delete`"
949967763,3396,Paul-Licameli,2022-08-19T08:52:20Z,"The elimination of `StoreSettings` leaves the argument `settings` unused in this function, at least so I see at the fifth commit in the sequence.  So this ""breaks"" that function, but I presume you fix it in later commits I have not yet reviewed.  I understand from other commit comments that you put back a local wrapper object in the function for this purpose.

Strictly then this commit sequence isn't preserving intended behavior all the way through but I won't insist on that now.

"
949975230,3396,Paul-Licameli,2022-08-19T09:00:29Z,"Last things to say about the fifth commit.
When I transformed other effect families, the move to actual statelessness came late.  Until a late commit, `GetSettings` was a non-static member function, ignoring its argument, and really using information in the stateful Effect object.

All the places where `GetSettings` had to be called were figured out first; and only then did I make a change so that the `EffectSettings` objects really carried independent information around and were not dummies.

You make this change earlier, so `EffectSettings` objects really carry data, making it possible that buggy behavior exists in the intermedate steps of this transformation because of inconsistencies about where the correct data really are.  I already mentioned the possible wrong behavior of exporting.

It's not how I would write a very careful transoformation.  In case bugs still exist after everything and I want to bisect to understand where the bug was introduced, the other caution I took with intermediate steps might help me find out where the mistake was really introduced.

I'm not insisting now on rewriting this pull request that way.
"
949978761,3396,Paul-Licameli,2022-08-19T09:04:33Z,"I think it is the fifth commit that introduces the build failure on Linux.  It seems ""Always"" is a macro defined somewhere in one of the inclusions.

I was able to fix Linux builds of my cherry-picks of your branch by moving the definition of `VST3Effect::RealtimeSupport` earlier in the file, before other `#include` directives.  Another thing I didn't try was just to insert `#undef Always` before the function.
"
949988888,3396,Paul-Licameli,2022-08-19T09:15:49Z,"Just use literal `44100.0` as a default, as before.  Don't use `EffectBase::mProjectRate`.  That is another piece of state in the effect objects I need to eliminate in a future release.
"
950019477,3396,Paul-Licameli,2022-08-19T09:51:35Z,"Could this instead be `SingleInputParameterValue *const mParameterQueues;` so you can remove the `const_cast` below?
"
950031281,3396,Paul-Licameli,2022-08-19T10:05:57Z,"Should this function clear the map in the settings? -- maybe not if it needs to be done in a worker thread.

You don't (yet) use it in any worker thread (at the eighth commit of ten).
"
950032150,3396,Paul-Licameli,2022-08-19T10:07:03Z,"At this commit I see accumulation of changes in the map in `performEdit` but clearing nowhere.
"
950034001,3396,Paul-Licameli,2022-08-19T10:09:22Z,"This is the only place where the processors get changed settings information, and it only happens before playback.
"
950035245,3396,Paul-Licameli,2022-08-19T10:10:53Z,"Something is needed to replace the deleted lines, of course, so that there can be continuing adjustment of settings during play.  So it seems you would need more `ConsumeSettings` but in a worker thread.

I don't yet see the complete transformation of the code in later commits, but at this commit it is surely incomplete.
"
950035872,3396,Paul-Licameli,2022-08-19T10:11:42Z,"Note the `RealtimeProcessStart` is the only place where the worker thread should check for changes of state communicated by the main thread.  Not in `RealtimeProcess` or `RealtimeProcessEnd`.
"
950042089,3396,Paul-Licameli,2022-08-19T10:20:07Z,"So I understand that `Process` makes `InputParameterChanges` from `VST3Wrapper::mParameters`, which in turn, must be assigned by `ConsumeChanges`.

A call to that is surely needed, then in `RealtimeProcessStart`, and then `mParameters` will be correctly unchanging in case of mulitple calls to `Process.`
"
950043312,3396,Paul-Licameli,2022-08-19T10:21:56Z,"Maybe the `EffectSettings` could contain a map from parameter ids to `optional<>` values, so the consuming thread could ""clear"" the map by reassigning `nullopt` everywhere, but not doing any free-store deallocation.
"
950058973,3396,Paul-Licameli,2022-08-19T10:44:15Z,"Moving on the the ninth commit.  As I already mentioned, you should avoid either allocating or freeing and that means, not clearing a `std::map` either.  So I suggest again, a map from keys to optional values and just reassignment of null opt instead of clearing.
"
950059260,3396,Paul-Licameli,2022-08-19T10:44:43Z,"`CopySettingsContents` in either direction is always done on the worker thread.
"
950062153,3396,Paul-Licameli,2022-08-19T10:48:58Z,"`PerTrackEffect.h` is enough, don't need its subclass
"
950065075,3396,Paul-Licameli,2022-08-19T10:53:06Z,"This commit loses the vector of processors in the effect, but does not restore that array elsewhere in the instance.
"
950069398,3396,Paul-Licameli,2022-08-19T10:59:11Z,"This deleted line has no corresponding one in the new function for the Instance.  But I see from other functions that you assume latency is available at initialization time and does not change, so you cache the value.

Ok.

But I wonder if varying latency, with varying settings, really is a possible thing we will need to handle later.  You know that fixing the handling of latency in realtime play is a problem I need to solve, maybe in a patch release.
"
950071697,3396,Paul-Licameli,2022-08-19T11:02:29Z,"The new `ProcessInitialize` no longer calls `ConsumeChanges`.  Does destructive processing correctly apply the changes to settings made in the dialog?  How is that communicated?  I must see the tenth commit I suppose.
"
950075262,3396,Paul-Licameli,2022-08-19T11:07:24Z,"This logic moves to `RealtimeInitialize` while the new `RealtimeAddProcessor` does nothing.  The `ConsumeChanges` is lost so I am again unsure that the processor really begins in the correct state.
"
950076309,3396,Paul-Licameli,2022-08-19T11:08:56Z,"This was the added `ConsumeChanges` call I was expecting to see -- good, but again, I don't understand why it is right to remove the other calls, and it also needs rewrite to avoid deallocations.
"
950079321,3396,Paul-Licameli,2022-08-19T11:13:18Z,"Ninth commit re-introduces use of the `settings` argument, good
"
950082042,3396,Paul-Licameli,2022-08-19T11:17:15Z,"I expect that this new member of the Effect moves to the Validator next
"
950084243,3396,Paul-Licameli,2022-08-19T11:20:27Z,"There is a long-distance coincidence of repeated string literals here and in `VST3OptionsDialog.cpp`.  It would be nice to clean that up, but it's not necessary now
"
950095289,3396,Paul-Licameli,2022-08-19T11:31:21Z,"I saw this new function and thought, is it safe to use only on the main thread?  Do changes of `mActive` happen only in the main thread?  Is `mActive` privately used only on the main thread?

Yes, yes, and yes, which is good.  So please just add a comment in the header file that it's for main thread usage only.
"
950102544,3396,Paul-Licameli,2022-08-19T11:39:32Z,"I think this should call through to `EffectUIValidator::OnClose` so the effect doesn't hold on to `mParent` either
"
950103763,3396,Paul-Licameli,2022-08-19T11:41:14Z,"This call got lost in the Validator.  The function is no longer called anywhere.
"
950116259,3396,Paul-Licameli,2022-08-19T11:59:06Z,"My understanding of these lines is that they update both the edit controller and the effect component after you change a preset.

The first, presumably, causes graphical updates.  The other affects the state of the processor, but this might be happening during processing.

Are we confident of the thread safety of this?

If not -- then `RealtimeProcessStart` in the Instance would have to complete the change of state of the effect component.  Would it be correct just to do a complete state change there, not using the pending changes interface?


"
950118597,3396,Paul-Licameli,2022-08-19T12:02:37Z,"This also raises the question of the thread safety of the calls that may precede `UpdateUI` and those are `LoadFactoryDefaults`, `LoadFactoryPreset`, `ImportPresets`, `LoadUserPreset`.  Are they all safe to do while another thread is processing?"
950120513,3396,Paul-Licameli,2022-08-19T12:05:27Z,"The sequence of those two calls is changed in the Validator now, and I think that is correct
"
950124824,3396,Paul-Licameli,2022-08-19T12:11:18Z,"This call also got lost in the transformation.

I think this means that `ComponentHandler::perforEdit` will never do anything, so changes of dials will not be communicated in realtime to the processor.
"
950133506,3396,vsverchinsky,2022-08-19T12:22:42Z,"mProjectRate value is used to initialize generators, like in another effects, but without explicit sample rate specification"
950140683,3396,Paul-Licameli,2022-08-19T12:31:59Z,"Later commits eliminated these lines, so it doesn't matter.

`mSetup` is now, properly, part of Instance state, not the effect, and is initialized with the correct rate.
"
950156176,3396,vsverchinsky,2022-08-19T12:50:19Z,">The analogous code for VST2, which you originally adapted to VST3, still uses Base64 encoding and to change that would have some small risk of breaking compatibility of someone's settings configuration or macros if they migrate to 3.2.

I haven't yet figured out what exactly causes data corruption. May be it's in Base64::Encode or Base64::Decode or may be there are some implicit charset conversion which wasn't taken into account.

>What was the original reason Base64 encoding was used at all? I'm not certain but I think it was a way of converting binary data into something that could be stored in a config file with proper escapes and no loss of data.

Correct"
950176460,3396,vsverchinsky,2022-08-19T13:13:50Z,"Using StoreSettings on VST3Effect instance could change it's state, which isn't correct behaviour. ALso considering that there is a single instance and the copy of settings that passed to this function was more likely fetched from same instance it shouldn't harm?"
950178549,3396,vsverchinsky,2022-08-19T13:15:48Z,"Name collision caused by indirect include of X.h, fixed by moving includes to another file"
950208935,3396,vsverchinsky,2022-08-19T13:47:28Z,">Something is needed to replace the deleted lines, of course, so that there can be continuing adjustment of settings during play.

Not neccessarily. VST3Effect doesn't yet (at this step) support realtime processing and doesn't support parameter changes ""on the fly"". So at this point it's enough to call ConsumeSettings once, just before processing has started.

>consuming thread could ""clear"" the map by reassigning nullopt everywhere, but not doing any free-store deallocation.

parameterChanges used to be a vector... but as I said in the previous comment, I'll move it to AssignSettings.

UPD: since it's not possible to update settings on the main thread side without a call to ::Flush clearing does not do what it supposed to do"
950286667,3396,vsverchinsky,2022-08-19T14:58:40Z,In case of VST3 plugin should explicitly ask host to restart (via setActive) effect component  by sending IComponentHanler::restartComponent(kLatencyChanged).
950297065,3396,vsverchinsky,2022-08-19T15:10:00Z,"1. There is only one instance of VST3Wrapper which owned by VST3Instance (no per-track sub effect initialization)
2. There is only one point where actual parameter change transfer before processing could occur - EffectInstance::RealtimeProcessStart
3. In case of destructive processing instance state updated via IComponent::setState with settings stored by VST3UIValidator::ValidateUI
 "
950298482,3396,vsverchinsky,2022-08-19T15:11:30Z,And also it creates a helper effect instance
950307073,3396,vsverchinsky,2022-08-19T15:20:58Z,">Yes, yes, and yes, which is good. So please just add a comment in the header file that it's for main thread usage only.

The only exception in the interface of this class is a Process function, otherwise it's not thread-safe"
950317602,3396,vsverchinsky,2022-08-19T15:30:06Z,"Yep, thanks, fixed that"
950317713,3396,vsverchinsky,2022-08-19T15:30:14Z,Thanks
950333005,3396,vsverchinsky,2022-08-19T15:45:30Z,">Are we confident of the thread safety of this?

It's safe to call setState/getState during processing, but this doesn't happen during processing `if(!isActive)`

>Would it be correct just to do a complete state change there, not using the pending changes interface?

I would object to that since `RealtimeProcessStart` is getting called for each block, I guess it's not how it supposed to work. Correct thing would be to use setState once (or when preset has changed), send changes via `IComponentHandler` and then save state at least once (in our case - when UI is closed)
"
950695550,3396,Paul-Licameli,2022-08-20T13:25:55Z,"The point, however, is to make ExportPresets work independently of any instance.  And you achieve that in the later commit with a temporary Wrapper.
"
950870633,3396,Paul-Licameli,2022-08-21T16:30:29Z,"I see you added the build fix, but maybe it would be better done earlier in the commit sequence to keep all commits buildable.
"
950870904,3396,Paul-Licameli,2022-08-21T16:32:25Z,"The build fixes might be done earlier in the commit sequence to keep all commits buildable.
"
950872330,3396,Paul-Licameli,2022-08-21T16:44:48Z,"You have simply deleted the clearing of the `std::map` instead of the more complicated suggstion I made to use a map of unchanging size with `std::optional` values in it.

There is also a swapping of map contents.

I wonder whether this will reall work right.  It would be that the old contents swapped away might later be incorrectly swapped in again, if `CopySettingsContents` is called again before the main thread sends an updated message.

So I think the right thing to do, which might fix some bugs with real time adjustment of dials, is as I suggested.  More explicitly:

- `MakeSettings` makes a map from each parameter id to `nullopt`
- `performEdit` emplaces values
- `CopySettingsContents` copies each value and assigns `nullopt` to the source (note, std::move from the optional will NOT make the source null opt)

If you are experiencing some bugs with adjustment of sliders, then try this instead.
"
950878067,3396,vsverchinsky,2022-08-21T17:36:38Z,it doesn't build for you?
950879068,3396,vsverchinsky,2022-08-21T17:45:40Z,"The more complicated suggestion will not work because:
a) `MakeSettings` can't make such map because to do so it would need to instantiate `IEditController`
b) Assigning `nullopt` or clearing the map turned out to be pointless, considering that the real purpose is to clear setting on the main thread side (so that subsequent `Get` see it empty) and not the intermediate objects, which could be achieved only by using `Flush`

For now I guess it's not a big problem that main thread remebers latest values of all parameters that have changed

> It would be that the old contents swapped away might later be incorrectly swapped in again, if CopySettingsContents is called again before the main thread sends an updated message.

I thought that counter prevents that, isn't it?"
950880369,3396,Paul-Licameli,2022-08-21T17:58:00Z,"> > Yes, yes, and yes, which is good. So please just add a comment in the header file that it's for main thread usage only.
> 
> The only exception in the interface of this class is a Process function, otherwise it's not thread-safe

I don't understand that answer.  There is no use of `mActive` but on the main thread.  Correct?

Anyway this unresolved point is only about a comment.

"
950883641,3396,Paul-Licameli,2022-08-21T18:29:07Z,"I consider this resolved but I leave it open so you read and understand my previous comment.
"
951471204,3396,Paul-Licameli,2022-08-22T13:54:39Z,"I didn't really try building on Linux.  I may be mistaken.  All commits were building for me on macOS -- but not after the latest rebasing.

"
1593695176,6359,saintmatthieu,2024-05-08T09:07:43Z,"I don't know if this comment is relevant only to the following two out-commented lines or to what follows, too. Why keep the dead code?"
1593709727,6359,saintmatthieu,2024-05-08T09:15:13Z,"Looks like even the pointer should be `const`, i.e., `static const ChannelGroup* const MasterGroup;`
Also, I'd prefer the initialization to take place here as well for clarity, rather than in the source file."
1593713909,6359,saintmatthieu,2024-05-08T09:18:29Z,trailing spaces
1593714423,6359,saintmatthieu,2024-05-08T09:18:53Z,Why not just removing it?
1593717912,6359,saintmatthieu,2024-05-08T09:21:44Z,`nullptr` aka `MasterGroup` ?
1593751139,6359,saintmatthieu,2024-05-08T09:45:50Z,"If so I'd prefer `MasterGroup` over `nullptr`, in case one looks for all places where it's used."
1593771923,6359,saintmatthieu,2024-05-08T10:00:18Z,"Why ? Isn't this used by `AllocateChannelsToProcessors` to ""plug"" an effect's output channels to the number of playback channels. Why should this change with the master channel?"
1593796935,6359,saintmatthieu,2024-05-08T10:22:09Z,I think correct English would be `MakeTrackEffectPane` (even if there's more than one effect).
1593844391,6359,saintmatthieu,2024-05-08T11:00:50Z,"This crashes when playing a MIDI file on an empty project, because `mPlaybackSequences` and, consequently, `mProcessingBuffers`, are then empty."
1593868140,6359,saintmatthieu,2024-05-08T11:22:48Z,"Maybe a solution: the size of `mMasterBuffers` equals the number of playback channels, maybe it could be used instead.
Also, AFAICS these buffers always have the same size, so a simple `mMasterBuffers[0].size()` would be more expressive and sufficient."
1593869133,6359,saintmatthieu,2024-05-08T11:23:41Z,Or `mPlaybackBuffers`.
1593870392,6359,saintmatthieu,2024-05-08T11:24:54Z,Noise
1593870645,6359,saintmatthieu,2024-05-08T11:25:08Z,trailing spaces
1593916589,6359,saintmatthieu,2024-05-08T12:01:31Z,"I don't see any side effect if `pScope == nullptr`, so shouldn't the `if (pScope)` be on this line?"
1593918862,6359,vsverchinsky,2024-05-08T12:03:35Z,"The comment isn't specifically about master channel. 
When we allocate two mono effects to one stereo track there is at least one problem with UI : you can't see the output of the second channel. 
I think configuring effects to process samples in native track format and rate could have benefit of reducing CPU load in case if playback sample rate is higher compared to playback rate. But that may be conceptually wrong. "
1593973495,6359,saintmatthieu,2024-05-08T12:46:50Z,"Regarding the CPU, I don't know, it looks like there is no negotiation at the moment: the framework dictates the sampling rate to the effect instances, which I guess is much simpler. Also, I think resampling is inevitable, so I'm not sure we want to try and minimize it.
My point is that this TODO should probably be tempered with some doubt, e.g., ""consider initializing (...) because (...)"""
1595345368,6359,Paul-Licameli,2024-05-09T11:50:37Z,""" or for the master when group is null"""
1595415050,6359,Paul-Licameli,2024-05-09T13:00:54Z,"Comment ""mPlaybackBuffers correspond many-to-one with mPlaybackSequences"" above this line is no longer correct
"
1595424913,6359,Paul-Licameli,2024-05-09T13:09:54Z,"I would add a comment that this `resize` is expected not to allocate memory in the worker thread, because sufficient size should have been reserved in `AllocateBuffers`.  Perhaps, test capacity before and after and `assert` no change.
"
1595463844,6359,Paul-Licameli,2024-05-09T13:36:36Z,"I don't think the mixer can be properly eliminated in the case that it does resampling of a track whose rate does not match the device output rate, or there is a time track.  There will be some state in the resampler dependent on previous input.

However, note that the mixer stands as a producer in relation to this function which is its consumer.  Perhaps, if it really matters, another thread could mix in advance.

But all that effort at overlapping computation may be unnecessary because this thread really spends most of its time idle anyway, going faster than the ultimate real-time consumption of its output.

Or then again maybe it might matter in future because we want to have ever more capacity for complicated calculations like more effects, more stretching, more pitch shifting.

Or again, maybe you were thinking of power consumption, not performance.
"
1595470151,6359,Paul-Licameli,2024-05-09T13:41:42Z,"I notice that as part of this PR you have moved the logic to silence tracks (which might be driven by unpredictable presses of the mute buttons by the user) from the low-latency thread to this high-throughput thread.

Was that for simplification of the former, so that it does less work?  Or some other reason?

Does this comment mean you have not yet restored the microfading feature?  (I have not yet read enough to answer that for myself)

I think I like this change because as I recollect, the microfading had a dependency on the buffer size given to `audacityAudioCallback` which can depend on operating system or larency settings.  That should not be:  the duration of the fade in or out should be independent of that.


"
1596345141,6359,saintmatthieu,2024-05-10T06:58:34Z,I don't know what earlier check is meant here. Could it be that this comment is also outdated?
1596347972,6359,saintmatthieu,2024-05-10T07:01:39Z,"A little bit higher, line 2712 on this commit, is the line `float *outputFloats = outputBuffer;`, which only seems to be an alias to the same thing, maybe a remnant of older code. Would you remove it if you get the chance?"
1596367013,6359,saintmatthieu,2024-05-10T07:21:42Z,"There might be a mini bug here: if adding a real-time effect during playback increased latency such that `samplesAvailable` becomes 0, what would be played for that frame would be the samples of the previous `mPlayoutBuffers`, possibly leading to a repeated playout of the last few ms.
Solution might be to return `false`, such that the `AudioThread` doesn't read the content of `mPlayoutBuffers` ?
It would be worse if a real-time effect had variable latency, but I don't think there's a use case for that."
1596381971,6359,saintmatthieu,2024-05-10T07:33:33Z,That would apply to the next `if(samplesAvailable == 0)` too.
1596408085,6359,saintmatthieu,2024-05-10T08:00:00Z,"I have doubts about the correctness of the handling of latency for the master channel.
The `discardable` value returned by a real-time effect is the number of leading samples that can be discarded.
For the track effects, this is indeed what is done:
```cpp
         for(int i = 0; i < seq->NChannels(); ++i)
         {
            auto& buffer = mProcessingBuffers[bufferIndex + i];
            buffer.erase(buffer.begin(), buffer.begin() + discardable);
         }
```
For the master track, however, no leading samples are discarded, and then
```cpp
      unsigned bufferIndex = 0;
      for(auto& buffer : mMasterBuffers)
      {
         mPlaybackBuffers[bufferIndex++]->Put(
            reinterpret_cast<constSamplePtr>(buffer.data()),
            floatSample,
            samplesAvailable,
            0
         );
      }
```
which means trailing samples are discarded instead. It was already that way in the previous commit but I missed it.

If I'm correct, the consequence of this mistake would be that, if the master channel has an effect that adds delay, an artefact due to zeroed audio would be heard at the beginning of playback."
1596413595,6359,saintmatthieu,2024-05-10T08:04:50Z,"I also don't see the necessity of `masterOffsets`. I don't think there can be left-overs from one `ProcessPlaybackSlices` to the next, as it would mean this method would produce more audio samples than asked for, and I don't see it to be the case."
1596710560,6359,Paul-Licameli,2024-05-10T12:47:14Z,Unused
1596727030,6359,Paul-Licameli,2024-05-10T13:03:33Z,Comment refers to variables that no longer exist
1596798315,6359,Paul-Licameli,2024-05-10T14:04:37Z,"delete ""of"""
1596800992,6359,Paul-Licameli,2024-05-10T14:06:58Z,"I am reminded that the handling of latency is still not satisfactory.  I had ideas for fixing it that I have not found time to implement.
"
1596816243,6359,dozzzzer,2024-05-10T14:19:51Z,"The problem does exist indeed. In the attached video, you can hear an audible crackle at the beginning of the playback with a non-zero latency effect (TDR Limiter) added to the stack:

https://github.com/audacity/audacity/assets/70063970/742dc31e-0188-4751-b6c6-833cd5279f0d

"
1596831605,6359,Paul-Licameli,2024-05-10T14:28:19Z,Is that really TODO?  I think you have conserved the micro-fade logic on the consumer side in `FillOutputBuffers`
1596831831,6359,saintmatthieu,2024-05-10T14:28:30Z,Thanks @dozzzzer .
1596835118,6359,saintmatthieu,2024-05-10T14:31:15Z,"IIUC that one handles the changes in the volume slider, which are global. This is for the track-specific mute/unmute."
1596845035,6359,Paul-Licameli,2024-05-10T14:39:34Z,"The comment refers to what now happens inside `CallbackCheckCompletion`.  Amend the comment to make that more explicit.  And it's now ""below"" not ""above"".

"
1596868341,6359,Paul-Licameli,2024-05-10T14:59:50Z,"Doing latencies really right is a known bit of technical debt.  I have had ideas.  I didn't find time to elaborate and share them yet.
"
1598563569,6359,vsverchinsky,2024-05-13T14:21:50Z,"I though that mixer could be ""advanced"" without doing any actual work"
1598576216,6359,vsverchinsky,2024-05-13T14:26:23Z,"> Was that for simplification of the former, so that it does less work? Or some other reason?

The reason is that we can't do master effects processing on low-latency thread and that processing should happen after all the tracks have been mixed into playback channels."
1598578087,6359,vsverchinsky,2024-05-13T14:27:35Z,"> Does this comment mean you have not yet restored the microfading feature? (I have not yet read enough to answer that for myself)

Micro-fading isn't completely restored, it doesn't happen when you move gain, pan sliders or press solo/mute buttons."
1598588136,6359,vsverchinsky,2024-05-13T14:33:55Z," I think the answer to your question is in `FillPlayBuffers`. If for some reason `samplesAvailable` will be zeroed, then there will be more processing passes until `GetNeeded() == 0`. Otherwise if I `return false` as you suggest then extra buffer exchange step will be initiated for same frame, which I think is less preferrable.
 May be we should test how it works now with latency values that are much larger than our regular buffer sizes"
1600928970,6359,saintmatthieu,2024-05-15T04:36:48Z,"What are these new lines fixing ? It looks like we are now ensuring that no new memory is allocated in that function. This comes at the risk, though, that we provide less than `frames` samples, if for some reason the capacity of the buffer is insufficient. Wouldn't that be worse ?

I wonder if this change is motivated by the initial playback click that we hear in @dozzzzer 's video above. I suspect this not to be due to buffer allocation, but simply because he is playing a sine wave without any sort of smoothing envelope, and it's then completely normal to hear this click."
1601118035,6359,vsverchinsky,2024-05-15T07:39:04Z,">  It looks like we are now ensuring that no new memory is allocated in that function. 

Yes

> This comes at the risk, though, that we provide less than frames samples

Memory allocations are not better. The disadvantage of this code is that it's not capable to handle very large latencies (usually > 250ms).

> I wonder if this change is motivated by the initial playback click that we hear in @dozzzzer 's video above

No, I did that in response to Paul's comment above"
1610160924,6359,vsverchinsky,2024-05-22T14:59:45Z,@saintmatthieu Please avoid unnecessary formatting changes if you don't change the line itself - it complicates the search through commit history and review process
1610170103,6359,vsverchinsky,2024-05-22T15:04:28Z,There is a `finally` block already that does cleanup job
702501679,1614,Paul-Licameli,2021-09-06T00:38:56Z,"Only changing note track affordance text colors?
"
702501884,1614,Paul-Licameli,2021-09-06T00:40:06Z,"Add header comments as in other headers describing the purpose of the file, and use
@file and @brief comments for Doxygen.
"
702504278,1614,Paul-Licameli,2021-09-06T00:53:45Z,"I am uneasy with this entire commit.

You have figured out TrackListEvent, which is emitted by TrackList.  Why must WaveTrack emit an event?  Where you need this event, can't you bind to the TrackList instead and use the existing event types?
"
702504439,1614,Paul-Licameli,2021-09-06T00:54:36Z,"This is where the new event type is bound.  Why not bind to the Tracklist?
"
702504699,1614,Paul-Licameli,2021-09-06T00:56:10Z,"This is the handler of the event.  Could instead mTextEditHelper bind directly to the track list?

Would that solve any problems about lifetime?
"
702507284,1614,Paul-Licameli,2021-09-06T01:09:58Z,"Unbind() is also unnecessary when the event ""sink"" object in the Bind() call also inherits wxEvtHandler.  Then when it is destroyed, the ""source"" wxEvtHandler is also notified to clean up its list of observers.

(I'm not certain, but it may in fact be enough for the sink to inherit wxTrackable, a base class of wxEvtHandler.)

Can the text edit helper inherit wxEvtHandler and bind itself to the TrackList?  Then it can destroy itself in response to the event.
"
702511353,1614,Paul-Licameli,2021-09-06T01:29:44Z,"Perhaps ""TextEditPolicy"".  This looks like the ""Policy"" pattern, also called ""Strategy,"" where an object supplies a set of callbacks to a reusable framework.
"
702512587,1614,Paul-Licameli,2021-09-06T01:35:30Z,"This logic was DUPLICATED from LabelTrackView and LabelTextHandle.

But why duplicate, when we might really reuse?

Can it be given a better name like ""TextEditingCell"" and could it first be split out and used in LabelTrackView?

"
702527347,1614,Paul-Licameli,2021-09-06T02:38:08Z,"I recommend:  Combine this header with TextEditHelper.h, because the classes cooperate closely.  Neither is useful without the other.

Then, define the destructor of TextEditDelegate as non-inline.

If a class has virtual functions, it is better that at least one of them is defined non-inline, and the destructor can be the one if all the others are pure virtuals.  (Actually pure virtual functions cal also be given definitions, but that's another story.)

It is better because then it can be decided at compile time, in what single place, the virtual function table of this base class will be compiled.

Whereas otherwise, the compiler must duplicate the virtual function table definition, and the linker needs to remove all but one duplicate.

So avoid the bit of extra work for the linker.



"
703034109,1614,vsverchinsky,2021-09-06T18:17:10Z,In new commit history this commit contains also wave track colors changes
703034600,1614,vsverchinsky,2021-09-06T18:19:04Z,`WaveClipAffordanceControls` now inherits `wxEvtHandler` and this fixes issue with event processing and objects lifetime
703035792,1614,vsverchinsky,2021-09-06T18:23:43Z,"No, it's not a policy. It could be a `TextEditListener` or replaced with wxEvent dispatch"
703036621,1614,vsverchinsky,2021-09-06T18:27:24Z,"It's not a cell because it does not define TrackPanel separation as other cells do.
There is another PR which addresses an issue with code duplication"
704844424,1614,Paul-Licameli,2021-09-08T23:31:33Z,"I see the purpose of this change and the commit that introduces it is to fix a ""slicing problem"" in AssignUIHandlePtr, where an object of derived type may be assigned to an object of base type, losing information.  Yes?

I don't know why I didn't see this earlier in review!

I suggest this additional change (add it to the label refactoring branch maybe):

In AssignUIHandlePtr, in the else-branch, add

```
      wxASSERT(typeid(*ptr) == typeid(*pNew));
```
You may also need
```
#include <typeinfo>
```"
704846185,1614,Paul-Licameli,2021-09-08T23:36:36Z,"This change is good, but incomplete!

Similar code with the same slicing error is still not corrected in NoteTrackAffordanceControls.
"
704850892,1614,Paul-Licameli,2021-09-08T23:49:57Z,"Can you state in comments any intended invariant relations among these values?

Is it meant to be invariant that `mInitialCursorPos <= mCurrentCursorPos` ?
"
704851346,1614,Paul-Licameli,2021-09-08T23:51:16Z,"Should you comment before this function,
```
@pre from <= to
```

Or swap the values before the assignment to make the condition hold?
"
704854663,1614,Paul-Licameli,2021-09-09T00:01:08Z,"Please use `override` not `virtual`.
"
704863745,1614,Paul-Licameli,2021-09-09T00:28:52Z,"Should this be index <= 0?
"
704868225,1614,Paul-Licameli,2021-09-09T00:42:27Z,"I don't know if it is important, but I think this if-block needs to move down, outside one more } , to correct the analogy with LabelTextHandle::HandleTextClick:  Do it whether bounding box contains the position, or not.
"
704870171,1614,Paul-Licameli,2021-09-09T00:49:02Z,"My preference is to put cleanup lines like the above three inside
```
auto cleanup = finally([&]{ ... });
```
And put the declaration of cleanup higher, just after the first SetClippingRegion().

This is ad-hoc RAII.  `finally` generates a class that performs the lambda in its destructor, and binds an instance to `cleanup`.

This makes it easier to be confident that a long function isn't making a mistake somewhere, with an early exit that forgets to restore the context.  Or, in case of exceptions.





"
704872072,1614,Paul-Licameli,2021-09-09T00:54:03Z,"Is this condition correct in case of right-to-left layout?
"
704872192,1614,Paul-Licameli,2021-09-09T00:54:29Z,"ditto ?
"
704872404,1614,Paul-Licameli,2021-09-09T00:55:09Z,"I think mOffset needs comments about what it really is.  I'm not sure I understand it.
"
704873937,1614,Paul-Licameli,2021-09-09T00:59:58Z,"Are the above two lines right?  Isn't current >= initial always?

Is what you really want to do:  get char positions for initial and current, as left and right, but then swap in case of RTL layout?  Because, swap is needed in that case and that case only?

Did you really try all of this out with Arabic?  Putting breakpoints at every test of layout, and making sure all are hit?


"
704878292,1614,Paul-Licameli,2021-09-09T01:13:57Z,"I see you made this command by analogy with SetTrackNameCommand in CommonTrackControls.cpp, and like that command class, it isn't meant to be registered with CommandManager.

It is commented there, that the same effect can be achieved with other commands available to macro programming.

Is that so for change of clip name?

No.  So I suggest: the existing SetClipCommand class needs to be extended with another parameter for setting the name, by means of macro programming.

I know that wasn't part of the specification of this project, but it is something that should be done for completeness: exposing all changes of properties we can to macro programmers too.

This could be a separate PR.  I opened issue #1644 
"
704880162,1614,Paul-Licameli,2021-09-09T01:19:50Z,"Is this your first experience writing some ShuttleGui code?
"
704881009,1614,Paul-Licameli,2021-09-09T01:22:32Z,"Whenever you add XOs or XXOs, make sure Jouni agrees with the exact words.  There are a few others in this PR.

"
704888853,1614,Paul-Licameli,2021-09-09T01:46:30Z,"This function, and the two following, may cause. Return key, while the mouse is in a wave track, to edit a clip name.

Was that part of the design?

I think the more correct way to do call-through:  call through to the affordance, but then check event.GetSkipped().  If it is true, meaning the affordance did not take its first-chance to capture the key, then call through to the base class in case it wants to capture.

Take the bitwise OR of the return from the two captureKey calls, as the return value of the function.

It may not make a difference now, because nothing really happens in the base class methods, but don't assume that will remain so.

Make similar fixes in the next two functions.


"
704891903,1614,Paul-Licameli,2021-09-09T01:55:27Z,"Tab key navigation didn't work when I tried it, but the simple missing piece, is a change of WaveTrackAffordanceControls::CaptureKey so it does not skip the event for tab key.
"
704893435,1614,Paul-Licameli,2021-09-09T01:59:45Z,"Do we also want to implement leftward navigation among clips for Shift + TAB, as is done for labels?
"
704909404,1614,Paul-Licameli,2021-09-09T02:47:48Z,"make_shared ?
"
704910475,1614,Paul-Licameli,2021-09-09T02:50:43Z,"That's a strange line... I think it does nothing
"
704912047,1614,Paul-Licameli,2021-09-09T02:55:17Z,"""used to send"""
704913021,1614,Paul-Licameli,2021-09-09T02:58:08Z,override
704913065,1614,Paul-Licameli,2021-09-09T02:58:15Z,"override
"
704916277,1614,Paul-Licameli,2021-09-09T03:07:42Z,"Now I understand why TextEditHelper has a weak pointer to its delegate.  If it were shared, we would have a cycle of shared pointers which is a bad thing.

The helper is owned by its delegate and not the opposite.

Perhaps comments in those text edit classes should clarify this point of lifetime management?
"
704918290,1614,Paul-Licameli,2021-09-09T03:13:39Z,"You can simplify.  Double Click can OR the return value with Cancelled and then you don't need mDoubleClickFlag.  See the much repeated comment ""Do not start a drag"" in the source tree for other examples.
"
704920185,1614,Paul-Licameli,2021-09-09T03:20:03Z,"Now that you bind to the track list, the function OnTrackChanged will take its effect whenever any track changes it selected state.  Is that the intention, or should it check only for changes of the relevant wave track?
"
707258524,1614,vsverchinsky,2021-09-13T11:49:11Z,Not neccessary that `mInitialCursorPos <= mCurrentCursorPos` it depends on direction in which selection is moving: from left to right or right to left. Variables have the same meaning as they do in LabelTrackView
707265720,1614,vsverchinsky,2021-09-13T11:59:33Z,"Yes, it should, thanks!"
707280334,1614,vsverchinsky,2021-09-13T12:20:45Z,"Agreed, thanks!"
707298324,1614,vsverchinsky,2021-09-13T12:45:04Z,"Yep, don't work as expected with RTL layout and LTR language"
707301008,1614,vsverchinsky,2021-09-13T12:48:37Z,Will add a comment
707304955,1614,vsverchinsky,2021-09-13T12:53:29Z,">Are the above two lines right? Isn't current >= initial always?

Not always, depends on direction of cursor movement
"
707308108,1614,vsverchinsky,2021-09-13T12:57:22Z,Sort of
707573266,1614,vsverchinsky,2021-09-13T18:16:02Z,">Was that part of the design?

Yes, though editing will be invoked only if there is a ""selected"" clip on that track."
707643942,1614,vsverchinsky,2021-09-13T20:06:03Z,"Yes, it's intentional, thought was not specified by design document, so I made the behaviour similar to the behaviour in the label track, whenever it was possible (that was specified)"
707650674,1614,Paul-Licameli,2021-09-13T20:16:54Z,"But I thought mCurrentCursorPos and mInitialCursorPos are logical positions in a string of characters, not x coordinates on a screen.  If they are not that,  what are they?
"
707653147,1614,vsverchinsky,2021-09-13T20:20:55Z,"> Combine this header with TextEditHelper.h, because the classes cooperate closely

They do, but it's not neccessary that owner of the TextEditHelper and TextEditDelegate are the same object, and in the latter case it's better to keep it in a separate file"
707653554,1614,vsverchinsky,2021-09-13T20:21:33Z,Thanks! fixed
707665590,1614,vsverchinsky,2021-09-13T20:40:48Z,I'm not sure that undoing clipping region in the case of exception would be a safe operation
707667225,1614,vsverchinsky,2021-09-13T20:43:24Z,"Fixed, tabbing works for me on Windows, but didn't test it on other platforms.
Also added a Shift+TAB, thanks"
707669540,1614,vsverchinsky,2021-09-13T20:47:19Z,Thanks!
707738557,1614,vsverchinsky,2021-09-13T22:06:47Z,"Yes, they are a positions in a string. mInitialCursorPos is not moving and initialized when interaction is started, then, when user moves cursor either with mouse (holding a left button), or with Shift+Arrow Left/Right mCurrentCursorPos is used to track the ""current"" cusror position"
708389265,1614,Paul-Licameli,2021-09-14T15:28:51Z,"I still like non-inline virtual destructors (really, virtual anything should never be inlined, because it will usually never be inlined).
"
708389952,1614,Paul-Licameli,2021-09-14T15:29:31Z,"This suggestion wasn't implemented yet
"
708393961,1614,Paul-Licameli,2021-09-14T15:33:45Z,"I think you meant to replace the line before this new line.  Not to add a new line.  But the code is correct!  Just not simplified
"
708400978,1614,Paul-Licameli,2021-09-14T15:41:16Z,"Nice use of a template to capture the common logic of the forward and backward cases!

Instead of `Comp comp` I would write `Pred pred` because that argument is a unary predicate, not a binary comparator.  But that's only variable names.
"
708484066,1614,vsverchinsky,2021-09-14T17:26:00Z,Fixed with wxDCClipper
709689352,1679,Paul-Licameli,2021-09-16T01:43:11Z,"This is correct use of PositionToTime and TimeToPosition.   You understatnd that you don't just mutliply dx by some scaling factor.  The assumption of uniform samples per pixel should not be made.  Future projects might change that.
"
709689657,1679,Paul-Licameli,2021-09-16T01:44:15Z,"The Cancel procedure is good.

The Release is still empty.  It will require pushing an undo history item.
"
709689995,1679,Paul-Licameli,2021-09-16T01:45:20Z,"std::weak_ptr<UIHandle> instead of some subclass raises the danger of the slicing problem, which you correct in a later commit.

But look at all those old bad examples before it that I wrote!  These should be corrected too.
"
709690480,1679,Paul-Licameli,2021-09-16T01:46:49Z,"I observe that this second commit in the draft PR does not build.

In the final PR, that should be corrected, and I would like this internals commit to be first in the sequence.  Or it might be a PR by itself.
"
711424012,1679,Paul-Licameli,2021-09-18T02:04:01Z,The unusual case where a call to one of the *Sequence* functions is needed not *Play*.  Comment it.
711424770,1679,Paul-Licameli,2021-09-18T02:10:29Z,"I would slightly prefer not removing the anonymous namespace over can, making symbol tables just a little smaller.  This would require forward-declaring incomplete types in namespace { ... } in the .h file."
711429022,1679,Paul-Licameli,2021-09-18T02:46:19Z,"This change is correct, but discuss with @SteveDaulton whether new information about the size of the hidden parts of the clip should also be passed to Nyquist.

Understand what happens here: C++ composes a string that is passed to the Lisp interpreter, and that sets up variables that are available to programming in Lisp."
711430317,1679,Paul-Licameli,2021-09-18T02:57:33Z,"As I review the necessary changes in effects, this occurs to me.  What is expected if effects are applied to clips with hidden parts?  If you do nothing else, then the hidden parts remain unchanged.  Perhaps that is expected behavior.  Or perhaps in the case of the Reverse effect, it would be surprising behavior.  I’m not sure whether you should do anything extra.

This is one of the few places where there was a call to SetOffset.  Other effects did not use it.
"
711431051,1679,Paul-Licameli,2021-09-18T03:04:53Z,"As with Nyquist, so perhaps too for macro programming: give more information about the size of the hidden parts of the wave for sophisticated users.  Only information:  no interface for changing it. @SteveDaulton "
711431522,1679,Paul-Licameli,2021-09-18T03:09:12Z, Notice this comment.  The non-overlapping condition for clips can be violated with macro programming!  Not our responsibility to fix that yet I think.
711431653,1679,Paul-Licameli,2021-09-18T03:10:06Z,Another unusual SetOffset call.
711614236,1679,Paul-Licameli,2021-09-18T16:56:22Z,"I notice that this is a protected method.  I notice also that WaveTrack is a final class, so the distinction of protected and private is not useful.  Maybe the class should be simplified, only to have public and private methods.
"
711615101,1679,Paul-Licameli,2021-09-18T17:02:56Z,"I see that WaveTrack::GetNumSamples becomes two public methods, each used in only one other place, and those other uses are correct.

I like the renaming changes here and in WaveClip -- *Sample* versus *Play* names -- and they force you to recompile many places and consider carefully which renaming is the correct one.  I am more confident in your work when I see that you did this.  Should the name changes be permanent?  I say, yes.

Much less has changed in the interface of WaveTrack.h, than for WaveClip.h.  It is a little surprising -- so to review carefully I must also look at what else is in WaveTrack.h that did not change, and be convinced that it is correct not to change them.

I notice that WaveTrack::GetStartTime() and GetEndTime() did not change names.  But as you know, that is because they are overrides of methods of Track.h, which declares virtual GetStartTime() and GetEndTime() but doesn't comment what they are supposed to mean.  So, I understand this exception to renaming -- you don't want to make the name changes in the other overrides.

Still that means I must review all uses of GetStartTime and GetEndTime to be sure.
"
711616146,1679,Paul-Licameli,2021-09-18T17:12:16Z,"Comments above this function, and above the next function, still mention the old method names `GetStartTime, GetEndTime`.  Update the comments.
"
711616567,1679,Paul-Licameli,2021-09-18T17:15:56Z,"I'm doing that review, and I notice many GetStartTime and GetEndTime calls in effects, which I just assume correct -- that destructively applied affects will only apply to the un-hidden parts of tracks.  As I said, that might be surprising in some cases and a debatable point of design, but I will interpret the design for now as not demanding it.

I notice GetOffset() and SetOffset() are two other virtual functions in the base class Track that were not renamed, so I must also review uses of those to be sure of completeness.
"
711618037,1679,Paul-Licameli,2021-09-18T17:29:31Z,"The comment preceding this function also needs update to mention new method names
"
711628434,1679,Paul-Licameli,2021-09-18T19:06:18Z,"Now I have done that review.  I think that the legacy in class Track needs a clean-up.  It's not clear what the distinction of ""start time"" versus ""offset"" is supposed to mean, or what purpose the mOffset member variable serves.  I think there should be a clean-up project to eliminate the ""Offset"" functions.

This is not to be part of the present pull request.  It is for one of us to write in the stabilization period and for the other one to review.
"
711630192,1679,Paul-Licameli,2021-09-18T19:21:58Z,"Please insert this new member function immediately before WaveTrack::Paste().  That may make the commit more easily reviewable because there will be more common lines, and less in the diff view.
"
711631737,1679,Paul-Licameli,2021-09-18T19:36:48Z,"Buried in all these changes is one very interesting thing here:  the need for a more strict definition of correspondence of clips.

A detail like this deserves comments, both in the code here, and also in the git commit comments.

I'd like to encourage you to write more comments, of both kinds, about such changes of behavior.
"
711640153,1679,Paul-Licameli,2021-09-18T20:59:42Z,"The function `WaveTrack::Trim` has another interesting non-trivial change of behavior, like the test for correspondence, which is worthy of a comment.  Instead of deleting material, as before, now we hide the material in the smart clip but do not forget it.

I looked for where this function is used.  One place is in EffectSoundTouch -- but it always applies to a newly generated temporary track.  The other implements the Trim editing command, in EditMenus.cpp.  There is a comment there, no longer appropriate, which should be changed:

```
//Delete the section before the left selector
```
"
711661039,1679,Paul-Licameli,2021-09-19T00:41:00Z,"A definite mistake here.  WaveClip::SetOffset used to affect the envelope and the sequence.  But WaveClip::SetPlayStartTime now affects only the sequence.

"
711661446,1679,Paul-Licameli,2021-09-19T00:46:59Z,"If this function instead called through to WaveClip::SetSequenceStartTime(), which does change the envelope offset, then the bug last mentioned would be fixed."
711677507,1679,Paul-Licameli,2021-09-19T03:49:00Z,“Previously”
711677766,1679,Paul-Licameli,2021-09-19T03:51:25Z,"I thought there might be a bug with cut lines, but I read all again carefully and no longer think so.  Good job"
711680311,1679,Paul-Licameli,2021-09-19T04:20:20Z,Some doubtful code you dont need now?
712049731,1679,vsverchinsky,2021-09-20T10:34:06Z,Thanks!
713929581,1679,vsverchinsky,2021-09-22T13:14:57Z,"Yes, but now I think it's not that important to precisely count only visible cutlines here, since it's used only as an estimation for cache preallocation size and assertion at the end.  Removing it"
713929828,1679,vsverchinsky,2021-09-22T13:15:13Z,Thanks!
714081482,1679,vsverchinsky,2021-09-22T15:49:46Z,Updated both commit message and function comment
717483514,1679,Paul-Licameli,2021-09-28T11:33:03Z,"Should you change `sampleCount(floor(GetTrimLeft() * GetRate()))` to `TimeToSamples(GetTrimLeft() * GetRate())` for correct rounding?
"
717497362,1679,Paul-Licameli,2021-09-28T11:53:04Z,"What does it mean if `mAppendBufferLen` and `mTrimRight` are not both zero?  It could be the case of append-recording onto a clip that was shrunk at the right end.  Will the hidden part at the right be lost when the recording is complete?
"
717498146,1679,Paul-Licameli,2021-09-28T11:54:03Z,"This is not taking the append buffer into account, as with `GetPlayEndTime()`

But neither did removed `GetEndSample()`
"
717510254,1679,Paul-Licameli,2021-09-28T12:10:46Z,"Also not accounting for buffer length, inconsistently with `GetSequenceEndTime()`

But that was also so in removed `GetEndSample`
"
717517530,1679,Paul-Licameli,2021-09-28T12:20:35Z,This copies the comment and the logic of `WaveClip::WithinClip()` but it looks strange.  The fix for 2288 changed `<=` to `<`.  But should it have changed `>` to `>=` instead?
717520251,1679,Paul-Licameli,2021-09-28T12:24:13Z,And this copies `BeforeClip()` and the comment said there must be consistency.  But this looks like a very old off by one error.
717522113,1679,Paul-Licameli,2021-09-28T12:26:36Z,"And the fix for 2288 changed '>=' to '>' but here you do correct the coresponding function.

Maybe you reintroduce the bug 2288, which had its questionable fix.
"
718976522,1679,Paul-Licameli,2021-09-30T00:39:06Z,"""constrained"""
718983023,1679,Paul-Licameli,2021-09-30T00:59:17Z,"Thank you for fixing my embarrassing slicing mistakes!
"
718988546,1679,Paul-Licameli,2021-09-30T01:17:34Z,"Thanks for that
"
719056462,1679,Paul-Licameli,2021-09-30T04:52:53Z,Remove unused function in comment
719057123,1679,Paul-Licameli,2021-09-30T04:54:43Z,Comment that these set the trimming to a given absolute time (if that is in bounds)
719057343,1679,Paul-Licameli,2021-09-30T04:55:24Z,Comment that these four get and set the non-negative length of hidden material at each end
719057769,1679,Paul-Licameli,2021-09-30T04:56:54Z,Comment that offset is relative to playable start
719276659,1679,Paul-Licameli,2021-09-30T10:34:00Z,"Move this function, perhaps, so it is just after WaveClip::Clear, so the diff of the two versions is a bit smaller, more corresponding unchanged lines.
"
719330841,1679,Paul-Licameli,2021-09-30T11:55:34Z,"There were three cases above:  pasting exactly at the play start time; exactly at play end; or other.

I think that in the first of these cases, the two lines above are incorrect.  Because ClearSequence() has removed some intial segment of samples, you need to paste at sample 0.

And I think you need to reassign mSequenceOffset correctly in this case.

Am I mistaken?
"
720180220,1679,Paul-Licameli,2021-10-01T11:50:41Z,A comment should clarify the offset is relative to play start
720210256,1679,Paul-Licameli,2021-10-01T12:41:06Z,comment should carify that cut lines are not counted
720545421,1679,vsverchinsky,2021-10-01T21:17:19Z,"Yes, it should, thanks!"
721247902,1679,Paul-Licameli,2021-10-04T10:48:01Z,"I don't understand the four lines above.

This function isn't doing what the name suggests -- just inserting silence -- but it may also discard the trimmed samples.

Maybe there is a reason for that, can you explain?  Should there be a different function for that purpose?

But is it also a bug in that case, that the trim-left and trim-right values in the clip are not reset to 0?
"
721250971,1679,Paul-Licameli,2021-10-04T10:52:49Z,"I think most paths to WaveClip::InsertSilence involve newly created empty tracks, so it doesn't matter, but an exception is that WaveTrack::Join calls WaveClip::AppendSilence which calls this.

Did you insert those lines only to handle this special case?
"
721264560,1679,Paul-Licameli,2021-10-04T11:14:33Z,"I think TrimLeft was intended, not SetTrimLeft:  else, clearing the middle of a clip, which already had some left trimming, will give wrong results for the right hand new clip.

Am I correct?
"
721273839,1679,Paul-Licameli,2021-10-04T11:29:05Z,"I was wondering about these unexplained deleted lines... but I think we can prove that they never happened because of the lines in WaveTrack::HandleClear():

```
         if (!clip->BeforePlayStartTime(t1) && !clip->AfterPlayEndTime(t0) &&
               (clip->BeforePlayStartTime(t0) || clip->AfterPlayEndTime(t1)))
         {
            addCutLines = false;
            break;
         }
```

So, okay
"
721308689,1679,Paul-Licameli,2021-10-04T12:20:03Z,"Should this be GetPlayStartSample()?
"
722095867,1679,vsverchinsky,2021-10-05T10:16:13Z,"There is also another comment saying:
` One and only one of the following is true for a given t (unless the clip has zero length -- then BeforeClip() and AfterClip() can both be true). Within() is true if the time is substantially within the clip`. 
I think this is more about the definition of 'within'. Changing the implementation will require a more careful review of the usage of each function. And I think that changing '<=' to '<' was anyway correct, because 'GetPlayEndSample()' is the index of the sample following the last one, so 'within' includes the last sample, but does not include the first sample."
722101163,1679,vsverchinsky,2021-10-05T10:23:11Z,Thanks!
722164908,1679,vsverchinsky,2021-10-05T11:55:56Z,"If I understand you correctly, then I think that the answer to the first question is: 
`sampleCount s0 = TimeToSequenceSamples(t0);`
`s0` should be 0 for given `t0` after `ClearSequence(GetSequenceStartTime(), t0);`
But I doubt that pasting in front of the clip is possible at all, taking into account implementation of the `WithinPlayRegion` "
722196916,1679,vsverchinsky,2021-10-05T12:37:56Z,"The reason was that I considered `InserSilence(t0, length, envelope)` to be equivalent to `Paste(t0, silenceClip)`. And `Paste` discards the hidden part of the destination clip in case if the clip is prepended or appended. And I thought that this was the safest approach in these cases, but maybe you are right and hidden data should not be discarded (`Paste` should not discard too)  and `WaveTrack::Join` should handle this case instead."
722209467,1679,vsverchinsky,2021-10-05T12:52:54Z,"Yes, thanks! "
722214341,1679,vsverchinsky,2021-10-05T12:58:29Z,"Hm, yes, and this makes possible the case with prepending data in `Paste`. Thanks!"
1437585004,5818,Paul-Licameli,2023-12-28T11:44:31Z,"I would make a type distinction between points and vectors.  Then type checking will not allow meaningless operations.

Two vectors can be added or subtracted to make a vector.  A vector can be scaled by a number.

Addition of a point to a point or scaling of a point does not make sense.  Subtracting a point from a point does make sense, but the result is not a point, but a vector.
"
1437585747,5818,Paul-Licameli,2023-12-28T11:45:54Z,"Why are the two operations above useful?  They are not usual operations you want with vectors.
"
1437585932,5818,Paul-Licameli,2023-12-28T11:46:22Z,"Comment
```
@pre `scale` != 0
```
"
1437586828,5818,crsib,2023-12-28T11:48:03Z,"So essentially, the points are meaningless; vectors can be used all over the place :-)"
1437586844,5818,Paul-Licameli,2023-12-28T11:48:06Z,"Again, two questionable, non-member operations"
1437587379,5818,crsib,2023-12-28T11:49:11Z,Welcome to the world of graphics :-) Probably this operation is not used though
1437587603,5818,crsib,2023-12-28T11:49:41Z,This depends on ScaleType
1437587715,5818,Paul-Licameli,2023-12-28T11:49:53Z,"That's wrong.  Distance between points is norm of the difference.
"
1437588094,5818,Paul-Licameli,2023-12-28T11:50:35Z,"Norm is a function of a vector.
"
1437588204,5818,crsib,2023-12-28T11:50:49Z,This one is an unfortunate mistake 
1437589149,5818,Paul-Licameli,2023-12-28T11:52:55Z,"I would put Point, Rect, and Size in lib-screen-geometry which can be just about the geometry with no mention of color.  That's a leaf library not even using lib-utility.

Yes, lib-screen-geometry still has extraneous constants about the particular Audacity 3 layout, as we discussed before.   Let me figure out how to clean that up.
"
1437590575,5818,Paul-Licameli,2023-12-28T11:55:36Z,"`lowest` or `min`?
"
1437592092,5818,Paul-Licameli,2023-12-28T11:58:41Z,"So the convention is that x coordinates increase rightwards, y coordinates downwards.  It's the usual graphics convention, but worth explicit comment near the top of the class definition."
1437592435,5818,crsib,2023-12-28T11:59:21Z,"The ""problem"" with this specific PR is that it is two years old and predates many of the libraries. I haven't re-reviewed much myself, but most, if not all, of the lib-graphics are likely not strictly needed for the purposes of the pull request. 

I am not sure that we want it for 3.5 or for Audacity 3 at all; this was never discussed @ianalarina. Please note that the PR is not even on the board."
1437592674,5818,Paul-Licameli,2023-12-28T11:59:54Z,"Are the bottom and right coordinates included or excluded?
"
1437592875,5818,Paul-Licameli,2023-12-28T12:00:22Z,"A box could be valid but empty, if bottom and right are excluded.
"
1437593156,5818,Paul-Licameli,2023-12-28T12:00:59Z,"Inclusive, or exclusive of p2?
"
1437593496,5818,Paul-Licameli,2023-12-28T12:01:45Z,"bottomRight describes a point EXCLUDED from the given rectangle.
"
1437597170,5818,Paul-Licameli,2023-12-28T12:08:27Z,"There are only numbers in this class, so I think you don't need moves"
1437597532,5818,Paul-Licameli,2023-12-28T12:09:09Z,"Meant to INCLUDE the point always?
"
1437597726,5818,Paul-Licameli,2023-12-28T12:09:30Z,"I might name it with a noun, `Expansion`"
1437598272,5818,Paul-Licameli,2023-12-28T12:10:33Z,"There is an assumption that the rectangle is valid -- not negative area
"
1437599089,5818,crsib,2023-12-28T12:12:16Z,I have a strong opinion that function and methods must be verbs. I will push hard towards it.
1437600073,5818,Paul-Licameli,2023-12-28T12:14:16Z,"I think `>=` and `<=` are correct.  `p12` and `p22` are excluded points of the rectangles.
"
1437601001,5818,Paul-Licameli,2023-12-28T12:16:14Z,"This calculation is correct, but making the change above may return a different rectangle when the resulting area is zero.
"
1437602213,5818,Paul-Licameli,2023-12-28T12:18:23Z,"Also if you use {} for zero-area rectangles, canonicalizing origin to zero -- then should this do nothing for such rectangles?  Or is that the caller's problem to check?"
1437602342,5818,Paul-Licameli,2023-12-28T12:18:35Z,Or `Expansion`
1437602774,5818,Paul-Licameli,2023-12-28T12:19:10Z,ditto
1437603291,5818,Paul-Licameli,2023-12-28T12:20:06Z,"Ah, here it is:  bottom and right are indeed meant to be included.  That is not like top + height or bottom + width of a rectangle.
"
1437604848,5818,Paul-Licameli,2023-12-28T12:23:06Z,"Wrongly returns false when the true bottom or right edge of the rectangle coincides with the included boundary.

Fix with `- 1` twice
"
1437608200,5818,Paul-Licameli,2023-12-28T12:28:57Z,"It is possible that a box contains both r1 and r2, but does not contain `Intersect(r1, r2)` if they are disjoint, because you canonicalize the empty rectangle to all zeroes.  That seems weird, not corresponding to set-theoretic identities.

Maybe the function should always return true for empty rectangles, regardless where the top left corner is.
"
1437609924,5818,Paul-Licameli,2023-12-28T12:32:18Z,I think `value >= DataType{}` would optimize away anyway for unsigned types
1437610821,5818,Paul-Licameli,2023-12-28T12:34:01Z,I would call it `AxisAlignedBoundingBox`
1568640166,5818,vsverchinsky,2024-04-17T10:45:18Z,"```
IsSameTime(1.0, 0.0, 0.99) == true;
IsSameTime(1.0, 0.99, 1.5) == true;
IsSameTime(1.0, 0.0, 1.5) == false;//Not transitive
```
Is that expected?"
1568693520,5818,Paul-Licameli,2024-04-17T11:31:07Z,I don’t like adding to MemoryX.h.  These might be in a new small header in lib math
1568700578,5818,Paul-Licameli,2024-04-17T11:37:17Z,"I just merged a PR commit-experimental-branches and proposed another, maintain-experimental-branches.  I want to eliminate Experimental.cmake.

See the second PR.  If you are not certain to commit to using the experiment, instead define a bool constant in namespace Experimental.  Use if constexpr not ifdef to control new code.  That makes the compiler still check that it can build, when it does not build."
1568812983,5818,vsverchinsky,2024-04-17T13:04:53Z,Shouldn't it be `it->Key.FirstSample + CacheElementWidth < left`? 
1568849143,5818,vsverchinsky,2024-04-17T13:29:27Z,Is that range typically short? Will binary search benifit here?
1568880785,5818,vsverchinsky,2024-04-17T13:49:33Z,Isn't it always the only option here?
1569067022,5818,crsib,2024-04-17T15:42:33Z,"If this PR passes QA, I think the proper solution would be to remove the old code altogether. "
1569079865,5818,crsib,2024-04-17T15:51:45Z,An excellent point! Let me just kill this method LOL
1569105282,5818,crsib,2024-04-17T16:10:25Z,Sure
1569141830,5818,crsib,2024-04-17T16:36:21Z,"I have never seen this function as a hot spot.

Generally, with the current implementation, the cache can hold up to `width * 4 / 256`, which limits the cache size to under 64 items on the 4k display. I think the difference between linear and logarithmic time is negligible in this case."
709077541,1623,Paul-Licameli,2021-09-15T11:04:28Z,"This change of CMakeLists.txt should be in the previous commit ""Use lib-ffmpeg-support"""
709078421,1623,Paul-Licameli,2021-09-15T11:05:53Z,"Should that be `libavformat*.so.*` ?  Previous code had two *.  But maybe not, I see the old GetLibAVFormatName did not have a version number there.
"
709083170,1623,Paul-Licameli,2021-09-15T11:13:28Z,These string literals for file globs are repeated in this file.  Better to remove repetition.
712828024,1623,crsib,2021-09-21T08:42:12Z,"I strongly disagree with this change. FFmpeg behavior may differ if `den=0`. For example, it means that the decoder is responsible for setting up time bases based on stream content. But I agree that it is probably better to initialize the fields explicitly, regardless that this is a DTO for the C structure,"
712830453,1623,crsib,2021-09-21T08:45:26Z,"I think I would just explicitly delete the move constructor/assignment here, as well as in most of the other places "
712831354,1623,crsib,2021-09-21T08:46:31Z,"It generally makes no sense as this is an abstract class and is leftover from the moment, when I was ""generating"" wrappers"
712836389,1623,crsib,2021-09-21T08:52:53Z,"This was causing me issues on Windows, but looks like that was a different bug! Thank you for noticing!"
712837544,1623,crsib,2021-09-21T08:54:23Z,"Good catch, thank you!"
712923170,1623,Paul-Licameli,2021-09-21T10:52:09Z,Well defined values should be there I think if this struct is ever default constructed.  You decide which values.
712937918,1623,crsib,2021-09-21T11:14:46Z,"https://ffmpeg.org/doxygen/trunk/group__lavc__core.html#gaf4daa92361efb3523ef5afeb0b54077f

>Do not use this function. Use avcodec_free_context() to destroy a codec context (either open or closed). Opening and closing a codec context multiple times is not supported anymore – use multiple codec contexts instead.
"
712993001,1623,Paul-Licameli,2021-09-21T12:33:46Z,"Okay, it looked to me as if some resource reclamation done in the previous code was lost in this rewrite.

But it should be asked, does the documentation you cite apply to all versions of FFmpeg that we will support, or only to the latest?

If only the latest, then there may be some work to do to get it right for both.  Maybe then one .inl file won't be enough to compile the correct overrides for AVCodecContextWrapperImpl

"
712997586,1623,crsib,2021-09-21T12:39:19Z,"I took the best of both worlds in the end :-)

If `avcodec_free_context` is unavailable - I close the codec. The corresponding code will be pushed soon "
713737842,1623,crsib,2021-09-22T08:58:52Z,I will move it down to the case where av_free is used. There is no need for this call when av_packet_free is used for sure
713743668,1623,crsib,2021-09-22T09:05:56Z,Ooopsie indeed :( Thank you!
713744705,1623,crsib,2021-09-22T09:07:14Z,"Not really related to this PR, but let's pick it anyway"
713747171,1623,crsib,2021-09-22T09:10:13Z,"Well, it would be destroyed last anyway, as the member is first. But const - that is what I like a lot :)"
713747795,1623,crsib,2021-09-22T09:10:59Z,"Not in scope of PR, but good."
713767124,1623,crsib,2021-09-22T09:35:12Z,"Now that I've started thinking of it - both variants are incorrect. Right-shift is UB in C++ :( 

Yours is more correct, though. I will rewrite it using a similar approach to our regular sample format conversions, without dithering (this can be fixed later!) "
713767675,1623,crsib,2021-09-22T09:35:55Z,"I think it should be (value - 0x80) as well, I'll fix it that way"
713793971,1623,crsib,2021-09-22T10:10:03Z,"This looks like a more correct implementation. However, FFmpeg itself doesn't bother about flushing at all. We did it only once (and I was trying to keep as much of the original behavior as possible). 

I think codecs with AV_CODEC_CAP_DELAY are not common at all and the best implementation should check for it. Very quick search and I found only APE decoder to set this flag, but I think we do not support APE."
713794680,1623,crsib,2021-09-22T10:11:04Z,"Yes, but new API is not available in 2.2.2 and if we end up with FFmpeg version without avcodec_decode_audio4 - it can be implemented using new API"
713795549,1623,crsib,2021-09-22T10:12:23Z,"A fix to OffsetPacket was required after this change. I'm not sure if this code is really safe, though"
714253785,1623,Paul-Licameli,2021-09-22T19:39:51Z,"https://en.cppreference.com/w/cpp/language/operator_arithmetic

Strictly speaking, right shift of signed and negative values has “implementation defined” behavior, which is not the much worse category of UB."
714254435,1623,Paul-Licameli,2021-09-22T19:40:52Z,It was late night when I wrote these code changes.  Something needed doing here but I didn’t get it all right.
714255232,1623,Paul-Licameli,2021-09-22T19:42:03Z,"But note the important thing that the handle should have been constructed only after the possible reloading of libraries, right?"
714256194,1623,crsib,2021-09-22T19:43:35Z,"Yeah, same for me when I was writing the original code :-)

Thank you a lot for pointing it out, this was a really stupid error, not exposed in my testing"
714415337,1623,Paul-Licameli,2021-09-23T01:26:54Z,"Setting of codec_id, codec_type, and codec_tag did not survive the rewrite.  Did you decide they were unimportant steps or is this an omission?
"
714418177,1623,Paul-Licameli,2021-09-23T01:37:37Z,"here too, setting of codec_tag was commented out.  Omission or is it unnecessary?
"
714420140,1623,Paul-Licameli,2021-09-23T01:45:00Z,"Again assignment to codec_id is lost.  Instead we construct codec.  Sure of this?  Does codec get reassigned before it is ever used?
"
714425561,1623,Paul-Licameli,2021-09-23T02:04:27Z,Should the local codecID be reassigned here instead?
714425921,1623,Paul-Licameli,2021-09-23T02:05:59Z,"Since codec_id in the structure was not reassigned, should this be the local codecID instead?
"
714426262,1623,Paul-Licameli,2021-09-23T02:07:16Z,"(Or translate the AUDACITY_ value to library value?)
"
714427779,1623,Paul-Licameli,2021-09-23T02:13:07Z,"AV_ERROR_MAX_STRING_SIZE was 64 actually.  Shrug.
"
714428167,1623,Paul-Licameli,2021-09-23T02:14:35Z,"Maybe use local codecID here too
"
714430795,1623,Paul-Licameli,2021-09-23T02:24:42Z,"Why is the error code negated?  AVERROR was a no-op macro, it didn't negate.

I wondered if this return value is passed to ffmpeg because this is a callback function?  But further examination tells me no.
"
714438578,1623,Paul-Licameli,2021-09-23T02:53:55Z,"You deleted all the resets.  The lifetime of side structures therefore continues until the end of the lifetime of the ExportFFmpeg object.  Did you check that this lifetime isn't longer than when this function is called?  Are you sure the ExportFFmpeg object isn't reused and might expect a clean state when it is?

I tried to determine that from the code, and it's not trivial to prove it.  So maybe leave the harmless release() lines.

"
714643103,1623,crsib,2021-09-23T09:55:44Z,"Hmm, codec_tag might be important, as it may choose a different codec. I will bring it back. The other two are set by avcodec_open2. I will double check"
714646233,1623,crsib,2021-09-23T10:00:08Z,"I don't really see why logger should live shorted than FFmpeg. If it does - we will be losing potentially useful information from the log. 
"
714650097,1623,crsib,2021-09-23T10:05:41Z,"This is a bug in the Python generator (well, not a bug, it is ignorant about some libc constants). I will fix it in FFmpegTypes.h"
714664926,1623,crsib,2021-09-23T10:28:58Z,Double checked - we retrieve the default tag for the codec and output format. If the tag is not set - FFmpeg will call av_codec_get_tag internally for encoders where it is relevant
714668046,1623,crsib,2021-09-23T10:33:38Z,This one I will return though!
714688622,1623,crsib,2021-09-23T11:05:59Z,And it helped to find and fix a different bug!
714688846,1623,crsib,2021-09-23T11:06:22Z,codec_id should not be assigned
714689595,1623,crsib,2021-09-23T11:07:32Z,We can for sure
715213224,1623,Paul-Licameli,2021-09-23T23:07:20Z,"Sorry but... you should remove my comment now!  You fixed the use of tags.

"
715215203,1623,Paul-Licameli,2021-09-23T23:12:28Z,"These two new lines have no side effect and just repeat the GetChannels call.  Did you intend something else?
"
715215893,1623,Paul-Licameli,2021-09-23T23:14:21Z,"I see you are correcting possibly wrong assumptions about endian-ness in the old code.
"
715223485,1623,Paul-Licameli,2021-09-23T23:35:28Z,"I notice this function, too, is ""deprecated""
https://ffmpeg.org/doxygen/3.4/group__lavc__encoding.html#gae4b5ba4d50b1264a5cf5408ff32fb622
"
715226238,1623,Paul-Licameli,2021-09-23T23:42:52Z,"Suggest one more comment documenting the assuptions made elsewhere:

```
@return zero if success, negative if error
```"
715231489,1623,Paul-Licameli,2021-09-23T23:58:59Z,"One more doubt!

Is this one more place where you should use the local variable `codecID` and not the id stored in the context object?
"
715442474,1623,crsib,2021-09-24T09:01:46Z,"Missed it, sorry!"
715443040,1623,crsib,2021-09-24T09:02:35Z,"Debugging leftovers, fixed. Conditional breakpoints are too slow for practical use :("
715444608,1623,crsib,2021-09-24T09:04:50Z,"The original code was copying random memory most of the time (as the tag was an empty string by default, so 0 and 3 random bytes were copied). So endian-ness wasn't the worst problem anyway :)"
715445991,1623,crsib,2021-09-24T09:07:00Z,"Yes, but send/receive family is not supported in 2.2.2. When encode_audio/decode_audio will be removed - we will have to add 2 implementations. "
646424848,952,Paul-Licameli,2021-06-07T09:33:39Z,"Interactive rebase might eliminate this commit as a fixup on a previous one
"
646425373,952,Paul-Licameli,2021-06-07T09:34:22Z,"Raw string literals are good.

A concatenation of raw string literals, with comments explaining this big regex, would be even more helpful to a reader.
"
646428043,952,Paul-Licameli,2021-06-07T09:38:07Z,"I make no comments on this commit
"
646432897,952,Paul-Licameli,2021-06-07T09:44:33Z,"Suggest consistency of wording with the option before it:

""Build support for sending errors to Sentry"""
646446647,952,Paul-Licameli,2021-06-07T10:02:54Z,"I'm not requiring a fix for this now:

This lonely header file will have to move to a library at some point, to enable the refactoring, so that everything dealing with the Sqlite DB can be separated from Audacity.

lib-sentry-reporting would be the obvious place for it, and then `${_OPT}has_sentry_reporting` would need testing in lib-sentry-reporting/CMakeLists.txt, and the library would build differently so that ADD_EXCEPTION_CONTEXT would be a no-op.  (It might even be a proper, inline function instead of a macro.)



"
646453468,952,Paul-Licameli,2021-06-07T10:12:52Z,"I'm trying to build the new code, without success yet
I tried
`cmake -GXcode -Daudacity_has_sentry_reporting=YES -Daudacity_has_networking=YES -DSENTRY_DSN_KEY=YES -DSENTRY_HOST=YES _DSENTRY_PROJECT=YES ..`
"
646456045,952,Paul-Licameli,2021-06-07T10:16:45Z,"The comment above are organized by Doxygen into one detailed comment on the class, with no brief comment

I usually write

`
//! A brief description
`
`
/*!
And longer comments
*/
`
"
646457833,952,Paul-Licameli,2021-06-07T10:19:35Z,"Perhaps better to call it MoveParameters, the object isn't consuming something
"
646465974,952,Paul-Licameli,2021-06-07T10:31:51Z,"Should the constructor be private?

Is it enough to have one global or could there be a need for thread_local ?
"
646469209,952,Paul-Licameli,2021-06-07T10:36:47Z,"Do you mean ""runtime_error""

I don't see the *'s in the code
"
646471293,952,Paul-Licameli,2021-06-07T10:40:06Z,"spelling (twice)

You are explaining why this destructor must be non-inline, and I think it's not just GCC that would require this
"
646475341,952,Paul-Licameli,2021-06-07T10:46:32Z,"Is this used anywhere?
"
646476025,952,Paul-Licameli,2021-06-07T10:47:36Z,"Can you explain the parameters?

I think they are an HTTP code and a response
"
646478590,952,Paul-Licameli,2021-06-07T10:51:25Z,"Should you pass Close and log to ShowErrorReportDialog?
"
646481023,952,Paul-Licameli,2021-06-07T10:55:08Z,"Where a CompletionHandler is given
"
646481237,952,Paul-Licameli,2021-06-07T10:55:18Z,"The only place I think
"
646482478,952,Paul-Licameli,2021-06-07T10:57:18Z,"You added a function to this file, but I had deleted this file in a branch

I rewrite my branch so I don't delete the file, but I restrict inclusion of it to just one place.

This needs to be hidden behind the BasicUI facade at some point, so lib-exceptions and others can avoid dependency on wxCore.
"
646483041,952,Paul-Licameli,2021-06-07T10:58:02Z,"See other remark about Doxygen
"
646486632,952,Paul-Licameli,2021-06-07T11:03:54Z,"This will cause the exception dialog whenever there is any AudacityException.

I think we may not want it for every exception, and might need to construct exception objects with an option not to use this dialog.

For instance exceptions in OnPaste in EditMenus.cpp.  You can get them if you select two wave tracks, copy, then select a wave and a label track, and try to paste.  Nothing goes wrong with external devices.  Rather the exception provides a way to write the complicated paste operation and allow backing out of some deeply nested place when the operation can't complete just for logical reasons that are discovered late.  It relies on a catch handler in AudacityApp::OnExceptionInMainLoop and the undo manager to restore document state.





"
646487520,952,Paul-Licameli,2021-06-07T11:05:18Z,"Other examples of SimpleMessageBoxException in WaveTrack.cpp.
"
646488224,952,Paul-Licameli,2021-06-07T11:06:30Z,"This might fire every time somebody simply has a loose cable connection... would the collected data be valuable?

"
646489151,952,Paul-Licameli,2021-06-07T11:08:01Z,"So I see many straightforward substitutions of one function for another.

A question is whether this is substitution is complete enough.

"
646489910,952,Paul-Licameli,2021-06-07T11:09:19Z,"This whole commit is also straightforward, but not obviously complete from reading diffs alone.
"
646496841,952,Paul-Licameli,2021-06-07T11:18:51Z,"I suggest:

AnonymizedString is a new class that wraps a const std::string.  It calls the function in its constructor.  It has operator const std::string& .  It has a method called `move()` that returns std::string&& .

So objects of that type guarantee anonymization at construction, and are immutable except to move out of them again.

Then Message::Create and all these other functions are changed to take AnonymizedString as argument.

Why would I do this?  Two reasons.  One, I genrally don't like ""naked"" wxString or other string classes overused in function signatures.  I would rather always have strings in different wrapper classes when they serve different purposes, and the non-interconversion of those wrapper types eliminates programming errors.

Second reason, it makes it more obvious to anyone reviewing classes Message and Exception, just from the header files, that they deal in anonymized data:  It's not implementation detail inside those functions, that anonymization happens.  Rather the reviewer is directed to the AnonymizedString class and can see it must happen before you enter these functions.


"
646497440,952,Paul-Licameli,2021-06-07T11:19:50Z,Did you omit part this comment?
646498449,952,Paul-Licameli,2021-06-07T11:21:30Z,"spelling
"
646649323,952,crsib,2021-06-07T14:37:30Z,"In the next commit, I will add `audacity_header_only_library` . It does not set any graph nodes yet.
"
646653046,952,crsib,2021-06-07T14:41:39Z,">Is it enough to have one global or could there be a need for thread_local

It is internationally not thread_local, with the synchronized state."
646653884,952,crsib,2021-06-07T14:42:32Z,I really thought that Doxygen supports Markdown.
646669461,952,crsib,2021-06-07T14:59:20Z,"For Clang and CL it is sufficient to write `Report::~Report() = default;` However, I can't find which behavior is correct in C++ standard. I will remove the comment"
646683568,952,crsib,2021-06-07T15:11:31Z,"I will remove `handled`, AddData still seems useful to me"
646684647,952,crsib,2021-06-07T15:12:48Z,"`Close` defines the behavior of the help button. For Sentry dialog - there is no default option, so Close is always assumed to be `false`"
646687312,952,crsib,2021-06-07T15:15:13Z,There is only one way to find out :-)
646688338,952,crsib,2021-06-07T15:15:54Z,I've grepped ShowErrorDialog and replaced all the places I felt made sense.
646689590,952,crsib,2021-06-07T15:16:44Z,"And I no longer remember, what I've planned to write anyway. I will clean it up"
646691147,952,Paul-Licameli,2021-06-07T15:17:50Z,"Of course I see the synchronization, so it's not thread_local, but I'm wondering whether it might need to be.

Maybe (very very improbably) there are exceptions on two threads at once and you don't want to combine their data into one report.
"
646692014,952,Paul-Licameli,2021-06-07T15:18:22Z,"You are right, it appears as italics in the html pages.
"
646693284,952,crsib,2021-06-07T15:19:15Z,">when they serve different purposes

Well, they are just strings here. But I like your second point"
646698120,952,Paul-Licameli,2021-06-07T15:23:41Z,"And the log argument is meant to show the user more details.  Also not relevant?
"
646700941,952,crsib,2021-06-07T15:27:02Z,"We always show the details always with the report. 

But I guess if `log` is not empty - it makes sense to include it with the report itself. I will add it
"
646748818,952,Paul-Licameli,2021-06-07T16:23:06Z,"A string is not just a string if you wrap it in a well designed class, with a constructor that establishes an important invariant property (like some kind of well-formedness), and methods that preserve this invariant (such as by making the contents immutable or only available to move out).

A function taking that wrapped class is saying in its contract, not its implementation, that it takes as a precondition the prior satisfaction of this invariant.  Successful construction of an object of the class amounts to a proof of the precondition.

Maybe I am only restating my second point here, but I find it very useful to think in such terms.

"
646750382,952,Paul-Licameli,2021-06-07T16:25:19Z,"I use `@pre` `@post` and `@invariant` in my Doxygen comments sometimes.  Programming by contract, even if only informally stated in comments, is useful discipline.
"
646955792,952,Paul-Licameli,2021-06-07T21:34:05Z,"Where is TARGET defined?  The function argument is NAME
"
646965216,952,Paul-Licameli,2021-06-07T21:51:18Z,*Imitate
646966461,952,Paul-Licameli,2021-06-07T21:53:49Z,"Breaking with the CamelCase naming convention is acceptable for string-like and container-like classes, following C++ standard library conventions instead.

So perhaps also add empty(), clear(), swap() ... as they prove needful.
"
646967580,952,Paul-Licameli,2021-06-07T21:55:48Z,"Bravo!  You exceeded my expectations.  I wasn't insisting on the suggested configuration-time switch for approval of the PR, but now here it is.
"
646969421,952,Paul-Licameli,2021-06-07T21:59:37Z,"A class comment please, explaining that initialization strips paths, and then nothing changes the contents except assignments and moves from the same class."
646969821,952,Paul-Licameli,2021-06-07T22:00:24Z,"Nonexplicit constructors, which I think are good for the purpose."
646971872,952,Paul-Licameli,2021-06-07T22:04:46Z,"maybe move parameterValue
"
646977476,952,Paul-Licameli,2021-06-07T22:17:26Z,That comment is right only if the argument is `ExceptionType::Internal` ?
646977704,952,Paul-Licameli,2021-06-07T22:17:56Z,ditto
646978089,952,Paul-Licameli,2021-06-07T22:18:57Z,"I hadn't thought to make this distinction.  Good!
"
646978919,952,Paul-Licameli,2021-06-07T22:21:02Z,"But now I wonder if we always want this to be Internal too.  What if you are just trying to write to a folder that is write-protected or a drive that is out of space?

You decide.  Write a comment if you don't change it.
"
646981548,952,Paul-Licameli,2021-06-07T22:26:59Z,"And that's all of our message box throws reexamined!  Very good.
"
646983370,952,Paul-Licameli,2021-06-07T22:30:46Z,"Now I see TARGET was defined in the context of the sole use of this new CMake function, but I think you should not rely on that, use NAME
"
647320145,952,crsib,2021-06-08T10:38:43Z,">What if you are just trying to write to a folder that is write-protected

We had peculiar SQLite errors in this case in 3.0.

Let's leave it for now and see, how it turns out."
647464350,952,Paul-Licameli,2021-06-08T13:53:30Z,too
647469662,952,Paul-Licameli,2021-06-08T13:58:53Z,"still misspelled
"
915749282,3183,Paul-Licameli,2022-07-07T11:08:18Z,"It looked very weird that the Wrapper class, which should have nothing to do with user interface, requires a pointer to a window.

I see you did this only because `AudacityMessageBox` uses that pointer in two places to report errors.  (At least it is only two places, at the third commit.)

So I say, just pass nullptr.  The message box will still appear, as it always does, as a window with its own frame, but wxWidgets will not consider it to have a parent and might simply position it a bit differently.

Then keep mParent out of this wrapper.




"
915761299,3183,Paul-Licameli,2022-07-07T11:23:57Z,"I notice there is an assignment of this member in the constructor of VSTEffect that is no longer necessary.

I suggest, you make a new preliminary commit, and rebase your branch onto that:

First rewrite the constructor of VSTEffect to eliminate as many assignments to members, as possible.  Instead, use in-class initializations where possible, otherwise member initializers in the constructor.


"
915767166,3183,Paul-Licameli,2022-07-07T11:31:27Z,"This changes behavior from `GetSymbol`.  It will cause the wrong thing to happen, in case Audacity 3.1 saved an XML file and 3.2 reloads it.  There will be an unnecesary dialog asking to continue.

Instead, lower the `mName` member into the wrapper so `GetSymbol` can be defined in just the same way.


"
915768831,3183,Paul-Licameli,2022-07-07T11:33:32Z,"You wrote the functions to set chunks so that you avoided duplications:  the old functions invoke the `B` functions for common steps.

Do likewise for setting the parameter.  Make the return from this function boolean if necessary to enable that rewrite.
"
916099076,3183,pietro68,2022-07-07T17:03:10Z,"ok, done"
916099215,3183,pietro68,2022-07-07T17:03:20Z,"ok, done"
916099329,3183,pietro68,2022-07-07T17:03:29Z,"ok, done"
916110739,3183,pietro68,2022-07-07T17:18:00Z,"I do not understand: I already wrote ::callSetParameterB. Do you mean, I should have it return a boolean and check the value where called?

The reason to write the ""B"" versions of callSetChunk, callSetParameter, callSetProgram was this: they are needed by other methods in the Wrapper, but the original versions also loop on mSlaves, and I guess (please confirm) that the Wrapper should not be aware of them. The ""B"" versions are basically copies of the originals, with the loop on mSlaves removed. "
916317844,3183,Paul-Licameli,2022-07-07T22:11:14Z,"This first commit is good.

Do you know that you could even write
```
unsigned mBlockSize{ mUserBlockSize };
```

The in-class initializer doesn't have to be a constant expression, and it can refer to earlier declared members.  That would more exactly preserve the meaning of the assignment

```
mBlockSize = mUserBlockSize = 8192;
```

"
916321444,3183,Paul-Licameli,2022-07-07T22:19:11Z,"Now that mName is in the wrapper, I suggest:
- make this function non-inline
- simply call it `GetSymbol`
- Redefine `VSTEffect::GetSymbol` (a virtual function override) as the call-through to `VSTEffectWrapper::GetSymbol`

"
916323541,3183,Paul-Licameli,2022-07-07T22:23:53Z,"I mean, I see repetition of the use of `effCanBeAutomated`.  A small rewrite eliminates that repetition.  `callSetParameter` can be defined in terms of `callSetParameterB` meaning that it is not coincidental that the same constant is reused.  The ""B"" function does not always set the parameter, and by returning a boolean, it tells the other function whether to continue setting parameters in slaves.

"
916329295,3183,Paul-Licameli,2022-07-07T22:37:45Z,"This call isn't needed because `mVSTVersion` was assigned in `VSTEffect::Load` and is a member now of the `VSTEffectWrapper` base, and I presume the answer returned by the plug-in to this query will never change.

In fact, it may be that we discover, as we take this transformation further, that most of the things assigned in `Load` will need to move down into the wrapper, and so perhaps the entire function will also move into it.
"
916330894,3183,Paul-Licameli,2022-07-07T22:41:47Z,"It may help, in the commit comment, to explain that `StoreSettings` adapts the logic in `LoadParameters` and `LoadSettings` but using in-memory settings instead of a config file as the source of values.
"
916338607,3183,Paul-Licameli,2022-07-07T23:01:36Z,"This visit of parameters has these differences from `VSTEffect::LoadSettings`:
- The bracketing dispatches of `effBeginSetProgram` and `effEndSetProgram` are not done
- The bounds check on `value` between +/- 1 is not done

Is it important to preserve the bounds check?  I honestly don't know.  Preserve it, as real code or as commented out, and experiment may later decide if we really need it.

`LoadSettings` as I now see, and as you probably saw too, was doing `callSetParameter` on self and then again on slaves:  which was unnecessary, because the `callSetParameter` call on self was already recursive.

The begin and end of set program were only done on master.  Was it right or wrong not to do it to on slaves?  I don't know.  But let's assume, it can be done on every handle for every instance, and the calls should therefore be part of `StoreSettings` here.

In practice, multiple slaves will happen only when you use the old non-modal dialog from the Effects menu, which will eventually not be part of 3.2 anyway.  But we may in future want to reimplement something like it for a master bus of effects.





"
916340026,3183,Paul-Licameli,2022-07-07T23:05:03Z,"Comment in the commit that `FetchSettings` adapts `SaveSettings` and `SaveParameters` but storing in-memory in EffectSettings, not in a config file.
"
916343718,3183,Paul-Licameli,2022-07-07T23:14:30Z,"The commit that introduces this function should also call `RefreshParameters()` which is a step done in the existing functions that load user and factory presets and that import.

Maybe you did this in a later commit I haven't reviewed yet?  But you can do it in this early commit to make the function complete.
"
916345036,3183,Paul-Licameli,2022-07-07T23:18:04Z,"This `MakeSettings` is good.  To be very fussy about the correct logical sequence of commits, I would say do this one before defining `TransferDataToWindow`, just so that the lines

```
   if (!StoreSettings(GetSettings(settings)))
      return false;
```

... are sure NOT to return false because `mSettings` has not yet been initialized.
"
916347411,3183,Paul-Licameli,2022-07-07T23:24:27Z,"Now I have looked at the whole PR and I see this wasn't done.  The task breakdown said

""Define TransferDataToWindow (to become UpdateUI of a validator later), calling StoreSettings; remove parts of LoadSettings that duplicate this""

So, to make that step complete, add the `RefreshParameters()` call and also remove the call in three places, all in the same commit.
"
916350442,3183,Paul-Licameli,2022-07-07T23:32:32Z,The commit that inserts calls to `FetchSettings` should also do it in `LoadFactoryPreset`
916355700,3183,Paul-Licameli,2022-07-07T23:47:16Z,"This new definition of `LoadSettings` should set up all members of `vstSettings`, not just the parameter map.

Clear the chunk and set the id, version, etc. from the wrapper.
"
916405214,3183,Paul-Licameli,2022-07-08T02:05:50Z,"In the last commit, which adds two calls to `StoreSettings`, check the return value and return early if it is false.  In `SaveParameters`, do that before any other steps changing the config file.
"
916407324,3183,Paul-Licameli,2022-07-08T02:11:26Z,"In the commit that adds these lines, ""Rewrite SaveParameters not using the handles"" -- you store values from vstSettings and not from mAeffect, which is what I meant.  Hiding all mention of mAeffect in this function isn't what I meant.  It's not wrong to factor out `SupportsChunk`, but not what I meant.

But the last commit in the sequence (after this) should also, as I said, do `StoreSettings` first, anyway, which includes the check that the values in the two agree."
916408488,3183,Paul-Licameli,2022-07-08T02:14:56Z,"The commit adding these two functions, ""Rewrite LoadParameters not using the handles"", is just hiding mention of mAeffect in LoadParameters while not removing dependency on its state.  It's not what I meant.

However, I must read and understand all that you commented in ""Rewritten LoadSettings / SaveSettings"".

Actually eliminating use of mAEffect might not be possible, as I think you are saying:  instead, this handle is really needed as a ""scratch"" as with AudioUnits.
"
916411654,3183,Paul-Licameli,2022-07-08T02:24:16Z,"The commit that rewrites this function can also make it and `StoreCommandParameters` const, and that will allow you to remove `DoLoadUserPreset` and a `const_cast`
"
916418631,3183,Paul-Licameli,2022-07-08T02:43:59Z,"Okay, commit 6.2, the most difficult one:

I'm not convinced by what you write in the commit comment, about the need to keep the old functions.  And, the new LoadSettings/SaveSettings are not using the same ""parm_%d"" convention to name the keys (sometimes), which means it might break compatibility with old config files.

`StoreCommandParameters` is used only by `LoadParameters`.  If it takes the ""chunk"" alternative, then it is using the mAEffect handle, as a ""scratch"" from which it then fetches settings.  That's ok.

If that function does not take the early exit path loaing a chunk -- then instead a string value for key ""Parameters"" is loaded, and reinterpreted as a config file of key-value pairs.  I don't see why this could not be given to the new `LoadSettings` directly.  In which case, you do not rely on a ""scratch"" handle and so should NOT use `FetchSettings`.

`FetchCommandParameters` is used only by `SaveParameters`.  That function first calls `StoreSettings` to change the scratch handle state, and then maybe exits early if chunks are supported.  But if they are not, then again, I don't understand why the direct translation of settings to key-value pairs in `eap` can't be done.

"
916763464,3183,pietro68,2022-07-08T12:21:19Z,"I understand now, thanks, done"
916767330,3183,pietro68,2022-07-08T12:26:32Z,"What you suggest would look better - done, although I had to use a static cast:

`unsigned mBlockSize{ static_cast<unsigned>(mUserBlockSize) };`"
916790670,3183,pietro68,2022-07-08T12:57:18Z,"ok, done"
916831023,3183,pietro68,2022-07-08T13:44:08Z,"Alright, done. And yes, probably a good part if not all of ::Load will need to move to the wrapper."
916887560,3183,pietro68,2022-07-08T14:44:38Z,"ok, done"
916889788,3183,pietro68,2022-07-08T14:47:01Z,"ok, done"
916955039,3183,pietro68,2022-07-08T16:03:22Z,"You are right, I forgot this. Now done."
916959621,3183,pietro68,2022-07-08T16:09:23Z,"Good point, done"
916968935,3183,pietro68,2022-07-08T16:22:12Z,"Good catch, now done"
916990498,3183,pietro68,2022-07-08T16:52:54Z,"This is what I added now, I hope it is what you meant?

 ```
   vstSettings.mChunk     = std::nullopt;
   vstSettings.mVersion   = VSTEffectWrapper::mVstVersion;
   vstSettings.mUniqueID  = VSTEffectWrapper::mAEffect->uniqueID;
   vstSettings.mNumParams = VSTEffectWrapper::mAEffect->numParams;
```"
916996251,3183,pietro68,2022-07-08T17:01:29Z,"That's right, done."
917764524,3183,pietro68,2022-07-11T10:10:06Z,"I added the bounds checking and the  `effBeginSetProgram` / `effEndSetProgram` bracketing. I need a plugin which does not support chunks to test this, but since `LoadSettings` did this, it looks ok if StoreSettings also does it.
"
917804033,3183,Paul-Licameli,2022-07-11T10:59:55Z,"Maybe mBlockSize should just be size_t.

Or you can use the = syntax not {} .  There is a difference.  {} disallows narrowing conversions."
917806052,3183,Paul-Licameli,2022-07-11T11:02:31Z,Yes
917862764,3183,pietro68,2022-07-11T12:17:16Z,"If it is allowed to reference mAEffect for that case, then I am happy to revert `SupportsChunk` - done."
917887478,3183,pietro68,2022-07-11T12:45:43Z,"ok, done"
917995134,3183,pietro68,2022-07-11T14:20:55Z,"I interpret your comment like so: in `LoadParameters`, instead of calling `StoreCommandParameters` and then `FetchSettings`, just call `LoadSettings`. Then there would be no need for `StoreCommandParameters` to exist.

But the thing is: the new `LoadSettings` only translates to settings the `CommandParameters` that it is given, without writing them to the handle. I thought this was the semantics of `LoadSettings` we agreed on - is it not? it should be only a translator, not a translator + a setter. 

Because I found the existing `LoadSettings` not to conform to these agreed semantics (it was also writing to the handle), I renamed it to `StoreCommandParameters` and wrote a new `LoadSettings` which does the translation only.

But I could also revert it all, i.e. just have the original `LoadSettings` which translates and sets to the handle, and then I could use it as you suggest.  No problem for me, the code would also be simpler. I would only have the concern that the semantics of `LoadSettings` would then vary across effect families."
918652553,3183,pietro68,2022-07-12T07:44:53Z,I opted to make mBlockSize a size_t
918792844,3183,pietro68,2022-07-12T10:09:58Z,"Let's try to see it from this angle: what `LoadParameters` has to do, is to read some stuff from the config, set it to a plugin handle (done in the call to `callSetChunkB`) and fetch the settings from the plugin handle. This handle is `mAEffect`, a member of the wrapper. Methods of `VSTEffect` do not operate on `mAEffect` directly, but through methods of `VSTEffectWrapper`. Is this wrong?"
919877320,3183,Paul-Licameli,2022-07-13T09:48:42Z,"Just remove that commented line
"
920883287,3183,pietro68,2022-07-14T08:15:52Z,done
921430728,3183,Paul-Licameli,2022-07-14T17:56:35Z,"I don't see it
"
1593647921,6395,vsverchinsky,2024-05-08T08:38:50Z,May be `lib-src` is better place for this library?
1593694089,6395,vsverchinsky,2024-05-08T09:06:51Z,"`std::move` is redundant here, better pass `settings` parameter by reference"
1593707116,6395,vsverchinsky,2024-05-08T09:13:08Z,"`mSettings` is not initialized at this point. While in that particular case nothing bad will happen because `CompressorSettings` is trivially constructible, I'd still suggested to move initialization into constructor's body."
1593812943,6395,vsverchinsky,2024-05-08T10:35:05Z,"I don't understand why should `LimiterSettings` inherit `CompressorSettings`. I really do not see any benefits from doing so, but I see downsides in many `if(...) else { ... }` and typechecks. I'd suggested to eliminate `LimiterSettings` type, but instead introduce:
```cpp
static constexpr DefaultCompressorSettings = CompressorSettings {...};
static constexpr DefaultLimiterSettings = CompressorSettings {...};
``` "
1593991818,6395,saintmatthieu,2024-05-08T12:59:58Z,"I've been considering, yes, but I'll probably be modifying the code in some follow-up work. Is that a good reason?"
1593995870,6395,saintmatthieu,2024-05-08T13:03:02Z,"Well spot, thanks."
1594050276,6395,saintmatthieu,2024-05-08T13:37:57Z,"I'm not sure that this would work - not that I wouldn't like it to!
I think it's because of this guy: 
![image](https://github.com/audacity/audacity/assets/22740106/6a686b28-d2a8-403b-b79d-950a8b6ac487)
The `EffectSettingsAccess` class initially creates a default-constructed struct. Creating a new type is the only way I found of circumventing that."
1594062208,6395,saintmatthieu,2024-05-08T13:45:40Z,"Is it? The given `settings` object is originally a right value. If I passed by reference in the end there'd be a call to the copy ctor, wouldn't there?"
1601159167,6395,vsverchinsky,2024-05-15T08:09:43Z,Not the case with POD-types I guess. It will simply create an extra copy.
1601175735,6395,vsverchinsky,2024-05-15T08:21:47Z,"Hm, didn't think of it. `EffectWithSettings<>::MakeSettings` is virtual and can be overriden, will that help?"
1601181422,6395,vsverchinsky,2024-05-15T08:24:37Z,"Up to you. I think it's not a big deal if you modify code added to `lib-src`, I recall there are already such cases"
1601359271,6395,vsverchinsky,2024-05-15T10:13:38Z,"`instance` will outlive editor, so that should be safe"
1601410190,6395,vsverchinsky,2024-05-15T10:53:09Z,Is it possibly depend on ring buffer size (which is usually 0.25ms)?
1601499471,6395,vsverchinsky,2024-05-15T11:55:19Z,`wxPoint2DDouble` makes graph move smoother?
1601550024,6395,vsverchinsky,2024-05-15T12:27:43Z,"I guess it will be better to always call `RealtimeProcess`, but instead effects could implement `bypass` mode, so that effects could accumulate samples if it's required for processing. For VST's that should be done trivially.  WDYT?"
1601854858,6395,vsverchinsky,2024-05-15T15:28:25Z,"`CompressorInstance` could remember it's state after init/suspend/resume/finalize, `OnTimer` then could check that state. I have no doubt that observers will do the thing, I'm just a bit sceptical about effect instance being a publisher."
1603588276,6395,saintmatthieu,2024-05-16T15:21:50Z,"And if it didn't, would there be harm in a dangling subscription ?"
1603593513,6395,saintmatthieu,2024-05-16T15:24:31Z,The size of the low-latency playback thread buffer you mean? Yes.
1603599988,6395,saintmatthieu,2024-05-16T15:27:43Z,"No, it's more for anti-aliasing. Will comment."
1603602988,6395,saintmatthieu,2024-05-16T15:29:18Z,We'd then have to review all implementations and make sure none of the actually does the processing when bypassed. So I think this is safer.
1603610211,6395,saintmatthieu,2024-05-16T15:33:41Z,"The sample rate may change between playback states, and all this time the panel may stay open, so the sample rate update is a must.
I tried other things before, and the observer-publisher pattern seemed like the simplest in the end (although there is no fundamental difference between injecting a callback lambda, I think)."
1603623214,6395,vsverchinsky,2024-05-16T15:42:26Z,"No, it stores pointer in `weak_ptr`, should be safe anyway"
901409170,3088,crsib,2022-06-20T08:45:30Z,Probably it should go to `#if defined(__WXGTK__)` as well
901410017,3088,crsib,2022-06-20T08:46:24Z,"I think we could leave ""Settings folder"" here. What do you think, @Paul-Licameli?"
901416594,3088,crsib,2022-06-20T08:53:03Z,"According to the docs it seems that this code could be rewritten with simply `wxString configDir(wxStandardPaths::Get().GetUserDataDir())`

Or at least `AUDACITY_NAME` should be used"
901438113,3088,ruro,2022-06-20T09:14:47Z,Will do.
901438355,3088,ruro,2022-06-20T09:15:01Z,Okay.
901440646,3088,ruro,2022-06-20T09:17:19Z,"~I am not sure, if I follow? `GetUserDataDir()` will return `~/.local/share`, not `~/.config`.~ +1 on using `AUDACITY_NAME` instead of a hardcoded string.

Disregard the last comment. I missed that this block is only executed when `__WXGTK__` is not defined."
901498948,3088,crsib,2022-06-20T10:19:06Z,"Docs are confusing: `Only use this method if you have a single configuration file to put in this directory, otherwise [GetUserDataDir()](https://docs.wxwidgets.org/3.1/classwx_standard_paths.html#a5b9d1b1addc3e4ce30ccb3817cbbe19b) is more appropriate as the latter adds appinfo to the path, unlike this function.` https://docs.wxwidgets.org/3.1/classwx_standard_paths.html#a0561d70f7da648e10b25bf9679309da3"
901522143,3088,ruro,2022-06-20T10:41:30Z,"I agree, that the docs are confusing. I am currently rewriting the implementation based on your `enum DirTarget` idea.

Actually the `wxwidgets` `GetUserWhateverDir` methods don't map to corresponding `XDG_WHATEVER_HOME` directories, so I decided to just implement the correct XDG Base Directory logic for unix and keep the windows case exactly as it currently is.

More info later. Btw, are we sure that `__WXGTK__` is the correct preprocessor macro to distinguish unix? I just kept it from the original PR, but I am not 100% sure."
901534970,3088,crsib,2022-06-20T10:57:23Z,"> are we sure that __WXGTK__ 

We use it for now, at least, so it's good to go!"
902326158,3088,crsib,2022-06-21T08:34:40Z,Looks like glib is included unconditionally.
902327870,3088,crsib,2022-06-21T08:35:42Z,Let's use c-assert. We are moving away from wxASSERT
902329583,3088,crsib,2022-06-21T08:36:47Z,I think it is better to return `gDataDir` or at least to throw `AudacityException` of some kind. Not `abort` for sure.
902332129,3088,crsib,2022-06-21T08:39:12Z,Ditto
902332204,3088,crsib,2022-06-21T08:39:17Z,"You return non const reference from gTargetDir, but here C++ deduce the type as `FilePath`. Is is desired?"
902334256,3088,crsib,2022-06-21T08:41:15Z,"Looks like you want overwrite the value, so you need `auto& dir = gTargetDir(target);`"
904788911,3088,crsib,2022-06-23T09:21:45Z,"I think we can do something like

```
namespace
{
auto GetOldUserDataDir()
{
    static const auto dir = wxFileName::GetHomeDir() + wxT(""/.audacity-data"");
    return dir;
}

auto OldUserDataDirExists()
{
    static const auto exists = wxDirExists(GetOldUserDataDir());
    return exists;
}
}
```

This will simplify code below"
904792220,3088,crsib,2022-06-23T09:25:04Z,"I think we can have an array here by adding `Count` to  `DirTarget`:

```
enum class DirTarget
{
    Cache,
    Config,
    Data,
    State,

     Count
};

wxString directories[size_t(DirTarget::Count)];
```
"
904793001,3088,crsib,2022-06-23T09:25:46Z,"(Sorry for the formatting, GitHub aint a good text editor xD)"
904801847,3088,crsib,2022-06-23T09:34:44Z,"Can be done as
```
struct XDGDirConfig final
{
   wxString envName;
   wxString defaultDir;
};

XDGDirConfig xdgConfig[] = {
  { L""XDG_CACHE_HOME"", L""/.cache"" },
...
};

static_assert(sizeof(xdgConfig) / sizeof(xdgConfig[0] == size_t(DirTarget::Count)

wxString GetXDGDir(DirTarget target)
{
   const auto& dirConfig = xdgConfig[size_t(target)];
 
   wxString dir;
   // see if the XDG_*_HOME env var is defined. if it is, use its value.
   // if it isn't, use the default XDG-specified value.
   if ( !wxGetEnv(dirConfig.envName, &dir) || dir.empty() )
        dir = wxFileName::GetHomeDir() +  dirConfig.defaultDir;

  return dir;
}
```

This way we force the compiler to do all the checks necessary. Given that the enum is private, there is not much need left for any runtime checks."
904805504,3088,crsib,2022-06-23T09:38:19Z,Let's name it `GetUserTargetDir` for consistency please!
904807442,3088,crsib,2022-06-23T09:39:34Z,"This becomes `auto& dir = directories[size_t(target)];`
"
904807703,3088,crsib,2022-06-23T09:39:44Z,This goes away
904808535,3088,crsib,2022-06-23T09:40:15Z,`if (OldUserDataDirExists())...`
904813259,3088,crsib,2022-06-23T09:43:44Z,Let's make all 4 functions to be const! 
904917770,3088,ruro,2022-06-23T11:42:20Z,"Actually, I think I'll just extract all the XDG-specific logic into a separate function and then just inline these 2 functions into it."
904918596,3088,ruro,2022-06-23T11:43:24Z,"Makes sense. Would `_targetCount` be an acceptable name? I would like to somehow distinguish that `Count` is a sentinel, not a valid Target."
904920953,3088,ruro,2022-06-23T11:46:17Z,"How about
```c++
using XDGDirConfig = std::tuple<...>;
```
Also I think the `xdgConfig` array should be `const`."
904921947,3088,crsib,2022-06-23T11:47:30Z,"std::pair would do too, but I prefer descriptive names :-)"
904922159,3088,crsib,2022-06-23T11:47:47Z,Works for me
904923013,3088,ruro,2022-06-23T11:48:55Z,"What do you mean? This is a namespace, not a class."
904927834,3088,crsib,2022-06-23T11:54:45Z,"Oh shoot, ignore me than "
905026935,3088,Paul-Licameli,2022-06-23T13:31:49Z,"+1 for the conservatism
"
905114419,3088,crsib,2022-06-23T14:46:37Z,Looks good!
1461901926,5874,Paul-Licameli,2024-01-22T13:58:37Z,"Do not delete this header from CMakeLists.txt.  The build works, but the file was not deleted, and so should be made known to the IDEs as part of the project.
"
1470123671,5874,vsverchinsky,2024-01-29T19:50:39Z,The header file is still not there
1470127493,5874,vsverchinsky,2024-01-29T19:53:50Z,"One would assume that entity named `On*` refers to an action, isn't `MusicFileImportPrefs` good enough?"
1470131066,5874,vsverchinsky,2024-01-29T19:56:45Z,I thought we use capital letters for enumerations elsewhere...
1470132880,5874,vsverchinsky,2024-01-29T19:58:16Z,"I'd expected `bool` as a return type, `On*` fits better here"
1470159082,5874,vsverchinsky,2024-01-29T20:19:24Z,"Method does not need an access to the internal state of the instance, so it can be lifted out from the class definition"
1470194945,5874,vsverchinsky,2024-01-29T20:51:30Z,"`ProjectInterface` could be simplified a bit: `SynchronizeProject` can accept as arguments what it now reads from getters (except `GetUserPrefs`). I guess that `ProjectInterface` is actually a project synchronization delegate (callback), right?"
1470206802,5874,vsverchinsky,2024-01-29T21:01:47Z,"Please, use `std::unique_ptr&`"
1470917449,5874,vsverchinsky,2024-01-30T10:00:55Z,"Why not `std::shared_ptr<ClipMirAudioReader>`?

"
1470928420,5874,vsverchinsky,2024-01-30T10:06:06Z,`AnalyzedAudioClip` seem to represent a delegate object too
1470959874,5874,vsverchinsky,2024-01-30T10:22:28Z,reference?
1470975585,5874,vsverchinsky,2024-01-30T10:32:42Z,"I think that the previous loop can be combined with that one, eliminating the need for `loopIndices` variable"
1471018288,5874,vsverchinsky,2024-01-30T11:02:22Z,"This structure wraps parameters that are later passed to a `GetProjectSyncInfo`, this makes me think that it should be eliminated"
1471137982,5874,vsverchinsky,2024-01-30T12:35:43Z,I'd liked to see this renamed to `OnTimeSignatureRecoginized` or similar
1471145262,5874,vsverchinsky,2024-01-30T12:41:51Z,The second argument doesn't seem to be useful in real world
1471154457,5874,vsverchinsky,2024-01-30T12:49:28Z,"Not a clip, but rather a delegate"
1471160760,5874,vsverchinsky,2024-01-30T12:54:55Z,"I guess call to this function is important outcome of the `SynchronizeProject` function call in some cases, but it was not tested, otherwise I don't see much benefits from control inversion here in it. "
1471328090,5874,vsverchinsky,2024-01-30T14:29:58Z,"I think that transformation could be simplified to `std::vector(sortednames.begin(), sortednames.end())`"
1471686596,5874,vsverchinsky,2024-01-30T17:42:23Z,Is it really safe? I see that there could be `UserException` thrown at the same scope where `AudacityMirProject` is created
1471697582,5874,vsverchinsky,2024-01-30T17:50:16Z,"Not sure if it's the case in the real world, but there is a code path where `ClipMirAudioReader` could be created but `Import` returns `false`. Could be easily fixed with `unique_ptr`"
1472584159,5874,saintmatthieu,2024-01-31T10:02:09Z,Yes.
1472591231,5874,saintmatthieu,2024-01-31T10:07:46Z,What's would be the benefit?
1472600277,5874,saintmatthieu,2024-01-31T10:15:01Z,I don't quite understand. Could you pseudo-code what you mean?
1472607035,5874,saintmatthieu,2024-01-31T10:19:59Z,"`std::shared_ptr&`, but sure."
1472609002,5874,saintmatthieu,2024-01-31T10:21:37Z,No good reason.
1472640955,5874,saintmatthieu,2024-01-31T10:45:04Z,"Sure, but this step-by-step approach is less intricate."
1472647083,5874,saintmatthieu,2024-01-31T10:50:15Z,"There are advantages to using a struct as opposed to many arguments, e.g. like smaller diff when modifying them, especially when there exists test code."
1472655374,5874,saintmatthieu,2024-01-31T10:57:07Z,"Mmh, it's not only about the recognition of the time signature, but also the interaction with the user, which I finds makes the `On` naming a bit tricky ...
`SetViewToBeatsAndMeasures` itself isn't quite correct, actually. `ReconfigureMusicGrid` is probably better."
1472660052,5874,saintmatthieu,2024-01-31T11:01:05Z,"In practice, you mean? Cases are seldom, true, but they exist. Future improvements could make this happen more often."
1472662583,5874,saintmatthieu,2024-01-31T11:03:15Z,What name do you propose?
1472666395,5874,saintmatthieu,2024-01-31T11:06:42Z,"Tested it is, in MusicInformationRetrievalTests.cpp, and plenty of places, too. Search `clipsWereSynchronized` in that source file."
1472669375,5874,saintmatthieu,2024-01-31T11:09:30Z,"Yep, nice."
1472671143,5874,saintmatthieu,2024-01-31T11:11:09Z,What is it that could throw?
1472678101,5874,saintmatthieu,2024-01-31T11:17:31Z,"It would be created but then destroyed when this lambda exits if `!success`. What is your concern?
I haven't managed moving a vector of unique pointers around without invoking the unique_ptr copy ctor, yielding an error.
A couple of lines below, `if (!resultingReaders.empty()` should probably be changed to `if (success && !resultingReaders.empty())`, though."
1472715182,5874,vsverchinsky,2024-01-31T11:52:37Z,"```
//Simplify interface by removing some of virtual getters
class ProjectInterface {
   virtual ~SynchronizeClipsDelegate() = default;
   virtual void OnTimeSignatureRecognized(...) = 0;
   virtual MusicFileImportPrefs GetUserPrefs(...) const = 0;
   virtual void OnClipsSyncronizeComplete() = 0;
};
...
// New function signature:
// doSynchronize replaces ProjectInterface::ViewIsBeatsAndMeasures
// projectTempo replaces ProjectInterface::GetTempo(), but it seem to be not used at all
void SynchronizeProject(
   const std::vector<std::shared_ptr<AnalyzedAudioClip>>& clips,
   ProjectInterface& project, bool projectWasEmpty, bool doSynchronizeClips, std::optional<double> projectTempo)
```
It also looks like that there is an invariant `projectWasEmpty == !projectTempo.has_value()`, so one of these arguments may be reduntant"
1472733153,5874,vsverchinsky,2024-01-31T12:09:07Z,"Don't remember where I've learned it from for the first time, but googling shows that it originates to Scott Meyers's article (""how non-member functions improve encapsulation""). I think it's a good rule"
1472737735,5874,vsverchinsky,2024-01-31T12:13:11Z,`reportProgress` in `RunTempoDetection`
1472740772,5874,vsverchinsky,2024-01-31T12:16:06Z,"Context search shows me that `synchronizeCalled` isn't never checked though, that's what i meant, but yes, you are right, `clipsWereSynchronized` should be enough"
1472741928,5874,vsverchinsky,2024-01-31T12:17:12Z,e.g. `ClipSyncDelegate`
1472751694,5874,vsverchinsky,2024-01-31T12:26:22Z,"That still sounds odd to me, considering that you can call `SynchronizeProject` not being in the context where musical grid is actually present. This call is just a way to provide a result for the intermediate step."
1472754971,5874,vsverchinsky,2024-01-31T12:29:15Z,"Ah, sorry, I meant the third argument - `reconfType`"
1472762007,5874,vsverchinsky,2024-01-31T12:35:42Z,"My concern is that `pResultingReader` is a raw pointer type. There seem to be a case where `Import` creates a `ClipMirAudioReader`, but then returns false, and object leaks because it's not yet wrapped with any type of smart pointer. 
But you've already said that you'll change the type of the argument to `shared_ptr&` in `Import`, that should solve the problem"
1472872503,5874,saintmatthieu,2024-01-31T14:05:03Z,"Ok, I see the exception.
Should be fine: if the user cancels the analysis, then there won't be time to modify the project, and the ctor should return early."
1472874506,5874,saintmatthieu,2024-01-31T14:06:33Z,👎 
1472875628,5874,saintmatthieu,2024-01-31T14:07:24Z,"Right.
I just pushed a commit that cleans this up a little."
1472890524,5874,saintmatthieu,2024-01-31T14:17:26Z,"I see.
There's one subtlety: we must evaluate `project.ViewIsBeatsAndMeasures()` after the prompt. We don't know what view the project will be in when this function exits.
And since we need the `ProjectInterface` for that, we might as well use it to get the project tempo, too."
1475791656,5874,vsverchinsky,2024-02-02T09:30:18Z,Could be `std::move`
1475810008,5874,saintmatthieu,2024-02-02T09:45:46Z,Yep. Will squash that in before merge.
852313290,2831,Paul-Licameli,2022-04-18T18:23:43Z,"I don't like the closed-endedness -- the violation of the ""O"", open-closed principle, of SOLID:  ""A design should be open to extension but closed to modification""

In other words, if we ever add a new effect that falls into one of these categories, then it won't be self-contained in one new implementation file, but instead this file will need modification to make the menu sorting continue to work as desired.

And we are also depending on long-distance coincidences of string literal values, between this file and each of the many effect implementation files, which is хрупкость.

So I suggest:

- A new enumeration EffectCategory, defined in Effect.h
- A table mapping EffectCategory to EnumValueSymbol (which pairs an identifier and TranslatableString), defined in Effect.cpp and accessible by a static member function
- MenuList is instead `std::vector<std::pair<EffectCategory, std::vector<TranslatableString>>>` and gets TranslatableString from that table
- A virtual function of Effect called GetEffectCategory, appropriately overridden in all the effects that matter
- Some of these effects are not built-ins, but Nyquist plug-ins. So NyquistEffect needs an override of GetEffectCategory that doesn't just return a constant, but computes an answer too.
  - Add a case in NyquistEffect::Parse to recognize a new special Lisp comment `$category`, which does reverse-lookup of the table of categories, by the Identifier (not by the TranslatableString), to find the enum value
  - Modify the plug-ins/*.ny files as needed to identify their categories
  - Ping @SteveDaulton when you do this, to review the changes at least in Nyquist.cpp, and recommend how to update documentation of Nyquist
- PreferredEffectsMenu does not return a static value, but computes its answer instead, by iterating the plug-ins and querying GetEffectCategory
- Maybe it can cache that computed answer, but invalidation of the cache would need to be done by the plugin manager dialog, or if the user changes the Language preference; see class PreferenceListener

Do all of this, and I will be less dissatisfied... but then the set of categories and the sorting of the categories themselves will still be closed-ended, and in a further future I might want to seek a fix for that too involving a registration of categories.

"
852327654,2831,vsverchinsky,2022-04-18T18:45:31Z,"1. EffectCategory is very likely to be extended/changed.
2. Not each effect has should have effect category assigned, effects can be added or removed from that list.
3. MenuList can be changed at any time, without modification of the effects source code, it's a resource object.

Considering that, I don't agree that my implementation violates ""O"". Ideally, there could be an external file describing the stucture of that menu, which can be changed without any code modification."
852340112,2831,LWinterberg,2022-04-18T19:05:13Z,"rename the `Invert` effect to `Invert Polarity`, please. "
852376649,2831,Paul-Licameli,2022-04-18T20:05:01Z,"Why?
"
852380784,2831,LWinterberg,2022-04-18T20:11:55Z,"Ah, sorry, you copied my typo here. It should be ""Volume and Compression"" with a big C"
852381687,2831,LWinterberg,2022-04-18T20:13:24Z,"Same with these guys: 
* Spectral Tools
* Spectral Delete
* Spectral Edit Multi Tool
* Spectral Edit Parametric EQ
* Spectral Edit Shelves"
852381778,2831,Paul-Licameli,2022-04-18T20:13:34Z,"If it is agreed to make that name change, the correct change in Invert.cpp is:

```
const ComponentInterfaceSymbol EffectInvert::Symbol
{ L""Invert"", XO(""Invert Polarity"") };
```

because in case anyone uses the Invert effect in a macro, this will avoid breaking that macro when they migrate to a newer version of Audacity.  Only the localized name of the effect will be changed, not the English identifier that macro programmers use.

"
852385995,2831,vsverchinsky,2022-04-18T20:20:36Z,"@LWinterberg as Paul said in his comment above these are ""identifiers"", not names, but ""Spectral Tools"" is a group name and I'll fix that"
852390003,2831,Paul-Licameli,2022-04-18T20:27:12Z,"I VETO this change request as part of the same issue.

Make this change request a different, minor issue.

Changing the name while preserving macro compatibility turns out not to be as easy for Nyquist effects as it would be for Invert.  It needs more thought.
"
852724079,2831,Paul-Licameli,2022-04-19T08:06:54Z,"Your implementation violates open ended ness for reasons I described.  You must change PluginMenus.cpp if in future a new categorized effect is added, rather than having all necessary new code self contained in the effect’s implementation.  I do not accept this."
852731315,2831,Paul-Licameli,2022-04-19T08:14:56Z,"> 1. EffectCategory is very likely to be extended/changed.

How does that make me wrong?

It is something I admitted: that even if you do my steps, it is not a complete fix for the problem of closed ended ness.  Still the steps I described are necessary if not sufficient.

> 2. Not each effect should have effect category assigned, effects can be added or removed from that list.

Do you mean there should be another enumeration value for effects of undefined category?  That is easy enough.

“Effects can be added or removed from the list.”  Do you mean as future development, or do you mean that the composition of the lists can be changed at runtime?

> 3. MenuList can be changed at any time, without modification of the effects source code, it's a resource object.
> 

Do you mean that as a future development, we change our decision about the categorization of an individual effect?  But it is much more proper, if some source code must change, that is the source code of that effect only rather than PluginMenus.cpp.

> Considering that, I don't agree that my implementation violates ""O"". Ideally, there could be an external file describing the stucture of that menu, which can be changed without any code modification.

"
852750824,2831,Paul-Licameli,2022-04-19T08:30:20Z,"""MenuList can be changed at any time, without modification of the effects source code, it's a resource object.
Does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? But this implementation does none of that.""

So I do t understand what you mean by “resource object.”"
852751669,2831,Paul-Licameli,2022-04-19T08:30:57Z,"Sorry I edited your original comment by mistake.  I didn't mean to delete it.  But I think I quoted all of it in my replies.
"
852804072,2831,Paul-Licameli,2022-04-19T09:19:59Z,"""Maybe it can cache that computed answer, but invalidation of the cache would need to be done by the plugin manager dialog, or if the user changes the Language preference; see class PreferenceListener""

To clarify I mention this really to suggest you don't bother with it:  Do recalculate the list each time you need to repopulate the effects menus.
"
852805792,2831,vsverchinsky,2022-04-19T09:21:48Z,">How does that make me wrong?

""A design should be open to extension but closed to modification""

>it is not a complete fix for the problem of closed ended ness

Please, let do not pollute interfaces with more constants that has some meaning for about 30 effects, it has nothing to do with OC.

>Do you mean there should be another enumeration value for effects of undefined category?

Why should prebundled effect, which isn't present in that menu, should be categorized as ""Undefined""? Or why should any other external effect have category which will never be used?

>Do you mean as future development, or do you mean that the composition of the lists can be changed at runtime?

During development ofcourse, and this is in fact points to the possibility to violate OC in future.

>Do you mean that as a future development, we change our decision about the categorization of an individual effect? But it is much more proper, if some source code must change, that is the source code of that effect only rather than PluginMenus.cpp.

Yes, we can add or remove effects to/from that list, even now there are prebundled effects that are not present in that list, the set of groups can change as well. Question: there are groups like ""Distortion and Modulation"", ""EQ and Filters"", should there be 4 emum values or only 2? What if effect provides both Distortion and EQ? It's not a problem from the implementation point of view, and it's not a bad idea in general, but there is no use for it right now.

>Does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? But this implementation does none of that.

There is a set of effects that should be put in a certaing menu groups, there is no need to ""categorize"" all effects. MenuLists can be put into separate cpp file (like AllThemeResources), or even external xml (json, txt,...) file. Not sure that we need to provide a way for user to change that list, but surely we can do that. In fact we can extend format with rules and filters and provide a way to make this menus very customizable, and your idea with effects category will make it more flexible for the user."
852821213,2831,Paul-Licameli,2022-04-19T09:38:19Z,"> > How does that make me wrong?
> 
> ""A design should be open to extension but closed to modification""

That doesn't answer my question.

> 
> > it is not a complete fix for the problem of closed ended ness
> 
> Please, let do not pollute interfaces with more constants that has some meaning for about 30 effects, it has nothing to do with OC.

What ""interface"" is polluted?  Effect itself?  Well it's going through lots of necessary changes this release.  But it is quite simple to make effects un-categorized with a default implementation of the virtual function, and so most effects will need no modification for this.  Only the few that are categorized.

> 
> > Do you mean there should be another enumeration value for effects of undefined category?
> 
> Why should prebundled effect, which isn't present in that menu, should be categorized as ""Undefined""? Or why should any other external effect have category which will never be used?

This really isn't different in principle than IsHiddenFromMenus.

> 
> > Do you mean as future development, or do you mean that the composition of the lists can be changed at runtime?
> 
> During development ofcourse, and this is in fact points to the possibility to violate OC in future.

We are failing to understand ""OC"" to mean the same thing.

If there is a new effect, its categorization should be determined by the code of that effect alone.

The file that makes effect menus should be generalized, and should not make special mentions of any individual effects.  The interface offered by abstract Effect is extended now to be sufficient for the needs of the plugin menus.

Do you see there is special weird stuff in PluginMenus about noise reduction and the Nyquist prompt?  True.  But that is bad legacy, not good precedent.

> 
> > Do you mean that as a future development, we change our decision about the categorization of an individual effect? But it is much more proper, if some source code must change, that is the source code of that effect only rather than PluginMenus.cpp.
> 
> Yes, we can add or remove effects to/from that list, even now there are prebundled effects that are not present in that list, the set of groups can change as well. Question: there are groups like ""Distortion and Modulation"", ""EQ and Filters"", should there be 4 emum values or only 2? What if effect provides both Distortion and EQ? It's not a problem from the implementation point of view, and it's not a bad idea in general, but there is no use for it right now.

As I said, I am admitting to incompleteness of this solution for open endedness, but I do not accept your argument that therefore, let this PR stand and make no attempt to fix it.

Effects should have some virtual function reporting their category as some kind of value, and PluginMenus.cpp should use that value and not have a hard-coded list of effect names.

Start by making that value an enumeration.  Though this enumeration of categories is closed ended, the set of effects in any one category is not closed ended.

Let me see the redraft.  Then we can discuss the further step of changing the value type from enumeration to some other dynamically determined set of cateogires.

> 
> > Does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? But this implementation does none of that.
> 
> There is a set of effects that should be put in a certaing menu groups, there is no need to ""categorize"" all effects. MenuLists can be put into separate cpp file (like AllThemeResources), or even external xml (json, txt,...) file. Not sure that we need to provide a way for user to change that list, but surely we can do that. In fact we can extend format with rules and filters and provide a way to make this menus very customizable, and your idea with effects category will make it more flexible for the user.

"
853011371,2831,vsverchinsky,2022-04-19T12:36:12Z,">That doesn't answer my question.

What question then? Using enum for entity like effect category is very likely to violate OC (until we agree that it will never change). So I don't see why your impementation violating OC is preferrable over my implementation which ""violates OC"" (which is not, because you don't have to change effect to change menu ordering, and you don't have to change anything in the menu to add a new effect, though you may want to change that too, but the problem here is that you cannot answer to the question ""how should I change that menu?"")

>If there is a new effect, its categorization should be determined by the code of that effect alone.

Effect placement in the menu should be determined by the menu. It can use properties of the effect to do that and using effect ID for that purpose isn't worse than using any other property of the effect. 

>The file that makes effect menus should be generalized, and should not make special mentions of any individual effects.

Effect ID and effect category are both properties of the same entity, there is no difference between them in sence that they both could to be used as a filter parameters.

This task does not specify that we should assign category to each effect, and build menu so that all effects grouped by these categories. This task requires to put **certain** effects into certain submenus, that's why there are references to the individual effects in the menu description, you cannot solve such task using generalization."
853025569,2831,SteveDaulton,2022-04-19T12:51:33Z,"> Polarity



> rename the `Invert` effect to `Invert Polarity`, please.

As Paul wrote: ""why?"". What other kinds of waveform inversion are there? Yes there is such a thing as ""spectral inversion"" (which Audacity does not have), but if that's the distinction that you want to make then I don't think that ""invert polarity"" does it as well as ""invert waveform"".

Regardless of which wording is decided, please avoid changing the command name unless absolutely necessary as doing so will break custom macros that use the command. As Paul wrote: ""Only the localized name of the effect"" should be changed.
"
853030700,2831,Paul-Licameli,2022-04-19T12:55:23Z,"> > That doesn't answer my question.
> 
> What question then? Using enum for entity like effect category is very likely to violate OC (until we agree that it will never change). So I don't see why your impementation violating OC is preferrable over my implementation which ""violates OC"" (which is not, because you don't have to change effect to change menu ordering, and you don't have to change anything in the menu to add a new effect, though you may want to change that too, but the problem here is that you cannot answer to the question ""how should I change that menu?"")

One more time:  I admit the incompleteness of my suggestions, but still say it is a better organization than this first attempt.  If you are actually arguing to go beyond my suggestions and figure out open-endedness of categories, not just the members of categories -- great, do so!

If not, still I want some of the extra effort done now.

But the rest of what you say is unpersuasive to me.  Saying you only satisfy the issue in a looks-like-it-works way in the black box view is not acceptable.

The decision to categorize an individual effect one way or another way should be encoded in the implementation of that effect.  That is the open-ended solution in regard to the enlargement of the set of effects.

Ideally effects should be plug-ins, not baked into the executable.  In fact this is realized in the case of Nyquist effects, though we don't do this yet for effects in C++.

At least for Nyquist effects, a Nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled Audacity executable.


"
853191676,2831,vsverchinsky,2022-04-19T15:10:23Z,">but still say it is a better organization

I say that they are orthogonal to each other.

>looks-like-it-works

What exactly does not work here?

>At least for Nyquist effects, a Nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled Audacity executable.

It's opposite to what is specified in the task:
>[any external plugins, whether it be nyquist, VST or LV2, arranged as thus:]
Author/Publisher
Effect, sorted alphabetically by name

"
853221417,2831,Paul-Licameli,2022-04-19T15:39:20Z,"> > but still say it is a better organization
> 
> I say that they are orthogonal to each other.

I don't understand what is orthogonal to what.

> 
> > looks-like-it-works
> 
> What exactly does not work here?

Nothing.  BUT what I say from point of view of architecture is, it's not enough that it merely looks like it works.  It shoudl be properly designed for extension.

> 
> > At least for Nyquist effects, a Nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled Audacity executable.
> 
> It's opposite to what is specified in the task:
> 
> > [any external plugins, whether it be nyquist, VST or LV2, arranged as thus:]
> > Author/Publisher
> > Effect, sorted alphabetically by name

Then @LWinterberg should respecify the issue.

We can specify the interface of Nyquist programming as we can't for the other protocols.  We can and should make the effort to give Nyquist programmers the ability to categorize effects as they choose.

"
853225955,2831,Paul-Licameli,2022-04-19T15:43:46Z,"I think @SteveDaulton would agree with the last point.
"
891806765,2831,Paul-Licameli,2022-06-08T00:14:05Z,Indentation?
891826510,2831,Paul-Licameli,2022-06-08T01:05:44Z,"Maybe another type alias `EffectsMenuGroup` for the element, and reuse that below"
891827416,2831,Paul-Licameli,2022-06-08T01:08:19Z,Add a null check on `textContent`
892085765,2831,Paul-Licameli,2022-06-08T08:42:08Z,Unused variable and type alias
892088094,2831,Paul-Licameli,2022-06-08T08:44:22Z,"The first commit, introducing this enum and much else, is a very pleasing refactoring.
"
892096362,2831,Paul-Licameli,2022-06-08T08:52:00Z,"Someone sould make the repeated '3.0.3' in this script an argument or take it from an environment variable and make it more current.  Not for this PR.

All it does it make a comment in the generated .pot file out of date.
"
892099188,2831,Paul-Licameli,2022-06-08T08:54:36Z,"I understand this simple rule extracts all xml content as strings to translate, but only the <Name> strings really need it, as strings not already part of the program.

"
892106965,2831,Paul-Licameli,2022-06-08T09:01:52Z,"I tested comment extraction and it works:  add to the .xml file
```
<!-- audio dynamics compression, not data compression -->
```

before the ""Volume and Compression"" line, ran the script, confirmed that it was extracted.

It seems I don't need ""i18n"".  The option to xgettext may be unnecessary.

Include at least one example of a comment in the final version.
"
892109489,2831,Paul-Licameli,2022-06-08T09:04:27Z,"Which capitalization convention should we use?  This is not like ""Volume and Compression"".  Should it have ""Tempo""?
"
892109798,2831,Paul-Licameli,2022-06-08T09:04:48Z,"caps
"
892110493,2831,Paul-Licameli,2022-06-08T09:05:34Z,"Caps again.
Up-casing all important words is what effect names have done.  So I think it's right and these new names must be made consistent with it.
"
892111053,2831,Paul-Licameli,2022-06-08T09:06:07Z,"caps
"
892111409,2831,Paul-Licameli,2022-06-08T09:06:30Z,"Maybe these few effect names must be fixed, here and in the .ny files
"
892120146,2831,Paul-Licameli,2022-06-08T09:15:02Z,"This function nicely encapsulates the decisions about default grouping and sorting of effects.  To define some different policy in a later version should change only what happens in here.

Maybe a static variable can hold the results of the parse so that the .xml file need not be read more than once each session.

But didn't we agree to sort effect names in each group by their translations?  Easily added here.

Did we also want to sort the groups by their translations?

Re-sorting of names in the statically duration results might be repeated in case the user changes languages and the menus must be rebuilt.
"
892121650,2831,Paul-Licameli,2022-06-08T09:16:28Z,"Maybe we only want to sort each list by translation, but keep the names ordered as in the resource file.  Whatever the decision, it is easy to change it just here.
"
892130874,2831,Paul-Licameli,2022-06-08T09:25:32Z,"For me on Mac, the sorting doesn't work.

The file is at
/Users/paullicameli/Github/audacity2/build/bin/Debug/Audacity.app/Contents/res/effects_menu_defaults.xml

The program looks for a file at
/Users/paullicameli/Github/audacity2/build/bin/Debug/Audacity.app/Contents/MacOS/res/effects_menu_defaults.xml
"
892134314,2831,Paul-Licameli,2022-06-08T09:28:59Z,"I moved the .xml to the expected place in the tree and was then able to test the changes and verify that switching grouping criteria in Effects preferences does as expected.
"
892136177,2831,Paul-Licameli,2022-06-08T09:30:50Z,"The default sorting of generators and analyzers was surprising to @petersampsonaudacity as we now know.  Whatever is right way the criteria should be changed here, it will be an easy change.
"
893703864,2831,Paul-Licameli,2022-06-09T16:09:10Z,"I see the new changes with `DefaultFilter` and how `IsDefaultPlugin` changed.

No objections.
"
1318768364,5139,Paul-Licameli,2023-09-07T15:17:33Z,"I see a new member variable in this dialog, which is non-modal and so may live a long time between button clicks.

That makes me want to examine its uses and see if instead local variables are used, or if that's not easy, then to be sure that the vector is cleared at appropriate times when the data are no longer needed.
"
1318826550,5139,saintmatthieu,2023-09-07T16:03:34Z,"> see if instead local variables are used

Not easy: the audio is acquired in `GetAudio`, and read in another method: `Recalc`.

> be sure that the vector is cleared at appropriate times when the data are no longer needed

See `OnCloseButton()`.

This PR does not change the times when memory is acquired or released."
1318938323,5139,Paul-Licameli,2023-09-07T17:46:22Z,"Restating my lost comment:  This line is why I don't like the change.

`as_size_t` has an assertion that the value of the sample count is really in the range of a `size_t`.  I wasn't following the `@pre` comment convention yet those years ago.  It should be a `@pre` now.

And that means, there is burden of proof of satisfaction of the precondition at the point of the call.  But I don't know what the proof is here, and I don't think there is any sufficient information to prove it.

The point of commit 48aaca450b113a971a487f768c3e941accf9395a was to shift the burden of that proof instead to the places where `AudioSegmentSampleView` is constructed.

And note too, in that commit, the places where I added `@pre stretched samples in [t0, t1) can be counted in a `size_t` ` as an informal precondition, moving the burden of proof farther up.

And in the next commit after that, which is ba920717e826d4a0d6b5d81436d90f6a2e8f69df, I made those try-catches of `bad_alloc` in case the precondition was not satisfied.
"
1318940597,5139,Paul-Licameli,2023-09-07T17:48:43Z,"So I don't approve of the reversal of all of that caution that I put into an earlier commit.  And I must finish my examination of this pull request to see where you use the constructor and what proof of satisfaction of the precondition is possible.
"
1318963691,5139,Paul-Licameli,2023-09-07T18:13:00Z,"I'm not persuaded by this either.

After a closer look, I think this:
- Only a local variable in `Recalc` is necessary.
- `GetAudio` can return the value instead of changing a member variable.
- `Recalc` can call `GetAudio`.  Both existing calls to `GetAudio` can be eliminated with this change.
- `DrawPlot` and `PlotPaint` only use the number `GetNumSamples(mChannelGroupSampleViews)` so instead, just store that number as a member variable each time `Recalc` is called.
"
1319189602,5139,Paul-Licameli,2023-09-07T22:55:20Z,Is this calculation right?  I think it’s 23.3 minutes
1319195002,5139,Paul-Licameli,2023-09-07T23:03:00Z,Do you preserve non-throwing?
1319195882,5139,Paul-Licameli,2023-09-07T23:04:55Z,Ok yes
1319197109,5139,Paul-Licameli,2023-09-07T23:07:54Z,That should not be deleted I think
1319201142,5139,Paul-Licameli,2023-09-07T23:17:19Z,"I think you are correct that you make the lifetime of sample data just the same as in the previous version.

Which means, the previous version didn’t handle memory as efficiently as it might have and so we can improve on it now.

With closer study you can find that the “analyst” object has all the derived data necessary to draw the plot, and the size of that is proportional only to the analysis window size (or number of frequency bins) and independent of the length of the selection, which could be large."
1319206399,5139,Paul-Licameli,2023-09-07T23:30:06Z,"Even numbers that do fit in a size_t can be excessive and run out of memory.  There is still a bound of 64M samples and multiply that by four to get bytes.  Will there always be a quarter gig free?

So maybe a try-catch of `bad_alloc` could happen around the allocation, like what I lately did to bullet-proof the Mixer Board."
1319209931,5139,Paul-Licameli,2023-09-07T23:38:35Z,"This bothers me, for the same reasons that Mixer Board changes did, and why I cautioned about correct RMS calculation in Contrast.cpp.

Samples from neighboring clips with different stretches are treated as just one long sequence of samples as if they had the same real-time rate, ignoring stretches.  Is that right?

For Contrast I argued it was wrong:  rms should be calculated for clips separately, then combined into an overall RMS with the proper weighting of different clips, taking stretches into account at that point.

For Mixer Board, it was all right if only peak values are needed, but as I have also mentioned, Mixer Board also does an rms calculation that can be wrong now, but fixing it is future work that needs a totally different approach anyway to get the true post-fader levels out of the audio engine.

What wrong calculation could be happening here? …"
1319212546,5139,Paul-Licameli,2023-09-07T23:44:56Z,"… answering that would take you into the guts of SpectrumAnalyst, where as I recall, values derived from many different FFT windows are combined into a single window that is later plotted.

As we have lately discussed, it is not wrong to take FFT of pre-stretched data and assign it to the same frequency bins as for the as-rendered sound that we don’t bother to calculate just yet.  However…

I think you would find there an assumption that all windows should be weighted equally in the combined result, but that could now be wrong with stretches.

What is a test case that might demonstrate this? …

"
1319475109,5139,saintmatthieu,2023-09-08T07:26:59Z,"I see three stages that matter to our decision here:
1. Selection sample read-out (`GetAudio`)
2. Calculation of spectrum (`Recalc`)
3. Display of result (`Show`)

`GetAudio` itself calls `Recalc`, but `Recalc` can also be called independently, if there is a change of analysis parameter (window size, spectrum type, ...). The user may keep the analysis window open and change the track data, which is a nice user experience. So the time-domain audio must be kept in memory for the lifetime of the window, we cannot assume that it won't change and we can re-read it."
1319484778,5139,saintmatthieu,2023-09-08T07:34:32Z,"It is correct. Unusual is the left operand of the bit-shift being 2, it usually is 1 - which would then yield 23.3.
Changed to `1 << 27`, in case I make another push."
1319559253,5139,saintmatthieu,2023-09-08T08:44:40Z,"### TL, DR:
From a result point of view, IMO it very marginally matters whether we pre-render or not, because of how rare use cases are where the limitation of either approach becomes a problem. (I assume that we don't put in the effort of weighting according to stretch ratio.) Implementation wise, I think this one is easier, isn't it? No need to make an editable copy of the track objects, just use a different, user-friendly API (`GetSampleView`).

### Detail:
Yes, the weighting is ignored here, which might yield unexpected results if the selection is made across clips of different stretch ratios. I don't expect this to happen often, and if it does, that the stretching difference is large enough to be noticeable, but in principle, yes, either accurate, preliminary stretch-rendering, or weighting would alleviate this.

I said ""accurate"" because, as we know already, the stretching algorithm is not perfect. I've done an experiment, which should serve as material for the spectrum analysis as well as the noise reduction problem.

1. I recorded myself saying ""test"" with an open mic.
2. I stretched the clip moderately, squeezing it by approx. 25%.
3. I duplicated the track for better comparison.
4. I selected a short region of background noise,
5. I rendered the stretching of that region.

The project overall:
![BackgroundNoise project](https://github.com/audacity/audacity/assets/22740106/c2677a6d-f528-4f21-b315-0f4e51e34f73)

The spectrum analysis of the unrendered labeled segment (upper track):
![Background noise spectrum](https://github.com/audacity/audacity/assets/22740106/66d7a635-ce0b-4936-980b-07e005b0cf5a)

That of the rendered segment (lower track):
![Background noise spectrum - rendered](https://github.com/audacity/audacity/assets/22740106/f838b753-454b-491f-b0c3-65e231b2cb3a)

(A way of superposing the spectra would be nice, like in Adobe Audition. We don't have this yet, do we?)

For the spectrum analysis use case, I don't expect this to happen often either. It's more for the noise reduction case that this might become an issue, but I'll elaborate in that other PR."
1319577448,5139,saintmatthieu,2023-09-08T09:00:35Z,"I don't think so. In either versions, before or after, the only thing it does is returning before the warning check that there aren't too many samples. But if `selcount == 0`, it means that there was no selected track in the project, and no sample was read, in which case, of course, no warning anyways."
1319594996,5139,saintmatthieu,2023-09-08T09:16:35Z,"Yep. `Recalc` then also must return a boolean, because the follow-up code that shows the result otherwise crashes. That's not hard, commit upcoming."
1319649483,5139,saintmatthieu,2023-09-08T09:59:48Z,"I don't see how it was safer before. I'm looking at this:
```cpp
   // Not sure how to prove satisfaction of the invariant of GetSampleView
   mSampleView = pTrack->GetSampleView(t0, t1, mayThrow);

   // Expect that the difference of t1 and t0 is the part of a track played
   // in about 1/20 second (ticks of TrackPanel timer), so this won't overflow,
   // unless stretch ratio is extremely low.
   const auto nFrames = GetNumSamplesInView(mSampleView[0]);
```

If `AudioSegmentSampleView::mLength` is `size_t`,  overflow could happen in the first statement.
If it takes a `sampleCount`, overflow could happen in  `GetNumSamplesInView`.
Either way the overflow is caught by your try-catch.

Also, this would only happen in extreme cases : the MixerBoard refreshes every 50ms. What stretch ratio do we need to squeeze more than 2^31 samples of audio in such a short amount of time ? Possible, yet again there's the try-catch.

With `sampleCount`, the risk of overflow doesn't matter for this check in the next commit:
```cpp
   if (GetNumSamples(mChannelGroupSampleViews) > maxDataLen) {
      auto msg = XO(
""Too much audio was selected. Only the first %.1f seconds of audio will be analyzed."")
         .Format(maxDataLen / mRate);
      AudacityMessageBox( msg );
   }
```

But again, I didn't realize you had changed it, and didn't revert it properly as I left your comments untouched.
We have a disagreement about whether this PR should go in or not, let's wait until that's settled to see if I have to clean that up."
1320562896,5139,LWinterberg,2023-09-09T13:15:18Z,"""Audio could not be analyzed. This may be due to a stretched clip. Try resetting any stretched clips, or mixing and rendering the tracks before analyzing."" might be better"
1321801227,5139,saintmatthieu,2023-09-11T16:29:29Z,That makes me think that we don't have an straightforward way of unstretching clips ... Ticket ?
1321818183,5139,Paul-Licameli,2023-09-11T16:44:03Z,You mean resetting the stretch ratio exactly to 1.
1323127281,5139,Paul-Licameli,2023-09-12T14:24:17Z,"I think this other old message should be corrected to ""must have""

Or maybe totally different words

@LWinterberg 
"
1323132629,5139,Paul-Licameli,2023-09-12T14:27:56Z,"I see one use of `GetAudio` where the return value is not checked, in `OnReplot`, but I think that will work all right.  The dialog remains shown but the message is shown and nothing will be analyzed.
"
1323201527,5139,Paul-Licameli,2023-09-12T15:16:00Z,"A clip could be either ""stretched"" or ""compressed"".  I'm just asking whether the wording should be more inclusive?
"
1323202548,5139,Paul-Licameli,2023-09-12T15:16:30Z,"Or should I say ""shrunk"" to avoid other confusions!
"
1324169545,5139,LWinterberg,2023-09-13T08:32:24Z,"""must have"" sounds good to me."
1324252064,5139,saintmatthieu,2023-09-13T09:37:41Z,"It is a problem at the basis indeed, ""stretch"" meaning ""expand"" in non-technical context. Not sure how to solve this :D"
1324255884,5139,saintmatthieu,2023-09-13T09:40:41Z,Addressed.
1324260553,5139,saintmatthieu,2023-09-13T09:44:35Z,"I suppose, yes: this PR doesn't change the execution sequence for the case where sequences have different sample rates. That's been working well and failure due to failing `GetFloats` take the same path."
1327468232,5139,Paul-Licameli,2023-09-15T15:33:59Z," But does this only appear to fix it?  Is the un-raised window just hiding behind the project window which you can move aside?
"
1327518414,5139,saintmatthieu,2023-09-15T16:13:39Z,"Good thinking, but I tested it and it seems like it really fixes it. Could @chinakov confirm ?"
1328737912,5139,chinakov,2023-09-18T13:36:16Z,"Yes, the issue has been fixed. "
1394655739,5570,vsverchinsky,2023-11-15T19:01:27Z,Is this file really needed here?
1394665296,5570,vsverchinsky,2023-11-15T19:11:19Z,I'd much prefer it not to be an operator overload
1394718750,5570,vsverchinsky,2023-11-15T19:49:17Z,https://docs.wxwidgets.org/3.0/classwx_dialog.html#a585869988e308f549128a6a065f387c6
1394719512,5570,vsverchinsky,2023-11-15T19:50:05Z,"Same here, single `SetEscapeId(wxID_NO)` should do the thing"
1394721654,5570,vsverchinsky,2023-11-15T19:52:27Z,not used
1394732539,5570,vsverchinsky,2023-11-15T20:01:58Z,Shouldn't be there a way to change that in preferences dialog?
1394736094,5570,vsverchinsky,2023-11-15T20:05:39Z,This file has too many whitespace changes
1394736535,5570,vsverchinsky,2023-11-15T20:06:12Z,And `#include` reorderings...
1394739954,5570,vsverchinsky,2023-11-15T20:10:05Z,"Shouldn't we display detected bpm value in that dialog, to make user well informed about the choice?

Btw, I get strange results when trying to import ""Big Bass Hit"" from MuseHub. It sets my project tempo to 542,373"
1394744351,5570,vsverchinsky,2023-11-15T20:15:09Z,`constexpr auto epsilon = std::numeric_limits<double>::epsilon() * mStep`?
1394902678,5570,saintmatthieu,2023-11-15T22:23:23Z,"Yo, me too. I messed up a constant during clean-up, fix in 6c471cd."
1395341807,5570,saintmatthieu,2023-11-16T08:42:04Z,I want all chances on this library's side that it stays well formatted. But maybe it's time to check in this .clang-format in the root of the repo - I don't know of an automation that would want to reformat the entire repo.
1395343428,5570,saintmatthieu,2023-11-16T08:43:27Z,"Why not? I find it sensible and it reads great:
```
   MIR::MusicInformation musicInfo { fileName, newTrackDuration };
   if (!musicInfo)
      return;
```"
1395357673,5570,saintmatthieu,2023-11-16T08:55:08Z,"Cool, thanks!"
1395359797,5570,saintmatthieu,2023-11-16T08:56:45Z,"So that means that wxWidgets by default binds ESC with clicking a No button ?..
Anyway, thank you, it does work."
1395362826,5570,saintmatthieu,2023-11-16T08:59:13Z,"We haven't discussed that with Design. I would say so, only then I wouldn't know if checking ""Don't ask me again"" should modify the value in that other dialog. @LWinterberg ?"
1395365728,5570,saintmatthieu,2023-11-16T09:01:39Z,"VSCode does that for me on save. I could only stage and commit the changes that are not automatic, but we're better without those trailing whitespaces anyways."
1395370500,5570,saintmatthieu,2023-11-16T09:05:33Z,"Obviously devs tried to manually keep these in order, and yet it was imperfect. Automatic re-ordering is painful for the reviewers when not done regularly, sorry about that, but then everyone could do it automatically and time would be spared."
1395375237,5570,saintmatthieu,2023-11-16T09:09:32Z,... pity that there isn't a `SetCloseButtonId(...)` ...
1395379786,5570,saintmatthieu,2023-11-16T09:13:07Z,"I don't think this problem is related to the step size. The comment intends to give a comprehensive explanation, please let me know if there are unclarities."
1432675903,5570,Paul-Licameli,2023-12-20T12:50:13Z,"I'm doing some after-the-fact review of this because I need the background to understand #5791.

I note the first commit in the sequence didn't build (test compilation failed)
"
1432676103,5570,Paul-Licameli,2023-12-20T12:50:23Z,Not yet used
1432683017,5570,Paul-Licameli,2023-12-20T12:57:11Z,"Second commit failed to configure the build because this file did not exist yet
"
1432683783,5570,Paul-Licameli,2023-12-20T12:57:54Z,"No banner
"
1432684352,5570,Paul-Licameli,2023-12-20T12:58:27Z,No banner
1432686076,5570,Paul-Licameli,2023-12-20T13:00:07Z,"All of this could have used ShuttleGui instead
"
1432749778,5570,Paul-Licameli,2023-12-20T13:58:59Z,"Banners please for this and the .h file
"
1432752464,5570,Paul-Licameli,2023-12-20T14:01:10Z,"This associated empty user-visible strings with the identifiers.  That's wrong.  But what happened in later commits? ...
"
1432849935,5570,Paul-Licameli,2023-12-20T15:19:09Z,"I really don't like it that lib-wave-track and lib-track have all this mention of stretches and tempos, which are extraneous to what should be lesser and more easily understood class responsibilities.

It's not for you to clean up now, but along with wave clip refactoring, I want to figure out dependency inversion between lib-wave-track and lib-stretching-sequence.

"
1432991228,5570,Paul-Licameli,2023-12-20T17:23:35Z,"This might use `ForEachClip`
"
1432999838,5570,Paul-Licameli,2023-12-20T17:32:17Z,"I really dislike this added dependency
"
1433002947,5570,Paul-Licameli,2023-12-20T17:35:34Z,Unnecessary
1433003582,5570,Paul-Licameli,2023-12-20T17:36:19Z,"unnecessary
"
1433013793,5570,Paul-Licameli,2023-12-20T17:47:56Z,"This assumes `newTracks` is not empty and no other subscript it used.

Maybe the argument should be `const Tracklist &`"
1433016150,5570,Paul-Licameli,2023-12-20T17:50:42Z,"What proves the assertion?

You really rely on the weaker condition `clips.size() > 0`"
1433029600,5570,Paul-Licameli,2023-12-20T18:05:59Z,"OK so this commit corrects the previous, using ShuttleGui.

I wonder if a `PopulatorItem` could be used and other tricks to make the music information retrieval a non-intrusively defined module.  Also breaking the dependencies added in ProjectFileManager.cpp.
"
1433035410,5570,Paul-Licameli,2023-12-20T18:13:06Z,"Ideally WaveTrack and WaveClip should not mention quarter notes!
"
1434794424,5570,saintmatthieu,2023-12-22T07:25:01Z,"Maybe breaking down the WaveTrack in a part that's only concerned with the horizontal arrangement of clips. This one would not need to see the stretch-related details of the clips, but I guess would essentially be concerned with boundaries.
Then the other part of WaveTrack whose role is that of a clip container, really, which knows the stretching detail.
Not thought through, not much more than an intuition. Will probably shatter against Audacity's endless use cases."
1434902548,5570,saintmatthieu,2023-12-22T09:51:29Z,"From the context: surely importing one file results in one clip, and importing more than one files, in more than one tracks each with one clip. This could be a post-condition of `Importer::Import` (currently not stated)."
1434903268,5570,saintmatthieu,2023-12-22T09:52:25Z,?
1514610713,6094,saintmatthieu,2024-03-06T14:47:05Z,"The first `false` is `backup`, which is the negation of `forClipboard` in the creation of `newClip`, but always `false` here. I wonder if that's correct."
1514624084,6094,saintmatthieu,2024-03-06T14:54:51Z,"The execution of `RightClips();` crashes for me just when generating a mono tone:
```
WaveClipHolders &WaveTrack::RightClips()
{
   return mRightChannel->Clips();
}
```
`mRightChannel` is null."
1514626729,6094,saintmatthieu,2024-03-06T14:55:58Z,... as well as when generating a tone on a stereo track.
1514636577,6094,saintmatthieu,2024-03-06T15:00:16Z,... I realise now that this was that way already before this commit.
1514748669,6094,Paul-Licameli,2024-03-06T16:03:30Z,"So the change is conservative and if there is a bug related to this, it is not introduced herein.
"
1514749178,6094,Paul-Licameli,2024-03-06T16:03:49Z,"I'm debugging this now
"
1519559133,6094,saintmatthieu,2024-03-11T11:21:25Z,How? By mixing left- and right?
1519624083,6094,saintmatthieu,2024-03-11T12:18:17Z,I suppose that `pInterval->GetClip()` never equals `nullptr` ? In which case this could reduce to `const bool selected = selectedClip == &pInterval->GetClip();` - for clarity.
1519650833,6094,saintmatthieu,2024-03-11T12:40:19Z,The standard guarantees that the first assignment of this line gets evaluated before the second?
1519661853,6094,saintmatthieu,2024-03-11T12:49:00Z,"Line 46 of this file has `using WaveClipHolder = std::shared_ptr<WaveClip>;`. Is it too soon to remove this alias? I was puzzled by `auto WaveTrack::RightmostOrNewClip() -> IntervalHolder`, wondering if it might return the last entry of `mClips` or if some wrapping was still necessary."
1519674391,6094,saintmatthieu,2024-03-11T12:57:50Z,"I haven't commented on this in the wide-wave-track PR, but is there something that justifies `WaveChannel` inheriting `WideSampleSequence` conceptually?"
1519681959,6094,saintmatthieu,2024-03-11T13:03:12Z,The two `FindClip` definitions in the anonymous namespace (at the time of writing lines 1510 and 1527) are now unused.
1519682733,6094,saintmatthieu,2024-03-11T13:03:45Z,Rename this `FindClip` ?
1519695443,6094,saintmatthieu,2024-03-11T13:13:12Z,`const`
1519723038,6094,saintmatthieu,2024-03-11T13:31:31Z,Will `origClip.mSequences.size() == 1` after this move?
1519734371,6094,saintmatthieu,2024-03-11T13:38:56Z,No need for a `Transaction transaction{ *this };` in this implementation?
1519760014,6094,Paul-Licameli,2024-03-11T13:53:13Z,"""DiscardRight"" perhaps is a better name
"
1519761971,6094,Paul-Licameli,2024-03-11T13:54:20Z,"`GetClip` returns a reference and & is address-of.

We assume references always refer to an existing object.
"
1519764774,6094,Paul-Licameli,2024-03-11T13:56:05Z,"It's not an assignment, it's an initialization, and surely they are evaluated in sequence.
"
1519778791,6094,Paul-Licameli,2024-03-11T14:05:07Z,"Maybe one more cleanup commit is justified, to eliminate dual terminology.
"
1519780761,6094,Paul-Licameli,2024-03-11T14:06:23Z,"I should eliminate the inheritance and see whether things still compile.  But the abstract base class may be used somewhere.
"
1519781106,6094,Paul-Licameli,2024-03-11T14:06:36Z,"noted
"
1519781664,6094,Paul-Licameli,2024-03-11T14:06:56Z,"As I said, a terminology cleanup later
"
1519781839,6094,Paul-Licameli,2024-03-11T14:07:03Z,"ok
"
1520071479,6094,Paul-Licameli,2024-03-11T16:50:48Z,"Even if this were assignment and not initialization -- the `,` as an expression operator (not as the separator of declarations) also ensures sequencing.

The hazard you may be thinking of, is that in evaluation of arguments passed to a function, which are separated by commas -- then, yes, the sequence of evaluation is not specified.

"
1520090100,6094,Paul-Licameli,2024-03-11T17:02:32Z,"Not immediately.  You see that this function is only called under `WaveClip::SplitChannels` and before it exits, it calls `MakeNarrow` (or whatever I rename that to be) and that visits the main clip and recursively the cutlines.

"
1520111581,6094,Paul-Licameli,2024-03-11T17:11:57Z,"Intentionally so.

See #6107 which proposes a fix for the slow importing in the master branch.  That fix will conflict too much with wave-clip-refactoring, so if it is merged, it should be reverted before wave-clip-refactoring is merged to master.

I need an alternative fix for performance, and that is to remove the Transaction.  In fact I suggest #6107 also just remove it.

There is strong exception safety for operations on individual Sequence objects, meaning in case of exception, the previous state of the objects is restored unchanged.

There is only weak exception safety for WaveClip objects operating on multiple Sequences, unless there is also a Transaction, to handle the possibility that one Sequence is updated, but an exception happens during the update of the other.  Each Sequence remains self-consistent, but the WaveClip might not achieve strong exception safety, or the ""strong invariant"" condition of equal length sequences.

Recall PR #6089 which you reviewed.  I decided I can't easily guarantee that consistency always.  It reduced the programming effort to allow Append to violate the strong condition temporarily.



"
1520113032,6094,Paul-Licameli,2024-03-11T17:12:38Z,"See also the long commit on Append in the header file.
"
1521193845,6094,saintmatthieu,2024-03-12T10:10:15Z,Of course - I overlooked that it returned a reference.
1521200431,6094,saintmatthieu,2024-03-12T10:15:05Z,"I cannot find the standard spec for that, but it looks like you're right - from left to right."
1521213261,6094,saintmatthieu,2024-03-12T10:24:37Z,Ok. I didn't notice the comment line 830.
1521251094,6094,saintmatthieu,2024-03-12T10:53:11Z,"I ran your branch locally to check something else, and this causes a stack overflow, calling again this `CreateClip` overload instead of the one below."
1521272157,6094,saintmatthieu,2024-03-12T11:07:10Z,Doesn't `[[nodiscard]]` apply here?
1521277659,6094,saintmatthieu,2024-03-12T11:11:35Z,Rather `t0 clamped to sequence start time`.
1521859105,6094,Paul-Licameli,2024-03-12T17:23:41Z,"Good idea.  I'm doing that in a rebasing and squashing.
"
936915749,3229,ksoze95,2022-08-03T16:39:58Z,Could this method be made const?
937641562,3229,vsverchinsky,2022-08-04T10:51:58Z,"Seems so, thanks! I'll fix that"
937712435,3229,ksoze95,2022-08-04T12:19:14Z,I think both ImageRoll files could be removed as there are no longer any references to them.
937729704,3229,ksoze95,2022-08-04T12:38:32Z,Could this be changed to a 'const auto&'?
937741750,3229,ksoze95,2022-08-04T12:50:35Z,Missing <wx/app.h> include for reference to wxTheApp
937744316,3229,Paul-Licameli,2022-08-04T12:53:09Z,"I disagree.  Understand whether there are good ideas there worth revisiting before you say that.

And I have never myself studied these files closely enough to answer that.

"
937744359,3229,ksoze95,2022-08-04T12:53:12Z,Possibly change to 'const auto'.  Just being pedantic.
937746794,3229,Paul-Licameli,2022-08-04T12:55:36Z,"ImageRoll.h is used by AButton.  ExpandingToolBar.* are the unused files.  I suggest don't remove them, but maybe don't modify them except minimally to keep them compiling?
"
937794322,3229,ksoze95,2022-08-04T13:39:44Z,This line can be removed as index is not referenced.
937801681,3229,ksoze95,2022-08-04T13:44:58Z,I think begin/end could be replaced with cbegin/cend.
937813371,3229,ksoze95,2022-08-04T13:53:48Z,"How about adding a pre-condition assert check before this line, an assert(seq.size() != 0)?  If seq.size() is 0 and forward is false then increment will become a very large number as size_t is an unsigned number."
937838048,3229,ksoze95,2022-08-04T14:12:51Z,Does this function need to verify that index is valid before calling theTheme.Bitmap?
938808821,3229,vsverchinsky,2022-08-05T13:23:55Z,"Can't be made const, it changes value later"
938809276,3229,vsverchinsky,2022-08-05T13:24:26Z,"Right, thanks!"
938812912,3229,vsverchinsky,2022-08-05T13:28:22Z,"It can't be zero-sized, though it may contain nullptrs"
938816151,3229,vsverchinsky,2022-08-05T13:31:43Z,"There is a check inside theTheme.Bitmap, but I think it's not really neccessary since all bitmap indices have names in the code"
938837100,3229,ksoze95,2022-08-05T13:51:12Z,"Ah, I missed that."
952739555,3229,Paul-Licameli,2022-08-23T14:58:14Z,"This change makes a difference for windows that override `GetMainWindowOfCompositeControl`.  What are such windows?
"
952743064,3229,Paul-Licameli,2022-08-23T15:00:59Z,"Combos and list controls I see, but no such are used in the sidebar.
"
952761787,3229,Paul-Licameli,2022-08-23T15:16:42Z,"This deletion requires you insert the `#include` in `ExpandingToolBar.cpp` so that the commit ""AButton refactoring"" builds"
952763705,3229,Paul-Licameli,2022-08-23T15:18:16Z,"Comment, please
"
952767607,3229,Paul-Licameli,2022-08-23T15:21:40Z,Off by one mistake -- the third argument is not `dx2 - dx1`
952771193,3229,Paul-Licameli,2022-08-23T15:24:43Z,"And dx2 - dx1 may be zero or negative, in which case, skip it"
952778361,3229,Paul-Licameli,2022-08-23T15:30:31Z,"The commit ""RealtimeEffectPanel wx*Button replaced with AButton"" doesn't build.  The next commit repairs that.  Make both build.

"
952799755,3229,Paul-Licameli,2022-08-23T15:45:55Z,"You don't add any overrides in later commits.

But this change is harmless.
"
952901248,3229,Paul-Licameli,2022-08-23T17:06:22Z,"See: https://bugzilla.audacityteam.org/show_bug.cgi?id=1564

I think this change may break that old bug fix, on Windows though not on Mac.  The first window in `seq` is not a `ToolDock` but the parent of one.  Drag all toolbars off the top dock so they float, and test it.

"
952934819,3229,Paul-Licameli,2022-08-23T17:35:04Z,"See also #3419
"
953197798,3229,Paul-Licameli,2022-08-23T23:54:35Z,"The changes in commit ""ImageRollPanel usage replaced with wxPanelWrapper"" are not necessary for this issue.  Not harmful either, as they remove and change two unused classes.  Why did you think you needed this?
"
953204953,3229,Paul-Licameli,2022-08-24T00:13:43Z,"It seems that almost everywhere else the program handles `WXK_ESCAPE`, it's the key-down, not CHAR event.  Does this matter?  I don't know.  If it works, ok
"
953207044,3229,Paul-Licameli,2022-08-24T00:19:40Z,"The power buttons are just `AButton` and not themable.  Does this matter?  Are the images really the same in all themes?
"
953208553,3229,Paul-Licameli,2022-08-24T00:23:50Z,"The template `ThemedButtonWrapper` is now unused at commit ""RealtimeEffectPanel wx*Button replaced with AButton"" while the template `ThemedAButtonWrapper` is only used with AButton as the template argument.

I wonder if the templates are really needed then, but maybe you think there will be future uses.
"
953555950,3229,Paul-Licameli,2022-08-24T09:16:50Z,"What was the major advantage in this replacement of `wxButton` with `AButton`?

More states that can be associated with changed images?

More convenient control of the button state?
"
953582120,3229,Paul-Licameli,2022-08-24T09:41:33Z,"Perhaps then the name of this function should change to `ProcessDragEvent` because it no longer delays the dispatch.
"
953613050,3229,Paul-Licameli,2022-08-24T10:13:54Z,"I was not aware that this interchange of behavior of the two buttons was specified, but it is certainly correctly implemented.
"
953629678,3229,Paul-Licameli,2022-08-24T10:32:28Z,"This long-distance coincidence of literals here and in RealtimeEffectsPanel.cpp is unfortunate.  Maybe a named constant.  Also the mismatch of capitalization would make two strings in the translation catalog.

The _ macro does a run-time translation.  If the language preference changes, is this name reset?  No.  That means the screen reader might read it in the wrong language.  Important?  Maybe not enough to fix, but comment it.

"
953650582,3229,Paul-Licameli,2022-08-24T10:57:30Z,"I see that the template that became unused earlier now is reused.

I see _ again but the template adds the handler for preference changes that updates the title.

The handler for preference change in that template, and also in the `ThemedButtonWrapper`, should also update the window name with the title, for the screen reader.
"
953653634,3229,Paul-Licameli,2022-08-24T11:01:19Z,"If language is changed in preferences, this line is not visited to update the name.
"
954859782,3229,vsverchinsky,2022-08-25T11:40:53Z,"Right, but `dx2` calculation is wrong"
954868961,3229,vsverchinsky,2022-08-25T11:51:07Z,"Thanks, will fix that"
954909396,3229,vsverchinsky,2022-08-25T12:32:51Z,"@Paul-Licameli I tested it in current master (without my changes) as you said and both top and bottom panels are focusable, so even if I revert this check in my branch it wouldn't fix the issue.  Also tried after configuration reset, both docks aren't empty, though they are look empty "
954952040,3229,vsverchinsky,2022-08-25T13:13:35Z,"For same reason we are trying to avoid dependency cycles, because aliases complicates the code"
954961097,3229,vsverchinsky,2022-08-25T13:21:47Z,Key down event delivered to the window that has focus. wxDialog handles WXK_ESCAPE same way
954965577,3229,vsverchinsky,2022-08-25T13:25:32Z,"It is themable, but stored as a `AButton*`"
954974419,3229,vsverchinsky,2022-08-25T13:33:00Z,"Native buttons are not focusable on mac until such behaviour explicitly enabled in the preferences. Native buttons do not support text elision, appearance can't be customized... many reasons actually"
955032095,3229,vsverchinsky,2022-08-25T14:21:05Z,">If the language preference changes, is this name reset? No. That means the screen reader might read it in the wrong language. Important?

As I concerned it works same way everyway, don't see why this case is special"
955090408,3229,Paul-Licameli,2022-08-25T15:07:57Z,"I don't understand.  Top or bottom panel is meant to be skipped in the Ctrl-f6 cycle if there are no toolbars on the dock.

Are you saying that there was already a regression in this behavior, in master, for Windows?

If so, then don't try to fix the regression if your PR is not introducing it.  There should instead be an issue which I think should not be fixed for alpha.

"
955090913,3229,Paul-Licameli,2022-08-25T15:08:27Z,"Behavior of focusing, and you know, is different across operating systems.
"
955114655,3229,Paul-Licameli,2022-08-25T15:28:29Z,"Now I see and understand your rewrite.
"
1513202051,5980,saintmatthieu,2024-03-05T17:14:04Z,Minor: alphabetical order (below too)
1513206914,5980,saintmatthieu,2024-03-05T17:17:39Z,This is your way of not duplicating the long list of `wxDataViewCtrl` ctor arguments ? :D
1513241070,5980,saintmatthieu,2024-03-05T17:42:30Z,Doesn't look necessary as it was already set to null a few lines above.
1513646478,5980,saintmatthieu,2024-03-06T00:10:07Z,Most of these could be private.
1513648719,5980,saintmatthieu,2024-03-06T00:14:20Z,"Trying to understand these:
Ideally this #if would be false, so that e.g.
`class PluginDataViewStateRenderer final : public wxDataViewToggleRenderer`
could be defined and end of story.
But it's not always the case and so you need some custom implementations.
Are your custom implementations inferior? If not, which not just keeping them and remove the #if ?"
1513662956,5980,saintmatthieu,2024-03-06T00:37:58Z,"... I coincidentally found out that, in spite of this #if statement yielding true for me, there still is an available definition of `wxDataViewTextRenderer` in dvrenderers.h. So I tried to remove this #if and only keep 
`class PluginDataViewStateRenderer final : public wxDataViewToggleRenderer`
and
`class PluginDataViewTextRenderer final : public wxDataViewTextRenderer`
and then run Audacity. At first sight I don't see a difference."
1513672101,5980,saintmatthieu,2024-03-06T00:53:16Z,"Because I'm lazy and try to minimize the amount of code I have to review, I similarly tried to remove this class definition, just using
```
#if wxUSE_ACCESSIBILITY
wxAccessible* PluginsDataViewCtrl::CreateAccessible()
{
   return wxDataViewCtrl::CreateAccessible();
}
#endif
```
I'm no narrator expert, but trying it out it still seemed to work. What was the motivation for this class definition?"
1513682311,5980,saintmatthieu,2024-03-06T01:03:21Z,not used?
1513682595,5980,saintmatthieu,2024-03-06T01:03:52Z,not used?
1513683399,5980,saintmatthieu,2024-03-06T01:05:21Z,"`ClearAll`, `SelectAll`, `Enable` and `Disable` not used."
1513690869,5980,saintmatthieu,2024-03-06T01:18:01Z,"I don't understand why, but `eIsCreating` is the only mode used in this source file."
1513693970,5980,saintmatthieu,2024-03-06T01:23:35Z,A constant for this width would be nice.
1513707971,5980,saintmatthieu,2024-03-06T01:48:19Z,`pm` is not used
1513716315,5980,saintmatthieu,2024-03-06T02:02:45Z,"I noticed (and think I remember someone else mentioning this in the ticket, maybe Peter) that once this modal shows, the visible plugin items become greyed out:
![image](https://github.com/audacity/audacity/assets/22740106/0b27817c-0405-434e-b926-c0b16900a18b)

I don't know why or how to fix this, but it probably would be around those lines."
1514000156,5980,vsverchinsky,2024-03-06T08:10:18Z,Yes 😅 
1514046057,5980,vsverchinsky,2024-03-06T08:42:19Z,"> Ideally this #if would be false, so that e.g.

Ideally, yes. But `wxWidgets` controls are not always have same behavior across platforms. There are three different underlying types depending on target platform: generic on Windows (custom implementation that doesn't use high level OSs controls), gtk tree view on Linux-based platforms, and `NSOutlineView` on MacOS. They are all react differently on user input, and not exactly as we want it to. 
`wxDataView*Renderer` implementations are also platform-dependent, and class hierarchies they belong to are also different depending on platform.

> Are your custom implementations inferior

No doubt 🤣 

>  If not, which not just keeping them and remove the #if ?

I think I answered that question?"
1514051696,5980,vsverchinsky,2024-03-06T08:44:39Z,https://github.com/audacity/audacity/issues/3865#issuecomment-1956381348
1514053962,5980,vsverchinsky,2024-03-06T08:46:14Z,"Yes, I'll remove that `if` statement, thanks!"
1514189517,5980,saintmatthieu,2024-03-06T10:08:42Z,ACK
1514356065,5980,petersampsonaudacity,2024-03-06T12:08:04Z,"> I noticed (and think I remember someone else mentioning this in the ticket, maybe Peter) that once this modal shows, the visible plugin items become greyed out

@saintmatthieu 

Yes I recall that was me - but:
a) I can't find where I reported it,
b) I can't seem to be able to replicate it on the latest branch build for this.

"
1514601801,5980,vsverchinsky,2024-03-06T14:41:57Z,"@petersampsonaudacity As Matthieu accurately noticed, it seem that rows become grayed out when ""Incompatible Plugins"" dialog appear. In latest update I provided a hotfix which works for me.
Also, search when typing should now loop over the table."
1514658979,5980,saintmatthieu,2024-03-06T15:11:59Z,🥲 
1515978219,5980,saintmatthieu,2024-03-07T11:07:25Z,`override`
1515996515,5980,saintmatthieu,2024-03-07T11:22:59Z,"Either this should be an `override` or it is not used.
Please review this for other methods as well.
That will help the review, and making as many of these `private` as possible on top of that would help even more."
1521311351,5980,LWinterberg,2024-03-12T11:37:43Z,"One small thing: Currently, sorting by ""Generator"", the ""Type"" menu saying ""Audacity Effects""/""Nyquist Effects""/... is confusing, as you really are seeing something that's not an effect. Can you rename them to the following instead?

* Audio Unit 
* LADSPA 
* LV2 
* VST 
* VST3 
* Nyquist 
* Native

(where native is what currently is ""Audacity Effects"")"
1521323731,5980,petersampsonaudacity,2024-03-12T11:48:03Z,"@LWinterberg 

Good call.
But for greater clarity could the ""Native"" be expanded to ""**Native Audacity**"" ?"
1534045021,5980,saintmatthieu,2024-03-21T14:35:49Z,"With this change it is not guaranteed that `pluginProviderNames` and `mPluginProviderIds` have equal size anymore, is it? Then it is used in
```cpp
void PluginRegistrationDialog::OnTypeFilterValueChanged(wxCommandEvent& evt)
{
   const auto index = evt.GetInt();
   if(index >= 0 && index < mPluginProviderIDs.size())
      mPluginsModel->SetFilterType(mPluginProviderIDs[index]);
}
```
and I haven't yet understood what the consequences could be."
1534063708,5980,saintmatthieu,2024-03-21T14:46:24Z,"All good, I didn't realize that `continue` also skipped the call to `mPluginProviderIDs.push_back(PluginManager::GetID(provider.get()));`."
1205343881,4723,Paul-Licameli,2023-05-25T10:54:41Z,"I'm starting the review in the middle, with the commit ""Remove now obsolete API methods"".  It makes the most widespread changes, by changing the interface of WaveTrack, and I want to understand that first as perhaps what motivates much else.

My first comment:  WaveClip::ToSequenceSamples becomes unused so could be removed.


"
1205645567,4723,Paul-Licameli,2023-05-25T14:56:50Z,"Should the comment instead say `scratch`?
"
1205680309,4723,Paul-Licameli,2023-05-25T15:23:43Z,Add banner comments at top
1205680648,4723,Paul-Licameli,2023-05-25T15:23:59Z,Add banner comments
1205681130,4723,Paul-Licameli,2023-05-25T15:24:20Z,"Add some Doxygen comments about the purpose of the class
"
1205697376,4723,Paul-Licameli,2023-05-25T15:33:37Z,"Very minor, but I think about shrinking the `sizeof` and `alignof` structs when I define them.  I might think to permute the members, putting `mMaxBlockSize` last.  And then forget about it."
1205703363,4723,Paul-Licameli,2023-05-25T15:38:38Z,"The sequence of member initializers does not agree with the sequence that the class declares the memebrs.

It's legal but will compile to execute in the sequence of the members, not the sequence of the initializers seen here.

Some compilers warn about that.

In this case it doesn't matter because there are no side effects or ordering dependencies among the initializers.  But it is good habit always to make the sequences agree.
"
1205706808,4723,Paul-Licameli,2023-05-25T15:41:14Z,"Putting `numSamples`, then `format` last might shrink the `sizeof`"
1205711060,4723,Paul-Licameli,2023-05-25T15:44:48Z,"My preference is to use new uniform initialization syntax for members
```
: format{ format }
```
which has an advantage of disallowing narrowing conversions.  But one must know about a few dangers, where you must use parentheses to disambiguate.  Such as, constructing a vector and specifying an initial size instead of vector contents.
"
1205718936,4723,Paul-Licameli,2023-05-25T15:51:22Z,"The terminology throws me a bit.  ""Block"" is already much used in Sequence itself with a different meaning, and there can be any number.  But ""blocks"" here are just two.  I suggest instead, ""slots""."
1205734202,4723,Paul-Licameli,2023-05-25T16:04:21Z,"I think this misuses the assertion.  If it's part of the contract that the getter function cannot fail, then just give it a void return.  If failure is tolerable (and indeed you handle the case next), then don't assert.

And I would do the latter, knowing what I do about the history.  The `mayThrow` arguments ultimately cause exception propagation when true in case there is some sort of disk failure.  Exceptions lead to a top-level handler in the program that backs out the side effects of a failed operation and restores the last good state out of undo history.  See `AudacityApp::OnExceptionInMainLoop`.

But in some contexts (painting the screen) false is passed around instead to suppress exceptions, and it's expected to fill sample buffers with zero and give that to painting.

Failure conditions because of exogenous device problems or corrupted files are contingencies to be handled, and it is not proper to assert that they never happen.

As I said, I don't like new assertions that have no accompanying comments anywhere, unless they are in the middle of the function and very easy to deduce as always correct in the context.

A new assertion should mean ""This condition was provable at the time the assertion was written.""

You should know, and persuade your reviewer too, that assertion failure is LOGICALLY impossible at the time you add the assertion.

I see assertions as a kind of documentation to aid the reader in reasoning about correctness, not just there for their runtime effects in debug builds.

Now maybe later code modification breaks the proof because it is hard to maintain all the consistency.  That's when the runtime effect of assertions is also valuable.
"
1205739360,4723,Paul-Licameli,2023-05-25T16:08:57Z,"This is ""LRU"", isn't it?  Least-recently-used.
"
1205742544,4723,Paul-Licameli,2023-05-25T16:11:40Z,"Maybe `memcpy` instead, or maybe compilers are smart enough to make that optimization
"
1205762304,4723,Paul-Licameli,2023-05-25T16:28:58Z,"I have now read all of this replacement for `SampleTrackCache`.

That class had many more complications that I wrote long ago and reviewed again just today.  Did you read and understand all of it?  I don't ask to reproduce all of those, yet..

Like this cache, that one was meant to work best with a pattern of fetching from successive sample offsets.  Many small fetches then would not be punished with repeated database queries.

Unlike this, that one also allowed for efficient, sequentially backward fetches, as might also happen in scrubbing.

Also unlike this, that one had awareness of the underlying block boundaries within the Sequence and adjusted its caching pre-fetch sizes accordingly.  But that is lost with the simplifications here.

Removing the complications of best and ideal block sizes from WaveTrack and WaveClip interfaces still seems a good idea to me, cleaning up those abstractions, but now that the new cache can cooperate more intimately with Sequence, it should still implement similar logic to align its prefetches to the underlying Sequence blocks.

Also unlike this, SampleTrackCache maintained two buffers and could satisfy a request partly from each.  So suppose two buffers equal to the maximum block size.

So suppose only the maximum block size is exposed by WaveTrack as a preferred size for sequential fetches, and suppose an Effect does just that.  (Let's neglect time stretching).  Still the request might not align to the actual blocks, because of the history of cuts and pastes causing some under-sized blocks, or because some starting point was chosen without regard to alignment.

But maintaining two buffers would still reduce the number of database queries.  A request for the maximum block size might be filled partly by one slot, then partly by the other, but then also the remainder of the other slot is available to satisfy the next request without again invoking the getter function.

In other words -- without reproducing all complications of `SampleTrackCache`, still I would rewrite the above to loop, filling alternate slots, then copying to the out buffer, until satisfying the total request.
"
1205790883,4723,Paul-Licameli,2023-05-25T16:54:31Z,"As we discussed, a question is whether the cache is invalidated in sufficient places.

The cache depends on mNumSamples and mMaxSamples, so it should be invalidated at least when either of those changes.  (Though also when contents change).

I haven't studied the later commits, but even this one is incomplete by that criterion.

 `mMaxSamples` can change in `ConvertToSampleFormat`.  (Also `HandleXMLTag`, but that is deserialization of the structure from disk, so in fact just one initialization of the cache at the end of `HandleXMLEndTag`  is sufficient.)

`mNumSamples` may change where `AppendBlock` is called -- surprise!, the third argument is a reference.  Also in `Paste`, `Delete`.  Also `CommitChangesIfConsistent`, `AppendBlocksIfConsistent` but you covered those.
"
1205795533,4723,Paul-Licameli,2023-05-25T16:59:04Z,Or not make this file ... ?
1205799209,4723,Paul-Licameli,2023-05-25T17:02:52Z,"... or don't make a separate file?

You made this cache separate from Sequence and used a std::function callback -- were you thinking of avoiding dependency cycle?  Yes, it avoids the cycle between two translation units.

But now I think it could be quite proper for Sequence and its cache to cooperate intimately, each class using the other's interface directly, and one a friend of the other -- and so, put them all just in Sequence.*

Avoidance of dependency cycles is desirable in the graph if `#include`s relating translation units.  But it's not necessary at the level of closely cooperating classes, like containers and their iterators.

"
1205801116,4723,Paul-Licameli,2023-05-25T17:04:49Z,Surely this functiion served little purpose
1205801772,4723,crsib,2023-05-25T17:05:33Z,And the next thing is we spend time splitting classes into different headers/translation units :-) 
1205802581,4723,Paul-Licameli,2023-05-25T17:06:34Z,"Finally I reach the commit that deletes the two functions above, and much else.

As I already explained, I don't like these deletions from Sequence.  I think some valuable old logic for alignment of cache fetches is lost.  I think these two functions at least should be retained, and they should be private, but the cache of the sequence should be a friend or a nested class.
"
1205807611,4723,Paul-Licameli,2023-05-25T17:12:08Z,"Why are there now const and non-const overrides?  This suggests the query might mutate the track.

I think `GetIdealBlockSize` was erroneously non-const, and you just made a global search and replace?
"
1205818968,4723,Paul-Licameli,2023-05-25T17:25:02Z,"`ToSequenceSamples` can be removed, as now unused -- and then `GetSequenceStartSample` is also unused, so delete it too
"
1205826739,4723,Paul-Licameli,2023-05-25T17:33:25Z,"This change is incorrect!

Removing the use of `GetBestBlockSize` is all right, but not removing the call to `limitSampleBufferSize`, which makes sure that the last fetch does not exceed the intended range of the sequence.
"
1205829796,4723,Paul-Licameli,2023-05-25T17:36:46Z,"> And the next thing is we spend time splitting classes into different headers/translation units :-)

@crsib We split lots of old legacy code that combined UI and internals carelessly and was generally written without regard to proper dependency cycle management.  This case isn't like that.

But are you thinking of some generalized abstract, polymorphic Sequence?  I think you hinted at that and I don't undertand you yet.
"
1205833573,4723,Paul-Licameli,2023-05-25T17:40:44Z,"Also incorrect to remove `limitSampleBufferSize` here, though this is experimental code unreachable in the release build.
"
1205868786,4723,Paul-Licameli,2023-05-25T18:20:30Z,"I don't like this solution to the invalidation problem.  Distinguishing abstract SequenceInterface, and making this decorator, seems to me, excessive complication for the problem.

I would rather, as I said, let the Sequence and its cache be closely cooperating classes in one translation unit, and just invalidate the cache in all mutating member functions of Sequence.  There would be little need to disturb other code outside of Sequence.

This commit does add a lazy creation-on-demand of the cache when getting from the sequence -- that part is good.

Putting sufficient invalidations into Sequence.cpp so that we can examine it in isolation and be confident of cache correctness -- that is good.

Still there might be the other problem of ""eviction.""  Reclaiming the memory resources of the cache when it's not good to occupy them.

The old caches were short-lived -- they disappeared after rendering a spectrogram, or after destroying a Mixer object.

The new caches are internal cursors of Sequences, and might be more numerous than before, as they become per-clip and not per-track, and are not local variables in appropriate scopes.

Sequence (and therefore WaveClip, and therefore WaveTrack) might therefore benefit by exposing a `ClearCaches` function that the application can decide to call in certain contexts.

I would at least be sure to empty the caches of the duplicate tracks that are in the Undo stack -- both when creating Undo states, and also when duplicating tracks out of the Undo state.

Actually that might even require a pure virtual function in Track for cache clearing.  See `TrackListRestorer` where the duplications happen.

"
1206367716,4723,saintmatthieu,2023-05-26T07:51:35Z,"Missed that, thanks. "
1469503561,5900,Paul-Licameli,2024-01-29T12:13:23Z,"What happens if you swap channels?
"
1469505759,5900,Paul-Licameli,2024-01-29T12:15:30Z,"This commit is strange.

As I said I don't like it that lib-wave-track mentions extraneous things like quarter notes and stretch ratios, and now this is one more thing.  I might figure out a restructuring in my branch.

Why can't a track or clip simply publish whenever it changes, and have subscribers attached to it?  Why must you first set a publishing interface into it?
"
1469512254,5900,Paul-Licameli,2024-01-29T12:21:13Z,"I think this function should be moved into `WaveTrackAffordanceControls.cpp` which is the sole user of it.
"
1469517737,5900,Paul-Licameli,2024-01-29T12:26:13Z,"Repeated expression could be `textWidth`
"
1469520861,5900,Paul-Licameli,2024-01-29T12:29:08Z,"Seeing this commit that again changes what is painted in the affordance area -- I say again:  add it to the QA checklist, that it should be tested with a right-to-left language, Hebrew or Arabic.
"
1469524140,5900,Paul-Licameli,2024-01-29T12:32:08Z,"Should you always draw that bitmap, or not in case you reassigned 0 to iconWidth?
"
1469525197,5900,Paul-Licameli,2024-01-29T12:33:02Z,"Oh I see the early return did that, but I found it a bit non obvious
"
1469564845,5900,Paul-Licameli,2024-01-29T13:04:59Z,"Those classes look nice, but I'd rather you just follow conventional use of ShuttleGui for bracketing things.
"
1469748882,5900,saintmatthieu,2024-01-29T15:17:12Z,"This method is called when preparing tracks for playback. During playback, swapping channels isn't possible. After playback, the publisher will have expired, so swapping channels wouldn't have consequence."
1469758511,5900,saintmatthieu,2024-01-29T15:22:50Z,"The publisher is updated by the stretching sequence, before playback, and gets destroyed after playback.
But I'll try the approach you suggest."
1469802041,5900,saintmatthieu,2024-01-29T15:50:32Z,"It helped me when I had to change things around, and I think it would also have helped me when I looked at this source file the first time and was trying to figure out how it all worked."
1470947060,5900,Paul-Licameli,2024-01-30T10:14:03Z,"Two octaves down, five octaves up -- might comment somewhere that these are the bounds.  Maybe more prominently in the header file.
"
1470976230,5900,Paul-Licameli,2024-01-30T10:33:13Z,"This does not impose the limits on pitch shift that the dialog does.
"
1470979991,5900,Paul-Licameli,2024-01-30T10:36:04Z,It's a little strange that this is a member function of a UI object (representing a certain rectangle of the screen).  Can't it simply be a non-member function?
1470988759,5900,Paul-Licameli,2024-01-30T10:41:58Z,"I really dislike this entire commit -- adding mutability.

Let it stand, but I may explain the alternative with another suggested commit.
"
1470994406,5900,Paul-Licameli,2024-01-30T10:46:10Z,"Why remove `const`?  That's not necessary and having it here is useful information to a maintainer.
"
1471005943,5900,saintmatthieu,2024-01-30T10:53:00Z,"Looks good to me - see ""Use Observer framework"" commit"
1471008213,5900,Paul-Licameli,2024-01-30T10:54:44Z,"Oh, now I see at this commit why the member becomes non-const.

Consider using the utility `AtomicUniquePointer` instead of a mutex.
"
1471009027,5900,saintmatthieu,2024-01-30T10:55:22Z,Adding a comment.
1471013962,5900,saintmatthieu,2024-01-30T10:59:00Z,Looks indeed like it should.
1471017220,5900,Paul-Licameli,2024-01-30T11:01:30Z,"Or just `std::mem_fn`
"
1471019626,5900,Paul-Licameli,2024-01-30T11:03:29Z,"It seems you are reinventing the Publisher utility and I don't know why.
"
1471022902,5900,Paul-Licameli,2024-01-30T11:05:35Z,"I think `mPropagators` never gets size more than 1, so why a vector?
"
1471026000,5900,saintmatthieu,2024-01-30T11:08:26Z,"... there is the call to `FindTrack`, though, which is a member method. I haven't understood yet under what conditions it may cause an early return.
Making that method const, at least, is a no-brainer."
1471046003,5900,saintmatthieu,2024-01-30T11:23:21Z,"Ok, found something better. Coming up..."
1471057959,5900,saintmatthieu,2024-01-30T11:34:18Z,"I don't think an atomic would be helpful here, since it's not only just the reallocation of the object that must be synchronized. Remember that comment in SP:
```
  /**
    Set independent time stretch and pitch factors (synchronously to processing thread).
    ...
  */
  void setTimeStretchAndPitchFactor(double timeStretch, double pitchFactor);
  ```"
1471058961,5900,saintmatthieu,2024-01-30T11:35:15Z,"It's outdated now, through the use of `Observer`."
1471074098,5900,Paul-Licameli,2024-01-30T11:49:30Z,"But there is just too much weirdness and reinvention going on, as I said.

What I think you should do:

Make `ClipInterface` inherit `Observer::Publisher<double>` (or maybe some distinct struct type `PitchRatio` just containing a double).

~~A `using` declaration to make `Publish()` public.~~  Never mind, I think it's not needed

~~A pure virtual `DoPublish(double)`.~~

~~`WideClip` overrides that to do the work.~~

"
1471080225,5900,saintmatthieu,2024-01-30T11:55:07Z,"You may ignore most of a9752ac3a7431db60b6742de5ae9a5b5281ea104 and 250725b5876d32aa78c9114af86f0dff36d0fe24, as I did in a recent commit put in place almost exactly what you described. See, too, that this change is outdated."
1471087557,5900,Paul-Licameli,2024-01-30T12:01:46Z,"The constructor of `ClipSegment` isn't passed a function that does subscription.  It is just passed a reference to `Observer::Publisher<PitchRatio>`.  That reference can be stored in `StaffPadTimeAndPitch::Parameters`.  Then `StaffPadTimeAndPitch` in its constructor simply subscribes to the publisher, passing in that lambda, and holding the `Subscription` object which is a sort of smart, weak pointer representing the connection between publisher and subscriber.
"
1471089889,5900,Paul-Licameli,2024-01-30T12:03:29Z,"There are multiple threads involved here, and that means some caution in the use of `Observer`.  Creating and destroying Subscriptions, or destroying the Publisher before the Subscription that it gave out, is safe so long as it is all in the main thread.  Publishing from other threads will be safe so long as the callback does not itself cause Subscriptions to be created or destroyed.  I think that applies.
"
1471093707,5900,Paul-Licameli,2024-01-30T12:04:58Z,"Where is Publish called then?
"
1471099637,5900,Paul-Licameli,2024-01-30T12:09:42Z,"I looked through this confusing stuff again, and now I see, ultimately it's in `WaveClip::SetSemitoneShift`

So then, that can simply call the inherited `Publish`
"
1471356772,5900,saintmatthieu,2024-01-30T14:44:11Z,"> Creating and destroying Subscriptions, or destroying the Publisher before the Subscription that it gave out, is safe so long as it is all in the main thread. Publishing from other threads will be safe so long as the callback does not itself cause Subscriptions to be created or destroyed.

Incidentally, here it's the other way round: subscription creation and destruction is done on the audio thread ; publication on the main thread.

Just took a look at some of the Observer implementation, couldn't see thread unsafety (but I haven't strained myself too much).
Also tried a worst-case scenario, with very fast subscription creation and destructions, concurrently with very fast publications. Couldn't get the program to behave incorrectly, which is more evidence that I can take your word for it.


"
1471400021,5900,Paul-Licameli,2024-01-30T15:07:51Z,"That “inverse” pattern should be safe too.

Is there no way to lift the making and destroying of subscriptions to the main thread?

Shared and weak pointers manage the shared state in a thread safe way — but provided each thread uses different pointer objects.

It is possible to have races in the use of the identical pointer object in two threads.  Don’t do that.

Observer uses weak pointers."
1471400999,5900,Paul-Licameli,2024-01-30T15:08:14Z,The thread safety issue should be commented!
1471536711,5900,saintmatthieu,2024-01-30T16:17:22Z,Will do.
1808822922,7590,LWinterberg,2024-10-21T13:26:15Z,good lord finally
1808833126,7590,igorkorsukov,2024-10-21T13:31:40Z,It should probably just be `Win`
1808833935,7590,kryksyh,2024-10-21T13:32:07Z,"while we are at it, would you mind adding CMakeUserPresets.json?

 see https://github.com/audacity/audacity-private-docs/blob/main/build/CMake%20Presets.md for AU3
 
 Or we could do that within another PR"
1808835820,7590,kryksyh,2024-10-21T13:33:09Z,Does this break anything on mac/lin?
1808835918,7590,igorkorsukov,2024-10-21T13:33:12Z,"I think there is no need to perform the building and installation itself, it is enough to just configure the project to generate .sln"
1808838401,7590,kryksyh,2024-10-21T13:34:40Z,Should we hardcode VS version? I'm using 2022
1808841644,7590,igorkorsukov,2024-10-21T13:36:33Z,"DEVELOPER - I think we need to think of another name, it’s not clear what it is and where it comes from 
I think we need to check the name of the cmake generator 
Or something like this: VS_CMAKE_GENERATOR  "
1808841948,7590,kryksyh,2024-10-21T13:36:44Z,Do we need it hardcoded here? I believe that it can be detected automatically.
1808842616,7590,kryksyh,2024-10-21T13:37:07Z,Some files are missing newlines
1808846359,7590,igorkorsukov,2024-10-21T13:39:01Z,"I see that this is also used for VSCode, then we still need to think about a good name. "
1808846682,7590,kryksyh,2024-10-21T13:39:11Z,"does vscode not obey ""insert_final_newline"" for .editorconfig?"
1808851628,7590,kryksyh,2024-10-21T13:41:49Z,"Shouldn't we add ""SynthWave '84"" theme with glow enabled to the list of recommendations? (jk)"
1809203492,7590,igorkorsukov,2024-10-21T17:13:56Z,It would probably be better to use something like this.. ${env:QTDIR}
1809204390,7590,igorkorsukov,2024-10-21T17:14:43Z,better to use QTDIR 
1809206333,7590,igorkorsukov,2024-10-21T17:16:18Z,developer.bat - I think it would be better to call it something like `make_sln.bat` or `generate_sln.bat`
1810137039,7590,igorkorsukov,2024-10-22T07:43:16Z,Found that this is an internal name in VSСode
1810148634,7590,igorkorsukov,2024-10-22T07:49:57Z,"As far as I can see, this is (c_cpp_properties.json) an automatically created file, it is better to add it to gitignore."
1810223544,7590,igorkorsukov,2024-10-22T08:27:58Z,"Probably there should be not a build here, but an install.
@kryksyh  suggested that we can just do `CMake: Install`, and not add a task file."
1810226279,7590,igorkorsukov,2024-10-22T08:29:31Z,"It is better to simply write in the instructions (and when trying to configure it, it is indicated) that us need to add Qt to the PATH "
1810226929,7590,igorkorsukov,2024-10-22T08:29:56Z,https://github.com/audacity/audacity/pull/7590/files#r1810226279
1810349169,7590,saintmatthieu,2024-10-22T09:27:12Z,"You see, I missed that. Will consider it for this PR."
1810378091,7590,saintmatthieu,2024-10-22T09:42:43Z,"The proposed approach in this PR is to add an audacity-target post-build step to copy the executable to the install directory. If you just build audacity without building install first, it will copy it, it will be alone in its `install/bin`."
1810387724,7590,saintmatthieu,2024-10-22T09:48:19Z,"Can we ensure a VS generator without specifying the version? I'd gladly remove this flag, but if I do, I don't know what ensures that it will pick a visual studio generator."
1810408519,7590,saintmatthieu,2024-10-22T10:01:01Z,"The only solution I've found to that is a bit complicated, but maybe worth using:
```bat
REM Detect the highest available Visual Studio version
for /f ""tokens=*"" %%i in ('""C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"" -latest -products * -requires Microsoft.Component.MSBuild -property installationVersion') do set VS_VERSION=%%i

REM The `VS_VERSION` will be something like 17.11.35312.102 ; keep only the major version
set VS_VERSION=%VS_VERSION:~0,2%

if %VS_VERSION%==16 (
    set GENERATOR=""Visual Studio 16 2019""
) else if %VS_VERSION%==17 (
    set GENERATOR=""Visual Studio 17 2022""
) else (
    echo No supported Visual Studio version found.
    exit /b 1
)

echo Using %GENERATOR%
```"
1810434420,7590,saintmatthieu,2024-10-22T10:12:46Z,"I just realize that the `MSVC` check is sufficient for this part of the configuration (configuring the debugging command correctly). This then leaves the `DEVELOPER` flag to adding the post-build step to copy the executable to the install directory, which we can still discuss if we want this at all."
1810438749,7590,saintmatthieu,2024-10-22T10:14:34Z,"> Do we need it hardcoded here? I believe that it can be detected automatically.

Probably."
1810442011,7590,saintmatthieu,2024-10-22T10:16:22Z,"> As far as I can see, this is (c_cpp_properties.json) an automatically created file, it is better to add it to gitignore.

The `includePath`, adding the QTDIR, isn't default and it's something I enjoy.
Once the file is created, I'm not sure it gets modified. I suggest we give it a try and re-assess if we see that it does and it becomes a nuisance."
1810443773,7590,saintmatthieu,2024-10-22T10:17:44Z,"We have this:
```
[*.json]
insert_final_newline = unset
```
Are the missing newlines an issue, though?"
1810444917,7590,saintmatthieu,2024-10-22T10:18:35Z,"We should recommend the uncrustify extension, though. Will add."
1810446260,7590,igorkorsukov,2024-10-22T10:19:38Z,"If we decide to keep the copy step, let's name the flag something like: `OPTIMIZED_DEPLOY`"
1810446665,7590,saintmatthieu,2024-10-22T10:19:57Z,"> Shouldn't we add ""SynthWave '84"" theme with glow enabled to the list of recommendations? (jk)

I don't know. Does it work well with Doki-Theme?"
1810452407,7590,saintmatthieu,2024-10-22T10:23:58Z,Of course.
1810454891,7590,igorkorsukov,2024-10-22T10:25:31Z,"I believe we can add Qt to the include path in our cmake files.
Although it's strange that I didn't need it in my example...
Maybe because I have Qt in the PATH "
1810482616,7590,saintmatthieu,2024-10-22T10:44:05Z,"In fact, I think we can get rid of this entry altogether. I expect cmake will query the QTDIR env variable by default, and we do expect contributors to have this set."
1810504930,7590,saintmatthieu,2024-10-22T10:59:04Z,"Mh. For some reason That QML language server doesn't find the executable when I use `${env:QMLDIR}`. I have proof that my `${env:QMLDIR}` is set properly, so don't know what's wrong.
Anyway, the whole path should be made platform-independent - MacOS probably will the server executable in some other place.
Also, I haven't been able to configure the language server properly for my very machine. It doesn't manage to resolve the muse QML modules, maybe because it excludes the `_deps` directory? I'm not sure.
For now I think I'll remove that extension recommendation as well as these configs. Maybe someone else will have more success at some stage."
1810516412,7590,saintmatthieu,2024-10-22T11:07:41Z,I agree. It's nostalgia: my previous company had it named that way. I also like the idea of a developer 🦇  
1810517150,7590,saintmatthieu,2024-10-22T11:07:57Z,generate_sln sounds good.
1810527189,7590,saintmatthieu,2024-10-22T11:15:50Z,"> Probably there should be not a build here, but an install

This works because of the post-build task in the cmakelists that gets the executable copied to the install dir.
Having `install` as pre-launch task has for consequence that each time you launch after having modified the source code, the install target gets executed and, even if it's not the first time, just the check that everything (except audacity.exe) is up-to-date takes at least a couple of seconds.
On the other hand, for fast onboarding, what you suggest would be easier: the user wouldn't have to build the install target manually once.
But we can propose two launch tasks: the one you suggest and make it the default one, and for power users, the present one."
1810556698,7590,saintmatthieu,2024-10-22T11:36:12Z,"> even if it's not the first time, just the check that everything (except audacity.exe) is up-to-date takes at least a couple of seconds

I'm confused. Now it's super fast for me even with install. Ok for your proposal, then."
1810573543,7590,saintmatthieu,2024-10-22T11:48:53Z,"Consequently with [this](https://github.com/audacity/audacity/pull/7590#discussion_r1810556698), I'll remove."
1810576580,7590,saintmatthieu,2024-10-22T11:51:07Z,"Sorry, no, it still is needed for Visual Studio, which doesn't have pre-launch tasks AFAIK."
1810581591,7590,saintmatthieu,2024-10-22T11:53:58Z,... but then it's not so much a matter of optimizing deployment anymore. `COPY_TO_INSTALL` ? Doesn't say everything but it gives a good clue.
1810583952,7590,saintmatthieu,2024-10-22T11:55:36Z,"... or maybe we can just add that post-build step just if `MSVC`. Won't hurt CI anyway, as it uses Ninja. Then no need for that extra flag."
1810596898,7590,igorkorsukov,2024-10-22T12:04:42Z,`developer.bat` -> `generate_sln.bat`
1810764230,7590,kryksyh,2024-10-22T13:46:49Z,"I see, we can give it a shot. One thing though, it should be `%programfiles(x86)%` instead of `C:\Program Files (x86)`"
1810784241,7590,kryksyh,2024-10-22T13:57:26Z,"> Are the missing newlines an issue, though?

It's not that important, it's just the way it's done historically. And without a newline, some command line tools can misbehave. For example if you `cat file` the prompt will be printed on the same line as the last line from the file

<img width=""624"" alt=""image"" src=""https://github.com/user-attachments/assets/9d6c19a2-2fbe-41cf-8374-07c2e77d6b18"">
"
1810789371,7590,igorkorsukov,2024-10-22T14:00:04Z,`COPY_TO_INSTALL` - acceptable for me 
1810803346,7590,kryksyh,2024-10-22T14:07:41Z,Unfortunately not :(
1810812986,7590,kryksyh,2024-10-22T14:13:06Z,"```suggestion
        ""zachflower.uncrustify"", // for code formatting
        ""EditorConfig.EditorConfig""
    ],
```"
686270150,1377,Paul-Licameli,2021-08-10T19:41:59Z,"This enumeration persists with the attribute name ""linked"" both before and after your changes.  So consider the problems of downgrade (3.1 file opened in 3.0.x) and the opposite problem of upgrade.

Downgrade is all right because any non-zero value in the file will become boolean ""true"" so that preserves whether the track is a left channel of a pair, or not.  Upgrade is more complicated.

As it is written now, stereo tracks saved in 3.0.x always load as ""Group"" meaning in the (usual?) case of clips all aligned between tracks, drag bars will appear on the right, because boolean true was saved and is now interpreted as 1.

You could swap Group and Aligned, but that only makes the opposite problem in the (less usual?) case that a file was saved with non-aligned clips, which should show right channel drag bars but will not.

The complete solution?  Make 1 a reserved ""legacy"" value.  Enlarge Track::LinkConsistencyCheck() so it detects numerically whether clips correspond between channels, and change ""legacy"" to Group or Aligned.

And of course LinkConsistencyCheck must become a virtual function so Track does not depend on WaveTrack, and the override for WaveTrack must also call-through to the base class method.


"
686275315,1377,Paul-Licameli,2021-08-10T19:50:45Z,"Will the LinkType enumeration need more values in future versions of Audacity?  Maybe.

So consider, what if we are loading a future file, and there is a value not within the existing LinkType enumeration of Audacity 3.1?

The future value must be corrected to one of the known values, or loading the file should abort.

If aborting isn't acceptable, what's the best guess we can make now about future designs we haven't done yet?  A crazy question maybe, but we have to decide something now.  And I would say:  assume the unknown value can map to ""Aligned"" which is the expected usual case.

(What if the guess is wrong?  Then Audacity 3.1 ought to have some way to let the user correct the situation, changing incorrectly ""Aligned"" tracks to ""Grouped"" with something in the drop-down menu of the Track Control Panel.  Is that in the scope of this issue?  No, so don't act on this suggestion yet.  But we should argue it in the next design review.)


"
686333838,1377,vsverchinsky,2021-08-10T21:26:51Z,"It's quite strange solution i would say, why do you expect that file loaded from old project and having corresponding clip borders should be without affordances on the right channel (remember that with affordances both cases are valid)? Why not we remove them when clips are aligned at runtime then, or check this condition after merging tracks? Seems like it's another question for UX experts.
I don't like idea of LinkConsistencyCheck changing object state at all, now it's just make state somewhat cosistent, i can understand that, but i don't see any reason to prefer 'Aligned' over 'Grouped' "
686344936,1377,vsverchinsky,2021-08-10T21:48:51Z,"I didn't see that enum (or boolean value in the past) beeing used somewhere except WaveTrack context actually. And i don't see any sense in linking label tracks for example (maybe we would find use for this in future, but that's a speculation). And note that value is loaded/stored in WaveTrack but belongs to the Track class.

>The future value must be corrected to one of the known values, or loading the file should abort.

That's why i don't like modifying meaning of existing entities :) but make sense to me, and... 'Aligned' is more strict condition compared to 'Grouped', and 'Grouped' is stricter than 'None', and who knows which type of link we would decide to have in future (maybe we'll remove it all), but droping to 'None' is the safest option here i think. Also there is a version check exist for project files"
686397658,1377,Paul-Licameli,2021-08-10T23:59:00Z,"If a file is loaded from an old project, and all clip borders do correspond, as would be usual -- do you think it is better there are affordances on the right?  Wouldn't the user instead want them removed?  But then, how could they be removed, once they are present?

""Why don't we remove them when clips are aligned at runtime then, or check this condition after merging tracks?""  Maybe that won't be done automatically, but maybe the choice to do it if possible, should also be given to the user.

For instance, what happens if you record a stereo track, split it, do nothing else (or do edits that don't affect clip boundaries), then join channels again?  Affordances enter the right track, and can never go away again.

I think that is a gap in the design.  I think the problem of writing the function that will detect that affordances can be removed is a problem that will need to be solved.
"
686399770,1377,Paul-Licameli,2021-08-11T00:05:19Z,"> I didn't see that enum (or boolean value in the past) beeing used somewhere except WaveTrack context actually. And i don't see any sense in linking label tracks for example (maybe we would find use for this in future, but that's a speculation). And note that value is loaded/stored in WaveTrack but belongs to the Track class.
> 
> > The future value must be corrected to one of the known values, or loading the file should abort.
> 
> That's why i don't like modifying meaning of existing entities :) but make sense to me, and... 'Aligned' is more strict condition compared to 'Grouped', and 'Grouped' is stricter than 'None', and who knows which type of link we would decide to have in future (maybe we'll remove it all), but droping to 'None' is the safest option here i think. Also there is a version check exist for project files

There is a version check, but Audacity has very rarely made incompatible changes in version, and I don't know yet that we will decide to do so.

Maybe you have the better argument, that if there is an unknonwn future value for this field read into version 3.1 -- then the worst assumptions should be made, and it should be corrected to None not Aligned.  If that is wrong, let the user join mono channels back into stereo.  (Ah, but again -- should they have a choice to make the stereo tracks Aligned not simply Grouped?)

But the larger point remains:  sometihing must be done in 3.1 at load time, to be sure that the value read from the file maps to some valid value of the small enumeration of three values.  That isn't done yet here.
"
686402373,1377,Paul-Licameli,2021-08-11T00:12:48Z,"How do you like this idea instead:  the enumeration does have four values, not three.  The new values are 2 and 3.  Old files may have the value 1.  LinkConsistencyCheck will correct 1 to 2 or 3.

It can simply correct 1 always to Group (which is now 2).

But if after testing we decide that a more complicated procedure is needed to correct the value -- then we will do that, and we have already prepared by reserving 1 for the old, un-corrected value, distinct from the two new values.
"
686408968,1377,Paul-Licameli,2021-08-11T00:33:36Z,"Lines were permuted in this header file, making the diff bigger than necessary and a little more difficult to review."
686411812,1377,Paul-Licameli,2021-08-11T00:43:01Z,"I explained that previous work aimed to remove the assumption that the number of channels in a group of tracks is at most two in as many places as possible.

These changes suggest, unfortunately, a regression of that work which goes beyond what I expected to happen.

You may have a justification.  What is it?
"
686417274,1377,Paul-Licameli,2021-08-11T00:59:25Z,"Everywhere, GroupChannels is eliminated and replaced instead with LinkChannels or UnlinkChannels.  I think this is unnecessary, and again, a regression of the previous work at possible generalization for the future to more than two channels.
"
686419229,1377,Paul-Licameli,2021-08-11T01:05:23Z,HasLinkedTrack() replaces GetLinked() when used as just a boolean.  I explained that I made sure GetLinked() was a private function when I rewrote all the old code.  HasLinkedTrack() should also be private.  I checked that the code still compiles if it is.
686421552,1377,Paul-Licameli,2021-08-11T01:12:45Z,"Rather than eliminating GroupChannels and replacing it with two functions -- preserve GroupChannels.  Keep the argument for number of channels.  The third argument was never non-default -- very well, remove it, but replace with the new argument that specifies whether to align or not, in the case of more than one channel.

Then write the body of GroupChannels on the assumption that the number of channels to be grouped is not necessarily two or less.
"
686423041,1377,Paul-Licameli,2021-08-11T01:17:17Z,"Note that this was one of only two places where GroupChannels might be called with more than two -- importing.
"
686424283,1377,Paul-Licameli,2021-08-11T01:21:19Z,"Note that this is the second of only two places where GroupChannels could be called with more than two channels -- recording.

There is in fact not YET support for more-than-stereo tracks.  Calling GroupChannels with more than two made all mono tracks -- an implementation detail that could be changed in the future.  But it's the right abstraction to have these places that make POSSIBLY more-than-stereo tracks -- and we leave it to the details of the TrackList implementation to decide how to deal with that.


"
686466414,1377,Paul-Licameli,2021-08-11T03:35:38Z,"I see a minor consequence, that if a track ever needs an affordance, but later no longer needs it (as when swapping stereo channels) -- then the affordance control is not deleted until the track is.  Not very important."
686466695,1377,Paul-Licameli,2021-08-11T03:36:47Z,"Not necessary for this issue, but good, that you take the unnecessary pointer to an affordance out of the base class TrackView and put it only in the subclasses that need it.
"
686472608,1377,Paul-Licameli,2021-08-11T03:57:04Z,"This is private.  Keep it so.

TrackList::FindLeader() is for public use."
686473027,1377,Paul-Licameli,2021-08-11T03:58:24Z,"Replace ""previous one"" with ""its leader"" and this comment is not objectionable.

But I still strongly disagree with the unnecessary disturbance of the places that called GroupChannels().

"
686475659,1377,Paul-Licameli,2021-08-11T04:07:31Z,"Really, no.  I don't like this part.

Leave as it was:  one function, not two functions, with an interface equipped to make channel groups of any size, even though this isn't yet fully implemented.  Just add an argument for ""alignment"" or not.

Update function comments to say ""alignment"" has no effect when there is just one channel; and that grouping past two is not necessarily implemented yet, but the interface is presented.

"
686479785,1377,Paul-Licameli,2021-08-11T04:21:30Z,"I do like the name changes making this line read less strangely.

That's all for reviewing this PR.
"
686724799,1377,vsverchinsky,2021-08-11T11:02:52Z,">how could they be removed, once they are present?

They can't be removed
 
![image](https://user-images.githubusercontent.com/20165230/129017618-4f60dbdd-5e75-4156-bcb6-3fcdf8aeb478.png)

>do you think it is better there are affordances on the right

I think that it's safest assumption (keep things as they were before)

>Maybe that won't be done automatically, but maybe the choice to do it if possible, should also be given to the user.

Well maybe, but that was not declared in the scope of work for this task"
686745202,1377,vsverchinsky,2021-08-11T11:35:49Z,">You may have a justification. What is it?

I was studying what GroupChannel does for multi-channel tracks and came to conclusion that it does almost nothing: beeing called for multi-channel tracks it'll just set channel type to mono (as it was before) and will set the link to false (as it was before). The result of GroupChannels is a set of ungrouped channels, which is a bit misleading i think, and will lead to a false conclusions about the behaviour in future (we don't know yet how 5.1 channels would be grouped, for example). Maybe that's another reason to have a StereoWaveTrack type, then grouping and checks for leads will become redundant? But the consequences would have their own downsides surely

Consider a new declaration:
`void GroupChannels(Track& first, int nChannels, LinkType linkType, bool resetChannels = false);`
It looks a bit overloaded with parameters, and possibly incompotible states. This method tries to deduce things inside that are obvious from the context where grouping or ungrouping is needed."
686760802,1377,Paul-Licameli,2021-08-11T11:59:21Z,"I still disapprove what you did.  You must consider the implementation and also the interface.

There is what GroupChannels does now, which does not yet implement multi-channel tracks, because we don't yet have a data representation for them.

However there is all the other code using the abstractions provided by Track and TrackList, that ARE programmed to an interface anticipating possible multi-channel implementation in the future.  It required a lot of my work in previous years to make that so -- that the assumption of at-most-stereo tracks is made in very few places.

That should remain so.  Please change the interface of GroupChannels only to specify alignment or not.  Changing that function into two functions that can only allow for making either mono and stereo tracks is not a change in behavior now, but it is not an improvement of the interface.

"
686824303,1377,Paul-Licameli,2021-08-11T13:20:54Z,"I do agree that you can simplify away the resetChannels argument which was never non-default.
"
686841180,1377,Paul-Licameli,2021-08-11T13:39:37Z,"I have a suspicion that the scope may enlarge after all to include this after some more testing, but I admit this is trying to read designers' minds right now."
686965164,1377,vsverchinsky,2021-08-11T15:56:00Z,">However there is all the other code using the abstractions provided by Track and TrackList, that ARE programmed to an interface anticipating possible multi-channel implementation in the future.

We will need to make changes to GroupChannels then (maybe multiple times), and this will affect each piece of the code which calls this method, and make sure that we don't break anything unintentionally: to add a behaviour which will handle grouping for more than two channels, we'll need to interfere the code that does grouping for two channels."
692611085,1377,Paul-Licameli,2021-08-20T02:20:49Z,"Spelling in commit comment: *hiding
"
692611922,1377,Paul-Licameli,2021-08-20T02:23:19Z,"At least this small change might be better:  use SortedClipArray() not GetClips() because clips in a WaveTrack are not necessarily stored in sorted order by start time.

(I don't really like that, and maybe WaveTrack should be rewritten instead to guarantee the invariant of sortedness of clips.  But, it's not so yet.)

"
692612707,1377,Paul-Licameli,2021-08-20T02:26:03Z,"As mentioned, you might instead assume the two arrays of clips are already sorted."
692613911,1377,Paul-Licameli,2021-08-20T02:29:33Z,"And then instead, you might use std::mismatch on the two ranges of pointers, and the appropriate lambda, expressing what you mean very simply.
"
692614089,1377,Paul-Licameli,2021-08-20T02:30:06Z,"""existence""
"
692616426,1377,Paul-Licameli,2021-08-20T02:37:24Z,"Wait, is it correct to return false whenever a WaveTrack is last, or not followed by another wave track?

No -- you should return false only if the track is mono, link type 0.
"
692618929,1377,Paul-Licameli,2021-08-20T02:45:33Z,"This doesn't cause a project to fail to load in ProjectFileManager.cpp.  Still it should be fixed, in case the return value needs reuse somewhere else.
"
692625828,1377,Paul-Licameli,2021-08-20T03:07:59Z,"One more matter:  you still need the loading procedure to defend against unexpected values for ""linked"" that are not within the enumeration.

You can map all values outside { 0, 1, 2, 3 } to Grouped (which means, making the least assumptions about Non-mono tracks.)

"
692783640,1377,vsverchinsky,2021-08-20T08:53:26Z,:/ Thanks for spotting this!
1293713001,5027,crsib,2023-08-14T16:36:55Z,Love the naming :-)
1293895763,5027,Paul-Licameli,2023-08-14T19:40:38Z,Still reviewing?
1295626701,5027,saintmatthieu,2023-08-16T09:25:44Z,`mClips` are not necessarily in order. I'd expect `GetInterval` to be consistent with the visual experience. Why not sorting first?
1295629567,5027,saintmatthieu,2023-08-16T09:28:07Z,Is `right->mClips.size() == mClips.size()` not necessarily true?
1295659526,5027,saintmatthieu,2023-08-16T09:54:24Z,"`GetTrack().mClips`, similarly to `GetTrack().Intervals()`, is destined to return possibly stereo data. Here we are in a single-channel context. Wouldn't it spare future changes if we used `WaveChannel::Intervals()` right away ?"
1295687008,5027,saintmatthieu,2023-08-16T10:18:42Z,`WaveClip` is in practice still mono but soon to become stereo-capable. It'd be wrong for a `WaveChannelInterval` to return data that belongs to another channel. Are there plans to have a mono API ?
1295709385,5027,saintmatthieu,2023-08-16T10:41:16Z,Renaming this `GetChannelRMS` would make it less confusing.
1295713082,5027,saintmatthieu,2023-08-16T10:45:09Z,Not used (and hence `stepsPerWindow` too)
1295716847,5027,saintmatthieu,2023-08-16T10:48:52Z,Here - some British spelling ;)
1295721226,5027,saintmatthieu,2023-08-16T10:53:15Z,Does this really cast to `false` ? I'd rather see `false`.
1295729238,5027,saintmatthieu,2023-08-16T11:01:23Z,Hm. `EffectRepeat` seems unused. Are we aware of that ?
1295732381,5027,saintmatthieu,2023-08-16T11:04:56Z,"Consider placing these four lines in a scope, so as to reassure the reader that `iter` is only used for that."
1295736925,5027,saintmatthieu,2023-08-16T11:09:49Z,Interesting. Here's an effect that requires joint-stereo processing. But it doesn't care about clip boundaries ...
1295824055,5027,saintmatthieu,2023-08-16T12:31:12Z,"So calling `SetSelected` on each channel was redundant because `tracks.Any<WaveTrack>()` already returns all tracks, leader or not?"
1295837212,5027,saintmatthieu,2023-08-16T12:42:26Z,"This nested iteration could well have been interval-then-channel, which is what the code before this change was doing. Any particular reason why you chose this order?"
1295927271,5027,saintmatthieu,2023-08-16T13:41:32Z,What's the track shifter?
1295971437,5027,saintmatthieu,2023-08-16T14:04:49Z,"`WaveTrack` will not be a `WaveChannel` anymore, is that correct ?"
1296059458,5027,Paul-Licameli,2023-08-16T15:07:08Z,"It might be nicer that way, but for now, the correctness of these transformations does not depend on sorting.

Sorting with each access may be too expensive and keeping sortedness as an invariant would need too much other review to be sure of its completeness."
1296063083,5027,Paul-Licameli,2023-08-16T15:09:53Z,"Wherever clips are iterated before, they will be iterated in the same sequence through this new layer of API.  That is more conservative, and one less source of surprising behavior changes."
1296068707,5027,Paul-Licameli,2023-08-16T15:14:09Z,"It is still possible to make such tracks, but consider it “undefined behavior” as this huge code restructuring is happening in stages.  I have told QA not to test such cases and not to worry about preserving behavior.

Ultimately, there will be just one WaveTrack with “wide” clips each storing a vector of sequences, possibly more than one.  No longer any correspondence of WaveClips between two WaveTracks.
"
1296074080,5027,Paul-Licameli,2023-08-16T15:18:19Z,Maybe.  Indeed the next PR changes this again.
1296082790,5027,Paul-Licameli,2023-08-16T15:25:01Z,Or rather the next planned pR
1296091712,5027,Paul-Licameli,2023-08-16T15:31:42Z,"WaveChannelInterval IS the mono API for the rest of the world that uses WaveTrack.

The next draft PR gives it a GetFloats member function and eliminates some calls of GetClip.  Look ahead at it if you wish."
1296093308,5027,Paul-Licameli,2023-08-16T15:32:55Z,I thought there was already too much diff but I might add a commit to rename that
1296095512,5027,Paul-Licameli,2023-08-16T15:34:41Z,Default construction of built in integral types is always the zero
1296098334,5027,Paul-Licameli,2023-08-16T15:36:37Z,Think again.  Each effect class has a header file that isn’t included anywhere else but its  implementation.  So how do any of them work?  Put a breakpoint in the constructor and figure it out.
1296106629,5027,Paul-Licameli,2023-08-16T15:43:12Z,"There is post processing to restore clip boundaries, remapped by the time stretch.

The logic for this is unfortunately replicated in SBSMSEffect, Nyquist, and EQ rather than having a unified implementation applied to all effects.

I became aware of this problem in other refactoring but decided not to address it.  The scope of the restructuring is already big enough."
1296110266,5027,Paul-Licameli,2023-08-16T15:46:05Z,See the Finalize member function
1296114220,5027,Paul-Licameli,2023-08-16T15:49:21Z,"The Selected boolean was in Track but is now instead in the channel group Info  structure.

This was accomplished much earlier in this release cycle.

But Vitaly’s great import export refactoring, which I never did review completely, developed somewhat independently of my work and so it reintroduced one of the unnecessary loops that I had eliminated."
1296117056,5027,Paul-Licameli,2023-08-16T15:51:39Z,"Track names were another thing formerly duplicated in channels of a stereo track. I eliminated the duplicate data and the need to keep channels consistent.

Likewise rate, gain, pan.  Things really to be associated with the stereo track as a whole, not with one channel of it."
1296125573,5027,Paul-Licameli,2023-08-16T15:58:26Z,"Code before this change was certainly not iterating interval-major.  I don’t understand you.


"
1296129365,5027,Paul-Licameli,2023-08-16T16:01:29Z,"A thing involved in implementing drags of clips but also of MIDI track data in other subclasses of the abstract base.

Also movement of labels.  There are certain menu commands that you can bind to keystrokes for shifting track data left and right.  @drbailes cares a lot about maintaining this non graphical UI.
"
1296132754,5027,Paul-Licameli,2023-08-16T16:03:18Z,In future it will contain WaveChannels and not be a WaveChannel.  But things are transitioning to that in stages.
1296141150,5027,Paul-Licameli,2023-08-16T16:10:31Z,You may remember the other recent work to disallow mismatch of rates across channels.
1296895613,5027,saintmatthieu,2023-08-17T08:56:02Z,"All makes sense, thanks."
1296912289,5027,saintmatthieu,2023-08-17T09:10:19Z,"Ok, got confused by the looks of it and forgetting that `track` itself really just is a channel (so far)."
1499188139,5965,saintmatthieu,2024-02-22T12:45:11Z,What is this for?
1499541354,5965,saintmatthieu,2024-02-22T16:36:15Z,The change on this particular line isn't needed.
1499543595,5965,saintmatthieu,2024-02-22T16:37:27Z,Same here (for the sake of clarity)
1500375041,5965,saintmatthieu,2024-02-23T09:00:46Z,"I missed to update that comment in the pitch-shift PR, you may want to complete it."
1500392924,5965,saintmatthieu,2024-02-23T09:17:42Z,"It should be the other way round, shouldn't it? Namely the `const` method has the implementation, and the non-const one const-casts. Otherwise there is no guarantee that your const method really doesn't modify your object.
I tried it, to make sure I wasn't overlooking something, you may copy-paste:
```cpp
auto WaveTrack::Interval::GetCutLines(WaveTrack& track) -> IntervalHolders
{
   IntervalConstHolders constResults =
      const_cast<const Interval&>(*this).GetCutLines(
         const_cast<const WaveTrack&>(track));
   IntervalHolders results(constResults.size());
   std::transform(
      constResults.begin(), constResults.end(), results.begin(),
      [](const auto& p) { return std::const_pointer_cast<Interval>(p); });
   return results;
}
```"
1500401327,5965,saintmatthieu,2024-02-23T09:25:29Z,"Does the use of a shared pointer mean that note intervals may survive a note track? If we are sure it's not, using a `const NoteTrack&` would convey this information (and be more economic)."
1500428400,5965,Paul-Licameli,2024-02-23T09:49:36Z,Mistakenly added
1500429705,5965,Paul-Licameli,2024-02-23T09:50:37Z,I was thinking of moving it to a nonmember function in wavetrackutilities
1500429975,5965,Paul-Licameli,2024-02-23T09:50:51Z,Ditto
1500499022,5965,saintmatthieu,2024-02-23T10:53:19Z,"This crashes. `iter` must not outlive the interval created by `RightmostOrNewClip`.
Looking for other places that use this faulty pattern, but a solution that prevents compilation of these would of course be ideal."
1500516917,5965,saintmatthieu,2024-02-23T11:11:00Z,"I'm thinking that if `ChannelGroup::IntervalIterator<IntervalType>::mpGroup` were a weak pointer rather than a naked pointer, then
```cpp
std::shared_ptr<IntervalType> operator *() const
      {
         if (!mpGroup || mIndex >= mpGroup->NChannels())
            return {};
         return mpGroup->template GetChannel<IntervalType>(mIndex);
      }
```
at least would return a nullptr, not garbage, and this could be checked by the user. If the user doesn't do the check, we still have a crash, but at least it could help debugging?"
1500535295,5965,saintmatthieu,2024-02-23T11:27:48Z,Couldn't find another usage that might have this problem.
1500594103,5965,saintmatthieu,2024-02-23T12:30:30Z,`pRight` is not used anymore.
1500613043,5965,saintmatthieu,2024-02-23T12:47:46Z,"I remember from your explanation yesterday that you now needed to split the cloning implementation in two, sort of, but I can't remember why, if you could help me remember and understand this change."
1500714591,5965,Paul-Licameli,2024-02-23T14:07:42Z,"What steps exactly reproduce the crash?
"
1500995046,5965,Paul-Licameli,2024-02-23T17:51:23Z,"Avoids violating some `IsLeader()` assertions.  
"
1500996235,5965,Paul-Licameli,2024-02-23T17:52:06Z,"Put wave tracks into the temporary Tracklist objects before doing other things with them, while they are still not yet wide tracks.

"
1501217444,5965,Paul-Licameli,2024-02-23T22:01:56Z,"I don't understand -- delete the comment?  Or complete it, how?

Or you can do that as you will in master.
"
1501221580,5965,Paul-Licameli,2024-02-23T22:08:22Z,"I don't really agree.  It is not too hard by inspection of the non-const function to see that it doesn't change any data structure directly, but just exposes non-const pointers.  This pattern of the const calling the non-const with a cast is a common enough idiom.  The total lines of code is less as I did it.
"
1501224266,5965,Paul-Licameli,2024-02-23T22:10:35Z,"I like it as I wrote it.  Less is assumed about lifetimes of things this way.  Maybe intervals would survive.

I had reasons to rewrite WaveTrack::Interval to hold shared pointers, not references.  But I admit, there, the pointers are to WaveClip objects, not the track.
"
1501224673,5965,Paul-Licameli,2024-02-23T22:11:13Z,"Never mind, I understand the problem, which happened not to crash on the debug macOS build, but that was an ""accident.""
"
1501224732,5965,Paul-Licameli,2024-02-23T22:11:20Z,ok
1502304287,5965,saintmatthieu,2024-02-26T09:41:11Z,Do the const-cast in the direction I propose and no inspection is needed anymore but that of the const-cast of the return type. Then the real implementation may grow and there still won't be a need for inspection. Your arguments not to apply this suggestion aren't solid.
1502440641,5965,Paul-Licameli,2024-02-26T11:15:41Z,"No.
"
1505645434,5965,saintmatthieu,2024-02-28T09:36:42Z,"The reparenting is going to happen on the pre-condition that `index < mAttachments.size() - 1`, which means that,  if `mAttachments.size() == 2`, calling `Erase(parent, 0)` will reparent the remaining attachment but not `Erase(parent, 1)`. I still don't understand why reparenting is necessary, but this looks worth being pointed out."
1505769902,5965,saintmatthieu,2024-02-28T11:04:01Z,not used
1505784110,5965,saintmatthieu,2024-02-28T11:15:51Z,Shouldn't the modification `this->SetLinkType(LinkType::None);` be undone here?
1505796220,5965,saintmatthieu,2024-02-28T11:26:24Z,"Great to see these gone!
I was expecting this commit to justify the previous one, a67b7aded083eea4a3fbdfb455e95801e49a60f6, but does it, actually?"
1506354952,5965,Paul-Licameli,2024-02-28T17:49:29Z,"It is intentionally not stated as a precondition.

The idea of reparenting is that each attachment is informed when its numerical slot in the array changes.  There is no change for those before `index`.
"
1506358843,5965,Paul-Licameli,2024-02-28T17:52:52Z,"Precisely not!

The tentative stereo channel pair (as indicated by the ""leader"" attribute) is discovered to be ineligible to merge and so two mono tracks remain.
"
1506360836,5965,Paul-Licameli,2024-02-28T17:54:17Z,"Yes, it simplified the job, avoiding even more const-casting in WaveTrack.cpp
"
1512621233,5965,saintmatthieu,2024-03-05T10:51:59Z,"Ouch, of course ..."
847708694,2801,Paul-Licameli,2022-04-11T20:27:38Z,"The steps aren't exactly as I described before, but that is all right.

Did you verify that each step in the transformation preserves the persistency of settings?

Maybe the second and fourth steps could be combined as the third step of three.

Because you never construct the Validator in the second commit -- it isn't necessary to make mSettings a reference and then change it to a value in the last step.
"
847709728,2801,Paul-Licameli,2022-04-11T20:29:01Z,"My only objection is that this assignment to EffectEcho::Validator::mSettings is not needed, because it was already done in the construction of it.  Really the settings argument of this function isn't needed any more.
"
848158592,2801,pietro68,2022-04-12T08:45:43Z,"I tried verifying persistency of settings. It happens only at the last step. 
In our previous discussion I noted that it did not happen in the first step and you said it was maybe not worth fixing, but I could at least try to fix it in the 2nd and 3rd steps.

I must be sure that I understood you right: you are suggesting that I could combine step 2 and 4 into a 3rd step; the pre-existing 3rd step would then become the second. Is that correct?

I modified the second commit so to have mSettings a value right from the start (will be observable in the next force-push)"
848219269,2801,pietro68,2022-04-12T09:40:10Z,That's right! the correction of this will be visible in the next force-push.
848328331,2801,Paul-Licameli,2022-04-12T11:30:45Z,"I still see the unnecessary assignment to mSettings.
"
848381334,2801,pietro68,2022-04-12T12:32:55Z,"Did you look at the latest force-push?

there is an assignment `mSettings = GetSettings(access.Get());` in `EffectEcho::PopulateOrExchange` only at intermediate steps, but I guess that it is needed.

in the last step there is no such assignment, in either  `EffectEcho::PopulateOrExchange` or `EffectEcho::Validator::PopulateOrExchange`
"
850310212,2801,Paul-Licameli,2022-04-14T10:28:05Z,"I reverse my previous comment at this line.

Do NOT put the validator into its final form at this commit.  Make mSettings a reference at this step.  Change it to no reference only at the last step."
850310889,2801,Paul-Licameli,2022-04-14T10:29:03Z,Do NOT add these lines in the second commit.  Only at the last commit.
850312227,2801,Paul-Licameli,2022-04-14T10:30:58Z,"Again add this only at the last commit.

GetSettings should not be available until then.  The point where the echo settings move out of the effect and I to EffectSettings is only then. "
850312986,2801,Paul-Licameli,2022-04-14T10:32:12Z,Use EffectInstanceWithSampleRate to simplify.  Remove the member function and variable for mSampleRate.  Just inherit them.
850313597,2801,Paul-Licameli,2022-04-14T10:33:07Z,settings is an unnecessary variable name
850314912,2801,Paul-Licameli,2022-04-14T10:35:09Z,"Do NOT name and the settings argument in step 3.  Add that only at step 4.

And step 3, static_cast mProcessor to EffectEcho and use its mSettings.  At step 4, remove those lines, as you must to compile without the mSettings member.  Only then use the arguments."
850315378,2801,Paul-Licameli,2022-04-14T10:35:53Z,Ok this is now what I expect for step 3.
850316029,2801,Paul-Licameli,2022-04-14T10:36:51Z,Ok just that the argument name settings isn’t needed at this step
850319239,2801,Paul-Licameli,2022-04-14T10:41:41Z,"The base class should change only at this step.

EffectWithSettingsBase won’t be used, so you can interactively rebase, removing the commit from me.

This step causes a MakeSettings member to be defined and called.  You must understand that it is not correct to use GetSettings until this point, because the generated MakeSettings should not be used either before this.  Only when the mSettings member of the effect is removed, must these other changes be made too, to keep all steps of the transformation correct."
850371881,2801,pietro68,2022-04-14T11:59:38Z,"ok, done"
850372342,2801,pietro68,2022-04-14T12:00:14Z,"I commented it out + put a TODO comment ""uncomment at final step"""
850372402,2801,pietro68,2022-04-14T12:00:21Z,"I commented it out + put a TODO comment ""uncomment at final step"""
850381645,2801,pietro68,2022-04-14T12:13:28Z,"ok, done"
850381862,2801,pietro68,2022-04-14T12:13:42Z,done
850383119,2801,pietro68,2022-04-14T12:15:23Z,"ok, done"
850383695,2801,pietro68,2022-04-14T12:16:14Z,"ok, removed"
850508369,2801,pietro68,2022-04-14T14:33:01Z,"Alright, commit with EffectWithSettingsBase removed.
The other point is understood now."
1324750269,5193,Paul-Licameli,2023-09-13T16:05:09Z,"I might say ""channels"" not ""tracks"" in this name
"
1324754212,5193,Paul-Licameli,2023-09-13T16:08:36Z,"If you rebase onto my fixup commit https://discord.com/channels/@me/840616766099161088/1151545897302360105, and resolve the conflict, then you will understand that the `push_back` above should be pulled out of the loop.  `captureSequences` must contain leader tracks only, and each one only once.  Then test that recording to stereo tracks still works.
"
1324754593,5193,Paul-Licameli,2023-09-13T16:08:54Z,"That completes review of this one commit of the draft.
"
1326646322,5193,Paul-Licameli,2023-09-15T00:22:50Z,Indent
1326650399,5193,Paul-Licameli,2023-09-15T00:31:00Z,That should be `track->GetName()`
1326650835,5193,Paul-Licameli,2023-09-15T00:31:54Z,Just to make no assumptions about the continued validity of the old track pointer
1326658724,5193,Paul-Licameli,2023-09-15T00:47:54Z,Your commit comment suggest that you think this is redundant. I think you are right after all.  I overlooked other details.  But the extra insurance is harmless.
1326667282,5193,Paul-Licameli,2023-09-15T01:05:14Z,Thank you for making me look up this standard algorithm and refresh my memory of it.
1327277637,5193,vsverchinsky,2023-09-15T13:17:58Z,"Ah, overlooked that merge conflict, thanks!"
1329153951,5193,Paul-Licameli,2023-09-18T18:52:51Z,"Keep this TODO comment please, to remind me later to remove the line below
"
1329157466,5193,Paul-Licameli,2023-09-18T18:56:52Z,"Still unresolved -- don't use `mpData->pTrack` after `SwapChannels` but use `track`
"
1329183226,5193,Paul-Licameli,2023-09-18T19:24:33Z,"return what?
"
1329188043,5193,Paul-Licameli,2023-09-18T19:30:02Z,"Very good:  we start to eliminate `MakeMultiChannelTrack` except as an implementation detail of Track.cpp.

I would declare a variable to eliminate repetition of `*tracks.rbegin()`
"
1329192748,5193,Paul-Licameli,2023-09-18T19:35:34Z,"You copy-pasted an old mistake in the words of the comment.  Should be ""new"" not ""changed""
"
1329213428,5193,Paul-Licameli,2023-09-18T19:58:28Z,"I made a mistake here at 03c68afc55b2020b0e8086aa288090b4e5ea8ca2, neglecting the provisions for more than two channels (maybe in future).

Correct my mistake.  Change the condition back to
`if (baseTrackName.empty())`
"
1329216367,5193,Paul-Licameli,2023-09-18T20:01:55Z,"The comment before this deletion should be deleted too now
"
1329256697,5193,Paul-Licameli,2023-09-18T20:41:07Z,"You did what I asked, removing this and instead creating a ""wide"" track (as a TrackList) through the factory.

But now I see that this makes an unintended change of behavior.  The call of `WaveTrack::Init()` in `EmptyCopy` doesn't happen, and so certain information of `first` is no longer copied into the new track -- things such as the color, and whatever else in future might be attached to the `ChannelGroup` client data site.

So the new `Create` function should take `first` as another argument, which could default to nullptr, and from which it copies information as in `EmptyCopy`.

Or instead of that -- I think it's nicer -- add `std::optional<size_t> oNChannels = {}` as an argument in `EmptyCopy` and call that.

"
1329259771,5193,Paul-Licameli,2023-09-18T20:44:56Z,"This no longer needs to be a loop.  Just do this once on `mix`.
"
1329262169,5193,Paul-Licameli,2023-09-18T20:47:36Z,"In the present transitional state of the source tree, this needs to be `ReallyGetChannelIndex`, I think"
1329264320,5193,Paul-Licameli,2023-09-18T20:50:04Z,"Duplicate these comments before the overload defined above.
"
1329269810,5193,Paul-Licameli,2023-09-18T20:54:23Z,"Duplicate this assertion in a `@pre` comment.
"
1329279138,5193,Paul-Licameli,2023-09-18T21:05:26Z,"Don't delete the comment!
"
1329280276,5193,Paul-Licameli,2023-09-18T21:06:48Z,"Move the `MonoToStereo` call after the `reset`, consisntently with the comment.

Did you hit a breakpoint here in the debugger?  I think you need to do what I wrote to avoid putting the `TrackList` objects into an inconsistent state.
"
1329281522,5193,Paul-Licameli,2023-09-18T21:08:21Z,"It should also be asserted, and commented with `@pre`, that `this` has null for `GetOwner()`.
"
1329312677,5193,Paul-Licameli,2023-09-18T21:41:17Z,"""Builds a WaveTrack and places"""
1329920394,5193,Paul-Licameli,2023-09-19T10:39:04Z,"""Flushes"" and ""moves"", consistent verb forms
"
1329920851,5193,Paul-Licameli,2023-09-19T10:39:33Z,"ditto
"
1329952166,5193,Paul-Licameli,2023-09-19T11:11:57Z,"Why do you make bounds checks on this unsigned index variable only in ImportFFmpeg.cpp but not in the other place that use `ForEachChannel`?  Should there be checks in the other places?
"
1329992362,5193,vsverchinsky,2023-09-19T11:52:34Z,"You are right, the problem is that `WaveTrack::Duplicate` copies both channels into new list, but we need only left"
1329995063,5193,vsverchinsky,2023-09-19T11:54:48Z,Then `//! @pre !GetOwner()` only is enough precondition as it implies that `NChannels() == 1`
1330003562,5193,vsverchinsky,2023-09-19T12:02:22Z,Thanks!
1330037918,5193,vsverchinsky,2023-09-19T12:20:38Z,"I don't think so, I need that to preserve existing loop exit condition.
`const auto nChannels = std::min(sc->CodecContext->GetChannels(), sc->InitialChannels);`
Which formally is not same as `mStreams.size()`, but `nChannels` was used as an upper bound in the original loop"
1330200170,5193,Paul-Licameli,2023-09-19T14:10:51Z,"""and places""
"
1330203388,5193,Paul-Licameli,2023-09-19T14:13:00Z,"In this commit's comment, ""Eliminate""
"
1335040294,5193,Paul-Licameli,2023-09-23T16:30:19Z,"Thank you for figuring out what I omitted in recording.

All of this looks like the right idea to me.  Why do you call it only an ""attempt""?  Did you observe that something still doesn't work?
"
932062123,3258,crsib,2022-07-28T10:39:48Z,I am really confused by the naming. I would've never expected such a behavior from a function called Reserve and it has not documentation provided otherwise.
932065689,3258,crsib,2022-07-28T10:43:59Z,And it is even more confusing that Consume does nothing while Reserve consumes
932067878,3258,crsib,2022-07-28T10:46:38Z,"After looking into implementation I say that I do not understand why this is called a sink. At very least, please document the protocol, as the implementation of the protocol was unexpected to me."
932068251,3258,crsib,2022-07-28T10:47:04Z,Please document what this method is supposed to do
932068331,3258,crsib,2022-07-28T10:47:09Z,Please document what this method is supposed to do
932071267,3258,crsib,2022-07-28T10:50:33Z,Is it intentional that Flush is kept out of the protocol?
932073677,3258,crsib,2022-07-28T10:53:33Z,Should we have this commit in a different PR that could be merged earlier?
932076513,3258,crsib,2022-07-28T10:57:01Z,So probably it should be called `Acknowledge`? `Advance` usually has skip semantics.
932077878,3258,crsib,2022-07-28T10:58:47Z,But should the source know about the user?
932085722,3258,crsib,2022-07-28T11:08:27Z,"`Source`, on the other hand, seems to do what I would expect from source (well, from the Producer, but this is minor)."
932086961,3258,crsib,2022-07-28T11:09:59Z,"I would enjoy to see both `isGenerator` and `isProcessor` to be const, but that is very minor"
932090461,3258,crsib,2022-07-28T11:14:28Z,"If a C++ exception will be thrown by a subclass - the process will terminate. But I do not say, that this is bad :-)"
932092334,3258,crsib,2022-07-28T11:17:01Z,And I agree that it now implies usage of GuardedCall for the code reviewer.
932111015,3258,crsib,2022-07-28T11:40:18Z,Oh I see now why `ProcessFinalize` is now `noexcept`
932114104,3258,crsib,2022-07-28T11:44:16Z,I think that the implementation of the host should handle any exception that happened inside the host code. I am pretty sure that plugins themselves cannot throw a C++ exception :-)  
932114901,3258,crsib,2022-07-28T11:45:13Z,Stage is good.
932234606,3258,crsib,2022-07-28T13:41:35Z,Please document `bound`
932398438,3258,Paul-Licameli,2022-07-28T15:35:44Z,Yes
932403666,3258,Paul-Licameli,2022-07-28T15:40:41Z,"It is optional.

I agree this placement of progress update responsibility may not seem cleanest, but this is what the transformation accomplished while preserving the behavior.

I didn’t figure out a better way yet.  I think an abstract stage object might report remaining latency, and a routine running the pipeline might watch that (those) value(s) from the stage(s) and the Remaining() of the ultimate source, and handle progress update instead."
932406746,3258,Paul-Licameli,2022-07-28T15:43:40Z,"This preserves what was there.  Which I wrote years ago.  AudacityException, only, is the root of things we can catch and handle at the event loop."
932408402,3258,Paul-Licameli,2022-07-28T15:45:16Z,"In the last commit, EffectState becomes a subclass of Source, and the function becomes an override, with the understanding that it “inherits” all documentation for that."
932416311,3258,Paul-Licameli,2022-07-28T15:52:56Z,"Just moving the indicator update? But why?
"
934396247,3258,crsib,2022-08-01T10:51:50Z,"Not critical I think, but making `advancedPositions` to be a class member may help to reduce the load on memory allocator a bit."
934470308,3258,crsib,2022-08-01T12:27:03Z,Should it be final?
934520082,3258,Paul-Licameli,2022-08-01T13:19:41Z,"Or even our friend `alloca`.

But avoidance of heap allocations is not very important for destructive effect processing.
"
934522454,3258,Paul-Licameli,2022-08-01T13:22:07Z,"For now it can be.  There might be future need to make this an abstract base class, if we figure out multi-core.  And what is now in EffectStage::Produce would instead become another Task viewing its upstream and down as Source and Sink.

But I haven't arrived at those details yet.
"
934527096,3258,crsib,2022-08-01T13:26:40Z,"Yeah, I tend to forget that this is destructive path only :-)"
637226816,918,shoogle,2021-05-21T20:53:16Z,"Nice instructions!

It's a pain to update instructions via PRs so do you think we could put these in the [GitHub Wiki](https://github.com/audacity/audacity/wiki) instead? We could put a link to the Wiki page in README.md."
637233364,918,shoogle,2021-05-21T21:08:16Z,"I personally think it is neater to put all `RUN` commands in a separate Bash script that gets copied into the Docker image. See this [example](https://github.com/musescore/MuseScore/blob/b30a63ff3822869cf9186bd92e1b9dc6983238a9/build/Linux%2BBSD/portable/x86_64/Dockerfile#L4-L5) for MuseScore, and also note the surrounding comments about how to reduce the image size (and how not to do it). [Here](https://github.com/musescore/MuseScore/blob/b30a63ff3822869cf9186bd92e1b9dc6983238a9/build/Linux%2BBSD/portable/Recipe#L116-L119) is where the tidying up happens."
637235144,918,shoogle,2021-05-21T21:12:22Z,"Switching to a Bash script would also allow you to [use arrays](https://github.com/musescore/MuseScore/blob/b30a63ff3822869cf9186bd92e1b9dc6983238a9/build/Linux%2BBSD/portable/Recipe#L48-L68) to avoid endless backslashes. You can also [add comments](https://github.com/musescore/MuseScore/blob/b30a63ff3822869cf9186bd92e1b9dc6983238a9/build/Linux%2BBSD/portable/Recipe#L24) in arrays, unlike with backslashes."
637238436,918,shoogle,2021-05-21T21:19:19Z,"Here's another place when an array would be ideal:

```bash
cmake_options=(
    -G ""Unix Makefiles""
    -Daudacity_lib_preference=system
    -Daudacity_obey_system_dependencies=On
    -Daudacity_use_wxwidgets=local # sorry Linux maintainers!
)

cmake ""${cmake_options[@]}"" ../audacity
```"
637244074,918,shoogle,2021-05-21T21:29:56Z,"This table is going to be a pain to maintain in Markdown. I recommend linking to the relevant CMakeLists.txt where the options are defined, or if they are in separate files then just tell people to use the `cmake -LH` option.

If you really want a separate list, I recommend putting it in an online spreadsheet and linking to it from here. I'll PM you with more details about this."
637246360,918,JamesCrook,2021-05-21T21:36:03Z,Why pch disabled?
637247405,918,JamesCrook,2021-05-21T21:38:57Z,Is brew now a prerequisite on macOS?
637247832,918,shoogle,2021-05-21T21:40:14Z,"This is more information that would be better in a spreadsheet.

Ideally the CMake configuration would simply fail with an appropriate error message if the correct library version is not available:

```
Error: expat version 2.2.9 or later is required. Please install it with this command:

  $ sudo apt install libexpat1-dev
```

You can give the command or link to the Wiki page that has the command. This [PR for MuseScore](https://github.com/musescore/MuseScore/pull/6262) does something similar if Qt is not installed."
637248567,918,JamesCrook,2021-05-21T21:42:05Z,"We should refer to the wiki for extended instructions for things like signing and notarization, and perhaps for portable version too."
637249584,918,JamesCrook,2021-05-21T21:45:02Z,"Wiki could say more about this (pkg-cfg issues), so as not to clutter up BUILDING.md with info about non standard builds."
637458312,918,Be-ing,2021-05-22T22:37:08Z,"```suggestion
   $ cmake -Daudacity_use_ffmpeg=loaded ../audacity
```
Unix Makefiles is the default generator on Linux and macOS. There is no need to specify it explicitly (I personally use Ninja though)."
637458385,918,Be-ing,2021-05-22T22:38:00Z,Thank you for documenting these.
637458497,918,Be-ing,2021-05-22T22:39:58Z,"```suggestion
2. **portaudio-v19**: Audacity currently uses some private APIs (#871), so using system portaudio is not yet possible.
```"
637509732,918,crsib,2021-05-23T08:32:40Z,We had a specific request that there is a manual available in the source code. But I will put it on the wiki page as well after the branch has merged
637509756,918,crsib,2021-05-23T08:33:02Z,"Nice catch, I will look into it on Monday"
637510000,918,crsib,2021-05-23T08:35:08Z,"Yeah, that why I have called it ""most notable"" LOL

I guess I will move it in a separate doc a rewrite it a bit. Also, VS code makes such tables really easy to format :-)"
637510316,918,crsib,2021-05-23T08:37:23Z,">This is more information that would be better in a spreadsheet.

We have a spreadsheet, but I guess we need an ""offline"" version as well. I will move this table into a separate doc under the `linux` directory. "
637510429,918,crsib,2021-05-23T08:38:30Z,"That is a good question, I don't know :-) It is disabled for all the CI builds for some reason, hurts Paul sometimes "
637510432,918,JamesCrook,2021-05-23T08:38:33Z,`[some private APIs](https://github.com/audacity/audacity/issues/871)` ?
637510657,918,crsib,2021-05-23T08:40:27Z,"Absolutely not. But it is easier to install CMake using brew.

For Conan - pip3 is always installed with the latest versions of macOS"
637510955,918,crsib,2021-05-23T08:42:20Z,"Yeah, I'll move most of it under `linux/minimal_libraries_versions.md`.

We had a request from the maintainers that we keep the build docs in source tree"
637512774,918,crsib,2021-05-23T08:56:58Z,An excellent point!
637520372,918,JamesCrook,2021-05-23T10:00:06Z,That sounds a good balance between 'build docs in source tree' and 'provide alternative/elaborating info outside the main doc'. 
637535390,918,Paul-Licameli,2021-05-23T12:01:46Z,"Building with PCH off requires the insertion of more #include directives to make the build pass, and those extra #includes give the honest and complete picture of dependencies with my scripts.



"
637567713,918,Be-ing,2021-05-23T16:07:15Z,I don't think it's a great idea to duplicate the content in multiple places. It is very likely one would not be updated when the other is. However a link from the wiki to this document in the code repository would be a good idea.
637570675,918,Be-ing,2021-05-23T16:30:07Z,"Also, I don't recommend using two wikis at once. If you're going to add more to GitHub Wiki, I suggest moving everything from MediaWiki and closing the MediaWiki to edits."
637571616,918,Be-ing,2021-05-23T16:37:09Z,I see `buildsystem=1` listed in the examples above but it is not documented here. What does that option do?
637810354,918,crsib,2021-05-24T09:24:18Z,"This activates so-called ""Legacy Build System"" in XCode. Their new system is very confusing and we currently have odd issues with it."
637826179,918,crsib,2021-05-24T09:50:40Z,I'd rather prefer to have it explicit
637826724,918,crsib,2021-05-24T09:51:39Z,"We should, but not in this PR"
809474337,2565,Paul-Licameli,2022-02-17T21:16:53Z,"""an"""
809474676,2565,Paul-Licameli,2022-02-17T21:17:27Z,"Wrong comment
"
809476763,2565,Paul-Licameli,2022-02-17T21:20:41Z,"Maybe define pWind, then assign it to pConstWind, and get rid of the ugly C-style pointer cast
"
809478101,2565,Paul-Licameli,2022-02-17T21:22:46Z,"Let's get rid of the rest of EXPERIMENTAL_NOTEBOOK in the source tree.  That includes the line in Experimental.cmake.  The rest of the source code isn't available to turn it on again even if we wanted to.
"
809479487,2565,Paul-Licameli,2022-02-17T21:24:54Z,"Put extra parentheses around this condition to suppress warnings (from clang at least).  Or rewrite as a for loop.
"
809481379,2565,Paul-Licameli,2022-02-17T21:27:38Z,"Notice that the bottom toolbar docking area is part of the right side of the container window, therefore it will be narrower when the effects panel shows, rather than limiting the vertical extent of that panel.

Not right or wrong -- just saying we understand the consequence.
"
809482778,2565,Paul-Licameli,2022-02-17T21:29:50Z,Clean this up as a modern `static_cast` while you are visiting the neighborhood.
809483525,2565,Paul-Licameli,2022-02-17T21:30:50Z,"Tab order reminds me that we may need to check out how tabbing now works in the presence of the new window.  @DavidBailes might have opinions.
"
809484671,2565,Paul-Licameli,2022-02-17T21:32:24Z,"It would look a little nicer to me, to use a variable to eliminate the repeated calls to `window.GetTrackListWindow()` and `window.GetContainerWindow()`"
809485709,2565,Paul-Licameli,2022-02-17T21:33:59Z,"The only new #include in this PR, and it's a wxWidgets header.  No new dependencies among Audacity's own source code files.  That is good.
"
809864348,2565,Paul-Licameli,2022-02-18T10:17:24Z,"What happens if the user changes the theme?  Do you need to add to `ProjectWindow::OnThemeChange` to reset this color?  Or, is the background color in fact not seen because everything else in the window hides it?"
809867161,2565,Paul-Licameli,2022-02-18T10:20:32Z,"Another background color you may need to update with theme changes
"
809868743,2565,Paul-Licameli,2022-02-18T10:22:38Z,"Is Unsplitting enough without the call to Hide?
"
809869974,2565,Paul-Licameli,2022-02-18T10:24:16Z,"Is the explicit Show() needed?
"
809870585,2565,Paul-Licameli,2022-02-18T10:24:59Z,"What happens if you try to drag the separator?  Is that not wanted, and do you need to Bind and Veto another event?
"
809910980,2565,vsverchinsky,2022-02-18T11:21:07Z,"Thanks, will fix"
809911081,2565,vsverchinsky,2022-02-18T11:21:16Z,"Thanks, will fix"
809911263,2565,vsverchinsky,2022-02-18T11:21:35Z,"Makes sense, will fix"
809911402,2565,vsverchinsky,2022-02-18T11:21:48Z,Will do
809911726,2565,vsverchinsky,2022-02-18T11:22:20Z,"No need, I'll rewrite the loop"
809912440,2565,vsverchinsky,2022-02-18T11:23:23Z,"Not sure that understand that, bottom toolbar docking area is a sibbling of the container window, isn't it?"
809912630,2565,vsverchinsky,2022-02-18T11:23:37Z,Ok
809913357,2565,vsverchinsky,2022-02-18T11:24:46Z,Ok
809919535,2565,vsverchinsky,2022-02-18T11:34:27Z,">What happens if the user changes the theme? Do you need to add to ProjectWindow::OnThemeChange to reset this color? Or, is the background color in fact not seen because everything else in the window hides it?

In my prototype branch I had changed background color in response to the theme event, but there was no visible effect, because of the child windows. I mistakenly committed this line.

>What happens if you try to drag the separator? Is that not wanted, and do you need to Bind and Veto another event?

If I understand you correctly you saying that we don't need the separator to be draggable?"
809919754,2565,vsverchinsky,2022-02-18T11:34:46Z,"Turned out - yes, thanks"
809949435,2565,Paul-Licameli,2022-02-18T12:20:29Z,"I ask whether it is intended.

maybe a limit on rightward dragging is needed."
809969950,2565,Paul-Licameli,2022-02-18T12:50:03Z,"You are right, I misread that
"
813895221,2565,Paul-Licameli,2022-02-24T13:48:24Z,unused variable
813899001,2565,Paul-Licameli,2022-02-24T13:52:38Z,"Feel free to clean up wxMin, wxMax with std::min, std::max instead
"
813901251,2565,Paul-Licameli,2022-02-24T13:54:58Z,"""among"" instead of ""between"" is better English
"
813901571,2565,Paul-Licameli,2022-02-24T13:55:15Z,"I know you just moved this comment, but fix it
"
813904640,2565,Paul-Licameli,2022-02-24T13:58:29Z,"Did you discover off by one mistakes in this function that you are also fixing?  A commit comment should say so.

Should you fix it?  Is it making small but noticeable changes in other drawing that wasnt' specified?
"
813917074,2565,Paul-Licameli,2022-02-24T14:12:00Z,"You add no calls to Bevel.  Is it used in drawing functions that were changed?

Rather than change the more widely used function, adjust the rectangle that you pass into the function in the one relevant place.
"
813919067,2565,Paul-Licameli,2022-02-24T14:14:06Z,"But I think there are no such uses that you need to adjust.
"
1365817464,5398,saintmatthieu,2023-10-19T16:23:10Z,"@Paul-Licameli this is actually not right, which is why this PR is still a draft. I couldn't figure it out before the end of the day unfortunately. Maybe you can spot what I'm doing wrong."
1366591554,5398,saintmatthieu,2023-10-20T07:36:59Z,Fixed.
1369935419,5398,Paul-Licameli,2023-10-24T10:21:38Z,"The compile on macOS doesn't let you capture a structured binding name directly in a lambda.
Another fix is to change the lambda capture below from `[&]` to `[track = track, interval = interval]`"
1369979870,5398,Paul-Licameli,2023-10-24T10:59:05Z,"`ForEachClip` might be used more consistently in these new functions, but that's not important.

Also I would redefine `ForEachClip` as an inline function, deducing the type of the argument as a template parameter, avoiding the construction of a `std::function` object.  But this is not important.

"
1369980973,5398,Paul-Licameli,2023-10-24T11:00:15Z,"Actually this is needed only for clip 0.  See the commits merged at 48154efe6d8ce8e02c570a665a31caab39786cdc.  Right channel envelopes are just ignored.
"
1370008172,5398,Paul-Licameli,2023-10-24T11:28:08Z,"This replacement for `WaveClip::ApplyStretchRatio` loses a few good things:
- Early quick exit when ratio is already 1
- pre- and post-conditions, stated in header comments, and asserted in the function
"
1370027165,5398,Paul-Licameli,2023-10-24T11:43:37Z,"Answering:  Exception safety was carefully documented for those Sequence operations precisely because exceptions are possible (otherwise it would have been `excsafety{No-Fail}`).  It is a promise that in case of exceptions, the Sequence object is restored to its prior state.

A known problem with wide wave clips (such as we have them, with the WaveTrack::Interval facade) is that strong exception safety for the individual sequences does not imply strong exception safety of the wide clip as a whole when appending or flushing.  Maybe there is success for one channel but failure for the other, and then there is no reversion of the first channel to its previous state.

I did not attempt to solve this unlikely problem for 3.4 and neither should you.  Just maybe it will happen if you record and run out of space on the drive.  There is exception handling in this case to save as much of the recording as possible rather than throw away the entire recording.  This hole in strong exception safety might mean it's one remaining way to end up with mis-aligned clips.
"
1370031873,5398,Paul-Licameli,2023-10-24T11:46:40Z,"The step `mRawAudioTempo = *mProjectTempo;` is lost in this version.  Should that be fixed?
"
1370035038,5398,Paul-Licameli,2023-10-24T11:49:20Z,"Cutlines?  Why not?

They might be preserved un-stretched.  Maybe nobody cares.
"
1370040993,5398,Paul-Licameli,2023-10-24T11:52:43Z,"Not completely like `this`.  I noticed that the new constructor of `Interval` always uses `floatSample` format.  I don't see where you change format to match the track's when inserting the new interval.

"
1370044774,5398,Paul-Licameli,2023-10-24T11:56:31Z,"More about formats:  either the argument to this function should be `float *const *` or else the format should be an argument, not assumed to be `floatSample`.  The latter solution has the appeal of more generality easily implemented, even if not yet needed.
"
1370064102,5398,Paul-Licameli,2023-10-24T12:13:34Z,"The assertions in this and the next two functions should be stated in header comments as preconditions.
"
1370348438,5398,saintmatthieu,2023-10-24T14:52:40Z,"`dst`, as a freshly-created empty clip, doesn't have project tempo set yet. It will be when inserted with `WaveTrack::InsertInterval`."
1370355728,5398,saintmatthieu,2023-10-24T14:57:26Z,"Preserving them unstretched would probably be the best, but then when expanding they should be stretch-rendered to the stretch ratio of the parent clip, meaning re-introducing the possibility of stretch-rendering to a ratio other than 1.
Also, that should be done at interval level to ensure joint-stereo, (at least until wide clips are a reality), and I'm not sure how this would look like.
So yeah, hoping nobody will care."
1370550065,5398,Paul-Licameli,2023-10-24T17:05:27Z,"I see.  Consider this point resolved.
"
1370555406,5398,Paul-Licameli,2023-10-24T17:10:00Z,"This is a design change.  Make sure designers agree.

Expansion of cutlines is done by WaveClip::Paste in WaveClip::ExpandCutLine.  Paste fails if ratios don't match.

So I think the complete solution would be correct remapping of cutlines along the timeline at the time stretch is applied, but then computing the stretch of the cutline could be delayed until just before the Paste.
"
1370608744,5398,saintmatthieu,2023-10-24T17:56:08Z,Absolutely - I've been overseeing this argument. Addressing ...
1370611388,5398,Paul-Licameli,2023-10-24T17:58:37Z,"""Overseeing"" or ""overlooking""?  (Not the same...)
"
1370618523,5398,Paul-Licameli,2023-10-24T18:05:46Z,https://www.jiosaavn.com/lyrics/im-looking-over-a-four-leafed-clover-lyrics/FhIgBjpjBAE
1370624951,5398,saintmatthieu,2023-10-24T18:08:49Z,"> This is a design change. Make sure designers agree.

@dozzzzer logged a follow-up ticket that still awaits Martin's (or Leo's, but he's on vacation) input."
1370625801,5398,Paul-Licameli,2023-10-24T18:09:00Z,"https://www.youtube.com/watch?v=w1n5tShQpGM
"
1370638645,5398,saintmatthieu,2023-10-24T18:14:16Z,Trying ... 🤞 
1374628854,5398,Paul-Licameli,2023-10-27T14:00:57Z,"I think you may need to swap the two lines above to get correct results in all cases.  Because the function move envelope points after the collapsed part leftward.
"
1374630945,5398,saintmatthieu,2023-10-27T14:02:40Z,"I wouldn't expect that, but to be on the safe side I'll push that change."
802219407,2536,Paul-Licameli,2022-02-09T02:29:52Z,"""expectedValue"""
802220147,2536,Paul-Licameli,2022-02-09T02:31:46Z,"""integers"""
809895920,2536,Paul-Licameli,2022-02-18T10:59:12Z,"You might lift the common assignment of `TEST_DIR` before the `if()`
"
809899064,2536,Paul-Licameli,2022-02-18T11:03:36Z,"""source files""
"
809900918,2536,Paul-Licameli,2022-02-18T11:06:19Z,"It may be useful to add `PROPERTIES prop1 ...` and pass those to: https://cmake.org/cmake/help/latest/command/set_tests_properties.html?highlight=set_tests_properties

"
809901235,2536,Paul-Licameli,2022-02-18T11:06:48Z,And here are all the possible properties https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#test-properties
809903941,2536,Paul-Licameli,2022-02-18T11:10:45Z,"... unless one uses one of the properties:
* FAIL_REGULAR_EXPRESSION
* PASS_REGULAR_EXPRESSION
* SKIP_REGULAR_EXPRESSION
* SKIP_RETURN_CODE
* WILL_FAIL
"
809904752,2536,Paul-Licameli,2022-02-18T11:11:54Z,"Maybe the function will have other keyword arguments to abbreviate other combinations of properties.  Don't ask me yet, what exactly.  Experience will tell what is useful.
"
809906280,2536,crsib,2022-02-18T11:13:58Z,I have a very strong opinion that unit test should return 0 on success
809906518,2536,Paul-Licameli,2022-02-18T11:14:21Z,"Catch2 needs to link something?  I thought it is just one amalgamated header file.  Or is that precisely what this line does, just adding in include path.
"
809906899,2536,crsib,2022-02-18T11:14:56Z,This can be easily added in the future in case we find a need for any additional ctest properties 
809907376,2536,Paul-Licameli,2022-02-18T11:15:35Z,"""proper"""
809907599,2536,crsib,2022-02-18T11:15:53Z,"""Modern"" CMake uses `target_link_libraries` for header-only libraries as well."
809910170,2536,Paul-Licameli,2022-02-18T11:19:47Z,"Will we want arguments for COMMAND that can be given to add_unit_test?

Will we ever need to reuse a common test executable with different arguments?

Should there be a lower-level CMake function taken out of this, for invoking add_test with such options?

I'm thinking we might in future need a more complicated thing like setup and cleanup of fixtures for a test or a group of tests, in which each setup or cleanup step is itself described as a ""test."" https://cmake.org/cmake/help/latest/prop_test/FIXTURES_REQUIRED.html#prop_test:FIXTURES_REQUIRED


"
809912202,2536,Paul-Licameli,2022-02-18T11:23:06Z,"I wonder if these fixes you figured out for dynamic libraries should be reused with image-compiler too.  Or have you done that already?

Maybe a common cmake function for such steps then.
"
809912950,2536,crsib,2022-02-18T11:24:09Z,"And still, I have very that if you need to it for unit tests you have serious design issues and should reconsider them. `add_unit_test` is expected to be used only to create unit tests. "
809914132,2536,Paul-Licameli,2022-02-18T11:25:55Z,"Again maybe use a common low function for add_test, and consider how to pass other command arguments and test options into it.
"
809914175,2536,crsib,2022-02-18T11:25:58Z,"They can be reused, but the image-compiler is a) rarely built, b) does not test the functionality of a library. For these reasons, it is left as-is for now."
809935079,2536,Paul-Licameli,2022-02-18T11:58:10Z,"Got it
"
1489495326,5952,LWinterberg,2024-02-14T13:50:44Z,It seems like there have been some wires crossed here - the overflow button should summon the clip context menu. Clicking on the pitch/speed numbers should summon the dialog. 
1490046022,5952,Paul-Licameli,2024-02-14T20:46:49Z,"Do not put this here.

Just put in the file where the sole call to it is.

Besides which:  this change is extraneous to what the first commit comment says.
"
1490055412,5952,Paul-Licameli,2024-02-14T20:54:22Z,"This deletion is one cause of failure of compilation of the first commit
"
1490056919,5952,Paul-Licameli,2024-02-14T20:55:38Z,"`#include <wx/gdicmn.h>` for `wxRect` is another needed change
"
1490059483,5952,Paul-Licameli,2024-02-14T20:57:47Z,"As I said, I don't like enlarging this file with the new function, but `#include <wx/frame.h>` would be needed to fix its compilation
"
1490064259,5952,Paul-Licameli,2024-02-14T21:01:47Z,"I dislike so called ""utility"" files unless the things put into them really are needed in more than one place.
"
1490083099,5952,Paul-Licameli,2024-02-14T21:21:38Z,"I could fix the first commit so it compiles -- but then the second fails to link!  You neglected to add the new files to `CMakeLists.txt`.  Also the new files should have banners.
"
1490087463,5952,Paul-Licameli,2024-02-14T21:26:35Z,"After I fix CMakeLists.txt, still, to build I must add:

```
#include <wx/window.h>
```"
1490088616,5952,Paul-Licameli,2024-02-14T21:27:52Z,"Again, I don't see the need to move the code -- but also I notice, `SelectInterval` is lost.  Intentional?
"
1490095845,5952,Paul-Licameli,2024-02-14T21:36:27Z,"I was mistaken -- I see it is used in more than one place, now that I fix CMakeLists.txt and rebuild.
"
1490147265,5952,Paul-Licameli,2024-02-14T22:33:02Z,"For me, the debug build was violating an assertion in wxWidgets, but my build didn't have debug symbols and I couldn't see wxWidgets source code.

After some trial and error, I figured out that replacing `wxColour{}` with `*wxBLACK` was a sufficient fix.
"
1490567583,5952,saintmatthieu,2024-02-15T08:05:01Z,"> SelectInterval is lost
It's a tentative removal. The clip still remains selected after the dialog is closed even without. I intended to ask @crsib if he remembered why he added this in 65d23cf019fe465c852a06314981544fc9699dab."
1490575944,5952,crsib,2024-02-15T08:12:22Z,That was literally the task to select the clip on right click. @LWinterberg probably has more details.
1490976438,5952,Paul-Licameli,2024-02-15T13:02:00Z,"I feel foolish now -- yes, just making it happen at button-up not down was the right thing!
"
1490985949,5952,Paul-Licameli,2024-02-15T13:09:56Z,"Need `weak_from_this()` for third argument
"
1495841977,5952,vsverchinsky,2024-02-20T13:39:43Z,`this` may not survive by the moment handler is invoked. I think it would be safer to grab weak pointers explicitly. `AudacityProject` has `std::enable_shared_from_this` in its base.
1495948664,5952,vsverchinsky,2024-02-20T14:46:53Z,"Could be shortened:
```
if (affordanceRect.IsEmpty() || title.empty())
   return {};
```"
1495964213,5952,vsverchinsky,2024-02-20T14:55:06Z,"not a clipped clip, documentation for `GetClippingBox` says:
> Gets the rectangle surrounding the current clipping region.
> If no clipping region is set this function returns the extent of the device context.

The clipped clip rect is what will be returned if `hasClipRect` is `true`.
Otherwise I like the motivation to eliminate one call to `GetClippingBox`"
1497173780,5952,vsverchinsky,2024-02-21T09:29:43Z,"Could you please explain what ""lowlit"" and ""hightlit"" mean?"
1497187008,5952,vsverchinsky,2024-02-21T09:38:07Z,"""Modern"" way: pass `shared_ptr`s by value, and use `std::move`
https://clang.llvm.org/extra/clang-tidy/checks/modernize/pass-by-value.html"
1497260170,5952,vsverchinsky,2024-02-21T10:23:52Z,When I have an expression under `if` statement that spans across multiple lines then I prefer to enclose the body of the branch into `{ }` that make code much more readable to my taste
1497341435,5952,vsverchinsky,2024-02-21T11:10:02Z,"You could avoid introducing extra name `ClipButtonTag`:
```
template<ClipButtonId ID>
class ClipButtonSpecializations final
{
public:
   static bool NeedsDrawing(const ClipInterface&);
   ...
};
extern template<> ClipButtonSpecializations<ClipButtonId::Overflow>;
...
```"
1497351614,5952,vsverchinsky,2024-02-21T11:18:43Z,":eyes:
https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-const-or-ref-data-members.html
Not the case in that particular set of arguments, but I don't like the idea of wrapping arguments into a structure to shorten the list... "
1497376377,5952,vsverchinsky,2024-02-21T11:40:43Z,Would be nice to reset `weak_ptr` in `Release` and `Cancel`
1497383289,5952,vsverchinsky,2024-02-21T11:47:02Z,"`label` should be passed by value then, not reference.
`move` on `iProp` is redundant"
1497386219,5952,vsverchinsky,2024-02-21T11:49:30Z,"OK, fixed in later commit"
1497755689,5952,saintmatthieu,2024-02-21T15:10:21Z,I agree.
1497788026,5952,saintmatthieu,2024-02-21T15:27:06Z,Nice!
1497795126,5952,saintmatthieu,2024-02-21T15:31:34Z,First time I read something like this. I do see advantages.
1497797426,5952,saintmatthieu,2024-02-21T15:33:00Z,"I thought about it, but couldn't think of a situation where it could change behaviour."
1497806040,5952,saintmatthieu,2024-02-21T15:38:33Z,"It wasn't when I wrote that line, but that was because of the `Args&&...` in the class template. I removed `&&` and now I don't have to move the ints anymore. I think it's because before it expected right-reference types."
890356970,3030,Paul-Licameli,2022-06-06T17:08:45Z,"The addition of this `include` of this header allows the deletion of the other two.
"
890363580,3030,Paul-Licameli,2022-06-06T17:17:35Z,"Here and elsewhere, I suggest you learn the conventions for Doxygen comments.  See : https://www.doxygen.nl/manual/docblocks.html

Simply adding `!` after `//` means a comment will also be extracted to the automatically generated web pages.  If you install the program, you can run `doxygen nographs.dox` to generate web pages on your own computer, then open `dox/html/index.html` to test how it looks.  I say this as a recommendation, not a requirement for merging this.
"
890364577,3030,Paul-Licameli,2022-06-06T17:18:56Z,"For doxygen, you can write
```
/*!
   @return false if the parameters are not yet available
*/
```

There are a few alternatives of the comment syntax that doxygen also recognizes.
"
890369570,3030,Paul-Licameli,2022-06-06T17:25:36Z,"Maybe this mutable member should become private.
"
890372457,3030,Paul-Licameli,2022-06-06T17:28:40Z,"Pointer or reference as return type?  I would prefer reference.  It's a conventional way of saying, null isn't possible, and making it unnecessary to specify that with a `//! @post` comment.

But otherwise, seeing just this declaration, I as a possible caller of this function, would be left in doubt whether null checks on all the uses of this function should be done or not.

"
890375698,3030,Paul-Licameli,2022-06-06T17:32:48Z,"Now I see the lines in the function:

```
     if (mEditController == nullptr)
         return nullptr;
```

suggesting that sometimes it's necessary to return null because the effect plugin can't be completely initialized yet.  Is that right?  Then, a comment in the header should explain.
"
890377135,3030,Paul-Licameli,2022-06-06T17:34:35Z,"I have learned to prefer `size_t` not `int` for loops like this.
"
890377778,3030,Paul-Licameli,2022-06-06T17:35:28Z,"Not skipping the hidden parameters?  As you wish.
"
890384489,3030,Paul-Licameli,2022-06-06T17:44:16Z,"Strictly speaking, the deletion of these two lines ought to wait until the commit ""Define TransferDataToWindow"" so that each step if the transformation is correct, introducing no temporary known bugs.
"
890386775,3030,Paul-Licameli,2022-06-06T17:47:08Z,"The second commit, which introduces this function, might also rewrite `VST3ParametersWindow::VST3ParametersWindow`

so that the commit comment is correct:  only one call of `getParameterCount` remains
"
890392173,3030,Paul-Licameli,2022-06-06T17:53:46Z,"I still have a feeling that putting `mEffectClassInfo` into the wrapper base class might make nicer simplifications of usage... but I don't insist
"
890396253,3030,Paul-Licameli,2022-06-06T17:56:34Z,"The commit that introduces this line needs `#include <unordered_map>` to compile on macOS
"
890398888,3030,Paul-Licameli,2022-06-06T17:59:04Z,"Is this #include needed at the commit that adds it?
"
890399307,3030,Paul-Licameli,2022-06-06T17:59:38Z,"Or this?
"
890409553,3030,Paul-Licameli,2022-06-06T18:13:21Z,"This added visit of parameters doesn't correspond to any deleted code.  It doesn't skip the read-only parameters, as `SyncParameters` does.

It feels strange, and as we have discussed, that may be because `SyncParameters` has perhaps a confused dual purpose.

Maybe all of this added visit should just be deleted.
"
890411424,3030,Paul-Licameli,2022-06-06T18:15:43Z,"This on the other hand is here because a call to `SyncParameters` is deleted from `LoadUserPreset`.  But it uses a dummy settings, which is strange; but that is because `SyncParameters` takes a non-const reference to settings, as it must in other contexts.

So I think the visit above should be deleted, and these two lines should be retained, but some comment added to explain that this is only transitional, pending the definition of the Instance class.

We need to discuss with @vsverchinsky .
"
890411704,3030,Paul-Licameli,2022-06-06T18:16:04Z,"These lines are certainly good ones that will remain in the final version.
"
890430655,3030,Paul-Licameli,2022-06-06T18:37:31Z,"`at` might allow brevity but it can throw an exception that isn't handled anywhere.  I would rather use `find` and a test against `end` and skip parameters that are not found.


"
890433609,3030,Paul-Licameli,2022-06-06T18:40:29Z,"This line is added at the last commit, to correspond with what `SaveSettings` does.  But strictly it should be added earlier, in the commit ""define the structure, FetchSettings method, StoreSettings method""
"
890434688,3030,Paul-Licameli,2022-06-06T18:42:02Z,"extra `;`
"
891141569,3030,pietro68,2022-06-07T12:14:13Z,"ok, done"
891141960,3030,pietro68,2022-06-07T12:14:40Z,"Right, better skip them, done."
891142093,3030,pietro68,2022-06-07T12:14:51Z,"ok, done"
891144778,3030,pietro68,2022-06-07T12:17:48Z,I take a chance now to refresh my rusty Doxygen knowledge...
891151172,3030,pietro68,2022-06-07T12:24:39Z,"That's right, it is for the case when mEditController could not be initialized.
Added comment for it."
892191354,3030,pietro68,2022-06-08T10:27:53Z,"I forgot about that, now done."
892196790,3030,pietro68,2022-06-08T10:34:24Z,"oops, actually no, it is a leftover from an attempt to find missing headers. Will remove it."
892196928,3030,pietro68,2022-06-08T10:34:34Z,same as above
892206096,3030,pietro68,2022-06-08T10:45:22Z,"thanks, added"
892529430,3030,pietro68,2022-06-08T15:25:53Z,I will do an edit on that commit
892530174,3030,pietro68,2022-06-08T15:26:34Z,ok
892789786,3030,pietro68,2022-06-08T19:40:05Z,"

woops I just realized that I am searching the map two times - instead of .at() I should have used the iterator directly.
"
892815680,3030,pietro68,2022-06-08T20:08:40Z,"I think I must rewrite this method, because it is not doing what is supposed to, i.e. take the input settings and move sliders and knobs on the plugin GUI to reflect their values. 

What it is doing instead, is only passing on the settings to the audio processor (through the ComponentHandler).


"
987841885,3696,Paul-Licameli,2022-10-05T12:02:18Z,"Did you confirm that the buttons reformat after the value is changed and the Preferences dialog is dismissed?

If that doesn't work, then I maybe commit 3598fe4 added enough calls to Invalidate().
"
990495329,3696,Paul-Licameli,2022-10-07T20:59:49Z,"Does mWhichMeters still need to be a bitwise or of non-exclusive choices?

There was old, old code for an alternative combined play & record meter toolbar in one, instead of the separate ones.  I forget when that was removed, but it appears the program is still constructing this third, combined meter toolbar, and yet never showing it and giving you no user interface to turn it on!

"
990503702,3696,Paul-Licameli,2022-10-07T21:16:26Z,"The commit that adds PERCENT_SLIDER for the play and record meters is perhaps incomplete.

I can double-click on the slider thumb and get a dialog to enter a value.  But it must be a fraction from 0 to 1, not a percentage value.  Is that acceptable?  A design question @Tantacrul 

"
990504607,3696,Paul-Licameli,2022-10-07T21:18:13Z,"I also see that not all calls to SendUpdate() are followed by ShowTip()  -- the dialog has some of those calls.  Should ShowTip() be added?
"
990505528,3696,Paul-Licameli,2022-10-07T21:19:56Z,"At this commit, at least in macOS, I do not yet get the hover texts over these two slider thumbs.  But I do get them for track pan and gain and the mixer board gain slider.  Maybe a later commit will fix this. I haven't built them all yet.
"
990512802,3696,Paul-Licameli,2022-10-07T21:35:50Z,"OK, after another commit that changes this default, I do see tooltips, on macOS -- but only if I click the thumb, not when I just hover the mouse over it.  This is different from the pan and gain sliders.

The text I see is like  "": 47%"" suggesting something was supposed to be formatted before the "":"" but is left empty.

I think that is mName being empty at these lines of ASlider.cpp:

```
      /* i18n-hint: An item name followed by a value, with appropriate separating punctuation */
      label = XO(""%s: %s"").Format( mName, val );
```

With pan and gain sliders, I see a hover text, but when I press the mouse, I see the same text, but it moves and is drawn in a bordered, rounded rectangle.  That's a little strange.

"
990515732,3696,Paul-Licameli,2022-10-07T21:42:34Z,"Okay, at another commit, now I see the problems of previous commits corrected.  Names before the :, and a nice hover text with a rounded border.

In fact, now the old behavior of the pan and gain sliders looks worse!  There should be a minor issue I think to fix them to be consistent with the volume sliders.  Which is not part of the scope of this PR. @LWinterberg @Tantacrul 


"
990516259,3696,Paul-Licameli,2022-10-07T21:43:53Z,"It is still the case, however, that when double clicking the volume slider thumb to get a dialog, I'm still not entering a percentage value, but instead a fraction in the range 0.0 to 1.0.
"
990522768,3696,Paul-Licameli,2022-10-07T22:00:14Z,"Why GetDefault() and not just Read()?

Now if I change interface preferences so the bottom of scale is not -60 dB, the drawing updates for it correctly, but the name spoken for the button still says -60, inconsistently with the display.
"
990523979,3696,Paul-Licameli,2022-10-07T22:03:29Z,"`DecibelScaleCutoff.GetDefault()` also occurs in the constructor of MeterPanel.  I put it there at commit 01a53e7da9b616d26d1bb49f381180f04438504f.  As a behavior-preserving code transformation, it was correct as I did it, eliminating the use of the constant ENV_DB_RANGE.  But was old behavior correct?  Perhaps not, and that other line should also be corrected to use Read().
"
997973101,3696,vsverchinsky,2022-10-18T09:42:15Z,"Thanks, fixed"
997983670,3696,vsverchinsky,2022-10-18T09:52:00Z,"Thanks, dialog now shows values in range 0..100"
1015364656,3696,Paul-Licameli,2022-11-07T12:30:23Z,"If you add the space yourself, for the special reasons explained in the comment, then do not include the spaces in the strings to be translated.
"
1015365233,3696,Paul-Licameli,2022-11-07T12:30:59Z,"This applies to five translatable strings in this function.
"
1015380747,3696,Paul-Licameli,2022-11-07T12:47:48Z,"I see the minor fault was in copy-pasted code and not introduced here.  So it's just a recommendation.
"
1251169150,4867,Paul-Licameli,2023-07-03T18:13:07Z,"As I said before:  this entire class could be eliminated, and instead you can write

`using ProjectTempoListener = std::function<…>;`"
1251172715,4867,Paul-Licameli,2023-07-03T18:16:36Z,You mean `oldTempo = mTempo`?
1251175841,4867,Paul-Licameli,2023-07-03T18:21:38Z,The extra indirection of WaveClipList serves no purpose.  I say remove that class and simplify.
1251176742,4867,Paul-Licameli,2023-07-03T18:23:18Z,Supply this before my approval.  I think it’s very easy.
1251177056,4867,Paul-Licameli,2023-07-03T18:23:57Z,"Not in principle difficult either, but I won’t demand it"
1251179093,4867,Paul-Licameli,2023-07-03T18:27:49Z,"Again I don’t see why the publisher must be a member of ProjectManager.

I would just make it an independent attached object on the Project’s ClientData::Site.

And then it really needs only a .cpp file, no .h file, because it does all its magic by registering its factory at startup."
1251182331,4867,Paul-Licameli,2023-07-03T18:33:59Z,"… if in fact there remains any need to define this interface, but I doubt even that "
1251195971,4867,Paul-Licameli,2023-07-03T18:50:35Z,"Again:  I think you can eliminate this class, and even eliminate the std::function alias, and make all of it implementation detail of the Publisher.

And new criticism:  you need to iterate all tracks now, not just Wave tracks."
1251343297,4867,saintmatthieu,2023-07-03T23:50:57Z,"> And new criticism: you need to iterate all tracks now, not just Wave tracks.

Silly me."
1251363199,4867,saintmatthieu,2023-07-04T00:45:20Z,Looks like it works. Coming up.
1251374331,4867,saintmatthieu,2023-07-04T01:13:28Z,You know it gets annoying when you're (probably) right for the 10th time in a row?
1251853274,4867,saintmatthieu,2023-07-04T10:42:59Z,"Now I remember why this is needed.

If a clip is cut from project A and pasted in B, it needs to know immediately what the tempo of B is to be painted and played back correctly. The clip copy constructor cannot rely on that information from the other clip.

When do we know for sure when a clip becomes visible in a project? I can only think of this moment, when the clip is pushed into a track's clip list. This class is here to make sure that this doesn't happen without a tempo update.

But it doesn't have to be part of this very PR, we'll have time to debate over this."
1251858094,4867,Paul-Licameli,2023-07-04T10:47:45Z,"`WaveClipList` only added a `std::optional<double>` data member, which could just as easily become part of `WaveTrack.`
"
1251868968,4867,Paul-Licameli,2023-07-04T10:57:59Z,"Pleased to see you figured this out.  I had forgotten the details of using the allegro library.

So you have completely implemented this new virtual for all except the WaveTracks!
"
1251870199,4867,saintmatthieu,2023-07-04T10:59:09Z,"No, if you call `WaveClipList::PushBack`, it sets the project tempo on the clip.

```
void WaveClipList::PushBack(WaveClipHolder clip)
{
   if (mProjectTempo.has_value())
      clip->SetProjectTempo(*mProjectTempo);
   mClips.push_back(std::move(clip));
}
```"
1251870769,4867,Paul-Licameli,2023-07-04T10:59:41Z,"Expect a small conflict if you rebase this onto my Clip-views branch.  I eliminate `Track::vrulerSize`.
"
1251873214,4867,Paul-Licameli,2023-07-04T11:02:01Z,"As I said, this header file isn't needed.  Just put all in the .cpp file.

There are many examples already of .cpp files without companion .h files, when registration at startup time is enough to cause the code to be visited.

For instance in src/export
"
1251874566,4867,Paul-Licameli,2023-07-04T11:02:59Z,"Compilation failed for me becuase ""Observer.h"" was not included
"
1251875419,4867,Paul-Licameli,2023-07-04T11:03:48Z,"Compilation failed for me because ""float.h"" was not included
"
1251878433,4867,Paul-Licameli,2023-07-04T11:07:12Z,"I think this step of construction is not needed.  There will not yet be any tracks.
"
1251879071,4867,saintmatthieu,2023-07-04T11:07:57Z,Yes - which leaves Audacity in an inconsistent state : change project tempo and all tracks shrink or expand except for the most important one :D
1251880405,4867,saintmatthieu,2023-07-04T11:09:08Z,Thanks.
1251883891,4867,Paul-Licameli,2023-07-04T11:12:41Z,"The previous solution remembered old project tempo in ProjectTimeSignature.  Now you store last known tempo in each track.

I think I understand what justifies this.  It's not always duplicated everywhere.  A track could be duplicated into an undo state or in the clipboard.  It remembers what project tempo was at the time the duplicate track was created.  We don't want to normalize it to some tempo value, because we want to delay the time when we must compute the time stretch, which is not perfectly invertible, and so, lossy.



"
1251890514,4867,Paul-Licameli,2023-07-04T11:19:01Z,"Good to start testing.  I think copy and paste will work fine for MIDI and label tracks.  The TrackList listener was all you needed.  (TimeTrack does not copy and paste.)

"
1251893508,4867,Paul-Licameli,2023-07-04T11:22:08Z,"Still unresolved
"
1251897254,4867,Paul-Licameli,2023-07-04T11:26:05Z,"Still, you might simply change every `push_back` in WaveTrack to use instead a new private member function of WaveTrack that does this.
"
1251900156,4867,saintmatthieu,2023-07-04T11:28:36Z,"This, and also to reduce cognitive load when trying to figure out what happens when tracks in the undo stack miss out on project tempo updates and later get inserted into the list. Now it's easier."
1409749684,5685,Paul-Licameli,2023-11-29T19:07:14Z,"Looking at the second of five commits so far.  This change is correct for the purpose stated in the commit comment.  But I would ask, how will the mouse actions be discoverable?  The read-only Mouse preferences pages too used to serve as a reference but that is gone.  I will review the rest.
"
1409751954,5685,Paul-Licameli,2023-11-29T19:09:26Z,"I now say, this commit is correct, but not complete.  Find all `""/GUI/VerticalZooming""` and see that the MIDI track, too, has a vertical ruler influenced by the same preference, and it also mentioned mouse actions in the context menu items.
"
1409757690,5685,Paul-Licameli,2023-11-29T19:14:19Z,"You might qualify this little variable as `const` or to be even more modern, `constexpr`.  That's a minor bit of style.  I skip it sometimes when the scope of a variable is small, but it can be helpful if ever you have something at the top of a large function or block."
1409764077,5685,Paul-Licameli,2023-11-29T19:20:27Z,"This dispels my doubt about discoverability.  Rely on the tooltips.
"
1409765319,5685,Paul-Licameli,2023-11-29T19:21:37Z,"Indentation.  The convention is three spaces in most of our source files.  You might change preferences in your source code editor.
"
1410554377,5685,Paul-Licameli,2023-11-30T11:44:07Z,"This change is not quite equivalent to the previous version.

""Right-click for menu."" was a message that appeared in the status bar, when you right click, and have not yet released the button.  This is lost.

But I suppose you observed this, and the answer is that it doesn't make sense as a discoverability aid if you really have to do that right click before you see the message suggesting right click!

And you are just assuming right click for context menu is a widespread convention we don't need to mention.

Yes?

"
1410561097,5685,Paul-Licameli,2023-11-30T11:50:33Z,"I think you didn't complete your intended work:  this context menu items still mention the mouse button shortcuts, but you removed those for waveform and spectrum rulers.
"
1410568118,5685,petersampsonaudacity,2023-11-30T11:57:12Z,"> And you are just assuming right click for context menu is a widespread convention we don't need to mention.

@Paul-Licameli  that is a _**very**_ widespread convention an many apps and OSs"
1410703225,5685,LWinterberg,2023-11-30T13:50:53Z,indeed
1410730330,5685,SteveDaulton,2023-11-30T14:12:10Z,"> > And you are just assuming right click for context menu is a widespread convention we don't need to mention.
> 
> @Paul-Licameli that is a _**very**_ widespread convention an many apps and OSs

It's a widespread convention _when it is obvious_ that the pointer is over a clickable entity (frequently indicated by a change in ""hover over"" colour). The problem that I see in relation to the track's vertical ruler is that a high proportion of users are unaware that it is clickable."
949402525,3317,crsib,2022-08-18T17:14:24Z,"I would like to see `XXO(""&Generate"")`. This way this string will be reused."
949403241,3317,crsib,2022-08-18T17:15:14Z,Probably a wrong condition? 
949404627,3317,crsib,2022-08-18T17:16:54Z,Ditto
949429313,3317,crsib,2022-08-18T17:45:53Z,Wrong condition? After the #3391 mwState should not be used. 
949431247,3317,crsib,2022-08-18T17:48:09Z,"I have checked all the design sources - button is always called ""Preview"". Also, it should be ""grouped"" with the ""Apply"", right now it leans to the left (i. e. it is near the ""Presets"" button)"
949440166,3317,crsib,2022-08-18T17:59:00Z,"You can do `using Observer::Publisher<RealtimeEffectStateChange>::Publish`, but I don't yet understand why this function is public"
949445203,3317,crsib,2022-08-18T18:05:22Z,I think this should become a `RealtimeEffectState::SetActive`. That specific method should also Publish the message
949453177,3317,LWinterberg,2022-08-18T18:15:22Z,"Agree on calling it ""preview"" (changing to ""stop preview"" after it's been pressed). Regarding the grouping, it apparently was difficult and martin didn't mind it ungrouped iirc. "
949454645,3317,crsib,2022-08-18T18:17:19Z,"Well, I know how to do such grouping :-)"
952381290,3317,ksoze95,2022-08-23T09:32:02Z,Done.
952383605,3317,ksoze95,2022-08-23T09:34:15Z,"Changed. to XXO(""&Generate"")."
952385550,3317,ksoze95,2022-08-23T09:36:12Z,Done.
952385899,3317,ksoze95,2022-08-23T09:36:29Z,Done.
952386225,3317,ksoze95,2022-08-23T09:36:50Z,"Changed to use mpTempProjectState instead, plus tacked on a few other condition checks as well."
952403973,3317,vsverchinsky,2022-08-23T09:54:12Z,"Unnecessary check, could be `focus == play`"
952434281,3317,vsverchinsky,2022-08-23T10:25:54Z,`GetAccess` does not return empty pointer
954200932,3317,crsib,2022-08-24T19:12:10Z,Do we really need `char` here?
954202628,3317,crsib,2022-08-24T19:13:43Z,You can use `Publish` without this line. It was only required when you needed `Publish` to be public.
954204195,3317,crsib,2022-08-24T19:15:17Z,"I would like @Paul-Licameli to review this specific method. Generally it keeps the behavior from the RealtimeEffectPanel, but probably Paul can suggest something different"
954212302,3317,crsib,2022-08-24T19:22:21Z,"SetActive will publish `RealtimeEffectStateChange` when needed, so the following lines are redundant (and `ProjectHistory::Get(*mProject).ModifyState(false);` probably has visible side effects)"
954270449,3317,crsib,2022-08-24T20:27:11Z,"I would say that this should `XO` now, not that it matters :-) Just whining "
954273274,3317,crsib,2022-08-24T20:30:43Z,"I think checking `mpTempProjectState` is enough. I would like to see this check to be wrapped into `IsOpenedFromEffectPanel` method (naming is hard, yes). Otherwise it quite hard to understand when you see this code for the first time"
954285244,3317,crsib,2022-08-24T20:46:51Z,When we move away from `AddStandardButtons` - `mApplyBtn` should be assigned there.
954286214,3317,crsib,2022-08-24T20:48:08Z,You can use `mApplyBtn` here
954289937,3317,crsib,2022-08-24T20:53:14Z,"I say this line should go. `OnEnable` is now called only when the UI is opened from the FX panel, so there is no point to change the ""global"" state. This toggle should only affect a single effect.

"
954291606,3317,crsib,2022-08-24T20:55:25Z,"Let's replace it with that method I have proposed earlier. Please not, that `mSupportsRealtime` is always true for effects in the stack."
954292420,3317,crsib,2022-08-24T20:56:30Z,Give the early return couple lines above - I think this `if` can be ommited 
954293652,3317,crsib,2022-08-24T20:58:04Z,Why not `if (mSupportsRealtime)` as it was before?
954294488,3317,crsib,2022-08-24T20:58:48Z,Please update the comment. Its something translators see.
954294615,3317,crsib,2022-08-24T20:58:59Z,Ditto
954295234,3317,crsib,2022-08-24T20:59:49Z,This line should probably go too.
954295861,3317,crsib,2022-08-24T21:00:46Z,That not yet created method here please as well
954650963,3317,ksoze95,2022-08-25T08:16:51Z,Done.
955323397,3317,crsib,2022-08-25T19:07:32Z,`IsOpenedFromEffectPanel`? Minor though
955329853,3317,crsib,2022-08-25T19:13:44Z,It appears that both branches are identical now
878683383,2957,Paul-Licameli,2022-05-21T11:11:39Z,"I need to add `#include <unordered_map>` to build it
"
878686979,2957,Paul-Licameli,2022-05-21T11:49:56Z,"This looks like a correct fix to me.  @vsverchinsky ?

But let's agree to go farther: write
```
constextpr auto ProcessorState = L""ProcessorState"";
```
and eliminate the repetition of the string literal, using the named constant instead in three places.  Do likewise for the other string constant.
"
878687521,2957,Paul-Licameli,2022-05-21T11:56:15Z,"These functions to fetch settings from the VST3 handle into our own map, and store them back, are a beginning toward statelessness by analogy with the transformation I am making for AudioUnits.

For AudioUnits, the fetching and storing both perform a loop over the settings as defined by the handle.  StoreSettings doesn't iterate our own hash map, but looks up in it.

Also in AudioUnits, the details of how to iterate the handle's metadata for settings is written just once in a higher-order function called `ForEachParameter`, and that function takes a lambda for the loop body.

I suggest you make similar changes.

"
878696509,2957,Paul-Licameli,2022-05-21T13:37:14Z,"If you define `MakeSettings`, also define an efficient `CopySettingsContents`.

But make those definitions only very late, when all else is ready for the final switch to statelessness.  So, not in this first stage PR.
"
878703096,2957,Paul-Licameli,2022-05-21T14:42:17Z,"Do not make `GetSettings` a static function, until the last step to real statelessness.

Make it a non-static member function of  VST3Effect that ignores its argument and uses a VST3EffectSettings member of the VST3Effect, which is still stateful.

This would parallel what I did with AudioUnits.

This allows some changes to use `GetSettings` where that will be needed, while not yet changing real behavior, when the transformation to statelessness is still incomplete.

"
878703587,2957,Paul-Licameli,2022-05-21T14:47:33Z,"Here and elsewhere, you might write just one line
`FetchSettings(GetSettings(settings))`

"
878704020,2957,Paul-Licameli,2022-05-21T14:52:24Z,"But then, also, FetchSettings should clear the map before iterating the parameters and reinserting them.

"
878704121,2957,Paul-Licameli,2022-05-21T14:53:26Z,"`FetchSettings` is called in all necessary places, good

"
880153589,2957,vsverchinsky,2022-05-24T07:29:08Z,Looks like a bug indeed
880160741,2957,vsverchinsky,2022-05-24T07:36:55Z,Is that possible to store pointer to the controller instead?
880188970,2957,vsverchinsky,2022-05-24T08:04:50Z,"Parameters stored by `SaveSettings` are used by macroses in Audacity and are meant to be read by human, I'm not sure if that was correct to skip other types of parameters, but this was an attempt to restrict the amount of parameters (there could be thousands of them) to a set of paramters that are useful and meaningful"
880235540,2957,pietro68,2022-05-24T08:47:17Z,"Thanks for the clarification, I was wondering about that, it makes sense to do it this way."
880239478,2957,pietro68,2022-05-24T08:50:53Z,"I am not sure I understand. Do you mean, instead of storing the `value`, store the pointer `&mEditController`?"
880240954,2957,pietro68,2022-05-24T08:52:20Z,"ok thanks - I wonder if we should correct this in a separate, trivial PR so that it goes in master soon?"
880269728,2957,vsverchinsky,2022-05-24T09:20:13Z,"Yes, instead of storing parameter values in `settings` use `settings` object to access underlying `EditController`"
880272334,2957,vsverchinsky,2022-05-24T09:22:41Z,"Agree, @Paul-Licameli ?"
880357301,2957,Paul-Licameli,2022-05-24T10:53:16Z,"Agreed, write it, also eliminating the repetition of string literals.
"
880424966,2957,Paul-Licameli,2022-05-24T12:11:18Z,"Maybe this `struct` should just simplify to a `using` alias
"
880427286,2957,Paul-Licameli,2022-05-24T12:13:51Z,"This is not analogous to what I did for AudioUnits:  the visitor function can return false, not to cause `ForEachParameter` to fail, but only to cause it to stop visiting other parameters.

In fact `ForEachParameter` for AudioUnits ended up as a void-returning function, and yours might too.

"
880428276,2957,Paul-Licameli,2022-05-24T12:15:03Z,"As @vsverchinsky explained, skip over certain parameters that don't automate; but don't stop the visit or return a failure code.
"
880436721,2957,Paul-Licameli,2022-05-24T12:23:55Z,"This function could also be used to simplify `SupportsAutomation` and `LoadFactoryDefaults`

As for `LoadSettings`, change it to use `ForEachParameter`, and not iterating over `parms`.  Instead call `parms.Read` as in `AudioUnitEffect::LoadSettings`
"
880442455,2957,Paul-Licameli,2022-05-24T12:29:52Z,"Can we assume that the set of parameters, and the kCanAutomate flag for each parameter, is unchanging during the lifetime of the loaded VST3 plug-in?  And independent of any instance state?  I would assume so.

When you write CopySettingsContents analogous to that for AudioUnits (not yet merged, but in the last of the sequence of PRs for AU), you may be making such an assumption.

"
880448645,2957,Paul-Licameli,2022-05-24T12:36:20Z,"I'm missing some context.  These lines are no longer in the last commit of this branch.

Are you suggesting that a pointer to `EditController` should be carried around in the `EffectSettings` object?  I don't like that.  `EffectSettings` should be thought of as a ""frozen"" description of instance state, not using any third-party library handles.  Thus our fetching and storing functions to synchronize frozen with live state, one way or the other.

The `EffectSettings` is something we can pass across inter-thread boundaries, and also copy from one live instance to the other by means of fetching from one and storing to the other.

Maybe it is not the most efficient way for every effect protocol, but it seems to me to have the generality that we need that would work with all of them in one unifying framework.
"
880696834,2957,pietro68,2022-05-24T16:00:51Z,now added in commit `created ForEachParameters and used in 3 places`
880698155,2957,pietro68,2022-05-24T16:02:07Z,now done in commit `created ForEachParameters and used in 3 places` and will do the same for the standalone branch to fix this bug.
880698645,2957,pietro68,2022-05-24T16:02:37Z,now done in commit `created ForEachParameters and used in 3 places`
880700714,2957,pietro68,2022-05-24T16:04:45Z,done in commit `GetSettings turned to temporary version`
880733329,2957,pietro68,2022-05-24T16:37:41Z,done in commit `simplified parameterInfo`
880733783,2957,pietro68,2022-05-24T16:38:12Z,done in commit `correct the behavior of ForEachParameter...`
880734391,2957,pietro68,2022-05-24T16:38:53Z,done in commit `correct the behavior of ForEachParameter...`
881249818,2957,pietro68,2022-05-25T06:05:23Z,"I am not sure about using it for `SupportsAutomation`, because `ForEachParameter` will always stop at the first parameter for which the visitor fails, and then return true - while `SupportsAutomation` stops at the first parameter which can be automated, returning true, but if none of the parameters can be automated, it will return false.

I think I'd need a different version of `ForEachParameter` for that, which will return true at the first successful visit and false if no successful visits happened (it could be named something like VerifyAtLeastOneParameter)"
881270163,2957,pietro68,2022-05-25T06:37:20Z,"As for `LoadFactoryDefaults`, now done in commit `LoadFactoryDefaults uses ForEachParameter`"
881315044,2957,pietro68,2022-05-25T07:31:49Z,"As for `LoadSettings`, I need to have a talk about that first"
881912625,2957,pietro68,2022-05-25T17:09:38Z,"I prepared a version of `LoadSettings` that uses `ForEachParameter`, but it is deactivated (under #if 0) in favor of the existing version - this because I can not find a way to reach this method (I tried using macros, as hinted in our conversation, but the method called when playing back the macro will not take the else branch that calls LoadSettings). When I can rebase on Vitaly's recent work for stacks, I will be able to reach this method and test if the new version works."
1209735362,4739,saintmatthieu,2023-05-30T05:51:05Z,"This sentence will probably let the user think that she now has to convert one of the tracks to the sample rate of the other. As @crsib pointed out, an alternative worth considering would be panning - simpler, no memory usage increase, lossless. Please consider suggesting this in your sentence."
1209860509,4739,DavidBailes,2023-05-30T07:53:17Z,"There is also the danger that the user changes the sample rate of one of the tracks by using the rate sub menu on the track's menu, rather than Tracks > Resample."
883507503,2805,vsverchinsky,2022-05-27T11:01:38Z,"Old implementation is a bit confusing, now it looks ok"
883521708,2805,vsverchinsky,2022-05-27T11:23:41Z,`bIsSecondChannel` didn't change before 
883523822,2805,vsverchinsky,2022-05-27T11:26:55Z,"If I understand correctly the meaning of `mChannelIndex` this check won't yield same results as before, because `j` now  increments only inside the new inner loop "
883537115,2805,vsverchinsky,2022-05-27T11:41:13Z,"Could be `wxString::Lower`
https://docs.wxwidgets.org/3.0/classwx_string.html#aaacf7a99a2674bc3f462d54181c40f4f"
1201670899,2805,saintmatthieu,2023-05-23T07:23:44Z,Can you get the number of leaders and call `mInitialTrackSelection.reserve(numLeaders)` ?
1201696072,2805,saintmatthieu,2023-05-23T07:39:29Z,const
1201708989,2805,saintmatthieu,2023-05-23T07:47:53Z,"Would you mind explaining what this select command modes represent ? A quick exploration of Audacity's UI didn't bring an answer. I couldn't even find the command ""Select Tracks"".
I'd like to understand this as it might be something to be tested."
1201719313,2805,saintmatthieu,2023-05-23T07:54:46Z,"const
"
1201730053,2805,saintmatthieu,2023-05-23T08:00:05Z,"I wouldn't mind a type specifier here, i.e. `for (Track* channel : ...)` ; would spare readers like me wondering if we're unnecessarily increasing a smart pointer ref count."
1201736815,2805,saintmatthieu,2023-05-23T08:03:56Z,"I also don't see how I can excite this code, I don't find a ""Set Track Status"" command. (Two lines below)"
1201747535,2805,saintmatthieu,2023-05-23T08:09:59Z,Was moving `pNewLeft->SetSelected(!toNewTrack);` downwards necessary? Else the diff could have been kept lower by just deleting this line.
1201783939,2805,saintmatthieu,2023-05-23T08:28:43Z,👍 
1201784256,2805,saintmatthieu,2023-05-23T08:28:48Z,👍 
1201807441,2805,saintmatthieu,2023-05-23T08:36:57Z,"Using a binary `enum class AllChannels { yes, no }` instead of a bool would be more work but ease the reading where it's used."
1201881008,2805,saintmatthieu,2023-05-23T09:15:06Z,I'd be glad for an explanation of this setting. I found it in the preferences but couldn't observe any effect.
1201948075,2805,saintmatthieu,2023-05-23T09:51:35Z,... in fact I can't see a place in the code where the enum value is changed 🤔 Either we have a bug or this preference could be removed altogether.
1202444035,2805,Paul-Licameli,2023-05-23T14:31:35Z,"I could, though I doubt this would bring much advantage.
"
1202598554,2805,Paul-Licameli,2023-05-23T15:50:34Z,"The added argument in Notify is only for transitional states of the big code transformation.  Ultimately it will be removed again, though not in this pull request.
"
1202607149,2805,Paul-Licameli,2023-05-23T15:53:20Z,"See this line in TracksBehaviorsPrefs.cpp:
```
         S.TieChoice( XXO(""Solo &Button:""), TracksBehaviorsSolo);
```
The second argument is by reference.  That code constructs a dialog that may modify the setting.
"
1203514813,2805,saintmatthieu,2023-05-24T06:26:55Z,Thanks to your explanation yesterday I could debug that. Looks good.
1203524672,2805,saintmatthieu,2023-05-24T06:33:42Z,"Found out, cool stuff."
1234777260,4795,saintmatthieu,2023-06-20T06:06:59Z,"If `pLeader` is a raw pointer, then you don't need the conditional operator, just pass `pLeader`."
1234802568,4795,saintmatthieu,2023-06-20T06:38:34Z,"Oh, I'm surprised here to see a per-project effect list. Is it here in anticipation of the future master effect stack?"
1234817130,4795,saintmatthieu,2023-06-20T06:54:39Z,"I vaguely remember you saying that `WaveTrack` might at some stage not be a `Track` anymore. Maybe I'm remembering wrongly or you were not serious, else would this line become a problem then?"
1234836216,4795,saintmatthieu,2023-06-20T07:14:18Z,"Excellent, just what my `StretchingSequence` will need."
1234844600,4795,saintmatthieu,2023-06-20T07:21:51Z,"(Github wouldn't let me ""Comment on this file"" for some reason.)
It's a little bit more work but not useless work to have one header per abstract class. Seeing `AudioIOSequences.h` I thought ""What could be a `class AudioIOSequences` ?..."""
1234856901,4795,saintmatthieu,2023-06-20T07:32:44Z,"I never saw abstract interfaces being used for classification like that before. Wouldn't simply adding a `IsPlayable` interface to `Track` have done the job? If so I'd prefer that, to spare readers like me some eyebrow lifting."
1234859175,4795,saintmatthieu,2023-06-20T07:34:41Z,"The indent is awkward, it took me longer than necessary to make sure that `result.otherPlayableSequences.push_back(pSequence);` resulted from the `if`."
1234866817,4795,saintmatthieu,2023-06-20T07:41:05Z,"To be kept in mind, but nothing to address in this PR: the `StretchingSequence::Get` requiring a modification of its state, I'd like at some stage to have these `ConstPlayableSequences` become non-const. Right now I'm using a const_cast."
1234877150,4795,saintmatthieu,2023-06-20T07:50:07Z,Thank you!
1234879141,4795,saintmatthieu,2023-06-20T07:51:49Z,`mPlaybackBuffers.clear()` ?
1234881700,4795,saintmatthieu,2023-06-20T07:53:59Z,You have something against `std::min_element` ?
1234884120,4795,saintmatthieu,2023-06-20T07:55:55Z,"In any case, thanks for the clean-up."
1234916925,4795,saintmatthieu,2023-06-20T08:23:18Z,"`t` is only used to index `mPlaybackSequences`, hence a range loop would be appropriate and make this code a wee bit easier to understand."
1234966600,4795,saintmatthieu,2023-06-20T09:02:26Z,"You've called this `nChannels` elsewhere, better stay consistent to ease reading."
1234971515,4795,saintmatthieu,2023-06-20T09:06:32Z,Can probably be `const`?
1234975257,4795,saintmatthieu,2023-06-20T09:09:42Z,or `std::copy_if`
1237758611,4795,Paul-Licameli,2023-06-21T22:01:51Z,Exactly!
1237759798,4795,Paul-Licameli,2023-06-21T22:03:09Z,"In fact, the global effect list was a thing before 3.2, in the limited implementation of real-time effects then.  It is now hidden but may be revealed again."
1237766576,4795,Paul-Licameli,2023-06-21T22:10:05Z,"WaveTrack will remain a kind of Track but WaveChannel will be a thing representing a part of the track.

But RealtimeEffectManager will still know WideSampeSequence objects which will still correspond to Trakcs, not Channels."
1237774889,4795,Paul-Licameli,2023-06-21T22:18:37Z,"I do not agree to any rule classes should correspond one to one with header files.

Sometimes the atomization is excessive.  That’s a judgment, not a precise criterion.

Sometimes too it is proper to have closely cooperating classes in one header file if the alternative is cyclic dependency, though that does not apply in this case.
"
1237776383,4795,Paul-Licameli,2023-06-21T22:20:04Z,"No.

Track is a dirty legacy class with too many duties, which I am trying to remove from lob-audio-io."
1237781518,4795,Paul-Licameli,2023-06-21T22:25:40Z,"A matter of taste.  I find that I like indentation styles in which the variation of the leftmost column helps me to scan it and separate the parts.  In this case, separating a long condition expression that doesn’t fit on one line, from the consequent statement."
1237786971,4795,Paul-Licameli,2023-06-21T22:31:08Z,"I’m still not persuaded.

I still feel like this abstract interface should be stateless, and any dependency on the history of the pattern of access in the concrete class justifies the use of mutable members."
1237789151,4795,Paul-Licameli,2023-06-21T22:34:15Z,"True, no difference for changes of capacity and for whatever small performance advantage."
1237789810,4795,Paul-Licameli,2023-06-21T22:35:31Z,"min_element returns an iterator, not a value"
1237794495,4795,Paul-Licameli,2023-06-21T22:43:45Z,"Good idea, that was not true before the transformation but it is now"
1237796289,4795,Paul-Licameli,2023-06-21T22:46:49Z,"But there is a distinction to make, between the sample sequences of project data, and the number of device channels.  They may go many to one."
1237797087,4795,Paul-Licameli,2023-06-21T22:47:57Z,"Maybe, small advantage to readability, and I strongly doubt it makes any difference in performance"
1237799236,4795,Paul-Licameli,2023-06-21T22:51:36Z,Good
1237799301,4795,Paul-Licameli,2023-06-21T22:51:44Z,"But there is a distinction to make, between the sample sequences of project data, and the number of device channels.  They may go many to one."
1237799680,4795,Paul-Licameli,2023-06-21T22:52:28Z,"Small advantage for readability, none for performance"
1237802790,4795,Paul-Licameli,2023-06-21T22:57:43Z,"Yeah,  but I would need a lambda or std::mem_fn"
1238124756,4795,saintmatthieu,2023-06-22T07:35:22Z,"I suppose that's an inconvenience of the decorator approach. The users see no distinction between the `WaveTrack` implementations (const) and the stretching ones (mutable). To be transparent as to what really is const and what isn't, we would have needed a solution where the mixer gets a const `WaveTrack` (if needed at all) and a mutable `SequenceRealtimeProcessor`.
In practice we're all right, though, so long as the same `StretchingSequence` isn't used by different threads, which I don't see happening.
"
1238128676,4795,saintmatthieu,2023-06-22T07:39:06Z,"Of course, you have to dereference the return, but unless there is a risk `buffers` is empty, `min_element` never returns `end()`."
1440563161,5839,Paul-Licameli,2024-01-03T15:09:46Z,"banners
"
1440565838,5839,Paul-Licameli,2024-01-03T15:12:06Z,"These are not necessary to compile what is below.  If they are required in other places that include this header, I would move them there."
1440580244,5839,Paul-Licameli,2024-01-03T15:24:52Z,"Maybe return `nullopt` instead.  Elsewhere you write a function taking `optional<AcidizerTags>`
"
1440581028,5839,Paul-Licameli,2024-01-03T15:25:28Z,"Remind the reader that `{}` means undefined time signature
"
1440591396,5839,Paul-Licameli,2024-01-03T15:35:13Z,"You might replace the first two with forward declarations of incomplete types.
"
1440597570,5839,Paul-Licameli,2024-01-03T15:40:40Z,"The comment is inconsistent with the code, which is right?

You might try `std::mismatch` and might then not need the length comparison -- you expect just to get the end iterator of the prefix.
"
1440617649,5839,Paul-Licameli,2024-01-03T15:59:14Z,"Why does a module have a unit test?  Can this go to `lib-file-formats`?

I like a banner comment in each `CMakeLists.txt` delimited by
```
#[[
   ...
]]
```"
1440618611,5839,Paul-Licameli,2024-01-03T16:00:03Z,"See other examples.  That banner just summarizes the purpose of the library.
"
1440621480,5839,Paul-Licameli,2024-01-03T16:02:53Z,"I'm failing to configure the build for macOS:
```
 Target ""mod-pcm"" of type MODULE_LIBRARY may not be linked into another
  target.  One may link only to INTERFACE, OBJECT, STATIC or SHARED
  libraries, or to executables with the ENABLE_EXPORTS property set.
```"
1440623778,5839,saintmatthieu,2024-01-03T16:05:00Z,Yes: see fe2caec
1440625224,5839,Paul-Licameli,2024-01-03T16:05:57Z,"OK, I see you fixed the configuration problem.

This completes a round of review.
"
1440638643,5839,saintmatthieu,2024-01-03T16:17:02Z,"I agree, that's better."
1440720209,5839,saintmatthieu,2024-01-03T17:39:13Z,"Works for the AcidizerTags, but with SNDFILE I get the `redifinition with different basic type` error, don't know why."
1440721353,5839,saintmatthieu,2024-01-03T17:40:10Z,I found an easier approach: remove trailing nulls (due to byte-padding for word alignment it would seem) and exactly compare the strings.
1440970154,5839,Paul-Licameli,2024-01-03T21:25:44Z,You might also forward declare `SNDFILE`
1442835173,5839,Paul-Licameli,2024-01-05T12:52:24Z,"Emphasize with a comment, this should NOT be `auto`
"
1442836478,5839,Paul-Licameli,2024-01-05T12:53:53Z,"Might move this line up and eliminate a few repeated expressions
"
1442840162,5839,Paul-Licameli,2024-01-05T12:57:49Z,"Although both sizes happen to be 4 so it will work -- still the change in the last argument should be reverted.
"
1442843720,5839,Paul-Licameli,2024-01-05T13:00:18Z,"I would make `file` a reference.  Otherwise it needs a null check to make me confident.  It is just passed to a sndfile function, which is C style, but I don't know whether the library does null checks or would crash.  Better to use C++ style in this wrapper level.
"
1442846936,5839,Paul-Licameli,2024-01-05T13:02:29Z,"Why not propagate the error out of this function and let the caller decide whether to eat it?
"
1446660741,5839,saintmatthieu,2024-01-09T21:59:28Z,Thanks
1446663359,5839,saintmatthieu,2024-01-09T22:00:27Z,"Reworked that utility code, this isn't an issue anymore."
1446666190,5839,saintmatthieu,2024-01-09T22:02:09Z,"I don't expect this to be an issue beyond development of this utility, and am lazy handling it on the client side."
1449177379,5839,crsib,2024-01-11T17:25:42Z,This utility is used only for tests?
1449179896,5839,saintmatthieu,2024-01-11T17:27:59Z,Yes.
1449478588,5839,Paul-Licameli,2024-01-11T22:36:02Z,"This suggests to me, maybe you might like instead, simply
`using AcidizerTags = std::variant<OneShot, Loop>;`"
1449481096,5839,Paul-Licameli,2024-01-11T22:37:23Z,"or not...
"
1454004231,5839,Paul-Licameli,2024-01-16T20:40:12Z,"You might simplify away these two constructors with
`using LibFileFormats::AcidizerTags::AcidizerTags`"
1088873480,4033,Paul-Licameli,2023-01-27T11:53:06Z,"This macro isn't needed and the named class doesn't exist
"
1088878176,4033,Paul-Licameli,2023-01-27T11:56:51Z,"These string literals are repeated in TracksBehaviorsPrefs.cpp.  Eliminating duplication might be nice but in this case is not very important.  No bug would result if they were differently modified.  The strings are not used as identifiers.
"
1088884895,4033,Paul-Licameli,2023-01-27T12:04:57Z,"What is now asserted instead of checked, should be commented above the function too as the precondition it assumes.
"
1088887895,4033,Paul-Licameli,2023-01-27T12:08:42Z,"The third commit has no errors, but I don't yet see what code duplication is removed as the commit comment says.  Or rather, this is allowing something to be reused?
"
1088904428,4033,Paul-Licameli,2023-01-27T12:24:39Z,"Here, assume negation of the while-condition:
`dstTrack == dstTrackRange.end() || srcTrack == srcTrackRange.end()`"
1088904845,4033,Paul-Licameli,2023-01-27T12:25:11Z,"Therefore, `srcTrack == srcTrackRange.end()`
"
1088905605,4033,Paul-Licameli,2023-01-27T12:26:03Z,"But what about the other possibility, that destination tracks ran out before source tracks?  Don't you need to check that and visit extra source tracks?  You do that at the top of the function, only when there are zero destination tracks.
"
1088907770,4033,Paul-Licameli,2023-01-27T12:28:40Z,"Here and elsewhere that you call `f`, what proves that there is not a null dereference?  Track iterators are allowed to dereference an end iterator, getting a null, but then the second dereference might be unsafe.

The function would look better with a test for empty src and early exit.
"
1088910295,4033,Paul-Licameli,2023-01-27T12:31:47Z,"The algorithm in `ForEachCopiedWaveTrack` might visit one source track multiple times and count its space multiply in the estimate.

This isn't needed for copying and pasting within a project because of the sharing of data.

Rather than all this work, it suggests to me that cross-project copying and pasting needs a smarter algorithm to replicate the graph structure and pattern of sharing.

This could prevent explosion of file sizes in the first place without so much need to warn about it.
"
1092026457,4033,vsverchinsky,2023-01-31T14:38:30Z,Thanks!
1092027700,4033,vsverchinsky,2023-01-31T14:39:27Z,"Agreed, though not very clear where exactly such strings could be placed"
1092040429,4033,vsverchinsky,2023-01-31T14:48:53Z,"Clipboard access and double checking on same condition (`!tracks.Selected()`) - `DoPasteNotingSelected` assumes that nothing is selected... but I agree that commit message isn't very clear, I'll change it to `Audio paste code simplification` "
1092127119,4033,vsverchinsky,2023-01-31T15:48:32Z,"When copying tracks we consider two cases when pasting:
1) There is no selection
2) Not empty region is selected

In the first case we copy **all tracks** from `src` (used in simplified paste method `DoPasteNothingSelected`). When selection isn't empty `N = min(src.size(), dst.size())` tracks are copied from `src`, plus the **last track** from `src` could be duplicated `M = dst.size() - N` times more, if `M > 0` (corresponds to a paste logic after `!tracks.Selected()` condition in `OnPaste`). In both cases `ForEachCopiedWaveTrack` visits tracks that are to be copied according to behaviour described above.
Does that answers your questions?"
1092139420,4033,vsverchinsky,2023-01-31T15:57:50Z,"Not sure that understand your question. `dst` is allowed to be empty, `src` is expected to be not empty (and it can't have null tracks, right?). I don't see where null pointer dereference could happen in that case. I can comment about preconditions, but it's not a publicly available function which's purpose is to simplify implementation of another function."
1092145210,4033,vsverchinsky,2023-01-31T16:01:55Z,">The algorithm in ForEachCopiedWaveTrack might visit one source track multiple times and count its space multiply in the estimate.

Also it's possible that different source tracks can reference same blocks"
1097389776,4033,Paul-Licameli,2023-02-06T13:40:25Z,"Yes, I accept this reasoning.  But then the new function should have a comment containing this explanation.  Reading the function in isolation made me question it.
"
1097396828,4033,Paul-Licameli,2023-02-06T13:46:39Z,"Right, to prove no null dereference happens, you must assume src is not an empty track list, and that is guaranteed at the call site.

It's all happening within one file, yes, so I won't be pedantic about stating preconditions.
"
1110074000,4033,Paul-Licameli,2023-02-17T16:53:30Z,"I assume all visible design and wording changes were prescribed by someone else, but I think ""any time"" is more proper English usage.  Although Grammarly just told me it's considered acceptable as one word now.  @LWinterberg 
"
1110080007,4033,petersampsonaudacity,2023-02-17T16:59:25Z,"Grammarly says:
>A century ago, it was standard to write any time as two words in all contexts. But it’s now perfectly acceptable to write anytime as one word when you’re using it as an [adverb](https://www.grammarly.com/blog/adverb/). However, some readers still consider it a casualism, so you may want to stick to the two-word version for extremely formal writing.

And in a similar vein The Guardian Style Guide (my personal touchstone in such matters) somewhat jocularly says:
>**any more**
>Please do not say “anymore” any more

And here's the Microsoft guide:
https://www.microsoft.com/en-us/microsoft-365-life-hacks/writing/any-time-or-anytime-is-it-one-or-two-words

So, I'm minded to agree with @Paul-Licameli  that it would be better as ""any time"" with the space.

And I'm also minded to think that it would read better as ""allowing you to access trimmed data at any time"" - _with the ""added ""**at**""_"
1085667628,4171,Paul-Licameli,2023-01-24T17:35:48Z,"If I wrote this, I would do the extra work to define a .cpp file, so that (1) at least one .cpp file in the system includes the header file before any other, guaranteeing that the header is self-sufficient for compilation; and (2) making out-of-line functions doing most of the work that doesn't depend on the template type parameter, leaving only small template functions in the header to be inlined.

See for instance Observer, which separates an out-of-line, ""type erased"" part.

I don't insist that you follow the suggestion for this PR.
"
1085671947,4171,Paul-Licameli,2023-01-24T17:39:30Z,"It would also make sense to put this file in src/wrappers.  The class resembles `wxPanelWrapper` for instance.  But I don't insist.  Library extractions might soon upset the folder organization anyway.  Although a library for src/wrappers would definitely be a non-toolkit-neutral part of the program until we figure out better abstractions.
"
1085678861,4171,Paul-Licameli,2023-01-24T17:45:34Z,"Ditto, suggestion about folder placement.  I don't insist.
"
1085696529,4171,Paul-Licameli,2023-01-24T18:00:10Z,"And this file.

But whatever the folders they are in,  it is good to see RealtimeEffectPanel shrink to its essentials.
"
1085699734,4171,Paul-Licameli,2023-01-24T18:03:02Z,"This comment got lost in the cut and paste.
"
1085700720,4171,Paul-Licameli,2023-01-24T18:03:52Z,"And if restored, it should also be more complete, describing what the event handlers accomplish.
"
1085710313,4171,Paul-Licameli,2023-01-24T18:12:38Z,"Do all these #include directives compile on all platforms?  I thought ../ would be needed in some of them.
"
1085729918,4171,Paul-Licameli,2023-01-24T18:29:11Z,"Maybe a more suggestive name?  PluginMenuBuilder?
"
1085732024,4171,Paul-Licameli,2023-01-24T18:31:08Z,"Not reachable with default Experimental.cmake but it's good you noticed it
"
1085736854,4171,Paul-Licameli,2023-01-24T18:35:30Z,"I see one use of Save() not followed by the publication, and that is in `PluginManager::InitializePlugins()`.  Is that right or wrong?
"
1085739171,4171,Paul-Licameli,2023-01-24T18:37:38Z,"Not wrong, I see, because the only subscriber is RealtimeEffectListWindow which cannot possibly be constructed earlier than that initialization.
"
1085753030,4171,Paul-Licameli,2023-01-24T18:47:47Z,"""its"" not it's
"
1085765993,4171,Paul-Licameli,2023-01-24T18:55:41Z,"The constructor makes subscriptions.

`ResetTrack()` destroys both subscriptions.

`SetTrack()` restores the old subscription to non-null, but not the new one.

Is that right or wrong?

"
1085770239,4171,Paul-Licameli,2023-01-24T18:58:17Z,"I am glad to see you figured out the usage of MenuVisitor!  I hope it did not seem unnecessarily difficult.  If you gained some more understanding of Registry.h and Registry.cpp that is good -- they need some re-work which will need careful review by someone.

"
1085790643,4171,Paul-Licameli,2023-01-24T19:10:32Z,"This repeated lambda might be a local variable defined once
"
1085794586,4171,Paul-Licameli,2023-01-24T19:13:06Z,"I checked the function again to see what these two {}s are -- and I discovered, `realFlags` is passed around among many functions in MenuHelper.cpp but never used!

I don't know where in source code history it became unused -- but you have an opportunity to simplify with one more commit.
"
1086585722,4171,vsverchinsky,2023-01-25T12:36:07Z,"I believe so, yes. If I remember correctly `src` folder is added to include directories somewhere in cmake"
1086586960,4171,vsverchinsky,2023-01-25T12:37:28Z,It used to provide macros menu helpers too. And it doesn't build menus
1086593332,4171,vsverchinsky,2023-01-25T12:44:17Z,"`mPluginsChangedSubscription.Reset()` shouldn't be here, thanks!"
1086595431,4171,vsverchinsky,2023-01-25T12:46:33Z,"Had to spend some time to figure out how it works, yes :)"
1086619354,4171,vsverchinsky,2023-01-25T13:08:54Z,Yep
1086642480,4171,vsverchinsky,2023-01-25T13:30:05Z,Tracked it down to c3db93c . I guess that was removed intentionally.
1087817905,4171,Paul-Licameli,2023-01-26T12:47:08Z,"You made the suggested simplification to remove duplication.

Amusingly:  you could even simplify this more to:

```
      static auto realtimeEffectPredicate = &PluginDescriptor::IsEffectRealtime;
```

The implicit constructor of `std::function` used when you call `MenuHelper::PopulateEffectsMenu` works even when the template parameter is of type pointer-to-member-function.
"
1109800197,4171,Paul-Licameli,2023-02-17T13:20:06Z,"The definition of `IsRealtimeNotActiveFlag` is in this file.  It becomes unused, so may be deleted too.
"
1109822540,4171,Paul-Licameli,2023-02-17T13:38:13Z,"Maybe you could use composition instead of inheritance:  a member of a type inheriting PrefsListener.  Then you would not need to play with type traits to pass through to the base.  Instead UpdatePrefs is directly invoked directly on this member and on the base class to do different unrelated things that can happen in either sequence.
"
1109827312,4171,Paul-Licameli,2023-02-17T13:42:03Z,"This variable is not longer used, so remove it too
"
1109846173,4171,Paul-Licameli,2023-02-17T13:57:03Z,"A wise comment.  I like it that you are aware of dependencies you add.

But I checked that this does not add a dependency cycle.

True, it may still be an undesirable dependency, but we can figure out some trick to break it if we need that later.
"
1109912192,4171,Paul-Licameli,2023-02-17T14:45:35Z,"... or maybe, even without composition, all you need is:
```
if constexpr(std::is_base_of_v<PrefsListener, WindowBase>)
   WindowBase::UpdatePrefs();
```"
1399351314,5653,vsverchinsky,2023-11-20T15:15:33Z,"When included from another library that macro will expand into
```
template struct __declspec(dllexport) ClientData::Cloneable<WaveClipListener>;
...
```
"
1399642138,5653,vsverchinsky,2023-11-20T19:20:30Z,"I see many C4661s:
```
'ClientData::Cloneable<WaveClipListener,ClientData::UniquePtr>::~Cloneable(void)': no suitable definition provided for explicit template instantiation request
```"
1399671727,5653,vsverchinsky,2023-11-20T19:45:16Z,"There is also at least one `mClips.push_back` in `InsertClip`, which is used in many places. But `InsertClip` may start send lots of redundant/unwanted messages on projects that have many clips. So I don't understand why `OnNewClip` is not in `InsertClip`, but simple insertion of it seem to be too ""dirty"" fix."
1399684315,5653,vsverchinsky,2023-11-20T19:55:53Z,Why not observer?
1399689038,5653,vsverchinsky,2023-11-20T20:00:29Z,`deserialization` flag feels like extra parameter
1399694565,5653,vsverchinsky,2023-11-20T20:07:21Z,"My guess is that there will be an extra call to `SetColorIndex` during deserialization: one from `OnNewClip`, and second in `HandleXMLAttribute`, right?"
1399737435,5653,Paul-Licameli,2023-11-20T20:54:17Z,"As linked in CRTPBase.h, it's recommended here:

https://learn.microsoft.com/en-us/cpp/cpp/general-rules-and-limitations?view=msvc-170

I use the same in `extract-lib-note-track` which has passed code review but is not yet merged into master.
"
1399738822,5653,Paul-Licameli,2023-11-20T20:55:43Z,"See the bottom of that page
"
1399741865,5653,Paul-Licameli,2023-11-20T20:59:49Z,"I see the same in the logs for the build of `extract-lib-note-track`.  I think I should instead give an inline '{}' body to the dtor in the class definition and let the linker de-duplicate it.
"
1400428663,5653,Paul-Licameli,2023-11-21T11:23:05Z,"How would I create the observers and the subscriptions if WaveTrack is the publisher?

Each new WaveTrack must inform its own listener, which has its own separate state (the wave track color), of the event of addition of clips.

So the listener must be created too with each WaveTrack -- and that's where `ClientData` is useful, if also I use `BuildAll` instead of creation on demand.  It allows hooking of a constructor of a class.

And I need `BuildAll` so that the new attached object is present from the beginning, before any clips are created or deserialized.

But you are right that I could then also use Observer instead of this class.

There is the problem of getting deep-copy right, but that is what `Reparent` is for.
"
1400429819,5653,Paul-Licameli,2023-11-21T11:24:09Z,"I'm not sure of the complete set of messages that will be useful in future.  I could easily use Observer and an enumeration now for creation, deserialization, deletion, ... 
"
1400431032,5653,Paul-Licameli,2023-11-21T11:25:11Z,"Yes, does it matter much?

It would matter in case a file serialized wave color without clip color, but then the clip colors would still be initialized.

I don't think there are any such legacy files, though.
"
1407510341,5653,crsib,2023-11-28T10:02:13Z,I think we should revise the usage of CRTPBase in a separate PR. I have opened a task for that #5704
1484049761,5653,crsib,2024-02-09T09:10:41Z,"Serializable cache is not a usual thing, TBH"
1484057855,5653,crsib,2024-02-09T09:18:09Z,"I think this violates SRP and in a bad way. I missed it somehow, during the first pass of the review, but it caught my eye when I saw color index serialization in the wave cache."
1492104404,5653,crsib,2024-02-16T08:16:33Z,"I have a strong opinion that the fix is worse than the problem. I understand that it is pointless to argue. Otherwise, my review would've ended here."
1952468963,8211,saintmatthieu,2025-02-12T11:28:01Z,Could probably be `const` ?
1952482053,8211,saintmatthieu,2025-02-12T11:34:56Z,"This guy is a `static` and the `UpdateManager` is also a static. Maybe make it a const, non-optional member of the manager ?"
1952487646,8211,saintmatthieu,2025-02-12T11:39:35Z,"Being paranoid: I guess it's better not to share UUID although the user gave her consent than the other way round, right? In that case, `result == wxOK` would be stricter and hence safer."
1952488815,8211,saintmatthieu,2025-02-12T11:40:30Z,(You could even write an `assert(result == wxOK || result == wxNO)`)
1952490227,8211,saintmatthieu,2025-02-12T11:41:30Z,Spelling ;)
1952494395,8211,saintmatthieu,2025-02-12T11:44:56Z,I'm lazy - could you explain why we need this line?
1952522083,8211,saintmatthieu,2025-02-12T12:05:49Z,Just curious: what's the leading `x` for ?
1952554437,8211,saintmatthieu,2025-02-12T12:26:57Z,"I see that not all `Request`s are subject to optional headers, e.g. in `DownloadAvatar`. What's the rule of thumb here ?"
1952561692,8211,kryksyh,2025-02-12T12:32:23Z,"it was asked from the backend team, not sure about that"
1952563442,8211,kryksyh,2025-02-12T12:33:35Z,Yes 😅
1952565478,8211,kryksyh,2025-02-12T12:35:03Z,"Yes, it should be const"
1952571356,8211,kryksyh,2025-02-12T12:39:04Z,"We are setting these headers only for requests sent to the audio.com backend. Avatars and project data requests are sent to the storage, and they do not require those."
1952574816,8211,kryksyh,2025-02-12T12:41:30Z,"After the preferences window is closed, the configuration file is updated, but the Option objects may contain cached data that needs to be updated."
1952598613,8211,kryksyh,2025-02-12T12:58:26Z,"That's a good point, it makes sense."
1952646690,8211,saintmatthieu,2025-02-12T13:27:09Z,"Ok, so I should not expect any `SetOptionalHeaders` outside the lib-cloud-audiocom module.
Still I find it hard to figure out which requests should have the UUID and which not. Is there an explicit list someplace, or anything to help code readers?"
1953009270,8211,kryksyh,2025-02-12T16:25:54Z,"> so I should not expect any SetOptionalHeaders outside the lib-cloud-audiocom module.

yes

> Is there an explicit list someplace, or anything to help code readers?

No, I don't think so"
1609888328,6472,igorkorsukov,2024-05-22T12:46:55Z,"It may be better to pass the entire context as a property, this is done in other places, this can be useful when more properties from it are needed (for example, a selected loop) "
1609897022,6472,igorkorsukov,2024-05-22T12:51:53Z,"no objections, but for information, the theme can be used in the cpp directly, like this
```
Inject<ui::IUiConfiguration> uiconfiguration;

...

uiconfiguration()->currentTheme()
``` "
1609915563,6472,igorkorsukov,2024-05-22T13:03:52Z,"At the moment, the reasons why we need to have a base class with virtual methods and an inheritor are not clear. I believe this is not necessary."
1609916455,6472,igorkorsukov,2024-05-22T13:04:28Z,In AU4 we don't use singletons
1609919823,6472,igorkorsukov,2024-05-22T13:06:46Z,"I think it’s possible in one line... (in AU3, in my opinion, the code width is too small, I think this is a legacy of many years ago, when there were small monitors with low resolution)"
1609931800,6472,igorkorsukov,2024-05-22T13:14:20Z,"It's best to avoid in-out arguments unless clearly necessary.
For example, here I think it’s better to do this:
```
TickInfo TimeFormat::tickInfo(double zoom) const 
{
   ...
}
```
"
1609933644,6472,igorkorsukov,2024-05-22T13:15:27Z,missing return? 
1609937809,6472,igorkorsukov,2024-05-22T13:18:05Z,"better 
```
QString TimeFormat::label(const TickInfo& info, TickType tickType) const
```"
1609940250,6472,igorkorsukov,2024-05-22T13:19:10Z,In AU4 we use `camelCase` for method names
1609944423,6472,igorkorsukov,2024-05-22T13:21:00Z,And I think these methods can be made static for convenience
1609947692,6472,igorkorsukov,2024-05-22T13:22:42Z,see https://github.com/musescore/MuseScore/wiki/CodeGuidelines 
1609948885,6472,igorkorsukov,2024-05-22T13:23:23Z,not necessary for us 
1609950796,6472,igorkorsukov,2024-05-22T13:24:36Z,"here the painter cannot be null, there is no mandatory check"
1609952121,6472,igorkorsukov,2024-05-22T13:25:21Z,"Please do not use auto unless necessary (for example, if the type is too complex)"
1609954278,6472,igorkorsukov,2024-05-22T13:26:22Z,There’s no need to call saves and restore here.
1609957324,6472,igorkorsukov,2024-05-22T13:28:05Z,"I think here it’s better to explicitly set the pen for the painter. 
This code essentially does nothing, it modifies a local variable that is not passed to the painter."
1609960070,6472,igorkorsukov,2024-05-22T13:29:42Z,"there are a lot of objects being passed by non-constant reference, are they all changed by this method?"
1609964624,6472,igorkorsukov,2024-05-22T13:32:07Z,"pen (color) does not change, so there is no need to set it in the loop"
1609965665,6472,igorkorsukov,2024-05-22T13:32:45Z,"pen (color) does not change, so there is no need to set it in the loop"
1609967091,6472,igorkorsukov,2024-05-22T13:33:36Z,In AU4 we use `camelCase` for method names
1609967751,6472,igorkorsukov,2024-05-22T13:33:58Z,not need 
1609971235,6472,igorkorsukov,2024-05-22T13:36:03Z,"It’s better to use a structure with named fields, it’s much more convenient and clearer than `std::get<0>`"
1609979066,6472,igorkorsukov,2024-05-22T13:37:31Z,"Please always initialize with default values, like this
```

struct TickInfo {
    double major = 0.0; // distance between major ticks [s]
...
```"
1609981287,6472,igorkorsukov,2024-05-22T13:38:22Z,there is no need to explicitly call initialization here
1609983481,6472,igorkorsukov,2024-05-22T13:39:42Z,"in AU4 we prefer to use `=` for initialization, and only use `{}` where necessary
```
double m_zoom = 0.0;
```"
1610174197,6472,grliszas14,2024-05-22T15:07:00Z,"It makes sense if you know that there can be different types of rulers in Audacity. I implemented timeline but you can also have ""Beats and measures"" ruler - which needs to have the same methods implemented. I can remove it right now if you want but we're gonna need it later anyway"
1610190614,6472,grliszas14,2024-05-22T15:15:39Z,"Isn't it a good habit to use {} initialization? I mean it has advantage of additional check - it saves you from conversions that lose information like:
int b{8.1} -> will produce compilation error
int b = 8.1 -> will compile, but b is 8 instead of 8.1 
I know it's rather rare case but :P "
1610529838,6472,igorkorsukov,2024-05-22T19:19:13Z,"Yes, I assumed that there might be something like that, but then the architecture must be appropriate. 
that is, then it turns out that there should be something like this:
* Single implementation of timeline for different things
* Must be type of timeline 
* There must be a factory that created a formatter for a given type.

(These are all assumptions, I didn't look at how it was done in AU3 :) )

Yes, everything may be like this... but it may not be like that :) Therefore, I suggest not complicating things until it is clear why it is needed. Because in reality it may be a little different."
1610559240,6472,igorkorsukov,2024-05-22T19:46:09Z,"There may be some benefits to using `{}`, but the big value is readability, and easy to read code means consistent code. It's common practice in the muse framework to use `=`, and there's no good reason to change hundreds of thousands of lines of code to do otherwise :)

More philosophical thoughts, if we use `{}` to initialize class members, then it is consistent to use `{}`  to initialize local variables, but in practice this is not the case, in one place it’s one thing, in another place it’s another :)

Another point, I often see `double v {}`, but this only raises questions about what the default value is, and how much time is spent on thinking depends on the developer’s experience :) In the `double v = 0.0;` option, for developers of any experience the same minimum time of awareness.

i.e., pros and cons of both approaches can be found

If it is important for you to use `{}`, for technical reasons, or you are used to it and think that it is more correct, then I do not insist on using `=`. 
I see that AU3 uses `{}`, so it could be a big cognitive problem to switch to `=` for no obvious reason (other than code consistency) "
1611079042,6472,grliszas14,2024-05-23T06:32:09Z,"It's not that important for me, I'll switch to `=`, that's not a problem :) It's just the first time I see a different opinion about that, but it's always good to get a different point of view - that's why I asked. Good point with `double v{}`, I didn't think about that"
1611080264,6472,grliszas14,2024-05-23T06:33:29Z,"Sure, then I'm going to remove base class for now"
1611624288,6472,igorkorsukov,2024-05-23T12:41:07Z,I think it can be one line 
1611631775,6472,igorkorsukov,2024-05-23T12:46:24Z,"better get this values once, not on each loop iteration"
1613304394,6472,grliszas14,2024-05-24T11:11:40Z,fixed
1613304488,6472,grliszas14,2024-05-24T11:11:44Z,fixed
1469226612,5899,crsib,2024-01-29T08:26:38Z,"I don't expect this class to be used anywhere except for the current Effects implementation. It makes very strict assumptions about the Reader/Writer and gives a fair amount of problems due to its' double buffering, which made 3.2 such a torture."
1469228090,5899,crsib,2024-01-29T08:27:37Z,"This class uses `this_thread::yield` every second loop and doesn't use `pause`. It makes sense, but not exactly correct."
1469230102,5899,crsib,2024-01-29T08:28:44Z,This library is surely long needed.
1469233583,5899,crsib,2024-01-29T08:32:08Z,"I see absolutely no justification for using exceptions here. They are meant to signal exceptional situations. In the worst case, they can be used to get back deep into the call stack, but that always indicates serious problems with program design."
1469260885,5899,crsib,2024-01-29T08:56:19Z,Reporting progress is very complex in MT environments. I'm not sure that this value will be meaningful by the time the progress is reported.
1469267455,5899,crsib,2024-01-29T09:01:51Z,"This, however, introduces **false sharing**, which is a problem in this case. `abandoned` is mostly read, and rarely modified (never, ideally). `total` is modified every call to `operator ()`, effectively invalidating `abandoned` for every other CPU."
1469272601,5899,crsib,2024-01-29T09:06:22Z,"This looks like a cancellation pattern but with progress tracking. I don't think that the progress tracking is accurate or needed here.

At the same time, I think that using an exception and, specifically, an exception from the `details` namespace reduces the scope where this class is useful. "
1469272935,5899,crsib,2024-01-29T09:06:41Z,What is the justification of the capital P here?
1469273925,5899,crsib,2024-01-29T09:07:31Z,"No license identifier. Previously, Audacity ignored it in most files, but that is not correct. "
1469290575,5899,crsib,2024-01-29T09:20:42Z,Why? This limits the use of this class.
1469291704,5899,crsib,2024-01-29T09:21:31Z,Typo in `seriallyx`
1469293991,5899,crsib,2024-01-29T09:23:18Z,Good!
1469298485,5899,crsib,2024-01-29T09:26:43Z,"What is the justification for making progress callable? I would not object if the users below were allowed to receive a callable instead of progress. However, Progress is used only to stop the workers if the exception occurs."
1469299382,5899,crsib,2024-01-29T09:27:24Z,I find such code to be very poorly readable. 
1469303947,5899,crsib,2024-01-29T09:30:39Z,"I like that the assertion is not the only check, but do we need the `n_threads > 0` at all?"
1469305155,5899,crsib,2024-01-29T09:31:39Z,I am very concerned about this code. It must be rewritten without the comma. 
1469312138,5899,crsib,2024-01-29T09:36:30Z,"Contrary to the previous place, I see very little reason to split this into multiple lines instead of using ++index right in place. "
1469314006,5899,crsib,2024-01-29T09:37:59Z,"I can't say I like this, but I understand that this is safe."
1469315838,5899,crsib,2024-01-29T09:39:20Z,Not having thread pools limits the usability of this function quite significantly. 
1469355245,5899,crsib,2024-01-29T10:05:40Z,"If I understand correctly, this function may put CPU to 100% load during the playback. There must be more control over the thread priorities and count here. "
1469364578,5899,Paul-Licameli,2024-01-29T10:12:14Z,"It was first written and used in scrubbing to communicate to the thread that fetches audio in response to mouse movements.

That file is just moved without change and does not need review.
"
1469366071,5899,Paul-Licameli,2024-01-29T10:13:26Z,"That file too is just moved unchanged and not used in the new files.
"
1469371665,5899,Paul-Licameli,2024-01-29T10:17:46Z,"The alternative is to complicate how tasks are written, requiring them to test and exit.

It is simpler instead to let them use a possibly non-returning function, which also, in the future C++20 version perhaps, would instead become a coroutine suspension point.  Then there could be the possibility of non-resumption or migration of a task to another thread in a more sophisticated task scheduler.
"
1469373488,5899,Paul-Licameli,2024-01-29T10:19:08Z,"Very good point.  And this is why I wrote the `NonInterfering` utility class template, which should more to lib-concurrency and be used here.
"
1469375300,5899,Paul-Licameli,2024-01-29T10:20:33Z,"None really.

We don't have very well defined conventions.

We have already namespace Observer"
1469379783,5899,Paul-Licameli,2024-01-29T10:23:53Z,"At least when the supplied argument is 1, you know that the task just runs serially on the calling thread, so you can easily confirm first that the algorithm is serially correct before debugging it with multiple threads.

In the first application of this algorithm for tempo detection, the calling thread is the main thread and is the only one that may update the progress dialog.
"
1469381766,5899,Paul-Licameli,2024-01-29T10:25:25Z,"It's the unfortunate correct way to forward an argument perfectly.
"
1469383258,5899,Paul-Licameli,2024-01-29T10:26:32Z,"Wrong -- `index` is used twice in arguments of a constructor and order of evaluation is not specified.  I must increment only in another statement.
"
1469384410,5899,Paul-Licameli,2024-01-29T10:27:25Z,"Synchronizing on the get of a future of a packaged_task that runs on the thread should be equivalent to joining the thread.
"
1469385759,5899,crsib,2024-01-29T10:28:26Z,"> The alternative is to complicate how tasks are written

I can have a task where I need to handle complications explicitly. I do have such use cases now, but not using this class, obviously. 

I don't see how handling the result complicates anything. "
1469386483,5899,Paul-Licameli,2024-01-29T10:29:02Z,"I didn't want to distract myself yet with writing a thread pool too.  I wanted to get to a demonstration of some real performance wins and also ease of use of the new utility in a few places.

Do we already have a usable thread pool in a third party library/
"
1802849473,7561,kryksyh,2024-10-16T10:39:22Z,"@Eism i don't like the code duplication here, how can I propagate the action from TrackeditActionsController to QML item?"
1802856579,7561,Eism,2024-10-16T10:43:48Z,please add nullptr check here
1802863007,7561,Eism,2024-10-16T10:47:51Z,Previous version was better: verb + noun 
1802864843,7561,Eism,2024-10-16T10:48:46Z,also please add nullptr check
1802869632,7561,Eism,2024-10-16T10:51:13Z,I think you first should remove the track and then send a notification
1802889398,7561,kryksyh,2024-10-16T11:06:01Z,I can't agree with that. 
1802891373,7561,kryksyh,2024-10-16T11:07:42Z,"What if a subscriber tries to access data associated with the track directly or indirectly, say the name of the deleted track? If the track is deleted its data will be unavailable."
1802898022,7561,Eism,2024-10-16T11:13:02Z,"Registering such actions is used in cases where we know for sure that these actions will be used in several places and usually they do not depend on the UI, i.e. in the case of track-rename I would assume that it accepts trackId and newName - the data is prepared and only needs to be applied.

I am not sure that there is an action for renaming a track, so I would suggest not registering such an action and simply handling the rename call - call titleEdit in qml. 
So probably we need a previous solution with `var operations` for MenuButton"
1802905555,7561,kryksyh,2024-10-16T11:19:26Z,"But, i'm okay to stick to either style, but we should enforce it. Right now there is a total mess in [itrackeditinteraction](https://github.com/audacity/audacity/blob/71a065085879ac3f265d66574f796f0729972247/src/trackedit/itrackeditinteraction.h#L34)
"
1802911137,7561,kryksyh,2024-10-16T11:24:08Z,"in Qt they solved the problem by emitting two events `xxxAboutToBeRemoved` and `xxxRemoved` which we do not have in AU3 yet.
So I would rather have this event before the data is gone."
1804252221,7561,Eism,2024-10-17T07:28:44Z,no longer needed
1804400906,7561,kryksyh,2024-10-17T09:09:23Z,@Eism UiAction is needed to populate the menu; please correct me if I'm wrong. 
1804603965,7561,grliszas14,2024-10-17T11:35:17Z,"I would add

```c++
if (m_trackId == newTrackId) {
    return;
}

``` "
1804608658,7561,grliszas14,2024-10-17T11:39:13Z,"shouldn't it be Effects? (looking at Q_INVOKABLE function in trackslistmodel)
```qml
tracksModel.openEffectsForTrack(model.index)
``` 

"
1804618727,7561,grliszas14,2024-10-17T11:47:39Z,"ups, looks like my formatter stopped working 😬 "
1804631549,7561,kryksyh,2024-10-17T11:57:47Z,"oops, typo, thanks"
1804632708,7561,kryksyh,2024-10-17T11:58:45Z,sure
1804841090,7561,igorkorsukov,2024-10-17T13:57:59Z,"I don't find the implementation of this method in this PR.. but its presence here may be a problem.
Usually the actions are received by the controller, which calls the service.. which performs the action and notifies about the change, the view model is subscribed to the changes..."
1804845024,7561,igorkorsukov,2024-10-17T14:00:08Z,"in fact, all these constants can be omitted... this is how it is done historically... but there is little sense and convenience (rather, it is even inconvenient)"
1804849624,7561,igorkorsukov,2024-10-17T14:02:47Z,"This should be called in trackeditInteraction()->deleteTrack.
The point is that if trackeditInteraction()->deleteTrack is called from somewhere else.. the logic associated with the history should also be executed, i.e. it is part of the logic of the trackeditInteraction()->deleteTrack method"
1804904526,7561,grliszas14,2024-10-17T14:32:23Z,"Actually I started to think about that in terms of implementing clip overlapping: when you move a clip over another clip in the end you end up with doing multiple actions at once:
 1. Clip move
2. Clip trim or clip delete

Both of these will add state to the undo-stack while I think it should be considered as one action
What do you think?"
1804917797,7561,igorkorsukov,2024-10-17T14:40:07Z,"yes, it looks like one action.
in such cases usually something like this (schematically): 
```
void moveClip(..)
{
    doMoveClip(..);
    pushHistoryState(...);
}

void trimClip(..)
{
    doTrimClip(..);
    pushHistoryState(...);
}

...
void overlapClip(..) 
{
   doMoveClip(..);
   doTrimClip(..);
   pushHistoryState(...);
}

or like this 
void moveClip(.., bool canOverlap)
{
      doMoveClip(..);
      
      if (canOverlap) {
           doTrimClip(..);
           ...
      }
      
      pushHistoryState(...); 
}
```

i.e. there are private methods that perform one action without side effects
there are public methods that perform some logic using the algorithm with private methods 
  
  "
1804929107,7561,igorkorsukov,2024-10-17T14:46:55Z,"There is also this option: 

```
void moveClip(.., bool isModifyHistory = true)
{
    //  do move clip
    ...
    
    if (isModifyHistory) {
        pushHistoryState(...);
    }
}

void overlapClip(.., bool isModifyHistory = true)
{
   moveClip(.., false /*isModifyHistory*/);
   trimClip(.., false /*isModifyHistory*/));
   
   if (isModifyHistory) {
       pushHistoryState(...);
   }
}

```
but the first option with private methods without side effects is better
"
1804959958,7561,kryksyh,2024-10-17T15:05:22Z,"Yes, it was a leftover, removed."
1804960217,7561,kryksyh,2024-10-17T15:05:33Z,"Okay, removed"
1806045916,7561,Eism,2024-10-18T07:52:34Z,"in the case of track-rename, we have to create MenuItem manually and add it to the list"
1806188261,7561,igorkorsukov,2024-10-18T09:29:27Z,to understand why this item is created manually and not from an action?
1806190806,7561,igorkorsukov,2024-10-18T09:31:23Z,"Here you need to explicitly specify TranslatableString
Otherwise the utility for generating the file for translation will not process these lines (there is just a parser by keywords, TranslatableString is a keyword)"
1806194201,7561,kryksyh,2024-10-18T09:33:47Z,"Here is the discussion with @Eism 
https://github.com/audacity/audacity/pull/7561#discussion_r1804252221"
1806195231,7561,kryksyh,2024-10-18T09:34:33Z,Basically because the rename is only to be executed from the context menu
1806195476,7561,kryksyh,2024-10-18T09:34:45Z,"I see, thanks"
1806196055,7561,igorkorsukov,2024-10-18T09:35:14Z,@Eism @kryksyh to understand why this item is created manually and not from an action? 
1806201237,7561,igorkorsukov,2024-10-18T09:38:58Z,"I don't think that's the reason, most of the action is from one place now... but that's changing.. "
1806204922,7561,igorkorsukov,2024-10-18T09:41:06Z,"For example, I really like the control that is sometimes used on websites, when you hover the mouse over the action button - and the actions open up in a fan, usually there are 3-5 actions, the most popular ones... :) "
1806228646,7561,kryksyh,2024-10-18T09:55:09Z,Are you talking about [pie-menu](https://en.wikipedia.org/wiki/Pie_menu)? That actually would be awesome to have as optional feature.
669643255,1295,Paul-Licameli,2021-07-14T14:00:32Z,"The commit comment means ""now"", not ""not"", right?
"
669643878,1295,Paul-Licameli,2021-07-14T14:01:11Z,"ShuttleGui.* all look good
"
669644469,1295,Paul-Licameli,2021-07-14T14:01:51Z,"I'd `emplace_back` instead, unimportant"
669645814,1295,crsib,2021-07-14T14:03:31Z,"Yes, I will fix that"
669651901,1295,Paul-Licameli,2021-07-14T14:10:35Z,I think this function and the next would be nicer as const.  The format arguments array should remain unchanged.  This is not imporant enough to block the PR.
669652728,1295,Paul-Licameli,2021-07-14T14:11:33Z,"Why stable sort?  How could two FormatArguments have the same PlaceholderPosition now?  Maybe if one placeholder is a prefix of another?  Hm, sounds like a caller mistake then."
669654542,1295,Paul-Licameli,2021-07-14T14:13:31Z,I see that this explains why wxWrapSizer was not constructed with `wxREMOVE_LEADING_SPACES`
669657159,1295,Paul-Licameli,2021-07-14T14:16:24Z,"I'm done with this commit, approve it so far with suggestions for later
"
669663102,1295,crsib,2021-07-14T14:22:58Z,"This is an edge case handling. I'm not sure, that this edge case will ever occur.

Technically it is possible, that a placeholder is missing from the translation to one language, but is present in another (why? I don't know).

In this case, `placeholderPosition` will be `npos`. If we have several cases of that - `stable_sort` will preserve the original order for the format arguments.

So I think, that for 99.9% of cases `sort` is sufficient. 

But for the majority of cases, both `sort` and `stable_sort` will be no-op, because there will be only one item to format."
669665189,1295,Paul-Licameli,2021-07-14T14:25:10Z,"Maybe other uses of mView in this file should have null checks too
"
669665337,1295,Paul-Licameli,2021-07-14T14:25:20Z,ok
669667350,1295,Paul-Licameli,2021-07-14T14:27:31Z,MIght just be `Read` because false IS the default specified for that settings object
669667544,1295,Paul-Licameli,2021-07-14T14:27:40Z,Might also just be `Read`
669668387,1295,crsib,2021-07-14T14:28:32Z,"I'm not aware of other crashes, but I will check.

This one I found out accidentally while testing "
669668602,1295,Paul-Licameli,2021-07-14T14:28:46Z,"Add `gPrefs->Flush();`
"
669670733,1295,Paul-Licameli,2021-07-14T14:31:01Z,"Do we want to spell out ""Application""?"
669671813,1295,Paul-Licameli,2021-07-14T14:32:09Z,"* how to turn
* is replaced with
"
669674187,1295,Paul-Licameli,2021-07-14T14:34:49Z,"Move the comment to the line just before the XO
"
669674412,1295,Paul-Licameli,2021-07-14T14:35:04Z,"Same question about ""App""
"
669681016,1295,Paul-Licameli,2021-07-14T14:41:52Z,"Move the hint to the line before the XXC
"
669683559,1295,Paul-Licameli,2021-07-14T14:44:38Z,"No problems here, but there is duplication of code in UpdateNoticeDialog.  Later in master, fix the duplication.  Maybe a common function taking ShuttleGUI&.
"
669683674,1295,crsib,2021-07-14T14:44:46Z,I've asked Jouni about it
669687044,1295,Paul-Licameli,2021-07-14T14:48:24Z,"Large number of moved lines makes this diff hard to understand
"
669689434,1295,Paul-Licameli,2021-07-14T14:50:56Z,"Sorry I must return to this commit later today.
"
669701773,1295,crsib,2021-07-14T15:04:10Z,"A huge text blob in the middle of the layout made it very hard to read and debug. Probably, I should move the license blob to a different file, so the diff will be shorter"
669822671,1295,crsib,2021-07-14T17:40:51Z,"This would make the algorithm much more complex or use extra memory. The second is feasible, I think"
669823117,1295,crsib,2021-07-14T17:41:31Z,It will also allow replacing stable_sort with sort
669878340,1295,Paul-Licameli,2021-07-14T19:04:55Z,These is a way for msgfmt to make errors if the format substitutions don’t match.  Let’s make sure to use it when accepting translations.
669883472,1295,crsib,2021-07-14T19:13:05Z,"I'm not quite sure what I should here.

BTW stable_sort is replaced by sort as a part of addressing another comment"
670033700,1295,Paul-Licameli,2021-07-15T00:09:00Z,"My last comment mentioned something I should remember in the next round of acceptance of translations, not anything for you to do now.

If English has %s but some .po file omits it, I think there is a way to detect that error when I accept translations.
"
1427776485,5789,LWinterberg,2023-12-15T09:51:52Z,"""Copy selection timestamp"" would be the better string for this function. "
1427801560,5789,LWinterberg,2023-12-15T10:16:52Z,"Why is copy bound to the word ""selection""? It's not a clickable part of the UI, meaning it's not a place where you'd click and expect anything to happen. I'd expect Ctrl+c to copy if one of the NumericTextCtrl boxes is focused. "
1427815256,5789,LWinterberg,2023-12-15T10:29:37Z,"It is unusual for timestamps to be of variable length. They usually are more useful to be used in conjunction with other programs, and those other programs usually expect a fixed format like ISO 8601 or SMPTE timecodes. I'm not saying that our output _must_ be one of these standards - but imagine implementing a reverse function, where you can paste a timestamp into the NumericTextCtrl. If the timecode was always the same, it'd simplify things."
1427841606,5789,LWinterberg,2023-12-15T10:57:00Z,"I think this is the wrong place for this menu entry - the function will happily copy a point selection (just the black line) as eg 3m57.117s-3m57.117s. The menu entry can just live directly in the Select menu, underneath ""store cursor position"". "
1427884015,5789,lededev,2023-12-15T11:44:50Z,"Receive, modify menu location and menu item description."
1427884231,5789,lededev,2023-12-15T11:44:58Z,"OK, Because this time control has multiple display formats, I will leave the output as is and just remove the spaces."
1427884354,5789,lededev,2023-12-15T11:45:03Z,"This is more efficient, as you only need to move the mouse to click once, and the right-click will not lose the focus of the audio selection. Why not let us keep the right click, delete the double click, and then implement a regular operation of Ctrl+C to mTimeControls?"
1427967074,5789,LWinterberg,2023-12-15T13:18:30Z,"If we only were concerned about making timecode copying more efficient, you'd be absolutely right. You even could dedicate a copy button next to the selection settings button to give that functionality some affordance, so it's possible to figure out you even can copy without consulting the manual. 

Unfortunately, we can't really do that. Audacity has millions of users all with different needs and most of them casual. Copying timecodes is not important enough to warrant a permanently visible button, and as we're working on simplifying the app, adding invisible/""you have to read the manual to find it"" features is going in the wrong direction. 

The compromise solution here is to allow users which need this function to set themselves one-button shortcuts, and that is something you can do for any menu item:

![image](https://github.com/audacity/audacity/assets/87814144/cdb5f0f7-3d48-47d6-bbf7-7582975a0ca9)


"
1427978429,5789,lededev,2023-12-15T13:30:47Z,"Configuring shortcut keys is indeed convenient for keyboard-focused users, but for users who use the keyboard and mouse more balancedly, positioning the mouse on a text label and right-clicking to complete a shortcut function is as convenient as keyboard shortcuts. If possible, I hope to retain the mouse shortcut operation of right-clicking the ""Select"" text label on the toolbar to activate this function. That position will not cause any side effects, and since there will be a system floating window notify after the operation, it will not cause any confusion to the user."
1427991901,5789,DavidBailes,2023-12-15T13:45:01Z,"> I'd expect Ctrl+c to copy if one of the NumericTextCtrl boxes is focused.

I'm not sure the user would expect this. They may well be using these controls to fine tune a time selection, and then press Ctrl + C to copy the audio the audio to the clipboard. So I don't think changing the effect of the shortcut here is a good idea."
1427998721,5789,lededev,2023-12-15T13:52:18Z,"Only when mTimeControls got focus, then they can handle Ctrl+C, and that time, user can not copy audio because focus not on track window.
I just think that the operation of first clicking to select the time control and then pressing Ctrl+C is a bit cumbersome, this requires a combination of mouse and keyboard and cannot be completed with one hand. And it will make the track selection area lose focus."
1428014340,5789,DavidBailes,2023-12-15T14:08:06Z,"> and that time, user can not copy audio because focus not on track window.

Oh yes they can!"
1428021999,5789,lededev,2023-12-15T14:15:29Z,"> Oh yes they can!

In that case, I also agree to remove Ctrl+C. This is just a small function. It seems to be enough to provide a configurable keyboard shortcut and a mouse shortcut operation entrance."
1798899165,7515,igorkorsukov,2024-10-14T07:32:36Z,"let's add  `using TrackIdList = std::vector<TrackId>;` 
"
1799104985,7515,grliszas14,2024-10-14T09:50:42Z,fixed
1801037172,7515,saintmatthieu,2024-10-15T12:05:04Z,"As discussed 1-1: there is no plan for discontinuous time selection (@LWinterberg please confirm), hence the time selection can entirely be determined by m_selectedStartTime and m_selectedEndTime."
1801044450,7515,saintmatthieu,2024-10-15T12:10:34Z,"In Audacity 3, some logic like the generators determine where to generate based on this time selection and the (possibly discontinuous) set of selected tracks.
In Audacity 4, with discontinuous clip selection, it seems to me like there is going to be an additional, prevailing logic: generators will first check if there are selected clips (`m_selectedClip` will by then be `m_selectedClips`) and use this as placeholder, else it will fall back on the Au3 behavior."
1801055990,7515,igorkorsukov,2024-10-15T12:19:14Z,"we have some help functions for work with containers https://github.com/musescore/framework_tmp/blob/main/framework/global/containers.h

```
#include ""global/containers.h""

...
muse::contains(idsToModify, trackId);

```"
1801056754,7515,igorkorsukov,2024-10-15T12:19:43Z,see https://github.com/audacity/audacity/pull/7515/files#r1801055990
1801258998,7515,saintmatthieu,2024-10-15T14:12:47Z,`const TrackIdList&`
1801259360,7515,saintmatthieu,2024-10-15T14:13:00Z,... and below
1801260629,7515,saintmatthieu,2024-10-15T14:13:38Z,Would you rename to `splitTracksAt` ? It reads better.
1801267820,7515,saintmatthieu,2024-10-15T14:17:22Z,Could you make this method internally call `setSelectedTracks({})` ? It would make easier to recognize that the logic is the same for both.
1801289224,7515,saintmatthieu,2024-10-15T14:26:18Z,`pasteIntoNewTracks()` seems more correct?
1801345389,7515,saintmatthieu,2024-10-15T14:52:50Z,"I don't really understand this undo logic overall:
1. get the index of the first selected track in the project (which could be `trackIdList.size()` if none is selected), call it _i_
2. undo,
3. reload the tracks from the project, which provides new track list.
4. set the _i_th track from the reloaded list as the selected track.

Would that work if:
a. I create and select a track,
b. I create a new track - it should get automatically selected.
c. I undo.
In this case, _i_ would be `1`, but `newTrackIdList.size() == 1`, and no track would be selected anymore.

I Audacity 3, the selection reverts to the track created in step a. I wonder how it's implemented there, or what undo manager the muse framework provides and if it could be reused just for the track selection state."
1802479232,7515,grliszas14,2024-10-16T07:05:09Z,"I will create a new task for it, this case needs some extra care - it's not working as intended anyway (and never was based on your example) "
1802554399,7515,saintmatthieu,2024-10-16T07:57:28Z,nice
1802589175,7515,saintmatthieu,2024-10-16T08:17:36Z,"It seems to me that all `selectionActive`-related members (signal, getter, setter, state variable) are not used externally at all, as a consequence of which it should be removed to simplify and clarify the logic even more. Or is there a reason to keep it I'm missing?"
1802599067,7515,saintmatthieu,2024-10-16T08:23:35Z,"This confused me for a while, I thought we might really pass a range, but in fact, looking at line 22 shows that `m_startPoint.y()` just equals `y` at this stage.
At least please replace `m_startPoint.y()` with just `y` to help the slow-minded of my kind understand your code better. You could even have a `determinateTrack(double y)` that'd internally just call `determinateTracks(y, y)`, but that'd be a stretch."
1802605708,7515,saintmatthieu,2024-10-16T08:27:10Z,"BTW, you have a `::resetDataSelection` method in this class that does this, which you could probably get rid of."
1802611302,7515,saintmatthieu,2024-10-16T08:30:29Z,"I think this method might be simplified to
```
void SelectionViewController::onPressed(double x, double y)
{
    m_selectionStarted = true;
    m_startPoint = QPointF(x, y);
    emit selectionStarted();

    selectionController()->resetDataSelection();
    TrackIdList tracks = determinateTracks(m_startPoint.y(), y);
    selectionController()->setSelectedTracks(tracks, true);
}
```
which would also make it behave more like AU3. Say I have two tracks selected, and I click on one of them to drag my selection. In Audacity 3, this will deselect the non-clicked track, while here it won't.
Or was this a new spec I'm not aware of?"
1802639426,7515,saintmatthieu,2024-10-16T08:47:26Z,"About `isDataSelected()` : I'm not sure what it is supposed to tell its clients? For sure it's only about time (it doesn't consider whether a track is selected or not). It would return true if start time were 10 and end time were 1.
Start and end time setters are part of the public interface, and I don't see sanity checks to make sure that end time is never set to something less than start time, so it could happen. I'm not saying that these checks should be added now, but if this isn't intended to be possible and `isDataSelected` intends in fact to say `timeSelectionIsNotEmpty`, then I would like it to be renamed as such. It is used in many places in the code, and this could reveal bugs.

Likewise for `isDataSelectedOnTrack`: what it tells now is only whether the track of the given ID is selected or not, so I would like this see renamed to `isTrackSelected`."
1802647093,7515,saintmatthieu,2024-10-16T08:52:08Z,I forgot: the implementation of `isDataSelected` should also add the `&&` that end time is strictly larger than start time (if negative selection spans are indeed not intended).
1802665930,7515,grliszas14,2024-10-16T09:02:10Z,"hmmm, it's actually used in TracksClipsView.qml

`property bool isNeedSelectionCursor: !selectionController.selectionActive && mainMouseArea.mouseOnTracks`"
1802720861,7515,grliszas14,2024-10-16T09:23:49Z,"it's used on qml side so I can't remove it but it will be good to use it here instead of these two lines, good catch :D"
1802811086,7515,saintmatthieu,2024-10-16T10:18:03Z,"I think that last check must `m_selectedEndTime.wav > m_selectedStartTime.val`, shouldn't it? i.e. if they are equal, this method should return false - I think."
1802831590,7515,saintmatthieu,2024-10-16T10:26:31Z,"That makes a lot of sense now.
I'm wondering more and more if `m_selectedTracks` couldn't disappear in favor of calls to `selectionController()->selectedTracks()`, to avoid this app state being maintained in two places. Or does something speak against it?"
1802845092,7515,saintmatthieu,2024-10-16T10:35:52Z,I looked and it seems to me that this `m_audioDataSelected` variable could disappear and query `selectionController()->timeSelectionIsNotEmpty()` where its value is read.
1802846376,7515,saintmatthieu,2024-10-16T10:36:50Z,Nice.
1802848329,7515,saintmatthieu,2024-10-16T10:38:23Z,"I'm more confident now: `doGlobalCut()`, `doGlobalDelete()` and other such should check this, and be no-opts if the selection is just a point selection."
1802882942,7515,grliszas14,2024-10-16T11:01:00Z,"I'd like to get rid of it too but for now it's ""not possible"", meaning: it will break sync of track headers and tracks in the clips view. I will address it anyway as I believe Sergey will find out what's wrong with it but I need to extend muse framework first. As this may take some additional time until this thing gets merged into musescore I suggest we merge it for now as is. Added appropriate comment in the code though"
1802894600,7515,saintmatthieu,2024-10-16T11:10:11Z,Smart 😎 
1802897556,7515,saintmatthieu,2024-10-16T11:12:41Z,"If `m_strackList.size() == 0`, `index(m_trackList.size() - 1)` will wrap around to an enormous number, won't it? It that's intended, please add a comment, otherwise typecast to index before subtracting."
1803066821,7515,igorkorsukov,2024-10-16T13:04:43Z,"I think this logic should not be in a view model, but in the controller itself (in the setSelectedClip method). i.e. if this method is called from another place, the logic should be exactly the same"
1803074102,7515,igorkorsukov,2024-10-16T13:09:24Z,looks like it's time to write unit tests for this controller :) 
642968339,948,Paul-Licameli,2021-06-01T10:10:55Z,"Let's avoid C-style casts or function notation for scalar types.

Either use uniform initialization where you can:
'uint8_t{...}'

Or if you can't (because UI doesn't allow narrowing; if HexCharToNum returned int for instance), then use static_cast.
"
642969586,948,Paul-Licameli,2021-06-01T10:12:41Z,I lately came across similar concerns preparing my updated less-dithering branch.
642974354,948,crsib,2021-06-01T10:20:00Z,"Well, actually it is a C++ cast using converting constructor or whatever it's called. I can change it to static_cast, although this form is shorter and more expressive.

The cast itself is required because of integer promotion rules when performing <<"
642975210,948,Paul-Licameli,2021-06-01T10:21:19Z,"Interesting that you use noexcept.  I haven't formed that habit yet.  I often say in code comments that there are parts of the code that must be no-throw.  The annotation could be useful.

The compiler does not have to prove that exceptions are impossible from a noexcept function (and even if it could, the program would still be valid).  Rather the standard requires calls to terminate will happen if exceptions do try to escape.

But I'm not familiar with whatever warnings compilers make that could help you make such a proof.
"
642977181,948,crsib,2021-06-01T10:24:17Z,"I will remove it here, it was just a force of habit. I worked on the platform with no exception, so having noexcept everywhere made code behave similarly everywhere"
642980276,948,Paul-Licameli,2021-06-01T10:28:55Z,"#pragma once or follow the convention for #include guards?
"
642980844,948,Paul-Licameli,2021-06-01T10:29:51Z,#pragma once is not standard
642981246,948,crsib,2021-06-01T10:30:32Z,I really think we should change our conventions. I've never seen a single compiler that had no support for pragma once
642985152,948,Paul-Licameli,2021-06-01T10:37:03Z,"I didn't say remove it!
"
642988180,948,Paul-Licameli,2021-06-01T10:42:05Z,"Ahh, spaceship.
"
642994634,948,Paul-Licameli,2021-06-01T10:52:32Z,No comments?
642995157,948,Paul-Licameli,2021-06-01T10:53:21Z,"Comment that these are lexicographical?
"
642997900,948,Paul-Licameli,2021-06-01T10:57:44Z,"Is one purpose of this to allow a set or map of these values?

Is it worth the trouble also to customize std::hash<Uuid> for unordered containers too?
"
642998573,948,crsib,2021-06-01T10:58:48Z,"Excellent point, I will implement it!"
642999027,948,Paul-Licameli,2021-06-01T10:59:33Z,"I might assert that return value is 36
Then define a constant so I don't repeat 36
"
642999154,948,Paul-Licameli,2021-06-01T10:59:45Z,"ditto assertion
"
642999514,948,Paul-Licameli,2021-06-01T11:00:19Z,"return const Bytes & ?
"
642999697,948,crsib,2021-06-01T11:00:36Z,"Well, it is wrong here anyway. `std::vector` has a throwable copy constructor. 

Anyway, besides the generated code size it only matters for move constructors. I will add one :)"
643000808,948,Paul-Licameli,2021-06-01T11:02:24Z,"`
// C++20
return std::none_of(mData.begin(), mData.end(), std::identity);
`
:-)
"
643001837,948,Paul-Licameli,2021-06-01T11:03:58Z,"Uninitialized or zeroes?  Say
"
643002722,948,Paul-Licameli,2021-06-01T11:05:29Z,"Constructs zeroes, not uninitialized.  Say.
"
643004854,948,crsib,2021-06-01T11:09:05Z,"Oh, it has std::array, ignore my part about std::vector"
643005287,948,Paul-Licameli,2021-06-01T11:09:44Z,"Subtract 1 from inputEnd if hasBraces?

readByte won't err if you don't, but I had to reread it
"
643007363,948,Paul-Licameli,2021-06-01T11:13:05Z,"You require that str is exactly a Uuid or a brace-enclosed one, else return nil.

You aren't writing a function that just allows a prefix of a string to be a Uuid.

Comment that.  Though maybe I am supposed to guess that because the function isn't also returning a std::string::const_iterator.
"
643007805,948,Paul-Licameli,2021-06-01T11:13:51Z,"When I ask for comments, I mean in the header.  Because it's about the contract, not just the implementation.
"
643009512,948,Paul-Licameli,2021-06-01T11:16:40Z,"I try to be alert to truncation problems.  Sure, there is no harm here.

So actually it's just the first operand of | that needs a static_cast.
"
643009644,948,Paul-Licameli,2021-06-01T11:16:52Z,"I'm done
"
643011512,948,Paul-Licameli,2021-06-01T11:20:03Z,"A separate move ctor wouldn't make sense for a std::array argument
"
643012692,948,Paul-Licameli,2021-06-01T11:21:59Z,"Ah, one more thing.

Why not negate the return value, and call this explicit operator bool ?
"
643013573,948,Paul-Licameli,2021-06-01T11:23:28Z,That could make it more concise to declare a Uuid variable within `if(...)` and narrow its scope.
643423130,948,Paul-Licameli,2021-06-01T19:29:57Z,"Visibility might be unnecessary.  It's all inline.
"
643423646,948,Paul-Licameli,2021-06-01T19:30:50Z,"@brief
should start that line.  Or break it out before the `/*!` on a `//!` line.
"
675199981,1323,Paul-Licameli,2021-07-22T22:21:37Z,"This might be just a constexpr variable.

Or even just wxPATH_SEPARATOR which is acceptable (belonging to wxBASE)"
677039421,1323,Paul-Licameli,2021-07-27T00:55:51Z,"This line made me look up what `download` is in VersionPatch.h.  I see it is a wxString.  But that is uninformative.

I like wrapping strings up in classes that indicate the purpose of the string, to prevent mistaken inter-conversions.  And there exists a type URLString, lately added.

Can you use that type in VersionPatch.h?  Can you insert a commit in the sequence before this commit, to make that change?
"
677043260,1323,Paul-Licameli,2021-07-27T01:08:08Z,"- is downloadReponse really needed in the lambda capture?
- Are you sure this lambda executes in the main thread?  (try a breakpoint). If not, are you sure it is safe to destroy the dialog?  If not, then consider CallAfter.
- But then, mProgressDialog should not be a unique_ptr.  It should be a wxWindowPtr<>.  Remember that wxWindow objects have special memory management and should not be handled with the usual C++ smart pointers.
- https://docs.wxwidgets.org/3.0/classwx_window_ptr_3_01_t_01_4.html"
677043962,1323,Paul-Licameli,2021-07-27T01:09:59Z,"Repeat my question about the lambda capture.
"
677076944,1323,Paul-Licameli,2021-07-27T02:46:33Z,"Wait, is mVersionPatch.download a url or is it a file name?  I'm confused now.
"
677077405,1323,Paul-Licameli,2021-07-27T02:47:48Z,"Maybe you can get away with this, extracting the last path component.  It's a little hacky.
"
677078096,1323,Paul-Licameli,2021-07-27T02:49:55Z,"You might use the recently added BasicUI::MakeProgress() to make this bit of code ""toolkit-neutral.""  But it is not important, yet, to do that here.
"
677079075,1323,Paul-Licameli,2021-07-27T02:53:04Z,This variable is not yet used.  I suppose a later commit?  Then it might be added with that commit.
677080685,1323,Paul-Licameli,2021-07-27T02:57:45Z,"I see a problem.  This line might crash, though in very unusual cases.

You assign mProgressDialog only once (in std::call_once).  You use it here, outside that lambda.  But you destroy it in the request-finished callback.

So, what happens if the program runs so long that GetUpdates() is called twice?
"
677080946,1323,Paul-Licameli,2021-07-27T02:58:36Z,Is call_once really right?  Or should you do this each time?  See elsewhere about lifetime of the progress dialog.
677083474,1323,Paul-Licameli,2021-07-27T03:06:49Z,"Why not use this constructor of wxFileName:
    wxFileName(const wxString& path,
               const wxString& name,
               wxPathFormat format = wxPATH_NATIVE)
"
677086637,1323,Paul-Licameli,2021-07-27T03:16:32Z,"Why not do this error checking?
"
677088172,1323,Paul-Licameli,2021-07-27T03:21:55Z,"What if there was an error downloading?  (See other comment about missing check.)

If you know there WAS an error, then you should not make this call.

But if there WAS an error, is your callback called or not?  If you callback is called even in case of error, how do you know if there was one?

It is not clear to me from the class CurlReponse how this is communicated to the caller.  So ask crisp.
"
677089439,1323,Paul-Licameli,2021-07-27T03:26:24Z,"It looks like this commit corrects the previous commit, which was not actualy correct for macOS, right?

Squash the two commits. Make a sequence of commits that are stages of implementation that are each buildable and runnable without errors.  But don't leave a sequence of known bugs and corrections.
"
677089854,1323,Paul-Licameli,2021-07-27T03:27:46Z,"Now I see you already found the problem about threads I already mentioned.  So as I said, use interactive rebase and fix-up the original.  Don't leave a record of mistakes and corrections.

"
677090303,1323,Paul-Licameli,2021-07-27T03:29:17Z,"... and you already did notice my BasicUI too, ok
"
677090603,1323,Paul-Licameli,2021-07-27T03:30:15Z,"Yes, null check now avoids the crash.

But maybe the progress dialog should be created more than once, not in call_once, so the destructions and creations match.
"
677090863,1323,Paul-Licameli,2021-07-27T03:31:05Z,Should this deletion be part of the first commit?
677587323,1323,gera-gas,2021-07-27T15:55:21Z,"It is a link to audacity installer file and have a two use cases here:
1 - Using like `std::string` URL for make request for CURL.
2 - Using like `wxString` for `wxFileName`, that contain the name of latest audacity patch.
May be I should create a new type for this cases like: `using PatchLink = wxString` for give a more anformation about `mVersionPatch.download` field."
677590711,1323,gera-gas,2021-07-27T15:59:12Z,"Because it can successfully read in next callback cycle, may be need additional checking the all readed bytes in `FinishCallback` also."
677689748,1323,gera-gas,2021-07-27T18:15:11Z,"Destructions and creations is already match, because `setRequestFinishedCallback` with progress dialog desruction called once, only when downloading is finished."
677696472,1323,Paul-Licameli,2021-07-27T18:25:18Z,"Well, leave it alone for now.

URLs use / as separator.  I was wondering whether this would work wrong on Windows where \ is the sperator, but you try to interpret a URL as a file path.  But if it tests all right, I won't insist on the type distinctions.

"
677727359,1323,gera-gas,2021-07-27T19:11:08Z,"yes, it work fine, I already tested it on Windows too."
681184785,1323,Paul-Licameli,2021-08-02T18:30:27Z,"MakeProgress or MakeGenericProgress, as appropriate -- I may have overspecified it.

If there is no ""denominator"" for the ""numerator"" -- no real estimate of the incomplete work, then the Generic progress is the right one.

Ah, but the download callback is supplied ""current"" and ""expected.""  So that means, don't use Generic?
"
681189877,1323,Paul-Licameli,2021-08-02T18:39:12Z,"But my point was that using call_once isn't right.  Maybe the dialog will be created more than once, in unusual but possible circumstances.  Maybe download fails once, but is attempted again.
"
681394032,1323,Paul-Licameli,2021-08-03T02:48:42Z,"You know you can leave out `<std::mutex>` in C++17?  Improved deduction of types in constructor expressions and declarations!

I am convinced now that this mutex is doing a correct thing.  I think there would be a more ligthweight way to do this with std::atomic instead -- the mutex is only guarding the transition of a boolen from false to true.  But, don't bother doing this.

"
681395292,1323,Paul-Licameli,2021-08-03T02:52:43Z,"You reset mOnProgress to false on some of the exit paths.

But I think you must do it more places.

The returns at lines 124 and 139 -- where you detect a network failure or a corruption of the download -- should also reset mOnProgress to false.  Otherwise, automatic update checking will never be tried again, while the program remains running.

You also failed to cover the case that `mVersionPatch.version > CurrentBuildVersion()` is false, or the case that the dialog return code is neither `wxID_YES` nor `wx_ID_NO`.  Which I don't know is possible from the context.

"
681888825,1323,gera-gas,2021-08-03T15:50:24Z,"Yes, because I add it manualy, therefore I agree with you about RAII approach (smart classes) for fix the same possible problems."
681890560,1323,gera-gas,2021-08-03T15:52:26Z,"Also, I think, I solve this possible moments by create own `UdateLocker` class, that atomic blocking entry to update process with RAII support."
681902945,1323,Paul-Licameli,2021-08-03T16:07:14Z,"Doing it with RAII would be even better.  See ValueRestorer in MemoryX.h which may already do what you want.  No new class needed.

```
ValueRestorer<bool> cleanup;
...
cleanup = valueRestorer(mOnProgress, true);  // inside the lock on the mutex
...
[cleanup = std::move(cleanup), ... // to transfer the cleanup from one lambda into another
```

Do you understand the idea?
"
682067749,1323,gera-gas,2021-08-03T20:10:36Z,"Yes, I implemented something like this, but thanks for `valueRestorer` example, I think I can change the part of same logic by `valueRestorer` using."
766702422,2261,Paul-Licameli,2021-12-10T14:03:40Z,"One of the C++ Core Guidelines I like is that each virtual function declaration should be marked with exactly one of `virtual` `override` or `final` as appropriate, and for these two it should be `override`."
766708087,2261,Paul-Licameli,2021-12-10T14:11:39Z,"Oh, I see I misunderstood the context.  This is not overriding UIHandle functions.  `virtual` is right."
766716097,2261,Paul-Licameli,2021-12-10T14:22:17Z,"Clang gives me a warning about '&&' within '||'.  Add parentheses to make the intent unmistakable.
"
766716675,2261,Paul-Licameli,2021-12-10T14:23:04Z,"Same track, or aligned partner track"
766719835,2261,Paul-Licameli,2021-12-10T14:27:04Z,"I would prefer to iterate the intervals, as in the other branch, not the clips, for uniformity, and in case WaveTrack might add some other kind of interval in future (who knows?)

You can static_cast the Extra() pointer of each interval to WaveTrack::IntervalData* and then test for the clip you want to exclude.
"
766724470,2261,Paul-Licameli,2021-12-10T14:32:56Z,"The two shared_ptr arguments could be const references, and so they should, to aid the human reader.  Instead I read this then stopped to see whether `track` and `clip` were being reassigned for some reason.
"
766726172,2261,Paul-Licameli,2021-12-10T14:35:07Z,"A const auto & here for consistency
"
766729889,2261,Paul-Licameli,2021-12-10T14:39:42Z,"Another argument might be const reference
"
766736544,2261,Paul-Licameli,2021-12-10T14:48:07Z,"See how SelectHandle overrides Enter, HasEscape, and Escape member functions.  These allow you to hit the Esc key and dismiss the yellow snap lines, enabling a fine, un-snapped adjustment, if that is what the user really wants.  The same might be done here.

Maybe some common base class, derived from UIHandle, should be defined?  Hm.

"
766737995,2261,Paul-Licameli,2021-12-10T14:49:57Z,"You may note that I could have done the extra work I suggested in the UIHandle subclasses recently added to AdornedRulerPanel, but I didn't.

This is not mandatory extra work.  But I should reconsider how the pattern might be made easier and reusable across UIHandle classes that snap.
"
766742647,2261,Paul-Licameli,2021-12-10T14:55:35Z,"See TrackPanelDrawable::DrawingArea:  default behavior should not be to return an empty wxRect, but to return the second argument unchanged.
"
766786258,2261,vsverchinsky,2021-12-10T15:49:45Z,"Funny, the tool I use to analyze a code suggests quite opposite: it says that parenthesizes are redundant :) But I usually tend to put them too. Thank you!"
766787284,2261,vsverchinsky,2021-12-10T15:50:59Z,Didn't think of that. Thank you!
767576126,2261,vsverchinsky,2021-12-13T10:06:25Z,"> See how SelectHandle overrides Enter, HasEscape, and Escape member functions. These allow you to hit the Esc key and dismiss the yellow snap lines, enabling a fine, un-snapped adjustment, if that is what the user really wants. The same might be done here.
> 
> Maybe some common base class, derived from UIHandle, should be defined? Hm.

If I try to hit escape when using a select handle it just resets the current selection, with a debugger attached I see that both `::Escape` and `::Cancel` member functions are triggered, did I misunderstand something?"
767706669,2261,Paul-Licameli,2021-12-13T12:18:57Z,"You can hit escape to dismiss the yellow snap line before the click.  It seems you can't dismiss the yellow snap line while dragging.
"
767709406,2261,Paul-Licameli,2021-12-13T12:23:01Z,"Just a discussion...

I would prefer `static_cast` myself here...  But actually, I'd rather see `std::any_cast`.  The Extra information in IntervalData looks like a place I could rewrite things with `std::any` now that we use C++17.  I think `any_cast` makes a simpler check than `dynamic_cast`.  Just equality of a statically determined `typeid` of the template parameter with the dynamically determined `typeid` in the `any`.

"
767712918,2261,Paul-Licameli,2021-12-13T12:27:38Z,"Still not resolved
"
767713130,2261,vsverchinsky,2021-12-13T12:27:57Z,"Does not seem to work as well, I still get snap lines during the selection"
767724619,2261,crsib,2021-12-13T12:44:27Z,"I've never seen much performance impact from using `dynamic_cast`. It can be slow in tight loops with deep hierarchies, but that's not the case here."
767725826,2261,vsverchinsky,2021-12-13T12:46:09Z,"https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-downcast

I agree that sometimes we can justify using `static_cast` instead of `dynamic_cast` if we want to get as much performance as possible, and we do guarantee that the specified type is the only possible option here. But one of the reasons why this part of the code was rewritten is that we may want to add more interval types to a wave track in the future, wasn't it?"
767726398,2261,Paul-Licameli,2021-12-13T12:46:59Z,"A general comment: I'm reviewing changes in the class AdjustBorders.  The other subclass of ClipTrimPolicy is AdjustBetweenBorders.  That class is not constructed anywhere.  Is there a mistake?
"
767726453,2261,vsverchinsky,2021-12-13T12:47:05Z,"Sorry, will fix that, thanks!"
767729066,2261,vsverchinsky,2021-12-13T12:50:59Z,"It's not a mistake, AdjustBetweenBorders moves borders of both clips if they are close enough, and it was my understanding of how things should happen, and turned out that I was wrong. But I was told that we may need this in the future."
767730463,2261,Paul-Licameli,2021-12-13T12:53:03Z,"You are right about dynamic_cast being better for future generality.  I should have remembered myself.

So would be any_cast.  With std::any I wouldn't need to invent dumb little base classes like TrackIntervalData just to have a virtual destructor.
"
767736547,2261,crsib,2021-12-13T13:01:41Z,"`std::any` has costs attached. It's not a `zero-cost` abstraction in general, although compilers may implement a fast-path for small objects."
885526547,3009,Paul-Licameli,2022-05-31T11:35:03Z,"The second commit fails to compile for me, unless I add to VST3Utils.h:

```
#include <vector>
```"
885527691,3009,Paul-Licameli,2022-05-31T11:36:26Z,"This commit adds an argument to FillParameters and BuildPlainUI.  Instead, this could replace the editController argument, and that can be fetched from the wrapper.
"
885534638,3009,Paul-Licameli,2022-05-31T11:45:02Z,"I think Vitaly mentioned that the set of parameters might really be very large.  Maybe not too large though, to make it inconvenient to cache all.

Could uses of `ForEachParameter` be further simplified, if the set of flags to filter on is passed as another argument to it, and with suitable default values?  (Maybe two arguments, for flags to include any of, and flags to exclude all of, for `FillParameters`)

Update -- I no longer like the suggestion I made in this comment very much
"
885541109,3009,Paul-Licameli,2022-05-31T11:51:28Z,"Explain in a comment that this is mutable because it is cached once on demand.

Or even better:  define a class ParameterCache.  Give the wrapper a `const std::shared_ptr` to a cache.  Put the mutable member in the cache class, and give it a `const` member function that gives a reference to this vector.

Give `VSTWrapper` a constructor taking `std::shared_ptr` to this cache.  The constructor calls `make_shared` if the argument is null, or else uses the given argument.

These suggestions anticipate the definition of an Instance, which can share the cache of parameters with its plug-in.
"
885542995,3009,Paul-Licameli,2022-05-31T11:53:40Z,"Maybe you can call this `AnyOf` by analogy with `std::any_of`
"
885555676,3009,Paul-Licameli,2022-05-31T12:08:24Z,"The rewrite of `LoadSettings` at the second commit is surely wrong, because it never uses `parms` at all.

I would rather see a more correct sequence of transformation steps, in which the second commit has the correct lookup in `parms`.  Then later commits complete the transformation of this function.
"
885572910,3009,Paul-Licameli,2022-05-31T12:24:58Z,"Where before, `FUID::fromTUID` was called once -- now it is called twice, here and also inside `SavePreset`.  That looks wrong.  And a similar problem, for loading presets.

Simpler maybe just to pass a reference to `mEffectClassInfo` into each of the new functions and let the utility level do the details.

Or even simpler -- make `mEffectClassInfo` a third member of the wrapper base class (this means rewriting the first commit).  Then there is no argument.  The class info, as you can see from some examination, is `const` and set when the VST effect is constructed.

"
885579739,3009,Paul-Licameli,2022-05-31T12:32:19Z,"There is no filtering at all by parameter flags.  Is this doing excessive work then?

One if the flags is for read-only status.  Perhaps, exclude those from the fetching and storing.

"
885582088,3009,Paul-Licameli,2022-05-31T12:34:49Z,"You cause failure if a parameter is known in the plug-in but not known in the mapping.  This is not like what I did for AudioUnits.  I think it's better to ignore this case and continue storing other parameters.
"
885584453,3009,Paul-Licameli,2022-05-31T12:37:17Z,The commit that defines this function should also delete the code that is make unnecessary in the other functions that load settings or presets or import.
885586590,3009,Paul-Licameli,2022-05-31T12:39:23Z,"Remember also the calls to `mPlainUI->ReloadParameters();` that move into this function, when this PR is rebased onto @vsverchinsky 's #2990.  (But wait for that PR to be redrafted in response to the first round of review.)

"
885588112,3009,Paul-Licameli,2022-05-31T12:40:54Z,"The commit comment that removes this function should include more explanation, as in the issue checklist.

This step of course has no analogue for AU or VST2.
"
885860826,3009,pietro68,2022-05-31T16:31:32Z,"> The second commit fails to compile for me, unless I add to VST3Utils.h:
> 
> ```
> #include <vector>
> ```

Apologies, it was not yet clear to me that I should cmake-generate with pch off, when doing development.  When turning it off, I actually found that I'd also need `#include <functional>`
"
885867847,3009,pietro68,2022-05-31T16:38:38Z,"> This commit adds an argument to FillParameters and BuildPlainUI. Instead, this could replace the editController argument, and that can be fetched from the wrapper.

good point, will do that"
885882444,3009,pietro68,2022-05-31T16:54:17Z,"I have seen that there are about 2000 parameters for the gain plugin which I am using in my tests - so yes, very large (and btw. I can not fathom why a gain plugin needs to have 2k parameters...).

Scanning 2k of them each time is definitively overkill, so I'd implement what you suggest. However, I think that to make it worth, I'd need to have not just one vector<parameterinfo> as we have now, but a set of vector<parameterinfo> e.g. one for the params which are automatable, one for the readonly ones, as needed by the callers of ForEachParameter - otherwise if I had only one vector, we'd be back to square one i.e. I'd have to scan all 2000 items of it anyway.
"
885893973,3009,pietro68,2022-05-31T17:07:50Z,"ok, done"
886000549,3009,Paul-Licameli,2022-05-31T18:25:36Z,"Note this from Steinberg's header file, ivsteditcontroller.h:

```
		kIsReadOnly		 = 1 << 1,	///< parameter cannot be changed from outside the plug-in (implies that kCanAutomate is NOT set)
...
		kIsHidden		 = 1 << 4,	///< parameter should be NOT displayed and cannot be changed from outside the plug-in 
									///< (implies that kCanAutomate is NOT set and kIsReadOnly is set) [SDK 3.7.0]

		kIsProgramChange = 1 << 15,	///< parameter is a program change (unitId gives info about associated unit 
									///< - see \ref vst3ProgramLists)
		kIsBypass		 = 1 << 16	///< special bypass parameter (only one allowed): plug-in can handle bypass
									///< (highly recommended to export a bypass parameter for effect plug-in)
```

So, check my logic please: I think we can always ignore the hidden parameters.  Because, see how `parameterInfo.flags` is used.

In the places where only the automatable parameters are examined -- that implies that the read-only are excluded.  In `SyncParameters`, all (and only) the read-onlies are excluded (explicitly).  Therefore, these visits exclude all the hidden.

In `FillParameters`, when building a plain UI -- we may examine some read-only parameters.  But, we exclude the hidden ones.

Therefore:  we always ignore the hidden.

Maybe you can easily verify with some temporary code, that most of these gain parameters are hidden?
"
886204252,3009,Paul-Licameli,2022-05-31T23:28:32Z,"Make `ownSettings` a reference and avoid a map copy
"
886204869,3009,Paul-Licameli,2022-05-31T23:29:17Z,Could write: `auto &ownSettings = GetSettings(settings); ownSettings.clear();` and eliminate the assignment a the end
886206938,3009,Paul-Licameli,2022-05-31T23:31:33Z,"When you correct the lookup into `parms`, also remove `ParseAutomationParameterKey` which becomes unused"
888220716,3009,pietro68,2022-06-02T17:43:16Z,"Apologies, it looks like the vst3 gain plugin I used for the tests (blue cat's gain suite) is very unusual - it has 2049 parameters but only 2 of them are ""real"" and automatable, i.e. gain amount and on/off - and none of the 2049 params is hidden. 

 I tried with another gain plugin and it has only two parameters. So maybe we can leave things as they are?"
888282544,3009,pietro68,2022-06-02T18:49:53Z,"I tried what you suggest, but I came to a point where I had to use the mutable keyword anyway. 

The problem is, when it is time for constructing VST3Wrapper, mEditController is still null - if it was not, I could send it as an arg to the VST3Wrapper ctor, to be used to populate the cache - and there would no need to have a mutable something.

But the fact that the cache can be populated only when mEditController is not null, implies that the cache must be mutable.
"
888293842,3009,Paul-Licameli,2022-06-02T19:04:58Z,"Maybe so.  But how strange.  Is there a way to dump information and find out more about this strange plug-in?
"
888294453,3009,pietro68,2022-06-02T19:05:55Z,"Actually, this duplication happened only for LoadPreset. I removed the extra unnecessary conversion in VST3Wrapper::LoadPreset and verified it still works."
888297232,3009,Paul-Licameli,2022-06-02T19:09:49Z,"What I meant was, the member shared_ptr to the cache can be const, the cache object can be const, but then the members of the cache object need to be mutable.  There is still mutable, but hidden at a lower level.  Is that not what you had to do?

I recommend the shared_ptr so the plug-in and its instances can share just one cached definition of the set of parameters that is initialized only once, so we can be sure all visits are really over the same set of parameters.

I did something like this for AudioUnit, but the details did not require shared_ptr or mutable.
"
888305532,3009,pietro68,2022-06-02T19:21:17Z,"ok, done"
888306274,3009,pietro68,2022-06-02T19:22:26Z,"Alright, also done now"
889904204,3009,pietro68,2022-06-06T07:47:07Z,"ok
"
889904764,3009,pietro68,2022-06-06T07:47:58Z,"good point, ok"
889904854,3009,pietro68,2022-06-06T07:48:08Z,ok
1701795368,7017,igorkorsukov,2024-08-02T12:41:18Z,"We talked about this a little bit. I believe that an application should have one settings file. This code makes it so that there are two settings files, one that is created by the muse framework (it stores, for example, theme settings) and the other is created here."
1701804395,7017,vsverchinsky,2024-08-02T12:49:10Z,Should be removed from `src`
1702015363,7017,saintmatthieu,2024-08-02T15:34:41Z,"After SU a few days ago we had a follow-up discussion with @Eism and @vpereverzev and IIUC there was a consensus to trying to use the Au3 library as a black box with its own persistency mechanism and making sure that this library exposes the necessary read/write from it.
But I can conceive that one mechanism for all settings for may make things better on the middle term. Only I haven't tried it and seen how the PluginManager reacts to it.
I guess we can experiment with multiple setting files for now and maybe change in the future? The code I had to write for that isn't much, throwing it away if necessary wouldn't be a big loss. I wouldn't block this PR for that, though."
1702207647,7017,igorkorsukov,2024-08-02T18:52:11Z,"I only have concerns about the main config file (I have no concerns about the plugin config files).
When we move on, and the au3 code disappears completely or almost disappears, the user will still have 2 main config files - this will look very strange, and some effort will need to be made to ensure backward compatibility. 
There will also be problems directly when rewriting a code. For example, now a selected device can store au3, then we rewrite this functionality to the new code (without wx), but so that a user does not loss anything, we will still need to store (or at least read) from the au3 settings file. 

In fact, I have already implemented an adapter to the muse::settings, since we seemed to have discussed this yesterday.
https://github.com/audacity/audacity/pull/7019"
1703819046,7017,saintmatthieu,2024-08-05T09:21:31Z,"I see : indeed, changing the setting implementation of the general config is even beyond the scope of this PR. Sorry that I mixed things up, will revert that line as soon as I can verify that my PoC still runs without it. (Having troubles launch the app at the moment.)"
1710043302,7017,vsverchinsky,2024-08-08T18:13:46Z,Unnecessary change
1710052614,7017,vsverchinsky,2024-08-08T18:20:13Z,"That could be a single `PlatformCompatibilityWX.cpp` which simply wraps calls to `wxStandardPaths`, the new implementation does not depend on wx, but might introduce unwanted behavior change. "
1710060709,7017,vsverchinsky,2024-08-08T18:25:37Z,Unnecessary change
1710061559,7017,vsverchinsky,2024-08-08T18:26:08Z,Unnecessary change
1710061675,7017,vsverchinsky,2024-08-08T18:26:12Z,Unnecessary change
1710061952,7017,vsverchinsky,2024-08-08T18:26:25Z,Unnecessary change
1710062076,7017,vsverchinsky,2024-08-08T18:26:30Z,Unnecessary change
1710062546,7017,vsverchinsky,2024-08-08T18:26:49Z,Unnecessary change
1710067781,7017,vsverchinsky,2024-08-08T18:30:35Z,"Is it used at all?

"
1710081680,7017,vsverchinsky,2024-08-08T18:40:31Z,May be `BasicUI::*` would be a good replacement for it?
1710150187,7017,vsverchinsky,2024-08-08T19:26:08Z,Am I miss something? This line seem to never evaluate to `true`
1710161365,7017,vsverchinsky,2024-08-08T19:31:45Z,"Just remembered that we have `GlobalHook`s, but I do not insist that we should use that one here"
1710168887,7017,vsverchinsky,2024-08-08T19:36:47Z,Changes in that file are not necessary
1710170394,7017,vsverchinsky,2024-08-08T19:37:39Z,Unnecessary change
1710171593,7017,vsverchinsky,2024-08-08T19:38:21Z,Unnecessary change
1710171909,7017,vsverchinsky,2024-08-08T19:38:34Z,Unnecessary change
1710172288,7017,vsverchinsky,2024-08-08T19:38:51Z,Unnecessary change
1710172512,7017,vsverchinsky,2024-08-08T19:38:59Z,Unnecessary change
1710972226,7017,vsverchinsky,2024-08-09T07:46:02Z,I like previous name more :)
1711132553,7017,saintmatthieu,2024-08-09T09:26:21Z,Awesome ! How come I didn't think of that.
1711143324,7017,saintmatthieu,2024-08-09T09:33:28Z,Hm. Not anymore. Good catch.
1711160460,7017,saintmatthieu,2024-08-09T09:45:02Z,"I think so too. I was being extra conservative. (`mMessageBoxCb` was also meant to be injected with `GetMessageBoxCb()`, but I lost that injection somewhere along the way. Anyway.)"
1711170425,7017,saintmatthieu,2024-08-09T09:52:00Z,"I didn't pay attention. Was added in [this PR](https://github.com/audacity/audacity/pull/722). I can't see how this could be executed either, though. Remove ? Then we'd have one callback injection less."
1711200658,7017,saintmatthieu,2024-08-09T10:13:54Z,"Awesome ! How come I didn't think of it. Also maybe Qt has such helpers, too, when it gets needed in AU4.
I'll give it a try."
1065800814,4053,crsib,2023-01-10T13:44:03Z,Why do we have this enum?
1065801159,4053,crsib,2023-01-10T13:44:24Z,Should the state be `final`?
1065802987,4053,crsib,2023-01-10T13:46:11Z,Do we need this struct at all? Why is it not `final`?
1065803426,4053,crsib,2023-01-10T13:46:36Z,I don't like this naming at all. It is really confusing when reading
1065807072,4053,crsib,2023-01-10T13:50:00Z,Should this be explicit?
1065809568,4053,crsib,2023-01-10T13:52:21Z,"You may call me very picky, but I think that this is a very confusing name. "
1065811994,4053,crsib,2023-01-10T13:54:25Z,If I'd see this in a forest - I would run away screaming. It is very hard to understand what happens here just by reading the code.
1065814912,4053,crsib,2023-01-10T13:56:56Z,`title` was so much more descriptive
1065820142,4053,crsib,2023-01-10T14:01:29Z,"Something like `const BasicMenu::MenuItemText& menuItemText` feels much more readable. I don't quite like `BasicMenu` name either, but it's too late to do anything about it.
"
1065826484,4053,crsib,2023-01-10T14:06:58Z,"Do we really need optional here? How is it different from checking for `pHelp.empty()`? Why is is called `pHelp`?

"
1065832443,4053,crsib,2023-01-10T14:12:16Z,"Generally I would like more consistency here, i. e. getters in both places"
1066061451,4053,crsib,2023-01-10T17:16:17Z,Why FileHistoryMenus needs to be a nested class?
1066068178,4053,crsib,2023-01-10T17:21:25Z,"I understand that this somehow reflects the decisions made by wxWidgets, but this is probably the most confusing name of this PR"
1066778465,4053,crsib,2023-01-11T09:44:34Z,I would much prefer to have a factory function to tricks with tag types. `FreshMenu` caries very little semantics. Sound like something related to food (https://play.google.com/store/apps/details?id=com.freshmenu)
1066782359,4053,crsib,2023-01-11T09:48:05Z,"There are 4 method that accept very similar list of parameters. Provided that all of them are in one namespace it feels that Item should be a structure. 

As I noted earlier, naming is not clear at all too."
1066785533,4053,crsib,2023-01-11T09:50:52Z,Not final
1066786697,4053,crsib,2023-01-11T09:52:00Z,"We break down ""Item::Text"" here. Overall, it feels that we need this structure, not the previous ones. 

"
1066788967,4053,crsib,2023-01-11T09:54:07Z,"No final. Naming is very unclear. I would much prefer something like `MenuItemInfo`. 

(No, `BasicMenu::Info` doesn't help to understand the intention at all)"
1066789327,4053,crsib,2023-01-11T09:54:24Z,Not final. 
1066790673,4053,crsib,2023-01-11T09:55:38Z,All the previous comments apply here
1066795592,4053,crsib,2023-01-11T10:00:01Z,"I think this should be removed before merge, to be fair."
1066796055,4053,crsib,2023-01-11T10:00:27Z,Overall it feels that this file should be split.
1066821630,4053,crsib,2023-01-11T10:24:49Z,I think Popup should not be the part of this class. This way we will be able to separate menu data and how the specific framework builds menus
1066823377,4053,crsib,2023-01-11T10:26:33Z,Should we use `Handle` interface here instead?
1066827183,4053,crsib,2023-01-11T10:30:18Z,"Optionally, we can rename `FreshMenu` as `EmptyMenu`. but I still prefer something like `MakeMenu` or `MakeEmptyMenu`"
1066846273,4053,crsib,2023-01-11T10:49:27Z,But should they be implicit? I have nothing against though
1066895353,4053,crsib,2023-01-11T11:43:35Z,"Even getting here doesn't help me understanding `Item::State` (I might have missed something).

If this is a mask - why not call it something like `StateMask` or so?"
1857999177,7785,igorkorsukov,2024-11-26T08:06:44Z,"Why was it necessary to link this module?
This looks unexpected, it is alarming that the audio module depends on the track editing module "
1858027143,7785,igorkorsukov,2024-11-26T08:25:31Z,I think better to just include `effects/effects_base/effectstypes.h`
1858071064,7785,igorkorsukov,2024-11-26T08:55:39Z,It is better to add the required method to the `IEffectsProvider` and use it through injection
1858074245,7785,Eism,2024-11-26T08:57:36Z,"better not to use the abbreviation, at first I didn't understand what rt is"
1858075969,7785,igorkorsukov,2024-11-26T08:58:45Z,"It is better to add the required method to the `ITrackeditProject` and use it by 
```
globalContext()->currentTrackeditProject()->....
```"
1858079426,7785,Eism,2024-11-26T09:00:47Z,"I am also confused by the Item in the audio module. Item is about UI, as for me, the audio module should not operate with such concepts"
1858083751,7785,igorkorsukov,2024-11-26T09:03:32Z,"I believe there is a better place for all this. The audio engine is a low-level utility service, it is unexpected to see it accessing the global context, working with tracks, subscribing to track events...  

I think that all this added code needs to be moved to the `effects_base` module, adding a new interface, something like `IRealtimeEffects` and its implementation. "
1858087586,7785,Eism,2024-11-26T09:06:10Z,"these comments are useless, you set for them `UiCtxProjectOpened` context, so this won't happen and the likelihood that someone will encounter this is low (I am not sure that someone will change their context)"
1858098593,7785,Eism,2024-11-26T09:13:28Z,"the default value is false, so you don't need to set it here
we use true in rare cases, and this is not your case"
1858099946,7785,Eism,2024-11-26T09:14:19Z,you can use `normalColor`
1858103701,7785,Eism,2024-11-26T09:16:48Z,If you need a border for FlatButton you should override backgroundItem
1858106614,7785,Eism,2024-11-26T09:18:39Z,you can use MenuButton for it
1858109376,7785,Eism,2024-11-26T09:20:29Z,better to use Component.onCompleted for root item
1858638824,7785,saintmatthieu,2024-11-26T14:25:59Z,"I already have a `RealtimeEffectListItem.qml` :) Wanted to avoid the two getting confused.
I agree that ""list item"" does sound UI-like indeed. However, the sequence of realtime effects we set on the audio engine (or in the effect module, debate is ongoing) needs a name. What do you suggest ? ""Sequence"" instead of ""List"" would do. ""Entry"" instead of ""Item"", too. Pick your combination :)"
1858641176,7785,saintmatthieu,2024-11-26T14:27:20Z,Ok.
1859138525,7785,saintmatthieu,2024-11-26T19:44:46Z,Why ?
1859138780,7785,saintmatthieu,2024-11-26T19:45:01Z,"Awesome, thanks !"
1859142299,7785,saintmatthieu,2024-11-26T19:48:32Z,"Thanks for the suggestion, I looked into this.
The default for FlatButton is that Component of ID `defaultBackgroundComponent`. It does everything I want my button to do, except for the border thing (it uses `ui.theme.borderWidth`, which equals 0, though). I haven't found a ready-to-go solution to reuse it without duplicating it or changing the framework to expose that property in the FlatButton. This last option seems like the right one, but I'm lazy and maybe there's another correct way ?"
1859146971,7785,saintmatthieu,2024-11-26T19:53:07Z,"... which is the default, so I can remove this line. Thanks !"
1860073191,7785,Eism,2024-11-27T07:31:50Z,"I will suggest duplicating, overriding backgroundItem is done exactly for such cases, so as not to create a lot of properties"
1860075613,7785,Eism,2024-11-27T07:34:00Z,"to initialize the model after all the elements on the page have been created
in the future it may be that the model will depend on some other parameters from the page that may not have been created yet"
1860114819,7785,saintmatthieu,2024-11-27T07:52:52Z,"Yeah, but then I have a button whose only difference to the rest of the UI is that it has a non-zero border. If I duplicate it and `MenuButton` changes on the framework, my button will not get automatically updated.
So there seems not to be a way I overlooked. Will go for the duplication now but will look into making a PR in the framework."
1860119205,7785,saintmatthieu,2024-11-27T07:56:03Z,So children are initialized before their parents? I never realized. Ok then.
1860602708,7785,saintmatthieu,2024-11-27T12:47:45Z,"I just gave it a try: it's not enough to just duplicate `defaultBackgroundComponent`, I'd have to duplicate the entire `FlatButton`.
So nevermind, for now, it'll be the rectangle wrapper.

>  overriding backgroundItem is done exactly for such cases, so as not to create a lot of properties

And how about
FlatButton.qml:
```qml
FocusScope {
    property Component backgroundItem: defaultBackgroundComponent
    property var backgroundComponentLoaderItem: backgroundLoader.item // pity backgroundItem was not called `backgroundComponent` ...
    
    Loader {
        id: backgroundLoader
        sourceComponent: root.backgroundItem
    }
```
and then
```qml
  FlatButton {
      Component.onCompleted: {
          backgroundComponentLoaderItem.border.width = 1
      }
  }
```
This only exposes one more property and gives the client control over the properties of the default item. (Only a pity that I have to use `Component.onCompleted`)"
1860606187,7785,igorkorsukov,2024-11-27T12:50:14Z,"just in case, if we use data types from another module that are described only in the `.h` file, or interfaces, then we do not need to link these modules.
In the current implementation of AU4, it is usually necessary to link only au3wrap and global (linked automatically) 

i.e. to use TrackId you don't need to link trackedit,
 to use EffectId you don't need to link effects_base"
1861640674,7785,Eism,2024-11-28T07:32:33Z,"No, you are bringing the private part out, this approach is wrong
let me clarify, I meant to duplicate defaultBackgroundComponent"
1861804737,7785,saintmatthieu,2024-11-28T09:22:58Z,"Like I said,
> I just gave it a try: it's not enough to just duplicate defaultBackgroundComponent, I'd have to duplicate the entire FlatButton."
1861833149,7785,Eism,2024-11-28T09:41:29Z,can you get it from EffectMeta?
1861836496,7785,Eism,2024-11-28T09:43:31Z,show how you tried to duplicate
1861849576,7785,Eism,2024-11-28T09:52:06Z,"Magic structure
Can we describe it? create our structure with important fields"
1861856019,7785,saintmatthieu,2024-11-28T09:56:21Z,I threw the experiment away. You can see for yourself that defaultBackgroundComponent has dependencies on FlatButton.
1861857477,7785,saintmatthieu,2024-11-28T09:57:12Z,Also.
1863100382,7785,saintmatthieu,2024-11-29T08:00:00Z,Was in fact just used as identifier. Just using `uintptr_t` is better indeed.
808094571,2561,vsverchinsky,2022-02-16T15:08:59Z,Unnecessary assignment
808943625,2561,Paul-Licameli,2022-02-17T11:21:16Z,"Do not delete the i18n_hint comment that helps the translators
"
808946753,2561,Paul-Licameli,2022-02-17T11:25:18Z,"Why was it necessary for resolving this issue, to delete this logic that appends ""Label Track"", ""Note Track"", etc. to `name`?

This name is NOT the name you will see on the screen.  It is a name that the screen reader will speak.

@DavidBailes may not agree with this change.

You are removing the Default Name (I didn't like it either) so the suffix ""Label Track"", etc. so now you are prepending ""Track #n"" always.  I think that is all right.


"
808953758,2561,Paul-Licameli,2022-02-17T11:34:24Z,You review yourself?  :-)
808959204,2561,Paul-Licameli,2022-02-17T11:41:24Z,"Certain import file formats might contain multiple channels that become multiple tracks.  Should you consider giving them unique names?  But in the usual case of one track, I understand that you would not want to add the numeral.
"
808962900,2561,Paul-Licameli,2022-02-17T11:46:16Z,"I understand that you changed the factory to force you to fix compilation of all uses of it, and so consider at each place how to set the track name.

How can we guarantee that future calls to these functions will also have names set?

Should you at least comment here that the caller should consider setting a unique track name?

"
809106837,2561,vsverchinsky,2022-02-17T14:28:00Z,"That what I proposed, maybe not the best solution, and it needs to be improved (or reverted)."
809115537,2561,vsverchinsky,2022-02-17T14:35:58Z,"This function doesn't set the name. The reason is that the track with random name isn't better than track without the name, when the intention is to have a track with a certain name. Another reason is that there are many cases when track is created to hold some temprorary data and then inserted into another track. I'll improve the comment by adding ""an unnamed empty track""."
809138170,2561,vsverchinsky,2022-02-17T14:55:33Z,">Should you consider giving them unique names?

If I understand your question correctly, then I think `ProjectFileManager::AddImportedTracks` assigns unique names to the channels.

>But in the usual case of one track, I understand that you would not want to add the numeral.

Yes."
809144434,2561,vsverchinsky,2022-02-17T15:01:11Z,"I've found multiple instances, of the same string in different places and with different comments (or without them), and didn't find an approriate one for this case, but missed that one: `/* i18n-hint: The %d is replaced by the number of the track.*/`
Thanks."
809147771,2561,vsverchinsky,2022-02-17T15:04:14Z,"Yes, I need to improve my practice of self-reviewing)"
809468755,2561,Paul-Licameli,2022-02-17T21:09:20Z,"If a translatable string literal is repeated exactly in more than one place, and without a context string, then it is enough the one occurrencde has a comment. "
810002733,2561,DavidBailes,2022-02-18T13:34:42Z,"1. Prepending ""Track #n"". This is too verbose, and it would be better to prepend simply ""#n"".
2. Removal of the conditional appending of ""Label Track"", ""Note Track"", etc. Please don't remove this. The idea is that when for example someone changes the default name of a newly created label track from ""Label Track"", to say ""fred"", the screen reader readers ""fred label track"" which reminds the user that it is a label track, and not an audio track (or indeed inform the user that it's a label track, if they did not create the project themselves). Similarly for Note tracks and Time tracks."
811045288,2561,Paul-Licameli,2022-02-21T11:42:28Z,"The repetition of making a track, then setting its default name with a unique number, is repeated in a few places.  I would suggest a static member function of LabelTrack to simplify this repetition.
"
811055555,2561,Paul-Licameli,2022-02-21T11:56:02Z,"Please see the struct Track::ClassTypeInfo and learn a bit about how it is used.

Maybe it should be extended with a field containing the default name for a track type, so there is a uniform way to specify it for Label and Wave and other types of tracks.

If for some reason there is need for polymorphism in getting ""the default name for a track type"" but unspecified which type that is.

But this generalization is for now a solution looking for a problem.  Don't do it, but think a little about it.

"
811469915,2561,vsverchinsky,2022-02-21T23:04:06Z,"Makes sense, thanks"
811985413,2561,Paul-Licameli,2022-02-22T14:09:58Z,"The latest changes to simplify the repetitions lost the use of MakeUniqueTrackName on pahts like this where the argument is explicit.  Tell me you meant that, or else fix it.

"
811987500,2561,Paul-Licameli,2022-02-22T14:11:51Z,"Comment the two functions above about the intention to add unique names, unless that is caller's responsibility.  Or maybe add a boolean to control whether there is unique numbering.
"
811994001,2561,Paul-Licameli,2022-02-22T14:17:44Z,"As I review more, I see there are only two uses of this overload of LabelTrack::Create.  The other one, in Effect.cpp, does not want a unique name.  So, just this call needs a fix."
812002069,2561,Paul-Licameli,2022-02-22T14:25:19Z,"The four #include directives above were removed from an earlier version of this pull request, which was a happy thing reducing the dependencies.  But now three of them return.

I don't say it's a necessity for approval of this PR, to eliminate them.  But I would like them eliminated at some future time.

My hope is that Note, Time, and Label track functionalities could be completely segregated from Audacity into optional add-ons.  In fact my big experimental misc-libraries branch accomplishes that.  But this change may cause me some difficulties in rebasing all of it.


"
812005264,2561,Paul-Licameli,2022-02-22T14:28:27Z,"Nothing wrong with these latest changes, but I understand there is still debate and it's not yet final.

If a virtual function can be added to Track so that the dynamic_casts and #include of Note, Wave, and Label tracks can go way, that would be nice.

Eliminating WaveTrack.h is not as important -- I don't plan to segregate WaveTrack from the Audacity monolith in an add-on.  WaveTracks are just too much involved with everything else.


"
812084656,2561,vsverchinsky,2022-02-22T15:43:58Z,Only one with default name assigns unique name to the track
812084846,2561,vsverchinsky,2022-02-22T15:44:08Z,Thanks
900290830,3070,Paul-Licameli,2022-06-17T16:06:55Z,"Maybe these two lines should be switched, just to be sure that their sequence remains the same as it was in VST3Effect before, so the sequence of their destruction is the same.

Or maybe it makes not difference.
"
900292067,3070,Paul-Licameli,2022-06-17T16:08:38Z,"In the first commit, the inclusion here allows you to delete the same header included in two other places and still compile.  Do that.
"
900293548,3070,Paul-Licameli,2022-06-17T16:10:34Z,"This line allows two other inclusions of module.h to be removed, at the first commit.
"
900297819,3070,Paul-Licameli,2022-06-17T16:16:20Z,"Remove the two uses of `std::optional::value` above and use the `*` operator instead.

It breaks the Mac build, as do certain other C++17 library functions that can throw new kinds of exceptions.  But on Mac they can't build and link unless a certain minimum version of the operating system is targeted, above our present minimum.

The difference with `*` is that is just gives undefined behavior if there is no value, not an exception.

But you have the proper null (or should I say nullopt) checks before use so it is safe.
"
900299154,3070,Paul-Licameli,2022-06-17T16:18:13Z,"This inclusion at the second commit lets you remove the header in one other place.
"
900306896,3070,Paul-Licameli,2022-06-17T16:29:01Z,"You didn't write this assertion -- you only move a line that existed in another file.

But read this uncommented assertion and ask, what's the proof?

The proof should ideally be deduced from a postcondition stated explicitly in a comment in class Base64.

And size_t would be a better return type for `Decode`.

"
900308392,3070,Paul-Licameli,2022-06-17T16:31:06Z,"Again you add an #include and should check whether you can remove the same file elsewhere.  And you can.
"
900310450,3070,Paul-Licameli,2022-06-17T16:34:00Z,"`FetchSettings` is given settings that are not assumed to be initially empty.  Be sure to assign nullopt along paths that fail to get state from the plug-in.
"
900328842,3070,Paul-Licameli,2022-06-17T16:49:44Z,"`value` again twice needs to be rewritten
"
900339877,3070,Paul-Licameli,2022-06-17T16:57:03Z,"`LoadSettings`, like `FetchSettings`, should make the given settings reflect exactly what is in the instance or the config file.  So, add other branches that assign nullopt when the configuration does not contain a string.
"
900342197,3070,Paul-Licameli,2022-06-17T16:58:35Z,"It is documented that `SaveSettings` may assume `parms` is empty.  This is unlike `LoadSettings` which cannot assume `settings` begins empty.
"
900350286,3070,Paul-Licameli,2022-06-17T17:03:41Z,"You anticipated me.  I see this now, taking the commits in sequence.  Good:  but of course rebase interactively and squash the fixes onto earlier commits before this is merged.
"
900374024,3070,Paul-Licameli,2022-06-17T17:24:22Z,"The wrapper base class already hass `mEffectClassInfo` so this call and the call to `LoadPreset` can pass just one argument.
"
900376512,3070,Paul-Licameli,2022-06-17T17:27:56Z,"The commit that inserts the `FetchSettings` calls is good.  It should be squashed with the earlier commit that rewrites `LoadSettings` and `SaveSettings`.  That commit isn't complete without the calls to `FetchSettings` because `SaveSettings` is assuming that the fetch was already done, and is not correct without it.
"
908208492,3070,pietro68,2022-06-28T08:44:02Z,"ok, done"
908208624,3070,pietro68,2022-06-28T08:44:10Z,also done
908208935,3070,pietro68,2022-06-28T08:44:24Z,done
908217679,3070,pietro68,2022-06-28T08:52:16Z,done
908222606,3070,pietro68,2022-06-28T08:56:50Z,"ok, done"
908223677,3070,pietro68,2022-06-28T08:57:45Z,"ok, done"
908235071,3070,pietro68,2022-06-28T09:08:49Z,"Right, done"
908248750,3070,pietro68,2022-06-28T09:19:23Z,"ok, done"
908252300,3070,pietro68,2022-06-28T09:22:44Z,"ok, done"
908254685,3070,pietro68,2022-06-28T09:25:02Z,"I assume that by this you mean that in `LoadSettings `I should add `else `branches to assign nullopt in case something could not be read, as you comment later."
908264237,3070,pietro68,2022-06-28T09:34:09Z,Woops! done.
908276814,3070,pietro68,2022-06-28T09:47:09Z,"ok, done"
908434278,3070,Paul-Licameli,2022-06-28T12:44:35Z,"The second commit in the sequence is still not buildable.

Rebase and squash the fix onto the second commit.
"
908498418,3070,Paul-Licameli,2022-06-28T13:42:59Z,"Yes and I meant that the analogous is NOT needed in SaveSettings -- which would be, deleting a key/value pair from the config file.
"
908535858,3070,pietro68,2022-06-28T14:13:00Z,"I interpret your comment in this way:

1) leave the assertion there, and write a comment in class Base64 that the returned value should be <= buffer.getSize()
2) have `size_t len = static_cast<size_t>( Base64::Decode(str, buffer) );` 

- or do you mean

2) rewrite Base64::Decode so that it returns a size_t instead of an int ?
"
1409618318,5675,Paul-Licameli,2023-11-29T17:09:13Z,"This leaves the function `OnAdvancedVZoom` unused, so delete it too
"
1409629935,5675,Paul-Licameli,2023-11-29T17:18:14Z,"Did you scan the code for all occurrences of ""/GUI/VerticalZooming""?

Maybe I should review #5685 first.

So far this looks like a change I could not approve, because of incompleteness.  The code is still governed by the behavior of a preference that you can't change any more in the user interface.  That behavior would be ""stuck"" one way or another depending on your audacity.cfg file.

By the way -- the long-distance coincidence of repeated string literals for the preference pathname  is a thing I have long disliked.  So instead there are the classes in `Prefs.h` -- `BoolSetting`, etc. -- which ought to eliminate all of these repetitions some day as a code cleanup.  There would be a lot of volume of work there.

Maybe you can figure out examples and volunteer to do some of those cleanups if you like.  That's for preferences we don't remove.
"
1409642428,5675,Paul-Licameli,2023-11-29T17:29:00Z,"Maybe you should remove one preference at a time in each commit, and do each really completely.

""/GUI/AdjustSelectionEdges"" is used in `ViewInfo::UpdatePrefs` so there is the same objection that it's possible to have behavior frozen one or another way depending on the config file.  Admittedly it's unlikely anyone would do this.  Still it leaves the code simplification incomplete.

So you should also eliminate the member variable `ViewInfo::bAdjustSelectionEdges` and simplify by assuming it was true wherever it was used before.

"
1577565457,6306,saintmatthieu,2024-04-24T09:14:22Z,"Oops, mistake ..."
1577570177,6306,saintmatthieu,2024-04-24T09:17:41Z,"All right, I overlooked these implementations ... WIP."
1577624110,6306,saintmatthieu,2024-04-24T09:57:26Z,"I'm not sure here. Eventually it will replace the offline processor, ""stealing"" its name (currently ""Real-time Compressor""), so maybe it should stay `After_3_1` and not be `Always` ? On the other hand, I don't see any different consequence in returning `After_3_1` or `Always`."
1577637091,6306,crsib,2024-04-24T10:07:40Z,"If you reuse the old ID, you should introduce After_3_6 (3_7?)

This is a way Paul has introduced to distinguish between RT/non-RT versions of built in effects"
1577639542,6306,saintmatthieu,2024-04-24T10:09:30Z,Not needed.
1577654326,6306,saintmatthieu,2024-04-24T10:21:27Z,Also wrong - coming up.
1577655583,6306,saintmatthieu,2024-04-24T10:22:33Z,These defaults should be reviewed.
1579457253,6306,crsib,2024-04-25T13:18:47Z,"I think I fixed it on my branch too, hence the conflict "
1579504639,6306,crsib,2024-04-25T13:47:22Z,It's not quite clear what it tests TBH
1579524442,6306,crsib,2024-04-25T13:56:20Z,"I would prefer static or ""constructor"" cast, by it is very minor"
1579531873,6306,crsib,2024-04-25T14:00:41Z,This looks ... odd. I think there should be something in line with `mSlaves.push_back(CompressorInstance { mProcessor })`
1579532749,6306,crsib,2024-04-25T14:01:10Z,See `EffectReverb::Instance::RealtimeAddProcessor`
1579538618,6306,Paul-Licameli,2024-04-25T14:04:28Z,"Why do files relating only to one particular effect belong in lib-effects?  I don't agree with the file placement.
"
1579541351,6306,crsib,2024-04-25T14:05:48Z,Should this be configurable?
1579589534,6306,crsib,2024-04-25T14:36:29Z,@LWinterberg WDYT?
1579593094,6306,crsib,2024-04-25T14:38:53Z,"Provided that this effect is new, I think `RealtimeSince::Always` makes much more sense"
1579595872,6306,crsib,2024-04-25T14:40:33Z,"The same I think applies to the compressor, as you have changed the ID"
1580657016,6306,saintmatthieu,2024-04-26T08:16:31Z,"I agree, it's confusing."
1580658695,6306,saintmatthieu,2024-04-26T08:17:57Z,"Because then they can be reused by another target, namely a unit test."
1580659838,6306,saintmatthieu,2024-04-26T08:18:52Z,Let's make sure we discuss the string I pushed in a follow-up commit.
1581095954,6306,saintmatthieu,2024-04-26T14:11:34Z,Yes.
1581147854,6306,saintmatthieu,2024-04-26T14:50:58Z,"Isn't this a capability? I expect the `RealtimeEffectState` class to create the correct number of slaves, provide the correct input, etc., which, AFAICS, it does, too."
1581155276,6306,saintmatthieu,2024-04-26T14:56:38Z,"It doesn't test much indeed. I've been using it a little bit as debug helper. Maybe it will come in handy when I start tweaking the algorithm, which I consider doing after the UI follow-up work."
1581155633,6306,saintmatthieu,2024-04-26T14:56:55Z,Rebased.
1581218815,6306,Paul-Licameli,2024-04-26T15:45:14Z,"It is extraneous to lib-effects.  I would rather give it its own library if you must have unit tests.  Ideally mod-effect-classes could be separated as in my pull request and made independent of the Audacity executable and given its own unit tests, but that presupposes much dependency breaking that is not yet figured out."
1581377926,6306,saintmatthieu,2024-04-26T18:19:54Z,"I would also like to have framework-agnostic processors have their own library, easy to re-use by other projects.
We're only at the beginning of the release cycle, the code around the compressor will not rest until 3.7, I'll have time to relocate."
1581381732,6306,saintmatthieu,2024-04-26T18:22:34Z,Done. They may be refined until the next release.
1901568480,7978,grliszas14,2025-01-03T08:37:04Z,I think it would be nice to leave this test with expected values as before (but setting TimePoint mode explicitly) and writing additional test checking Duration mode
1901573870,7978,embarc-gabriel,2025-01-03T08:45:02Z,"Yes! Sure! You are right! I should increase the test coverage, not the opposite."
1901642617,7978,embarc-gabriel,2025-01-03T10:15:11Z,"As far as I could see. we only use the Duration variant on this TimeCode widget and I don´t want to inject the formatter mode if this is not really needed.
But to keep the test coverage I have added a file to test the BeatsFormatter itself.
"
1901653828,7978,grliszas14,2025-01-03T10:28:35Z,perfect 👍 
1901656949,7978,saintmatthieu,2025-01-03T10:32:19Z,"Hey @embarc-gabriel !
> As far as I could see. we only use the Duration variant on this TimeCode widget

Is it not the opposite? Isn't the instance in `PlaybackToolBar.qml` responsible for the display of this guy?

![image](https://github.com/user-attachments/assets/8825d1dd-3780-4c99-92d8-476f3ba372f6)
"
1901658965,7978,saintmatthieu,2025-01-03T10:35:09Z,"Personally I wouldn't make such a critical argument optional with default, to make sure the user of this class gives it some thinking."
1901659466,7978,saintmatthieu,2025-01-03T10:35:45Z,Cannot be `const` ?
1901665221,7978,saintmatthieu,2025-01-03T10:43:29Z,"Actually, why not keeping `m_fieldValueOffset`, (making it const and) setting it in the ctor to 0 or 1 depending on the `BeatsFormatterMode` ? That would reduce the diff and make the code more condensed."
1901672164,7978,embarc-gabriel,2025-01-03T10:53:06Z,"Yes! I tottaly missed these ones. @saintmatthieu @grliszas14 
I focused on the ones we use on the effeects.
I don´t know how I haven´t seen it,
The modification will be a little bit tricker than I thought because I will need to inject this information depending on whether we are on the bar or on the effect.
I will work on this."
1901675745,7978,embarc-gabriel,2025-01-03T10:57:57Z,"I don´t know.
I always think it is better to be explicit.
An int can be anything. We can put 2, 3, 10 or whatever. That way we create many valid inputs that in the end shouldn´t exist.
Using the enum we make these options impossible to be represented."
1901954289,7978,saintmatthieu,2025-01-03T16:25:24Z,"""a simple enum"""
1901964266,7978,saintmatthieu,2025-01-03T16:36:44Z,Interesting. Shouldn't the display stay at 0 until the value has reached 1 ?
1901970650,7978,saintmatthieu,2025-01-03T16:44:18Z,Here it's like I'd expect it.
1901980140,7978,saintmatthieu,2025-01-03T16:55:39Z,"We're at 120bpm, so a beat is 0.5 seconds, so in 1.9 seconds, there are 3 beats (a complete 3/4 bar, that's ok) and the remained is 0.4 seconds.
One tick is a fourth of a beat, so 0.125 seconds. 0.4/0.125 = 3.2. So I think it's correct.
But it's hard to figure out. Maybe encoding `double beatDur = 60/tempo; double tickDur = beatDur / 4;` and then 
```cpp
TimecodeModelTestParam{ TimecodeModel::ViewFormatType::BarBeatTick, TimecodeMode::Duration, 3*beatDur + 3.2*tickDur, ""001 bar 00 beat 03"" }
```
would be helpful for the reader ?"
1905002230,7978,embarc-gabriel,2025-01-07T07:16:46Z,"Here I have just kept the same tests as before once I was not focused on the NumericFormatter.
I don´t know exactly the reason for this but I do know this is very explicit on the code that we need to round it to the nearest integer.

```
void TimecodeModel::updateValueString()
{
    constexpr auto toNearest = true;
```"
1905025676,7978,embarc-gabriel,2025-01-07T07:43:27Z,"Yes! Very good point.
I have improved the readability for these tests.
I hope it is better now."
1905032170,7978,saintmatthieu,2025-01-07T07:49:09Z,"... and it indeed is that way in Audacity 3, too:
![image](https://github.com/user-attachments/assets/75ec2b5d-e12b-4248-bbe9-35c04f7dde31)
@LWinterberg is this correct ?"
1905047992,7978,saintmatthieu,2025-01-07T08:04:34Z,"I do find this rounding all the more confusing that, for musical durations, neither of bar, beat or tick is rounded:
![image](https://github.com/user-attachments/assets/231f4ca3-3f56-4889-b97d-bb7310b75a62)
"
1905049060,7978,saintmatthieu,2025-01-07T08:05:46Z,... but if no one has noticed so far it's also probably that it's not dramatic. Let's move on with this PR and create a follow-up ticket if there's a consensus that it should be changed.
1905099052,7978,grliszas14,2025-01-07T08:46:03Z,"does it work? it has typo:
`TimecodeModeSelectors -> TimecodeModeSelector`"
1905111163,7978,grliszas14,2025-01-07T08:55:17Z,"I'd move those two:
`reloadFormatter();
updateValueString();`
outside of this function - as its name suggests, it should only setMode and nothing else.
I think it will be better to make a connection within the constructor to respond to that change, sth like:
`connect(this, &TimecodeModel::valueChanged, [](){ reloadFormatter(); updateValueString();}`"
1905120031,7978,grliszas14,2025-01-07T09:02:06Z,"I think it's registered as 
`TimecodeModeSelector` not the `TimecodeMode` right? If it works anyway because of typedef or sth it would be nice to keep it consistent in all qml files

"
1905153786,7978,embarc-gabriel,2025-01-07T09:25:52Z,Thx. Nice catch.
1905154102,7978,embarc-gabriel,2025-01-07T09:26:05Z,Done.
1905165250,7978,embarc-gabriel,2025-01-07T09:33:23Z,"I would say I agree to your point here.
But if you take a look on the code, this pattern is used everywhere on this file. (setTempo, setSampleRate, setUpperSignature and so on). I have used this pattern to keep the consistency, once I think it is important as you correctly stated on the other comment.
So IMO there are two options: we refactor everything related to the setters on this file or keep it as it is. Or maybe leave as it is and open other ticket to refactor it IDK.
What do you think @grliszas14 ?"
1905170922,7978,grliszas14,2025-01-07T09:37:42Z,"aaah, indeed it is, let's leave it as is then"
1905307279,7978,embarc-gabriel,2025-01-07T11:18:40Z,"> I do find this rounding all the more confusing that, for musical durations, neither of bar, beat or tick is rounded: ![image](https://private-user-images.githubusercontent.com/22740106/400684756-231f4ca3-3f56-4889-b97d-bb7310b75a62.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzYyNDg4MzEsIm5iZiI6MTczNjI0ODUzMSwicGF0aCI6Ii8yMjc0MDEwNi80MDA2ODQ3NTYtMjMxZjRjYTMtM2Y1Ni00ODg5LWI5N2QtYmI3MzEwYjc1YTYyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAxMDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMTA3VDExMTUzMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI5YjgyNDlhMzQ4Y2Y5ZmUyMmMyNWI4MTU5ZjkyMjE3MmU5MTg2ZmZkYzc0MzMxNjkyMjJlOTNkY2NhZDI4ZWQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.HmVhYMfxnL2dyhhcpkKhLSQOE_LtZJlAYukEnGAHATU)

I totally agree with you. The behavior varies depending on the formatter used."
728517739,1865,Paul-Licameli,2021-10-13T23:27:38Z,"Putting new early return logic here and in EditMenus means the association of CTRL+A, etc. with the actions is only default configuration and not hard coded.  That is good.

lit also means however that descriptions of what Select All, Cut, Copy and Paste menu commands do (and edit toolbar buttons, and macro commands) may need updating in the manual to explain the special cases of clip and label text editing.  @LWinterberg 

Inconsistently, deletion is done with hard coded, un-configurable keys that do not overload what menu commands do.  I do not suggest doing anything about that.  Just for now be aware.

Conversations with @DavidBailes lately make me want to redesign the system of keystroke assignment to be contextual so that different command handler functions could map to the same key in different focusing contexts.  Needs much thought and work."
728529657,1865,Paul-Licameli,2021-10-14T00:00:07Z,"I would like to see a null pointer check before dereference even if there is enough redundant protection in the enabling condition for this command, preventing call of this function when there are no tracks."
728537686,1865,Paul-Licameli,2021-10-14T00:22:57Z,"Whose responsibility is it to push or modify the undo state?  Caller or called?  It should be commented.

Was pushing of undo stack preserved in all the paths of EditMenus?  It is not obvious to me yet.
"
728540077,1865,Paul-Licameli,2021-10-14T00:30:01Z,Is the capacity to make a new label by pasting text lost or preserved elsewhere?
728540634,1865,Paul-Licameli,2021-10-14T00:31:35Z,"Oh, I see"
728541353,1865,Paul-Licameli,2021-10-14T00:33:34Z,Similar question about refresh of the TrackPanel.
728543509,1865,Paul-Licameli,2021-10-14T00:39:49Z,"How cells and UIHandles generally work is that they are responsible for Undo operations but just return coded to direct the caller whether to refresh display.  Best that these new functions be consistent with that.

Maybe this contract isn’t clearly commented either for cells and handles, so you are welcome to improve comments in those abstract base classes too."
728547628,1865,Paul-Licameli,2021-10-14T00:51:35Z,"I think a problem here is that only left channels or mono tracks are ever “focused” by TrackPanelAx but you may need to redirect to a right channel’s affordance area in unusual cases.

Please write some ugly little fix, but my sense technical debt around the problem of better representing a tree of focusables is growing still more.

Maybe TrackPanelNode (not cell) needs the notion of “focusable “ and your new virtual functions really need to be declared there.  Maybe TrackPanelAx needs to work in terms of those nodes, not the underlying tracks."
728550556,1865,Paul-Licameli,2021-10-14T00:59:27Z,Is this test here just so that Ctrl+whatever is dispatched to the command manager?   But that assumes the editing keys are not customized to other unusual keystrokes.  Maybe nobody does that.  Still not the happiest solution.
728820663,1865,vsverchinsky,2021-10-14T09:50:52Z,"I'd like to see `Focusable` or introduce the focus concept into some of the basic track panel classes, this solution is rather a bit more generalized version of how text edit shortcuts work in LabelTrackView. Another option here is to track only the current TextEditHelper"
731855410,1865,vsverchinsky,2021-10-19T13:17:16Z,"It should be possible to assign Alt+whatever for these commands (checked that, though I moved this check to TextEditHelper instead) "
731992664,1865,Paul-Licameli,2021-10-19T15:29:42Z,"But what about assignments of Shift+... ?
"
732110729,1865,vsverchinsky,2021-10-19T17:51:32Z,"Shift + ... during text typing is usually supposed to toggle to upper/lower case, isn't it? But Ctrl + Shift + ... should work too "
732117636,1865,vsverchinsky,2021-10-19T18:00:43Z,"Though, additionally, we can check that the second keyCode is a character "
732374401,1865,Paul-Licameli,2021-10-20T02:42:28Z,Please explain the reason for this changed line.
732569619,1865,vsverchinsky,2021-10-20T09:11:22Z,"Sorry, I overlooked this during rebase, thanks!"
733135863,1865,Paul-Licameli,2021-10-20T20:50:37Z,You might call CaptureKey and eliminate duplication.
733137965,1865,Paul-Licameli,2021-10-20T20:53:59Z,Comments explaining that these do not always push the undo stack.
733139198,1865,Paul-Licameli,2021-10-20T20:55:50Z,Update this comment
1095699926,3996,Paul-Licameli,2023-02-03T11:29:00Z,"It's not obvious locally in the code here, but I understand a consequence of this is that changes of factory preset will ""dirty"" the project so you are prompted to save it when you close.  Am I right?  Is there another reason for this?
"
1095704823,3996,Paul-Licameli,2023-02-03T11:35:07Z,"I understand the second of the six commits, except for this unexplained change.  What does it accomplish?
"
1095712086,3996,Paul-Licameli,2023-02-03T11:44:24Z,"""InitializeComponents"""
1095729471,3996,Paul-Licameli,2023-02-03T12:06:17Z,"Is `Internal` the right type for this and the other new exception, not `BadEnvironment`?  If this failure occurs, do we want Sentry data about it or not?

`FileException` does use `Internal` but see the comment in its constructor explaining that as an unusual decision.
"
1095745864,3996,Paul-Licameli,2023-02-03T12:26:33Z,"You assume here that `GetCache` never returns null.  If that is a correct and reliable assumption, make that clear with types:  return a reference instead of apointer.  If not, test for null.
"
1095754559,3996,Paul-Licameli,2023-02-03T12:37:21Z,"In fact `GetCache` is not now guaranteeing a non-null return, so please null check this.
"
1095760719,3996,Paul-Licameli,2023-02-03T12:44:36Z,"Why not simply combine the two functions ?  Just let `GetCache` return a reference to `sVST3PluginCache[key]` and that will create and default-initialize a member that isn't there already.

Then the assertion isn't needed, and you know I don't like assertions without comments:  when I review an assertion,. I'm not satisfied until I also review all uses of the function.  Less burden of review without it.
"
1095762122,3996,Paul-Licameli,2023-02-03T12:46:14Z,"To make my last suggestion work, defaulted `VST3PluginCache` must be distinguishable from one that was initialized as in the following code, so you can write another test here.
"
1095766265,3996,Paul-Licameli,2023-02-03T12:51:06Z,"... and I think this assignment would make that distinguishability, if it is always reached, but it isn't.

"
1095770933,3996,Paul-Licameli,2023-02-03T12:56:41Z,"This is a change of a user facing string that I suppose you must tell design about, if there is any important opinion about string consistency.
"
1095821773,3996,vsverchinsky,2023-02-03T13:51:22Z,"It is correct, though formally there could be other types of parameter that aren't automatable or hidden. For such parameters it is correct to ""dirty"" the project too I think."
1095827974,3996,vsverchinsky,2023-02-03T13:57:27Z,"Some VST3 plugins can offer better processig quality in `kOffline` mode. I think it used to be `kOffline` some time before refactoring, but I've made a typo"
1095854102,3996,vsverchinsky,2023-02-03T14:23:03Z,"> Is Internal the right type for this and the other new exception, not BadEnvironment? If this failure occurs, do we want Sentry data about it or not?

Not sure how to answer the first question, but I don't think that it's a good idea to send preset loading failures to sentry. `LoadPresetFromStream(fileStream)` load preset file from disc, and user may attempt to load preset that was genrated by older version of same plugin, or even by another plugin."
1095878003,3996,vsverchinsky,2023-02-03T14:42:44Z,"That would be mere formal check. Cache for the effect ID is created in the constructor and never erased. Changing return type to reference would require ""fallback"" cache variable to be introduced, whichs purpose is to replace `nullptr`. What should be done if cache can't be found? Throw an exception? I think it's overcomplication, considering that this is an implementation detail."
1095891639,3996,vsverchinsky,2023-02-03T14:55:00Z,"The answer is in VST3Wrapper constructor - cache initialization process. If `GetCache` and `CreateCahce` were combined I had to add an initialization state. Reference type might have convinced you that return value isn't nullptr (though that can be violated too), and the code is formally correct, but you must make sure that the state of returned object is correct too. I don't think that it worth changing."
1095895869,3996,vsverchinsky,2023-02-03T14:58:32Z,"Yes, and all other places should check that too. Not obvious what should happen if `GetCache` returns not initialized object"
1095898067,3996,vsverchinsky,2023-02-03T15:00:06Z,"Right, thanks!"
1095905633,3996,vsverchinsky,2023-02-03T15:05:56Z,"Yes, the meaning for `kNoProgramListId` is that plugin does not have program list parameter, which is fine. "
1096113497,3996,Paul-Licameli,2023-02-03T18:17:17Z,"So then, will you revert that change or comment that you are keeping it?
"
1096121564,3996,Paul-Licameli,2023-02-03T18:25:23Z,"If there should not reporting for this error, then Internal is the wrong choice.  See this other example:

```
throw SimpleMessageBoxException{ rc != SQLITE_FULL ? ExceptionType::Internal : ExceptionType::BadEnvironment,
      message, XO(""Warning""), ""Error:_Disk_full_or_not_writable"" };
```

If Sqlite fails but tells the program it's exhaustion of device space, then we don't need to collect a report.  Only if Sqlite fails for some other various reason do we want a report.
"
1097269665,3996,vsverchinsky,2023-02-06T11:38:45Z,"No, I think `kOffline` fits better for destructive processing. `RealtimeInitialize` uses `kRealtime` mode."
1097270323,3996,vsverchinsky,2023-02-06T11:39:29Z,Reverted that line
1335981842,5239,vsverchinsky,2023-09-25T14:35:52Z,Thanks for catching this!
1336792018,5239,saintmatthieu,2023-09-26T07:59:22Z,I think this is the reason for the problem I found. It should be something like `interval.Begin() + (interval.End()-interval.Begin())*mOldSpeed/mSpeed;`
1336794046,5239,crsib,2023-09-26T08:00:49Z,"Yes, you are totally right "
1336816927,5239,saintmatthieu,2023-09-26T08:19:20Z,"`ApplyStretchRatio` has so far meant rendering time-stretching. It took me some time to realize, though, that this is not this method's intent. Please consider something else, something like `DoChangeClipSpeed` ?"
1336826104,5239,saintmatthieu,2023-09-26T08:26:08Z,Reusing the `ProgressReporter` alias would be better for consistency.
1336831495,5239,crsib,2023-09-26T08:29:53Z,"I haven't used it ... for consistency sake :-)

I was just copying the WaveClip interface, where ApplyStretchRatio is defined as

```c++
   /*!
    * @brief Renders the stretching of the clip (preserving duration).
    * @post GetStretchRatio() == 1
    */
   void ApplyStretchRatio(
      const std::function<void(double)>& reportProgress);
```"
1336837198,5239,saintmatthieu,2023-09-26T08:34:08Z,Thank you 😬 
1336846988,5239,saintmatthieu,2023-09-26T08:41:30Z,"Oh really 😅 Well, do as you please, maybe I'll fix it up in some future PR."
926729534,3271,Paul-Licameli,2022-07-21T14:13:11Z,"I do not see why this moved member ever needed to be static.  Make it non-static and initialize it with `{}`
"
926730470,3271,Paul-Licameli,2022-07-21T14:13:58Z,"Modernize with `static_cast` and `nullptr`
"
926740583,3271,Paul-Licameli,2022-07-21T14:22:42Z,"Second commit needs to change `realPath` also in the mac-only lines below
"
926742963,3271,Paul-Licameli,2022-07-21T14:24:41Z,"Mac build also requires `mPluginMain` in lines above
"
926745379,3271,Paul-Licameli,2022-07-21T14:26:45Z,"Linux compilation will also need a fix in the second commit.
"
926751540,3271,Paul-Licameli,2022-07-21T14:31:50Z,"""because"""
926752686,3271,Paul-Licameli,2022-07-21T14:32:47Z,"This is just a ""C"" pointer to function -- so initialize it to null
"
926755795,3271,Paul-Licameli,2022-07-21T14:35:37Z,"You can modernize more casts and NULLs

"
926775732,3271,Paul-Licameli,2022-07-21T14:52:01Z,"Redefine the old callDispatcher in terms of the new, passing mAEffect.  Avoid duplication."
926777358,3271,Paul-Licameli,2022-07-21T14:53:27Z,"If this function is redefined as `static`, which I recommend, then `mDispatcherLock` must become an argument, passed by reference.

And you can also modernize by using `std::mutex` instead of the wx synchronization classes.
"
926795790,3271,Paul-Licameli,2022-07-21T15:07:21Z,"Here's a better idea for splitting Load, phase 2.

Define a small structure holding mAEffect and the mutex.  Make `callDispatcher` a member function of it that locks the mutex.  Make its destructor call the dispatcher with `effClose`, replacing the two places where you do that explicitly.

You can also change the existing `mAEffect` member to be of this structure type, and define an `operator ->`, which will let you avoid changing many lines of code.


"
926800886,3271,Paul-Licameli,2022-07-21T15:10:36Z,"`GetStringFromHandle` can become a static, nonmember function if `handle` is of the new structure type.
"
926828350,3271,Paul-Licameli,2022-07-21T15:29:58Z,"Here's another idea.  Change the return type of `LoadCommon` to be the new structure.  Give it an `explicit operator bool()` returning false when it contains a null pointer, and return `{}` for failure.

Define move construction and assignment for the new type, to transfer the pointer to the left hand side and leave it null on the right.

Do all of this -- and the loading of the plug-in can avoid destroying one AEffect only to build another one at once.
"
926838617,3271,Paul-Licameli,2022-07-21T15:39:57Z,"The new structure should record whether `effOpen` was done, and do `effClose` in the destructor only if so.
"
926842900,3271,Paul-Licameli,2022-07-21T15:44:12Z,"This was an error path that did not balance `effOpen` and `effClose`.  See how the smart pointer structure would make this easy to ensure.
"
926854893,3271,Paul-Licameli,2022-07-21T15:55:47Z,"This may improve error checking, causing the function to return false of load failes for some other reason after constructing `mAEffect` -- though I see no such reasons now.

I reviewed where else this function is called and I see `VSTEffectsModule::LoadPlugin` does not check the status.  So change that function to check and return null for failure.
"
926860173,3271,Paul-Licameli,2022-07-21T16:01:10Z,"So, construction of a `VSTEffect` may leave it in an unusable state if load fails.  Where should that failure be checked?  Where `make_unique<VSTEffect>` happens, and one place is `LoadPlugin`, just mentioned, the other in `VSTEffect::RealtimeAddProcessor`.

I don't yet see if you add a check there and return false, but I'm still marching through this commit sequence.
"
926876501,3271,Paul-Licameli,2022-07-21T16:18:50Z,"When `LoadCommon` is lifted out of `Load`, then you might `move` its return value into a new argument of `Load` to transfer ownership of the handle.
"
926884383,3271,Paul-Licameli,2022-07-21T16:27:27Z,"Now I see that `Load` is not always preceded by `LoadCommon` in the later commits.
But that can't possibly work, can it?  `Load` assumes `mPluginMain` to be inititalized to non-null, but `LoadCommon` is where that happens.
"
926919372,3271,pietro68,2022-07-21T17:08:19Z,"ok, done"
926928620,3271,pietro68,2022-07-21T17:19:37Z,"Tried making it non-static, but then It needs to be so, because it is referenced by ::AudioMaster which is a static method. Tried to make AudioMaster non-static, but it looks like the vst api entry point really wants it to be static. 

At least I now initialized the static with {} as you said, though."
927037421,3271,pietro68,2022-07-21T19:33:50Z,"right, done"
927038127,3271,pietro68,2022-07-21T19:34:55Z,"right, done"
927039007,3271,pietro68,2022-07-21T19:36:11Z,"ok, done
"
927039180,3271,pietro68,2022-07-21T19:36:28Z,oops - done
927040830,3271,pietro68,2022-07-21T19:38:56Z,ok
927043860,3271,Paul-Licameli,2022-07-21T19:43:21Z,Can’t you also rewrite the case in AudioMaster to use `vst->mCurrentEffectID`?
927390616,3271,pietro68,2022-07-22T07:54:50Z,"That's right, then it is possible - done."
927439969,3271,pietro68,2022-07-22T08:52:28Z,"ok, done"
690250252,1482,crsib,2021-08-17T10:43:51Z,"I would really prefer an explicit check here (and in general as well). I.e. `pWindows2 != nullptr`.

The condition here takes multiple lines separated by comments so it reads like returning `pWindow2` instead of boolean. `auto` in function signature doesn't help too."
690254515,1482,crsib,2021-08-17T10:49:47Z,"Please, let's not oversuse comma. While it's behavior is better defined now, I don't feel like it should be used, it doesn't really improve readability.

```
const auto begin = list.begin();
const auto end = list.end();

auto iter1 = std::find_if(begin, end, pred);
```



"
690256113,1482,crsib,2021-08-17T10:51:59Z,"It really feels like this namespace is related to Windows OS, not to Application Windows."
690257199,1482,crsib,2021-08-17T10:53:40Z,"Comma again; Why not

```
auto next = ++iter1;
auto iter2 = std::find_if(next, end, pred);
```

?"
690258183,1482,crsib,2021-08-17T10:55:17Z,`const wxWindow*`?
690259154,1482,crsib,2021-08-17T10:56:45Z,`const wxWindow&` or even `const wxWindow*`?
690259495,1482,crsib,2021-08-17T10:57:15Z,`const wxWindow*`?
690261060,1482,crsib,2021-08-17T10:59:43Z,`const wxWindow*`?
690262933,1482,crsib,2021-08-17T11:02:38Z,"I have very strong opinion that `static_cast` can't possibly be used within the template function. You leave both compiler and runtime helpless here.

It is really no difference between C-cast and `static_cast` in this case.

`dynamic_cast` is fast enough and this code is not performance-critical anyway."
690277014,1482,vsverchinsky,2021-08-17T11:24:00Z,Is that possible that for some reason these checks fail? What would be the consequence for the user?
690292776,1482,Paul-Licameli,2021-08-17T11:47:47Z,"I prefer the brevity of relying on the bool conversion.

I can write trailing && on this line, not the next.  I don't have strong feelings.  Putting it on the next is one of the silly rules of the MuseScore coding standard, and I don't know who I was trying to please with it.  But we don't use those rules.

auto in the function signature DOES help.  It allows a function to return a lambda.  I can't do it otherwise.  The alternative is changing return type to a std::function, with its overheads, and maybe defeating the inlining of std::find_if.

So I agree with only 1 out of 3 things.


"
690293752,1482,Paul-Licameli,2021-08-17T11:49:11Z,"Disagree
"
690294491,1482,Paul-Licameli,2021-08-17T11:50:14Z,"By using comma, I make it clear that these expressions really do deduce the same type.
"
690295069,1482,Paul-Licameli,2021-08-17T11:51:10Z,"Well... Controls?  As in dialog controls, which are each a wxWindow object.
"
690295859,1482,Paul-Licameli,2021-08-17T11:52:17Z,"See above for why I prefer it.  Just one auto instead of two autos makes it MORE legible to me.  It expresses sameness of types.
"
690298009,1482,Paul-Licameli,2021-08-17T11:55:20Z,"Won't work for the retur value.

Would require FindByPath to return const wxWindow*, and then see in the event deserializers how the windows must be changed.

However,  if you meant the predicate signature only -- ok

"
690341759,1482,Paul-Licameli,2021-08-17T12:54:59Z,ok to const BUT -- no to pointer argument.  I use reference types to communicate that nullptr is not allowed.
690342133,1482,Paul-Licameli,2021-08-17T12:55:27Z,"NO!

`const wxWindow &` yes."
690342341,1482,Paul-Licameli,2021-08-17T12:55:44Z,"ditto
"
690347752,1482,Paul-Licameli,2021-08-17T13:02:09Z,"If the checks fail, then DispatchEvent will return false.  That causes Journal::Dispatch() to throw SyncException.   That exception's delayed handler action makes the program quit.  That causes Journal::GetExitCode() to return a non-zero status on the command line.

All of that is intended behavior, for the user who is the QA engineer.  All of this means an interaction sequence recorded before, fails to rerun now, because the sequence of events fails on rerun -- the windows that should be the handlers of events don't exist in the rerun.

Tests need some way to fail when they should fail and report that .
"
690462988,1482,Paul-Licameli,2021-08-17T15:06:09Z,"`static_cast` is not as bad  C style pointer casts because it will not cast away const and will not allow conversion from base to derived when the inheritance relation is private or protected and is is not in the right scope for accessibility.
"
690486701,1482,Paul-Licameli,2021-08-17T15:32:08Z,"If you tell me `static_cast` is absolutely never justified for pointer downcasting, I strongly disagree with that.  It is used in ""type erasure"" techniques such as you may soon review too for lib-xml.  I will refuse to ""correct"" the `static_cast`s in that PR unnecessarily.

wxWidgets event system is built around type erasure and is set up to invoke event handler functions without runtime checks.  See, for instance, this line of Audacity:

```
   EVT_BUTTON(ID_BUTTON_USECURRENTF, ContrastDialog::OnGetForeground)
```

Explore how the macro is implemented, if you dare, especially what `wxCommandEventHandler` means inside it.  Set a breakpoint in the function, arrange to hit it, and see the call stack.

This unchecked downcasting is pervasive in the handling of wxWidgets events and never a source of crashes in my experience.

wx/event.h even uses that same term, ""type erasure:""

```
// The type-erased method signature used for event handling.
typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
```"
690503221,1482,crsib,2021-08-17T15:51:07Z,">predicate 

Predicate, yes"
690591893,1482,vsverchinsky,2021-08-17T17:46:53Z,"Looks like an attempt to bypass compile time restrictions to me, with runtime overhead :)"
690594958,1482,vsverchinsky,2021-08-17T17:51:05Z,"Yes, if more details on failure will be ever needed that may be corrected in the future "
691203453,1482,Paul-Licameli,2021-08-18T12:48:17Z,"I tried to make the program return the line number of the journal file where failure occurred.  However at least on macOS it is truncated to an 8 bit value.
"
691211006,1482,Paul-Licameli,2021-08-18T12:57:20Z,"The simplistic opinion that ""static_cast to downcast pointers is never right,"" is wrong.  I now know that is not Dmitry's opinion after the approving review of the lib-xml extraction.

It can be right when the code you need to examine to prove the correctness of the static_cast is not open ended.

But that isn't quite true with the wxWidgets events.  I think you can get undefined behavior from what should be properly written event handlers, but you have to work hard to do it.  Like construct your own wxEvent objects of the wrong class, and use SetEventType() on them, and then give them directly to a window to be processed.

It's possible but not usual.  It's deliberate ""fraud"" and not ""accident.""  SetEventType() isn't supposed to be used.  Events constructed by the libraries have the integer wxEventType consistent with the expected subtype of the wxEvent object.
"
691249849,1482,vsverchinsky,2021-08-18T13:41:37Z,"I like your style of debating :) I was not saying that it's right or wrong, I noted that you build an extra object at runtime to do something that looks like an attempt to persuade a compiler that it's safe to cast"
