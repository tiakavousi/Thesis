repository,file_type,id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason,manual_label
apache/kafka,reviews,35279792,2929,did a quick pass through the controller changes and left some minor comments.,0,0,0,0.9806086421012878,0.9789472818374634,0.9878419041633606,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,40852251,2929,thanks for the patch. it looks the patch is a little outdated. i took a quick glance at part of the patch and fee it would probably be easier to review after rebasing on trunk. could you do that?,1,1,1,0.7739591598510742,0.9561977386474608,0.9722917079925536,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,43331378,2929,thanks for the patch. i made the first pass on the main code and left some comments. i haven't reviewed the tests yet. will do that later.,1,1,1,0.9370271563529968,0.9392105937004088,0.9666110277175904,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,46061417,2929,"thanks for updating the patch. made another path and left some comments. there are some other files that are not included in the patch but may need some changes as well. 1. in `groupmetadatamanager.cleanupgroupmetadata()`, it seems we are not handling the storageexception from line 724. 2. if a disk exception occurs in a delayed write to the socket during a fetchrequest, it seems we are not handling that. not sure what is the best way to solve that though. what i did was just find all the callers for the disk related method in `filerecords`, e.g. `readinto()`, `read()`, `append()`, `flush()`. (note that `filerecords.read()` do not actually read disk, but the follow up actions typically will read the disks). i haven't look at other files we have on the disk yet. but i think the log file is probably the most important one.",0,0,1,0.5905290246009827,0.7135009765625,0.944287896156311,0.0,accept,majority_agreement,2
apache/kafka,reviews,46132455,2929,"thanks for the patch. just made another path and left some comments. i am wondering if we want to add a few more unit test for the log dir failure case. 1. when log dir fails, there are correct error code in the response. 2. the producer is able to send messages with retries when a log dir failure occurs. the system test is good, but maybe less handy to run. so some basic unit tests would help.",1,1,1,0.9193249940872192,0.9676083326339722,0.979972779750824,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,46999634,2929,: thanks for the patch. made a pass of non-testing files. the overall flow is pretty clear and well organized. left some comments below.,1,1,1,0.9676637053489684,0.9743435382843018,0.9884219765663148,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,48219128,2929,a few more comments.,0,0,0,0.973527729511261,0.959341287612915,0.988245129585266,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,48933406,2929,: thanks for the updated patch. made another pass of the non-testing files and left some comments.,1,1,1,0.8862881064414978,0.8005508184432983,0.9603386521339417,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,50391353,2929,: thanks for the new patch. a few more comments.,1,1,1,0.8729479312896729,0.9111230373382568,0.964637815952301,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51041045,2929,: thanks for the latest patch. it looks pretty good now. just some more minor comments.,1,1,1,0.9772271513938904,0.9932445883750916,0.9915426969528198,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51521889,2929,: thanks for working on this patch diligently. lgtm. just a few minor comments. i will let becket make another pass. he can merge the patch if he is satisfied.,1,1,1,0.9617772698402404,0.988184928894043,0.988263726234436,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51548681,2929,thanks for the patch. lgtm. i gave a final pass and left some minor comments. thanks a lot for the detailed review!,1,1,1,0.9896201491355896,0.9902369379997252,0.9953651428222656,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51629344,2929,"thanks for the patch. merged to trunk. i left a minor comment, we can address that in the follow up cleaning patch.",1,1,1,0.9094669818878174,0.9636626243591307,0.9754653573036194,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,445850773,9001,first pass,0,0,0,0.9493863582611084,0.944432497024536,0.9902111291885376,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,447492344,9001,"thanks for the awesome pr! i have done the first pass on non-testing part, will take another look at testing part later this week.",1,1,1,0.9933464527130128,0.995669960975647,0.9956668615341188,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,452086862,9001,"thanks for the great review! i have addressed the comments in d0b6984bc0dca873e30964adb5e4cfe1262a39b9, and have provided my responses to your comments. please have a look.",1,1,1,0.990599811077118,0.9949970245361328,0.995934247970581,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,452959442,9001,thanks for the update. got a couple of more comments.,1,1,1,0.8091058731079102,0.8973552584648132,0.9210928082466124,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,455261235,9001,"thanks for the review! i have addressed your comments in ee1a40b6e8264e0f0cc9f68c0c82b330fa0d724a, please have a look.",1,1,1,0.9825472235679626,0.98881858587265,0.9906306862831116,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,456880892,9001,made another pass. would be good to have jun take a look as well.,1,0,0,0.5100592374801636,0.9127130508422852,0.9149641394615172,0.0,accept,majority_agreement,2
apache/kafka,reviews,463650370,9001,: thanks for the pr. made a pass of non-testing files. a few comments below.,1,1,1,0.9089889526367188,0.9803227186203004,0.9644815325737,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,497716516,9001,: thanks for the updated pr. made another pass of non-testing files. a few more comments below.,1,1,1,0.9120661616325378,0.9745368957519532,0.9641662836074828,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,498702686,9001,"just looked through the change for firstactiveversion, which makes sense. the only question i have is that if i'm doing a bold release by removing the deprecated code completely, such that previously i have version range [1, 6] and now the code only supports [4, 6] for a pair [min, max], would my deployment be successful automatically?",0,0,0,0.97140771150589,0.9683170318603516,0.9894171357154846,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,499803222,9001,: thanks for the updated pr. a few followup comments below.,1,1,1,0.8803892135620117,0.8905922770500183,0.932914972305298,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,501427255,9001,: thanks for the updated pr. a few more comments below.,1,1,1,0.8806174993515015,0.9159396886825562,0.9290188550949096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,501428667,9001,"a couple of more comments. also, there are compilation errors for java 8. [error] /users/jun/intellij/kafka/core/src/main/scala/kafka/server/finalizedfeaturecache.scala:148: invalid literal number [error] /users/jun/intellij/kafka/core/src/main/scala/kafka/server/finalizedfeaturecache.scala:157: invalid literal number two errors found",0,0,0,0.96243816614151,0.9937984347343444,0.9941835999488832,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,502245667,9001,: thanks for the updated pr. just a few more comments below.,1,1,1,0.9139890670776368,0.9395200610160828,0.938293755054474,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,503126954,9001,: thanks for the latest pr. lgtm. is the test failure in jdk 15 related to this pr?,1,1,1,0.9436717629432678,0.9260504841804504,0.975059986114502,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,503435680,9001,"lgtm, thanks for the great work!",1,1,1,0.991202712059021,0.9957544803619384,0.9955143332481384,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,22856648,2476,"thanks for the patch. left some comments. it looks the patch again has conflicts with trunk. to avoid frequent rebase, let's finish a few iteration of reviews before we rebase.",1,1,1,0.8413655161857605,0.96118825674057,0.9664217233657836,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,23909758,2476,sorry for the delayed reply. i made another pass and left some comments.,-1,-1,-1,0.9878054857254028,0.9923458099365234,0.9908854365348816,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,24464527,2476,"thanks for the pr. i looked briefly and i left a few comments. in addition, i'm wondering about the naming of the method. is there a reason why we call it `purge` instead of `delete`? we use the latter in many other contexts. also, i noticed that the api is called `purge` where the command and method have `data` in the name. finally, the user-facing api has the `before` suffix. is the idea that we will eventually have other `purge` (or `delete`) methods? i should have raised these questions in the kip, so sorry about that. still, if we decide to change anything, better to do it before we merge the code.",1,1,1,0.886841893196106,0.9437531232833862,0.957761287689209,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,25687702,2476,: thanks for the patch. left some comments below.,1,1,1,0.8678439259529114,0.8313326835632324,0.9251350164413452,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,27451087,2476,"thanks for the patch. i made another pass and left some comments. also, can we add a unit test for starting offset checkpoint?",1,1,1,0.8981050252914429,0.9258119463920592,0.958822786808014,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,27761750,2476,: thanks for the patch. made another pass and the following are some comments.,1,1,1,0.8319680094718933,0.8073219060897827,0.9497275352478028,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,28569809,2476,: thanks for the updated patch. a few more quick comments below.,1,1,1,0.8818051815032959,0.8914076089859009,0.9567636251449584,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29019860,2476,": thanks for the patch. looks good to me other than the following few more comments. sorry, but you have to rebase now.",1,1,1,0.8640475869178772,0.9899436235427856,0.9818617105484008,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29100514,2476,": thanks for rebasing. made another pass. there are a few more minor comments. another thing that i was thinking is how logstartoffset is maintained with respect to log cleaning. during log cleaner, we could remove all messages in the first segment. however, there doesn't seem to be logic for advancing logstartoffset in log.replacesegments(), which the log cleaner calls.",1,1,1,0.9417073130607604,0.8452393412590027,0.9562689065933228,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29350240,2476,thanks for the patch. lgtm except a very rare corner case.,1,1,1,0.7773841619491577,0.9785853624343872,0.9347515106201172,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,24642608,2614,: thanks for the patch. looks good overall. made a pass of non-test files and added some comments.,1,1,1,0.9834225177764891,0.9918931722640992,0.9908348321914672,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,26262668,2614,i left a few comments. i didn't review the message format changes themselves since you are about to do a bunch of renames and a trunk merge (i assume). probably best to review after that.,0,0,0,0.9796485304832458,0.9519007205963136,0.9795823097229004,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,26888981,2614,: thanks for the patch. a few more comments.,1,1,1,0.8522747755050659,0.8908551931381226,0.9418283700942992,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,27402407,2614,: just a few quick comments.,0,0,0,0.9609964489936828,0.8054257035255432,0.9090763926506042,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,27376662,2614,"looking pretty good. i have left a few comments (still going through the more complex parts). one question: what's our plan regarding system tests? `upgrade_test.py` and `message_format_change_test.py` need to be updated to take into account that there are 3 message format versions now, for example.",1,1,1,0.9416506290435792,0.8640368580818176,0.9189714193344116,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,27499023,2614,: thanks for the patch. a few more comments.,1,1,1,0.8522747755050659,0.8908551931381226,0.9418283700942992,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,27834344,2614,a few more comments. note that i'm ok with addressing the less important ones in subsequent prs if that's easier.,0,0,0,0.9816702604293824,0.9445123672485352,0.8577890992164612,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,27997048,2614,next batch of comments. i think i'm close to the end now.,0,0,0,0.9353068470954896,0.9342780709266664,0.8705955147743225,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,28276005,2614,"i compiled the perf numbers for this patch, results available here: [a link] there is no observable regression on produce or consume at varying message sizes, with different workloads, on different machines. we do see significant on disk savings at smaller message sizes. given the nature of the tests, i think the margin of error in throughput results is 10%. results which show a difference of more than 10% should be treated with a grain of salt: they generally don't reproduce across runs. we see consistent producer side performance improvements at small sizes, correlated with lower produce request size. we see general consume side improvements, but there is no pattern and we can't really explain the behavior. also there is variation across runs. so i think we should make no claims about any improvements on the consume side.",0,0,0,0.9408422708511353,0.9759013652801514,0.9414401054382324,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,28288520,2614,"a few comments on `logvalidator`. important question: is it right that we don't call `batch.ensurevalid()`? oh, i see, we do it in `log.analyzeandvalidaterecords`. seems like that method should be in `logvalidator` too. a future clean-up. edit: i deleted most comments as i either figured out the answer or included it in my minor pr.",0,0,0,0.9376619458198548,0.94940185546875,0.8671132326126099,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,28365653,2614,"i finally have gone through the whole diff. :) lgtm to merge if the system tests pass. i have made a few notes of follow-up changes (most are not time sensitive although a couple are) and will file jiras in the next few days. while going through the changes, i put together some minor improvements and some additional tests: [a link] we can merge it to this pr or to trunk subsequently depending on your preference.",1,1,1,0.9714542031288148,0.9948739409446716,0.9955772161483764,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,28298772,2614,: thanks for the patch. lgtm. just a few minor comments.,1,1,1,0.9242303967475892,0.9659988284111024,0.9774930477142334,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,28761442,2614,"thanks, fix looks good. some minor comments.",1,1,1,0.9424567818641664,0.9926955699920654,0.98431658744812,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,28991991,2614,"thanks for running the system tests. latest updates lgtm too. will merge to trunk shortly. this is an impressive pr, well done. :) also, kudos to jun for his detailed review. i took notes of follow-up work and will file a few jiras in the next few days. , please update the kip page to include the updates that we did during the pr review.",1,1,1,0.9925593137741088,0.9957510232925416,0.996901035308838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,63472595,3874,: thanks for the patch. made a pass of all non-testing files. looks good overall. a few comments below.,1,1,1,0.9825612902641296,0.9936261177062988,0.9896535277366638,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,64082993,3874,: thanks for the updated patch. a few more comments.,1,1,1,0.8605849742889404,0.8383483290672302,0.9535468220710754,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,64425739,3874,: thanks for the updated patch. made a pass of all files and left some more comments.,1,1,1,0.9104206562042236,0.8138525485992432,0.9630773663520812,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,66600495,3874,": thanks for the updated patch. left a few more comments. also, sequencing wise, we probably want to fix your other pr 3820 before this one?",1,1,1,0.9644120931625366,0.7505925297737122,0.9786093235015868,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,66634580,3874,i had a quick look at the `log` changes and left some comments.,0,0,0,0.9852102398872375,0.9660211801528932,0.9867392778396606,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,67496934,3874,: thanks for the new updates. a few more comments.,1,1,1,0.860016942024231,0.903150200843811,0.9713630676269532,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,68450541,3874,: thanks for the latest patch. just a few more comments.,1,1,1,0.8888142704963684,0.952075183391571,0.954079568386078,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,68779239,3874,": thanks for the latest patch. just a few more minor comments. also, kicked off a system test on the branch.",1,1,1,0.9248641729354858,0.948293924331665,0.9750248789787292,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,69316575,3874,: thanks for the patch. a few more minor comments. also kicked off another run of system test.,1,1,1,0.9401774406433104,0.90737122297287,0.9733800888061525,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,232669403,5527,"hey! i've made a fractional pass, and ran out of time, so i'm sending my comments so far.",-1,1,1,0.6714532375335693,0.5536288619041443,0.98735374212265,1.0,accept,majority_agreement,2
apache/kafka,reviews,234220695,5527,"hi , what's the status of this pr? it seems there was some hanging discussion... here's another very small batch of review comments:",0,0,0,0.927424967288971,0.7194958329200745,0.9729466438293456,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,238581384,5527,"i will go back through it and clean up the comments, the commented-out code, etc. as it stands currently though, it does have a few issues that i have highlighted that i would love to get some specific feedback on.",0,0,0,0.8688497543334961,0.6532465219497681,0.5099503397941589,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,252549428,5527,"hey , i'm really sorry that it took me so long to get you a real review. i haven't looked super hard at the ast graph wiring stuff or the tests. i just wanted to focus on the logic in the first pass. really nice work overall tackling a super complex piece of logic. i mentioned a range of concerns, some more important than others. i think the only one that would result in a large amount of work is that i found the logic around prefix scan to be a bit concerning. but i can also see how you might be ""trapped"". please let me know if you are out of ideas, and i can spend some time kicking it around to see if i get any inspiration. but please don't let my comments take away from the awesome job you've done.",-1,-1,-1,0.9878557324409484,0.9550033211708068,0.6940739154815674,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,281082113,5527,"initial pass. i'm relatively new to the topology stuff, so i hope you get a review from someone else there. also, my eyes started glazing over as i got to the tests. i would be happy to do a pass on them when we get the code in good shape, but don't want to hold up getting you some immediate feedback.",1,1,1,0.607301652431488,0.926330268383026,0.8097988963127136,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,284290098,5527,thanks for all the hard work on this! i've made a pass and overall looks good.,1,1,1,0.9895009398460388,0.9953263998031616,0.9947369694709778,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,290693564,5527,"thanks for the update , overall looks good, just one minor nit.",1,1,1,0.9724880456924438,0.9905508756637572,0.98209547996521,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,296419483,5527,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,296421178,5527,"looks good! thanks, !",1,1,1,0.989364504814148,0.9956101775169371,0.9969272017478944,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,413795889,8680,"thanks for the pr. some meta comments: 1. we could create sub tasks within jira 9755 to better track individual effort, like read path change, write path change, etc 2. could you perform some basic sanity checks for this pr? the usual command i tend to use is `./gradlew checkstylemain checkstyletest spotbugsmain spotbugstest spotbugsscoverage compiletestjava && ./gradlew unittest` to make sure we have no style violation or unit test failure haven't finished reviewing the core logic, but feel you could start addressing these suggestions in parallel, thanks!",1,1,1,0.9783385396003724,0.9642874002456664,0.9715976715087892,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,413928081,8680,some more comments.,0,0,0,0.9729931354522704,0.9690834283828736,0.9914333820343018,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,414092115,8680,: thanks for the review! i have created a sub-task jira kafka-10027 to track this pr (the parent jira is still kafka-975). i'll also update this pr if i see any checkstyle or unit test failures based on the command you shared. this pr is now ready for another pass.,1,1,1,0.98455411195755,0.975898265838623,0.9898870587348938,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,415423791,8680,"thanks for the update, get more comments.",0,1,1,0.5717765092849731,0.5214439630508423,0.6202489733695984,1.0,accept,majority_agreement,2
apache/kafka,reviews,416042080,8680,"thanks for the comments, ! i have addressed them, and, the pr is ready for further review now.",1,1,1,0.988295316696167,0.9752429723739624,0.98568195104599,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,417207312,8680,"thanks for the update, looks very promising now! get some more comments.",1,1,1,0.9910734295845032,0.9941980838775636,0.9931697845458984,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,417318799,8680,thanks for the review! i have addressed all the comments in the latest commit: [a link] .,1,1,1,0.9808711409568788,0.9905741810798644,0.991724729537964,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,421347491,8680,: thanks for the pr. made a pass of non-testing fiels. a few comments below.,1,1,1,0.9128068089485168,0.9827216267585754,0.97019225358963,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,423261506,8680,"thanks for the great review! i have addressed the comments in 08dd109d4071582f7395d7424d85f376ec56f4cc. below are the specific comments that i couldn't address, and need further discussion. i have provided my explanations: * [a link] * [a link] * [a link] * [a link] this pr is ready for review again!",1,1,1,0.991505801677704,0.9948416352272034,0.9963351488113404,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,424821463,8680,": thanks for the updated pr. made a pass of all files. a few more comments below. also, for minor changes to the kip, we can just update the kip wiki and send an email to the vote thread with a summary of the changes to see if there is any objection.",1,1,1,0.9567397236824036,0.9524348378181458,0.9729123711586,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,425960550,8680,: thanks for the great review! i have addressed all the comments in [a link] i've made changes to the [a link] write up as suggested by you. [a link] is a link to the email that i sent to the voting thread explaining the changes to the kip.,1,1,1,0.9919964671134948,0.9946601986885072,0.9955337047576904,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,426675954,8680,: thanks for the updated pr. just a few more comments.,1,1,1,0.916995108127594,0.959556519985199,0.9436736702919006,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,426771888,8680,thanks for the review! i have addressed the comments in 0562f6d10dae3a19e9aac423c29db4633130bfb0.,1,1,1,0.9841267466545104,0.9876592755317688,0.9889519810676576,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,426792414,8680,"i'm pretty happy with what we are getting to right now, great job ! the only major question i have is the failure recovery path, which i would recommend we extend the pr summary to discuss various failure scenarios, such as incompatible feature update, zk version mismatch, or zk node deletion in extreme case and the recommended approach to recover. if they are already stated in the kip, feel free to just include a reference in the summary and confirm we have addressed all the error handling for the read path.",1,1,1,0.9924232959747314,0.994795262813568,0.9953888654708862,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,427532005,8680,: thanks for the latest update. lgtm. just wait for the tests to pass.,1,1,1,0.9188232421875,0.9412314891815186,0.9877700805664062,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,427700099,8680,thanks for the review! have addressed your comments in 74ff66f8988c5db5753f4d4afb2d401c9a6db6b2.,1,1,1,0.9790038466453552,0.983472466468811,0.9767079949378968,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,428300869,8680,"discussed with offline and we decided to defer further discussion on the failure recovery after more implementation gets done: [a link] and lgtm for the latest patch, thanks for the great work, the code is well written and documented!",1,1,1,0.9899333119392396,0.9932684302330016,0.9928186535835266,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1638375179,14406,: thanks for the pr. made a pass of non-testing files. left a few comments.,1,1,1,0.9212135076522828,0.9809837937355042,0.957478165626526,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1640649396,14406,: thanks for the updated pr. made another pass and left a few more comments.,1,1,1,0.90440571308136,0.9589481353759766,0.9542347192764282,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1658470449,14406,: thanks for the updated pr. made a pass of all files. a few more comments below.,1,1,1,0.9147965908050536,0.9813439846038818,0.9635007977485656,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1662865665,14406,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1674795985,14406,: thanks for the updated pr. added a few more comments.,1,1,1,0.8963558673858643,0.9405528903007508,0.9546872973442078,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1681098711,14406,": thanks for the updated pr. just a few more comments. also, could you rebase?",1,1,1,0.9480637907981871,0.9775955080986024,0.9605068564414978,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1690949621,14406,: thanks for the updated pr. added a few more comments.,1,1,1,0.8963558673858643,0.9405528903007508,0.9546872973442078,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1690979855,14406,: thanks for the updated pr. just a couple of minor comments.,1,1,1,0.9092314839363098,0.9718575477600098,0.950325608253479,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1691280899,14406,: thanks for the latest update. the pr lgtm now. are the 30 test failures related?,1,1,1,0.918566882610321,0.9600223302841188,0.9614766836166382,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1695781437,14406,: thanks for explaining the test failures. the pr lgtm.,1,1,1,0.8593555092811584,0.9305765628814696,0.95469468832016,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,814048517,11390,: thanks for the pr. made a pass of all non-testing files. a few comments below.,1,1,1,0.9135316014289856,0.98195880651474,0.9654212594032288,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,830783968,11390,: thanks for the updated pr. a few more comments below.,1,1,1,0.8806174993515015,0.9159396886825562,0.9290188550949096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,844952599,11390,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,857454422,11390,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,879320924,11390,: thanks for the updated pr. made a pass of all non-testing files. a few more comments below.,1,1,1,0.9098389744758606,0.9774676561355592,0.9634719491004944,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,893494764,11390,thanks for the updated pr! few comments below.,1,1,1,0.9540093541145324,0.9729698300361632,0.9523518085479736,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1185412270,11390,thanks for the pr. reviewed to `brokerserver.scala` and left some comments. will keep reviewing.,1,1,1,0.9333849549293518,0.964125156402588,0.9712665677070618,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1185670454,11390,"reviewed to `remotelogmanagertest.scala`, left some comments. thanks.",1,1,1,0.9555702209472656,0.97407066822052,0.945751130580902,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1185811392,11390,", made a pass to all the changes, left some more comments. thanks.",1,1,1,0.9327285289764404,0.9435514211654664,0.9677932262420654,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1207855441,11390,lgtm! left some minor comments. thanks.,1,1,1,0.9803085327148438,0.9947683811187744,0.9937500357627868,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1210993072,11390,": thanks for the updated pr. made a pass of all files. a few more comments below. also, it would be useful to add a test to validate the replica state after processing the offset_moved_to_tiered_storage error, especially for the transactional state. but that could be done in a separate pr.",1,1,1,0.9562315344810486,0.8597735166549683,0.971238374710083,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1219733476,11390,: thanks for the updated pr. just a few more minor comments.,1,1,1,0.9095054268836976,0.9676989912986756,0.9538533687591552,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1221400391,11390,": thanks for the updated pr. just one more comment. also, there are quite a few test failures. are they related to this pr?",1,1,1,0.9701765179634094,0.9053648114204408,0.974748969078064,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1221831299,11390,: thanks for the latest pr. lgtm,1,1,1,0.9403762817382812,0.941677987575531,0.9783756136894226,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,211492478,6363,marked a set of files that belong to different prs and will be removed once those prs are merged. the prs are: [a link] [a link],0,0,0,0.9883887767791748,0.993915855884552,0.9939796924591064,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,218531252,6363,"nice job, . took my first pass, and overall it looks good. with your review guidance above, i couldn't find any major issues, but i have quite a few comments/questions. found and logged some nits when i happened to notice them, but i wasn't looking for them. :-d btw, #6342 is now merged.",1,1,1,0.9927992820739746,0.9947941899299622,0.9962071180343628,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,222423384,6363,looks great ! i am very excited for this feature! just a few comments and nits. thanks!,1,1,1,0.9935531616210938,0.9954419136047364,0.9974330067634584,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,222511189,6363,thanks for your comments. i think i've replied to all your comments. i didn't get to all your comments yet. next i'll update the config and continue with the rest of the comments.,1,1,1,0.8115021586418152,0.9430145025253296,0.9723120927810668,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,225053534,6363,looks great ! my only real concern is the complexity and length of the methods in incrementalcooperativeassignor. i kind of wonder if a pattern other than procedural is warranted? i think we should at least consider changing the private methods to package-private and adding some unit tests.,1,1,1,0.9849241971969604,0.9931635856628418,0.9904689192771912,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,229704718,6363,"i've addressed almost all your comments with changes or replies. would you mind returning to these discussions to see if we can resolve them? there are a couple remaining items regarding javadocs and error handling during assignment, if i'm not mistaken, that i will definitely address before merging. thanks!",1,1,1,0.9798955917358398,0.9909645318984984,0.9832701683044434,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,231253602,6363,thanks a lot for what i assume is your first round of comments! i fixed/replied to the majority of the comments. will return to the ones that need more work very soon in a second pass.,1,1,1,0.983164131641388,0.9917719960212708,0.9938056468963624,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,232844912,6363,"made another pass, and definitely making good progress. however, it seems like a number of comments still need to be addressed. i also think the lack of unit tests is a significant blocker, and something that i suspect will warrant some refactoring of the proposed changes in key areas to make those few super-long methods much more easily unit tested. it may also be useful to pull more switch-based logic into the protocol implementations, again for testability but also for better encapsulation.",0,0,1,0.7690684795379639,0.9771595597267152,0.8946605920791626,0.0,accept,majority_agreement,2
apache/kafka,reviews,237534439,6363,"partway through my latest review; will continue reviewing after dinner. note there are still a number of comments/questions that have not been addressed, either by comment or by changes.",0,0,0,0.9767048954963684,0.9315475225448608,0.9607155323028564,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,237583371,6363,"finished my previous review. i really like the additional tests - have you looked at coverage of the classes in the `distributed` package before and after this pr? very interested to see. a few of the comments (mine and ewen's) may have been addressed with the most recent commit. would be great to at least respond to the outstanding comments/questions, even if the answer is ""will be done in a future pr"", etc.",1,1,1,0.9825422763824464,0.9891568422317504,0.987327754497528,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,238708198,6363,"fantastic work, . i wish this weren't such a big pr, but i've been steadily tracking the progress of the latest commits as you've been running multiple tests. as you say, there are some minor things that could be cleaned up and improved, but given the size of the pr it'd be good to handle those separately in the coming days, since they shouldn't affect behavior or functionality but will be more about maintainability. i'm approving pending a green build and successful connect tests. most of the recent pr builds have been great, but i know you changed just a few test-related things (e.g., jenkinsfile to run the connect tests many times) that you've now reverted, and they theoretically shouldn't affect the build.",1,1,1,0.9859660267829896,0.9738130569458008,0.9944544434547424,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,159206034,5582,thanks for the pr. i had a quick look and left some comments. will do a more thorough review tomorrow (it was a much larger pr that i expected!),1,1,1,0.9866047501564026,0.9863990545272828,0.9775556921958924,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,160252389,5582,"thanks for the pr. i made one pass over it and left some comments, mostly minor. but there are some significant issues that need addressing too: 1. as mentioned in one of the comments, i think brokers need to be able to limit the number of re-authentications accepted from clients to avoid being over-loaded since this is not covered by quotas. 2. we need to ensure that clients cannot re-authenticate with a different principal. otherwise, if there is ever a vulnerability found in the re-authentication logic, the impact would be much worse. 3. we need to ensure that clients are only allowed to re-authenticate using the same sasl mechanism as the original authentication. i think we need more tests to cover these scenarios and also more around interoperability with the all the versions (pre-sasl_handshake, sasl_handshake v0 and v1, sasl_authenticate v0 and v1). may be easier to do with system tests, but we do need them all.",1,1,1,0.7449418902397156,0.959960401058197,0.946582853794098,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,160905544,5582,"i have done one more round of review. one of my main concerns about committing this so close to the release is due to the way in which a lot of the re-authentication code is intertwined with existing authentication code. this makes it really hard to ensure that nothing is broken in the normal authentication path. while re-authentication itself can be documented as an experimental config in this release, we have to ensure that there are no paths where existing authentication has changed in any way. since we dont have tests that cover every possible scenario, i am not sure how we can verify that. i am also very concerned about the authenticationexception in the test. it could be test timing, but any test that throws an authentication exception whether re-authentication is turned on or whether connection termination is turned on without client re-authentication, is a cause for concern because of the way in which we handle authentication failures. we really can't commit this until we get to the bottom of that as you already agree. based on these, i am inclined not to commit this for 2.1.0 because it is too risky at this stage. let me know what you think. we can commit it to trunk later this week.",-1,-1,-1,0.9470029473304749,0.8533963561058044,0.8997023701667786,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,163262832,5582,"thanks for the updates, this is looking good. i have left some (mostly minor) comments. the pr also needs rebasing since there are conflicts.",1,1,1,0.9614287614822388,0.9859527349472046,0.9887368083000184,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,167133240,5582,"thanks for the updates, it is looking good. left some minor comments.",1,1,1,0.9620869159698486,0.990569829940796,0.9822407364845276,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,167926716,5582,"thanks for the updates. responded to a few of the remaining comments (minor changes). i think i will merge once these are addressed and if there are any other changes, we can make them in follow-on prs. i think the test failures in the last build are unrelated. can you just confirm that?",1,1,1,0.8441051244735718,0.9533765912055968,0.9712489247322084,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,169016307,5582,"thanks for the pr, lgtm! merging to trunk.",1,1,1,0.9807182550430298,0.9847265481948853,0.989071488380432,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,416535665,8657,": thanks for the pr. sorry for the delay. made a pass of non-testing files. overall, i felt that this approach works. it adds its own complexity, but it's probably better than adding a separate thread pool. a few comments below.",-1,-1,1,0.9807237386703492,0.9828572273254396,0.8981704115867615,-1.0,accept,majority_agreement,2
apache/kafka,reviews,429907905,8657,: thanks for the updated pr. made a pass of all files. a few more comments below.,1,1,1,0.9147965908050536,0.9813439846038818,0.9635007977485656,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,431077363,8657,": thanks for the updated pr. just one comment below. also, there are a few comments not addressed from the previous round. it will be helpful if you could preserve the commit history in future updates to the pr since that makes it easier to identify the delta changes.",1,1,1,0.9615206718444824,0.9471428990364076,0.969060242176056,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,431933956,8657,: thanks for the updated pr. added a few more comments below.,1,1,1,0.8941115140914917,0.9021112322807312,0.9479568004608154,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,432791456,8657,: thanks for the updates pr. just a few more comments below.,1,1,1,0.9103405475616456,0.9649470448493958,0.9468029737472534,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,433422991,8657,: thanks for the updated pr. just one more comment below.,1,1,1,0.9342690110206604,0.9420302510261536,0.924942910671234,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,433564609,8657,: thanks for the latest pr. lgtm i triggered a system test on this pr. [a link] : do you want to take another look of the pr?,1,1,1,0.9473119974136353,0.948259711265564,0.9781444668769836,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,446135784,8657,"thanks for the pr, this looks like a tough issue. is it me or have we blown our complexity budget? each time we find a locking issue affecting group coordinator, purgatory and log layer, we add a bit more logic. should we be rethinking this?",-1,-1,-1,0.7246619462966919,0.9135586619377136,0.4234552085399627,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,460218963,8657,: thanks for rebasing. made another pass and left a few minor comments below.,1,1,1,0.8250309824943542,0.9299456477165222,0.9448704719543456,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,460979692,8657,: thanks for the updated pr. it seems the changes in joinpurgatory could now lead to a new deadlock?,1,1,1,0.9196120500564576,0.8868235945701599,0.9464909434318542,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,476959130,8657,": thanks for the new pr. this looks very promising. a few comments below. also, could we get rid of the trylock logic in delayedoperation?",1,1,1,0.986830711364746,0.9943300485610962,0.9944224953651428,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,477826045,8657,: thanks for the updated pr. just a few more minor comments.,1,1,1,0.9095054268836976,0.9676989912986756,0.9538533687591552,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,477939827,8657,: thanks for the updated pr. just one minor comment below. i also triggered a system test run.,1,1,1,0.9470426440238952,0.9765992760658264,0.954806923866272,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,478136204,8657,": thanks for the updated pr. a few more comments below. 1. system tests passed with no failure. [a link] 2. we now have to check actionqueue for fetch requests, which we didn't need to do before. could you do some perf tests so that we know the performance of fetch requests doesn't change noticeably?",1,1,1,0.9684642553329468,0.9436484575271606,0.9691649079322816,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,478150656,8657,: thanks for the new update. a few more comments below.,1,1,1,0.8520589470863342,0.8129056692123413,0.9615716934204102,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,478163566,8657,: thanks for the changes. a few more comments below.,1,1,1,0.8582463264465332,0.8414320349693298,0.9305190443992616,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,478225823,8657,: thanks for the new updates. just a few minor comments.,1,1,1,0.8633109927177429,0.9477370381355286,0.9718905687332152,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,478742684,8657,: thanks for the latest pr. lgtm just waiting for the jenkins tests to pass.,1,1,1,0.9218053817749025,0.969610333442688,0.9783268570899964,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,483157464,8657,: thanks for addressing the new issue. a few more comments below.,1,1,1,0.8478224277496338,0.8965026140213013,0.9527469277381896,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,483663498,8657,": thanks for the updated pr. a few more comments below. also, 1. do you plan to remove some of the unused methods in delayedoperations in partition? 2. currently, when calling checkandcomplete() for the produce/fetch/deleterecords purgatory, we still hold replicastatechangelock. this doesn't seem to cause any deadlock for now. in the future, we can potentially improve this by calling checkandcomplete() outside of the replicastatechangelock by passing leader epoch into those delayed operations and checking if leader epoch has changed in trycomplete().",1,1,1,0.9660468697547911,0.5560532808303833,0.9640512466430664,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,483745905,8657,: thanks for the updated pr. just a few more minor comments.,1,1,1,0.9095054268836976,0.9676989912986756,0.9538533687591552,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,483782135,8657,: thanks for the new update. a few more minor comments.,1,1,1,0.8277840614318848,0.9393300414085388,0.9673933386802672,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,484278647,8657,: thanks for the updated pr. a few more minor comments below.,1,1,1,0.8669154047966003,0.9477237462997437,0.9339733719825744,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,484595950,8657,": thanks for the latest changes. lgtm. latest system result has 1 failure. [a link] also, are the jenkins test failures related to this pr?",1,1,1,0.9378647208213806,0.9300612211227416,0.9818928241729736,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,15339919,2264,"thanks for the pr. i have more comments that i will post in a bit, but in the meantime, i wanted to ask: are we handling the case where pre-kip-74 brokers return a recordtoolargeexception?",1,1,1,0.9487200379371644,0.9728586673736572,0.9355133771896362,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,15811008,2264,some comments in `networkclient`. logical flow makes sense overall.,0,0,0,0.986227571964264,0.9931701421737672,0.98908931016922,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,15751882,2264,"a few more minor comments. still going through it, but sending these to reduce latency.",0,0,0,0.9804030656814576,0.9568204879760742,0.9850560426712036,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,15820695,2264,some comments in `fetcher`.,0,0,0,0.9884415864944458,0.991586208343506,0.9934642910957336,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,15835703,2264,"thanks for the patch. left a couple of comments. also, would it be useful to log a warning when the client needs to issue an old version of the request since certain feature could be lost (e.g. timestamp)?",1,1,1,0.7648193836212158,0.9025603532791138,0.974354326725006,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,15893054,2264,"left a few more minor comments. about the builders, there are a couple of things that i am unsure about: 1. in some classes, we duplicate a bunch of fields between the builder and the request class. 2. we pass around these mutable builders across layers, which is not as nice as our previously immutable request classes. do we ever want to change anything besides version? one alternative would be something along the lines of: [code block] that would make the builders immutable and eliminate issue 2. for 1, we could introduce `params` classes where they made sense. because they're immutable, we don't necessarily need to do field by field copy. we'd have to check if this makes things better or worse though. i don't think we need to do the above in this pr, but raising it as an idea to collect feedback.",0,0,0,0.7988371253013611,0.5590445399284363,0.9640359282493592,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,15947930,2264,a few more comments. the important one is regarding apiversions being required for brokers.,0,0,0,0.9837421178817748,0.9462171792984008,0.9878014922142028,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,16000293,2264,next round of comments.,0,0,0,0.9766004085540771,0.9748916029930116,0.9903603792190552,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,16216024,2264,"thanks for the changes, lgtm. we can address remaining issues in follow-ups. , please file a jira and link it from here when you can. for the record, we had a known transient system test failure (`zookeepersecurityupgradetest.test_zk_security_upgrade`), but it passed on rerun. i fixed some generic unchecked warnings before merging to trunk.",1,1,1,0.9572479724884032,0.9407290816307068,0.9576589465141296,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1572581030,14182,thanks for the pr! took a brief look at optimizeduniformassignor. will continue reviewing,1,1,1,0.9724923372268676,0.994860827922821,0.9918915033340454,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1577514119,14182,took a pass for `optimizeduniformassignmentbuilder.java`,0,0,0,0.9868300557136536,0.9947463870048524,0.9946829676628112,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1603364219,14182,went through roughly half of the tests,0,0,0,0.9816851019859314,0.9768626689910888,0.9871236085891724,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1607587541,14182,left some small nits,0,0,0,0.979299247264862,0.9115518927574158,0.962860941886902,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1610420297,14182,-22 thanks for the pr. i just made a first pass on the non-test files to familiarize myself with the code. i left some initial comments while doing so.,1,1,1,0.9257508516311646,0.964436173439026,0.8705521821975708,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1617322879,14182,-22 thanks for the update. i left a few more comments.,1,1,1,0.802008867263794,0.9414370656013488,0.8237743377685547,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1626293257,14182,-22 thanks for addressing my comments. i have left a few more.,1,1,1,0.8086957931518555,0.9516816139221193,0.8832481503486633,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1487994803,13870,thanks for the pr. i have started to read it. i left a few preliminary comments.,1,1,1,0.926745057106018,0.9796623587608336,0.955469250679016,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1493119970,13870,i am still processing the pr. i left a few more comments in the meantime.,0,0,0,0.9661290645599364,0.8214152455329895,0.9891874194145204,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1507105790,13870,i am still processing the pr. i left a few more comments.,0,0,0,0.9595033526420592,0.8493255376815796,0.9868695139884948,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1516769055,13870,"thanks for the hard work on this one! i have compared the new implementation with the old implementation line by line. it looks pretty good. i left some comments, mainly nits. i will do a second pass on it on monday and start looking into the tests as well.",1,1,1,0.9914684295654296,0.9945599436759948,0.9944189786911012,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1519036093,13870,"thanks for the hard work on this one! i have compared the new implementation with the old implementation line by line. it looks pretty good. i left some comments, mainly nits. i will do a second pass on it on monday and start looking into the tests as well.",1,1,1,0.9914684295654296,0.9945599436759948,0.9944189786911012,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1522029268,13870,i just made a pass on the main files and left more comments/suggestions.,0,0,0,0.9814545512199402,0.9821406602859496,0.9929774403572084,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1522158393,13870,i am half way through the tests. continuing...,0,-1,0,0.751105010509491,0.5473925471305847,0.943326771259308,0.0,accept,majority_agreement,2
apache/kafka,reviews,1524319166,13870,i left a few more comments related to the remaining tests.,0,0,0,0.98295259475708,0.950244665145874,0.9790557026863098,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1529818776,13870,thanks for the update. i just made a full pass on it and i left some small comments (mainly nits). we should be good to merge it afterwards.,1,1,1,0.9129708409309388,0.9584442377090454,0.9659309387207032,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1536408739,13870,lgtm. thanks !,1,1,1,0.9743313193321228,0.9944222569465636,0.9833685755729676,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,578793845,9944,"thanks for the pr. i left a few comments on the implementation, but will need to go through it again to follow the whole logic. haven't reviewed tests yet.",1,1,1,0.9184961915016174,0.976206600666046,0.9456604719161988,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,580765332,9944,": thanks for the pr. made a pass of all non-testing files. overall, the new logic seems to make sense. it does add additional complexity on the already complicated existing logic. so, it would be useful to spend a bit more time to make the additional logic easier to understand (e.g., naming more properly, adding comments where needed). a few detailed comments below. also, it seems that for more partitions, the performance with this pr is noticeably worse than trunk? [code block]",1,1,1,0.9733054041862488,0.9005383253097534,0.9803212285041808,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,609727507,9944,"thanks for this patch. it seems there are a bunch of code which do rely on `topicpartition` so it make a big patch to use topic id. will give another look tomorrow. just curious. what is the benefit if we fetch data by topic id rather than topic name? for example, higher performance or data consistency?",1,1,1,0.9508401155471802,0.9469690322875975,0.9858318567276,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,611588798,9944,have you run both performance test and compatibility test?,0,0,0,0.9882861971855164,0.9918393492698668,0.9946351647377014,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,641598151,9944,": thanks for the updated pr. as i started reviewing it, i still feel that it's quite complicated and a bit hard to follow. a lot of the complexity is the additional logic for propagating unresolved partitions from fetchrequest to fetchsession and the maintenance of unresolved partitions within fetchsession. such logic is used for handling the rare and transient case when the topicid hasn't been propagated to the broker. i am wondering if we could take a different approach to handling this rare case. i am thinking of the following. when the broker receives a fetchrequest, it checks if there is any unresolved partition (due to topicid) in the request. if so, it simply sends a new top level error and rejects the whole request without going into the fetchsession. on receiving such a response, the client will just refresh the metadata and retry. the benefit of this approach is that it's much less intrusive to fetchsession and the handling of fetchresponse. it may delay the processing for certain resolved partitions unnecessarily. but this happens rarely (e.g. when a new topic is created). so, overall, this could be a good tradeoff to make. what do you think?",1,1,1,0.9614965915679932,0.8570147752761841,0.9599059820175172,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,650729950,9944,: thanks for the updated pr. made another pass of all non-testing files. the new approach seems simpler and easier to understand. a few more comments below.,1,1,1,0.9566000699996948,0.972847044467926,0.9818561673164368,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,681325209,9944,: thanks for the updated pr. made another pass of all non-testing files. a few more comments.,1,1,1,0.926830232143402,0.9813547730445862,0.9685036540031432,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,683470393,9944,: thanks for the responses. added a few more replies.,1,1,1,0.8508427143096924,0.8901505470275879,0.9703693389892578,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,688677975,9944,: thanks for the updated pr. made a pass of all files. a few more comments below.,1,1,1,0.9147965908050536,0.9813439846038818,0.9635007977485656,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,694257707,9944,: thanks for the updated pr. just a few minor comments below.,1,1,1,0.9036898612976074,0.9585006833076476,0.940248966217041,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,694503995,9944,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,695254090,9944,: thanks for the pr. lgtm could you do a run of all system tests on this pr and see if there is any regression?,1,1,1,0.9527630805969238,0.7509190440177917,0.966419279575348,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,696491792,9944,: a couple of more minor comments.,0,0,0,0.9601423144340516,0.930272102355957,0.950128138065338,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,701511778,9944,: thanks for the updated pr. lgtm,1,1,1,0.930242121219635,0.8783431053161621,0.9749489426612854,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,708961481,9944,"sorry for making noise. i'm testing trunk branch with our application. the logs start to print error/warn after this pr. also, the `subscription` gets slower. i left two questions below. the response from author can help me to dig in it :)",-1,-1,1,0.987091064453125,0.9920662641525269,0.7565314769744873,-1.0,accept,majority_agreement,2
apache/kafka,reviews,1355546171,13443,thanks for the pr! left some comments.,1,1,1,0.922440469264984,0.9877927899360656,0.971978724002838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1355669619,13443,"hey very nice pr, i haven't finished the review, but i'm submitting some existing comments.",1,1,1,0.9787534475326538,0.9938801527023317,0.9865959286689758,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1376520329,13443,"i think it's confusing to use both ""member"" and ""consumer"" throughout the code. let's conform to ""member"" and remove all usages of ""consumer""",-1,-1,-1,0.8383311629295349,0.7835272550582886,0.8139050602912903,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1397965914,13443,-22 thanks for the update. i made a pass on the main logic and left a few comments/questions.,1,1,1,0.8742011785507202,0.8257697820663452,0.909437894821167,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1401297731,13443,-22 thanks for the update. i just made a pass on the entire pr and left some comments. i think that we are almost there.,1,1,1,0.9401904940605164,0.9417506456375122,0.963860034942627,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1418086516,13443,-22 thanks for the update. i left a few more minor comments. we are almost there.,1,1,1,0.8963290452957153,0.9782044887542723,0.9611942768096924,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1419905618,13443,"lgtm, thanks for patch -22!",1,1,1,0.9796437621116638,0.9655901789665222,0.981817901134491,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,241542550,6592,some nits. i also replied to the kip discuss thread.,0,0,0,0.9850195646286012,0.954523265361786,0.9915295839309692,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,253084612,6592,some initial comments.,0,0,0,0.9837083220481871,0.97649347782135,0.9881249666213988,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,266278283,6592,some more comments. i think we also need tests for the new configuration parameters to make sure they work correctly.,0,0,0,0.9764678478240968,0.9831069707870485,0.9896649718284608,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,269163947,6592,"seems you did not push an update yet. stopped reviewing when i realized it. the pr also need to be rebased to resolve conflict. can review again, after it's updated.",0,0,0,0.9494314789772034,0.9840787649154664,0.981491208076477,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,270477636,6592,"stopped reviewing at this point -- there is too much noise in this pr. avoid to change unrelated files -- it makes reviewing tedious. please revert all changes to unrelated files (feel free to do a separate cleanup pr if you wish, but don't piggy-back random cleanups)",-1,-1,-1,0.8524847030639648,0.6254399418830872,0.9531626105308532,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,294555655,6592,"sorry for the delay in review. couple of comments about generics. i am not completely sure if we should introduce a list type generic (if we do, we would need to update the kip). even if we don't introduce list generic type `l`, we can tie up the types on many places.",-1,-1,-1,0.9896039962768556,0.9907688498497008,0.9846200942993164,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,308656137,6592,"hey , sorry for the delay in reviewing. i think this is really close, i just had a few comments. -john",-1,-1,-1,0.990673840045929,0.9936281442642212,0.9909810423851012,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,311418205,6592,"i think we should add tests, that instantiate `listserializer` and `listdeserializer` directly -- while playing with the code, this actually reveals an issue with the currently strict types. (more below) we also need tests for the config initialization, eg, create `new listserializer()`, `new listdeserializer()` and new `listserde()` without constructor arguments, and than call `configure()` to setup the object, and test is we can use them. last, i would appreciate on test using `topologytestdriver` that uses the list-serde to make sure the setup works correctly if those are use as default serdes in the config. **about type safety:** i played with the code a little bit, and it turns out that my latest request to enforce stricter types is actually a drawback in usability. in `listdeserializer` we enforce `class ` atm, that implies that the follow code won't compile: [code block] because `arraylist.class` is a raw-type and does not guarantee the required inner type `integer`. the only way to make it compile is to define a helper class: [code block] and do [code block] while this ensures strict typing, i am wondering if the loss in flexibility and required boilerplate code is too much of a burden for users and if we should sacrifice some type safety for easier usage? -- my comment in the code with regard to generic are subject for discussion -- no need to address them directly as long as we don't agree how to proceed. for the other comments, please address them, especially the missing test code. btw: this pr should also extend the docs ([a link] and [a link] sorry for the complicated review, but generics are especially tricky and we should try hard to get it right.",0,0,0,0.8342626094818115,0.9632009863853456,0.9398406744003296,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,344903389,6592,"sorry for the long delay in reviewing this... i think we got the generic right now (couple of minor comments to improve the code a little bit). the `null` element question is a tricky one -- i left a detailed comment. for the tests, you need to add couple of `(""unchecked"")` annotations -- note that the build fails if there are warning -- best way to check locally is to run `./gradlew clean systemtestlibs``",-1,-1,-1,0.9893876314163208,0.9901564121246338,0.990435004234314,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,349781966,6592,"i think we got the generic right now... :) i added a couple of comments about better corner case handling and exception messages -- btw: i think we should add tests for all those (ie, configure a (de)serializer/serde via constructor/configs (maybe even mix-of-both?) and test that we get the exception we expect to get if something is wrong `assertthrows` is our friend -- we should also verify the error messages imho). about the `null`-item handling. i talked to and he is fine with the current proposal. hence, you can go ahead and implement it. we can update the kip and send a follow up email to the dev list later.",1,1,1,0.980678379535675,0.9929094314575196,0.994117021560669,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,636112308,6592,thanks for the pr! overall i don't really have anything that i complain about too much. the amount of unchecked casts worry me a bit but i don't see a good way around yet them yet. so they should work for now. can you give this a merge if you agree?,1,1,1,0.955346703529358,0.9771320223808287,0.9896106719970704,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,636149693,6592,"had a few high-level comments, mostly just some things that i found confusing after jumping in to this pr with no context. things look good for the most part but i think we can make this easier to understand, both for users as well as for future devs who might be reading this code",1,0,1,0.5877704620361328,0.8844982385635376,0.8899595141410828,1.0,accept,majority_agreement,2
apache/kafka,reviews,656188543,6592,"sorry for the long delay, but i think we're pretty much there. left a few suggestions for cleaning up the code, and some minor formatting issues here and there. it should be ready to merge after that :grinning_face_with_smiling_eyes:",-1,-1,-1,0.9887373447418212,0.9901402592658995,0.8398736119270325,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,657312968,6592,can you also address this (from the comment you linked from matthias):,0,0,0,0.9880720376968384,0.9928459525108336,0.9952281713485718,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,658282725,6592,"looking good, i think once you just move the upgrade guide docs to the 3.0 section then we can merge.",1,1,1,0.8311358690261841,0.8310065269470215,0.6860185861587524,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,658308808,6592,"lgtm. just give me a ping when the build completes with tests passing (your tests, at least -- there will almost certainly be some unrelated failures, as a handful of tests are super flaky at the moment)",0,0,0,0.6915262937545776,0.85415118932724,0.9689543843269348,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,149973239,5567,"made a quick pass over the non-testing code, overall lgtm. left some after-thoughts on public apis (i understand it needs kip modifications, just throwing some other ideas here, but no hard feelings if you do not like them :) will make another pass on testing code.",0,1,1,0.7578480839729309,0.97516530752182,0.9888558983802797,1.0,accept,majority_agreement,2
apache/kafka,reviews,150131682,5567,thanks for the patch i did an initial pass overall looks good. i think we need to add an integration test or two to make sure we exercise all branches when `ktableimpl.suppress` is called.,1,1,1,0.9534232020378112,0.9768459796905518,0.9888768792152404,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,150663632,5567,", here's the latest batch of changes. i'll need to update the kip again with the api changes, but i'd like to get your reviews first.",0,0,0,0.9462283849716188,0.9736801385879515,0.9625877737998962,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,151192419,5567,", this is ready for another round of reviews.",0,0,0,0.939884066581726,0.9548722505569458,0.948517918586731,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,151555862,5567,i made another pass and overall looks good. i do think we need to have some integration testing for suppress as well,1,1,1,0.9444106817245485,0.8355281352996826,0.7527034282684326,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,152583391,5567,"thanks, made another pass and overall lgtm. given the importance of this new feature, i think we need to add tests for the different buffering strategies to the integration test. also, we'll probably want to add a system test so we can run with more realistic numbers for the buffering strategies but that could be in a follow-on pr i'm not sure it should hold up this pr.",1,1,1,0.849685549736023,0.7669109106063843,0.9639725685119628,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,152991553,5567,"one final nit, otherwise lgtm",0,0,0,0.98286372423172,0.9604079127311708,0.993664026260376,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,153154169,5567,did one pass over it -- i guess i need to make another one later on to fully understand the pr. nice work!,1,1,1,0.9905038475990297,0.9944778680801392,0.9912731051445008,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,156581180,5567,"just one minor nit, otherwise lgtm",0,0,0,0.9776542782783508,0.9625675678253174,0.9435575604438782,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,156602906,5567,some follow up comments. did not look into the tests yet.,0,0,0,0.7729462385177612,0.9704222083091736,0.9894306659698486,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,156655383,5567,some more brain dump... feel free to reject anything you think is stupid.,-1,-1,-1,0.9836106300354004,0.9840812683105468,0.9660576581954956,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,157542729,5567,"some more follow ups on tests (did not review closely before). would be good to get a +1 for the actual api from , too. and maybe can have a second look, as some stuff changed. (want to make sure nothing slips because i want to avoid follow up kip if we might need a fix.)",0,0,0,0.7267121076583862,0.9349904656410216,0.5643410682678223,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,157952976,5567,lgtm.,0,0,0,0.9832575917243958,0.968936800956726,0.9637624621391296,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,158269593,5567,"took another pass, lgtm",0,0,0,0.9737082719802856,0.9322537183761596,0.9924449324607848,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,763177609,11331,i have left few high level comments/questions. i think that we are missing few things on the fetcher side as well (e.g. topic id errors must be handled differently).,0,0,0,0.9543393850326538,0.9816608428955078,0.9570453763008118,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,796345563,11331,"thanks for the pr. i made a pass over the non-test files and left some comments. overall, it looks pretty good to me. i will go over the test files soon.",1,1,1,0.98517644405365,0.993089497089386,0.9894200563430786,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,797858452,11331,"i made a first pass over the test files and i left a few comments. i need to do through them a second time. at the moment, the test coverage of the new logic is not clear to me. i'll take a deeper look at this.",0,0,0,0.6823871731758118,0.929312527179718,0.969537913799286,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,801096421,11331,thanks for the update. i left some comments.,1,1,1,0.6744282841682434,0.7918283939361572,0.8413987159729004,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,802361838,11331,thanks for the updates. left a few more comments.,1,1,1,0.646173894405365,0.8991358280181885,0.8960788249969482,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,803934899,11331,lgtm! thanks for your effort on this one. we can merge the pr once the system tests status is clarified.,1,1,1,0.9905141592025756,0.9930105805397034,0.992912232875824,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,106572457,4756,"thanks for the pr. could you rebase? also a meta question about the avro-dependent test `streamtotablejoinscalaintegrationtestimplicitserdeswithavro.scala`, do people think it's worth adding avro dependency for demonstrating this test?",1,1,1,0.8108131289482117,0.9714792966842652,0.8659972548484802,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,106778875,4756,i am not a scala person -- so take my review with a grain of salt... did not look at the tests yet.,-1,0,-1,0.8478904366493225,0.5529046654701233,0.6657924652099609,-1.0,accept,majority_agreement,2
apache/kafka,reviews,107040111,4756,"hey , thanks so much for this pr. i've been super frustrated in the past with how awkward it is to use kstreams in scala vs. how awkward it should be. my favorite features here are: * serdes for scala types * dsl methods taking implicits for things that are easy to infer (like the serde implementation). my personal preference would be to avoid renaming imports and just using fully-qualified package names inline. it makes our code longer, but easier to understand. for a ""base-level"" library, i'd prefer to have less pretty but more comprehensible code in general. i'm also wondering if we really want to use the same class names as the java dsl, this seems like it would be confusing to use in an ide with code-completion. what do you think about using scalakstream, etc. instead? this would also get around the desire to rename imports. thanks again, -john",1,1,1,0.7885919213294983,0.8806514143943787,0.9484825134277344,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,109134025,4756,"please update the `streams/upgrade-guide.html`, under the [code block] section, to talk about this addition to the public apis.",0,0,0,0.9862849712371826,0.9914585947990416,0.9950959086418152,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,110083009,4756,"thanks for the pr - do we need the integration tests? i.e., the scala api is just translating to the underlying java api, so we could write tests that ensure that the correct topology is built?",1,1,1,0.7678001523017883,0.8582956194877625,0.7713373303413391,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,112309399,4756,couple of nits.,0,0,0,0.9662699699401855,0.8241851925849915,0.9476135969161988,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,112327329,4756,couple of nits.,0,0,0,0.9662699699401855,0.8241851925849915,0.9476135969161988,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,112327549,4756,couple of nits.,0,0,0,0.9662699699401855,0.8241851925849915,0.9476135969161988,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,112327937,4756,couple of nits.,0,0,0,0.9662699699401855,0.8241851925849915,0.9476135969161988,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,112612156,4756,left some more comments.,0,0,0,0.9746701717376708,0.8806517720222473,0.9892771244049072,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,113806795,4756,"thanks for the great effort . i do not have any further comments, will leave to if he has anything else.",1,1,1,0.9711014032363892,0.994597315788269,0.9938739538192748,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,12098097,1446,"there are some naming conventions that we are trying to push for sensor and metrics names throughout the code repo. unfortunately we cannot programmably enforce that, so contributors need to manually follow those themselves. i suggest taking a look at the metrics classes in `sender.java` and `selector.java`, and `streamthread.java` to understand they naming conventions and how they can be leveraged by customizable `metricsreporter`.",0,0,0,0.9717017412185668,0.9910864233970642,0.9800241589546204,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,12335428,1446,a couple more comments.,0,0,0,0.972123682498932,0.9686369299888612,0.9870631098747252,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,12538046,1446,a couple of more comments.,0,0,0,0.9744097590446472,0.9603776931762696,0.9889217615127563,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,13233095,1446,some comments.,0,0,0,0.978256344795227,0.9574759602546692,0.9896594882011414,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,13240489,1446,"a few more comments. one meta-question is how should we expose the ""generic sensor registration"" apis. would love to hear your opinions .",1,1,1,0.53937166929245,0.9689847826957704,0.9912648797035216,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,13752140,1446,"sorry for the delay, i took another pass in the clients code.",-1,-1,-1,0.9874073266983032,0.9938139915466307,0.9916834831237792,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,13822745,1446,a couple of more comments on the public interfaces. also could you rebase?,0,0,0,0.9870046973228456,0.9805489182472228,0.9936529397964478,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,124646152,5101,"thanks for the patch. in addition to make sure that stale controller can not update zookeeper, would it be useful to have a way for controller to skip the non-controller-election related events if after it notices that it can not update zookeeper due to zkversion mismatch? this logic can probably be put in controllereventthread.",1,1,1,0.8771346807479858,0.8988718390464783,0.9623144865036012,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,127381621,5101,thanks for the update! left some minor comments.,1,1,1,0.8185656666755676,0.9648473858833312,0.9810428619384766,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,139304777,5101,thanks for the update. the patch looks much better. left some comments.,1,1,1,0.9354228377342224,0.9747400283813475,0.9843546152114868,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,148200384,5101,"thanks for the update . left some more comments. also, since this is a medium sized patch which changes the behavior of controller, can we have some tests for this patch?",1,1,1,0.8034688234329224,0.8821474313735962,0.9786051511764526,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,148641141,5101,thanks for the update . looks pretty good now. left some minor comments. it will be good to add tests before committing this patch.,1,1,1,0.9775968194007874,0.9907516241073608,0.9902637004852296,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,148713574,5101,": thanks for the patch. there are 2 cases where more than one broker may act as a controller at the same time. the first case is when a controller's zk session has expired. this is no longer an issue after kafka-5642 since the expired controller won't be able to write to zk in the old zk session. the second case is when the controller path in zk is explicitly removed (e.g. by admin to force a controller change). this patch will provide better fencing in the second case, which is useful. made a pass of non-testing files. looks good overall. left a few comments.",1,1,1,0.9585046172142028,0.991926908493042,0.9917868971824646,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,149785704,5101,thanks for the update . left some comments.,1,1,1,0.5669420957565308,0.8041555285453796,0.8330813050270081,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,149866648,5101,: thanks for the updated patch. made another pass and added some comments below.,1,1,1,0.8938514590263367,0.6865295171737671,0.9521076083183287,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,151510599,5101,thanks for the update. left some comments.,1,1,1,0.5669420957565308,0.7083953619003296,0.8212046027183533,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,152299237,5101,: thanks for the updated patch. added a few more comments below.,1,1,1,0.8763068914413452,0.7090495228767395,0.9509848356246948,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,152712043,5101,: thanks for the new update. still a few more comments below.,1,1,1,0.8612326979637146,0.9231550097465516,0.9679238796234132,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,153072479,5101,: thanks for the new updates. just a couple of more comments below.,1,1,1,0.9026154279708862,0.9230082035064696,0.966839611530304,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,153118558,5101,: thanks for the latest patch. lgtm. just a minor comment below. i will let dong make another pass of the latest patch before merging.,1,1,1,0.9618977308273317,0.97186678647995,0.9819872975349426,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,153204555,5101,thanks for the update . looks pretty good now. i left some comments regarding corner cases.,1,1,1,0.9762901067733764,0.9903417825698853,0.986855447292328,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,238042929,6295,"i've reviewed it, mostly found nits and 1-2 smaller issue.",0,0,0,0.9798653721809388,0.940313458442688,0.9465215802192688,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,238092017,6295,one more thing: i see that there are unit tests but i think it'd be nice to see an end-to-end test either among the systests or java based.,0,0,0,0.9709928035736084,0.9036195874214172,0.9832072257995604,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,238159871,6295,i've made a pass over the `mirror` module and have some minor comments.,0,0,0,0.9800900220870972,0.9789472818374634,0.983179807662964,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,238317453,6295,the topic config sync might have to deal with some tricky situations. like message.timestamp.type=logappendtime (this upon syncing downstream as is would overwrite message times at each replica cluster) min.insync.replicas>1 may cause warning/error if destination replication factor is 1 (though we are not allowing write on remote topics).,0,0,0,0.9826253652572632,0.9792192578315736,0.966794729232788,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,238843422,6295,"i had a go at running the dedicated mm cluster. most of my comments so far are around ease of use and improving on the initial experience: 1. i couldn't immediately run mm on 1-broker clusters since several of the topics (e.g., offset and status ones) require a minimum of 3 brokers. providing a simple mm2.config file for a simple 1-broker cluster would go a long way for quick tests. 2. got a couple of warnings like ""warn the configuration 'target.cluster.alias' was supplied but isn't a known config. (org.apache.kafka.clients.admin.adminclientconfig:287)"" .",0,0,1,0.6480947732925415,0.9039266109466552,0.840069055557251,0.0,accept,majority_agreement,2
apache/kafka,reviews,255267193,6295,"that's indeed a good way to monitor the replication while the process is running ""nominally"". but if one the downstream clusters is down or suffers from whatever problems, this latency metric won't be up to date. i think a per cluster/topic/partition offset lag is needed, maybe in a second step ?",0,0,0,0.969639241695404,0.9731525182724,0.9899340271949768,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,270182404,6295,thanks for the pr! i finally took time to give mirror maker 2 a spin and hit a couple of issues but these are trivial to fix. i'll keep testing with mm2 for the next few days trying out several scenarios and will let you know how it goes.,1,1,1,0.98724102973938,0.9909929633140564,0.9922078251838684,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,273747601,6295,"with the latest changes, i can replicate clusters. there still are small issues when syncing the topic configurations though.",0,0,0,0.9799050092697144,0.9875484704971312,0.9859058856964112,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,289112157,6295,i believe you've now fixed all the issues i found. thanks for all the updates.,1,1,1,0.9639706015586852,0.9083666801452636,0.9789348244667052,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,291153884,6295,lgtm.,0,0,0,0.9832575917243958,0.968936800956726,0.9637624621391296,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,294056523,6295,: thanks for the pr. made a pass of non-testing files. a few comments below.,1,1,1,0.9089889526367188,0.9803227186203004,0.9644815325737,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,297184931,6295,": thanks for the explanation. it all makes sense to me now. so, lgtm. a few of the limitations with mm2 that i saw (1) if mm2 starts with an existing compact topic with lots of holes, there could be more overhead for writing the offsetsync data. in the worse case, every record requires a checkpoint of offsetsync data. (2) if a consumer starts consuming from the beginning, the offsets won't be translated to the target cluster until the consumer catches up. (3) prefix acls are not propagated. these may not be common issues. however, it would be useful document that in the docs. also, we will need a few new message formatters to read the new internal topics. do you plan to add that before code freeze? and : once the minor issues are addressed, perhaps you could take another look and merge the pr?",1,1,1,0.9159952998161316,0.866126298904419,0.976777732372284,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,297791929,6295,"thanks for updating [a link] so that the framework only calls the newer `sourcetask.commitrecord(sourcerecord, recordmetadata)`. i have one request to improve the javadoc for the new method to make it easier for developers writing their own sourcetask to know whether to override those methods, without having to dive into the connect runtime to figure that out.",1,0,1,0.8840419054031372,0.6361225843429565,0.8874854445457458,1.0,accept,majority_agreement,2
apache/kafka,reviews,533950499,9485,"thanks for the pr. there were build issues in the pr build, also left some comments.",1,1,1,0.8797229528427124,0.9068484902381896,0.93584543466568,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,542016927,9485,"thanks for the updates, left some more comments.",0,1,1,0.5585256814956665,0.6297225952148438,0.8370063900947571,1.0,accept,majority_agreement,2
apache/kafka,reviews,548546205,9485,"thanks for the updates, left some more comments. there seem to be a lot of changes that are not required (in tests, benchmarks etc.). can we revert all changes that are not strictly required for this pr? if a change doesn't relate to `authorizebyresourcetype`, we need to be able to explain why the change is required at all.",0,0,1,0.5696762800216675,0.5037200450897217,0.965632975101471,0.0,accept,majority_agreement,2
apache/kafka,reviews,551895349,9485,"thanks for the updates, left some more comments. the main one is about super.users. we have to support super users in all variations of the code since this is a very commonly used config , even though the config name itself is specific to the implementations.",1,1,1,0.7024155855178833,0.962794840335846,0.97527277469635,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,553596574,9485,"thanks for the updates, it is looking good. just a few more comments left.",1,1,1,0.9716108441352844,0.991300404071808,0.9865802526474,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,554798588,9485,"thanks for the updates, looks good. i did another pass through the whole pr and left some more minor comments.",1,1,1,0.9767645001411438,0.9865531325340272,0.989046037197113,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,555356520,9485,"thanks for the updates, lgtm. i will push a commit with some minor changes and merge.",1,1,1,0.9379087686538696,0.9305787086486816,0.9565148949623108,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1709172805,14690,"thanks for the pr, ! this is a hurculean effort! i leave a few questions and requests for changes.",1,1,1,0.989924132823944,0.9809236526489258,0.9946923851966858,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1712658549,14690,thanks for the pr. i have started to read it. i am not done but i already left some comments.,1,1,1,0.9327369332313538,0.9729689955711364,0.9677274227142334,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1728469440,14690,"this is a really tricky one, :grinning_face_with_smiling_eyes: i didn't get as far as i would like. i keep circling around the main `reconcile()` method as my brain starts to melt within minutes. i really appreciate all your comments as it makes it much easier to follow, though!",1,1,1,0.9745407700538636,0.9862250089645386,0.9750685095787048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1731435291,14690,thanks for the pr and sorry for the delay. i just made a first pass on the non-test files and i left some comments for consideration.,-1,-1,-1,0.9858980178833008,0.986028492450714,0.9805998206138612,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1734349548,14690,thanks for the update. i reviewed everything and left some more comments. the tests looks pretty good but i will need to make another pass on them.,1,1,1,0.9567089676856996,0.9831174612045288,0.9900327920913696,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1739483626,14690,"lgtm, thanks for the patch ! i left a few small comments and there are a few unresolved comments too. we can address those separately.",1,1,1,0.986191749572754,0.982227623462677,0.9879652261734008,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,19195996,2466,"thanks for the pr. looks quite promising. put a couple of comments. the comments about `kstreambuilder#stream()` also apply to `kstreambuilder#table()` (just did not want to put them twice). sorry for being picky with javadocs, but we just reworked them and need to keep them clean. (i am not picky about `topologybuilder` javadocs because those did not get reworked yet :))",1,1,1,0.9703487753868104,0.99032461643219,0.9935778379440308,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,19423625,2466,"thanks for the update. most comments are nitty javadoc stuff... ping for review. do you think we should add an integration test, too?",1,1,1,0.9330877065658568,0.9749670624732972,0.9781056642532348,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,19501828,2466,"- thanks for the pr. i think there are some tests missing, i.e, for the methods on `kstreambuilder` and `topologybuilder` that add `timestampextractor` i don't see any tests for them. we need tests for these in addition to the test added to `streamtasktest`",1,1,1,0.9725350737571716,0.930908977985382,0.958360493183136,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,19833572,2466,i'd still like to see some tests for `kstreambuilder#stream` etc where we are adding the timestamp extractors.,0,0,0,0.9782639145851136,0.97053861618042,0.9848880767822266,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,20178014,2466,test code needs some improvements. overall change looks quite good already.,1,1,1,0.8603965044021606,0.9500318169593812,0.9405744075775146,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,20230522,2466,has done a thorough review of this and i concur with his suggestions,0,0,0,0.9414704442024232,0.9476335048675536,0.6121846437454224,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,21278772,2466,thanks lgtm,1,1,1,0.8550243377685547,0.9280250668525696,0.923415184020996,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,24162206,2466,lgtm. please review and merge after vote on kip-123 passed.,0,0,0,0.9814181923866272,0.992355227470398,0.9925326704978944,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,28824890,2466,thanks for rebasing. can you also update javadocs for `timestampextractor` interface to explain that an implementation must be stateless. thx.,1,1,1,0.8932130932807922,0.970344305038452,0.982330560684204,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29239094,2466,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,34677192,2466,"i did one more pass, and do have some further minor comments.",0,0,0,0.9568720459938048,0.9689805507659912,0.9873589873313904,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,34689879,2466,thanks for rebasing! i did one more pass and have some more minor comments. overall very nice work!,1,1,1,0.9916117191314696,0.9956610798835754,0.9961283206939696,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,37397882,2466,"thanks for the patch . lgtm overall, just a couple of comments. also could you please rebase so we can merge it before the feature freeze deadline?",1,1,1,0.9315553307533264,0.9863378405570984,0.9502824544906616,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,37972110,2466,merged to trunk. thanks for the big contribution!,1,1,1,0.9860628247261048,0.9947178959846495,0.9919780492782592,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,244572539,6694,"thanks for the pr ! couple of comments -- might be worth to wait on input before you address them, as i am not 100% sure if the advise is correct. i never used the `offsetmetadata` myself yet, and hence, i am not 100% sure how to use it correctly.",1,1,1,0.9627899527549744,0.9761213064193726,0.9746229648590088,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,255916983,6694,thanks for the pr. could you resolve comments you already addressed?,1,1,1,0.8893487453460693,0.931044101715088,0.7867363095283508,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,259215984,6694,"sorry for the delay on reviewing. busy times again... btw: i think we should add an integration tests, too. input topic with single partitions. simple `stream.to()` program and a custom timestamp-extractor that returns ""max"" over the record-timestamp and partition-time. we write one record and check the output topic if the record was forwarded, and then stop kafkastreams. afterward, we restart kafkastreams and write a second record with _smaller_ timestamp than the first record. we again wait for the result record. this time we check that the record timestamp is the timestamp of the first record. does this make sense? not sure atm, if we need second integration test for an actual rebalance case, but atm i think one integration test should be sufficient?",-1,-1,-1,0.9905593395233154,0.9926101565361024,0.9932110905647278,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,269176581,6694,thanks for the update! the integration test looks promising -- i think we can simplify it though (compare my comments).,1,1,1,0.9846049547195436,0.9932615160942078,0.991936445236206,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,270365494,6694,thanks for the work! same minor comments.,1,1,1,0.944604754447937,0.9889468550682068,0.9878517389297484,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,272737998,6694,"some more minor comments. also, can we add tests to `partitiongrouptest` and `recordqueuetest` for the newly added methods to the corresponding classes.",0,0,0,0.9886758327484132,0.989202320575714,0.9942029118537904,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,273272538,6694,"thanks for the update. some follow ups. also, it seems you missed to add new test methods in `recordqueuetest`.",1,1,1,0.7863444685935974,0.8912743926048279,0.9636568427085876,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,274849969,6694,thank you for the pr ! here my comments:,1,1,1,0.9780645370483398,0.9855733513832092,0.9912106990814208,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,283023534,6694,sorry for the delay.,-1,-1,-1,0.9858736991882324,0.9893976449966432,0.99254310131073,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,289620368,6694,"lgtm, thank you",1,1,1,0.949394941329956,0.9677740335464478,0.9506407380104064,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,116045049,4931,"great first start, ! i was a bit picky, simply because the bulk of the approach looks really good. we need to use the java service provider api, though. details below.",1,1,1,0.9898626804351808,0.9949341416358948,0.9961618185043336,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,116594302,4931,"nice improvement, but i have a few more suggestions.",1,1,1,0.8862557411193848,0.930949091911316,0.9451737403869628,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,116612497,4931,more comments.,0,0,0,0.9670149087905884,0.9175251126289368,0.9906195402145386,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,116946770,4931,"sorry, i thought there were more changes. perhaps don't collapse commits in the pr. still missing lots of javadoc and suggestions that were not yet addressed.",-1,-1,-1,0.9809674620628356,0.9890095591545104,0.9864020943641664,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,117373977,4931,"great work, ! made some comments below. thanks!",1,1,1,0.9925178289413452,0.995630979537964,0.9970216155052184,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,117738123,4931,"nice work ! i did a first pass, left a few comments (among which a few stylistic ones).",1,1,1,0.9907358288764954,0.9945799112319946,0.9941186904907228,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,120855906,4931,"quite a few minor suggestions, and lots of javadoc missing. a few somewhat important questions below as well.",0,1,0,0.9545742869377136,0.5252271890640259,0.8678888082504272,0.0,accept,majority_agreement,2
apache/kafka,reviews,122247905,4931,"started another review before i realized you'd not addressed all of the comments. i'll stop here with some additional comments, some of which are quite nuanced due to the javadoc going into the public api.",0,0,0,0.9810897707939148,0.8415258526802063,0.9775412678718568,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,123451664,4931,", this is looking really good, so in this pass i was _super_ critical about grammar and javadoc, especially for anything user-facing. didn't really find much w/r/t the code. keep up the great work!",1,1,1,0.9912757873535156,0.9910293817520142,0.9965163469314576,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,124191269,4931,"i confirm my previous comments have been addressed. thanks ! nice work. lgtm by me, i'll defer to the rest of the reviewers for the final approval of this pr.",1,1,1,0.9896432161331176,0.9955666661262512,0.9954518675804138,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,124201983,4931,almost there. i found a number of nits that would be good to fix.,0,0,0,0.6056370735168457,0.849303662776947,0.8797860741615295,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,124229280,4931,"nice work, and thanks for the diligence, patience, and responsiveness with my reviews!",1,1,1,0.987438976764679,0.9933587908744812,0.9950007796287536,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,124245308,4931,"since `connectrestextensioncontext` is in the public api and we're getting some mixed signals about mutability and how much we expose this publicly, we should probably follow up on the interaction between the two kips regarding this class and its behavior. not a blocker, but we should follow up. i'll merge this to trunk for 2.0.0 now since we've resolved all the issues on this particular patch.",0,0,0,0.9607437252998352,0.9908457398414612,0.9823770523071288,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,194960948,6177,gave some of the code a short skim. i'll check it again later. let me just say thanks for driving this change - this is a great improvement and obviously requires a lot of effort to implement and test.,1,1,1,0.9723137617111206,0.9467192888259888,0.99226576089859,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,196096967,6177,i gave this pr a better pass now. i think this is sound functionality-wise. i left a couple of small comments about tests and style but otherwise lgtm! thanks a lot for the work on this ! the tests are very exhaustive :),1,1,1,0.9933978319168092,0.9960792660713196,0.9967358708381652,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,197351158,6177,the high level logic looks good to me. i left some minor comments to clarify my understanding.,1,1,1,0.9293739199638368,0.8753890991210938,0.9596590399742126,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,208128272,6177,left a few initial comments. i'll try to look over the coordinator logic later this week.,0,0,0,0.9841455817222596,0.9819839596748352,0.9885281324386596,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,209786185,6177,"haven't finished reviewing, but i had one important question on fencing.",0,0,0,0.908183455467224,0.8779489994049072,0.8194622993469238,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,220189821,6177,"made a pass over the pr, here are some nit comments plus one meta comment.",0,0,0,0.9854342937469482,0.9895846247673036,0.9528170228004456,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,224589699,6177,"thanks, a few more comments.",0,1,1,0.5228917598724365,0.8427373170852661,0.6579054594039917,1.0,accept,majority_agreement,2
apache/kafka,reviews,229299231,6177,"made another pass on the code, there are still some comments left. also we should make sure client and streams system test does not fail on jenkins before merging this. regarding `consumerprops.put(consumerconfig.group_instance_id_config, null)`. i think 's point is that, if this object is defined with `null` as the default value already (e.g. as group.id, and also as this group.instance.id as we agreed before), then not specifying it on the props map is fine since when parsing the originals, it will still use the default value, `null` to put into the map. hence we only need to check if the loaded prop file has this key or not: if not we do not need to do anything and the default `null` value will be used directly.",0,0,0,0.9456891417503356,0.9915407299995422,0.984562337398529,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,30182128,2772,"review notes, to address small formatting changes, missed in cherry pick merge.",0,0,0,0.981376588344574,0.9925191402435304,0.9923054575920104,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,31473117,2772,thanks for the patch. i made a pass and left some comments.,1,1,1,0.790584921836853,0.907551646232605,0.8684787750244141,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34165155,2772,thanks for the patch! left a few minor comments. one thing that would be good to add is an integration test (maybe in `plaintextconsumertest`) which utilizes headers and the extended serdes.,1,1,1,0.9524150490760804,0.984847366809845,0.9871834516525269,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34678907,2772,"thanks for the patch. one minor comment, but otherwise lgtm.",1,1,1,0.8923525214195251,0.9872772097587584,0.9681185483932496,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,35255061,2772,i had a quick look and left a few minor comments.,0,0,0,0.9739886522293092,0.856438398361206,0.946631133556366,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,16050313,2330,"-rosenblatt mostly looks good. a pile of comments, but they're mainly nits/questions. i figure given where these changes are happening a system test run would also help. have fired off a job, should show up at [a link] once jenkins gets past it's current queue and decides to start the job. (also, looks like something else got merged and this needs a rebase now.)",1,1,1,0.9520370364189148,0.8595048785209656,0.9285592436790466,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,16105458,2330,"thanks for the pr, this is a nice improvement. i only had a chance to take a brief look and left a couple of comments.",1,1,1,0.9827158451080322,0.9947383999824524,0.989644169807434,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,16141737,2330,"haven't gone through the whole code yet, have left a few comments.",0,0,0,0.885554313659668,0.9800019264221193,0.9684216976165771,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,17451584,2330,-rosenblatt thank you for the updates. i have added a few more comments around the handling of ssl buffers. it will be really good to have a unit test for this scenario if possible.,1,1,1,0.976116180419922,0.9373232126235962,0.9902344942092896,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,17885572,2330,"-rosenblatt the test is good, but i have added a comment about a timing failure i am seeing. also, the test validates `simplememorypool` in strict mode, while only the non-strict mode is actually used by the implementation. do we even want to have a strict mode? i ask because the strict mode is not handled well in selector. in the test scenario, where there is not enough memory for the request, selector would just constantly go in and out of oom, muting and unmuting, since muting is based on oom for a specific request while unmuting is based on any memory available in the pool. it only makes sense in the non-strict mode.",0,0,0,0.7536489367485046,0.9309322237968444,0.7851654291152954,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,18038451,2330,"-rosenblatt just noted a minor typo in thread name, but apart from that both implementation and tests look good. i agree that the scenario that you described is a corner-case and the implementation is good enough as is. thank you for your patience. it is a +1 from me. perhaps or could take a look and commit?",1,1,1,0.9811363816261292,0.984012246131897,0.98921400308609,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,18549680,2330,-rosenblatt : thanks for the patch. looks good overall. left a few comments.,1,1,1,0.9824864864349364,0.9943122863769532,0.9915282726287842,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,37182203,2330,-rosenblatt : thanks for rebasing. made another pass and left some comments.,1,1,1,0.8903397917747498,0.9222914576530457,0.9654910564422609,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51368717,2330,"-rosenblatt : sorry for the delay. made another pass. it looks pretty good. just a few minor comments below. , do you want to take a look too?",-1,-1,-1,0.9833161234855652,0.9802518486976624,0.986045777797699,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,52173432,2330,"-rosenblatt : thanks for the latest patch. a few more minor comments. also, if you preserve the commits, it will make the reviews easier.",1,1,1,0.9501094818115234,0.9833461046218872,0.9817189574241638,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,272092993,7170,"thanks for the pr. made an initial pass. i still need to wrap my head around the optimization layer and how we merge repartition nodes. we need to add more test to `repartitionttopicnametest` and/or `streamsgraphtest` imho, to verify that the new `repartition()` operator works as intended. also, it seems you forgot to update `groupby()` and `groupbykey()`. finally, thinking about the kip once more: as we extend `groupby` to configure the internal repartition topic, i am wondering if we should extend the kip and also allow to do this for `join()` that may also create repartition topics? \cc",1,1,1,0.9138267636299132,0.941911280155182,0.9234079122543336,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,278540572,7170,"hey , i finally got a chance to look at your pr. excited to see this going in! i left a few comments, but nothing huge. if you haven't done it already, can you run your tests with coverage and verify that you're happy with the actual coverage in the main code you've changed? we've had a few embarrassing bugs in new features when we had a test coverage gap... it'd be nice to make sure this works for everyone the first time around! thanks so much, -john",1,1,1,0.9911338686943054,0.9940882921218872,0.9957160353660583,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,284432806,7170,"thanks for the updates, . this lgtm now.",1,1,1,0.8918154835700989,0.8739385008811951,0.9340808391571044,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,294613183,7170,"i have one main concern atm, with regard to joins(). it seems that it might be possible that we change the number of user specified partitions within `streamspartitionassignor` what would not be correct imho. let's say, we have one input topic a with 1 partition and input topic b with 4 partitions. if we do [code block] i believe, we would not repartitions ""a"" with 2 partitions but with `4`. can we add a corresponding test? for the joins case, there might actually be other corner case in which we might want to raise an exception. for example: [code block] in this example, the user enforced 2 and 4 partitions but that is not valid because we need the same number of partitions for compute the join correctly. however, i believe, we would atm not throw an exception but increase the partition count of the one topic to 4, too.",0,0,0,0.9349730610847472,0.9899736642837524,0.9433106780052184,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,344962853,7170,sorry for the delay in review -- we are swamped with work and it's hard to get around... (it's also a quite big pr and thus even harder to find time to review...),-1,-1,-1,0.9907265901565552,0.9918406009674072,0.9956058859825134,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,374744806,7170,"haha, well. i _did_ start the review, and made a fair amount of progress before getting sidetracked by a global catastrophe... it's still in my ""actively working on this"" bucket, and i'll commit to not starting new work until i finish my review. for now, i'll go ahead and ask this one question, which came up early in my review. i skimmed over the kip and discussion thread, but didn't see a specific discussion of the overload in question.",1,1,1,0.7243902683258057,0.9545353055000304,0.9111201763153076,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,385150011,7170,"hey, , i _finally_ finished my review, and it looks good to me. i'm not sure if wants to make another pass.",1,1,1,0.9164806604385376,0.9341330528259276,0.973290205001831,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,385257912,7170,sorry for the delay in reviewing!! and thanks to to help pushing this through. overall lgtm. thanks for writing extensive tests!,-1,-1,-1,0.9882715344429016,0.9896760582923888,0.9935483336448668,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,341491620,7884,": thanks for the new patch. overall, the logic still seems a bit over-complicated to me. left a few more comments below.",1,1,1,0.938126266002655,0.9255623817443848,0.964633584022522,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,344249814,7884,: thanks for addressing the comments. a few more comments below.,1,1,1,0.8186752200126648,0.9118492007255554,0.95646733045578,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,352685569,7884,: thanks for the updated pr. made another pass of the non-testing files. a few comments below.,1,1,1,0.8931055068969727,0.9680305123329164,0.9601709246635436,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,360781525,7884,": thanks for the update. a few more comments below on the organization of the code. sorry for keeping asking you to iterate on this. however, since the code is getting a bit more involved, i want to make it easier for future contributors to understand the logic.",-1,1,-1,0.952791392803192,0.8443030118942261,0.947952687740326,-1.0,accept,majority_agreement,2
apache/kafka,reviews,361446248,7884,: thanks for the updated pr. a few more comments below.,1,1,1,0.8806174993515015,0.9159396886825562,0.9290188550949096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,362994397,7884,: thanks for the updated pr. the overall approach looks good to me now. a few more detailed comments below.,1,1,1,0.978883981704712,0.9909329414367676,0.9885244965553284,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,365274957,7884,: thanks for the new patch. a few more comments on test files.,1,1,1,0.903899312019348,0.9579751491546632,0.9698965549468994,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,366024592,7884,": thanks for the updated pr. a few more minor comments below. : could you make a pass of the log cleaner logic too, especially with respect to the txn markers? thanks.",1,1,1,0.9675277471542358,0.9907061457633972,0.983778476715088,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,366583456,7884,": thanks for the updated pr. a few more comments. some of them are from the previous round, but not addressed.",1,1,1,0.8798274397850037,0.9677076935768129,0.9618640542030334,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,367655583,7884,: thanks for the updated pr. i made another pass of the tests. a few more comments below.,1,1,1,0.9320163130760192,0.9684290289878844,0.9684643745422364,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,372942510,7884,: thanks for the latest pr. lgtm. waiting to see if has any more comments.,1,1,1,0.9287837147712708,0.9176534414291382,0.9799181818962096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,373022703,7884,thanks for the patch. left some comments in the filtering logic. still need to look over the cleaner.,1,1,1,0.6060324907302856,0.938279390335083,0.95563805103302,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29031913,2735,a few minor comments (i've seen all of this before obviously).,0,0,0,0.9600012302398682,0.9165207147598268,0.9327426552772522,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,29610617,2735,: thanks for the patch. some comments on the server side.,1,1,1,0.8059796690940857,0.7902764678001404,0.9501552581787108,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29781026,2735,a couple of initial comments on the producer side.,0,0,0,0.984652578830719,0.986465871334076,0.987504780292511,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,30112104,2735,: thanks for the patch. lgtm. just a few more minor comments.,1,1,1,0.9323915839195251,0.9701521992683412,0.9786943197250366,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30123770,2735,thanks for the pr. left a bunch of minor comments.,1,1,1,0.6068235039710999,0.9783499240875244,0.862856388092041,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30213820,2735,a few minor comments.,0,0,0,0.9617520570755004,0.9563339948654176,0.9576659798622132,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,30427235,2735,a couple of minor comments. probably you can address them in a followup patch.,0,0,0,0.985177516937256,0.9832198023796082,0.9759331345558168,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,54564800,3621,thanks for the patch. i'll review it soon. i have one high level comment below regarding the scope of this patch. does that make sense?,1,1,1,0.8978890180587769,0.8710370063781738,0.9853237867355348,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,55426696,3621,thanks for the patch. i haven't finished the review yet. will finish it tomorrow.,1,1,1,0.9326239228248596,0.8312476277351379,0.9668917655944824,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,55990989,3621,thanks for the patch. i made a pass on all the none testing code and left some comments.,1,1,1,0.8785596489906311,0.9107456803321838,0.9462279677391052,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,57356327,3621,thanks for the patch. looks good overall. left some minor comments. do you also have time to take a look? this patch is part 1 of kip-113 which added the wire protocols and allows users to specify log dir when a new replica is created on a broker (either through topic creation or partition reassignment). a follow up patch will implement the mechanism of replica movement within a broker.,1,1,1,0.977794885635376,0.9889737367630004,0.9904738068580629,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,57901755,3621,: thanks for the patch. looks good overall. added a few comments below.,1,1,1,0.9802313446998596,0.9902446269989014,0.99087393283844,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,58545656,3621,: thanks for the updated patch. a few more minor comments.,1,1,1,0.8447102308273315,0.8900773525238037,0.9527956247329712,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,59716978,3621,: thanks for the patch. lgtm. just a minor comment below. i will let jiangjie make the final pass of the patch.,1,1,1,0.9627556204795836,0.928391456604004,0.981702983379364,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,60269908,3621,thanks for updating the patch. made another pass. just two comments regarding the inference of error on the client side. otherwise lgtm.,1,1,1,0.7136607766151428,0.9433826804161072,0.9392340183258056,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,384349548,7898,first pass,0,0,0,0.9493863582611084,0.944432497024536,0.9902111291885376,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,851562910,7898,"overall i think this is a thorough pr, thanks for doing it. had a few comments but otherwise it'd be a +1 from me. would be happy to see this merged.",1,1,1,0.9793349504470824,0.99467933177948,0.9929185509681702,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,870570014,7898,thanks for the pr. i've made a first pass (did not look at ./streams or ./tests) and i think it looks pretty good. i left a few comments/questions.,1,1,1,0.9630610942840576,0.9909369349479676,0.9871751666069032,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,894460030,7898,had a 1st pass to the changes above `plaintextadminintegrationtest.scala`. will continue to review the remaining code changes. thanks.,1,1,1,0.9653518199920654,0.9436329007148744,0.9721027612686156,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,894470734,7898,had a 1st pass to the changes above `rocksdbtimestampedstoretest.java`. will continue to review the remaining code changes. thanks.,1,1,1,0.9602693915367126,0.9552039504051208,0.9706825017929076,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,894477032,7898,", i've had a first pass to all the files. thanks for the work! in addition to the comments left, some high level comments: 1. please rebase to the latest trunk to fix merge conflict 2. i think we should run a system test and trogdor test to make sure this change won't break existing tests. thank you.",1,1,1,0.987936794757843,0.9947465062141418,0.994238257408142,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,460417792,9039,did a first pass. did not look into all details yet (especially the actual algorithm -- need more time to grog it),-1,0,0,0.5278112292289734,0.9447049498558044,0.9805088043212892,0.0,accept,majority_agreement,2
apache/kafka,reviews,461257792,9039,"looking good! the actual algorithm code turned out surprisingly clean, nice job simplifying everything.",1,1,1,0.9921212196350098,0.9955539107322692,0.9963229894638062,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,464624060,9039,"still going through the integration tests, leaving my partial review for now",0,0,0,0.9816949367523192,0.9755325317382812,0.9841921329498292,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,473887680,9039,"looking good! i ran the randomized input test 500 times locally to check, all green :thumbs_up:",1,1,1,0.9910436868667604,0.9956310987472534,0.996491014957428,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,476853714,9039,"hey , thanks for the feature! this pr looks great to me overall, just a few comments. i also noticed one of sophie's comments (about a typo `supplies` -> `supplier`) still needs to be addressed. thanks, -john",1,1,1,0.9909407496452332,0.995263934135437,0.9965901374816896,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,479000860,9039,"thanks, !",1,1,1,0.964749276638031,0.9601993560791016,0.9907322525978088,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2142339499,16456,"thanks for the pr. took an initial look, will review again later. some comments though.",1,1,1,0.8729039430618286,0.9725794792175292,0.9483858942985536,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2153743994,16456,"did a partial review, will complete the review post addressing current comments.",0,0,0,0.9850316047668456,0.99004864692688,0.989941418170929,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2156298186,16456,"the pr has unintended changes i think, can we please clean them.",0,0,0,0.975524127483368,0.8000462651252747,0.9005621671676636,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2168812397,16456,"thanks for updating the pr, it mostly looks good apart blocking calls and some suggestions.",1,1,1,0.940560519695282,0.9874512553215028,0.961635947227478,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2197835817,16456,-wadhwa5 : thanks for the pr. made a pass of non-testing files. left a few comments.,1,1,1,0.9508138298988342,0.9489240050315856,0.960195541381836,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2204816887,16456,lgtm! some minor nit and adressing 's comments.,0,1,1,0.8378230929374695,0.5170518755912781,0.9851313233375548,1.0,accept,majority_agreement,2
apache/kafka,reviews,2206351244,16456,-wadhwa5 : thanks for the updated pr. made a pass of all files. a few more comments.,1,1,1,0.9617795944213868,0.9650347232818604,0.972510814666748,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2213381947,16456,"-wadhwa5 : thanks for the updated pr. a few more comments. also, there seems to be a compilation error in the test.",1,1,1,0.935575008392334,0.8466646671295166,0.9708842635154724,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2216089659,16456,"-wadhwa5 : thanks for the updated pr. a few minor comments. also, there still seems to be compilation errors.",1,1,1,0.9136004447937012,0.907324194908142,0.9644885063171388,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2216520136,16456,-wadhwa5 : thanks for the updated pr. it seems there are still compilation errors.,1,1,1,0.934575855731964,0.8863800764083862,0.954629361629486,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2219414506,16456,-wadhwa5 : thanks for the updated pr. do you know why there are many test failures?,1,1,1,0.9356058835983276,0.8643335103988647,0.9284661412239076,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2219617244,16456,-wadhwa5 : thanks for the updated pr. just one more comment.,1,1,1,0.9682970643043518,0.931383728981018,0.9524530172348022,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2221556552,16456,-wadhwa5 : thanks for the updated pr. lgtm,1,1,1,0.9604235291481018,0.9099451899528505,0.979363203048706,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1633518313,14364,thanks for the pr. i just made a first pass and left a few high level comments/questions.,1,1,1,0.8640310764312744,0.9718772768974304,0.9528972506523132,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1636484217,14364,thanks for the pull request!,1,1,1,0.8757541179656982,0.8458459377288818,0.8261392712593079,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1651058631,14364,thanks for the pr. i looked into the non-test files and left some comments for consideration.,1,1,1,0.903254508972168,0.9534873366355896,0.9076851010322572,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1652710243,14364,i just made another pass on the non-test files and i left a few more comments/questions.,0,0,0,0.9797248840332032,0.9683564901351928,0.9921028017997742,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1657320395,14364,"thanks for the update, . i left a few more comments. we are getting there...",1,1,1,0.9737154245376588,0.9903708100318908,0.9851559400558472,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1659896044,14364,thanks for the update. i just replied to existing comments and left a few nits.,1,1,1,0.7917900681495667,0.8701465725898743,0.9407355189323424,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1661810574,14364,thanks for the update. i wanted to merge it to unblock the next prs but the code does not compile... so i left a small comment.,1,1,1,0.9154041409492492,0.905112087726593,0.9493106007575988,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1664798711,14364,"lgtm, thanks.",1,1,1,0.8687224388122559,0.8991513252258301,0.8075713515281677,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2348722074,17373,"thanks for tackling this . is it really necessary to rename the log4j config files? the kip mentions a system property that allows us to load log4j.properties files [a link] i could understand migrating our internal log4j configs for tests and such, but i think we should avoid forcing a change in our production configs. i also see that this page mentions a log4j to log4j2 bridge [a link] would that help us at all?",1,1,1,0.8210763931274414,0.766249418258667,0.9649505019187928,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2384990466,17373,had a pass to `loggingresource.java`. will continue to review when available. thanks.,1,1,1,0.9669883847236632,0.9638464450836182,0.9780836701393129,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2385239181,17373,"hi very appreciate your review. about zk stuff, i'm think about removing the zk configurations might be better handled as a follow-up pr. wdyt?",1,1,1,0.9565804600715636,0.992368757724762,0.988410472869873,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2387408736,17373,had a look for all the changes. left some comments.,0,0,0,0.9737464785575868,0.9603611826896667,0.9165138006210328,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2437985830,17373,"lgtm! left a minor comment, but we can address it in a separate pr. thanks for the effort!",1,1,1,0.9891586303710938,0.9934760928153992,0.994950532913208,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2438301792,17373,"thanks for the updates, i made another pass and left a few comments and suggestions.",1,1,1,0.7850199937820435,0.8469760417938232,0.9085410833358764,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2442212625,17373,thanks for the updates! i tested the connect `/admin/loggers` endpoint and it looks good.,1,1,1,0.9881703853607178,0.9873702526092528,0.9913408160209656,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2442563227,17373,thanks for taking over this huge issue. i left some major comments for you.,1,1,1,0.94552081823349,0.9636720418930054,0.9551281929016112,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2444376755,17373,thanks for this patch. a couple of comments remain. ptal,1,1,1,0.9215493202209472,0.984497845172882,0.9719780683517456,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2444669390,17373,thanks for this patch. a couple of comments are left.,1,1,1,0.7271599769592285,0.9581088423728944,0.9000081419944763,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2445984425,17373,thanks for this patch. please check my latest comments to fix e2e,1,1,1,0.9618889093399048,0.8877006769180298,0.9208360314369202,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2448721648,17373,please double check the yaml format. i leave some comments about the incorrect format.,0,0,0,0.964047372341156,0.8967289328575134,0.993966817855835,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2465343579,17373,"thanks for the updates. the logging issues i had previously are fixed. i tested describing and altering broker levels with the admin api and it worked fine. however i ran into an issue when testing the connect rest api and there's definitively a bug in that logic, see my other comment. what's puzzling is that the ci passed, so it seems we are missing test coverage in that area. if you'd rather add the missing test in a separate pr, can you open a jira to track this issue? thanks",1,1,1,0.9573573470115662,0.9841101169586182,0.9836593866348268,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2471037405,17373,thanks for the updates. there are additional breaking changes that are causing the end-to-end tests to fail. i’ve left comments on the relevant code. please take a look.,1,1,1,0.7247844338417053,0.5457810759544373,0.951451063156128,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1385125558,13561,"thank you for the pr satish :pray: i have some performance related comments such as, performing copying and cleaning in same thread pool. you can choose to create a jira for them and we can address them separately. other comments associated with correctness, such as, accounting for segments not in current epoch chain may be urgent enough to address in this pr.",1,1,1,0.8605554103851318,0.9809523224830629,0.9848686456680298,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1440756712,13561,: thanks for the pr. made a pass of non testing files. a few comments below.,1,1,1,0.908488631248474,0.982595682144165,0.96799498796463,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1440764440,13561,: thanks for the pr. made a pass of non testing files. a few comments below.,1,1,1,0.908488631248474,0.982595682144165,0.96799498796463,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1440764461,13561,: thanks for the pr. made a pass of non testing files. a few comments below.,1,1,1,0.908488631248474,0.982595682144165,0.96799498796463,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1468595834,13561,: thanks for the updated pr. made a pass of all files. left a few more comments.,1,1,1,0.9194198250770568,0.9794609546661376,0.9628345966339112,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1558464951,13561,thanks for the update. left some comments.,1,1,1,0.5669420957565308,0.7083953619003296,0.8212046027183533,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1558595236,13561,left some more comments. thanks.,1,1,1,0.8799732327461243,0.958495318889618,0.9167362451553344,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1568396581,13561,: thanks for the updated pr. made another pass of non-testing files. a few more comments.,1,1,1,0.921441376209259,0.9802025556564332,0.9683336019515992,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1574219899,13561,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1576230523,13561,"overall lgtm, except the potential issue raised by jun [a link]. thanks.",1,1,1,0.9626012444496156,0.968522846698761,0.9221528768539428,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1576361638,13561,"overall lgtm, left minor comments to address.",0,0,0,0.9871011972427368,0.9912797808647156,0.9924048781394958,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1577473290,13561,": thanks for the updated pr. a few more comments. also, do we have any test covering the newly introduced local retention logic?",1,1,1,0.9522121548652648,0.960908055305481,0.9667127132415771,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1581103165,13561,: thanks for the updated pr. just one minor comment. do you know why there are 100+ test failures?,1,1,1,0.9580965042114258,0.974093735218048,0.9462736248970032,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1583212640,13561,: thanks for the updated pr. added one more comment.,1,1,1,0.9098809361457824,0.959244430065155,0.9498275518417358,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1587898614,13561,"thank you for your patience throughout this pr satish! this was a big one. i am good with the changes made in this pr (assuming ci tests are sane). there are multiple follow-up jira tickets that we have opened as part of this pr, let's keep a track of those as we finalize 3.6. please wait for approval from jun and other active reviewers before merging this in.",1,1,1,0.9902278184890748,0.9946495890617372,0.9933373928070068,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1588185187,13561,lgtm!,1,1,1,0.7413927316665649,0.9057464599609376,0.8055883049964905,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1589579004,13561,"the current changes make sense to me, apologies for arriving late to this review",-1,-1,-1,0.8926253318786621,0.7740044593811035,0.9362607598304749,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1593125881,13561,thanks for driving this! changes lgtm as well.,1,1,1,0.971572995185852,0.9695034027099608,0.9906214475631714,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1594048686,13561,: thanks for the explanation. lgtm,1,1,1,0.9281439781188964,0.6873975396156311,0.9788564443588256,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,128020211,5201,some comments about the updates here,0,0,0,0.9835482239723206,0.9735167622566224,0.991100013256073,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,132187743,5201,"looks good overall to me. i did not go through and prove the correctness of each node, but i can if desired. i asked a couple of questions.",1,1,1,0.9609408378601074,0.7844623923301697,0.7930869460105896,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,132201662,5201,one initial pass -- did not look at the tests yet.,0,0,0,0.9446426630020142,0.9585370421409608,0.983045220375061,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,141796054,5201,made a pass over the pr.,0,0,0,0.9826854467391968,0.9888501763343812,0.9920220375061036,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,142001771,5201,"mostly nits. lgtm overall, modulo some of guozhang's comments.",0,0,0,0.986941397190094,0.8173746466636658,0.9836345911026,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1417634010,13639,the logs may be misleading if clients join/leave via heartbeat requests but the coordinator fails to append records right?,0,0,0,0.921180248260498,0.9644882678985596,0.9848276376724244,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1442304227,13639,took a look at consumergroup and consumergrouptest,0,0,0,0.9816664457321168,0.9882835149765016,0.9876996278762816,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1444737187,13639,"left minor comments, i think the rest look good. the comments really help with understanding the code. thanks!",1,1,1,0.9839445948600768,0.995294749736786,0.9960804581642152,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1444756495,13639,"left minor comments, i think the rest look good. the comments really help with understanding the code. thanks!",1,1,1,0.9839445948600768,0.995294749736786,0.9960804581642152,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1451304497,13639,lgtm!,1,1,1,0.7413927316665649,0.9057464599609376,0.8055883049964905,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1451433227,13639,thanks david :),1,1,1,0.9847477078437804,0.9803937673568726,0.98117995262146,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,109138439,4812,"i have not seen the `skippedrecordssensor` to be recorded for other reasons yet, but i think from `processorcontext` it should be able to include the record metadata on all such occurrences.",0,0,0,0.9858481884002686,0.989950716495514,0.9935171604156494,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,109859370,4812,"a few meta comments: 1. we should update the docs/upgrade-guide section, emphasizing that users who monitor based on the old metrics will be impacted (it is not compatible), and what they should start monitoring instead in the new version. also, we need to mention the new apis added to `topologytestdriver`. 2. we did not include any other places to record `skippedrecordssensor` yet. however, the added unit test still passed, i'm not sure why it is the case (`skippedrecordssensor` was not recorded when it happened yet)?",0,0,0,0.9539896845817566,0.9932957291603088,0.9653527140617372,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,109909654,4812,"made a pass over this commit only. i think it is a good idea to encapsulate the sensors into the metrics so we do not pass individual sensors around. one concern i had though, is that by moving `streamsmetricsthreadimpl` to `streamsmetricsimpl`, we are effectively wrapping the thread-level metrics into the `internalstreamsmetrics` since the exposed apis like `taskcreatedsensor ` should be thread-level only (that makes thinking, should `internalstreamsmetrics` just be `threadmetrics`)? but for other layers, the awkward thing is that, for example, in `taskmetrics` it has a reference of the total thread-level metrics which it does not really need: all it needs is the functionality to register more sensors into the underlying `metrics registry`. so i'm wondering instead of make `internalstreamsmetrics extends streamsmetrics`. could we: 1. make `internalstreamsmetrics` an independent interface with those thread-level metrics (we can rename it to `threadmetrics` to clarify). 2. let `streamsmetricsthreadimpl` implement `threadmetrics`, while holding a reference to the `streamsmetrics` register the sensors. 3. similarly for `taskmetrics`, `cachemetrics` and `processornodemetrics`, we do the same: each exposing its sensors as an api, while the corresponding impl class to get a reference of the `streammetrics` to call its `addxxsensor` etc functions. wdyt?",0,0,0,0.8301629424095154,0.966285526752472,0.9019474387168884,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,110080377,4812,i've left just a couple of minor comments. overall i'm in favor of the change since this avoids the need to pass sensors around and returning values for metrics that can be captured where the event occurs. but i agree with on naming and structure suggested for the metrics refactoring proposed here.,0,0,0,0.9385606050491332,0.9007697105407716,0.5629622936248779,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,110149602,4812,overall looks good. couple of nits and questions.,1,1,1,0.9555004835128784,0.9275836944580078,0.8673852682113647,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,110268499,4812,some more comments.,0,0,0,0.9729931354522704,0.9690834283828736,0.9914333820343018,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,110532697,4812,"overall looks good, just a couple of additional minor comments.",1,1,1,0.7743587493896484,0.9230304956436156,0.9175300002098083,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,110625874,4812,"thanks for the pr. overall it looks reasonable to me. i have only minor detailed comments, plus the meta comment about follow-up refactoring and the docs changes: 1) we should update `upgrade-guide` to warn users their monitoring needs to be updated, 2) in `monitoring` we'd better update the skipped records to list possible reasons it will be recorded.",1,1,1,0.9742324352264404,0.980354368686676,0.9681783318519592,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,110629640,4812,"another meta comment: in `kstreamaggregate`, `kstreamreduce`, when either the key or value is null, we also skipped the record, should we record this as well since in many places it is not an expected event?",0,0,0,0.9861809611320496,0.9940395355224608,0.9926843047142028,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,111021059,4812,i left some comments on the high-level approach. will dig into details after we have agreed on the proposal itself.,0,0,0,0.9754180312156676,0.9808273315429688,0.9899847507476808,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,111364617,4812,"overall lgtm, just left some additional comments.",0,0,0,0.9882634878158568,0.9800297617912292,0.9929197430610656,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,111832721,4812,left a few more meta comments.,0,0,0,0.9818994998931884,0.9525853991508484,0.9641709327697754,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,113037758,4812,made one more pass over the pr.,0,0,0,0.980241060256958,0.9858161211013794,0.9900880455970764,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,113814217,4812,lgtm except an comment regarding [code block],0,0,0,0.986091673374176,0.9896299242973328,0.9936038851737976,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,114057222,4812,"overall looks good, just have a few comments.",1,1,1,0.7683128714561462,0.8954839706420898,0.9558387398719788,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,295980437,7378,"hey , i finally made a pass over this. it honestly looks great! super clean; just a few notes. thanks, -john",1,1,1,0.993031084537506,0.9958378076553344,0.99714595079422,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,296352613,7378,"thanks for the high quality kip and pr, complete with tests and docs, ! this looks good to me.",1,1,1,0.992300271987915,0.9957656860351562,0.9953495860099792,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,296936783,7378,"thanks for the hard work in this , just minor comments otherwise lgtm pending rebase for conflicts.",1,1,1,0.8687740564346313,0.9814323782920836,0.9728643894195556,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,297267664,7378,"overall lgtm. i put many nit comments, especially to improve javadocs, what seems important for public apis. you can also do a follow up pr to address the javadoc comments so we can meet the deadline tomorrow. for code comments, it would be great if we could resolve them beforehand.",1,0,1,0.7652357816696167,0.9123488664627076,0.9022720456123352,1.0,accept,majority_agreement,2
apache/kafka,reviews,159900242,5709,"thanks for the pr, ! the majority of my comments are nits...",1,1,1,0.9893460869789124,0.9894696474075316,0.9599042534828186,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,160084220,5709,"this lgtm now. thanks, !",1,1,1,0.9848094582557678,0.993051290512085,0.9959977865219116,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,160125897,5709,"one major comment around `createrepartitionedsource`, others are minor.",0,0,0,0.9864103198051452,0.9914321899414062,0.9810574054718018,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2383097188,17539,"lgtm, left some comments.",0,0,0,0.987758457660675,0.951387584209442,0.9853492379188538,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2383497969,17539,: thanks for the pr. left a comment.,1,1,1,0.8396849632263184,0.9656598567962646,0.941619634628296,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2388250314,17539,thanks for the updated pr. left some comments.,1,1,1,0.6399304866790771,0.9117461442947388,0.8400391936302185,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2388835452,17539,thanks for the pr. apoorv's comment about the exception handling is definitely important.,1,1,1,0.898931622505188,0.9748386144638062,0.983873963356018,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2390596874,17539,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2393399821,17539,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2399942069,17539,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2408665389,17539,": thanks for the updated pr. a few more comments. also, it seems the previous comments on sharepartition haven't been addressed?",1,1,1,0.892337441444397,0.9477524161338806,0.96721351146698,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2410657569,17539,: thanks for the updated pr. left a few more comments.,1,1,1,0.8776294589042664,0.9647477269172668,0.9539056420326232,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2413798480,17539,: thanks for the updated pr. made a pass of all files. a few more comments.,1,1,1,0.9209041595458984,0.9845346212387084,0.9694985151290894,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2414346629,17539,"thanks for updated pr, some comments.",1,1,1,0.7178276777267456,0.8569676876068115,0.7899162173271179,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2416969009,17539,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2419456942,17539,: thanks for the updated pr. just a few minor comments.,1,1,1,0.9021700620651244,0.9680233001708984,0.9505402445793152,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2419688517,17539,though i would have preferred [a link] but not something which is really important to me. and 1 major thing we need to fix is [a link] in subsequent prs. lgtm otherwise.,0,0,0,0.949617087841034,0.9125884771347046,0.8729302287101746,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2421378687,17539,": thanks for the updated pr. lgtm left a few minor comments. since the pr has been iterated for some time, let's address them in the followup pr.",1,1,1,0.9334893822669984,0.9462791085243224,0.9753457903862,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,32771597,2849,: thanks for the patch. a few quick comments so far.,1,1,1,0.9008694291114808,0.923694372177124,0.9688511490821838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,32916057,2849,: thanks for the patch. made a pass of all non-testing code and left some comments.,1,1,1,0.907843053340912,0.8601012825965881,0.965505838394165,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34401433,2849,": thanks for the updated patch. made another pass of the non-test files and added some more comments. some of the issues can potentially be addressed in a followup patch, as long as we mark that clearly. also, it seems that we don't have the code to (1) abort a long transaction; (2) expire a transactional id not being actively used some time?",1,1,1,0.9284810423851012,0.5775108337402344,0.973214626312256,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34708999,2849,"made a pass over the added non-test code beyond my commits, also places that i got pinged.",0,0,0,0.976002871990204,0.9759305119514464,0.9922598004341124,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,36212973,2964,left a few comments. i'm still working my way through the whole thing (been out of the tc code for too long).,0,0,0,0.834837794303894,0.755718469619751,0.9723290205001832,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,36418258,2964,: thanks for the patch. left a few comments.,1,1,1,0.8306178450584412,0.9525304436683656,0.9373298287391664,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,36847133,2964,a few comments in `transactioncoordinator`.,0,0,0,0.9886196851730348,0.9925334453582764,0.9945858716964722,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,37886047,2964,"thanks , lgtm.",1,1,1,0.877602756023407,0.8723828196525574,0.8876838684082031,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,37931050,2964,: thanks for the patch. left a few more comments.,1,1,1,0.8531219959259033,0.9619178771972656,0.9424472451210022,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1288512,1884,"looking good. some minor comments. on the `internaltopicconfig.toproperties` change suggested - i'm happy if we do the tidy up, i.e., change to using a `map` in another pr - i'll leave it up to you. thanks",1,1,1,0.9829428195953368,0.9939473867416382,0.9936156272888184,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1376803,1884,"one minor comment, otherwise lgtm. thanks",1,1,1,0.9693185687065125,0.99208003282547,0.9742813110351562,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1998443,1884,also fyi to who's working on kip-4 that includes adding an `adminclient` as we hope these clients (probably part of the blocking behavior in `consumernetworkclient`) can be condensed into a single class.,0,0,0,0.98686546087265,0.9909418225288392,0.9914522171020508,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,5160896,1884,could you complete the loop with error code checking?,0,0,0,0.9878368973731996,0.9911174774169922,0.992731273174286,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,15583751,1884,left some comments.,0,0,0,0.9736409187316896,0.8636953830718994,0.9911321997642516,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,139658225,5379,"thanks for the pr. i haven't gone through the tests yet, but the implementation looks good overall. i have left some minor comments.",1,1,1,0.9598186612129213,0.9937187433242798,0.9870814681053162,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,139688830,5379,almost there!,1,1,0,0.8280838131904602,0.8523185849189758,0.9370847940444946,1.0,accept,majority_agreement,2
apache/kafka,reviews,139707212,5379,looked more closely at unit tests.,0,0,0,0.9737005233764648,0.9857607483863832,0.9862339496612548,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,139792331,5379,"thanks for the updates, added a few more comments.",1,1,1,0.5853306651115417,0.6965846419334412,0.8203967213630676,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,140075700,5379,hi stanislav. i think we're just about there. mostly unit test comments again. ron,0,1,1,0.7107266783714294,0.7519169449806213,0.667276918888092,1.0,accept,majority_agreement,2
apache/kafka,reviews,140420701,5379,"last changes from my point of view, i think. assume it lgtm if i don't send additional review comments. thanks for working through everything.",1,1,1,0.9443507194519044,0.9554855227470398,0.980883538722992,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,143501301,5379,thanks for all the updates. it is looking good. left some more minor comments.,1,1,1,0.9673556089401244,0.9941720366477966,0.988846480846405,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,143533648,5379,checkstyle failures,0,0,0,0.9451836347579956,0.9436303973197936,0.956901788711548,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,143662242,5379,"thanks for the updates, lgtm",1,1,1,0.8138208389282227,0.5888751745223999,0.8989906907081604,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,586818389,10070,"just got through a little bit, figured i would provide incremental feedback.",0,0,0,0.9697006940841676,0.9563652873039246,0.9720348119735718,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,587133697,10070,: thanks for the pr. partially through the pr. a few comments below.,1,1,1,0.8905325531959534,0.9485979080200196,0.9691861867904664,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,589716082,10070,a few more comments.,0,0,0,0.973527729511261,0.959341287612915,0.988245129585266,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,591635806,10070,commented in a couple of places where i think we need to deal with the case where the partition's isr list has just a single member.,0,0,0,0.987118124961853,0.9886089563369752,0.9912068247795104,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,592688242,10070,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,593465309,10070,: thanks for the updated pr. just a few more comments.,1,1,1,0.916995108127594,0.959556519985199,0.9436736702919006,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,593803505,10070,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,594470538,10070,: thanks for the new updates. a few more comments below.,1,1,1,0.8600037097930908,0.8251023888587952,0.9645021557807922,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,594648852,10070,: thanks for the updated pr. just one more comment.,1,1,1,0.9317478537559508,0.9687156677246094,0.9378728866577148,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,594667179,10070,: still one more comment.,0,0,0,0.955677568912506,0.5480169057846069,0.7951976656913757,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,594683742,10070,": thanks for the latest pr. lgtm. the last comment is no longer an issue after regenerating the code. overall, the new controller code is quite elegant and much easier to follow than the old controller code.",1,1,1,0.9802037477493286,0.984413206577301,0.9912232160568236,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,60240596,3765,: thanks for the patch. made a pass and left a few comments.,1,1,1,0.8616111874580383,0.8623057007789612,0.9508570432662964,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,61976794,3765,: thanks for the updated patch. a few more comments.,1,1,1,0.8605849742889404,0.8383483290672302,0.9535468220710754,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,63183921,3765,": thanks for the new changes. a few more comments below,",1,1,1,0.8979735970497131,0.8901980519294739,0.962859570980072,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,64462793,3765,: thanks for the big patch. we are getting pretty close. a few quick comments.,1,1,1,0.970463752746582,0.993961751461029,0.9900153279304504,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,67754587,3765,a few more comments.,0,0,0,0.973527729511261,0.959341287612915,0.988245129585266,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,68132567,3765,": thanks for the patch. made another pass. left a few more comments, most of which are minor. also, kicked off a system test. the results should show up at [a link] before committing this patch, it would be useful to have some performance numbers on controlled shutdown and controller failover time with a large number of partitions.",1,1,1,0.961908221244812,0.8682939410209656,0.9808593392372132,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,68673653,3765,: thanks for the latest patch. just a few more minor comments.,1,1,1,0.8728702664375305,0.9590221643447876,0.9633083939552308,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,69363339,3765,: thanks for the patch. a few more comments on the most recent change.,1,1,1,0.8629331588745117,0.891076922416687,0.9568629860877992,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,69743787,3765,": thanks for the patch and the performance numbers. just a few more minor comments. could you address those comments and also rebase? after that, i can kick off another run of system tests.",1,1,1,0.9512115120887756,0.9598348140716552,0.9697311520576476,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1307528234,13240,thanks for the update. i left a few more comments for consideration.,1,1,1,0.7834756374359131,0.8971395492553711,0.910833179950714,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1328914968,13240,thanks for the update. i started to review it but i haven't finished yet. i have already left a bunch of comments for consideration.,1,1,1,0.9113292694091796,0.9498465657234192,0.9803677797317504,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1387620802,13240,"hey . i just got back to this pr. i made a pass over the files in `core` and i left some comments. as a general ask, it would be great if we could keep avoid large refactoring in tests in this pr as they are very distracting. i am not against refactoring but i would do them in separate prs.",0,0,1,0.4630584716796875,0.5040302872657776,0.918165385723114,0.0,accept,majority_agreement,2
apache/kafka,reviews,1388024550,13240,i made a pass on the `clients` files and i left a few more comments.,0,0,0,0.9871370792388916,0.9861510396003724,0.9932743310928344,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1474840476,13240,i am back one this one. i looked at the files in `clients` package and left a few minor comments.,0,0,0,0.9860032200813292,0.964277982711792,0.985557734966278,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,8840529,2140,just noticed a couple of things when i scanned the pr. will do a proper review later.,0,0,0,0.9785969257354736,0.977543294429779,0.9706884622573853,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,9972082,2140,: thanks for the patch. made a pass on this. some of the issues that i pointed out seem to be existing. we can decide whether to address them here or in followup jiras.,1,1,1,0.9510898590087892,0.8867968916893005,0.9748967289924622,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,11320300,2140,"made a pass over the pr, thanks for this large contribution !",1,1,1,0.9799016714096068,0.9534969925880432,0.9894463419914246,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,12339739,2140,thanks for the new patch. a few more comments.,1,1,1,0.7265594601631165,0.9084475040435792,0.9142999649047852,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,12582254,2140,": thanks for the latest patch. just a few minor comments. also, could you post the latest performance results? assuming there is no degradation, the patch lgtm.",1,1,1,0.9190399646759032,0.9755724668502808,0.9776431918144226,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,12728487,2140,": thanks for the patch. lgtm. just a couple of minor comments. about the performance. we used to optimize the path for recompression on the broker side by implementing a chained bytebuffer list to avoid copying during buffer overflow for writes. with the patch, we lose such optimization and simply recopies data to a bigger buffer during overflow. this will affect the performance of recompression when the estimated after-compression size is lower. recompression can happen when (1) producer is old, and (2) the broker compression codec is different from the producer's, both should be uncommon. so, we can probably commit the patch as it is. if the recompression performance is a problem, we can always optimize the code for expanding the buffer in bytebufferoutputstream later.",1,1,1,0.9748616814613342,0.9531353712081908,0.9833235144615172,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,110258261,4830,"thanks for the patch! i left some comments. also, can you rebase (not merge branch) your commits onto the latest trunk such that they don't interleave with other commits due to `merge branch 'trunk' of [a link] into trunk`?",1,1,1,0.9796034693717957,0.989549160003662,0.992148220539093,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,114058460,4830,lgtm overall. still have some concern with the new code style due to removing callback in handleproducerequest and handlefetchrequest. maybe the second reviewer can comment on that.,0,0,0,0.9536936283111572,0.9730175137519836,0.5798701643943787,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,115007483,4830,thanks for the updater. the non-test code looks good to main. just left some minor comments for the test code.,1,1,1,0.94879812002182,0.9923160076141356,0.9900368452072144,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,115342795,4830,thanks for the pr. i did a quick review and left some comments. the pr needs rebasing to resolve conflicts.,1,1,1,0.9204431772232056,0.9718194007873536,0.9626191854476928,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,117860408,4830,thanks for the update and all the work . i went over the patch again and left some comments. the biggest concern is the way in which we handle fetchrequest in this patch.,1,1,1,0.7891873121261597,0.9750139713287354,0.9779021739959716,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,119783299,4830,"thanks for the updates. looks good overall, left a few comments.",1,1,1,0.9689329862594604,0.9885918498039246,0.9859701991081238,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,121627242,4830,thanks for the update ! left some minor comments. can you also update upgrade.html to include kip-219 in the `upgrade_200_new_protocols`?,1,1,1,0.9472018480300904,0.9601498246192932,0.9882640838623048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,121651243,4830,i have started a system test run for this branch: [a link],0,0,0,0.9830341339111328,0.958251655101776,0.9946604371070862,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,121730418,4830,"there were 9 failures in the system tests, seven of which were quota tests. can you take a look at the quota test failures before committing this pr? the results are here: [a link]",0,0,0,0.9828304052352904,0.9916205406188964,0.9927797913551332,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,459807863,9103,"thanks for the pr. i have made a pass over it to understand how the kip works. meanwhile, i have left couple of questions and comments.",1,1,1,0.9422205090522766,0.9794653058052064,0.947015345096588,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,494594170,9103,"thanks for the pr, reviewed the ssl reload part and left some comments/question.",1,1,1,0.8315687775611877,0.8594577312469482,0.8918872475624084,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,514037726,9103,left a few more comments. i think we're on the right track.,0,0,1,0.9751150012016296,0.938888132572174,0.5237098336219788,0.0,accept,majority_agreement,2
apache/kafka,reviews,518891546,9103,thanks for the updates. left some more comments.,1,1,1,0.6866744756698608,0.7672580480575562,0.8940909504890442,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,522114613,9103,a few more comments. i submitted [a link] with many of these changes to try and speed this up.,0,0,0,0.9748441576957704,0.9644357562065125,0.9934095144271852,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,522845958,9103,thanks for the updates. hopefully these are the last comments and we can merge.,1,1,1,0.8892592787742615,0.8777191042900085,0.8889533281326294,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,523669575,9103,lgtm once the build is stable. thanks for the patch!,1,1,1,0.9852727055549622,0.9709209203720092,0.9781774282455444,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,158781361,5693,thanks for the pr. some comments/questions.,1,1,1,0.8210100531578064,0.9054924845695496,0.8807618021965027,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,159139153,5693,"i made a pass, i'll probably need to make another one to make sure i fully understand the pr. with some of the questions raised over performance, i'm thinking we'll need some system tests, but those should probably go on a follow on pr.",0,0,0,0.9290300607681274,0.968679130077362,0.9416014552116394,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,159483795,5693,"i took another pass, and it looks good to me. i have a couple of comments regarding test coverage.",1,1,1,0.9551241397857666,0.9334930777549744,0.938527524471283,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,159582838,5693,"thanks for the updates, this looks good to me. i have just one minor comment.",1,1,1,0.9674044847488404,0.990500807762146,0.9892646670341492,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,159611838,5693,"thanks , lgtm pending tests passing.",1,1,1,0.8591902852058411,0.9352707266807556,0.9455294609069824,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,159978872,5693,made a pass over the code (good job on the added unit tests!) one meta comment is around reusing a couple of classes to avoid duplicated code if possible. the rest of them are mostly minor.,1,1,1,0.8801131844520569,0.7867385745048523,0.9753791689872742,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,160151744,5693,did not review the tests yet...,-1,0,0,0.660876989364624,0.9644894003868104,0.9839437007904052,0.0,accept,majority_agreement,2
apache/kafka,reviews,160531208,5693,some more comments. will move to the tests now.,0,0,0,0.976837396621704,0.9878647923469543,0.9930887818336488,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,160557720,5693,lgtm.,0,0,0,0.9832575917243958,0.968936800956726,0.9637624621391296,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,172229267,5821,thanks for the patch! left some comments below.,1,1,1,0.9461094737052916,0.9538769125938416,0.9648737907409668,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,173688078,5821,thanks for the update! left some more comments below.,1,1,1,0.9175356030464172,0.9562848210334778,0.97680002450943,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,173776758,5821,thanks for the update. looks good overall. left a few more minor comments. can you rebase the patch onto trunk?,1,1,1,0.9811479449272156,0.9933526515960692,0.98822683095932,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,174630169,5821,: thanks for the patch. left a few comments below.,1,1,1,0.8509494662284851,0.8797298073768616,0.9275140762329102,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,180079885,5821,: thanks for the update patch. just a few more minor comments below.,1,1,1,0.8621134757995605,0.9128538966178894,0.9600296020507812,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,180464308,5821,: thanks for the rebase. lgtm. just a couple of minor comments below.,1,1,1,0.9197380542755128,0.9874366521835328,0.977521538734436,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,180622044,5821,: thanks for the latest patch. lgtm. also note that broker epoch can potentially be used to improve kafka-6029 as well.,1,1,1,0.9613534808158876,0.9702758193016052,0.9804357290267944,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,144075119,5428,"i made a pass over the pr, mostly just minor comments.",0,0,0,0.9482825398445128,0.9615613222122192,0.9602959752082824,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,145283902,5428,"hey , this looks really good. i had a few questions and comments.",1,1,1,0.98014497756958,0.9848700761795044,0.993776559829712,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,146905851,5428,just a couple of nit and one minor question otherwise looks good to me,1,1,1,0.9141639471054076,0.9864107966423036,0.8349364399909973,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,148681869,5428,"i did not go over the tests yet... but with regard to my comments, i am wondering if we should add more tests to check the behavior we want in a tighter fashion?",-1,0,0,0.8276066184043884,0.9239482283592224,0.9721206426620485,0.0,accept,majority_agreement,2
apache/kafka,reviews,151488843,5428,"i took another pass and lgtm. i do have one meta-comment that is may be out of scope for this pr but i wanted to get my thoughts out. in `maybecommitperuserrequested` we only execute a user requested commit if, in fact, it's time to commit. so to me, the window for doing a user requested commit is very small. i realize in the docs we state that calling `commit()` is more of a suggestion (to me this is analogous to calling `runtime.gc()` in a java program, it's just a hint no guarantee it will get executed). i think in most cases the timing difference will be negligible and will go unnoticed by most users. but i think it's possible to have a situation where a user sets a long commit interval but thinks that she can call `commit()` intermittently between scheduled commits. should we update the docs to be more explicit on how we handle user requested commits?",0,0,0,0.7569765448570251,0.8657286763191223,0.949613869190216,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,153048413,5428,"some more comments. (did not review the test again, yet).",0,0,0,0.959433615207672,0.9760230779647828,0.9892231225967408,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,153880759,5428,"this lgtm now (aside from the test results), thanks .",1,1,1,0.7896189093589783,0.7569624781608582,0.9401831030845642,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,154054784,5428,some clarification question. overall lgtm. feel free to merge after addressed.,0,1,0,0.8757556676864624,0.593623161315918,0.9618284702301024,0.0,accept,majority_agreement,2
apache/kafka,reviews,29342778,2743,: thanks for the patch. some quick comments.,1,1,1,0.8967580795288086,0.9607819318771362,0.9729324579238892,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30307975,2743,: make a pass of the non-test files. the following are the comments.,0,0,0,0.9864962697029114,0.9914531707763672,0.993898868560791,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,30406567,2743,: thanks for the patch. some more comments (mostly on tests).,1,1,1,0.902222454547882,0.8348946571350098,0.9685074090957642,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30657555,2743,: thanks for the updated patch. made another pass and left some more comments (mostly minor).,1,1,1,0.9123836755752563,0.7604018449783325,0.9728291034698486,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2512345700,18240,thank . here is a partial review.,0,1,1,0.6695622205734253,0.9353429079055786,0.8414208889007568,1.0,accept,majority_agreement,2
apache/kafka,reviews,2522173728,18240,thanks for the changes . quick review of the changes to `**/src/main`.,1,1,1,0.9089325070381165,0.8769617080688477,0.968238115310669,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2525645488,18240,review to reply to your comments.,0,0,0,0.979950785636902,0.9705946445465088,0.9887428283691406,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2525962559,18240,reviewed the changes to `src/main`.,0,0,0,0.9808645844459534,0.9929759502410888,0.9934640526771544,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2527697037,18240,quick feedback.,0,1,1,0.931460976600647,0.8340792059898376,0.5878748893737793,1.0,accept,majority_agreement,2
apache/kafka,reviews,2553185476,18240,thanks . i reviewed all of `src/test` except for `quorumstatetest`.,1,1,1,0.930780827999115,0.97163987159729,0.9605503082275392,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2554454865,18240,some minor suggestions.,0,0,0,0.9772741794586182,0.9757689833641052,0.970511555671692,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2556443601,18240,thanks for the improvements to the quorum state tests!,1,1,1,0.9635748267173768,0.9619790315628052,0.8943902850151062,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2559157339,18240,lgtm. the test failures seem unrelated.,0,0,0,0.9270610213279724,0.6051751971244812,0.9527193307876588,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,13025476,2244,this is a partial review -- it's a huge pr. will continue tomorrow.,1,-1,0,0.9352165460586548,0.8795005679130554,0.926394522190094,,review,no_majority_disagreement,0
apache/kafka,reviews,13233828,2244,some more comments... still not completed.,0,0,0,0.5630476474761963,0.7281010746955872,0.9466887712478638,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,15180182,2244,i have some doubts about the implemented join semantics -- i think we should compute results differently. see inline comments for more details. we can also discuss in person if required -- hard to explain what i mean in pr comments.,-1,0,-1,0.5585708618164062,0.5743597745895386,0.5201917290687561,-1.0,accept,majority_agreement,2
apache/kafka,reviews,15836925,2244,left a couple comments mainly on code hierarchies.,0,0,0,0.969626486301422,0.9653319120407104,0.9785003066062928,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,12974731,2074,thanks for the patch. left a few comments.,1,1,1,0.6427537202835083,0.9350433945655824,0.8176200985908508,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,16283627,2074,left mostly minor comments. one thing i'm not too sure about is the `getpartitions` api on `groupcoordinator`. would be nice if we didn't need it.,0,0,0,0.8652024865150452,0.9010037779808044,0.9313639402389526,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,16509782,2074,"this is getting close, but i think there's still a problem with the handler logic in `kafkaapis`.",0,0,0,0.8133640289306641,0.7247374057769775,0.9773215651512146,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,16680784,2074,lgtm. thanks for being so responsive throughout the review iterations!,1,1,1,0.9903433322906494,0.9853253960609436,0.9913153648376464,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,62529366,3849,thanks for the patch. left some comments.,1,1,1,0.6454205513000488,0.8521996140480042,0.791415274143219,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,63861611,3849,thanks for updating the patch. made a pass on the non-test file and left some comments. will review the tests tomorrow. we may need to have some quick turnaround to get this into 1.0.0.,1,1,1,0.8266680240631104,0.7129614353179932,0.9705890417099,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,64162004,3849,"thanks for updating the batch. a few comments: 1. for a batch that is got expired prematurely, we should not reqenqueu the batch. (as noticed) and we should not double deallocate the memory. 2. there are a few review comments before that are not addressed yet. (such as unused local variables) 3. we may want to revisit some of the tests and see if they still make sense. 4. it would be good to add more unit tests to the patch. more specifically, we may want to have the following tests: * test a batch is correctly inserted into the in.flight.batches if needed. and not inserted if not needed. * test the callback of an expired batch is fired in time when it is in-flight/not in-flight * test when expire an in-flight batch, we still wait for the request to finish before sending the next batch. * test we are not going to retry an already expired batch. * test when batch is expired prematurely, the buffer pool is only deallocated after the response is returned. (because we are still holding the batch until the response is returned)",1,0,1,0.8436615467071533,0.5524025559425354,0.9706400632858276,1.0,accept,majority_agreement,2
apache/kafka,reviews,64432679,3849,thanks for the patch. left a few comments/questions.,1,1,1,0.7799913883209229,0.929105579853058,0.9045752882957458,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,64694224,3849,a few more comments. note that there are some failing test cases as well.,0,0,0,0.9765534996986388,0.9798215627670288,0.9818653464317322,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,64731171,3849,thanks for the update. made another pass and left some comments.,1,1,1,0.6908498406410217,0.8172896504402161,0.8826863765716553,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,65017323,3849,thanks for updating the patch. i think it is closed to be merged. just a few more comments.,1,1,1,0.8540810942649841,0.9362490773200988,0.9543261528015136,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,77303727,3849,talked to and we agreed that had a point that we can just use the same way we track accumulated batches. that seems make the code cleaner. will wait for sumant to update patch to implement that.,0,0,0,0.9602985382080078,0.9824700355529784,0.9184927344322203,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,86559586,3849,thanks for updating the patch. left some comments.,1,1,1,0.6303182244300842,0.718798041343689,0.8431167006492615,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,4731607,1336,sorry for leaving this hanging for so long. did another pass and have some mostly minor suggestions.,-1,-1,-1,0.9875643849372864,0.9931672215461732,0.9931095838546752,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,5133669,1336,few more nitpicks. i think it's getting close.,0,-1,0,0.8556327223777771,0.5501520037651062,0.7819021344184875,0.0,accept,majority_agreement,2
apache/kafka,reviews,5312212,1336,thanks for all the effort and patience! one final question and a tiny nitpick and i think this is looking good.,1,1,1,0.9899309873580932,0.994839608669281,0.9946826100349426,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,29883718,2744,: thanks for the patch. made a pass and left some comments below.,1,1,1,0.8747727870941162,0.7634732127189636,0.9494683742523192,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30124150,2744,: thanks for the updated patch. a few more comments.,1,1,1,0.8605849742889404,0.8383483290672302,0.9535468220710754,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,31341422,2744,thanks for the pr. i left a few questions and comments.,1,1,1,0.8590555787086487,0.9619600176811218,0.857795238494873,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,33922268,2744,": thanks for the patch. left a few more comments. could you rebase? also, [a link] seems to indicate that nanotime is a scalability bottleneck. could you run the perf test with multiple producer/consumer instances?",1,1,1,0.9566431641578674,0.8200223445892334,0.9768645167350768,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34140325,2744,: thanks for the new patch. made another pass and left some more comments.,1,1,1,0.9102862477302552,0.8634525537490845,0.9668631553649902,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34323451,2744,": thanks for the updated patch. a few more followup comments. also, (1) could you run perf test with a really high request throttling value and see if there is no degradation? (2) could you run our system tests?",1,1,1,0.9389920830726624,0.8287532329559326,0.9798063039779664,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,34997419,2744,": thanks for the updated patch. left a few more more comments. also, could you rebase?",1,1,1,0.9268711805343628,0.9014582633972168,0.9711206555366516,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,517237723,9487,"this is ready for review , , can you take a look at it?",0,0,0,0.9595516920089722,0.851420521736145,0.9021692872047424,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,522911183,9487,"thanks for the pr, ! i made a first pass.",1,1,1,0.98341166973114,0.9831421375274658,0.9934999346733092,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,523533044,9487,"thank you for the pr, ! here my feedback!",1,1,1,0.9849414229393004,0.9918140172958374,0.9935318231582642,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,529686471,9487,sorry it took me so long to get through the entire pr! had a few high-level questions but mostly minor stuff,-1,-1,-1,0.9897958636283876,0.9932947754859924,0.9951123595237732,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,530163463,9487,i haven't finish my review but i wanted to share my comments so far before the weekend.,0,0,0,0.8792193531990051,0.7586654424667358,0.9189863204956056,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,530218086,9487,"thanks for the comments and . i think i got to all of them, though i left some clarification questions as well",1,1,1,0.9400765895843506,0.9685806632041932,0.965633749961853,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,531540984,9487,thanks . just a few more comments to pile onto the conversation ;),1,1,1,0.9830113649368286,0.994147539138794,0.9916061162948608,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,533094235,9487,"alright this is looking good, just waiting on the pr build to merge at last. thanks for the pr! i think once we fix up the fsm things will be in good shape.",1,1,1,0.9871506690979004,0.9934684038162231,0.9956652522087096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,706073770,10851,thank you for the pr! i did a first pass. here is my feedback.,1,1,1,0.9822571873664856,0.9908372163772584,0.9933322072029114,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,707150891,10851,thank you for the updates! here my next round of feedback!,1,1,1,0.9804583787918092,0.9799213409423828,0.9891769289970398,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,726158331,10851,hi ! thank you for your patience! here my feedback.,1,1,1,0.9860790371894836,0.9928733110427856,0.9930999279022216,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,738194160,10851,thanks for the updates ! i did a pass over `clienttagawarestandbytaskassignor`. here my feedback so far.,1,1,1,0.958229660987854,0.9762488007545472,0.9903079867362976,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,744766745,10851,thank you for the update! i did again a pass over the tag-aware standby assignor. here is my feedback!,1,1,1,0.9797521829605104,0.9874774217605592,0.9903793334960938,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,768890074,10851,thank you for your patience! i reviewed the standby task assignor and had the following feedback.,1,1,1,0.9875855445861816,0.9842875003814696,0.986536979675293,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,827852256,10851,"hi , sorry for the delay. i looked at the assignment algorithm and found an improvement and an issues.",-1,-1,-1,0.9894100427627563,0.9925963878631592,0.9911891222000122,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,880852081,10851,", i'll keep reviewing it tomorrow. left some comments after my 1st review. thanks.",1,1,1,0.922737956047058,0.9849327206611632,0.9888311624526978,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,880887385,10851,thank you for the updates! i reviewed the assignment algorithm. next i will start with the unit tests.,1,1,1,0.9790986776351928,0.985540211200714,0.9922715425491332,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,881249420,10851,", i made 2nd pass to the non-testing codes, left some comments. thanks.",1,1,1,0.937396764755249,0.9774882793426514,0.9716436862945556,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,886962780,10851,", thanks for the update. i checked again the `clienttagawarestandbytaskassignor`, and it looks better. left some comments. i'll keep reviewing the rest of the codes in the following days. thanks.",1,1,1,0.9693357348442078,0.9916734099388124,0.9908690452575684,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,887239384,10851,left more comments. thanks.,1,1,1,0.8751115202903748,0.972788155078888,0.8774034380912781,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,887901947,10851,", thanks for the update. left some comments. thanks.",1,1,1,0.9190478920936584,0.988103210926056,0.9853655099868774,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,889253999,10851,", thanks for the update. overall lgtm! only one question for partial rack awareness assignment. thanks.",1,1,1,0.987095594406128,0.9947558641433716,0.99535071849823,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,890569361,10851,thanks for the update in partial rack awareness assignment. lgtm! left some minor comments. thanks.,1,1,1,0.9801160097122192,0.9944697618484496,0.9947799444198608,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,891071369,10851,thanks for the update. i'll check the test code tomorrow.,1,0,1,0.8471155166625977,0.5621660947799683,0.9452232718467712,1.0,accept,majority_agreement,2
apache/kafka,reviews,892039294,10851,lgtm! thanks for the improvement!,1,1,1,0.9881460666656494,0.994329035282135,0.9930250644683838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,897487830,10851,"thanks a lot for this pr! sorry for all the delay! lgtm! i had just some minor comments that can be addressed in a follow-up pr. as i pointed out in one of my comments, i am not a big fan of `// visible for testing` because that often indicates some deficiencies in the modularization. but this is nothing that cannot be addressed in a follow-up pr. so i am fine with merging it.",-1,-1,1,0.9691996574401855,0.9453195929527284,0.9549075365066528,-1.0,accept,majority_agreement,2
apache/kafka,reviews,34614409,2910,a few random comments from a quick look. :),1,1,1,0.9807672500610352,0.9959554672241212,0.9940815567970276,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,35252298,2910,: thanks for the patch. made a pass on the server side files and left some comments.,1,1,1,0.8702037930488586,0.7041929364204407,0.9661800265312196,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,35920320,2910,: thanks for the updated patch. looks good overall. a few more comments. the big remaining items are (1) fencing writetxnmarker based on coordinator epoch; (2) we need to make a decision on whether to use a batch level attribute bit to represent txnendmarker instead of special sequence number.,1,1,1,0.9845362305641174,0.9923559427261353,0.9924351572990416,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,36405657,2910,a couple of more comments.,0,0,0,0.9744097590446472,0.9603776931762696,0.9889217615127563,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,36583457,2910,: thanks for updating the patch. a few more comments on the latest fix.,1,1,1,0.8540124297142029,0.846497654914856,0.9649328589439392,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,669565212,10579,: thanks for the pr. made a pass of non-testing files. a few comments below.,1,1,1,0.9089889526367188,0.9803227186203004,0.9644815325737,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,673833347,10579,thanks for the pr. i've made a pass on non-test code. some comments below.,1,1,1,0.8975182175636292,0.9848037958145142,0.9563704133033752,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,695283387,10579,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,700367031,10579,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,707813984,10579,: thanks for the updated pr. just a few more comments.,1,1,1,0.916995108127594,0.959556519985199,0.9436736702919006,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,708562144,10579,: thanks for the updated pr. a couple of more comments.,1,1,1,0.8972969055175781,0.9588996767997742,0.9384354948997498,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,708737322,10579,: thanks for the reply. one more comment below.,1,1,1,0.8630011677742004,0.8075608611106873,0.9171213507652284,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,709727489,10579,: thanks for the updated pr. lgtm,1,1,1,0.930242121219635,0.8783431053161621,0.9749489426612854,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,47368747,3325,thanks i've made a first pass. i think we probably need some tests added to `storechangelogreadertest` to make sure the listeners get called etc. also we need some tests for the `compositerestorelistener`,1,1,1,0.9609398245811462,0.7376810312271118,0.8605888485908508,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,50895250,3325,"thanks . i've left a few minor comments. would be good to get a review from someone else, too",1,1,1,0.959170937538147,0.9902614951133728,0.9862533211708068,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51343272,3325,"thanks for the patch. made a pass over the non-test code and browse through the tests. i have two meta comments besides the detailed comments below: 1. moving forward could we try to avoid large prs with over 1000 loc but instead submit multiple smaller prs with each one trying to be no more than a few hundreds? it will help reviewing to be easier, and help the pr submitter to think about the implementation in a step-wise manner that better layered the architecture. 2) there are a few additional classes seem to be for concentrating some computing logic together for the ease of read, but i felt some of them a bit ""overkill"" plus for each set classes we need a separate unit test class.",1,1,1,0.9524510502815248,0.975957214832306,0.9781056642532348,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,51517235,3325,did just a high level pass for now as there are already many comments.,0,0,0,0.9775533080101012,0.986501157283783,0.9888234734535216,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,52398187,3325,some more comments...,0,0,0,0.930959701538086,0.9193235635757446,0.9913126826286316,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,52791382,3325,some more minor comments about code styles.,0,0,0,0.9687791466712952,0.9207137227058412,0.9713592529296876,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,606850474,10218,: thanks for the pr. a couple of quick comments.,1,1,1,0.9000819325447083,0.9908249974250792,0.967982053756714,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,608040593,10218,: thanks for the pr. a few more comments below.,1,1,1,0.8860859870910645,0.9666810631752014,0.9303104877471924,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,609209732,10218,thanks for the pr! few comments below.,1,1,1,0.9542211890220642,0.9874535799026488,0.9300533533096312,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,612423634,10218,: thanks for the updated pr. a few more comments below.,1,1,1,0.8806174993515015,0.9159396886825562,0.9290188550949096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,613662374,10218,thanks for the updated pr! few more comments below.,1,1,1,0.9615873098373412,0.9831889867782592,0.977564811706543,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,617842236,10218,"thanks for the updates! few more comments below, this time i made a pass on some of the test code as well.",1,1,1,0.9785246253013612,0.9832163453102112,0.9866495728492736,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,627143872,10218,: thanks for the updated pr. a few more comments below.,1,1,1,0.8806174993515015,0.9159396886825562,0.9290188550949096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,629119208,10218,thanks for the update pr. just few minor comments in this pass.,1,1,1,0.8011840581893921,0.9814454913139344,0.8857566714286804,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,630611812,10218,: thanks for the updated pr. a few more comments below.,1,1,1,0.8806174993515015,0.9159396886825562,0.9290188550949096,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,631605408,10218,: thanks for the updated pr. a few more comments.,1,1,1,0.8859519958496094,0.9513056874275208,0.9396800994873048,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,631981864,10218,thanks for the updated pr! few more comments.,1,1,1,0.9627265334129332,0.9859543442726136,0.9789125323295592,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,632660970,10218,: thanks for the updated pr. just a minor comment below.,1,1,1,0.9046581387519836,0.9572418332099916,0.942058801651001,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,633035863,10218,: thanks for the updated pr. lgtm. i will see if kowshik has any further comments.,1,1,1,0.959694504737854,0.8625247478485107,0.9794524908065796,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,633070529,10218,: thanks for the updated pr. just a minor comment below. let us wait for ci to pass before merge.,1,1,1,0.9530998468399048,0.9656635522842408,0.960559904575348,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1643082915,14432,"thanks for the pr. i had a quick look at it and i have a few high level comments: * i don't mind doing a few small prs at all. * the title of the pr is a bit confusing because the member does not send a leavegroup request. * i think that we need to keep the -2 epoch. i think that it could be useful in the future if we want to extend the consumer to have the ability to chose whether it wants to leave forever or temporarily. * ignoring the ""leave request"" is not enough. if you look at the other side, we need to know whether the member has released the instance id or not. we could perhaps capture this by updating the member epoch to -2 or something like that.",1,1,1,0.8644044995307922,0.9506221413612366,0.9870734214782716,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1647077548,14432,"thanks for the pr, ! just a couple of minor changes, mostly around error and log messages.",1,1,1,0.9825750589370728,0.9930003881454468,0.9465736150741576,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1661817899,14432,"thanks for pr! i just made a first pass on it and i left some comments. i don't have a clear picture of the end state yet so i need a bit more time to think about it. however, my first comments are still valid, i think.",1,1,1,0.9813022017478944,0.9882735013961792,0.993976354598999,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1682342687,14432,thanks for the update. i left a few more comments.,1,1,1,0.7050104141235352,0.9137150645256042,0.8871964812278748,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1706255086,14432,thanks for the last update. i just made a pass on it and left a few more comments. i think that we are almost there!,1,1,1,0.977679431438446,0.9913036823272704,0.9932466745376588,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1736519315,14432,"thanks for the update and your patience on this one! we're almost there, i think. i left some more comments for consideration.",1,1,1,0.985653042793274,0.9880654811859132,0.9944950938224792,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1747458594,14432,thanks for the update! i reviewed the entire pr and it looks pretty good. i think that i have one major questions around the `targetassignmentbuilder` changes where i think that it is not quite right. all the other are small comments/nits.,1,1,1,0.9869824051856996,0.994367778301239,0.994875967502594,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1749926783,14432,"lgtm, thanks !",1,1,1,0.9726020693778992,0.9912070631980896,0.981888234615326,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1634860112,14408,thanks for the pr! i just skimmed through it without looking at all the details and i left a few high level comments for consideration.,1,1,1,0.9871548414230348,0.9918495416641236,0.9908599853515624,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1637158891,14408,thanks for the update. i reviewed all the non-test files and i left some comments for consideration.,1,1,1,0.8913760185241699,0.9276627898216248,0.9512956738471984,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1638630339,14408,thanks for the pr! left some comments.,1,1,1,0.922440469264984,0.9877927899360656,0.971978724002838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1642924094,14408,took a look at the tests,0,0,0,0.9753594398498536,0.9678829908370972,0.9919037222862244,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1649780129,14408,thanks for the update. i left some comments for consideration.,1,1,1,0.7718666195869446,0.7958623766899109,0.8664150238037109,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1652604842,14408,thanks for the update. i left a few more comments.,1,1,1,0.7050104141235352,0.9137150645256042,0.8871964812278748,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1655325413,14408,thanks for the update. i left a few more comments.,1,1,1,0.7050104141235352,0.9137150645256042,0.8871964812278748,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1657082412,14408,"lgtm, thanks.",1,1,1,0.8687224388122559,0.8991513252258301,0.8075713515281677,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,466061843,9100,thanks. left a few comments. i haven't looked closely at the controller logic yet.,1,1,1,0.759293258190155,0.9864218235015868,0.9720154404640198,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,492864509,9100,"one additional thought occurred to me. after the controller receives an alterisr request and updates the partition state, i think we need to call `onpartitionreassignment` to see if there is a pending reassignment which can be completed.",0,0,0,0.9750462770462036,0.9869995713233948,0.9879117012023926,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,496010380,9100,lgtm. i left a few more nits which can be saved for a follow-up.,0,0,0,0.9838842749595642,0.9603962302207948,0.9899486303329468,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,33632832,2472,thanks for the pr. some initial comments. more to follow.,1,1,1,0.9079018235206604,0.9837692379951476,0.92935973405838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,33759137,2472,a few more comments. more to come.,0,0,0,0.9396345615386964,0.9266915917396544,0.9657580256462096,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,33986549,2472,"thanks for the updates, a few more comments. also, it would be good to rebase against trunk as it's been a while.",1,1,1,0.913401186466217,0.9685691595077516,0.9671242237091064,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,35670433,2472,"lgtm, merging to trunk.",0,0,0,0.9884223341941832,0.9904311299324036,0.9856359958648682,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,369222057,8218,"i'm still in the middle of reviewing this pr, just left a meta question here: previously the commit ordering is 1) flush store, flush producer 2) commit offset 3) write checkpoint file now it becomes 1/3/2. it means if we have a crash between 2 and 3, in the past we would likely read from an old checkpointed offset and replay the changelogs, which is fine with or without eos (with eos we would just read committed data still so it is safe). but now if we crash between 3 and 2, it means the checkpoint file has been written, but the offsets are not committed yet, which means we could potentially lose some data. right?",0,0,0,0.974224090576172,0.980587124824524,0.9754822850227356,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,369184653,8218,"thanks for the pr, left some comments",1,1,1,0.7023000717163086,0.9460494518280028,0.8927651643753052,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,373798405,8218,"this is also a meta comment: i'm trying to think of a way where we do not need to mess the hierarchy of task / task-manager classes which are just cleaned. one wild thought following my previous comment, with the goal to avoid all of those `prepare` `post` ordering etc, is to abstract this logic away from the task / task-manager and handle inside the record-collector. in other words, the task still follow the same pattern as in today's trunk, e.g. in `commitstate`, calling `recordcollector.commit(consumedoffsetsandmetadata);`. however, the recordcollector does not call the corresponding committxn immediately but wait until all expected `commit` calls as been triggered and then call the function with the aggregated offset map. more specifically: 1. we let the txn-manager to keep a reference to the shared record-collector. 2. we add a ""pre-commit"" function inside record-collector which passed in the set of expected tasks (or partitions?) to be committed; and then when `commit` is called, if there is no set of expected tasks set, record-collector would trigger immediately, otherwise, wait until all the expected elements have been passed in, and then trigger. 3. in these scenarios: 3.a) suspend: although we may only suspend a subset of tasks, we'd still have to commit all tasks under eos-beta, so we just call `record-collector.precommit` with all the tasks, and then forloop task.suspend. 3.b) commit: we would have to commit all tasks, so we just call `record-collector.precommit` with all the tasks, and then forloop task.commit. 3.c) closeclean: no matter what task(s) we are closing, we need to committing for all, so the same as above. 3.d) closedirty: we do not need to commit at all, so we do not need to call `record-collector.precommit` since we know its `commit` function would not be triggered. i admit it is not ideal since we are sort of poking a hole inside record-collector to be tasks-aware, but it saves all the code changes we'd have to introduce in task and most of the task-manager messiness. sorry for going back and forth on the high-level code design here, i know changing 1000+ loc is not a easy job... but i just want to make sure we introduce as less tech complexity in our code base as possible to achieve the same thing.",0,0,0,0.9080824851989746,0.9857745170593262,0.9731537699699402,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,374035666,8218,"i made another look at the pr, and here's another proposal for reducing the added task apis: 1) we still make all the state-transition functions plus the commit call to be state-dependent, and not leak to the task-manager. more specifically: 1.a) preparecommit: should include `statemgr.flush()` as long as state is not created / suspended; should include `recordcollector.flush()` if state is running. the function should return the map of offsets that should be committed. if pre-commit is a no-op based on the state, then it returns an empty map. 1.b) postcommit: if state is running then we should `statemgr.checkpoint(checkpointableoffsets())` if `eosdisabled`; if it is restoring or created or we always blindly `statemgr.checkpoint(emptymap())`; in other states we do nothing. 1.c) commit: take the aggregated map from the pre-commit on tasks, make the call on consumer or producer, and capture the exceptions and handle accordingly (see below). 2. we extract the decision of whether we should commit (including pre and post) during suspend / close out of the task, into task-manager. in fact, we always try to commit all tasks when suspending / closing any tasks. 2.a) for suspending, inside task-manager we first trigger “suspend” for those tasks taht are decided for suspension. the function would close topology / clear partition-group depending on the state of the task. and then we trigger the commit procedure for all tasks. according to 1) above, for those already-suspended / created tasks, pre-commit would be no-op and return nothing, and hence effectively they would not be included for committing; if everyone returns empty in pre-commit, i.e. the aggregated map is also empty, we can skip the committing call, but we do not skip the post-commit since even if we do not commit offsets, we may still want to write checkpoint files. if commit fails, we would skip the `post-commit` call and the thrown exception would be handled at the thread-level (either handleable task-migrated, or fatal streams exception). with that we can save pre-suspend. 2.b) for closing, it is the most tricky one, as we need to depend on the “clean” flag. the key point is that, post-447 if one task is being closed dirty then we’d have to abort the whole txn of the shared thread-producer to make sure the downstream would not read any records of this dirty-closed task (that’s the guaranteed pre-447, which we need to maintain). this is a tradeoff we have to make in 447 but hopefully the close-dirty case is rare and when we close-dirty, we always close-dirty everyone anyways: * when the thread shutdown-dirty due to exception causing it to die * when we handlelostall and: * when close-clean throws, instead of capturing it and immediately close-dirty, post-447 we should just let it to be thrown all the way to thread and let thread shutdown all tasks as dirty, since when it happens, none of the records sent by this producer should be committed. * when handlecorruption, which is only triggered during restoration, we actually do not need to call close-dirty (we originally call it only to trigger the wipe-store function), instead we just hard-code the close-wipe-and-revive logic inside the task manager itself. as a result, when we close dirty, we always close dirty all tasks anyways. so in this case we do not need to commit (including the pre-commit which flushes state stores and record collectors) and just trigger `close(dirty)` on each task which would, depending on the state, call `closetopology`, `closestatemanager` (which would flush the stores while closing), `recordcollector.close`, `partitiongroup.close`, `closesensor.record`, `wipestore-if-eos` respectively and swallow any exceptions thrown. then if it is eos-beta we let the producer to abort the txn; if it is eos-alpha only the corresponding task-producers would abort txn and close. on the other hand, if we are going to close-clean any task(s), then we still need to commit all tasks. we would trigger a `suspend` first which would, depending on the state, call `closetopology` or do nothing, and then we proceed with the commit procedure -- and if it throws, we skip the rest and just let the thread handles it by closing dirty -- and finally we call `close(clean)` and if it throws then we still let thread handles it. with that we can save pre-close. 2.c) when committing, again we always commit all tasks, and we just follow the pre/commit/post procedure here, which would execute correspondingly based on the states (for some tasks it would be no-op, again). 2.d) resuming is a dummy transition so nothing changes.",0,0,0,0.9662915468215942,0.9875046610832214,0.9708926677703856,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,375356110,8218,"thanks for the update, just a couple of minor comments. overall i think we are good",1,1,1,0.9807646870613098,0.991122841835022,0.9886416792869568,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,375610780,8218,"mentioned some of the system test failures are consistent in trunk, just fyi.",0,0,0,0.9861315488815308,0.9824113249778748,0.9868729114532472,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,375614304,8218,i've made a thorough pass over the non-testing code now. there are a couple of places regarding the committing which maybe the reason that system tests fails / unit tests flaky.,0,0,0,0.8847190737724304,0.94774729013443,0.9760136604309082,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,376323985,8218,made a pass on the testing part.,0,0,0,0.9802222847938538,0.9850622415542604,0.9719608426094056,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,310628374,7629,"lgtm, with some copy edits.",0,0,0,0.9895954728126526,0.9865801930427552,0.9893583059310912,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,310603917,7629,thanks for the pr -- this closes an important open gap in the docs!,1,1,1,0.9624577164649964,0.9646755456924438,0.9874617457389832,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,312024258,7629,"thanks bill! it's looking good, just a few more minor things (all the inlined suggestions are ""required"" level comments, mostly grammar or typo fixes)",1,1,1,0.9902933835983276,0.9958413243293762,0.9949325919151306,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,314510688,7629,"left a few suggestions for that one sentence i'm finding confusing, but i'll leave it up to you how to deal with it -- otherwise lgtm",0,-1,0,0.7752023935317993,0.6313700079917908,0.9178754687309264,0.0,accept,majority_agreement,2
apache/kafka,reviews,314592264,7629,did you setup a local webserver to render the docs? seems there is some missing html markup to the the desired rendering? please address the comments about wording. feel free to merge afterwards.,0,0,0,0.912057399749756,0.9863428473472596,0.9936898946762084,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,403647643,8589,"thanks for the pr, left some initial comments.",0,1,1,0.504536509513855,0.9290205836296082,0.6846782565116882,1.0,accept,majority_agreement,2
apache/kafka,reviews,410618562,8589,"thanks for the update. i could see we are still having a couple of places with style violation, did you properly configure and run checkstyle locally?",1,0,1,0.8711427450180054,0.5568410754203796,0.9662873148918152,1.0,accept,majority_agreement,2
apache/kafka,reviews,416273746,8589,"thanks for the update ! got some more comments, but i think we are getting there :)",1,1,1,0.9924740195274352,0.9955008625984192,0.9912675023078918,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,417019855,8589,thanks for the update! just a couple of minor comments,1,1,1,0.9705213308334352,0.9865021109580994,0.9882026314735411,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,417251384,8589,"`[ant:checkstyle] [error] /users/boyang.chen/code/kafka/clients/src/test/java/org/apache/kafka/clients/admin/kafkaadminclienttest.java:184:1: ncss for this class is 1,503 (max allowed is 1,500). [javancss]` check style failed.",0,0,0,0.976498246192932,0.9942954182624816,0.9888781905174256,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,417286373,8589,"thanks for the update, lgtm!",1,1,1,0.9758470058441162,0.974298655986786,0.9726940393447876,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,418832123,8589,"overall, lgtm. couple of comments/questions.",0,0,0,0.973423421382904,0.9823966026306152,0.9770127534866332,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,134149305,5322,"hi , thanks for the pr! overall, it looks great to me. i just left a few remarks/ideas. -john",1,1,1,0.9920933842658995,0.9955654740333556,0.9966963529586792,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,136392468,5322,"this is a meta comment: we should add an integration test for the scenario where we have two instance (one of them will be leader doing the assignment) source topics are not ready, and validate that both instances shutdown gracefully.",0,0,0,0.9571380019187928,0.9926809668540956,0.9921677708625792,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,138048174,5322,did an initial pass,0,0,0,0.9834666848182678,0.9672529101371764,0.9943565726280212,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,138454704,5322,more comments.,0,0,0,0.9670149087905884,0.9175251126289368,0.9906195402145386,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,138772785,5322,i think we still need to fix the `equals()` and `hashcode` methods for `assignmentinfo`,0,0,0,0.9881187081336976,0.9902933835983276,0.98813396692276,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,1351528029,13391,: thanks for the pr. made a pass of non testing files. a few comments below.,1,1,1,0.908488631248474,0.982595682144165,0.96799498796463,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1377849285,13391,: thanks for the updated pr. made another pass of non-testing files. a few more comments.,1,1,1,0.921441376209259,0.9802025556564332,0.9683336019515992,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1380021933,13391,: thanks for the updated pr. just a few minor comments.,1,1,1,0.9021700620651244,0.9680233001708984,0.9505402445793152,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1380249708,13391,": thanks for the reply. just one more comment. also, have you pushed the changes mentioned in the reply?",1,1,1,0.9373908042907716,0.8684371709823608,0.9755367040634156,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1381714888,13391,: thanks for the updated pr. left one comment. but the pr lgtm. just waiting for the tests to pass.,1,1,1,0.9421192407608032,0.959886908531189,0.9767016172409058,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,1382298774,13391,: thanks for the updated pr. lgtm,1,1,1,0.930242121219635,0.8783431053161621,0.9749489426612854,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,11712918,1251,"hi ashish, thanks for working on this!",1,1,1,0.9709064960479736,0.9900155663490297,0.9900588393211364,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,12517029,1251,thanks for the patch. left a few comments. it seems we should also add support for kafka connect. i think the class you want is `workergroupmember` and it uses the same apis as the consumer aside from the fetch request and the offset apis.,1,1,1,0.9325381517410278,0.9720091223716736,0.9612751603126526,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,12584005,1251,"thanks for the pr once again and sorry for the delay. i left a few comments to complement 's. , it would be good to understand if you are available to address the comments or if we should try to help out.",-1,-1,-1,0.9719989895820618,0.905097246170044,0.9583376049995422,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,13032819,1251,"thanks for the changes, left a few more comments. i think we are close. we probably want to run the system tests after the comments have been addressed. if everything goes well, we should be able to merge this very soon (maybe tomorrow).",1,1,1,0.966269075870514,0.963610589504242,0.9852331280708312,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,36140614,2967,"thanks for the pr, great results! why not include the benchmarks in the jmh-benchmarks module?",1,1,1,0.993408203125,0.9951645135879515,0.995107889175415,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,36224664,2967,i did a first pass and left a few comments.,0,0,0,0.981376051902771,0.9753422737121582,0.9540184736251832,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,40797196,2967,"sorry for the delay, i finally had a chance to complete my review. i left 4 comments questions in this pr and submitted a separate pr with an alternative to the thread local buffers: [a link] i would normally do the pr with your branch as the target, but because i rebased my branch on trunk (and fixed the merge conflicts), this would not have the desired effect. please take a look at the other pr and we can decide what we should pull into this pr.",-1,-1,-1,0.9875561594963074,0.989090859889984,0.9870300889015198,-1.0,accept,unanimous_agreement,2
apache/kafka,reviews,36648931,2967,"thanks for the patch. i didn't look deeply at the changes in `kafkalz4blockinputstream`, but i left a few comments in `abstractlegacyrecordbatch`.",1,1,1,0.9038881659507751,0.951654613018036,0.912443459033966,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,41113956,2967,"thanks for the pr, this is a huge performance improvement. :)",1,1,1,0.9930914640426636,0.9956984519958496,0.9971754550933838,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,28369642,2719,thanks just left a couple of questions,1,1,1,0.6188499927520752,0.8946253657341003,0.5259987711906433,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30490944,2719,"thanks , lgtm",1,1,1,0.9047038555145264,0.8489435315132141,0.9195244312286376,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,30623293,2719,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,685385770,10822,"very nice work, . thanks for this thorough contribution. some comments inline.",1,1,1,0.9867141842842102,0.9959482550621032,0.9950782060623168,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,686469520,10822,"thanks for the updates, . i have a few more comments below.",1,1,1,0.8804643154144287,0.9339585900306702,0.9608611464500428,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,688805399,10822,"thanks for the updates, . looks really good, and almost there. i do have a few more questions/suggestions.",1,1,1,0.9826231002807616,0.9934104084968568,0.993857443332672,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,688949564,10822,a few more comments. otherwise looks good.,1,1,1,0.9093694686889648,0.9275425672531128,0.8925569653511047,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,686641402,10822,"thanks for the clean implementation half way to the end of the review myself, i'm posting in the meantime the first round of comments (stylistic and minor mostly) while i'm focusing on the functional changes and the tests too.",1,1,1,0.7732292413711548,0.963279664516449,0.9426107406616212,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,690678772,10822,"lgtm. thanks, , for the extra effort on this feature. i couldn't comment directly on [a link], but i'm fine with using `shouldrestarttasks()` if thinks it's more consistent.",1,1,1,0.937239944934845,0.9725170135498048,0.979472041130066,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,694582981,10822,thanks for addressing the comments i also like that you included system tests as well as its. i think we are close. will check the its a bit more but i think these are the comments i have mostly.,1,1,1,0.9793739318847656,0.9789218902587892,0.9852027297019958,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,696790998,10822,nice work . thanks for the extensive test coverage. lgtm,1,1,1,0.9868887662887572,0.9952972531318665,0.996178150177002,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2022090350,15640,thanks for the pr ! i made a first pass. here is my feedback.,1,1,1,0.9757513999938964,0.99113792181015,0.9915512800216676,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2024632959,15640,"thanks for the updates and the explanations, ! i made a second pass and had some comments. could you have a look at this pr since you are more familiar withe the code than me. i want to ensure that i did not miss anything important. here i have a comment, i could not put at the right location in the code: on line 1362, in `commitsync()` the consumer waits on the `commitfuture` with a timer. i think, it should not wait on a timer there since we already wait on a timer in the background thread.",1,1,1,0.9657272100448608,0.962529718875885,0.9917640089988708,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2031976848,15640,hi - i left some minor comments.,0,0,0,0.9786816239356996,0.9096102118492126,0.9903337359428406,0.0,accept,unanimous_agreement,2
apache/kafka,reviews,2035910325,15640,thanks for the updates ! here my feedback on the production code. next i will look at the test code.,1,1,1,0.9608787298202516,0.970127284526825,0.9893256425857544,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2037790307,15640,"thanks for the updates, ! i finally was able to go over the test code.",1,1,1,0.9893298745155334,0.9741787910461426,0.9942580461502076,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2057631572,15640,"thanks for the updates, ! here my comments!",1,1,1,0.9784069657325744,0.98143208026886,0.9900903701782228,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2068146827,15640,"thanks for the updates, ! as far as i understand from the discussion, and you have a plan for the follow-up prs. so this pr can be merged. i just have two minor questions about the tests. you know best if you want to consider my comments.",1,1,1,0.9802095890045166,0.9907297492027284,0.9867202639579772,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2070245473,15640,"thanks for the updates, ! once approves, i will merge the pr,",1,1,1,0.987825572490692,0.9921911358833312,0.9882688522338868,1.0,accept,unanimous_agreement,2
apache/kafka,reviews,2071697386,15640,"thanks for your patience and great effort here , lgtm to merge and move on with the follow ups. just to recap, this is what i see should be address next related to timeout enforcement: 1. [a link] 2. [a link] 3. [a link] also please let's have a jira to address [a link] comment to remove the test we agreed brings no value. thanks again! cc.",1,1,1,0.992033064365387,0.994802713394165,0.995185911655426,1.0,accept,unanimous_agreement,2
