repository,file_type,id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason,manual_label
redis/redis,reviews,1242527620,11695,"i have skimmed though the diff. this looks very promising! regarding the topics in the top comment: i think your solution looks good. i think it needs to be more fair. i have commented on the diff. see comment on the diff. yes i think we need to do this, at least for checking if it affects performance. a simple way could be to cache the last computed hash inside hashkeyslot itself: [code block] for simplicity, i like that we have all the dicts allocated, but if we use an array of dict structs (see also comment in the diff) instead of an array of dict pointers, we probably get a bit faster as there are less pointers to follow thus less memory accesses.",1,1,1,0.9839171171188354,0.994077205657959,0.9894931316375732,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1243088686,11695,"thanks for publishing the pr . i'm really excited for this change! i reviewed db.c and left some questions, will continue reviewing the remaining files tmr.",1,1,1,0.992391049861908,0.994817316532135,0.9970017075538636,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1283352450,11695,"took another look. the only think i still don't really like is the random key selection, but i'm not sure how much it really matters. do we have any performance testing for eviction? that might be more heavily impacted by the increased time spent selecting a random db. i would still bias towards making the random db selection faster, and random over a long time frame, then necessarily accurate at a given point in time.",-1,-1,0,0.8603057861328125,0.5923188924789429,0.6951984167098999,-1.0,accept,majority_agreement,2
redis/redis,reviews,1287219509,11695,"i skimmed through the changes (not too deeply though). added a few questions, observations and suggestions.",0,0,0,0.9549806118011476,0.9811076521873474,0.9667677283287048,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1325168337,11695,"i skimmed through the recent changes one commit at the time. in retrospect it might have been wrong, due to the repeated changes to the same code, and some of my comment may be outdated or misplaced. also, i think due to some glitch in gh it looked as if i'm reviewing some changes out of order, seeing code that should have been gone already changes in an outdated form. or maybe some commits are incomplete, or something else i don't understand. bottom line, please ignore comments that you think are already handled.",0,0,-1,0.7922843098640442,0.5503031015396118,0.7275192737579346,0.0,accept,majority_agreement,2
redis/redis,reviews,1338031193,11695,"mostly lgtm, still curious about the fairness of the lru for two conditions: 1. some large slots. 2. uniform distribution of slots. i think if we cover those two cases for eviction, i'm happy with the results.",1,1,1,0.8314893245697021,0.8423464894294739,0.6608334183692932,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1369891163,11695,"i'm now conceptually happy with the changes. i have no outstanding concerns for the design, just some minor comments.",1,1,1,0.8196499943733215,0.969269633293152,0.9676122665405272,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1376601156,11695,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1575782756,11695,"i've re-reviewed everything line by line. i must say that unlike the first time i took a look at it, i no longer have a bad feeling about it. maybe it's because this pr had gone through some cleanup and refactory (i don't recall), or maybe it's a matter of expectations, which are now different. i added a few comments with minor questions and suggestions for improvements. after that, and the other pending comments (about expires dict?), i suppose we can proceed. thanks.",1,1,1,0.7948421239852905,0.9627222418785096,0.9818748831748962,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1612505162,11695,"thanks. please go over the comments that you resolved and mark them as such, so it'll be easy to keep track of what's left.",1,1,1,0.7650056481361389,0.8760705590248108,0.9267261028289796,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1618765488,11695,"mostly a partial review, will try to finish some time next week.",0,0,0,0.9766342043876648,0.9846113324165344,0.9288264513015748,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1654553842,11695,"i went over my (and a few others that were old) comments that were unresolved, and resolved the ones that are handled. there are still some that aren't, and it's hard to go over everything each time. maybe for some we should add a todo section in the top comment and resolve them.",0,0,0,0.9526083469390868,0.90821373462677,0.9230546355247498,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1663219180,11695,"conceptually approving the pr, and the handling of the remaining issues later. went over the unresolved comments, and saw two small things that i didn't see in your list. [a link] - about benchmarking mset ~~[a link] - please ack that it's handled.`~~",0,0,0,0.9224247336387634,0.9355130791664124,0.9486162662506104,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1663721630,11695,"we should close on oran's comments, but i'm happy with all the updates and have nothng else to add. , pinging you as well for approval. the top comment seems mostly up to date as of this point.",1,1,1,0.8318755626678467,0.979844331741333,0.9847191572189332,1.0,accept,unanimous_agreement,2
redis/redis,reviews,807470673,9788,"thank you. i started reviewing the pr, and also edited the pr top comment to make it clearer (please check if it looks right). so far i reviewed just parts of it (namely all the files excluding aof.c and the tests). i.d like to post my comments for discussion before i proceed with the other parts, to see if we agree on things, or maybe i have a misunderstanding.",1,1,1,0.949596345424652,0.9144827723503112,0.9742752313613892,1.0,accept,unanimous_agreement,2
redis/redis,reviews,808236545,9788,"done reviewing aof.c, didn't review the tests yet.",0,0,0,0.9641192555427552,0.9850512742996216,0.9849517941474916,0.0,accept,unanimous_agreement,2
redis/redis,reviews,817221984,9788,"hey , i have done a quick initial review and have some comments - but there are also some bigger topics i'd like to raise here. the two main concerns i have are these: * things being more complex for users who wish to backup or migrate aof files around, and in particular failing to copy the right files. * upgrade path. one way to address the first concern, that came up in the past, is to treat the `appendfilename` as a name of a directory we create (under `dir`) and place all files there. users then basically have to backup or transfer the **entire** directory. any down sides to that? regarding the upgrade path, the most common scenario i consider is where the user simply replaces `redis-server`, restarts and expects everything to work. if we simply treat `appendfilename` as a prefix we'd be creating aof data that existing scripts/tools/etc. may not be aware of and silently fail to handle. worse, if the old `appendonly.aof` is still there it could later be used to restore stale data. to address that, we should probably rename the old-style file pointed by `appendfilename` to the new-style structure (as a base). another issue is that unless the configuration parameter is changed, we'd end up with something like `appendonly.aof.25.aof` which would be weird. here, the above proposal to use a dedicated directly might help - because `appendonly.aof` would still exist but become a directory instead of a single file.",0,0,0,0.6892336010932922,0.8268381357192993,0.8127483129501343,0.0,accept,unanimous_agreement,2
redis/redis,reviews,834071770,9788,"here's some feedback (maybe i'm reviewing an intermediate commit). i was under the impression that we decided to start by adding a separate config for the folder name, and use the old config as both a way to locate the old file on upgrades, and maybe also use it as a pattern for the file names we create inside the dir. i.e. agreed with you that this is cleaner than using the old config as a folder name. i was afraid of some edge cases with this approach that we should look into and try to resolve. or actually if we use the old config as a pattern for the files we create in the folder, maybe there's no problem. did you reach some new conclusion on the matter which caused you to go with the approach of using the old config only?",0,0,0,0.6575297713279724,0.936972200870514,0.7704252600669861,0.0,accept,unanimous_agreement,2
redis/redis,reviews,840074691,9788,some phrasing..,0,0,0,0.967365562915802,0.9420620799064636,0.7702205181121826,0.0,accept,unanimous_agreement,2
redis/redis,reviews,840061102,9788,"did another top-to-bottom review of the c code and found some final comments. also, finally had time to review the tests.. all in all they look good, i added a few suggestion got improvements.",1,1,1,0.7321020364761353,0.6179103851318359,0.9738957285881042,1.0,accept,unanimous_agreement,2
redis/redis,reviews,840829269,9788,finished reviewing the c file. posting first part of my review.,0,0,0,0.970674991607666,0.9608854651451112,0.9401176571846008,0.0,accept,unanimous_agreement,2
redis/redis,reviews,840857119,9788,"i only reviewed the changes in the tests and not re-reviewed the whole thing (tests). this means that if some of my previous set of comments was not handled (or had two asks, and only one was handled), i'll miss this. just stating this to make sure you think you understood everything, and if you think there's a chance something wasn't clear, please open that discussion and add a comment in it.",0,0,0,0.742401659488678,0.9067338109016418,0.9526571035385132,0.0,accept,unanimous_agreement,2
redis/redis,reviews,840929608,9788,another full ci: [a link],0,0,0,0.9849458932876588,0.9789487719535828,0.996013641357422,0.0,accept,unanimous_agreement,2
redis/redis,reviews,842039844,9788,"lgtm with a few comments, mostly around typos / suggestions for improved log messages.",0,0,0,0.986314296722412,0.9340474009513856,0.9743757247924804,0.0,accept,unanimous_agreement,2
redis/redis,reviews,842456619,9788,"adding my approval from the high level design, didn't look at the details.",0,0,0,0.8369807600975037,0.9635626673698424,0.9682849645614624,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1126880845,11012,"we probably need to add some tests are doing recursive lmove commands, which don't seem to exist.",0,0,0,0.979321539402008,0.9817919135093688,0.985254406929016,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1127641614,11012,"thanks ran. this area needed some cleanup. in fact, we could rename it to be part of the ""sort out the mess"" series :smile: fyi: #11310 (not sure which one to merge first) cc there is a ton of deleted code here, it's impossible to make sure it didn't have any specific logic for blocked command edge cases that's missing from the actual commands. i just hope we have enough tests to spot these. cc -binbin maybe you can spot something.",1,1,1,0.9078119397163392,0.9751394391059875,0.9931228756904602,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1187956233,11012,"thanks , so this is basically ready for merge? i skimmed though the code again (not a real review) and added a few minor comments. please make sure the top comment is updated with all the important details people may wanna know without reading the code. i wonder if we should do something to benchmark any performance regressions from this maybe you have an idea? i.e. create a scenario where the benchmark keeps creating a mass of blocked clients and releasing them and compare the performance to the old code.",0,1,1,0.7654443979263306,0.937411606311798,0.8686196208000183,1.0,accept,majority_agreement,2
redis/redis,reviews,1190257026,11012,lgtm. i also think it would be good to do performance testing.,1,0,0,0.5335896611213684,0.7717804312705994,0.9647610783576964,0.0,accept,majority_agreement,2
redis/redis,reviews,1233431181,11012,can you please add some trivial monitor + blocked client test in unit/instospection.tcl? [edit] and make sure the top comment is updated,0,0,0,0.9874228239059448,0.9940687417984008,0.9960575103759766,0.0,accept,unanimous_agreement,2
redis/redis,reviews,730201916,9357,"initial review. the two important aspects are maybe: 1. terminology: maybe if we'll call the non-ziplist nodes ""plain"" instead of ""none"" it'll be easier to refer to them anywhere in the code. 2. i feel that we didn't handle compressed nodes correctly, not sure how well this is covered by the tests.",0,0,0,0.7180505990982056,0.975150227546692,0.919062316417694,0.0,accept,unanimous_agreement,2
redis/redis,reviews,735574014,9357,"i saw a commit so i reviewed it. i now realize it's half baked, but since i already wrote down some comments i'll post them.",0,0,0,0.8992190957069397,0.8930561542510986,0.9702953696250916,0.0,accept,unanimous_agreement,2
redis/redis,reviews,752399766,9357,"i went over the diff from the last commit i reviewed. since it was a diff between two commits i didn't see the older comments still pending, so i may have commented on something that's already commented. please go over all the existing comments, if they're already solved, mark them as resolved. if you have two discussions on the same topic you can add cross-reference links and resolve one, or resolve them when they're done.",0,0,0,0.9830117225646972,0.978133261203766,0.967520833015442,0.0,accept,unanimous_agreement,2
redis/redis,reviews,787499618,9357,"not a full code review, but lgtm (with one typo).",0,0,0,0.988231599330902,0.9773748517036438,0.973884642124176,0.0,accept,unanimous_agreement,2
redis/redis,reviews,787506539,9357,"no cr, yes approval.",0,0,0,0.9750038981437684,0.930532693862915,0.9543458223342896,0.0,accept,unanimous_agreement,2
redis/redis,reviews,787568513,9357,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,880971895,10285,"i haven't reviewed the code yet, just responding to the top comment of the pr, the discussion points, and a few other things i noticed. i decided to find places to post these as code-comments so that separate discussion threads can be handled in parallel.",0,0,0,0.9447618722915648,0.9653748273849488,0.9751535058021544,0.0,accept,unanimous_agreement,2
redis/redis,reviews,881027300,10285,"i've just had a quick look at this, so posting some initial feedback mostly based on 's and the top comment. not in favor of that. the problem is we lose track of explicit config vs default config, which tends to become an issue over time when defaults change. is there a problem to expose something similar to what redis already does, and let the module control if a value is to be rewritten or not? i very briefly proposed an alternative. i am sure we need to support multi-param set as a basic feature of the api. possibly, also support both push and pull (where pull is done by the module at `onload` time).",0,0,0,0.8980486989021301,0.8200557827949524,0.8559358716011047,0.0,accept,unanimous_agreement,2
redis/redis,reviews,888008342,10285,"i think the module api is rather solid, other than maybe: 1. a few more flags we could expose (like percent_config) 2. improved enums configs (not relying on implicit int values). 3. improved apply callback that takes a redismodulectx and / or privdata i posted quite a few comments about the implementation, but most importantly there's a lot of logic copied from config.c into module.c, and i think we could maybe find a way to avoid that (see my comments in parseandsetnumericconfig). so maybe we need to look into a poc for that approach before dealing with the test of the comments? p.s. haven't reviewed the test code.",0,0,1,0.6914318799972534,0.9014032483100892,0.847052276134491,0.0,accept,majority_agreement,2
redis/redis,reviews,907955094,10285,"thanks ! i think the refactoring definitely cut down on the duplication. i took a pass through the code. i didn't read too much of the documentation updates, but i think i will just push some updates tomorrow.",1,1,1,0.978293240070343,0.981999933719635,0.991159975528717,1.0,accept,unanimous_agreement,2
redis/redis,reviews,911226823,10285,imho looks a lot better than the initial version i reviewed. thanks. added a bunch of small comments. haven't reviewed the tests yet.,1,1,1,0.9788565635681152,0.975564181804657,0.9928600192070008,1.0,accept,unanimous_agreement,2
redis/redis,reviews,912364657,10285,"looks pretty good to me, mostly minor comments now.",1,1,1,0.9576167464256288,0.9794726371765136,0.8084303736686707,1.0,accept,unanimous_agreement,2
redis/redis,reviews,918533350,10285,"another round of review. i'm gonna edit the docs for rm_registerstringconfig myself (would be easier than reviewing suggestions), so feel free to fix / argue after my edit.",0,0,0,0.7959957718849182,0.9402490854263306,0.8687285780906677,0.0,accept,unanimous_agreement,2
redis/redis,reviews,920749426,10285,thank you. this is close to being perfect 8-),1,1,1,0.9913030862808228,0.9951830506324768,0.9970405697822572,1.0,accept,unanimous_agreement,2
redis/redis,reviews,922405824,10285,"i went over all the unresolved comments, and resolved most of them (mostly outdated or handled). finally reviewed the tests too. please go over the pr top comment and make sure it's updated thank you!",1,1,1,0.9639040231704712,0.9671526551246644,0.99130779504776,1.0,accept,unanimous_agreement,2
redis/redis,reviews,923827406,10285,"i finally got around to finishing reading the documentation. ""effectively"" an approve from me, as i'm okay with the tradeoffs made in this pr, but would like to see them get closed in the discussion.",0,1,1,0.9505537152290344,0.5120229721069336,0.5371918678283691,1.0,accept,majority_agreement,2
redis/redis,reviews,925269835,10285,"lgtm. i still prefer the char *, but it's not something i honestly feel that strongly about.",-1,-1,0,0.7425356507301331,0.6710371971130371,0.8872095346450806,-1.0,accept,majority_agreement,2
redis/redis,reviews,1407081072,12109,"thanks. i didn't really dive into the derails and code, but i do have a few comments about a few things i noticed. p.s. still not certain about using a second socket rather than multiplexing yet, each has its pros and cons.",1,1,1,0.9262792468070984,0.9728583097457886,0.965984344482422,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1438416107,12109,"finally circled around to this again. it still feels like there is a lot of code and it feels like there should be less, and i think there is some duplication between regular and two channel sync",0,0,0,0.762977659702301,0.5091224312782288,0.949579894542694,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1526335332,12109,"thank you for the pr. i reviewed the code, without the tests for now and added many comments. here are a few top level notes (**each also has a thread of it's own in the comments, but i wanna draw the attention to these first**): * the review took long and it could be that some comments are duplicates. * i think that before merging this we better refactor replication.c into two files (master related code and replica related code, i'll discuss this with the core team. * i think we should change the state machine / connection sequence to a different way to do capability exchange and fallback to old mechanism without a reconnect. * i think we're mixing several different aspects in replconf that should be kept separate * i feel that the two connections should be coupled in some way (redis will be aware that they're a pair). this could help us make sure the end-offset doesn't disappear from the backlock if it is small. * i feel the terminology isn't consistent (rdb channel, vs second channel and so on), and that we need to decide on it and sort it out.",1,1,1,0.9747325778007508,0.9689776301383972,0.9771094918251038,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1861423638,12109,"i only reviewed the incremental diff from my last commit, didn't re-review the diff against unstable. but since so much time passed since my last review, i'm not sure i have the right context in my head for a partial review. if you're gonna now work on it till completion, i'll need to re-review it from scratch sooner or later, but hopefully i'll do that after some terminology and comments cleanup, and maybe after any missing parts are complete (so that i don't have to repeat that again too many times) please mark all the resolved comments as such, and if there are big ones that require design discussion and decisions, let's do that first, before reviewing and arguing about nonsense. p.s. didn't look at the tests.",0,0,0,0.8226004838943481,0.8835901618003845,0.731708288192749,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1896045887,12109,"some of my comments are overlapping / contradicting since they suggest changing the pending_slaves mechanism in different ways. we need to figure this out, but i don't have a concrete suggestion.",0,0,0,0.8035572171211243,0.5010432600975037,0.7415322661399841,0.0,accept,unanimous_agreement,2
redis/redis,reviews,725127812,9323,"thank you, i think this pr shows the potential of that concept quite well, and it's nice to see that the code was nearly prepared for this concept and you were able to apply it nicely without too many changes. i did a quick review and gave a few comments, the main issue to be resolved is probably around the module api and complex modules with out of keyspace data. few other things i must note: 1. during loading redis is not highly responsive, it only processes events for a short period once in some 2mb of rdb data. so the clients working with the replica may get degraded performance, even beyond the fact that the cpu is heavily invested in loading. 2. i think we wanna have that mode enabled only when a replica was previously in sync with a master (not depending on whatever the database was empty or not though), when a new replica comes up, we'll want to avoid using swapdb, so that we **will** respond with -loading.",1,1,1,0.9139931201934814,0.9799473285675048,0.987389326095581,1.0,accept,unanimous_agreement,2
redis/redis,reviews,737636496,9323,lgtm with minor fix. what's left is to handle the modules issue.,0,0,0,0.9865119457244872,0.9525890946388244,0.9833977222442628,0.0,accept,unanimous_agreement,2
redis/redis,reviews,741115188,9323,"thank you.. your changes seem great! i gave a few minor comments mostly about renaming ""repl async"" to ""repl async load"". and raised a few questions about ordering. i think you can proceed with adjusting the tests.",1,1,1,0.9917422533035278,0.9942947030067444,0.9961931705474854,1.0,accept,unanimous_agreement,2
redis/redis,reviews,752743515,9323,"i re-reviewed the whole thing from scratch, here are my new comments:",0,0,0,0.9683216214179992,0.9475876688957214,0.9777080416679382,0.0,accept,unanimous_agreement,2
redis/redis,reviews,770028373,9323,"reviewed your last commit. lgtm. i also updated the top comment about the new module api flag, and an explanation as to why we replaced checks of the loading flag with aof client id. please see if there are any other things that need to be noted for future reviewers or release notes.",0,0,0,0.9785036444664,0.9592970013618468,0.9450490474700928,0.0,accept,unanimous_agreement,2
redis/redis,reviews,775687107,9323,i like the last commit. it's just what i was thinking. i have only a few comments.,1,1,1,0.788908839225769,0.9922032356262208,0.9535956382751464,1.0,accept,unanimous_agreement,2
redis/redis,reviews,781462611,9323,"thank you. tests look fine, but i'd like to see if we can find a way to make them run shorter (not wait for slow replication completion), and share code. p.s. this is that last thing to handle right? all other comments are addressed? please go over the ones not yet resolved, make sure they're handles and resolve them. also make sure the top comment is updated with what was done, why and any other implications of the changes. then i'll ask the core-team to approve and we can merge.",1,1,1,0.90421724319458,0.965358018875122,0.9724188446998596,1.0,accept,unanimous_agreement,2
redis/redis,reviews,781474264,9323,"i went over some of the unresolved comments and marked them as resolved. and also edited the top comment and filled in additional info (mainly the decision of async loading based on repl-id). please take a look and fill additional info. regarding the slotstokey map, did we decide to leave it in server.c or make it opaque in cluster.c? (if we do that, the top comment needs another update, or just deletion of a line) let's finish all the c code and documentation before we proceed with test cleanup, which we can do while others review the code.",0,0,0,0.9772440195083618,0.9732041358947754,0.9493026733398438,0.0,accept,unanimous_agreement,2
redis/redis,reviews,787516451,9323,"not a full detailed code review, but lgtm. one comment: i think we're missing explicit handling for invalidating tracked keys (client side caching) somewhere in `swapmaindbwithtempdb`.",0,0,0,0.9818648099899292,0.9888667464256288,0.9640640020370485,0.0,accept,unanimous_agreement,2
redis/redis,reviews,791386932,9323,"i did a quick (and maybe sloppy) review. i feel the tests need more work, and i pointed out some things i think are wrong. please let me know if you feel i'm missing something.",-1,-1,0,0.922362983226776,0.8587856292724609,0.5276755690574646,-1.0,accept,majority_agreement,2
redis/redis,reviews,795050026,9323,"lgtm, one last change requested.",0,0,0,0.9855738282203674,0.9870567321777344,0.9928096532821656,0.0,accept,unanimous_agreement,2
redis/redis,reviews,723668378,9323,"approving based on documentation, didn't read the implementation details.",0,0,0,0.925612211227417,0.962988257408142,0.965934157371521,0.0,accept,unanimous_agreement,2
redis/redis,reviews,754361422,9166,"wow.. impressive work. i must say that i like the result despite the complexity it adds, i think it brings a lot of value. i gave quite a lot of comment, possibly some were due to my misunderstanding of the roles of some fields (i began by reviewing server.h), which became clear later when i read the code that uses them, but still i think the documentation in the header and possibly some field names should be improved. i also think i found one or two bugs, which indicates that we may need to improve the testing to cover these cases, and maybe also add some fuzzer to smoke out other edge cases not currently covered. please go over the pr top comment and see if it needs any update. i think it doesn't mention the rax used for quick psync offset finding (and the fact not all nodes are included). and i think it doesn't mention the fact that now the actual backlog can be larger than the config setting if some replica is using large buffer (so psync will sometimes succeed with bigger gap).",1,1,1,0.9857492446899414,0.9921994805336,0.989293932914734,1.0,accept,unanimous_agreement,2
redis/redis,reviews,761692572,9166,"i think there's an issue with the replication backlog being larger than the (slave) client output buffer limit. in such a case: - if we disconnect a slave because of reaching obuf limit we don't gain anything, since we still keep all the memory for the backlog. - once that slave psyncs we'll set its obuf to a value which is larger than its max allowed obuf (instead of refusing the psync), and then disconnect it for reaching its obuf limit. this might continue until the backlog buf is out of the psync range. if this is the case, we need to fix `checkclientoutputbufferlimits()` somehow so if we're checking for a slave then the limit will be `max(slave-limit, repl-backlog-limit)`. another related issue is that if trimming of the replication buffer is done in the background and not immediately then there might be a case where a slave is disconnected because of obuf limit and then tries a psync and instead of failing (because we freed the repl buf) we still have it and we succeed the psync only to fail again on an obuf limit. makes sense? is this relevant?",0,0,0,0.9715163111686708,0.9669113755226136,0.9757257699966432,0.0,accept,unanimous_agreement,2
redis/redis,reviews,769547441,9166,"just posting that i conceptually agree with the approach, i won't get a chance to review it but don't want that to block merging this.",0,0,0,0.8745026588439941,0.6837790608406067,0.923943817615509,0.0,accept,unanimous_agreement,2
redis/redis,reviews,787507256,9166,"not a full detailed code review, but lgtm (but i did mark a few typos).",0,0,0,0.9875087141990662,0.968302607536316,0.9711216688156128,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1290562929,10517,i skimmed though the changes in the general infra (skipping cluster.c and the tests). it'll need to be reevaluated after rebase (hoping some of the changes will now be unnecessary),0,0,0,0.9863800406455994,0.9931007623672484,0.9731940031051636,0.0,accept,unanimous_agreement,2
redis/redis,reviews,993988354,10517,"partial review for today. left some high level comments, and some minor things. i'm still inclined to try to harden the slot migration reliability.",0,0,0,0.6655243635177612,0.548355758190155,0.8786383271217346,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1296509871,10517,"had a chance to basically read through everything now. generally in favor of a lot of the cleanup that was done. we need to validate the behavior after failures when running redis-cli, since i think that is most of the users will be doing when they hit these failures. my biggest concern is that there are now two competing sources of truth of slot ownership, one driven out of the primaries through the clusterbus and one through the replication stream. i'm thinking that maybe we should trend towards a design where nodes within a shard learn their slot state from replication, and learn about other shards through gossip. i think you sort of implement a lot of this, but maybe it's just a mental model i need to wrap my head around.",0,0,0,0.5532822608947754,0.8824703693389893,0.888615071773529,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1296894296,10517,"thanks again for the review, . i haven't fully addressed all the feedback but sending out a partial response for now. will continue tomorrow.",1,1,1,0.945276975631714,0.945114016532898,0.9798563718795776,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1301017680,10517,gave it another quick look after rebase. again only looked at general redis infra and skipped clueter.c and the tests.,0,0,0,0.9799066185951232,0.971725046634674,0.9878174662590028,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1386954738,10517,doesn't the new approach require some changes in redis-cli?,0,0,0,0.9851118922233582,0.9934884309768676,0.991866171360016,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1397619682,10517,logic seems fine to me. mainly some comments on code comments. seems we're almost there. i'd still very much like to see this in 7.2 if possible.,0,1,0,0.6589188575744629,0.690234899520874,0.5784677267074585,0.0,accept,majority_agreement,2
redis/redis,reviews,1399381451,10517,i'm happy now. just a few nits and some question.,1,1,1,0.9695790410041808,0.9930341243743896,0.9778749346733092,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1496196081,10517,this all looks mostly correct. big open question for me is still the thinking around replicating open slots as a burst of commands after the full sync.,0,0,0,0.9456580281257628,0.677898108959198,0.9547369480133056,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1502077508,10517,everything looks ok to me.,0,0,0,0.9086155891418456,0.8157203793525696,0.7275938987731934,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1951329514,13157,the bsd license header should be reserved if not all contributors signed on the license change.,0,0,0,0.9874601364135742,0.989654779434204,0.9945670366287231,0.0,accept,unanimous_agreement,2
redis/redis,reviews,741513212,9320,"i've started reviewing the code and made a few comments. my main input is we need to break down this pr into several phases to make it easier to handle. i believe the first phase should be about connection api change/cleanup only - fully encapsulate `connectiontype`, only use generic `conncreate`, `connaccept`, etc. leave everything in `connection.c` to avoid big diffs due to code reorganization at this point. at this point i'd also want to be sure we don't introduce any unexpected performance regressions. the next stages would be -- * add `tls-module-path` and the ability to *optionally* build tls support separately (i.e. `build_tls=yes|no|ext`). maybe at this point already consider a more generic `load-extension` mechanism (the term ""module"" is used for redis modules, we don't want to confuse the two). * consider if/how additional arbitrary connection types can be supported. * finalize code reorganization. do you have any other/additional thoughts?",0,0,0,0.8665514588356018,0.9465352296829224,0.7536926865577698,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1003594233,9320,"thank you for your patience, sorry it takes so long. i wasn't part of the loop earlier and my review now is just through the peephole of the github diff, so i might be off or missing things. i did review the commits in the pr one by one, and the refactoring work you did seem pretty solid (gave a few minor comments). i also looked at a few commits at the top of [a link] to see how you took it further and how rdma and possibly other mediums can be integrated with minimal or no changes to redis, hoping for redis to be flexible enough to support various nuances and oddities each one brings. i do remember you mentioned something about rdma not being able to deliver a writable event, and i assume we might need to pull portions of ae.c into this extensions mechanism. a few random notes about changes i see in the commits of that other branch: refactory related: * i don't think it's appropriate clientaccepthandler (protected mode, error replies, module hooks, freeing clients, server stats) is in connection.c (should somehow move back to networking imho) * same for acceptcommonhandler and clusteraccepthandler * i'm unsure about connsocketlistentoport. it seems a good fit for connection.c, but maybe we don't have to move it (unnecessary blamelog and review overhead). general: * maybe instead of ""burning"" the medium specific configs into redis, we should either use the new module api config system (#10285) to configure these. there are two ways we can do that: one is that these extensions can be both an extension, but also a module, and use the module api to register configs. the other is that maybe we'll extract the mechanism that allows modules to register configs (which are applied after config file parsing instead of during), in a way that the extensions will be able to use them too. * maybe instead of the several hard coded `if`s in redis that init and setup (listen) the extensions, we can have a loop that handles all the loaded extensions, in which case instead of hard coded indexes to the connection type array, they'll be dynamic. i.e. each entry in the array has a pointer to the callback struct, but we don't know which index has which type (socket and tls may be an exception since we due to compatibility of previous state, we may have to refer to them by index).",-1,-1,1,0.7946112751960754,0.8176538944244385,0.892769455909729,-1.0,accept,majority_agreement,2
redis/redis,reviews,1023282021,9320,"most changes lgtm. thanks. i see we can now pass arguments to the extension at load time, which is nice (p.s. i think you better re-add the section in redis.conf), so the need for an api to register config set/get interaction and runtime configs is arguably reduced (we should still do that some day later though imho).",1,1,1,0.9562369585037231,0.9580833315849304,0.9746854901313782,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1028100153,9320,"looking at the last commit, i have mixed feelings. trying to conclude if all of these (config, cert, ctx, client ctx) are always gonna be tls specific. i guess it's almost certainly right about all except config. regarding the config, what sets tls different than unix and socket is that it has extra configs in addition to `bind` and `port`, which may also be true for other future extensions. however, tls has native redis configs, and other extensions are likely to use the module configuration infrastructure with it's apply callback.",-1,-1,0,0.97178316116333,0.5567604899406433,0.5469955801963806,-1.0,accept,majority_agreement,2
redis/redis,reviews,1033600322,9320,"sorry for not replying sooner. we're trying to decide on the next steps (both the last commit, but also about adding a way to register configs). i opened an issue to discuss that, #10959. let's proceed here once it's decided there.",-1,-1,-1,0.9895479679107666,0.9894808530807496,0.9879583120346068,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,1055594595,9320,"it's not that the sentinel timer is called before the listeners are initialized, it's that `tlsinit` used to be outside the `if (!server.sentinel_mode)`..`else` block, and now `initlisteners` is inside (only executed for redis server case, and never for the sentinel case. in fact, in order to support tls as a loadable extension for sentinel, we now have to support modules in sentinel too, so we need to move the whole next block to before that `if`: [code block] the only other alternative is to decide we don't support loadable extensions for sentinel, just built in ones. your opinion?",0,0,0,0.9801095724105836,0.9920023679733276,0.9926665425300598,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1068579421,9320,it's a lot more straightforward than i was expecting. just some minor comments. directionally it all seems good!,1,1,1,0.9826323986053468,0.9891964197158812,0.991758406162262,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1072658969,9320,"this looks very good! i've added a few small comments/nit picks. other than that, i think this work is ready to be merged to unstable.",1,1,1,0.9910140633583068,0.9934431314468384,0.9942423701286316,1.0,accept,unanimous_agreement,2
redis/redis,reviews,830663847,9934,great initiative :),1,1,1,0.989412486553192,0.9933170080184937,0.9941120743751526,1.0,accept,unanimous_agreement,2
redis/redis,reviews,870595504,9934,"sorry it took me so much time the conversation was too long for me to read, and the top comment is well.... missing!. so i went in to read the code hiding / ignoring the current comments (made the code hard to read). aside from responding to my comments, please also update the top comment, mark any resolved threads as resolved, and please `@` mention me again in the pending threads, trying to sum up the pending decision in case the thread is really long. thank you.",-1,-1,-1,0.981806755065918,0.99314683675766,0.9869465231895448,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,871787586,9934,"the code lgtm, we need to conclude the open discussion and re-run some benchmarks.",0,0,0,0.9853460788726808,0.985437512397766,0.994285523891449,0.0,accept,unanimous_agreement,2
redis/redis,reviews,884404722,9934,thank you,1,1,1,0.7400884628295898,0.6702879667282104,0.9420937299728394,1.0,accept,unanimous_agreement,2
redis/redis,reviews,699918485,9202,"interesting. i didn't look very carefully but i have two comments: * documentation in redis is in the `.c` files, not in the `.h` files. * hiredis already contains a reply parser. it's a simple protocol, so maybe there is not problem to have one more parser, but it can be considered if we want to improve/refactor/export the one in hiredis instead.",0,0,1,0.535196840763092,0.7006540894508362,0.7038344144821167,0.0,accept,majority_agreement,2
redis/redis,reviews,705039684,9202,"btw, did you add some loop in the test that runs the resp3 module tests in resp2 mode?",0,0,0,0.9899545907974244,0.9957026839256288,0.9934402108192444,0.0,accept,unanimous_agreement,2
redis/redis,reviews,707272942,9202,"i'm on vacation, so i don't have time to review. i trust you guys. :-)",1,1,1,0.990994393825531,0.9919657707214355,0.9966819882392884,1.0,accept,unanimous_agreement,2
redis/redis,reviews,707300678,9202,"not a real cr, but rather a cr (comments style/syntax/typo review) :)",1,1,1,0.5692901015281677,0.9840641021728516,0.987350046634674,1.0,accept,unanimous_agreement,2
redis/redis,reviews,705673457,9202,"i doubt i'm going to get much time to dive into this, but the high level apis look good to me. the only thing that crossed my mind is that the reply_parser seems like it could be re-used much more broadly.",1,0,1,0.633029580116272,0.696095883846283,0.9020108580589294,1.0,accept,majority_agreement,2
redis/redis,reviews,720659419,9202,api looks good to me.,1,1,1,0.8686166405677795,0.9632909297943116,0.9103573560714722,1.0,accept,unanimous_agreement,2
redis/redis,reviews,841864892,9974,looks good to me. did not do a very deep code review but i did play with that bit and it's cool. do you want to update the top comment with everything you have in mind that's still pending? i imagine there's a long tail and maybe we can parallelize this work somehow.,1,1,1,0.988814413547516,0.984430491924286,0.9781867861747742,1.0,accept,unanimous_agreement,2
redis/redis,reviews,851734298,9974,"only looked at the narrow diff of the last two commits, so might have comments that are out of context or may be missing something. didn't review the tests.",0,0,0,0.8166549801826477,0.9693701267242432,0.9726322889328004,0.0,accept,unanimous_agreement,2
redis/redis,reviews,853649509,9974,minor comments on last commit,0,0,0,0.9683102369308472,0.9682257175445556,0.9906228184700012,0.0,accept,unanimous_agreement,2
redis/redis,reviews,858672244,9974,"no cr, but played a bit with the latest version - lgtm!",0,1,1,0.6970400214195251,0.9815659523010254,0.5598122477531433,1.0,accept,majority_agreement,2
redis/redis,reviews,934120409,10273,"lgtm. please add a better top comment before we call others to take a look. it should include some description of the purpose and design / decisions we already took. you can maybe copy some from this [a link]. also, in order to better judge this, it would be nice to look at what the user facing documentation is gonna look like, but maybe a detailed top comment can fill that place for now. please also add some todo list which states the status of the task and the remaining issues (like completing the data for all commands, providing module api, and writing docs.)",0,0,0,0.8978287577629089,0.9627364873886108,0.8811596632003784,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1236083950,10273,i expected this review to take longer :stuck_out_tongue:,-1,0,-1,0.9866293668746948,0.976883053779602,0.9726276397705078,-1.0,accept,majority_agreement,2
redis/redis,reviews,735736405,9406,"only after reviewing, i realized that this completely misses the request of being able to access the value from that notification callback. for that to work, the callback needs to be made in dbsyncdelete and dbasyncdelete before the call for dictunlink. but on the other hand, we can't afford to do that if the key doesn't exist, so it seems we'll have to add an additional `dictfind` that's only used if there's some module subscribed to that event. also, it's probably a good idea to add a test that shows that's working (rm_openkey getting the value)",0,0,0,0.7863687872886658,0.9829849600791932,0.9538666009902954,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1128489534,9406,i'll try to clone and branch and take a look at that robj* issue soon,0,0,0,0.9453890323638916,0.9836750626564026,0.9725448489189148,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1158147618,9406,"lgtm, thanks!! minor suggestions.",1,1,1,0.9755852818489076,0.9936459064483644,0.995031237602234,1.0,accept,unanimous_agreement,2
redis/redis,reviews,746912174,9462,"code lgtm (with minor code style issues). i've briefly read the discussion in the issue, and the compromises you made seem ok. the one part that's not solved is the fact the request and some of the discussion was around tracking the full command processing + waiting time, and that's too complicated to handle. considering the low impact of this pr on both complexity and performance, i suppose we can take it even if the value is not as high as we wished. regarding the format, the only concern i have is what if we'll want to add more metrics in the future, like one that's including the blocked time for blocking commands. i.e. for normal command stats (total time) we can simply add more fields, but here if we wanna do that we need to add more sections.",0,0,0,0.838600218296051,0.955905258655548,0.9290788173675536,0.0,accept,unanimous_agreement,2
redis/redis,reviews,747446951,9462,also looks like you're missing module init?,0,0,0,0.985571026802063,0.9906891584396362,0.9945842623710632,0.0,accept,unanimous_agreement,2
redis/redis,reviews,840967408,9462,lgtm. i think touched most of the remaining issues. placed some small comments. but looks good. thank you for this!,1,1,1,0.9902517795562744,0.9954915642738342,0.9957744479179382,1.0,accept,unanimous_agreement,2
redis/redis,reviews,754959323,9504,part one of the review. reviewed everything except the command table itself.,0,0,0,0.977616548538208,0.9795348048210144,0.9175013303756714,0.0,accept,unanimous_agreement,2
redis/redis,reviews,756942734,9504,some comments,0,0,0,0.9812830686569214,0.8828989267349243,0.9714156985282898,0.0,accept,unanimous_agreement,2
redis/redis,reviews,760183689,9504,"i think the acl code is correct, but adding tests for various cases like `- +config -config|get` work would probably be good.",0,0,0,0.9043101668357848,0.9483560919761658,0.7740525603294373,0.0,accept,unanimous_agreement,2
redis/redis,reviews,778931745,9504,few more general notes: top comment is missing: - the new command list - mention renaming of the old allowed_subcommands and maybe some refactoring in acl.c extracting code to common functions - maybe make a specific section about breaking changes (specifically commandstats iirc) - mention it's now possible to do things like +config|get|appendonly in acl other todo: - need to update the acl topic in redis.io (both the categories and the sub-commands) - with some note about redis 7 and up maybe add a todo section in the top comment for that so we can track it's status later.,0,0,0,0.9478459358215332,0.9916638135910034,0.9925313591957092,0.0,accept,unanimous_agreement,2
redis/redis,reviews,781628874,9504,no other major comments from me,0,0,0,0.97735995054245,0.9605430960655212,0.9541630148887634,0.0,accept,unanimous_agreement,2
redis/redis,reviews,783116618,9504,"lgtm, only skimmed through the code - but concept and api make sense and look great.",1,1,1,0.9788036942481996,0.6722709536552429,0.9861570596694946,1.0,accept,unanimous_agreement,2
redis/redis,reviews,653606574,8887,"thank you for that effort. i've added a few comments inside the code, but here are some general ones: 1. i don't like the term ""list container"". in ""ziplist"" and ""listpack"", we mention it is zipped, or packed, i.e. encoded. this container can be more easily mistaken to be something related to list data type rather than an encoding type. maybe a term like ""encoded list"" or ""packed list"" (i.e. something that is generic, and both ziplist and listpack comply to, i.e. both ziplist and listpack are encoded and packed). 2. currently we only create new hashes with listpack, and when modifying an existing hashes we'll always keep them as ziplists. we need to see if we can come up with a plan to gradually convert them. i.e. i don't want an o(n) operation at load time or any other time, but eventually i want them all gone. 3. we have a problem with testing. the majority of the tests work by creating a new db from scratch, so the ziplist code is now mostly unreachable. maybe we need some debug sub-command that will tell redis to default to creating ziplists, and then run the entire testsuite in that mode (in the daily ci) i'm specifically worried about the corrupt-dump-fuzzer test. we either need to save an old rdb file in the assets folder, or let it run twice with that debug tweak i suggested.",1,1,1,0.9141020774841307,0.9603148698806764,0.9792898893356324,1.0,accept,unanimous_agreement,2
redis/redis,reviews,664176349,8887,recent changes lgtm,0,0,0,0.9790297746658324,0.9824036359786988,0.989035665988922,0.0,accept,unanimous_agreement,2
redis/redis,reviews,703552067,8887,"i did a quick review of the recent changes to this pr (diff between old and new commits, i didn't yet re-review the diff with unstable). i assume they're mostly about deleting the common interface, reverting unnecessary changes (like all changes to ziplist.c/h and other complications we created when we considered a case were both can be present side by side at runtime). regarding the new corrupt payload test you added, is it related to the new assertions in lpentrysizeunsafe? did the fuzzer found it?",0,0,0,0.979882001876831,0.984121024608612,0.9888768792152404,0.0,accept,unanimous_agreement,2
redis/redis,reviews,711454186,8887,one last round of top to bottom review...,0,0,0,0.825427770614624,0.9838792085647584,0.9905468225479126,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1116755662,11303,"looks good! this is a quick review, i.e. i didn't check the correctness of everything. i assume you made sure everything is covered by tests.",1,1,1,0.9803805947303772,0.9951280355453492,0.9930843114852904,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1137106741,11303,initial round of review (excluding the tests code) p.s. maybe add an example about the memory saving to the top comment (e.g. plain case of a list of 10 small numeric items),0,0,0,0.9842162728309632,0.991302251815796,0.9946447610855104,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1167214761,11303,lgtm. observation: * all the callers of listtypetryconversionwithargv are using list_conv_growing. * all callers that use list_conv_growing are using listtypetryconversionwithargv maybe we can rename listtypetryconversionwithargv to listtypetryconversionraw and add a wrapper called listtypetryconversionappend that doesn't take that `lct` argument.,0,0,0,0.9775570631027222,0.9951712489128112,0.9900897741317748,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1167223424,11303,"first time reviewing the tests. i see we're re-using leftover infrastructure from redis 3.0, it doesn't make a perfect match for us, but i guess it works ok and just missing some comments. please add some showcase example about memory savings in the top comment. i.e. some example case of a db with a ton of keys of 10 elements, and the % memory saving.",0,0,0,0.947375237941742,0.9308584928512572,0.5664533376693726,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1171303966,11303,conceptually approve. assuming others did a deep review of the code.,0,0,0,0.9745373725891112,0.9731670022010804,0.9877752065658568,0.0,accept,unanimous_agreement,2
redis/redis,reviews,607686297,8621,"i didn't take a super deep look as this is still a draft, but looks consistent with what we talked about. /core-team might be useful to take a look now while this is in the early draft stage for how this solves the cluster pubsub scaling problem. the interesting bit is that it's introduce 2 new commands publishlocal and subscribelocal, which exist in their own namespaces. full suggestion is here: [a link]",0,0,0,0.9163609147071838,0.9142443537712096,0.8800942897796631,0.0,accept,unanimous_agreement,2
redis/redis,reviews,672627916,8621,"solid progress, i did look at everything except the tests.",0,0,1,0.5657117366790771,0.5127512812614441,0.7731539011001587,0.0,accept,majority_agreement,2
redis/redis,reviews,760308513,8621,"basically through everything, and it looks generally good, no major comments. i didn't fully grok all the tests, but they looked generally good. i will take one more look tomorrow to think through the test cases a bit more.",1,1,1,0.7773608565330505,0.7931033372879028,0.9480907917022704,1.0,accept,unanimous_agreement,2
redis/redis,reviews,795662583,8621,mostly lgtm,0,0,0,0.9801682233810424,0.8180773854255676,0.9822140336036682,0.0,accept,unanimous_agreement,2
redis/redis,reviews,804317214,8621,"lgtm, just a couple of minor things left. if you can update the top comment to outline all of the changes and discussions, i think we're good to ping the core group and get buy in now.",0,1,0,0.8163455128669739,0.4965828359127044,0.8752132058143616,0.0,accept,majority_agreement,2
redis/redis,reviews,826000518,8621,"/core-team please take a look, especially if you think we should implement a pattern matching scheme for cluster mode.",0,0,0,0.9829545617103576,0.983548939228058,0.9794060587882996,0.0,accept,unanimous_agreement,2
redis/redis,reviews,829612182,8621,"lgtm (didn't review the code, just skimmed though some files). i suppose subscribing to patterns is useful, specifically if the pattern includes a tag. i.e. `subscribelocal {tag}-something*` i wouldn't say that it's a must-have (don't know enough of the use cases), but if we're gonna add it, i think we should add it now rather than later.",0,0,0,0.982943058013916,0.9783305525779724,0.9728804230690002,0.0,accept,unanimous_agreement,2
redis/redis,reviews,829636646,8621,"api lgtm, did not do a complete code review.",0,0,0,0.8725998997688293,0.9620657563209534,0.9455999135971068,0.0,accept,unanimous_agreement,2
redis/redis,reviews,839709693,8621,"minor wording comments, but other than that i think the new version lgtm.",0,0,0,0.9882776141166688,0.9402928948402404,0.9815338253974916,0.0,accept,unanimous_agreement,2
redis/redis,reviews,839959920,8621,"lgtm. , missing your weigh in still.",0,0,0,0.7968756556510925,0.5985493063926697,0.9456140995025636,0.0,accept,unanimous_agreement,2
redis/redis,reviews,841719552,8621,"approve the idea, didn't cr",0,0,0,0.9200184941291808,0.6746914386749268,0.9831200838088988,0.0,accept,unanimous_agreement,2
redis/redis,reviews,817946597,9656,"didn't yet get to any of the c files, just skimmed over the json file.",0,0,0,0.9600437879562378,0.9851654767990112,0.9708166122436525,0.0,accept,unanimous_agreement,2
redis/redis,reviews,818860138,9656,"i haven't really reviewed the python script, just skimmed though it.",0,0,0,0.8443882465362549,0.8879567980766296,0.8798484802246094,0.0,accept,unanimous_agreement,2
redis/redis,reviews,832928599,9656,"lgtm, only some issues with the module api which will move to a separate pr.",0,0,0,0.9880965948104858,0.9877954721450806,0.9918877482414246,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1231864262,11659,"reposting some comments from the internal review, and a couple of other minor things i didn't see during my first high level review.",-1,0,0,0.763291597366333,0.9119863510131836,0.9755507707595824,0.0,accept,majority_agreement,2
redis/redis,reviews,1285984013,11659,didn't do a complete review since i don't think the previous comment about reprocessing was really addressed.,0,0,0,0.7550750970840454,0.947088360786438,0.9490660429000854,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1290474623,11659,"i did a fast review. might not understand all cases and requirements, but it seems that making the effort to allow module command to keep reprocessing (via queueing and retry again) would be better way to tackle this. maybe stats handling and aggregated timeouts is the problematic part but maybe we can focus on that.",0,0,0,0.8978455066680908,0.9605867266654968,0.7307553291320801,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1308337378,11659,test review,0,0,0,0.9786665439605712,0.9812033772468568,0.987858772277832,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1321340448,11659,mostly lgtm. didn't review the tests code.,0,0,0,0.762998640537262,0.9709699153900146,0.9820684790611268,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1335911032,11659,"really close, i noticed something else i would like to get your input on, other than that it lgtm.",0,0,0,0.7258535623550415,0.6912646293640137,0.8888891935348511,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1340772714,11659,"i skimmed though the recent changes (not too deeply, and still skipping the tests), lgtm.",0,0,0,0.9783529043197632,0.9833193421363832,0.9875491857528688,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1342469705,11659,"did a review of the deltas, all lgtm as well.",0,0,0,0.9815473556518556,0.99149489402771,0.9918060302734376,0.0,accept,unanimous_agreement,2
redis/redis,reviews,775670840,9572,"i'd like to add quite a few tests. the obvious ones are the bugs mentioned in #6842, but probably quite a few other tests that verify the intended behavior so it won't be accidentally broken in the future.",0,0,0,0.9710493683815002,0.9858635067939758,0.9802371859550476,0.0,accept,unanimous_agreement,2
redis/redis,reviews,795620996,9572,"lgtm, didn't cr.",0,0,0,0.9408833384513856,0.8574540019035339,0.9650439620018004,0.0,accept,unanimous_agreement,2
redis/redis,reviews,812204531,9572,"i don't agree with the changing about the expire on writable-replica part, but you can go ahead.",0,0,0,0.9692986607551576,0.9591949582099916,0.8681275248527527,0.0,accept,unanimous_agreement,2
redis/redis,reviews,814933520,9572,"let's merge this one. please rebase it (merge unstable into it). please respond to my last comment, and please briefly go over the code and top comment to see it's ready for merge. thank you!",1,1,1,0.984297215938568,0.9805277585983276,0.9818782210350036,1.0,accept,unanimous_agreement,2
redis/redis,reviews,2561074712,13740,:+1: -mon looks good. added some comments but please notice that i did not yet finished the review all the changes.,1,1,1,0.9844126105308532,0.9826940894126892,0.9857257604599,1.0,accept,unanimous_agreement,2
redis/redis,reviews,2574154235,13740,"interesting feature, but feel it also is dangerous, could i know more context about this feature and its usage. after acl, i think we would better not leave the plaintext password on redis side, of course, `masterauth` must be plaintext, but this has also been complained about by users, so is it possible that we don't persist internal secret which has super permission? besides, i noticed that you are using `//` comments instead of `/**/` comments. in the redis core, we use `/**/`, the original commenting style of c language.",0,0,0,0.7108281254768372,0.6205209493637085,0.5761250853538513,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2581978574,13740,i haven't reviewed the tests yet,0,0,0,0.90837824344635,0.948948085308075,0.9569239616394044,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2583501460,13740,can you get someone else to review the tests?,0,0,0,0.985728681087494,0.9878270030021667,0.991448700428009,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2589414480,13740,:+1: added a few comments on the tests.,0,0,0,0.9169227480888368,0.931969404220581,0.7761309742927551,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2592076648,13740,"almost there, 2 small comments.",0,0,0,0.9825153350830078,0.9804974794387816,0.9801716804504396,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2592142968,13740,:+1:,0,0,0,0.7570654153823853,0.9166757464408876,0.9328674077987672,0.0,accept,unanimous_agreement,2
redis/redis,reviews,821315135,9872,nice!,1,1,1,0.9834675192832948,0.9912506341934204,0.9901132583618164,1.0,accept,unanimous_agreement,2
redis/redis,reviews,832370537,9872,"/core-team please approve, see top comment for details.",0,0,0,0.9805821776390076,0.9793492555618286,0.9835789799690248,0.0,accept,unanimous_agreement,2
redis/redis,reviews,835797305,9872,"lgtm, not a cr, minor edits.",0,0,0,0.988231599330902,0.96319580078125,0.9678840041160583,0.0,accept,unanimous_agreement,2
redis/redis,reviews,837089773,9872,"approve the idea, didn't cr",0,0,0,0.9200184941291808,0.6746914386749268,0.9831200838088988,0.0,accept,unanimous_agreement,2
redis/redis,reviews,942023339,10536,"i like the idea in general. regarding the form `ip:port,shard,hostname` (which is already a pretty strange format without shard), i have two incompatible suggestions: 1. since every part so far uses a different separator (`:@,`), we could pick yet another separator for shard-id, for example `$` (looks like s for shard). then, we could be able to parse these strings from 7.0 release candidates too (with hostname, without shard), so the format would be `ip:port[$shard][,hostname]`. 2. now might also be a good time to make this format future-proof in some way, so that more fields can be added without breaking old nodes and clients. for example, add an uri query string in the end `?shard=s98s98dus98du&something=foo&bla=bla` where unknown future keys can be safely ignored. wdyt?",1,0,1,0.9472640752792358,0.6267406344413757,0.8244421482086182,1.0,accept,majority_agreement,2
redis/redis,reviews,995630726,10536,the high level all makes sense.,0,0,0,0.9647621512413024,0.9847807884216307,0.9763398170471193,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1012805435,10536,some minor nitpicky comments.,0,-1,-1,0.9548233151435852,0.5621803402900696,0.945320725440979,-1.0,accept,majority_agreement,2
redis/redis,reviews,1027660555,10536,"change lgtm, i think the only remaining question is what we want to do about making the nodes.conf more extensible for the moment.",0,0,0,0.9823645949363708,0.9721121191978456,0.985554814338684,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1097077951,10536,looks good. only minor suggestions. (i didn't read everything carefully.),1,1,1,0.9749131202697754,0.9840787649154664,0.9261913895606996,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1106603958,10536,"lgtm /core-team please review top comment for adding the new user visible `shard id`. note that on its own this change isn't strictly useful, but will be used as a building block for additional features including cluster v2 shard id as well as making sure replicas follow primaries correctly during slot migrations. we'll also be able to support the ""empty"" primary with replicas use case.",0,0,0,0.9804822206497192,0.98955100774765,0.9765973687171936,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1117479060,10536,"lgtm, but i have only one comment (i quickly discussed it with as well). i think `cluster shards` is a client-oriented command (as opposed to an administrative command), and i don't see clients' value in getting a shard-id. it may not do much harm, but i think it's an unnecessary long-term commitment to an implementation detail. this point doesn't apply to `cluster nodes`, which is more admin oriented.",0,0,0,0.8382291197776794,0.9753651022911072,0.9241384267807008,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1172713165,10536,lgtm.,0,0,0,0.9832575917243958,0.968936800956726,0.9637624621391296,0.0,accept,unanimous_agreement,2
redis/redis,reviews,693902468,9127,i'm not certain i understand what happens on upgrade. does the new feature work well after loading an rdb from an old version? p.s. didn't review the tests.,0,0,0,0.8429412245750427,0.7219103574752808,0.6352867484092712,0.0,accept,unanimous_agreement,2
redis/redis,reviews,779460632,9127,"mostly lgtm few minor suggestions and requests for clarification. i'm not an expert for streams, i'd like to take a look too.",0,0,0,0.9335169792175292,0.6312470436096191,0.8085426092147827,0.0,accept,unanimous_agreement,2
redis/redis,reviews,829659047,9127,"lgtm, approving feature and interface - did not do a code review.",0,0,0,0.9711648225784302,0.989161729812622,0.9890708923339844,0.0,accept,unanimous_agreement,2
redis/redis,reviews,886226768,9127,"no other comments. (reviewed the diff from my previous review, only contained renaming and extra comments)",0,0,0,0.9857599139213562,0.9903174638748168,0.994098663330078,0.0,accept,unanimous_agreement,2
redis/redis,reviews,891629381,9127,"looks like the top comment is outdated. at last about the new command arguments, but please verify other aspects.",0,0,0,0.9767085909843444,0.9649843573570251,0.9883533120155334,0.0,accept,unanimous_agreement,2
redis/redis,reviews,860208635,10108,"seems nearly ready to me. iirc other than documentation, most comments are around keyspecs",1,1,0,0.5469594597816467,0.8561034798622131,0.942177951335907,1.0,accept,majority_agreement,2
redis/redis,reviews,872325448,10108,lgtm && !cr,0,0,0,0.8647946119308472,0.9802363514900208,0.5116865634918213,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1201572978,11568,generally looks good. haven't reviewed the tests yet.,1,1,1,0.9088544249534608,0.9452201724052428,0.8826597929000854,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1305377800,11568,what will happen in case of pipelined module command which will attempt to trigger rm_call with blocking command? basically we could have more commands pending in the input buffer but i am not sure we have a way to turn back and process the input buffer (did i miss something?),0,0,0,0.9221752882003784,0.9064338207244872,0.9660002589225768,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1305831370,11568,maybe do a more explicit pipelining,0,0,0,0.9829466342926024,0.9858685731887816,0.982673168182373,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1340569133,11568,"looked over the server code and it was much simpler than expected, which is great! i'll try to take a deeper look over the code, but conceptually approving the pr for later.",1,1,1,0.9840891361236572,0.9936169385910034,0.996492564678192,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1357025836,11963,still strongly against this change. it feels like we're exposing metrics that are easily collectible instead of exposing information that is useful.,-1,0,-1,0.663651168346405,0.8394949436187744,0.9085010290145874,-1.0,accept,majority_agreement,2
redis/redis,reviews,1358045548,11963,"i see few things i listed in the issue are missing, let's add them in the pr later on, after we're happy with the ones you already added.",0,0,0,0.97527414560318,0.9490768909454346,0.9909452199935912,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1378360130,11963,"i want to drop el_duration_type_io_read, el_duration_type_io_write, el_duration_type_cron, and el_duration_type_aof. i don't want to release complicated and half-baked information because we can.",0,0,0,0.9662873148918152,0.7053139805793762,0.8828974962234497,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1396840550,11963,"i went over all the unresolved comments in this doc, resolved that ones that are handled and left the few (minor) unresolved ones.",0,0,0,0.9785587787628174,0.987659990787506,0.9871923923492432,0.0,accept,unanimous_agreement,2
redis/redis,reviews,874554368,9822,"did an additional top to bottom review. please make sure the pr's top comment reflects was was done, and has an updated statement about the benchmarks you did.",0,0,0,0.977015495300293,0.9779160618782043,0.9910168647766112,0.0,accept,unanimous_agreement,2
redis/redis,reviews,888294198,9822,"some random comments (can be ignored), and small indentation fix. i think this one is ready to be merged.",0,0,0,0.978255331516266,0.8209719657897949,0.9701711535453796,0.0,accept,unanimous_agreement,2
redis/redis,reviews,888812761,9822,"lgtm, some typos.",0,0,0,0.9886140823364258,0.5413506031036377,0.725655734539032,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1767568853,12822,"i only lightly skimmed though it. mainly at the code that uses the array (code that remained in db.c, and other c files). i think the idea to move this to a generic data structure is good. i'd like to hear and opinions before going into deep review.",1,1,1,0.8411011695861816,0.6210007667541504,0.8631693720817566,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1829957151,12822,"i must say i really like this pr, it cleans a lot of things that looked really ugly in the previous approach, and become elegant and clean now.",1,1,1,0.7622435688972473,0.9755550026893616,0.9856547713279724,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1840137840,12822,"i feel like the refactoring has grown on me, i didn't like it originally but i kind of like it now.",-1,0,1,0.7854651212692261,0.5790228247642517,0.8348755836486816,,review,no_majority_disagreement,0
redis/redis,reviews,772228425,9564,"my original thought was that the node name could be assigned by an admin, say use the ec2 instance id or some type of container identifier. this isn't all that simpler, as we need to propagate it through the cluster. having an identifier that is composed of the ip + port could work as a simpler version of a user defined hostname. we don't need to persist the ip + port based nodename to the nodes.conf file, since we can derive it dynamically. i still think the admin defined codename is more useful, but i think we could go either way. i also thought it would be useful to print the ""codename"" in the logs wherever we print the 40 character hex identifier, since that can be hard to retroactively identify. this can be implemented regardless of how the codename is implemented.",0,0,0,0.9136292934417723,0.8387510180473328,0.9324009418487548,0.0,accept,unanimous_agreement,2
redis/redis,reviews,817239597,9564,i'll try to stay more ontop of this to see if we can merge this into 7.,0,0,0,0.9817925095558168,0.9741492867469788,0.9775176644325256,0.0,accept,unanimous_agreement,2
redis/redis,reviews,871305619,9564,looks mostly good. main comment i have is just making sure we're clear about the intention. i was thinking of it mostly as a debugging/human readable name that would be exposed in places like info and logging.,1,1,1,0.9450235366821288,0.7546231150627136,0.8993189334869385,1.0,accept,unanimous_agreement,2
redis/redis,reviews,938658628,9564,"lgtm now, only thing missing now is tests.",0,0,0,0.9857154488563538,0.9848511815071106,0.9861878156661988,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1335907629,9564,"i think this got reverted to the original design you had proposed, which was more focused on an alternative version of nodename as an alternative to hostnames. was that intended?",0,0,0,0.9870738983154296,0.9506120681762696,0.9825798273086548,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1375176252,9564,"looks pretty good, some minor comments.",1,1,1,0.8650336265563965,0.959195077419281,0.8591504693031311,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1386146698,9564,can you check the comment about the human nodename enum?,0,0,0,0.9893906712532043,0.99349182844162,0.995113968849182,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1386726155,9564,"comments just to be sure i understand it correctly. i.e. it's just a label of free text, right? and is only displayed in errors and the (admin oriented) cluster nodes command..",0,0,0,0.9836320877075196,0.9788475632667542,0.9716535806655884,0.0,accept,unanimous_agreement,2
redis/redis,reviews,959189076,10515,"i think this approach of first tagging the arguments that are matched and then generating the hint for the reminder of the line based on these booleans is too limited. for instance, if the last match is a token which should be followed by a mandatory argument, we're unable (and won't be able) to handle it properly. for instance typing `set key value ex` should have hinted either only ` `. or adding `[nx | xx] [get]`, but currently it hints the `seconds` last and suggests you add nx after ex. i'd argue that this is worse than the previous one which was easy to see that got broken and stopped responding) here are a few examples i didn't like: ![a link] ![a link] ![a link] other lower priority thoughts that can be considered later: * what exactly do we do now for older servers (i didn't bother to check yet). * do we wanna re-generate help.h so that we can do fancy things even with older servers?",0,0,0,0.9152255654335022,0.7409327030181885,0.819776713848114,0.0,accept,unanimous_agreement,2
redis/redis,reviews,983175688,10515,few random comments (didn't review everything),0,0,0,0.6901485323905945,0.76617032289505,0.8832834362983704,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1003567320,10515,"thank you. didn't review the code yet, but the testing it shows that everything is handled nicely. the one thing i noticed and not sure about is that when redis-cli works with an old server, we still have the old matching logic. i suppose that in order to improve that, we'll have to bundle something other than the plain old help.h. not sure we wanna proceed in that direction.",1,1,1,0.6632199883460999,0.9480680823326112,0.9844676852226256,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1332888149,10515,"i did a superficial review of the redis-cli part. it's a lot of code, but in general the hints helper code is relatively isolated so it doesn't really hurt complexity of the rest of the cli code. since it's relatively isolated, i don't think we need to be too picky with the review of this code, as long as it works and the is well-tested. but maybe it can be moved to its own .c file? i'm concerned about including commands.c in redis-cli.c and the macros for modifying the internals of commands.c here, it's not nicely structured. i have an idea, see comment.",-1,0,0,0.8721576929092407,0.8628605008125305,0.7369285225868225,0.0,accept,majority_agreement,2
redis/redis,reviews,1074248900,10966,not a full review.. just a quick look and questions / suggestion for alternatives.,0,0,0,0.8567880392074585,0.934912383556366,0.8862099051475525,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1088168842,10966,p.s. haven't reviewed the tcl test code in detail.,0,0,0,0.9553821682929992,0.9848942160606384,0.984941065311432,0.0,accept,unanimous_agreement,2
redis/redis,reviews,446847542,6929,"thank you for this pr. i've added a few minor comments about the code. some suggestions about improving some tests, and trimming others.",1,1,1,0.95431387424469,0.9852775931358336,0.9683599472045898,1.0,accept,unanimous_agreement,2
redis/redis,reviews,452901904,6929,there is also two comments in blocked.c that explicitly refers to brpoplpush that maybe should be renamed bxpopxpush,0,0,0,0.98630952835083,0.9946590065956116,0.9929732084274292,0.0,accept,unanimous_agreement,2
redis/redis,reviews,501594406,6929,"hi. thanks for coding it. i added some comments, but for the main one (how to propagate existing [b]rpoplpush i'm not sure yet. regarding your questions: - i see no problem adding fields to blockingstate struct - the reason to add command function to the server struct is if we want to refer to them somewhere, by comparing a function pointer, rather than doing string compare on argv[0]. so that's not needed in this case. - what you did with ""left"" and ""right"" string creation is ok (no leaks), the reason to create static objects is for efficiency. for instance instead of creating and destroying an ""ok"" string many times, we're re-using a static one. i think it makes sense to do that for ""left"" and ""right"" too. - what you did with `rewriteclientcommandvector` obviously works, but personally i rather avoid it (may break some day). the other usages of `rewriteclientcommandvector` are currently all for propagation, and not for the initial command execution. - i think we should keep the rpoplpush tests (most are quick and will be able to cover some compatibility issue). i suppose the new tests you added a covering the code well enough too (with the exception of using the old command ""alias""). bottom line, i think what you did with the tests is enough.",1,1,1,0.9224836826324464,0.8934808969497681,0.9861191511154176,1.0,accept,unanimous_agreement,2
redis/redis,reviews,502687028,6929,all looks good. the only thing that may be missing is maybe add a test to cover the propagation of brpoplpush and blmove to aof or replicas. i see replication.tcl has these two tests: [code block] i guess these can be improved to look at the command stats to check which command was executed on the replica. and add similar tests for blmove. maybe move `proc cmdstat` from integration/introspection-2.tcl to support/util.tcl and use it in replication.tcl,1,0,1,0.9147109389305116,0.7558198571205139,0.7245995402336121,1.0,accept,majority_agreement,2
redis/redis,reviews,503565218,6929,hope my changes actually work (not a tcl expert either),1,0,1,0.5149796009063721,0.5533838868141174,0.8976514935493469,1.0,accept,majority_agreement,2
redis/redis,reviews,646666714,8687,conceptual approval (just asked for some minor cleanup),0,0,0,0.9874978065490724,0.9777926206588744,0.9824513792991638,0.0,accept,unanimous_agreement,2
redis/redis,reviews,734089996,8687,"the top comment needs an update. the current discussion in it can remain below some separator, but i'd like to add a better description at the top that explain what the pr eventually does. i.e. purpose, design, and most importantly interface changes and any unrelated changes. the ones i listed during my review are these: - new config - explain the refactor of client_pending_read and io_threads_op (why and how) - c->pending_read_list_node - evicted_clients stat in info - new multi-mem in client list and client info, and also other existing client memory fields (previously untracked) - pubsub_patterns and pubsub_channels and parts of client_tracking_prefixes memory tracked in the above - client no-evict sub-command - client_close_asap handled in beforenextclient rather than beforesleep - anything else i missed?",0,0,0,0.932215452194214,0.9867602586746216,0.967482566833496,0.0,accept,unanimous_agreement,2
redis/redis,reviews,752100063,8687,"/core-team please approve, see detailed description at the top. new client sub-command fyi.",0,0,0,0.983803689479828,0.9771375060081482,0.9766245484352112,0.0,accept,unanimous_agreement,2
redis/redis,reviews,758157039,8687,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,761060268,8687,"lgtm api and behavior wise, i looked quickly at the code but didn't trace every line.",0,0,0,0.978438138961792,0.9672816395759584,0.9855977892875672,0.0,accept,unanimous_agreement,2
redis/redis,reviews,359346307,6891,"i like the enhancement, but i'm not sure about the implementation style. also, there are some edge cases, for example, `info default all` will return ""all"".",0,0,1,0.5729116797447205,0.7672668695449829,0.8536316752433777,0.0,accept,majority_agreement,2
redis/redis,reviews,779324193,6891,"i always wanted to do that, so i do support the cause, but i don't like the implementation. it's nice that the implementation attempts to make a small diff by repeatedly calling genredisinfostring rather than modifying all the section checks in that function, but i think we have to go that way anyway since the current approach is limited. another thing to consider is backwards compatibility, in the sense of what would happen if someone tries to call `info memory replication` on an older version of redis. calling it with multiple arguments (or a single argument with spaces in it) will fail, so for many tools that manage redis servers and can't be sure which version they're talking to, using this feature is not an option.",-1,-1,0,0.8140692114830017,0.4203415215015411,0.651021420955658,-1.0,accept,majority_agreement,2
redis/redis,reviews,806005453,6891,"sorry about the delay. i must say i don't like this approach. the default sections are now defined in two places (both inside genredisinfostring and in the list in infocommand). normally, it has two loops on all the arguments (in infocommand), and then another loop on the dict it generates. and it calls genredisinfostring multiple times, each call ends up doing many string compares. what's nice about your approach is that you managed to do it without a single change to genredisinfostring, but i don't think that's a real concern. what i imagine should be done instead, is pass the dict to genredisinfostring (calling it only once), and change all the section checks in genredisinfostring to use dictfind. similar logic needs to be implemented in rm_infoaddsection (i already designed the api with that feature of multiple sections in mind). i think the two loops on `argc` can be unified into one, which will result in a dict and two boolean flags (`all` and `everything`, which will be passed to genredisinfostring as argument along side the dict). the list of `default` sections will be present only once in the source code (in infocommand), and will be added to the dict in case no arguments are provided, or the term ""default"" was specified. let me know what you think. p.s. your current approach won't play nice with modules, since rm_infoaddsection can include a certain section both by module name filter and section name filter (so there's a change the same section will appear twice if it is present in the dict twice)",-1,-1,-1,0.9892482161521912,0.9928001165390016,0.9879855513572692,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,829869899,6891,"are you still working on this pr? it seems you where either unable to follow my advises or run into some problems that i didn't expect and can't figure out. do you wanna proceed or want me to try pick it up on my own? after investing the effort so far, i think we should carry it though.",0,0,-1,0.9339718222618104,0.8709895014762878,0.5310269594192505,0.0,accept,majority_agreement,2
redis/redis,reviews,840094004,6891,"i took a quick look. i didn't review the diff from last time (too much back and forth) but rather re-read the diff of the current version vs unstable. it's a little bit closer to what i suggested, but there are a few bugs, styling issues, and most importantly the handling of sentinel default sections and requested sections sanitization isn't what we agreed. i assume all the old comments can be dismissed now (please go over them and dismiss them unless you notice some observation that was forgotten) p.s. i suppose some tests are needed for both the happy path, and some edge cases.",0,1,1,0.8584475517272949,0.5471718311309814,0.5469481945037842,1.0,accept,majority_agreement,2
redis/redis,reviews,847260792,6891,p.s. you're obviously missing some tests 8-),1,1,1,0.7606965899467468,0.9596902132034302,0.9666092395782472,1.0,accept,unanimous_agreement,2
redis/redis,reviews,849749888,6891,looks better to me.. the sentinel separation comments are not applied yet.,1,0,0,0.639240562915802,0.8857356309890747,0.9761461019515992,0.0,accept,majority_agreement,2
redis/redis,reviews,873946699,6891,"lgtm, one potential optimization to consider.",0,0,0,0.9818528294563292,0.9849929809570312,0.9885146021842957,0.0,accept,unanimous_agreement,2
redis/redis,reviews,874037484,6891,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,875265481,6891,"approve of the api, just some minor comments.",0,0,0,0.9833353757858276,0.9378299713134766,0.9902344942092896,0.0,accept,unanimous_agreement,2
redis/redis,reviews,570049479,8242,thank you few small comments and then we can merge this.,1,1,1,0.6524515151977539,0.9586840271949768,0.7074262499809265,1.0,accept,unanimous_agreement,2
redis/redis,reviews,571474886,8242,looks good to me,1,1,1,0.9669890999794006,0.9499172568321228,0.9083709716796876,1.0,accept,unanimous_agreement,2
redis/redis,reviews,771411927,9601,nice!,1,1,1,0.9834675192832948,0.9912506341934204,0.9901132583618164,1.0,accept,unanimous_agreement,2
redis/redis,reviews,772584515,9601,"thank you for that pr. this is very useful. please don't take my comments personally, i guess i'm emotional about the subject. the 3 main topics we need to discuss to continue are: 1. if there were actual bugs this uncovered. 2. if the changes could impact performance (even on non-modern, realistic system) 3. just discuss compilers and interesting edge cases for the fun of it.",1,1,1,0.9773754477500916,0.9945057034492492,0.9894492626190186,1.0,accept,unanimous_agreement,2
redis/redis,reviews,787524026,9601,"i've reviewed the new (smaller) diff from unstable, and also the changes in the last commit, they're mostly lgtm. one last concern is if we conclude any of the fixes here really fixes a bug, we may want to backport it to older releases, there was a small insignificant leak in the cli that i don't think we care for. and some issue in sentinel for which i'm waiting for an analysis. other than that i think all the changes will not have any actual impact on redis. i would be happy if you can go over them and add notes to the top comment dividing them to groups according to type and impact.",1,1,1,0.6697450280189514,0.8873434662818909,0.8101970553398132,1.0,accept,unanimous_agreement,2
redis/redis,reviews,2034805724,13209,impressive job.,1,-1,-1,0.8927671313285828,0.988220989704132,0.8031502366065979,-1.0,accept,majority_agreement,2
redis/redis,reviews,1473723398,12209,thanks. mostly lgtm>,1,1,1,0.8449721336364746,0.9880799651145936,0.9794328212738036,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1485184025,12209,"mostly lgtm, few requests for clarifications.",0,0,0,0.971861720085144,0.9837740659713744,0.986908197402954,0.0,accept,unanimous_agreement,2
redis/redis,reviews,829637826,9890,"with all these changes, i'm not sure the new mess is better than the old one. maybe it's just because the old code left many edge cases unhanded, and now we have explicit code to handle them. maybe it's because the old code was over simplistic, so it looked simple but it was an illusion... not saying we shouldn't proceed, just stating an observation.",-1,-1,-1,0.8384330868721008,0.5285483598709106,0.7728638052940369,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,837068882,9890,agree it's not technically a breaking change.,0,0,0,0.9457651972770692,0.9128704071044922,0.9611481428146362,0.0,accept,unanimous_agreement,2
redis/redis,reviews,885040050,10293,"i haven't looked at the details yet, will do shortly, but i want to point out a potential ambiguity using the term ""shard"". it has not been used by redis cluster until now, and in other contexts it has been used as either a synonym to ""cluster node"", or (as used in this pr), to describe a master and set of replicas sharing the same slots. to avoid confusion, i think we should avoid that using it here.",0,0,0,0.9699862599372864,0.9874996542930604,0.9803254008293152,0.0,accept,unanimous_agreement,2
redis/redis,reviews,894793976,10293,top comment lgtm. didn't review the code.,0,0,0,0.8245441317558289,0.8174028396606445,0.9910257458686828,0.0,accept,unanimous_agreement,2
redis/redis,reviews,894823393,10293,lgtm. minor unimportant suggestions only.,0,0,0,0.9442082047462464,0.9796717762947084,0.94583398103714,0.0,accept,unanimous_agreement,2
redis/redis,reviews,894838953,10293,"lgtm, thanks for the help.",1,1,1,0.8919949531555176,0.7600557208061218,0.9280906915664672,1.0,accept,unanimous_agreement,2
redis/redis,reviews,909808790,10293,approved in a core-team meeting. please merge away (and make sure the docs are updated too),0,0,0,0.9756656289100648,0.9649749398231506,0.9932403564453124,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2062142154,13243,we can ignore the failure in the fully ci. it's a known optinization.,0,0,0,0.9869356751441956,0.9925485253334044,0.987787425518036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,766488201,9530,"i had a quick look at the code (don't consider it a full review yet) and have a couple of small comments. some other thoughts/questions: * you mention this is semi-breaking change, but iiuc if one enables hostnames and delivers extensions to old nodes they'll just be ignored resulting with inconsistent behavior but no other breakage - right? * i think there's something a bit confusing about the way extensions are implemented. on one hand it's a generic mechanism with a packet-level flag and extensions count. on the other hand, extensions specifically extend the gossip section. maybe we should consider going all the way to a more generic extensions mechanism? * the argument for extensions vs. new commands is atomicity of updates, but iiuc that's not the case when a node joins - it will initially receive information about other nodes without hostnames, and only later have hostnames propagated to it directly from other nodes.",0,0,0,0.6970703601837158,0.6523488759994507,0.739729642868042,0.0,accept,unanimous_agreement,2
redis/redis,reviews,773430283,9530,"some thoughts that came to me, i'll fix them when i'm back and have access to my laptop.",0,0,0,0.9560298919677734,0.9227866530418396,0.9489303827285768,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1567279745,12453,"i loosely skimmed over it, gave a few comments.",0,0,0,0.9596582651138306,0.950653910636902,0.9143794178962708,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1604099419,12453,"is the pr still a ""draft"" or can be marked as ready? did you run it against a full daily ci (all platforms)? please make sure the top comment is up to date (justification, design). please make sure to mention other changes we did (like sigalrm, etc). please add an example of how a crash log looks.",0,0,0,0.9847220778465272,0.992738664150238,0.9816858768463136,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1610340196,12453,"final set of some minor suggestions, and we're ready for merge.",0,0,0,0.9812678694725036,0.8137971758842468,0.972483217716217,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1613257691,12453,thanks. please also update the example in the top comment.,1,1,1,0.8163126111030579,0.8593351244926453,0.7348417639732361,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1641034675,12453,"following 's request to review this post merging, i added a few comments highlighting potential calls that are unsafe in a signal handler context. i think we need to be extra careful here because we can easily end up with problems that will only show up rarely and in the worst possible timing.",0,0,0,0.901280403137207,0.9612857103347778,0.9382842183113098,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1139309462,11290,"thank you for taking the time. here's my initial review (didn't look at the tests yet). there are a bunch of minor comments here, but also some critical ones about the efficiency (specifically of random picks in listpack, and about popping them out). p.s. eventually, this pr top comment should include some benchmark that mentions both memory savings and also throughput / latency costs.",1,1,1,0.9338497519493104,0.92488694190979,0.9802340865135192,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1168474873,11290,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1169381053,11290,"lgtm, two questions: 1. are all the new code paths covered by the test suite? 2. maybe run some simple benchmarks to see that this is actually beneficial, and we're not missing something that causes this commit to become a degradation?",0,0,0,0.9713413715362548,0.9877727627754213,0.9784563779830932,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1170575517,11290,reviewed the tests as well. lgtm.,0,0,0,0.9834643602371216,0.7420955896377563,0.9927738904953004,0.0,accept,unanimous_agreement,2
redis/redis,reviews,837305411,9938,api is ok imo,0,1,1,0.9831709265708924,0.7103949785232544,0.8119727969169617,1.0,accept,majority_agreement,2
redis/redis,reviews,838495771,9938,lgtm.. ptal,0,0,0,0.9842205047607422,0.5597473382949829,0.7950026988983154,0.0,accept,unanimous_agreement,2
redis/redis,reviews,839003949,9938,"the new cluster test lgtm, also approving the two new api designs. left some other minor comments.",0,0,0,0.9867860674858092,0.9750799536705016,0.985879123210907,0.0,accept,unanimous_agreement,2
redis/redis,reviews,839800012,9938,"just one question, does it satisfy atomicity? the abort means rollback or just abort?",0,0,0,0.9827874898910522,0.988911509513855,0.9868191480636596,0.0,accept,unanimous_agreement,2
redis/redis,reviews,561722918,8288,nice!,1,1,1,0.9834675192832948,0.9912506341934204,0.9901132583618164,1.0,accept,unanimous_agreement,2
redis/redis,reviews,561922459,8288,i did a quick review of the code (haven't reviewed the test yet). i added some minor comments. let's discuss the rest of the api and plans for the near future before we dive into the implementation details.,0,0,0,0.9755644798278807,0.9295529127120972,0.9419685006141664,0.0,accept,unanimous_agreement,2
redis/redis,reviews,570067737,8288,"other than add, trim and iterator, do we need to expose any other apis for streams? i suppose the iterator can also be useful for single ""get"", but maybe we wanna expose a specific easy to use api for that? what about deletion? if we put aside consumer groups, i suppose with the addition of an explicit ""read"" (if we chose to add it), and a ""del"" we got streams covered, right?",0,0,0,0.9844452738761902,0.99286687374115,0.990659236907959,0.0,accept,unanimous_agreement,2
redis/redis,reviews,573698471,8288,i really don't like all the change to zset.. but i guess there's no other way. 8-(,-1,-1,-1,0.9907087087631226,0.9922968745231628,0.9966248273849488,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,1717537097,12658,thank you. i skimmed though it. hope my comments are not way off,1,1,1,0.9718404412269592,0.990221619606018,0.9777106642723083,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1740491990,12658,please update the top comment,0,0,0,0.9860928654670716,0.9830070734024048,0.9949861764907836,0.0,accept,unanimous_agreement,2
redis/redis,reviews,823355179,9812,mostly lgtm. -steinberg please take a look,0,1,0,0.8855264782905579,0.6330549716949463,0.986167848110199,0.0,accept,majority_agreement,2
redis/redis,reviews,823356662,9812,"ohh, i now realized that for some reason i only looked at the second commit. edited my comment.",0,0,0,0.8441908359527588,0.9053505659103394,0.9116597771644592,0.0,accept,unanimous_agreement,2
redis/redis,reviews,826494927,9812,"reviewed the recent changes, mostly lgtm. i've asked yoav to help going over the list of tests you provided.",0,0,0,0.973053514957428,0.9282553195953368,0.9876068234443665,0.0,accept,unanimous_agreement,2
redis/redis,reviews,829624925,9812,"i see the todo section still missing the work on rdb.c. -steinberg can you please take a look at the tests mentioned in [a link] i don't mind keeping a few extra ones, but let's make sure to at least delete the ones that are obviously useless now.",0,0,0,0.9710963368415833,0.9510666131973268,0.972826361656189,0.0,accept,unanimous_agreement,2
redis/redis,reviews,831393857,9812,"and ""multi propagation of script load"" i made some tiny changes on this case, instead of removing it. yes, i think that was the intention of that test. i.e. these few commands are handled a bit differently when replicated, so we wanna try running them inside an eval, and then watch the replication stream (e.g. with `attach_to_replication_stream` and `assert_replication_stream`) to make sure they were propagated correctly.",0,0,0,0.98637855052948,0.987345278263092,0.9918557405471802,0.0,accept,unanimous_agreement,2
redis/redis,reviews,835800153,9812,removal of script replication gladly approved (not a cr),0,1,0,0.981554925441742,0.8932439684867859,0.8684892058372498,0.0,accept,majority_agreement,2
redis/redis,reviews,836536567,9812,"list of changes in top comment lgtm, did not do a complete code review.",0,0,0,0.9540978074073792,0.9860731363296508,0.9864381551742554,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1892026839,12826,"i did some cleanup on last commit (hope you don't mind), mainly bool (we don't use bool in the codebase) and format. then i also tried playing it, the feature look good, just a brief review",1,1,1,0.6929382085800171,0.9165046215057372,0.9811617136001588,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1927281638,12826,"i think this is fine now. it's a lot of lines added and i didn't read all of them very carefully, but the code is isolated and doesn't affect the basic operation of redis-cli, so i think it's safe to merge. -binbin any comments? have you tested it?",0,0,1,0.8767969012260437,0.6303683519363403,0.6632978320121765,0.0,accept,majority_agreement,2
redis/redis,reviews,1930077561,12826,"i don’t have a very in-depth review, but looking at the output and the modified diff, the code is lgtm. yes, i think we can drop the check, it adds some code (which is good in generally) but is a bit overkill i think.",0,0,0,0.9159992933273317,0.7144376635551453,0.903261423110962,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1995746803,12826,overall looks good.,1,1,1,0.7877699732780457,0.9369410872459412,0.909617006778717,1.0,accept,unanimous_agreement,2
redis/redis,reviews,2078816777,12826,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,719214476,8974,interface change approved - haven't cred.,0,0,0,0.965368926525116,0.9848843812942504,0.9874151349067688,0.0,accept,unanimous_agreement,2
redis/redis,reviews,719819084,8974,"lgtm, added a few minor issues and some typo fixes. do we want an option to disable this? with the latest optimization it's harder to see where it may introduce a regression but that's still possible (e.g. systems where madvise is particularly slow, etc.).",0,0,0,0.9828287959098816,0.9894412755966188,0.986072301864624,0.0,accept,unanimous_agreement,2
redis/redis,reviews,720662781,8974,"i don't see the harm in it, although i doubt it will be very impactful by the vast majority of workloads except for large strings.",0,0,0,0.9000518321990967,0.7570922374725342,0.898840606212616,0.0,accept,unanimous_agreement,2
redis/redis,reviews,808233819,9780,"lgtm, but did not do a full code review of the latest version.",0,0,0,0.9859448671340942,0.9881443977355956,0.9845865964889526,0.0,accept,unanimous_agreement,2
redis/redis,reviews,812329251,9780,"approving the feature and api, did not do a code review.",0,0,0,0.9482979774475098,0.9808990955352784,0.9873374104499816,0.0,accept,unanimous_agreement,2
redis/redis,reviews,813253051,9780,"(sorry for random comments scattered, i was just making notes on stuff i saw. i mostly was trying to understand the interface. it looked good, so i trust the functionality is implemented as expected) i want to better understand why we think the right approach here is storing functions in the rdb as opposed to storing them in the conf file or a separate file. i view functions more analogous to acls than keyspace data, that they are properties of the cluster and not necessarily specific to the rdb data. this is basically completely broken for workloads without persistence, like caching, which seems relevant. i would expect having a well defined mechanism outside of the rdb to exist. also are we fixing this? [a link] for functions?",-1,-1,1,0.9704697132110596,0.9901770949363708,0.5232515335083008,-1.0,accept,majority_agreement,2
redis/redis,reviews,819049524,9780,recent changes lgtm. (other than pending discussion about function info vs function list),0,0,0,0.9860333800315856,0.975890576839447,0.9919217824935912,0.0,accept,unanimous_agreement,2
redis/redis,reviews,821910982,9780,"talked with over slack, and it seems like we're definitely going to make sure there is another strategy for making functions loadable at startup/cluster mode. so we can follow up on that issue.",0,0,0,0.929220736026764,0.975074291229248,0.9557560682296752,0.0,accept,unanimous_agreement,2
redis/redis,reviews,746635329,9309,"please take a look at the module api. let me know if you think the acl log should contain the module name or other context rather than just the word ""module"" same as we have ""toplevel"", ""multi"", and ""lua""",0,0,0,0.9838433861732484,0.9879606366157532,0.9927105903625488,0.0,accept,unanimous_agreement,2
redis/redis,reviews,752153457,9309,"lgtm (after handling all open comments above). there is an issue with `redismodule_aclcheckkeypermissions`, which is going to be incompatible with the other acl enhancements we plan. in the future, acl selectors will specify ""commands on keys "" so checking key permissions without specifying a command is undefined. i think we can either add a command name argument or defer the decision and just avoid this function for now. including an api function that is going to become obsolete (hopefully) before redis 7 doesn't seem reasonable.",0,0,0,0.9737154245376588,0.9815436601638794,0.9455474019050598,0.0,accept,unanimous_agreement,2
redis/redis,reviews,758149231,9309,changes lgtm,0,0,0,0.985706627368927,0.9819820523262024,0.9898213148117064,0.0,accept,unanimous_agreement,2
redis/redis,reviews,761106448,9309,"looked through the rest of the changes, lgtm",0,0,0,0.9844036102294922,0.9871747493743896,0.9895141124725342,0.0,accept,unanimous_agreement,2
redis/redis,reviews,831452485,9940,lgtm. ptal,0,0,0,0.9834824800491332,0.9166216850280762,0.9372140169143676,0.0,accept,unanimous_agreement,2
redis/redis,reviews,832690652,9940,"lgtm, i agree with we should probably use a common function to make sure we properly reset client state (even if it's not a problem now, it can become a problem in the future).",0,0,0,0.9827557802200316,0.9768357276916504,0.9813261032104492,0.0,accept,unanimous_agreement,2
redis/redis,reviews,839062507,9940,"lgtm, i think this is a good optimization but one that could have potential hidden impact - any thoughts about it?",1,0,1,0.5596342086791992,0.8536805510520935,0.9603654742240906,1.0,accept,majority_agreement,2
redis/redis,reviews,840102097,9940,"lgtm :+1: , small comments.",0,0,1,0.957241415977478,0.9575502276420592,0.916975438594818,0.0,accept,majority_agreement,2
redis/redis,reviews,845452646,9940,"lgtm (didn't re-review the code in with much care though). posted some minor suggestions for cleanups / comments. i haven't been following this pr and the recent progress. so i see now we have no cap of the maximum number of items in the cache (was some 1k or so). instead, we have a cap for the minimum (32). i suppose that not having a max limit is fine, since it doesn't really matter if we release them immediately, or shortly after. but maybe the cron mechanism should be slightly smarter. i.e. in case there's a burst of 1000 clients, and no use later. it'll take it 10 seconds to delete them, right? and in case there's no more use of these at all, we're still left with the 32 forever. maybe there could be some much smarter but yet simple algorithm instead? one that watches the max re-used since the last cron (lowest value of `moduletempclientcount`, and does some logarithmic release? if we do that, we might not mind removing the lower cap of 32 too? i.e. if we release just one per second, we don't care that after 32 seconds we're left with 0 (when we know they're completely unused). i didn't try to think of such algorithm, but i imagine it could be a very simple formula.",0,0,0,0.9439497590065002,0.9566935896873474,0.8996995687484741,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1217569014,11248,"sorry for the delay, meant to review that long ago, but been too busy. i'm not certain i understand your last post. did you mean that this has no value in newer kernels? or just that it doesn't fully solve the problem on old ones?",-1,-1,-1,0.9880425930023192,0.990645170211792,0.991936206817627,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,1264762227,11248,"please approve the use of an additional system call, the detection change in the makefile, and the logging on errors.",0,0,0,0.9860705733299256,0.9887939095497132,0.9929116368293762,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1266812489,11248,"lgtm, only a minor comment about detecting `posix_fadvise()`. we should also consider adding at least some basic smoke tests to validate this mechanism.",0,0,0,0.9884963035583496,0.9908289909362792,0.9886383414268494,0.0,accept,unanimous_agreement,2
redis/redis,reviews,586031483,8474,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement,2
redis/redis,reviews,596937614,8474,"update lgtm, still waiting on the major change decision.",0,0,0,0.9849470853805542,0.9862646460533142,0.9835505485534668,0.0,accept,unanimous_agreement,2
redis/redis,reviews,616992007,8474,"/core-team please approve. this pr changes the propagation of expire times to replicas to always contains absolute times. additionally, it adds two new commands expiretime and pexpiretime (to get absolute expire time of a key). besides that, i suppose this is all belongs to redis 7.0 (both the new commands and the refactory), i think we should merge it to unstable only once unstable moves away from 6.2. otherwise, cherry picks to 6.2 will be harder and more dangerous.",0,0,0,0.9438658952713012,0.982181966304779,0.9579035043716432,0.0,accept,unanimous_agreement,2
redis/redis,reviews,618164727,8474,lgtm agree about waiting to merge.,0,0,0,0.984092116355896,0.9722550511360168,0.9780345559120178,0.0,accept,unanimous_agreement,2
redis/redis,reviews,556171522,8217,"thanks for this pr. i added a few comments about the implementation, but maybe we should first discuss the key features here. as we've established, there are generally two groups of errors, ones that are handled in processcommand and ones that happen inside the command code itself. do we intend to cover only the first group? or also the second? if we intend to extend this feature to match other types of errors, it's probably wrong to do an if-else chain of calls to `strncmp`, and then a lookup in a dict (or an enum lookup into an array). maybe we should have a rax in which we can search by prefix, and implicitly support all type of errors. i think it would be nice to examine this feature after adding a few more errors as an example (like oom, wrongtype, noscript, loading, busy, busykey. one thing we'll soon discover is that many of these are being used with a simple addreply (so we don't even have them on our radar).",1,1,1,0.9037567973136902,0.8992428779602051,0.9602158665657043,1.0,accept,unanimous_agreement,2
redis/redis,reviews,559356184,8217,"my approval is for the new api syntax, i would still like to fix some of the minor comments.",0,0,0,0.9595597982406616,0.5983911156654358,0.9717952013015748,0.0,accept,unanimous_agreement,2
redis/redis,reviews,560099117,8217,"i'm not a great fan of the current approach of using arbitrary textual errors everywhere, and would be much happier if we had all possible error codes enumerated and mapped to error codes in one place (perhaps with the exception of modules). in that case we could also avoid the text manipulation and rax which could end up be a bit more efficient. that said, i doubt that performance is really an issue here ( you can probably verify that in a breeze). everything else is a matter of personal taste and i don't feel that strongly about it - so +1.",-1,1,1,0.7600913643836975,0.958034336566925,0.825895369052887,1.0,accept,majority_agreement,2
redis/redis,reviews,858732031,10061,"there's quite a lot of refactoring here, which is good since the old code was out of shape. maybe though some of this refactoring could have been left aside for another chance (like the `process` function which i'm not sure why you had to refactor). additionally, if we already do so much work here, let's try to further improve. specifically i feel some doc comments are still missing.",0,0,0,0.8513920903205872,0.9264066219329834,0.6901283264160156,0.0,accept,unanimous_agreement,2
redis/redis,reviews,884815178,10061,lgtm.,0,0,0,0.9832575917243958,0.968936800956726,0.9637624621391296,0.0,accept,unanimous_agreement,2
redis/redis,reviews,860286577,10127,"lgtm (based on top comment, did not cr).",0,0,0,0.9860273599624634,0.9898656010627748,0.987928569316864,0.0,accept,unanimous_agreement,2
redis/redis,reviews,727659338,9356,implementation looks solid!,1,1,1,0.9276298880577089,0.9580285549163818,0.8807719945907593,1.0,accept,unanimous_agreement,2
redis/redis,reviews,729249109,9356,does this help make it more concrete what the value of the metadata is?,0,0,0,0.98262757062912,0.991412878036499,0.9932737350463868,0.0,accept,unanimous_agreement,2
redis/redis,reviews,729502432,9356,"lgtm, few minor suggestions for improvement.",0,0,0,0.9761021137237548,0.8501781821250916,0.9559457898139954,0.0,accept,unanimous_agreement,2
redis/redis,reviews,737417332,9356,"have only quickly looked at the code, but lgtm.",0,0,0,0.9844614863395692,0.8104562759399414,0.993385374546051,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1091527885,11193,"regardless of the implementation details, i think we need to address these topics: 1. is a configuration at all needed, i don't think so. 2. maybe flushall / flushdb commands can implicitly use lazy free now (blocking the caller till done), even if async wasn't provided. 3. what happens with lazy-free-eviction? i think the hole concept of lazy-free in eviction is a huge bug, i'm not sure if we want to fix it, but we should access the impact of this change on it, and if it's negative, maybe we can prevent it from being active in that case.",-1,0,0,0.7196739315986633,0.8585172295570374,0.8544176816940308,0.0,accept,majority_agreement,2
redis/redis,reviews,1172221232,11193,/core-team please have a look at the top comment and tell me if you have any thoughts or concerns.,0,0,0,0.958396315574646,0.9738343358039856,0.9469246864318848,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1189748180,11193,"i'm not sure i'm a fan of the last commit. i was aiming for just separating the `if` that decides which action to take, from the `if` that does the time tracking start/stop (like we do elsewhere). what you did was to improve the blocking infra to support time tracking for all blocking, but the cost is that: 1. currently it's inaccurate 2. it's a bit odd to see other similar metrics (for defrag and oom) work completely different.",-1,-1,-1,0.9668486714363098,0.955033004283905,0.8958958387374878,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,848632292,9963,love the api idea.,1,1,1,0.9641735553741456,0.9023517966270448,0.9923720359802246,1.0,accept,unanimous_agreement,2
redis/redis,reviews,856023166,9963,!cr,1,-1,1,0.4981237351894378,0.600967526435852,0.9771073460578918,1.0,accept,majority_agreement,2
redis/redis,reviews,856176639,9963,"i don't think we need a new blocked_yield, this should work as expected.",0,0,0,0.9835878610610962,0.9706257581710817,0.9749944806098938,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1795881301,12817,do we wanna run the threads sanitizer in ci (to prevent regressions in this area)?,0,0,0,0.9885520935058594,0.9945486187934875,0.9925230145454408,0.0,accept,unanimous_agreement,2
redis/redis,reviews,812407717,9748,"changed approved, code unreviewed.",0,0,0,0.9734982252120972,0.9873282313346864,0.9937478303909302,0.0,accept,unanimous_agreement,2
redis/redis,reviews,840110287,10004,"one concern i have about naming, is the use of the term ""library"" without a context. in the past i argued the same about ""engine"". the term ""function"" is a lost cause (in the context of redis, a ""function"" is a ""script function"". but maybe ""library"" should be called ""functions library"" (or ""functionslib"")? same as we called ""engine"" a ""script engine""",0,0,0,0.9524192810058594,0.9772014617919922,0.7740147113800049,0.0,accept,unanimous_agreement,2
redis/redis,reviews,841839268,10004,"lgtm, with one issue. perhaps we should completely eliminate `redis` from the namespace when handling the load run? i think it might help prevent some confusion if we just expose a single function creation function.",0,0,0,0.9857381582260132,0.9889183640480042,0.9756891131401062,0.0,accept,unanimous_agreement,2
redis/redis,reviews,842405843,10004,"haven't cred, concept approved",0,0,0,0.9783851504325868,0.9338369965553284,0.9803693890571594,0.0,accept,unanimous_agreement,2
redis/redis,reviews,843112239,10004,i reviewed the top level comment and read some of the code. i agree with all the decisions made.,0,0,0,0.9000965356826782,0.7782810926437378,0.6256158947944641,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1091701588,11199,"commenting on the todo comment on the top i'm in favor of this approach i'd like that, but it'll be a breaking change, so i think we should skip it. i don't think we should bother. i personally think that we should allow string dmc reads (useful for huge string), but we should error (rather than corrupt memory), in case the string is not sds encoded, and document that in this case the module should resort to a non dma read. i think it's right, until the day we want to allow propagating from a non-write keyspace notification (aka, key-miss), but i think that's probably an invalid use.",0,0,0,0.7383449077606201,0.7843928933143616,0.7167593836784363,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1103454037,11199,"i think this is a good direction to address the problem. i have a feeling there could be more edge cases we did not consider yet though. i don't think we can/should prevent modules from writing inside a notification hook, clearly documenting it is enough imho.",1,1,1,0.529865562915802,0.4939130842685699,0.907589077949524,1.0,accept,unanimous_agreement,2
redis/redis,reviews,570085856,8315,"i added some comments about this extra timeout in two places. i think in one we can either double the user's timeout, or we don't need it at all, and in the other (the case you mentioned), i don't think we need the extra at all. (maybe i'm missing something) first, let's add a test that covers this case. secondly, maybe that's an indication that the old master must never give up, it must wait for a reply from the replica (either success, error, or disconnection, and until it gets it, it'll wait forever). can you come up with another suggestion? yes, this should not cause harm, i added a comment with a suggestion on how to test it. i don't think we need it, i was mainly worried about the fact no one can communicate with that server at all. but maybe any call to replicaof (no one, or otherwise) will should abort it? why not do the unpause earlier? if it's just paranoia, maybe we should get over it. in practice, if we don't consider writable-replicas, then when the master is demoted, it is effectively in writes pause anyway, right?",0,0,0,0.9510575532913208,0.9774622917175292,0.9684671759605408,0.0,accept,unanimous_agreement,2
redis/redis,reviews,574905844,8315,"/core-team please approve or comment. afaik the only thing that we're still on the fence with is whether the `to` and `abort` should be a sub-commands (and `to` accepts `any one` notation), or should it be possible to just do `failover` with no arguments, or `failover start`, etc.",0,0,0,0.988066792488098,0.9903726577758788,0.9565621614456176,0.0,accept,unanimous_agreement,2
redis/redis,reviews,574911986,8315,"i think i'm happier with an optional `to`, mainly because i think in most cases users will have a single replica anyway.",1,0,0,0.6208721995353699,0.8984682559967041,0.8772830963134766,0.0,accept,majority_agreement,2
redis/redis,reviews,576044333,8315,minor comments. everything else lgtm. i suppose a redis-doc pr is needed next.,0,0,0,0.9841490387916564,0.9412127733230592,0.9868453741073608,0.0,accept,unanimous_agreement,2
redis/redis,reviews,552524742,8170,"active expire, eviction and replication ping are already covered by clientsarepaused. but we now have a complicated problem with lazy expire. i suppose we can just keep the key (avoid deleting it) and report that it's missing. lazy expire will find it again after the pause is released. some points from the cr that may get lost in the comments so i'll repeat them shortly: 1. we need to allow non-write commands like ping, config, but block eval 2. we need to prevent pfcount from doing conversion and propagation. 3. we need to reflect the ro flag to rm_avoidreplicatraffic",0,0,0,0.9473247528076172,0.969273567199707,0.8881049752235413,0.0,accept,unanimous_agreement,2
redis/redis,reviews,561747871,8170,"i've reviewed the recent changes, and then also re-reviewed the whole thing. i added a few minor comments (suggestions for cleanup, or fixing typo bugs). after fixing these, i guess we're good to merge. or at least summon the core team's review (do note that they're somewhat non-responsive ;) to prepare for that, please update the top comment to reflect all the changes, so it can be used as a commit comment. the things i see that should be listed are: - new can-replicate flag in the command table - new client pause write command argument - new client unpause command - new flag to command command: ""can_replicate"" - in addition to all the existing effects of pause we now skip: - replconf getack to replicas - lazy expire please also prepare a redis-doc pr.",0,1,1,0.8417297601699829,0.9837109446525574,0.9574024677276612,1.0,accept,majority_agreement,2
redis/redis,reviews,562031148,8170,much better than spinning the event loop while clients are paused.,0,0,0,0.9565593004226683,0.9653095006942748,0.88788241147995,0.0,accept,unanimous_agreement,2
redis/redis,reviews,562375699,8170,lgtm repeating what i said here: [a link],0,0,0,0.9824156165122986,0.899564802646637,0.990012526512146,0.0,accept,unanimous_agreement,2
redis/redis,reviews,563463257,8170,"interface and concept lgtm, but only went through the code briefly.",0,0,0,0.9890522360801696,0.9840458631515504,0.9900902509689332,0.0,accept,unanimous_agreement,2
redis/redis,reviews,563617156,8170,"the api looks good, but didn't dive too deep into the code.",1,1,1,0.5713955163955688,0.5328554511070251,0.6817124485969543,1.0,accept,unanimous_agreement,2
redis/redis,reviews,842665578,10043,"i did a sloppy initial review (only looking at the diff, without being familiar of the code that uses it). can't afford to spend much more time on that right now, so i figured raw feedback is better than nothing.",-1,0,-1,0.8601809144020081,0.5667524933815002,0.7878588438034058,-1.0,accept,majority_agreement,2
redis/redis,reviews,872909625,10043,just a quick skim though the recent changes.,0,0,0,0.9733440279960632,0.9347320795059204,0.974782407283783,0.0,accept,unanimous_agreement,2
redis/redis,reviews,873930327,10043,"for the record, some tests i did (with valgrind). * run it against latest server and against old server. * added to both servers some commands that don't exist in help.h, and verified they show in `help` and in completion hints. * run it with and without `-3` * verified the help `@ ` is working the only problem i could spot (which may not be an issue), is that when using help.h (on old server) we show the `since` field, but when using command docs (new server) we don't. it's logical since when we use command docs we show only the ones actually supported. but since the users can't distinguish between these modes, i now think it'll be nicer to show it in both modes.",0,0,0,0.9691994190216064,0.9900744557380676,0.91900372505188,0.0,accept,unanimous_agreement,2
redis/redis,reviews,570005166,8324,i assume you compared the first 7 fields of command output to the previous version and saw that their identical for all command (except for the few which were buggy). right? p.s. did you run valgrind?,0,0,0,0.9872150421142578,0.9871046543121338,0.9901466965675354,0.0,accept,unanimous_agreement,2
redis/redis,reviews,572077452,8324,i approve of the approach - haven't done a cr though,0,1,0,0.96723872423172,0.7959122657775879,0.5550001263618469,0.0,accept,majority_agreement,2
redis/redis,reviews,576913212,8324,"i have a high level of question of why do we have flags related to the keyspecs? i was meandering through some clients and i couldn't figure out where you would differentiate the read/write path. i thought about client side caching, but this doesn't give us enough introspection to use it for that case. it doesn't add a lot of overhead, but unclear why we want to maintain it. i'm good with the change as long as we've thought through why we're sending extra information to clients.",0,0,1,0.8199377059936523,0.7429677844047546,0.6457056999206543,0.0,accept,majority_agreement,2
redis/redis,reviews,738743419,8324,"can you remind me what tests did we perform to see that the specs we filled are correct? we can match the old output of command to the new one and see that the legacy spec is ok. but maybe there's something else we can do? by matching the output of getkeys to what this extracts? i.e. write some test that implements what we expect a client to implement based on the specs, then somehow compare the result of that with getkeys on either a hard coded list of commands, or some fuzzer?",0,0,0,0.9835559725761414,0.9923754334449768,0.9908536672592164,0.0,accept,unanimous_agreement,2
redis/redis,reviews,752160501,8324,"lgtm. re-reading this after several months, i realize we may need to include pseudo code for the key spec handling, or better yet - provide a reference implementation.",0,0,0,0.9838554263114928,0.9801233410835266,0.980960249900818,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1827646066,12913,"good idea. but i think i'd like a few changes: 1. i don't think we need to have separate metric for the expires dict and the main one, we can count them together in the same metric. 2. i'd like another metric to count the overhead of the rehashing (i.e. the total memory used by `ht[0]` in dicts that also have `ht[1]`) wdyt?",1,1,1,0.9033611416816713,0.8827248811721802,0.849699854850769,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1843538063,12913,/core-team please approve the new metrics for info memory and memory stats,0,0,0,0.961795687675476,0.9828952550888062,0.978731632232666,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1895222982,12913,"just realized that in test ""redis can resize empty dict"" in other.tcl, it is assumed that memory stats shows only the overhead of non-empty dbs. but now all dbs' overhead is displayed and so we need to change the test. i see the test passes, what do you mean? the deletion of this? [code block] or do you mean we need another way to distinguish between empty and non empty dicts?",0,0,0,0.9842140674591064,0.9877036809921264,0.9710880517959596,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1900672185,12913,please approve the new naming `database.dict.rehashing.count` and the change about `kvstorememusage`,0,0,0,0.9851611852645874,0.9912527203559875,0.9942674040794371,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1899653951,12913,"i'm ok with the new name. please update the top comment, and prepare a redis-doc pr",0,1,0,0.9729228615760804,0.5387284755706787,0.8438580632209778,0.0,accept,majority_agreement,2
redis/redis,reviews,1908629187,12913,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1248266538,11708,nitpicks,0,0,0,0.9837733507156372,0.9508292078971864,0.8492581844329834,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1261656845,11708,i'd like to take a quick look,0,0,0,0.8908290266990662,0.8932956457138062,0.9468029737472534,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1349442402,11708,"some minor documentation updates, will just commit them.",0,0,0,0.9875499606132508,0.9835323095321656,0.993228793144226,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1349574425,11708,"tweaked top level comment, and some other minor wording suggestions which i will apply.",0,0,0,0.9866645336151124,0.9865878224372864,0.99436354637146,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1434198222,12192,lgtm. i like moved with slot = -1. i think it is intuitive.,1,1,1,0.8773945569992065,0.6242108941078186,0.9481496214866638,1.0,accept,unanimous_agreement,2
redis/redis,reviews,570731013,8327,thanks for this pr. added a few comments that should be trivial to solve. the only one that would probably require some work is about not propagating absolute expire times to replicas.,1,1,1,0.9118247628211976,0.9701299667358398,0.9766706824302672,1.0,accept,unanimous_agreement,2
redis/redis,reviews,571188265,8327,i think we must add specific tests for the replication and aof propagation of all the getex variants. including: 1. making sure getex with no arguments isn't propagated 2. use of persist 3. ex/px/exat/pxat 4. del,0,0,0,0.9871885180473328,0.991635799407959,0.9859370589256288,0.0,accept,unanimous_agreement,2
redis/redis,reviews,572163356,8327,minor suggestions for improvements and then i think this is ready to be merged.,0,0,0,0.9789298176765442,0.7058030366897583,0.9899528622627258,0.0,accept,unanimous_agreement,2
redis/redis,reviews,572460697,8327,still good with the api,0,1,0,0.7542468309402466,0.76750248670578,0.5346415042877197,0.0,accept,majority_agreement,2
redis/redis,reviews,1245601161,11595,"i'm not sure what that benchmark does and if it's sufficient. maybe we have to do some benchmarks manually. * impact on string keys * impact on hashs (large ones that are dict encoded) * impact on sets (large ones that are dict encoded) * would be nice to see both a case of a relatively constant set, vs one that keeps growing and growing.",0,0,0,0.8595809936523438,0.958221673965454,0.7575430274009705,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1532631571,12416,thank you for the pr. added a few notes to consider. not sure what's the best approach yet.,1,1,1,0.5438469648361206,0.965551495552063,0.9048207998275756,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1683779135,12416,i like this api. it's very simple. i just hope nobody needs to use strings which are not redismodulestring. should we set `errno` in the error cases? we do that in some newly added apis but not in the older ones.,1,1,1,0.9782658219337464,0.9927512407302856,0.9811036586761476,1.0,accept,unanimous_agreement,2
redis/redis,reviews,757050620,9511,less syscalls seems like a good idea. i have some suggestions.,0,1,1,0.7531161308288574,0.9530836939811708,0.8986551761627197,1.0,accept,majority_agreement,2
redis/redis,reviews,758191641,9511,nice! it's more clear now. all the calls to anetpipe look right.,1,1,1,0.982492446899414,0.9921481013298036,0.9952623844146729,1.0,accept,unanimous_agreement,2
redis/redis,reviews,772381206,9511,lgtm. added a few comments to slightly improve readability. noted about a minor concern that can probably be dismissed.,0,0,0,0.9772499203681946,0.9585614204406738,0.8024891018867493,0.0,accept,unanimous_agreement,2
redis/redis,reviews,772653221,9511,lgtm.. if there are no other comments in the next few mins i'll merge it thank you both!,1,1,1,0.9859728813171388,0.9810720086097716,0.9317476749420166,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1643545997,12611,please update the top comment to mention the failure (or warning),0,0,0,0.9838749170303344,0.9903592467308044,0.9943912625312804,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1644101890,12611,"ltgm, thanks.",1,1,1,0.8702400922775269,0.7975788116455078,0.7214056253433228,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1653087498,12611,"done with my review. gave my review comments. i would like to see them as addressed, before i approve.",0,0,0,0.9458793997764589,0.8241717219352722,0.5316334962844849,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1658157506,12611,approving.,0,0,0,0.9731205701828004,0.9580270051956176,0.9277035593986512,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1663142209,12611,"looks good, oran will take a final review and merge it in a few days.",1,1,1,0.9395504593849182,0.735615074634552,0.7176735997200012,1.0,accept,unanimous_agreement,2
redis/redis,reviews,805420850,9774,"still some thoughts on the other pr, but this one seems ok to me. we also need a change in redis.conf to describe the parameter.",0,0,0,0.9780890345573424,0.961389422416687,0.8924559950828552,0.0,accept,unanimous_agreement,2
redis/redis,reviews,817043476,9774,lgtm otherwise.,0,0,0,0.9859126210212708,0.9785248637199402,0.9751642942428588,0.0,accept,unanimous_agreement,2
redis/redis,reviews,817207500,9774,"i didn't review the majority of the code. just the parts related to the new interfaces. i suppose the feature is valid, but i'd like to argue about the default value for the config.",0,0,0,0.9798111319541932,0.7783567905426025,0.9683485627174376,0.0,accept,unanimous_agreement,2
redis/redis,reviews,831062050,9774,"lgtm, /core-team back to ya'll for approval.",0,0,0,0.9706507325172424,0.730609655380249,0.9884269833564758,0.0,accept,unanimous_agreement,2
redis/redis,reviews,831066496,9774,one comment. otherwise lttm.,0,0,0,0.9800772666931152,0.9795382618904114,0.9828013777732848,0.0,accept,unanimous_agreement,2
redis/redis,reviews,831311787,9774,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,834432910,9774,"lgtm, no complete code review but i agree with the interface change and concept.",0,0,0,0.926944613456726,0.9160311222076416,0.9539876580238342,0.0,accept,unanimous_agreement,2
redis/redis,reviews,834608151,9774,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2377348324,13592,"cool, this feature exactly is useful to help admin for find bigkey problems. i remember you implemented `sflush` command, do you update db keysizes info after flushing specific slot dict?",1,1,1,0.9489815831184388,0.91976398229599,0.9894554018974304,1.0,accept,unanimous_agreement,2
redis/redis,reviews,671809268,9003,sorry i wasn't paying close attention so far while you were investigating failures in this test. only now i bothered to read my test and remember what it was attempting to achieve.,-1,-1,-1,0.9850576519966124,0.9913462996482848,0.9912404417991638,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,678499680,9003,optimization to read more from socket when desirable.,0,0,0,0.9832651615142822,0.9879937171936036,0.9937440752983092,0.0,accept,unanimous_agreement,2
redis/redis,reviews,683615327,9003,comment on using `sdsavail` for updating `readlen`.,0,0,0,0.9869304895401,0.9939600229263306,0.9930261373519896,0.0,accept,unanimous_agreement,2
redis/redis,reviews,683748698,9003,"much of these recent changes aren't really doing anything (e.g. the one in scripting.c). we can consider them a cleanup, but maybe since this pr is already quite big and confusing, we wanna leave that cleanup for a separate pr? the one in tls.c seems to reveal another bug (again i think subject for another pr). wdyt?",0,0,0,0.883723258972168,0.8706780076026917,0.9419355988502502,0.0,accept,unanimous_agreement,2
redis/redis,reviews,683837073,9003,so are we all good to merge this now?,0,0,0,0.9429641366004944,0.9139081835746764,0.9910479187965392,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1375409185,11907,"overall seems good, some minor suggestions.",1,1,1,0.4977124035358429,0.7720709443092346,0.7056160569190979,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1422891285,11907,seems pretty complete. tests look high level ok. some stylistic and organizational comments mostly.,0,1,1,0.6553856134414673,0.8896331191062927,0.5778283476829529,1.0,accept,majority_agreement,2
redis/redis,reviews,1423594172,11907,"minor nitpicks left, going to just apply some of these.",0,0,0,0.9831910729408264,0.9481942057609558,0.9610641598701476,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1424875181,11907,code looks good to me now. /core-team here is a relatively small extension to pubsub that makes it easier to figure out what clients are registered. this came out of an issue we saw in aws were a user wasn't sure why pubsub was taking so long and they only had the raw counts and weren't sure which clients were listening. please review.,1,1,1,0.8822149634361267,0.968791961669922,0.8114472031593323,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1461233377,11907,"hi , overall, it looks good to me. i'm not sure about the command interface, though. did you consider viewing it as an extension to `client list` instead of `pubsub`? 1. as an administrative/debugging command, it is more aligned with what `client` does overall. if we consider it a more user-facing command, in many cases, exposing client names and ips will be undesirable. 2. anyone looking for more than just the ip/id/name will have to do `client list` anyway, so it might be a better overall experience to have it all in one invocation.",1,1,1,0.9648521542549132,0.9501907825469972,0.9677830338478088,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1728455259,12742,"see comment about naming, it would make this a lot easier to read the delta.",0,0,0,0.9414950609207152,0.982936143875122,0.9926868677139282,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1729176021,12742,"i skimmed over the changes (skipping cluster.c/h and alike). i may be out of context here, i thought this pr was only about moving code around to different files, and that all the concepts were already previously agreed on, and it was just about re-doing it quickly and merging it. i didn't go over the list of commit comments, but if there are important details there (like new interfaces or new mechanisms, not just code shifts), please mention them in the top comment as well.",0,0,0,0.9757630825042723,0.97662353515625,0.9807031154632568,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1730245506,12742,actually done going through it all now.,0,0,0,0.9767356514930724,0.9685861468315125,0.9796578288078308,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1740117282,12742,please make sure the top comment is up to date (some things that are fact there are future plans),0,0,0,0.9797242879867554,0.9888240694999696,0.9919636249542236,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1742501672,12742,codewise lgtm,0,0,0,0.9886632561683656,0.9760751128196716,0.9929757118225098,0.0,accept,unanimous_agreement,2
redis/redis,reviews,953002403,10636,"reviewed the part in zmalloc.c and the linuxtimewarnings function. missing warning suppression, and extraction of the log highlighting thing to a different pr.",0,0,0,0.984473466873169,0.9946374297142028,0.9919129610061646,0.0,accept,unanimous_agreement,2
redis/redis,reviews,973124063,10636,seems reasonable.,0,0,0,0.9596874713897704,0.9415385723114014,0.982004702091217,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1049964036,10969,"mostly lgtm, with a few requests for clarifications in the code. still i'm a bit scared to back port it.. but maybe with another set of eyes, and a few weeks in unstable...",-1,-1,-1,0.9839779734611512,0.9718005657196044,0.9825906157493592,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,1072084637,10969,"i agree this isn't a major decision, but it is bug fix that includes a breaking change and potential for undesired side effects so i vote for holding back on a backport at the moment.",0,0,0,0.9153354167938232,0.7310141324996948,0.7300926446914673,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1135320237,10747,"sorry for the delay.. let's revive it for merge in time for 7.2. i did one round of review (excluding tests), a closer look will be needed after these are addressed.",-1,-1,-1,0.9896643757820128,0.9919539093971252,0.9896903038024902,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,1152306493,10747,"it's really hard for me to read the code and focus on the important things when there are so many white space issues, please fix them first. other than that, i have some actual comments about the command syntax and side effects of failed calls, so please address that across the board, and i'll take another look later.",-1,-1,-1,0.8676229119300842,0.8528343439102173,0.9675279855728148,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,678634201,8999,"thank you. here's a last round of minor cleanups in the code and i think this can be merged. i must say that i was a bit overwhelmed by the test code and didn't fully review it. i added a suggestion to slightly improve the explanation at the top, hope it makes sense.",1,1,1,0.944636046886444,0.970289409160614,0.9865418672561646,1.0,accept,unanimous_agreement,2
redis/redis,reviews,679323934,8999,thank you. added a few minor improvements to the text. /core-team i think this pr is ready to be merged. please approve the new interfaces.,1,1,1,0.9351736903190612,0.990588903427124,0.9619476795196532,1.0,accept,unanimous_agreement,2
redis/redis,reviews,2319684734,13359,lgtm. see also [a link] the repo has [a link]. there is [a link] in it.,0,0,0,0.9885518550872804,0.98952454328537,0.9857343435287476,0.0,accept,unanimous_agreement,2
redis/redis,reviews,2320124196,13359,"so i think we can leave it there, wait for others' opinions. not sure i understand the question. are you considering if we need any compile time check or runtime check? i don't think we should assume anything, i prefer to keep supporting old compilers and hardware.",0,0,0,0.6914976835250854,0.8094835877418518,0.9277181029319764,0.0,accept,unanimous_agreement,2
redis/redis,reviews,540813805,8094,"haven't completed my review yet, but here're a couple of trivialities. also, looks like some of the additions go well beyond 80-characters-per-line unwritten style guide.",0,0,0,0.893897533416748,0.7673078179359436,0.9334442019462584,0.0,accept,unanimous_agreement,2
redis/redis,reviews,545703310,8094,"thank you for this pr. i think i've reviewed most of the code (excluding the tests). i have many comments, but i guess the most important one to address to consider if both geohashgetdistanceifinrectangle is considering the box inside the radius or the one bound is. hope i'm not talking nonsense.. i didn't study the topic enough and i have to move on. hope you can dismiss my concerns one way or another.",1,1,1,0.9769574403762816,0.9877084493637084,0.9757900834083556,1.0,accept,unanimous_agreement,2
redis/redis,reviews,547007019,8094,"thank you. can you tell me something about the tests coverage and what was your approach when creating them? i.e. did you duplicate some of the georadius tests and changed them to use geosearch? i see you attempted to cover some of the syntax errors, but did you also try to test some box specific points? (i.e. search for points that are outside a circle but inside a big that has similar ""radius"")? or trying to create odd box shapes (non square ones)?",1,0,1,0.8911730051040649,0.8075000047683716,0.922861397266388,1.0,accept,majority_agreement,2
redis/redis,reviews,1956841318,13169,"took a while, but looks good to me. thanks",1,1,1,0.9851446151733398,0.9828537702560424,0.9921154379844666,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1956921324,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1957022382,13169,:flexed_biceps:,0,0,0,0.8180949091911316,0.9819946885108948,0.9639418125152588,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1957265929,13169,"i would have used mit, but lgtm :ok_hand:",0,1,1,0.9657813906669616,0.9139887690544128,0.9863682389259338,1.0,accept,majority_agreement,2
redis/redis,reviews,1957356558,13169,this change seems logical.,0,0,0,0.9639331698417664,0.976302981376648,0.9843594431877136,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1957881245,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1958449172,13169,lgtm solid stuff,0,-1,1,0.808292806148529,0.6926872730255127,0.6173961162567139,,review,no_majority_disagreement,1
redis/redis,reviews,1958466441,13169,lgtm :thumbs_up:,0,0,1,0.9097400903701782,0.9214580059051514,0.9918738007545472,0.0,accept,majority_agreement,2
redis/redis,reviews,1958479592,13169,lgtm :thumbs_up:,0,0,1,0.9097400903701782,0.9214580059051514,0.9918738007545472,0.0,accept,majority_agreement,2
redis/redis,reviews,1958507699,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959064582,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959144096,13169,a positive change,0,0,1,0.7408692836761475,0.9287167191505432,0.9738959670066832,0.0,accept,majority_agreement,2
redis/redis,reviews,1959146520,13169,"looks good, please go ahead",1,1,1,0.8985600471496582,0.9589875340461732,0.95320063829422,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1959151469,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959170804,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959239254,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959245788,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959324907,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959366015,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959421157,13169,lgtm!,1,1,1,0.7413927316665649,0.9057464599609376,0.8055883049964905,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1959433029,13169,double approve for more justice,0,0,0,0.9698188304901124,0.9191904067993164,0.9772067070007324,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1959672279,13169,"great change, hope the redis team takes it on board!",1,1,1,0.991899847984314,0.9957085847854614,0.9960927367210388,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1959842417,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960013634,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960043561,13169,seems good!,1,1,1,0.9848282933235168,0.9914699196815492,0.94732004404068,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1960089617,13169,lfgtm,0,0,0,0.9804199934005736,0.8353497385978699,0.984713613986969,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960151570,13169,"looks good, will merge soon! if only",1,1,1,0.9863195419311525,0.988525092601776,0.9960527420043944,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1960157617,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960210872,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960414717,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960679052,13169,lgtm!,1,1,1,0.7413927316665649,0.9057464599609376,0.8055883049964905,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1960699820,13169,looks good to me!,1,1,1,0.988797128200531,0.9916608929634094,0.976562201976776,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1960715716,13169,looks good to me :clapping_hands::clapping_hands::clapping_hands::clapping_hands::clapping_hands::partying_face:,1,1,1,0.9742957949638368,0.9506770372390748,0.9925916194915771,1.0,accept,unanimous_agreement,2
redis/redis,reviews,1960731624,13169,this pr is on the right side of history.,0,0,0,0.983198583126068,0.9868374466896056,0.9893073439598083,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960801290,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1960856404,13169,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement,2
redis/redis,reviews,1961018710,13169,lgtm :rocket:,0,0,1,0.91496741771698,0.5381109714508057,0.9147164225578308,0.0,accept,majority_agreement,2
redis/redis,reviews,711257168,2795,"thank you for the efforts. i added a few comments. some are suggestion for improvements, others are open for discussion, let me know what you think.",1,1,1,0.9467416405677797,0.9852342009544371,0.979907751083374,1.0,accept,unanimous_agreement,2
redis/redis,reviews,714294737,2795,lgtm.. few minor suggestions for improvement.,0,0,0,0.9665974378585817,0.5924172401428223,0.8898286819458008,0.0,accept,unanimous_agreement,2
redis/redis,reviews,714794803,2795,"lgtm, added a few minor typo/formatting comments.",0,0,0,0.9887425899505616,0.9739385843276978,0.9903168678283693,0.0,accept,unanimous_agreement,2
redis/redis,reviews,719699526,2795,api and code lgtm.,0,0,0,0.988736093044281,0.983908474445343,0.9947522878646852,0.0,accept,unanimous_agreement,2
redis/redis,reviews,517136014,7953,i'll take a deeper look through all the copying tomorrow but i added some high level comments. i think i fixed the test with this pr: [a link] redis acls are being simplified in weird ways.,-1,-1,-1,0.9762454628944396,0.6260241866111755,0.7621129155158997,-1.0,accept,unanimous_agreement,2
redis/redis,reviews,518238530,7953,most of it reviewed now! generally looks good.,1,1,1,0.9764245748519896,0.9878446459770204,0.9929947257041932,1.0,accept,unanimous_agreement,2
redis/redis,reviews,525654640,7953,haven't yet reviewed the streams code. i think the fix for debug digest and steams can be a separate pr. unless this one really needs it in order to validate correct result. maybe you can use xinfo full instead for now.,0,0,0,0.9817827343940736,0.9907242655754088,0.9871171116828918,0.0,accept,unanimous_agreement,2
redis/redis,reviews,525734652,7953,"few more comments.. btw, it may be a good idea to move all the 'dupxxxxobject` functions to their respective type c files eventually. all this type specific logic sounds like it shouldn't be in object.c. but let's do that after we're done with the other comments, for an easier review of everyone involved.",0,0,0,0.8029360771179199,0.9439008235931396,0.9368747472763062,0.0,accept,unanimous_agreement,2
redis/redis,reviews,526715511,7953,"two minor things, but besides that lgtm.",0,0,0,0.9822386503219604,0.8299799561500549,0.965783953666687,0.0,accept,unanimous_agreement,2
redis/redis,reviews,528481475,7953,"i went over all the comments to check that we didn't forget anything, found another minor issue. other than that: 1. revert the additional ""del"" keyspace notification 2. and move all the ""dupxxxx"" functions to their respective c files. try to find the correct place in each c file for this kind of api (not part of the commands section), and make sure to give them the right prefix. please do this refactory in a separate commit, so it'll be easy to review actual changes. after that, i guess we're ready to merge this.",0,0,0,0.9615849256515504,0.8993858695030212,0.6963118314743042,0.0,accept,unanimous_agreement,2
redis/redis,reviews,511139531,7912,thank you for this pr!,1,1,1,0.9760051369667052,0.954816997051239,0.973291516304016,1.0,accept,unanimous_agreement,2
redis/redis,reviews,521204084,7912,i'm ok with the current api. let's wait a day to see if others raise some objections.,0,0,0,0.9693050384521484,0.9063704609870912,0.9226491451263428,0.0,accept,unanimous_agreement,2
redis/redis,reviews,522462624,7912,commit title can be made a bit shorter. i'll handle that when squash-merging. thank you.,1,1,1,0.9269388318061828,0.9572840929031372,0.9280915856361388,1.0,accept,unanimous_agreement,2
redis/redis,reviews,527574682,7912,"thank you not just for this pr, but also for your patience with this process! getting to an agreement on names and api interfaces is always a challenge (and don't get me wrong on this, it is for all the right reasons). i didn't get a chance to voice my opinion before. i totally agree with passing the key to `unlink`, but i don't think it's really necessary for `free_effort` (although not feeling strongly against it). i think you have a valid argument here, but i think that however we turn it the api will still end up with extra coupling. even if we expose `lazyfree_threshold` we still have this rigid contract that will be hard to break, and if we just let modules decide we lose all control. so, as none of the options is ideal i'd stick with this one which is simple. we do have to document it properly though.",1,1,1,0.9801267385482788,0.9738818407058716,0.9816426634788512,1.0,accept,unanimous_agreement,2
redis/redis,reviews,527781656,7912,"api lgtm, i did not look at the code much.",0,0,0,0.781680703163147,0.8348799347877502,0.990669846534729,0.0,accept,unanimous_agreement,2
redis/redis,reviews,530796771,7912,haven't reviewed but...,0,0,0,0.5091241002082825,0.8795409798622131,0.9727290272712708,0.0,accept,unanimous_agreement,2
