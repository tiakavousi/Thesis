id,pr_number,user,created_at,body,deberta_sentiment_label,deberta_confidence
1004610739,331,DjLegolas,2022-01-04T08:26:43Z,"looks great, thanks. if you can, please add a job to the ci for automatic creating the installer. it will need to have the ability to compile everything it needs (gtk3, openssl, etc.).",1,0.9891676902770996
1004613096,331,doadin,2022-01-04T08:30:56Z,i'm working on that atm. the hardest part kind of is compiling gtk. others have public windows builds. could use a build host for this but artifacts don't last forever. and gtk takes quite a bit of time to compile.,0,0.8297540545463562
1004642179,331,doadin,2022-01-04T09:17:01Z,"the best option would probably be to have a build of gtk hosted somewhere then use that plus the already available builds of others eg. just pip install libtorrent and use prebuilt openssl from the ci host, as most things are available or easy to get like with pip, gtk is the only thing really hard to get.",0,0.9892277717590332
1004646414,331,cas--,2022-01-04T09:23:35Z,"i agree if we can start simple with dependencies the better, where needed we can modify it later to suit. for gtk we could fork the gvsbuild repo and create releases or store them on deluge ftp, either way we want a simple reproducible process.",0,0.9766156673431396
1004650915,331,doadin,2022-01-04T09:30:20Z,"-- yes i plan on on making an cd github actions, since that seems to be what we are using for other things, that will making an installer using prebuilts from github actions image, which the only thing i see needed out side of that is gtk ill make the script to use from appveyor since thats where im currently setting up a build, should be a easy change in url to a different host depending on where you would like to get it from.",0,0.9666959047317505
1004690840,331,doadin,2022-01-04T10:27:07Z,-- it seems that github actions uses powershell to run so i added a sample cd.yml based on that which should only need a correction for the url where we want to get gtk from. the deluge spec file already has path setup to be able to find openssl and such so unless the wheel of libtorrent from pip requires something else should be able to find all the deps deluge needs. edit: also the path to gtk may need editing all depends on how we get gtk and how the zip for it looks and is extracted and so on. again though should be a fairly easy edit of the spec file to make any correction for how the build environment is setup. appveyor and github actions (maybe others) seem to put openssl and such in the same location so should be pretty easy to make work any where really. also i made the sample only build on pushed tags so any time you want to make a release should be as simple as adding a tag. we could maybe build for prs too or something but you guys can decide that.,0,0.838731050491333
1005092640,331,DjLegolas,2022-01-04T19:05:44Z,"btw, great work :1st_place_medal:",1,0.9968444108963013
1005310000,331,doadin,2022-01-05T01:42:24Z,"-- i think i have addressed the points you guys have brought up, still uncertain about nsis use again i'm not very familiar but i think other than it being cleaner its at least close to proper syntax?",0,0.8587866425514221
1005380653,331,doadin,2022-01-05T04:50:34Z,"-- so im really stuck its apparently not able to load a dll for gtk, which i have no clue. i have the spec file setup to add gtk\lib folder and the vc redist to path but its still missing a dll from somewhere idk.",-1,0.9787287712097168
1005426388,331,DjLegolas,2022-01-05T06:50:55Z,"- don't worry, we will help you with that. seem like there are several dlls missing: 1. python - `no such file or directory: 'c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64\\dlls\\'`. maybe it's on another location or name? 2. make sure that the gtk lib and bin paths are in the path environment variable so the the python libs will find them.",1,0.774849534034729
1005450228,331,doadin,2022-01-05T07:40:34Z,"1. i did a print of the dir and that dir does exist not sure why it says it doesn't. (side note: do wish we could have rdp to the vm like with appveyor.) 2.i am using pathex in pyinstaller to add the gtk lib and bin paths. i could try and add it in the build script vs pyinstaller adding it but should work from pyinstaller. `12734 info: extending pythonpath with paths ['c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64\\scripts', 'c:\\gtk-build\\gtk\\x86\\release\\bin', 'c:\\gtk-build\\gtk\\x86\\release\\lib', 'c:\\gtk-build\\gtk\\x86\\release\\share', 'c:\\gtk\\release\\bin', 'c:\\gtk\\release\\lib', 'c:\\gtk\\release\\share', 'c:\\openssl-win64\\bin', 'c:\\program files (x86)\\microsoft visual ' 'studio\\2019\\enterprise\\vc\\redist\\msvc\\14.29.30133', 'c:\\windows\\system32', 'c:\\windows\\syswow64', 'c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64', 'c:\\hostedtoolcache\\windows\\python\\3.7.9\\x64\\dlls']`",0,0.9778198599815369
1005455759,331,doadin,2022-01-05T07:51:31Z,i tried adding the gtk dir to path from the github actions and still no go. i wish i knew what dll it can't find would be probabbly really easy to find if i knew what i was looking for lol.,1,0.9700680375099182
1005530462,331,mhertz,2022-01-05T09:45:04Z,"really stupid question, but doesn't help using x64 gtk(for x64 build) ? it's seemingly through bindepend.py/pefile.py trying check a file related to gi(hook) , which links to gtk dlls, running matchdllarch on them, or something. strange error regardless. as said on forum, the pathhex is irrelevant, atleast on real system, with that spec(mine atleast), when in path as djlegolas said, just to not waste time on adding there this and that. anyway, really impressed, looking great, thanks a bunch for all the nice work :) edit: i'm sorry, just looked more at the commit, and see the gvsbuild zip states x64 in name, but i just thought it was x86 because added panthex's lists e.g the standard gvsbuild paths for x86 builds, not standard x64 ones. i apologize for noise, and please disregard, as if having the x64 paths in path env-var, then fine(i'd change them regardless, spec pathex's i mean, if not completelly ditching them all). edit2: before that issue, then cannot even import gi module, making breakage later on presumably, so should look into that and not the missing dir/dll(s) later reported, as byproduct of that presumably. cannot import _gi module from gi - have you checked pygeoip installed correctly in python i.e can you import it / _gi* file in site-packages/gi? edit3: pygobject, not pygeoip lol :) the gtk3 python bindings wheel produced by gvsbuild.",-1,0.9893288016319275
1005838989,331,doadin,2022-01-05T15:43:36Z,"the script installs pycairo and pygobject from wheel from gtk build folder and is ""successful"" so i see no reason why it would not be available. i could be wrong but i think the missing dll isn't a product of missing gi but other way around it tries to import gi which tries to load the dll which fails ending in the importing failing.",0,0.989875078201294
1005840354,331,doadin,2022-01-05T15:45:14Z,[a link] [a link] i believe [a link] shows us that at least partially gi is installed. and that it fails to import because of missing dll. edit: again maybe i am wrong but if gi module was not installed it would be a name error or something like that not a dll error?,0,0.9843855500221252
1005863790,331,mhertz,2022-01-05T16:11:57Z,"sorry doadin, thanks for explaining, and sounds like you're right. anyway, i remember during looking through cmd output during mine builds, that it stated sometimes, probably unrelated, looking for ctypes in dlls, though not specially for gi, but saw there where a ctypes pyd in that dlls folder, so maybe check if there, if possible, though strange mentions dir not found in error, when there. sorry for noise and i'll butt out now - best of luck you guys :)",1,0.5919946432113647
1005874174,331,doadin,2022-01-05T16:23:33Z,i never turn down help/ideas. :),1,0.9952307343482971
1005882953,331,mhertz,2022-01-05T16:34:15Z,"thanks mate :) just very quick, seemingly is issue of gdkpixbuff hook tries to find path to gi library dir it gets the wrong one and fails colecting any pixbuff-loaders - it tries to do a dll check i think, but cannot on a folder, as the error just mentions folder not file. anyway, i got this from looking closer at the output and googling it, where issue with little other, but slight related, very slight but regardless - it was stated that e.g. the user having issues had poisened his build environment by having gtk3/gdk dll's in current folder or next to script or something, messing that part up. a suggestion was to check if can see the path correct by adding in spec file, just for troubleshooting... well, you can see yourself what to add, a single line printing it to cmd during freeze - i didn't yet read it through, so possibly better hints later, and again sorry if way off: [a link] edit: no need add in spec, sorry, just states to check in python from where running pyinstaller normally. here gets the correct: c:\\gtk-build\\gtk\\x64\\release\\bin",1,0.9958555102348328
1005895701,331,doadin,2022-01-05T16:50:47Z,i have a theory i am testing now. normally i believe when you install gtk python bindings you end up with a struckture something like python/lib/site-packages/gnome/gi-repository i just made a build attempt and made it print out the site-packages folder and the gi-repository which i believe normally has libs in it only had like 1 file and was a __init__.py or something like that. im thinking maybe for some reason the wheel is incomplete. im currently running a build on my test vm to see the folder structure.,0,0.8356614708900452
1005898284,331,mhertz,2022-01-05T16:54:03Z,"when installing pygobject, then always makes gi dir under site_packages and bunch other gi dirs there. indeed if only a __init__.py, then the issue as per error, as the _gi*.pyd not there, which tries imported - so the install of wheel went wrong, or incomplete as you state. good catch, sorry for my ramblings before.",-1,0.9712058305740356
1005901327,331,doadin,2022-01-05T16:57:43Z,i'm trying to run a test suggested in that github issue and see where it is looking for the lib then we can check that folder to confirm if the files needed are there or not.,0,0.9897340536117554
1005902679,331,mhertz,2022-01-05T16:59:23Z,"the gi regardless is f'ed up - you need a _gi*.pyd there for import, and i'm pretty sure that's the root cause(if you say there only is a init.py under site_packages/gi). but sure, test that out. edit: c:\python37\lib\site-packages\gi>dir volume in drive c has no label. volume serial number is aab9-32ce directory of c:\python37\lib\site-packages\gi 01/02/2022 07:19 pm . 01/02/2022 07:19 pm .. 08/25/2019 05:33 pm 6,688 docstring.py 05/06/2020 04:48 pm 5,241 importer.py 05/06/2020 04:48 pm 9,549 module.py 01/02/2022 07:19 pm overrides 05/06/2020 04:48 pm 727 pygtkcompat.py 01/02/2022 07:19 pm repository 05/06/2020 04:48 pm 13,543 types.py 12/30/2019 11:13 am 1,969 _constants.py 11/06/2020 03:06 pm 2,082 _error.py 01/02/2022 12:19 am 327,168 _gi.cp37-win_amd64.pyd 01/02/2022 12:19 am 19,456 _gi_cairo.cp37-win_amd64.pyd 03/30/2021 06:42 am 10,172 _gtktemplate.py 11/06/2020 03:06 pm 13,140 _option.py 05/06/2020 04:48 pm 7,615 _ossighelper.py 05/06/2020 04:48 pm 14,163 _propertyhelper.py 12/30/2019 11:13 am 9,303 _signalhelper.py 01/02/2022 12:19 am 6,246 __init__.py 01/02/2022 07:19 pm __pycache__ 15 file(s) 447,062 bytes 5 dir(s) 8,373,551,104 bytes free",0,0.9865787625312805
1005907479,331,doadin,2022-01-05T17:04:50Z,"we have that same struckture [a link] it is the other folder i'm uncertain about. [a link] [a link] . shows ""directory: c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\gi\repository"" with only a pycache dir and a ""__init__.py"" file im fairly sure there is supposed to be more. again waiting for my vm to finish building to confirm. however if this is the case then we either have to build gtk in the build process or wait for gvsbuild to fix the wheel creation? idk.",0,0.9715909957885742
1005914978,331,mhertz,2022-01-05T17:13:13Z,"sorry doadin, i get myself confused, and forgot what yopu said initially about the import failing because missing file of that gdkpixbuff or whatever, doh :) there should only be a __init__.py there. edit: ...and pycache, though unimportant.",1,0.9797670841217041
1005917331,331,doadin,2022-01-05T17:15:52Z,"with a test python script with `from pyinstaller.utils.hooks.gi import get_gi_libdir get_gi_libdir('gdkpixbuf', '2.0') ` we get ` traceback (most recent call last): file ""c:\test.py"", line 2, in get_gi_libdir('gdkpixbuf', '2.0') file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\utils\hooks\gi.py"", line 35, in get_gi_libdir path = findsystemlibrary(lib.strip()) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\depend\bindepend.py"", line 942, in findsystemlibrary return getfullnameof(name) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\depend\bindepend.py"", line 71, in getfullnameof if os.path.exists(npth) and matchdllarch(npth): file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pyinstaller\depend\bindepend.py"", line 178, in matchdllarch pe = pefile.pe(filename, fast_load=true) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pefile.py"", line 2743, in __init__ self.__parse__(name, data, fast_load) file ""c:\hostedtoolcache\windows\python\3.7.9\x64\lib\site-packages\pefile.py"", line 2808, in __parse__ ""unable to access file '{0}'{1}"".format(fname, exception_msg) exception: unable to access file 'c:\': [errno 2] no such file or directory: 'c:\\' ` which is interesting it seems to just search the dir the script is ran from?",0,0.9915658235549927
1005922843,331,mhertz,2022-01-05T17:22:35Z,"hmm, that dir is not present at all? i don't get where gets that part from? sorry over my head, please let me know if can do something to help test in a vm, but else hope you good people can figure it out :) edit: well, besides hacking the hook of pyinstaller to hardcode correct path... edit2: sorry, other places too, as importing gi fails precedingly, and not same hook there presumably. again, over my head :(",-1,0.974864661693573
1005928585,331,doadin,2022-01-05T17:29:51Z,"yea i think this is way over my head looking at [a link] it searches sys.path for dll's to which in our spec file we extend to include the gtk build folder, so how is it not finding them? again unless its not actually the gtk libs we are missing and it is looking for msvc dll's or something to which again it would be helpful if it told us which dll it is looking for and not finding so we could add that dll's dir to our path.... but that would make this too easy i guess...",-1,0.9030137062072754
1005932331,331,mhertz,2022-01-05T17:34:49Z,"yeah indeed puzzling. i have no input, but would personally try without any pathex's, as maybe trips something up, like that pyinstaller thread i posted before about poisening his own environment - in my many testings of this, i needed zero pathex's, but just all in paths. i just tested a spec today actually without such, and posted it in my edit to forum-thread. hope you succede, or get help from qualified people, thanks again!",1,0.9915382862091064
1005932485,331,doadin,2022-01-05T17:35:00Z,im starting to actually thinking maybe this is a issue of github actions running some command as cmd and some with powershell and therefore we have different path environment variables? im not sure thats a thing? edit apparently the default shell is powershell and we are setting path through powershell way so idk.,0,0.8901811838150024
1005935166,331,doadin,2022-01-05T17:38:45Z,well the test script doesn't use the spec file and also fails so unfortunatly i don't think thats an issue. at least not yet.,0,0.9747740030288696
1005940163,331,mhertz,2022-01-05T17:46:05Z,doh! are you setting paths like so: [a link],-1,0.9786914587020874
1005942064,331,doadin,2022-01-05T17:48:44Z,you might be on to somethinig i was setting them using the normal windows method but in the install dependencies step not the freeze deluge step which that post seems to suggest that they don't carry over between runs. maybe thats it.,0,0.9794031977653503
1005944857,331,doadin,2022-01-05T17:52:27Z,i think i also kind of just confirmed this in my last test we get [code block] which i added print(sys.path) to the test python script and what do you know no gtk folder. i would think that the spec file extending path to include the gtk folder would by pass this but idk.,0,0.9833886623382568
1005950013,331,mhertz,2022-01-05T17:59:13Z,"glad you hopefully figured it out, and thanks for conversation - again, if fails still, please let me know if can do something to help test. take care.",1,0.9934161901473999
1005953430,331,doadin,2022-01-05T18:03:57Z,"-- it seems to be working now, the only issue is the icon file location its not finding but that worst case scenario could be hard coded to the deluge source path. however the gi imports working now. so we have made progress.",1,0.7610854506492615
1005990595,331,cas--,2022-01-05T18:51:51Z,"nice work, much appreciated :tada:",1,0.995662271976471
1005993344,331,doadin,2022-01-05T18:56:07Z,"since this is really close now a few things to note going forward 1. depends on gtk artifact from appveyor/zip file that has the structure like so: gvsbuild-vs16-x64.zip/release/bin gvsbuild-vs16-x64.zip/release/lib etc etc 2. the pyinstaller spec file is coded to a set deluge.ico path specific to github actions checkout 3. i don't know how to use nsis command line args to make nsis produce different installers for x86 vs x64 why was this needed? i had two nsis scripts to change the installer file name so we can provide x86 and x64 installers without confusion of which a user downloaded. and it changes the default install location to ""program files"" for x64 or ""program files (x86)"" for x86 4. currently the gtk build artifacts are built using vs 2019 and python 3.7 so i used python 3.7 in the cd action and the cd action has hard coded locations for python which idk if actions/setup-python provides a variable to get pythons path so we can use that instead to make the builds less python specific or what?",0,0.9132330417633057
1006001076,331,doadin,2022-01-05T19:07:52Z,-- something i can change now is do we want the cd to run on pull requests so we can verify changes easier? or just on tags? do we want to make github releases?,0,0.9926409125328064
1006067051,331,mhertz,2022-01-05T20:50:17Z,"very quickly while you're messing with it anyway, then as per my last edit on forum-thread, using 'pip install .' like deluge official instructions states, followed by 'python setup.py install_scripts', fixes deluge-console working again(freezed i mean), and is more proper installed anyway, without double deluge package folders(one egg one normal, mixing up). i noticed you don't include hidden_imports for gi and cairo, but i guess you've tested that this isn't needed - was previously, but maybe not now with added spec-additions. btw, i tested spec also runs fine in packaging/win32 folder(if shipped there in feature), also icons support relative path in spec btw. you don't have to answer, i know you're busy, but just so you don't need read through my way to long edits on forum about this :) thanks again. edit: yes, hidden_imports for gi/cairo not needed, and sorry realized it was pretty dumb thing to state anyway, after previous long conversation about gi importing issues, doh, but i didn't knew if that option did more than just extra impports, sorry. edit2: last thing, instead of in deluge instructions having user add '--distpath xxxx' additional option to pyinstaller, then can add it to spec, e.g. like i just did in mine, i just set to 'freeze' of cwd(packaging/win) like instructions. i btw changed the analyze code to avoid need import sys when os already imported and does job fine, though not important: [a link] (emulate --clean would need delete build folder i guess, i don't really see why, but regardless) anyway, disregard and concentrate on the important stuff of-course :) edit3: very last, promise - just wanted to end with uploading my final spec, where i added the ""--clean"" code, the ""--noconfirm/-y"" code, and ~50mb savings from unneeded icons(gi hook copies all from share), i didn't touch locales as didn't neither in unofficial installer i see. [a link]",0,0.974087655544281
1007058338,331,doadin,2022-01-07T01:07:09Z,adwaita icons are being used.,0,0.9883440732955933
1007069619,331,mhertz,2022-01-07T01:36:27Z,"sure doadin, and obviously your call, but i just did this to unofficial installer for 1+ years now, without errors reported, well not my builds atleast. i left the 'scalable' folder there, and index file, which has all the symbolic deluge icons as far as i know, or there would be errors in deluge-debug.exe which i checked. honestly don't know if this is particular correct, but however does work i know. as said gi hook copies much of share over needlessly, just in case. thanks for reply, and again, ping me if can help somehow.",1,0.9762593507766724
1007104661,331,doadin,2022-01-07T03:07:03Z,"sorry didn't see you left scale and the index, working on nsis atm then i'll test that in a min.",-1,0.9894673228263855
1007348293,331,cas--,2022-01-07T11:51:34Z,"i would not want this to run on every pr (fine here for testing), tags might be useful (those without `-dev0`), if we also have a manual option to run it that is good. oh the pr runs could be gated as we did for the security tests so would need to include a pr comment value to run it.",0,0.7439369559288025
1007353845,331,darkred,2022-01-07T12:02:07Z,"/off-topic greetings *sorry in advance for this off-topic, but i couldn't find any other way to ask your opinion directly.* i'm so glad for the ongoing development of deluge, and i've been constantly wondering: why not enabling issues and discussions in this repo? and, also why not migrate issue tracker from trac to github? i believe it would help in getting more attention to the project and more people to actively contribute in deluge's development. i made this thread in the forum [a link] 2.5 years ago, but never got a response from a dev. how do you find this idea? /off-topic",1,0.757193922996521
1007359659,331,doadin,2022-01-07T12:12:09Z,-- it should now have this not sure about this. also i don't know how to make the nsis change its providing a def but idk how to process it in the nsis script.,0,0.9297463893890381
1007362687,331,doadin,2022-01-07T12:17:01Z,-- also is there a version of python we want to target for builds? i currently have a github action for gtk setup to target 3.8 which should be ready to copy over if you want to. and it should be easy to change the deluge cd action as well now. i think you have test run on 3.8? looks like python supports each new version for +1 year from the last and 3.8 is supported till 2024 so that could be a decent target. i see deluge code was updated to work with 3.10 though so we could go for newer.,0,0.8299015164375305
1007366997,331,cas--,2022-01-07T12:24:04Z,very offtopic.. i have considered it but also don't want to be at the whim of github... for the windows build i am happy with almost latest python version e.g. 3.9. we want something that is stable and not outdated as you mentioned. if it's easier to stick with 3.8 then that is perfect with me :+1: obviously deluge needs to support much older versions so it's python 3.6+ now,1,0.9867686629295349
1007379350,331,doadin,2022-01-07T12:44:19Z,"-- 3.9 sounds like a good target its not latest but has had a year to get stable and get improvements, and also only a year old so not too dated. i'm starting a gtk build with 3.9 now to test make sure it goes ok, with how its setup now its just change the number in three places for each job in the action file and off it goes. and for the deluge action only in one spot per job.",1,0.9257403016090393
1007388942,331,doadin,2022-01-07T13:01:26Z,-- as of now as long as the gtk build with python 3.9 goes ok all i need to do is adjust the url of where to get the gtk.zip build from.,0,0.9791628122329712
1007498572,331,doadin,2022-01-07T15:31:23Z,-- sorry not sure why [a link] is'nt showing as the current changes.,-1,0.9822167158126831
1007538687,331,doadin,2022-01-07T16:18:30Z,"-- they use github actions but don't release builds. i was building on appveyor but switched to github actions so really if you fork the repo you can go with either. appveyor build process doesn't make github releases only appveyor artifacts. the github actions i updated recently so it will make a release on tag, downloading that release i'm not sure of a better way other than just downloading from a url. nothing custom to it really just skip a few thing we don't need to build, could also be more things we don't need to build but that i'm not sure of.",0,0.9397784471511841
1007603473,331,doadin,2022-01-07T17:45:03Z,-- the github action i have for gtk currently build on any tag and now has two strategy matrix. ` - platform: x64 vs_ver: 16 pythonversion: 3.9 - platform: x86 vs_ver: 16 pythonversion: 3.9 ` and the end result is a github release with two zip files in the format: gvsbuild-pypythonversion-vsvs_ver-arch.zip the deluge build will download w.e. url and name the file gtk.zip so only the url has to change there when we want to use a new build(unless we wana rename the zip to something more generic and upload to deluge ftp or something). i also updated the script to scan for gtk python wheels so we no longer have a static pycairo and pygobject wheel which includes version and things now it will just find them and install what/if it finds any in the gtkbuild/python folder.,0,0.9823306798934937
1007696999,331,doadin,2022-01-07T19:58:48Z,so it appears if you re-run a build the release with delete the old and upload the new so the url doesn't have to change with using github releases for gtk. alternatively could use something like [a link] to just download the latest release.,0,0.9940226674079895
1007900819,331,DjLegolas,2022-01-08T07:18:05Z,"-- i think we can build everything for py3.6-3.9 (don't know if py3.10 will work, not to mention 3.11), and libtorrent 1.2 and 2.0. it all depends on gtk to be built for all of the python versions (and it look like is already compiling it to 3.7-3.9). as a result, we will have every supported python version with every supported libtorrent (still a wip :sweat_smile:) the difference is only in the `matrix` section in the `cd.yml` file: [code block] and the gtk zip download link was moved to the `install dependencies` section (the only place it is needed) as follows: [code block] in addition, need to change the artifact zip file name like so: [code block] the end result: [a link]",1,0.9797479510307312
1007953321,331,cas--,2022-01-08T10:46:19Z,"as a stand-alone install we don't need to build other python versions, we pick one that is stable and is compatible with deluge dependencies. it might be worthwhile having a libtorrent 2.0 for testing but not sure as a wide release :thinking:",1,0.9108298420906067
1007965087,331,DjLegolas,2022-01-08T11:31:05Z,"it's a valid point, and it is you decision at the end :1st_place_medal:. some think points: - create a libtorrent2.0 variant which will be always marked as testing release, up until we finish with the fixes for it. - add the matrix for the ci phase, and test on all supported python versions (>= 3.6), also on lt1.2/2.0. - - change your `cd.yml` file for gvsbuild, for better and shorter file, to: [code block]",1,0.9281684160232544
1008198514,331,doadin,2022-01-09T00:38:18Z,"-- the build process seems to work with anything python 3.7-3.9, except for with 3.7 & 3.9 the end exe's give this issue: ` traceback (most recent call last): file ""deluge-script.pyw"", line 33, in file ""deluge-script.pyw"", line 22, in importlib_load_entry_point file ""importlib\metadata.py"", line 524, in distribution file ""importlib\metadata.py"", line 187, in from_name importlib.metadata.packagenotfounderror: deluge ` from what i read this was due to a change early on in 3.9 which now seems maybe backported to 3.8.(googleing gives a lot of results from people saying 3.9 issue, went to 3.8 and its fine) i changed the build back to 3.7, after trying 3.8 and 3.9, and its working fine.",0,0.9933472871780396
1008203779,331,doadin,2022-01-09T01:01:22Z,"i am getting [a link] when adding datas += [ ('deluge', 'deluge-2.0.5-py3.7.egg/deluge') ]",0,0.994573175907135
1008206983,331,mhertz,2022-01-09T01:24:21Z,"yeah, sorry, that was from pretty old edit, and at the time i didn't really know it was supposed to build from packages/win, and so just changed to build from deluge-source dir, as you did at time, instead of my previous testing direct from scripts dir. anyway, that's old as said, and i posted better solution later, so unneeded. also as said, for fixing deluge-console, and to follow general best practise guide-lines, imho consider installing through 'pip install .' or alternatively, if must use setup.py, then i checked works through adding install command '--old-and-unmanageable', or alternatively what pip does, and use '--single-version-externally-managed --record record.txt' to setup.py. last, the excludes you added won't work, and will need e.g what i did i.e folders not supported there. took me a bunch of tests to get working, though never claimed being the brightest neither :) edit: sorry for being vague, i meant this won't work: 'excludes=excludes,' - the excludes list itself is fine, but needs used in other way, e.g like the for loop and list comprehension or whatever called.",-1,0.976090669631958
1008208822,331,doadin,2022-01-09T01:38:24Z,thanks!,1,0.8631753921508789
1008211896,331,doadin,2022-01-09T01:59:51Z,"sorry if you saw my comment about gtk build i figured it out, so nvm. :)",1,0.9302834868431091
1008216090,331,mhertz,2022-01-09T02:33:03Z,"doadin, i'm going to bed now, pretty late/early here in my side of the woods, but just wanted to say that in my spec/setup i have crypto dlls auto-picked up and used e.g. added a https tracker manually and checked ""announce ok"", which won't happen without. just noticed you messed with the pathex/datas additions. again, amazing work all around!",1,0.9961238503456116
1008222380,331,doadin,2022-01-09T03:33:48Z,unfortunately in github action environ its not picking up the x64 dll for openssl even though its in the os path environment variable.,0,0.5632928013801575
1008293597,331,mhertz,2022-01-09T13:01:34Z,"doadin, quick note just, hope okay. i wanted to look into the stuff you mentioned regarding newer python's making issues, so just started doing little testings. i always thought probably being issues when going to py3.8 and above(but wanted wait to if you maybe asked for help regarding it), tbecause in unofficial installer i had to specifically code into __init__.py os.add_dll_directory(dir),well used *.pth initially but regardless, because of changes in how python worked in those versions, to avoid dll mismatch i also was plauged with initially with bug-reports by forum-users before py3.8. i wasen't sure if would work anyway for you, without mods, because the gvsbuild devs included os.add_dll_directory into __init__.py's of pycairo and pygobject after i raised that there where newly introduced issues, and one of the devs explained me the pitfall, and made/comitted fix still there i.e. checks path for needed gtk dll's and add the dirs found into os.add_dll_directory. there can still then be mismatches, because some have dirs in path from other apps, with said dll's, or in system32 with incompatible versions, completelly breaking deluge(system32 takes precedense always, before this os.add_dll_directory change introduced, saving me from lotta trouble at the time), so i in my scripts/builds(unofficial installer) patch that out of __init__.py of pycairo/pygobject and in deluge's __init__.py i hardcode the bin dir of gtk , which i included in app dir, as only call to os.add_dll_directory happening, as if keeping the pycairo/pygobject's __init__.py's and add mine infront or some other place, then the docs state it cannot promise load order of multiple os_add_dll_directories, hence i did it that way just in case. anyway, i suspect you need openssl location in os_add_dll_dir, but if having it next to the libtorrent.pyd under site-packages, then works regardless, so i just had my scripts(unofficial installer) copy the two built openssl dlls to there, but could also be copied to gtk bin dir as included in os.add_dll_dir if not patching out the mods by pycairo/gobject, or if override and doing it yourself like i did. forgive me for having a problem explaining stuff shortly :) so, initially deluge couldn't import libtorrent, even unfreezed with python 3.9.9, but after copying dll's in place next to libtorrent.pyd, works, and gets picked up through freeze because is next to the libtorrent pyd, most likely would also have worked if copied to gtk bin dir, but whatever. i'm thinking this possibly is your github-actions openssl freezing issue also, because maybe messed with newer python's when happened, sorry if wrong, but regardless, wanted to say that works for me atleast with my first test of py3.9.9, just waiting for freeze to finish(so path for openssl not enough for even unfreezed, is my point, on py3.8 and up - also with deluged not even loading the __init__.py's of pycairo/pygobject as not gtk app). okay finished freezing, and fails loading deluge because error stated in gi's __init__.py as paramter incorrect for add_dll_directory it states - as said it by default enumerates path for cairo/gi libs(cairo.dll) and adds those found to os.add_dll_directory, which on clean system is bin dir of gtk, but that is failing now - maybe pyinstaller sets up a fake environment, where such isn't allowed i.e. parsing through path, or using other dll's outside freezed dir, and regardless shouldn't work like that freezed obviously anyway. regardless might work if patching that out and using e.g. my deluge __init__.py, or some other trick, but i'll check it out and post back when progress. this must also have been brought up with pyinstaller in general before i'm sure, but didn't look it up yet. sorry again for wordyness. last, why it's not breaking before(under py3.8) with wrong parameter error, is that it check if os.add_dll_dir attribute available, and if not skips, in __init__.py of pycairo/pygobject, so first time using that section from there now, as upped python version, so attribute available. i'll make some testing and will make edits when hopefully finding something that works, and try to keep short, unless you beat me to it with solution of-course - and sorry haven't looked at your latest commits, so hope you haven't already fixed, and i'm speaking redundantly here. thank you. edit: okay some progress atleast - my first handfull tests failed for some reason, but for now atleast, then i just kept the default pycairo/pygobject __init__.py contents under site-packages gi/cairo of unfreezed deluge-install, and added two lines to each of them, i found by googling it, by one of the gvsbuild devs on pyinstaller bug-tracker, not the one i talked too initially which added the patching, but anyway, and he had issues with a frozen gtk app, because of the gi __init__.py gvsbuild patches, and he posted a few lines as workaround in end, which worked and i used here. in short there's added ';' after your path, can only be seen in cmd(echo %path%, and not in advanced system settings/env-vars), and this makes the path parsing trip up(in pygobject/pycairo), so the added code removes that semicolon at end, if there, and so i now finished a py3.9.9 freezed build semingly working, only checked deluge.exe but still, without errors shown. if finding more later, when time, i'll add. i don't like the path parsing still, as point of breakage, though i'm not sure how much pyinstaller bootloader/strapper allows interference from outside regardless, or if maybe first the freezed dir takes precedense anyway, so no concern - i did rename the gtk and openssl dirs on system, so wasen't working from path anymore, and then still worked, so not sure that even is used, and anyways as said, freezed dir probably takes precedense anyways, so maybe ok in end here. i added: if os.environ['path'][-1] == ';': os.environ['path'] = os.environ['path'][:-1] just over 'added_dirs []' in both __init.py's of pycairo/pygobject, as only change, and had installed deluge through 'pip install .' and 'python setup.py install_scripts', before 'pyinstaller deluge.spec', with my spec, and openssl's there also.. edit2: i reported it to gvsbuild here: [a link] - didn't make pr as maybe they want to do it differently, i dunno. i'll do some tests later when have time, to see if the current pygobject/pycairo contents(the old one) is a point of failure in freezed app i.e. i add non-compatible cairo.dll or whatever else referenced into system32 or alike, and see if used and breaks or not, and if not, then can just use as is, and apply patch untill upstream fixes it i think. your choise of-course. i haven't tested all exe's yet, so do that also, later when have time, and then will report back, for last time in this :)",1,0.920871913433075
1008305875,331,cas--,2022-01-09T14:15:01Z,i just created a deluge repo for storing the builds: [a link] it's just run manually for now for a single python version but if you are having issues can extend it to build other python versions...,0,0.9909118413925171
1008316345,331,doadin,2022-01-09T15:15:15Z,"-- yes i still have not had the time to figure out the issue with newer python versions so would be nice to at least extend that to include python 3.7 so we can get builds out sooner rather than later? it's been a long time since we have seen a new windows build. i also updated to address all but 2 of your comments, if i missed any let me know, and let me know what you thing about those two.",0,0.9563668966293335
1008328612,331,doadin,2022-01-09T16:16:29Z,"3.8+ gives: ` traceback (most recent call last): file ""deluge-gtk-script.pyw"", line 33, in file ""deluge-gtk-script.pyw"", line 22, in importlib_load_entry_point file ""importlib\metadata.py"", line 524, in distribution file ""importlib\metadata.py"", line 187, in from_name importlib.metadata.packagenotfounderror: deluge ` which from some googleing suggests using pyinstaller copy_metadata would fix but unfortunatly does not.",0,0.9869332313537598
1008336269,331,mhertz,2022-01-09T17:01:30Z,"doadin, it doesn't here, so either is a gtk-actions issue, or which i much expect, that you don't install deluge like me. honestly don't understand why you insist on installing through setup.py and not through pip, or add flags to setup.py that don't need you to delete requirements.txt as workaround for it installs as an incomplete egg which needs extra files imported which results in two deluge packages confusing everything etc, not to mention breaking deluge-console, not the most important on windows i'd speculate, but nonetheess. your call of-course, and i'll go ahead and make the pr gvsbuild asked me to, upstream, in mean time. edit: i mean freezes incomplete, not installs - sorry bad wording. edit2: i could reproduce your error when installing deluge from straight 'python setup.py install' and freezing(and i remembered to rename/delete requires.txt also.",-1,0.6917005181312561
1008342279,331,mhertz,2022-01-09T17:38:56Z,"thanks for reply, and i sincerly apologize my ton in last post, didn't mean it in any way negative honestly, and for the record am not in doubt about you being much ahead of me regarding development, to say in the slightest :) i have only tested stable deluge, and will make edits if finding something, to use for you or not of-course at your discretion - thank you :)",1,0.9962316155433655
1008342651,331,doadin,2022-01-09T17:41:21Z,ill be the first to admit i don't know very much i am just trying to help the community.,-1,0.5512266159057617
1008343868,331,doadin,2022-01-09T17:48:31Z,"-- in addition to the changes i mention earlier from your review, i have added changes has provided and we can use python 3.8+ now. also the build process is cleaner and simpler. the only adjustment left is the spec file libssl-x64 include. which i'm not sure why exactly it is needed. github actions has the x64 lib in its $env:path so why pyinstaller is only getting the 32-bit bin and not the x64 i'm not sure, maybe pyinstaller searches system32 first and it finds a libssl and uses that and moves on? i'm not sure.",0,0.4958173632621765
1008344019,331,doadin,2022-01-09T17:49:38Z,the only change i have not pulled in is for removeing the share folders and honestly i an not sure what you have it doing and why it needs to run on every script.,0,0.8852419257164001
1008345160,331,mhertz,2022-01-09T17:55:59Z,"indeed, bothered me too :) of-course your call. as said, i think ran 50 runs to even get that working, though probably an issue with me more than anything else. but it doesn't help filtering a.datas, when we have b-h.datas with those icons anyway, getting merged at end - maybe could do something with toc(), but i just got tired of it when having found something working. it goes through all collected files for each step, x.datas, and ""rewrites"" it through checking if matches with the excludes filter, and if not, then adds, and if matches, then strips/avoids - reverse filtering of sorts. no biggie of course, and i'm sure could be done better, e.g. the straight datas, like on top, but couldn't make work. also, maybe cas/you think it's too agressive i dunno, only found it worked as far as could see myself, and has svg decoder in gdkpixbuff loader through librsvg so why include all the pngs additionally, but what do i know. thanks :) edit: just read your previous link - i had only read github homepage, with the pip direction, sorry. edit: well, probably could avoid the for-loop on the scripts not using gtk atleast, as guess no icons collected, but just didn't bother at that point. edit: i had openssl dll's as said in lib\site-packages, next to libtorrent.pyd, copied there by old habit, and so got picked up for me in freeze, but if not having that, then as not in gtk3 dir which gets added to os.add_dll_directory from pygobject/pycairo, then cannot find, as path irrelevant on py3.8=+ so instead of copy over like i do, then could add such os.xxxx call to spec, but you have added something yourself fixing it you said, i honestly haven't looked at your spec yet, but no need then, as you found solution, good job. edit: as said, i haden't yet tested all exe's, though most i.e. deluge, deluge-debug, deluge-gtk, deluged and webui. now i see deluge-console don't work, but i'm guessing it's not that hard fix, but well see. it's missing curses it states, which didn't on <py3.8, so maybe have add a line or to to spec, but i'll test and post if find something.",1,0.9545801877975464
1008351654,331,doadin,2022-01-09T18:38:48Z,"well now im seeing: deluge-debug.exe: ` ps e:\program files\deluge> .\deluge-debug traceback (most recent call last): file ""deluge-debug-script.py"", line 33, in file ""deluge\ui\ui_entry.py"", line 39, in start_ui ui_entrypoints[entrypoint.name] = entrypoint.load() file ""pkg_resources\__init__.py"", line 2449, in load file ""pkg_resources\__init__.py"", line 2472, in require file ""pkg_resources\__init__.py"", line 772, in resolve pkg_resources.distributionnotfound: the 'mako' distribution was not found and is required by the application [44432] failed to execute script 'deluge-debug-script' due to unhandled exception! ` deluge.exe: ` traceback (most recent call last): file ""deluge-script.pyw"", line 33, in file ""deluge\ui\ui_entry.py"", line 39, in start_ui ui_entrypoints[entrypoint.name] = entrypoint.load() file ""pkg_resources\__init__.py"", line 2449, in load file ""pkg_resources\__init__.py"", line 2472, in require file ""pkg_resources\__init__.py"", line 772, in resolve pkg_resources.distributionnotfound: the 'certifi; sys_platform == "" ` all the other exes work. maybe i missed something. edit: also using ""working"" there isn't exactly true deluge-console loads but freezes and becomes unusable. leave [a link] here as last working build so i can keep track.",0,0.988944411277771
1008353776,331,mhertz,2022-01-09T18:51:56Z,"doadin, i'm sorry, when i said ""working"" i meant in the previous py-versions - i did say that i haden't tested all exe's yet in py3.8=+, but sorry if formulated badly - probably - sorry. . there are some strange issues - first deluge-console seemingly works if after installing deluge unfreezed, then also installing windows-curses - that didn't need happen on <py3.8. then when that is installed, then works, i think, need test more, but shows some initial error about libintl and referenced before assignment, also deluge-debug states such - though seemingly works - i just think need intl dll and whatnot other dll in main dir, that i used to copy there with unofficial installer, but will take a look. last, atleast unfreezed, then now have deluged showing window open all time, like the debug.exe should - i remember having this issue along time ago, and got patches by tobbez fixing this, so maybe needed here again, i dunno - hmm, no i didn't use such in last unofficial build - now i'm getting confused, will write back later, and sorry if making issues for you doadin, didn't mean to. edit: the issue with window staying open, is a bug in deluge i believe, and need fixed, i have the patch-""method"" by tobbez, i didn't see it because use alternative exe loader and not stock, and edits shebang to pyw version, so think that will need changed, and should be reported, just hate making prs as no programmer, just slight tinker, and no issues section on deluge well bug-tracker on trac. anyway, i'll test some more, and sorry again, i didn't remember these issues. edit: i'm sure you know, but deluge-console only work non-interactive on windows, or atleast used too - so i always tested cli args.",-1,0.9906619191169739
1008357929,331,cas--,2022-01-09T19:17:47Z,"i'm sorry i'm finding it very hard to keep track of these conversations so helping out is tricky. can we try and keep a track of exactly what is working and what is not and be very specific about each issue and what the potential fixes are. also when making commit updates it would be useful to actually see what and why changes are being made rather than rebase to single commit. it might also be useful for workarounds in the code to have terse comments about what is being fixed. would you mind updating the list of tasks remaining in the pr description and tick them off as done. we can then decide if they are a priority or not. we want a minimum viable stable installer for windows therefore don't need to chase latest versions: * if there are too many issues with python 3.9 then don't work on it, use python 3.7. * we only need to verify that the `x86` installer works since it's compatible with `x64` thus concentrate on that. * i would also prefer if we used libtorrent 1.2 rather than 2.0 again for stability * i don't think reducing the installer size is a priority and can come later please provide a bit more information on error and fixes by providing traces, code snippets and links to files. avoid sharing links to issues that are not github.com since those are sham sites making money via ad revenue e.g. giters.com and also the linking between github issues fails. the deluge-console should work on windows using windows-curses now",-1,0.9906348586082458
1008360760,331,doadin,2022-01-09T19:37:48Z,"-- i'm just going to do one last rebase to go back to what we had/what you reviewed if we find a way to improve on that, that doesn't break things then we can go from there. this new way broke two things in an attempt to just use a newer python version. just going to scrap that and go with 3.7.",0,0.9643113613128662
1008361614,331,doadin,2022-01-09T19:44:28Z,-- ok from here everything is how you last reviewed. with the changes you requested.,0,0.9901754260063171
1008361765,331,mhertz,2022-01-09T19:45:33Z,"i apologize cas. py3.9.9 with my spec and install, has no issues in freezed version as far as i see now. in unfreezed is having issue of reporting intl dl translation issuel, but works, though as kinda off-topic here i guess, when not in freezed, then i didn't post output, can on request. only thing is that the freezed deluged works because i defined console=false in spec - bit it ends in py, not pyw, so default windows exe loader/wrapper loads through python.exe not pythonw.exe making cmd window open in unfreezed- again i guess of-topic as not in freezed. all 8 exe's tested working. deluge-console only works non-interactive, for me, in all my tests, both here and in unofficial, and in ""real install"". spec used: [a link] i add unfreezed errors just in case, but again, no issue in freezed version. [code block]` [code block]`",-1,0.9583547115325928
1008361953,331,mhertz,2022-01-09T19:46:40Z,"i'm sorry, didn't see doadin/your reply, sorry guys, i'll but out and stop derailing, and only comment upon request. thanks and sorry.",-1,0.995105504989624
1008362901,331,doadin,2022-01-09T19:53:46Z,i don't think anyone really minds help but i had a build that worked only thing not tested was deluge-console which didn't work in deluge 1.3.x anyways so imo not a huge lose(hard to lose something you didn't really have as far as most users are concerned). the only thing really needed is deleting the requires.txt not really a big deal imo. nothing done here has to hack/slash gtk or exe loaders or anything. -- updated to use libtorrent 1.2.15,1,0.6819763779640198
1008363687,331,doadin,2022-01-09T19:58:56Z,"i think the only reason why the openssl dll addition is needed in spec is because of the mass amounts of programs in path that have a version of those dll's. so we can leave it as is, or i can reduce the path env in script to only include dirs we need. either way i think a change is needed and the one we have isn't that bad. not my call though i'll do what ever. edit: imo trying to edit the path env could be more trouble then its worth.",0,0.8817265629768372
1008517170,331,doadin,2022-01-10T03:32:31Z,-- something i have found out. which i updated the tasks. 3.9(maybe 3.8 as well?) delete deluge\deluge-2.1.0.dev15.dist-info\metadata: requires-dist lines to work 3.7 delete deluge\deluge-2.1.0.dev15.egg\requires.txt to work.,0,0.9852493405342102
1008526430,331,mhertz,2022-01-10T04:06:54Z,"good job finding what works for you :) the errors i posted in unfreezed was fixed in freezed because intl.dll was in the gtk-dir added through os.add_dll_directory() and gets included in freezed main-dir. btw, in your gvsbuild-scripts, could use something like: [code block]` untill added in gvsbuild or upstream. powershell translated. thanks.",1,0.9966340661048889
1008531262,331,doadin,2022-01-10T04:17:33Z,"i havn't had any issues with the build scripts, however if we wanted we could use that first patch idea applied to the .spec file to add the openssl-x64 dll's to build and remove the 32-bit ones maybe. and that could maybe be a less peticular system dependent change unlike my check for if running on github actions.",0,0.9888631105422974
1008534575,331,mhertz,2022-01-10T04:24:35Z,"yes, try that - i thought i would need an os.add_dll_directory addition in spec for including openssl, but didn't need it for some reason. i don't understand why you don't need patch the pycairo/pygobject, as is the thing that breaks deluge on py3.8+, unless you have no semicolon in path ending(echo %path%) - and from the error you posted yesterday, i believe you have. regardless whatever you can make it work with :)",1,0.9812538623809814
1008535804,331,doadin,2022-01-10T04:26:55Z,i think you hit the nail on the head there i think its a os path setup issue not a gtk issue.,0,0.5986679196357727
1008539434,331,mhertz,2022-01-10T04:37:09Z,"i have also openssl dlls without 64 in name in my freezed dir, didn't think you where talking about that. this means that pyopenssl from python got seen and imported with deps, and not the x64 we build ourself only for libtorrent's usage - we need both, or else e.g. yarss will break. edits: good idea about that trick could be used, sorry for being dense. * bundles the extra missing vcredist file during freezing i.e. msvcp140.dll, so runtimes should be okay/ticked-off. * for me, the specifically thing solelly that controls if x64 dll's pulled in, is: [code block]` short spec example, just to see dll's(for me): [a link] (deleted too much talking before...) * i think you use that already above, but also i use homemade openssl x64, but if you use premades, then maybe those you use are not linked to/importable - e.g. built different like with/without asm or something? dunno... can check with premades later when time e.g. shinning. * yes, i can reproduce your issue, from installing openssl-x64 from shinning, and selecting yes to the default install prompt of copying the x64 dlls to system32. then fails pull in x64 dlls from spec. when manually deleting the two x64 dll's from system32, then works again, despite there also being x32 versions there still, which i didn't delete. if not deleting them(x64), then even breaks my own home-built openssl from pulling in. light shinning package(as used in github-actions vm's) or full, doesn't make a difference. as is temporary vm(github actions), then just delete the system32 x64 files before firering up pyinstaller in your setup, i'm thinking.",-1,0.973962128162384
1009597871,331,doadin,2022-01-11T04:52:37Z,-- the opensll dll's it is picking up is in fact a x64 bin it is just not named as such. how we want to deal with this im not sure. however if we just name them as libtorrent expects we don't need that line in spec file.,0,0.9725855588912964
1009611929,331,doadin,2022-01-11T05:26:56Z,from my testing i believe pyinstaller is picking up the dll from c:\hostedtoolcache\windows\python\3.7.9\x64\dlls which despite being x64 does not include that in the name. from testing i see that in that folder for x86 and x64 the name remains the same simply libssl-1_1.dll. it also appears openssl 1.1 is used from python 2.7-3.9 newer versions may use a different openssl version i'm not sure.,0,0.9810823202133179
1009655516,331,doadin,2022-01-11T07:07:16Z,using a dependency walker it shows only x64 dll needed yet if lib(ssl/crypto)-1_1.dll is removed it fails to import libtorrent. this must be a pyinstaller issue i guess?,0,0.9905988574028015
1009782011,331,cas--,2022-01-11T10:00:23Z,"thanks for looking into this, i like that fix. we should let libtorrent know about this too but might be tricky to resolve without breaking it for someone... as long as we document it, we can revisit the issue",1,0.9908857345581055
1009785135,331,doadin,2022-01-11T10:04:10Z,-- yea a dependency walker shows the libtorrent.pyd as only needing the x64 so it might actually be a pyinstaller hook maybe? i'm not sure. edit: what i think is the build process is picking up a 64bit dll on its own. and i'm guessing whatever process makes the libtorrent wheel links against an x64 named one and if it didn't we would likely be fine.,0,0.9797424674034119
1009917154,331,doadin,2022-01-11T12:27:25Z,"if we change: cd.yml: - under install deluge: change the two lines to: pip install . python setup.py install_scripts - under freeze deluge: remove get-childitem $env:github_workspace\packaging\win\freeze\* -include requires.txt -recurse | remove-item delugewin.spec: change lines 20 to: datas += [ ('../../deluge/ui', 'deluge/ui'), ('../../deluge/plugins', 'deluge/plugins') ] edit: long story short python 3.7 and 3.9 both need metadata file edited and both have issue running deluge-console. removing metadata will not work it needs to be edited, this makes the process a little more complicated but 100% doable if we want. also just figuring out why this is would obviously be very helpful. this is what we get: python 3.9: deluge.exe & deluge-debug.exe: [code block] unless you remove dist lines from deluge-(build version number).dist-info metadata if you remove just pyopenssl it will just fail stating another was not found all other exe's are fine as far as starting. deluge-console: starts but seems to freeze with this error seen: [code block] python 3.7: all exe's fail with: [code block] unless you remove dist lines from deluge-(build version number).dist-info metadata if you remove just pyopenssl it will just fail stating another was not found deluge-console: starts but seems to freeze with this error seen: [code block]",0,0.9928901195526123
1009920801,331,doadin,2022-01-11T12:32:21Z,i know that was really long but we can get a wider compatibility with those changes + what we have now. i think some of the other issues where due to going back and forth with pyinstaller changes. i really should keep the changes simpler and test more. i should not have rushed this. sorry. if the above is hard to follow the changes can be seen here: 7603605c5b0ed3d87381e668df3b782598477bed,-1,0.993548572063446
1010123805,331,doadin,2022-01-11T16:15:47Z,"still running tests to double check my work but i think 1066eb69340bc386a57950a502585245d2267ac2 is a solution to getting 3.8 and 3.9 builds. i don't have gtk 3.8 builds to test but i've been testing with 3.7 and 3.9. edit: ok i am confiming i have tested a few times 1066eb69340bc386a57950a502585245d2267ac2 combined with what we have makes working builds, with just that deluge-console bug remaining.",0,0.9076871871948242
1010176805,331,doadin,2022-01-11T17:08:28Z,updated first post/task list with more info.,0,0.990139365196228
1010958373,331,mhertz,2022-01-12T11:45:52Z,"forgive me for speaking uninvited, but really hard continuing holding in helpful info honestly. i'll be short/consize from now on(if invited), promize. * metadata needs patched only because missing metadata, both in ""requires.txt"" issue of py3.7, and ""metadata"" of py3.8+, and avoided entirely by in spec adding said metadata back through: [code block]` * i made prs at gvsbuild + upstream, but untill merged, then can add yourself, if deemed neccesary. it breaks deluge starting if in same dir as deluge and having trailing semicolon in path(only seen from 'echo %path%'), as some installers add - test e.g. from freezed dir: [code block]` [a link] * deluge-console works only non-interactive on windows, just like deluge 1.3.x, sorry if thinking i ment all worked(though cas says it should now though). * unimportant, but the openssl without x64 comes from python itself/pyopenssl(and needed for yarss2 etc to resolve https), and the x64 named is for libtorrent, so no pyinstaller/libtorrent issue(should report to python to fix there unusual naming). good job fixing by copying over! as said, deleting the x64 from system32(or whereever interferring at your end), plus full collect_all line in spec, also fixing this, but better way from doadin imho. * if ever finding more files missing/issues, then use the collect_all for deluge line from docs i always did, though currently doadin's way is better, as saves 1mb install size. hope ok, but will stop post uninvited again now. thanks doadin, awesome job as usual! :)",-1,0.9901986122131348
1010973810,331,doadin,2022-01-12T12:01:07Z,"thanks, i will test this. i have been trying to get on irc more, if you would like we could work on this more there. though honestly seems pretty close to a good change imo.",1,0.9920124411582947
1010977740,331,mhertz,2022-01-12T12:05:55Z,"thanks alot doadin, appreciate your post alot! i don't really have more to add honestly, never used irc honeslty neither, so please just ping me if you think i might now/test something, or feel free to always email me, or deluge-forum pm. i'll let you finish your awesome job in peace. take care :)",1,0.9971332550048828
1011178729,331,doadin,2022-01-12T15:44:25Z,"i tested 8 builds python 3.7-3.10 both x86 and x64 and found only the same issue which exists with old and new method. plugins execute & extractor: [code block] all other plugins start fine.(including one external, didn't not test more than that) stats plugin causes: ` (deluge:18800): glib-gio-warning **: 10:51:08.582: win32 session dbus binary not found: e:\program files\deluge\\gdbus.exe ` to print in console but seems to work. enableing or disabling plugins cause: ` traceback (most recent call last): file ""deluge\ui\gtk3\preferences.py"", line 1140, in on_plugin_selection_changed self.builder.get_object('label_plugin_details').set_text( typeerror: argument 1 does not allow none as a value unhandled error in deferred: `",0,0.9831730127334595
1011260064,331,mhertz,2022-01-12T17:01:34Z,"i apologize doadin, i tested many of the plugins finally worked, including some 3'rd party ones, and was so happy that forgot test each and every one doh! the last error is not important and also unfreezed, i reported some time ago here with own fix: [a link]",-1,0.8571040630340576
1011271338,331,doadin,2022-01-12T17:13:20Z,"all good, i did the same thing :) . in changing so many things i saw the plugins i use enabled and didn't test though enough. thats why i went ahead and made builds and tested python 3.7-3.10 x86 and 64, i don't want leave anything untested. appreciate the link to the ticket.",1,0.9971420168876648
1011278815,331,doadin,2022-01-12T17:21:25Z,[a link] look like a good change to address this?,0,0.892771303653717
1011301134,331,mhertz,2022-01-12T17:48:29Z,"i'll narrow it down and make short edit, but just posting quick to not waste your time if you're also running testings. all plugins work with these added, and as said some is redundant obviously: [code block]` about your fix, thanks mate, and for asking me, and check it out in a bit, though i'm not the one to ask as not ""good"" like you guys, but much appreciate you asked me :) edit(s): quick testing shows your python-setuptools fix working great, thanks mate!. * you can narrow further down if wanted, but i just use same for deluge('collect_all' from docs), and same here for twisted fixing the two failing plugins: [code block]` * just in case, don't begin using my icon-cleaning code unmodded/without-addition(s), as noticed one ""media-playback-pause"" adwaita-icon reported missing when enabling ""toggle"" plugin.",1,0.9967136383056641
1011311953,331,doadin,2022-01-12T18:01:58Z,i'll test in a bit if that works the task list is getting pretty small :grinning_face:,1,0.9763081073760986
1011373888,331,doadin,2022-01-12T19:20:21Z,"i think as far as icons goes the biggest, safest one to remove i think is cursors. we will have to look into or just leave em. its part of the theme and who knows what random plugin or something might use an icon from the theme so idk.",0,0.944471001625061
1011403842,331,doadin,2022-01-12T20:01:20Z,really just down to one more item needing fixed. thanks so much for your help!,1,0.9935867190361023
1011424939,331,cas--,2022-01-12T20:28:57Z,i have just fixed the plugin description issue [a link] so no longer need bd3502bb447 i have also fixed the `libintl` error that was reported by d2390cd24729 however that would only occur if dll was missing... :slightly_smiling_face:,1,0.9865084886550903
1011428856,331,doadin,2022-01-12T20:34:06Z,"-- i just noticed, ill update this. things are looking pretty complete still need to do some cleanup. mostly being the plugin fix adding data hopefully can at least slim it down. and still waiting for that twisted issue to get fixed i really droped the ball there, but we can just use a fixed build of our own for now not a huge deal.",1,0.7446220517158508
1011481266,331,doadin,2022-01-12T21:46:38Z,"-- as long as everything is fine your ok with how its all done, other than cleaning the commits up i think this is ready.",1,0.5746871829032898
1011489879,331,cas--,2022-01-12T21:59:58Z,i'll review it tomorrow but a quick skim seems good to merge! i've setup my windows vm again to check how it looks thanks for all the effort in resolving this and the details provided for each problem has been really useful :thumbs_up:,1,0.9965798258781433
1011491387,331,mhertz,2022-01-12T22:02:20Z,", thanks! :) i'm running vanilla here, no mods, and since py3.8+ then without me adding os.add_dll_directory() then not finding the dll from gtk, same with openssl for libtorrent(i.e path irrelevant) - the gtk py-bindings runs that call(as patched in by gvsbuild as workaround) , but libintl requested in deluge before that, or so i'm theorizing atleast, as sure have dll. thanks again. edit: above is unfreezed, like initially reported.",1,0.9970036149024963
1011497786,331,doadin,2022-01-12T22:11:44Z,cool. i'm not gonna make any more changes other than cleaning up the number of commits.,1,0.9533178806304932
1011790062,331,doadin,2022-01-13T04:37:44Z,"-- i combined some of the commits that aimed to do the same thing so its done in 5 commits now vs 12 so its still seperate to see the process that happened to implement fixes, idk if you like this better or not or want it reduced even more? or maybe this is worse? i saved a copy of how it was in a branch on my fork if you don't like it like this.",0,0.9519081711769104
1011795238,331,doadin,2022-01-13T04:53:19Z,"the only thing not separate is the process we went through to be able to go from py3.7 to newer other than that its still all separate so the process can be seen, just in fewer steps instead of going back and forth and having commits just changing libtorrent versions.(things i think didn't need to be separate got squished) again i have a copy of how it was before though if this is not better.",0,0.9821098446846008
1012199005,331,DjLegolas,2022-01-13T14:41:54Z,"first of all, great work guys. the long waited installer is an important milestone for deluge 2.0 :1st_place_medal: :hundred_points: regarding only the commits, i would suggest to add to the reason for the patched `twisted` to the commit message because without it, one would never know why it was needed. and again, thanks for this (>130 comments :rolling_on_the_floor_laughing:) mr!",1,0.996647298336029
1012311605,331,CirnoT,2022-01-13T16:42:25Z,"i have not checked the version that adds `hiddenimports` from `twisted`, however can we be reasonable sure that plugins such as yarss2 will work? for example, yarss2 for v2 depends on `http.cookies` via `requests` and `email.mime.*`. both of these are part of stdlib for python and are presumed to be always available, however pyinstaller does not treat them as such and produced binaries might not have necessary modules available. this was an issue with v1 too, back then yarss2 had its own custom code for `email.mime.*` part for windows users, however since release of v2 it started to depend on various 3rd-party modules such as `requests`, which bring their own dependencies that plugin does not necessarily control. to my knowledge they've done best job they could trying to package these external dependencies into egg they provide, however of course python's stdlib is out of their control. --- the other issue that remains is how broken gtk3 is on windows. seeing some weird issues where clicking deluge icon on taskbar does bring window to front but doing so again does not minimize it as one would expect. using `gtk_csd=0` is a solution to this (and many more). we should of course never modify user's environment globally when installing deluge, so the question remains whether there is some way we can have deluge disable decorations when running on windows without relying on environment variables. --- in addition, do we want to also rebase this pr for 2.0.5 so that windows users can have a stable release? 2.1 introduces some breaking python2 related changes that will again require attention from some plugin developers so we might want to port back some of the fixes that -- pushed to 2.0.5, make it a 2.0.6 release and push a windows installer with it, while work on 2.1 continues. for reference, even without these fixes 2.0.5 is very much usable using this pr, however i only tested it as thin-client so ymmv.",0,0.9903461337089539
1012331086,331,mhertz,2022-01-13T17:04:21Z,", i specified e.g gtk_csd=0 other place before, but my understanding was that it wasent global and only enherented for running proces, and not transferred. wrong? edit: always been somewhat leery though, as stated to possibly have a performance penalty, didnt notice any though, but hard to judge, when only quick testing.",0,0.8076258897781372
1012373567,331,cas--,2022-01-13T17:55:52Z,thanks for suggestions :+1: i know that for the dependency issues (e.g. email.mime) were manual fixed in bbfreeze and py2app: [a link] [a link] --- can you more specific about python2 breaking changes? i probably will have to create a 2.0.x release branch anyway so certainly possible to release 2.0.5/6 for windows. --- did you mean `gtk_csd=0`? this is only a env var. perhaps could be done in [a link]?,1,0.9939495325088501
1012392680,331,CirnoT,2022-01-13T18:20:48Z,"yes. if its possible to set environment variable for executable via `runtime-hook` in pyinstaller than that would be solution. less performance on drawing items is in my opinion preferable to broken interaction with windows dwm. i am not sure where you set it. environment variables are usually either set when running process or globally for user/computer (in which case it would apply to everything). if as mentioned above `runtime-hook` can do it for pyinstaller then it would indeed be isolated. some plugins (in this example yarss2) still retain some level of compatibility for python 2, even on releases that are meant for deluge 2. see [a link] for details. the common offenders will most likely be `py2` (from `deluge.common`) and `six` (if plugin decided to use it, but unlikely). perhaps we could keep py2 as a dumb stub (`py2 = false`) to make plugins happy?",0,0.971071183681488
1012410500,331,CirnoT,2022-01-13T18:45:27Z,"ideally we would package all standard modules, so that there is no difference between available environment for windows and linux. python 3.10 would make it easy with `sys.stdlib_module_names`, however as we need to target lower versions, we'd need to come up with some small hook for pyinstaller that enumerates available modules (some options are on [a link] we could also produce a static list for versions below 3.10 (and use `sys.stdlib_module_names` from 3.10 onwards) and provide that as hidden imports directly. for reference, here is full list of available modules for python versions between 3.7 and 3.9 (note that some of them will not exist depending on version used, for example `'graphlib', 'zoneinfo'` were introduced in 3.9 while `'macpath'` was removed in 3.8): [code block] providing it as-is to hidden imports in pyinstaller should be fine, it silently skips over imports it can't enumerate.",0,0.9915598034858704
1012442615,331,mhertz,2022-01-13T19:30:22Z,"very quick, as not liking intrude on your important things, but just remembered that i otherplace added requests(not stdlib) and pygame, from pip, when installing deluge from pip, so springjools's autoremoveplus fork can even be enabled/used(don't know if relevant to you), and notifications default plugin works for playing sound. don't need to respond. thanks for everything you good people do :)",1,0.9963332414627075
1012446233,331,CirnoT,2022-01-13T19:35:32Z,"appreciated to know, however non-stdlib requirements are something plugin developers must solve themselves, otherwise users are forced to take manual steps (like you did), so this is not something we can accommodate when packaging windows version. for example, yarss2 depends on `requests` too but they do vendor it themselves.",1,0.822154700756073
1012542264,331,mhertz,2022-01-13T21:48:21Z,"wanted to let doadin answer, but as i had tested it anyways, then maybe save him some time... with cirnot hiddenimports list added to spec, and [code block]` then yarss2 still fails because of that python2 support removed, so as not sure how add py2 dumb stub as suggested, then just tested deluge master branch, and worked with above, sorry for not cutting down propperly the collect_all. edit: sorry, don't use yarss2, and just saw it was possible to enable yarss2 now and the plugin sub-menu came through in gtkui propperly.",-1,0.993251383304596
1012546353,331,cas--,2022-01-13T21:55:02Z,done via [a link],0,0.9956108927726746
1012571241,331,cas--,2022-01-13T22:27:36Z,so i am happy to merge this just now and we can work on cleaning it up further in new prs thank you again for all the work in getting to this stage! these are some the issues that have come up in and still need addressed: - [ ] cleanup comments by - [ ] `email.mime` deps - [ ] include all stdlib - [ ] include pygame for notification plugin - [ ] set gtk_csd=0 in runtime hook - [ ] host patched twisted binary under deluge,1,0.9952801465988159
1012578648,331,cas--,2022-01-13T22:33:04Z,btw the job will not run by default on prs but i added a condition if labelled with 'windows' so can try that out to see if it works...,0,0.9812297821044922
1012578952,331,DjLegolas,2022-01-13T22:33:37Z,"about the stdlib, why not use the `windows embeddable package` available from python? it exists exactly for this purpose.",0,0.9927663803100586
1012579519,331,doadin,2022-01-13T22:34:42Z,"-- sorry, i just woke up was going to make a commit with some of the requested changes, was just commenting and saw you merged.",-1,0.9860433340072632
1012596882,331,CirnoT,2022-01-13T23:03:30Z,"that is not compatible with pyinstaller, or are you suggesting that we should abandon pyinstaller and create our own stub executables using embeddable package?",0,0.9924923777580261
1018515190,338,doadin,2022-01-21T13:41:28Z,-- i think it would be nice to get this & f89f28f81624c8eabcc612a3acff4a7606bd2235 merged if possible for the windows release.,0,0.9216825366020203
1019504962,338,doadin,2022-01-23T15:12:45Z,"-- i think this is ready except this would bring the min python version to 3.4. idk if we want to continue to work with older versions, 3.4 went eol march 18, 2019.",0,0.9342809915542603
1020502540,338,doadin,2022-01-24T20:12:25Z,"-- i expanded the interface check to use regex to match in case ifaddr is not available but regex only works on windows so, im not sure about a failback for linux/mac.",0,0.9876768589019775
1020619738,338,DjLegolas,2022-01-24T22:36:03Z,"btw, i think it will be best to also add tests for the changes.",0,0.9902048110961914
1020654057,338,doadin,2022-01-24T23:26:50Z,maybe for now i will leave out multi-homing support just add support for interfaces. i wanted to do both so we don't have to edit the ip checks multiple times but at least at the moment i can't see how to get it done.,0,0.9025231599807739
1020663677,338,doadin,2022-01-24T23:45:10Z,the interface check using ifaddr works cross-platform however i don't have nor do i know a way to do a failback for linux/mac.,0,0.9857274889945984
1020664253,338,DjLegolas,2022-01-24T23:46:22Z,"no problem. let's focus on verifying the linux interfaces w/o `ifaddr`. one way i found is getting a list of [a link] like so `os.listdir('/sys/class/net/')`. need to check if available on other systems as well. or maybe, relay on `ifaddr` being always available as it is a dependency.",0,0.9583246111869812
1020691181,338,doadin,2022-01-25T00:38:31Z,turns out with python >=3.3 we can use socket.if_nameindex() this is not available till 3.8 for windows. and apparently the min version for deluge is 3.6 edit: i guess not for windows because it doesn't return a guid.,0,0.9918626546859741
1021518666,338,cas--,2022-01-25T19:10:33Z,"i agree let's do just one thing at a time in the pr (just the interface/adapter checks). i would also suggest that we optionally include `ifaddr` instead of trying to hack the problem ourselves, fallback to `true` and assume user is correct. remember that libtorrent will fail if the interface doesn't exist",0,0.9762962460517883
1021546976,338,doadin,2022-01-25T19:45:49Z,-- by hack do you mean the regex? would you like me to remove that and just return true if importing ifaddr fails?,0,0.9903010129928589
1022559468,338,doadin,2022-01-26T20:07:54Z,-- i think i have merged all the requested changes.,0,0.9763819575309753
1022590618,338,doadin,2022-01-26T20:50:19Z,-- not sure about wording for [a link],0,0.9033394455909729
1023643902,338,doadin,2022-01-27T21:13:43Z,-- i think i have addressed all the changes you have requested.,0,0.9769623279571533
1024977876,338,doadin,2022-01-29T20:06:28Z,"-- i'm not sure how to improve the tests since windows is currently the only one that will return false, also we can't really test for true on wndows since we don't know what the guid will be on the vm its run on. do we want ifaddr for other platforms too in requirements?",0,0.7192434668540955
1025000466,338,DjLegolas,2022-01-29T22:42:58Z,"about the tests, you can have something like this: [code block]",0,0.9926217794418335
1025009118,338,doadin,2022-01-29T23:50:32Z,that would only work if we use ifaddr on linux as well for tests.,0,0.9924944639205933
1025181076,338,cas--,2022-01-30T16:38:08Z,thanks for your work on this,1,0.9158205986022949
1025327952,338,gazpachoking,2022-01-31T02:46:37Z,"hmm, so a couple tests added to the suite are failing for me (on windows 10.) when ifaddr is installed, these two tests fail: [code block] when ifaddr is not installed, these two fail: [code block]",0,0.941467821598053
1025330531,338,doadin,2022-01-31T02:56:15Z,for that first one i wonder what the output of [a link] is. maybe [a link] is a problem with using the first adpater maybe its a loopback or something that ifaddr does not consider. when ifaddr is not installed it should fail to regex which those are formated correctly. so actually they should be true.,0,0.9771150350570679
1025332108,338,doadin,2022-01-31T03:01:51Z,did you test with ifaddr from requirments.txt?,0,0.9951300621032715
1025332781,338,gazpachoking,2022-01-31T03:03:28Z,i actually just saw that and reinstalled with the same issue.,0,0.9832385778427124
1025333967,338,gazpachoking,2022-01-31T03:06:06Z,"ifaddr is giving a list of 5 adapter strings, but the one retrieved from the registry via test isn't in it",0,0.9877247214317322
1025335688,338,gazpachoking,2022-01-31T03:09:20Z,"here's what interface_name is successfully reading as ![a link] and here's the list of adapters returned by ifaddr ![a link] intel(r) ethernet controller (2) i225-v is my actual addapter, and shows up in both, just different ids.",0,0.9900964498519897
1025336187,338,doadin,2022-01-31T03:10:18Z,"the function at [a link] on my windows 11 machine returns a valid interface for me, that if addr lists.",0,0.994834303855896
1025336550,338,gazpachoking,2022-01-31T03:10:57Z,"oh wait, the `(2)` is pertinent in that name. my real adapter is `intel(r) ethernet controller (2) i225-v`, the one read from the registry doesn't have that `(2)`, but the second item in my registry is the real one without the 2, and has the matching address.",0,0.987447202205658
1025337255,338,gazpachoking,2022-01-31T03:12:21Z,"so, i think the actual code is working properly, but the tests are just fragile. i guess maybe the one read from the registry is an interface that was deleted or something.",0,0.9543331861495972
1025338303,338,gazpachoking,2022-01-31T03:14:12Z,"speaking of that line you linked, `for i in range(1):` is just the same as `for i in [0]:`, and isn't much of a loop at all.",0,0.961200475692749
1025338946,338,doadin,2022-01-31T03:15:14Z,yea it was originally as had for i in range(5) but would error if there where less then 5.,0,0.990616500377655
1025340220,338,doadin,2022-01-31T03:17:33Z,"yea, maybe one of the adapaters didn't clean uninstall after a driver update or something so a registry entry is still lingering.",0,0.9537551999092102
1025345842,338,gazpachoking,2022-01-31T03:29:49Z,"it'd be nice to have the tests be more stable, but i'm just going to delete that key from my registry for now.",0,0.9396551847457886
1025613276,338,cas--,2022-01-31T10:57:58Z,"i agree, i only quickly checked the tests before merging. i am not sure how much we need to test here tbh as it's somewhat outside deluge domain to verify adapter lookup and perhaps ifaddr should be mocked out.",0,0.9456127285957336
1026022290,338,DjLegolas,2022-01-31T17:23:17Z,"that code was only a poc, and needs improvement... :grinning_face_with_sweat:",1,0.9660932421684265
433116013,221,DjLegolas,2018-10-25T16:21:39Z,i think everything is fixed.,1,0.606236457824707
434543958,221,aresch,2018-10-31T02:58:33Z,"this pull request looks good to me. it would be nice to have some better tests for alert manager, as we don't cover much of what has changed. feel free to follow-up with some expanded tests if you're interested :)",1,0.9962342381477356
434787507,221,DjLegolas,2018-10-31T17:57:29Z,"hmm, ok, i'll give it a try. correct me if i'm wrong, but to fully test `alertmanager`, i'll need to make `libtorrent` post some alerts and to handle them correctly. one way is to mock it, and the other is to somehow force is to set an alert. which is the better way?",0,0.8643627762794495
434797426,221,cas--,2018-10-31T18:27:16Z,"considering the time it takes alerts to be posted, sometimes ~0.5s, mocking libtorrent is a better route. although a lot of tests rely on libtorrent, it's not the best way of unit testing... :)",1,0.9811875224113464
434810202,221,aresch,2018-10-31T19:05:49Z,"yea, you'll want to mock out session.pop_alerts() and session.wait_for_alerts(). you can check out how we did it in spritzle for an idea: [a link]",0,0.9892009496688843
435696624,221,DjLegolas,2018-11-04T19:08:01Z,so i wrote some test units... what do you guys think --?,0,0.7697205543518066
436007336,221,DjLegolas,2018-11-05T19:38:10Z,"any thoughts why this change cases `tox -e py3` to fail? i tested it with python 3.5, 3.6, 3.7 and only with 3.7 all tests pass.",0,0.9851478934288025
1022754772,221,DjLegolas,2022-01-27T01:17:59Z,rebased and fixed last 2 changes requested by,0,0.9903854131698608
1022982853,221,cas--,2022-01-27T08:54:53Z,i imagine that the segfault in tests is due to [a link],0,0.983937680721283
1023582901,221,DjLegolas,2022-01-27T19:50:26Z,saving the segfault [a link] for later use. -- how do you want to handle this? we could try to perform a deep-copy of the alerts,0,0.992548406124115
1040568615,221,cas--,2022-02-15T17:32:45Z,"i am not sure this is stable, i just had it crash on me as soon as i tested the branch out i am not willing to merge this while there is the potential for segfaults in alert handling.",-1,0.8033691048622131
1457123320,221,cas--,2023-03-06T22:31:59Z,i have merged the changes for component 0745c0eff85ea4e4a3646c454098503ed08c56ff and 25a2b113e290600043338e22b4f116cd2dbf2886 but i am finding that the alertmanager thread changes is increasing the propagation of segfaults due to the alert pointer going out of scope... i will investigate further on how we can workaround the issue.,0,0.9840515851974487
1828111011,221,cas--,2023-11-27T15:53:14Z,thanks i applied a refactor to remove the alert copy and avoid segfaults: [a link] i'm not sure what effect this will have for alert handling so might need to keep an eye on it and revisit if needed.,1,0.902315616607666
192954651,57,cas--,2016-03-06T18:25:46Z,"there are a lot of console commits, seems to have strayed a bit from ui options...",0,0.9844441413879395
193005104,57,bendikro,2016-03-06T22:03:14Z,"yes, i will remove those and merge with the other console changes for a separate pr",0,0.9946876764297485
193435997,57,bendikro,2016-03-07T20:30:08Z,all the console specific commits have now been removed.,0,0.9945038557052612
211017092,57,cas--,2016-04-17T13:36:24Z,"with reference to the new `ui/entry.py`, perhaps create a `core/entry.py` for the daemon start code?",0,0.9938651919364929
211098805,57,bendikro,2016-04-17T19:49:50Z,"doesn't the daemon actually fit in the ui category? while it's not a deluge client, it's still an interface to controlling deluge?",0,0.9884058237075806
390387958,181,doadin,2018-05-19T08:02:06Z,the existing environments don't work as is in windows. this is a large part due to the toxenv not being set which i was having some issue with appveyor and i didn't try adding it to the existing environments because i have been busy trying to get the tests running and so forth and didnt want to break them for travis.ci as im using both to compare to see proper output. now that its working i can clean it up a bit more and make some adjustments. however in at least the one case if you look you have a instance of the environment variable pwd this variable is not available in windows so that one is not going to work even with a appveyor setup adjustment.,0,0.9131245613098145
390521801,181,doadin,2018-05-20T23:42:02Z,i think we still need a few different environments for windows because windows has a few extra deps then linux does. edit: so we can get away with just mocking curses and win32api to get docs to pass. so now flake8 and docs pass.,0,0.9791402816772461
390583866,181,cas--,2018-05-21T08:07:20Z,for different env platforms see: [a link] remember to raise minimum tox version in tox.ini,0,0.9945099353790283
392451303,181,cas--,2018-05-28T08:01:00Z,reason for closing?,0,0.9899154901504517
392596121,181,doadin,2018-05-28T20:08:30Z,"its a ways away from being ready, unless you want to take just the appveyor config or take it + skipping ~40 tests. i think about half those 40 are the console tests which will never run so its not too bad. other than that the 2 plugin tests still don't run.(toxenv: plugins)",0,0.5718991160392761
392603306,181,cas--,2018-05-28T21:05:23Z,"i am happy with skipping the tests is fine for now, config needs a bit of a polish but it seems to be working and getting windows tests and builds from appveyor would be great.",1,0.9904500842094421
392603468,181,doadin,2018-05-28T21:06:54Z,well it also needs some tox changes for multi os like we talked about before which for some reason i cant figure out i had it run on my computer pushed the change to github and it failed..not sure how to address that.,0,0.8275969624519348
392605854,181,doadin,2018-05-28T21:27:35Z,"as you may have noticed to i was using a libtorrent build from my own we need to find a good reliable source to install that from as the last python build from the libtorrent repo is not good. i was gonna try and make a appveyor build and just have it set to build on tags only(low resource use, and only happenes on releases) but i didnt get that setup either but that would be a good reliable trusted source.",0,0.8300623297691345
392612747,181,doadin,2018-05-28T22:40:00Z,ok i tried to clean it up a bit more i will leave it be for now let me know any adjustments or w.e. you would like to make.,0,0.9579595923423767
393022202,181,doadin,2018-05-30T03:53:49Z,"ok so after that gotta clean up the commits and stuff but all the tests run and pass we get passed (skips=69, successes=116) which is alot of skips of which about 40 actually need addressing at a later point the others are never gonna pass because of the console ui dependent on python curses. other than cleaning the commits and stuff make the tox multi os compatible i think i pretty well cleaned the appveyor config but let me know.",1,0.533489465713501
393284827,181,doadin,2018-05-30T19:18:42Z,i guess maybe we should use appveyor-retry? to try and download the deps in case for whatever reason it fails to download. they should be cached so it should be rare to even need to download but if it does.,0,0.9750785827636719
393720130,181,doadin,2018-06-01T00:08:14Z,yea..i definitely messed up there hopefully i got it right this time? edit: apparently not.,-1,0.5142576098442078
393997848,181,doadin,2018-06-01T20:18:34Z,im not sure where ive gone wrong with this @ unittest change.,-1,0.9017402529716492
394015684,181,cas--,2018-06-01T21:37:06Z,"apologies that is my bad, i forgot that twisted has it's own `unittest` so just revert to your original code. it's much nicer using the python unitest decorator but sometimes you can't have nice things ;)",1,0.9550874829292297
394080499,181,cas--,2018-06-02T11:34:59Z,ok so i finally worked out that the platform support for tox relies on running `tox` without any env vars or using `tox -e` so adding `pywin32` to tox is not possible currently. i have created another pr #185 with the fixes and changes i wished to make.,0,0.9842836856842041
271547455,138,cas--,2017-01-10T11:02:45Z,can this handle pasting an ipv6 address?,0,0.995187520980835
272212023,138,matiasw,2017-01-12T16:34:23Z,"not really, the last part of the address (after the right-most "":"") would get interpreted as a port number.",0,0.9662480354309082
272228747,138,cas--,2017-01-12T17:34:30Z,so it is an issue if you paste an ipv6 address without a port...,0,0.9915125966072083
277687554,138,matiasw,2017-02-06T13:55:21Z,"ok, it now correctly handles ipv6 addresses, and parses the port from the [2001:0:3238:dfe1:63::fefb]:3188 style.",0,0.9834563136100769
278101535,138,cas--,2017-02-07T18:47:59Z,ok can you fix the errors and rebase into a single commit,0,0.9933484196662903
278440230,138,matiasw,2017-02-08T19:46:27Z,"done. just so you know, the pydef check of travis-ci failed twice with different results, after i had fixed my errors, which is why i needed to re-open this pull request. so, i think there's something wonky with it.",0,0.9477963447570801
279788432,138,matiasw,2017-02-14T18:12:42Z,"ok, i've done that now. i noticed that there is also a host, port duo in connection manager > edit. would you like this to be implemented there, as well? if so, should i make a separate commit about it? and where would you like the newly-created parse_host_port utility, in that case?",0,0.9363468885421753
279796877,138,cas--,2017-02-14T18:44:15Z,have you rebased from latest develop because there is no separate `i2p` anymore,0,0.993938684463501
280020444,138,matiasw,2017-02-15T14:11:42Z,"i added the functionality to the connection manager window, as well.",0,0.9909766912460327
280162412,138,cas--,2017-02-15T22:34:20Z,"ok looking better. the `split_host_port` function needs improvement and simplified. - use `host` not `ip` as variable name in the function to keep consistency. - start by setting the two variable to `none` and then the last step of the function is `return host, port` - the tuple is implicit for returning multiple values so can drop the brackets. - if you can't extract a port then at least pass back the `host` value with `port` set `none`. - use int not float for port. - docstring should be google style. - use `str.partition` to get ipv6 host and port. - a better descriptive name than `paste` for the string parameter.",0,0.6125447154045105
280167545,138,gazpachoking,2017-02-15T22:54:21Z,"maybe using the stdlib would be more clear for that split function? [code block] edit: in fact, that's so easy, you could probably cut out that utility function altogether. you could also fill username and password from the parse_result to support strings like `user:pass:123` if desired.",0,0.9910330176353455
280855216,138,matiasw,2017-02-18T16:10:28Z,"yeah i changed it to use urlparse. thanks for the tip! it now supports pasting username and password, as well. it would also be possible to have `[a link] type scheme identifiers change the proxy type automatically, what do you think? i believe this version should work, but i'm suddenly unable to test the preferences, because the window won't open, and i get now, this seems to be because `hasattr(lt, 'generate_fingerprint')` is false. why? i'm on the latest develop head and libtorrent 1.1.1.0. edit: with regard to travis-ci's flake8 test, where am i supposed to place these imports?",1,0.9880887866020203
280860284,138,cas--,2017-02-18T17:22:44Z,[code block] run `isort` on the file and it will update the changes required automatically.,0,0.9955639839172363
280866792,138,cas--,2017-02-18T18:54:21Z,just thought you should strip whitespace from the clipboard text. i also wonder if it should automatically paste those values from the clipboard. a good example is for urls in add_torrent_dialog.,0,0.987410843372345
280918680,138,matiasw,2017-02-19T13:20:22Z,"whitespace is now stripped. do you mean like, if, on inspection, the clipboard is found to contain suitable values, these would be pasted automatically? i think that's a separate feature that we could look into implementing. meanwhile, what should i do to get deluged working again? i got this completely out of the blue.",0,0.9583858847618103
280921123,138,cas--,2017-02-19T14:03:56Z,that is because the latest develop code requires the latest libtorrent git branch code (what is going to be 1.1.2 release). so you would need to checkout rc_1_1 and build that code or use the ubuntu ppa if you can.,0,0.9946644306182861
280922411,138,matiasw,2017-02-19T14:26:23Z,"yeah, i have the libtorrent code from github. i've tried with the latest master, as well as the libtorrent-1_1_1 release tag. or do you mean some other version?",0,0.9853515625
280922594,138,cas--,2017-02-19T14:29:50Z,i have repeated many times: git branch `rc_1_1` not master and not tag 1.1.1. git checkout rc_1_1,0,0.9934171438217163
282083643,138,cas--,2017-02-23T18:49:25Z,thanks d75afc007dcc5b,1,0.9414607286453247
56566920,12,doadin,2014-09-23T18:28:53Z,tested and works,0,0.8159229159355164
56570700,12,doadin,2014-09-23T18:53:10Z,corrections made based on your notes. nothing else.,0,0.9846962690353394
56576681,12,gazpachoking,2014-09-23T19:33:39Z,does this fail elegantly when these keys don't exist in the registry?,0,0.9854179620742798
56577149,12,doadin,2014-09-23T19:36:47Z,i dont think so. id have to try.,0,0.8669053912162781
56577314,12,doadin,2014-09-23T19:38:02Z,"it doesnt, it says cannot find the file.",0,0.9529938101768494
56580495,12,doadin,2014-09-23T20:01:03Z,now it will try the registry and if there is no key will go back to using static values.,0,0.9925986528396606
56580607,12,doadin,2014-09-23T20:01:57Z,i might have messed up on the formating though.,0,0.5502310395240784
56581623,12,doadin,2014-09-23T20:08:59Z,"i dont think it should keep the hardcoded 'c:\program files\7-zip\7z.exe', options though because if its in the program files then mostlikely the user used the installer and therefore the registry should pick it up.",0,0.9827544093132019
56583115,12,doadin,2014-09-23T20:19:45Z,other than that though i think im about done. unless theres more issues with it not being up to codeing standards. it works exactly like it was but improved to work in more cases. let me know.,0,0.6582881212234497
56716332,12,doadin,2014-09-24T18:28:15Z,i thought the like 5 line commit was pretty simple but i suppose its easier. and yea sure there we go we can keep them doesnt hurt.,0,0.5713950395584106
56721831,12,cas--,2014-09-24T19:06:09Z,"almost there, just need to remove the code in lines 67-71 and replace with `pass`",0,0.9932308197021484
56744674,12,cas--,2014-09-24T21:51:10Z,"thanks i have merged this now. it still needed a few minor changes, the exception type was missing, needed a couple of spaces and the branch rebasing into a single commit.",1,0.9636204242706299
385868002,180,doadin,2018-05-02T05:22:34Z,i believe i have fixed it? and thanks for the review.,1,0.9667051434516907
388275311,180,doadin,2018-05-11T06:40:17Z,this should be ready for merge now. unless theres something missing im not aware of it runs and sets the proper setting in gtkui and webui.(confirmed in core.conf and ltconf),0,0.9819617867469788
390390713,180,doadin,2018-05-19T08:54:29Z,"i think i have addressed all the issues now? i should probably just remove the flake8 commit, it doesn't fully make the test pass anyways. yea?",0,0.9196444153785706
390437714,180,cas--,2018-05-19T22:49:38Z,"yeah i am trying to fix those failing tests and you can rebase when it's pushed, see #182",0,0.9770359396934509
390448793,180,doadin,2018-05-20T01:15:35Z,"yea, so far i can see the changes so far does affect travis.ci test but should be some kinda of solution to make them more broadly compatible. gl. :)",1,0.9941211342811584
392613008,180,doadin,2018-05-28T22:43:18Z,is this ready to go now?,0,0.9945283532142639
394018001,180,asavah,2018-06-01T21:47:21Z,was this runtime tested? i don't think so ... [code block] after this got merged deluged won't download or seed.,0,0.9897084832191467
394018877,180,doadin,2018-06-01T21:51:14Z,it was runtime tested i use this build and it runs just fine. question look at the error...it says invalid interface what did you use for a interface? currently only a ip is supported. as deluge runs the is_ip check on the input.,0,0.9488290548324585
394019611,180,asavah,2018-06-01T21:54:32Z,"i ve tried no ip at all (blank field). tried local ip of the server. same result. the error itself comes from libtorrent (i'm using 1.1.7). the peer list is empty for all the torrents, reverting this pr makes everything work again. currently i'm trying to figure out what's wrong, will submit a fix if i find one. and i'm not the only one [a link]",0,0.8160674571990967
394021082,180,doadin,2018-06-01T22:01:15Z,"i just tested on windows and it runs just fine with no option selected or with a interface ip selected, maybe this is a linux issue? deluge does have a restore previous setting with this options so i would verify with ltconfig(shows ""actual"" value) what the outgoing_interface setting is. on windows default is 0.0.0.0 which is any and works fine.",0,0.937767744064331
394021597,180,asavah,2018-06-01T22:03:41Z,"not sure yet, yes, i'm running on linux (ubuntu 18.04 server), trying to dig through libtorrent api , c++ is not my favorite language ...",-1,0.5789518356323242
394022249,180,asavah,2018-06-01T22:07:03Z,"[a link] name | type | default -- | -- | -- outgoing_interfaces | string | """" sets the network interface this session will use when it opens outgoing connections. by default, it binds outgoing connections to inaddr_any and port 0 (i.e. let the os decide). **ths parameter must be a string containing one or more, comma separated, adapter names. adapter names on unix systems are of the form ""eth0"", ""eth1"", ""tun0"", etc. when specifying multiple interfaces, they will be assigned in round-robin order. this may be useful for clients that are multi-homed**. binding an outgoing connection to a local ip does not necessarily make the connection via the associated nic/adapter. setting this to an empty string will disable binding of outgoing connections. it should be interface name not ip address, may be windows resolves it somehow ...",0,0.9893345236778259
394023892,180,asavah,2018-06-01T22:16:20Z,dirty (not proper) fix: [a link] change '0.0.0.0' to '' outgoing_interfaces is handled different to listen_interface in libtorrent itself.,0,0.8283501267433167
394025468,180,doadin,2018-06-01T22:25:53Z,on windows there isn't really interface names so libtorrent on windows uses ip. sorry i didn't see 0.0.0.0 wasn't default parameter but at least on windows which you can see through ltconfig not setting a value results in 0.0.0.0 being used. sorry.,-1,0.992468535900116
1028864430,359,cas--,2022-02-03T10:57:03Z,"unless we are going to include a type checker, i am not sure the value here? also the type is included in the docstring and there should be only one source of truth",0,0.9775172472000122
1029047587,359,gazpachoking,2022-02-03T14:30:33Z,"hmm, that's a good point and i hadn't fully thought it out. here were my goals: 1. have the ide know what stuff was when i'm refactoring. (i have several branches where i'm trying different stuff, and the ide rarely has good type info at the moment.) 2. define the contract a bit better for exported methods, so it's more apparent if they get changed. (once again, i was thinking more how pycharm automatically highlights wrong usage/returns more than running an explicit type checker.) 3. i don't think it would be terrible to enable mypy checking in the loosest mode, where it only cares about the things we have already documented, such that type hints could be added bits at a time. that being said, point 1 is probably not so applicable to the exported methods, because they normally get used via client, or via component.get(), both of which the ide loses track of the type hints. and 2 is probably better served by the docstrings, so it gets exported to the rpc docs. i do like the expressiveness of the type hints compared to just a simple type in the docstring, (e.g. list[tuple[int, str]]) but in cases where the requirement is more complex it needs to be spelled out in words for the generated documentation anyway. if we did want to move to this style type hints, we could make it the single source of truth, and just make the docstrings for people [a link] (this would be my vote.) i still think the type hints are quite useful in the ide for autocompletion, and i'd be inclined to add them to any bits i touch when doing any fixing/refactoring, unless you are against them completely. for more internal methods the disadvantages above are moot.",1,0.8950928449630737
1029056574,359,cas--,2022-02-03T14:40:06Z,"i had forgotten about ide usefulness so happy to try to accommodate there, just didn't want to have the types to become outdated or spend a lot of effort for little gain. personally i find type hints can reduce code readability and unless constantly encountering type issues not worth the added overhead, especially if never fully verified by mypy. since we already have a form of typing in the code, i am happy if we experiment with moving types from docstrings. as you suggest starting with core exported methods and use [a link].",1,0.9686042666435242
1029152733,359,DjLegolas,2022-02-03T16:14:05Z,"i think that we should also start converting the docstrings to googles's format, probably in another pr.",0,0.9842398166656494
1029157643,359,cas--,2022-02-03T16:18:49Z,can use [a link] to convert them,0,0.995969295501709
1029615308,359,gazpachoking,2022-02-04T04:04:59Z,"i did some work in core.py standardizing the docstrings, removing the types, and enabling sphinx generating them from the function signatures. seems to be working pretty well. ![a link] the docstring updates were sorta tedious. i tried pyment, couldn't get it to work very well. i'd be more inclined to fix stuff as it gets touched going forward rather than do a big dump.",1,0.7345225811004639
1029635408,359,aresch,2022-02-04T05:03:19Z,can we add a mypy check as a github action? we really should have typing everywhere that's feasible.,0,0.9907773733139038
1029638231,359,gazpachoking,2022-02-04T05:09:23Z,"yeah, i was just experimenting with mypy. trying to figure the easiest way to introduce it without a shitload of comments on stuff to ignore before we get it all in.",-1,0.949910581111908
1030114829,359,cas--,2022-02-04T15:53:17Z,can we leave the mypy to another pr and get this one merged,0,0.9928613305091858
1030134818,359,gazpachoking,2022-02-04T16:15:16Z,"sure can. i'll back that stuff out, was just doing some experiments.",0,0.9725338220596313
1030154920,359,gazpachoking,2022-02-04T16:38:52Z,restored this to just the doc changes and type hints.,0,0.9920112490653992
1030669623,359,cas--,2022-02-05T17:56:03Z,"there are breaking compatibility changes with both older twisted and python versions in the pr, i have reverted the code from develop: 1089adb8442 perhaps we concentrate on fixing other areas of the code and windows release as i don't see the expenditure just now worth it?",0,0.9885696768760681
1030672157,359,gazpachoking,2022-02-05T18:09:53Z,"ahh. didn't consider older versions of twisted not having type hinting capability. shouldn't be any issues with older python though, i didn't use the stdlib types as generics, so that should be fine. the twisted issue would also be resolved if we drop python 3.6 support, was questioning that in my mypy pr. [a link] yeah, that's fine. i just prefer adding the type hints as i go fixing other stuff, so it's a real bummer.",-1,0.9891394972801208
1030688143,359,cas--,2022-02-05T19:48:28Z,i thought i saw usage but seems i was mistaken certainly can consider dropping it for 2.1.x since it would simplify our support :thinking: if you can see a quick way to get typing in without too much overhead certainly update this pr. i just have limited time to investigate any resulting errors i should also see about running a ci that has our minimum requirements and current requirements,1,0.8945115804672241
1030696780,359,gazpachoking,2022-02-05T20:51:23Z,"we could do comment type hints, or, probably nicer, just type deferreds as deferreds without typing their return value. if we do maybe_coroutine branch that won't be bad, since we don't return a deferred if the function is wrapped in that.",0,0.9835219383239746
1030697949,359,gazpachoking,2022-02-05T20:59:44Z,"i think there shouldn't be problems without the use of generic deferred return types... yeah, that would be useful.",0,0.9648299813270569
1030702977,359,gazpachoking,2022-02-05T21:36:46Z,"totally forgot type hints could just be strings. made that change, it's a much better option.",1,0.549477756023407
1032094666,359,gazpachoking,2022-02-08T00:43:59Z,"rebased to resolve the conflicts, should be good again.",0,0.71043461561203
405116021,200,cas--,2018-07-15T20:27:58Z,for reference: install debug symbols [code block] to fail on first warning and get backtrace: [code block] the backtrace should give just a bit more info on where to look to fix warning. resources: [a link] [a link] [a link] [a link],0,0.9926837086677551
405116899,200,cas--,2018-07-15T20:42:12Z,also useful for debugging the ui [code block] based upon [a link] which does support gtk3 too.,0,0.9415995478630066
405117119,200,cas--,2018-07-15T20:46:10Z,two tracebacks to investigate: [code block],0,0.9955938458442688
424794482,200,kbdserver,2018-09-26T17:04:17Z,"for future ui design: - [ ] added support for hi-dpi displays (use svg system and app icons); - [ ] changed pieces bar; - [ ] added session pause/resume support from main window; - [x] use gicon to files_tab to show icons according to system mime-types; - [ ] сonnection manager became more friendly to user; - [ ] updated country flag tooltip; - [x] adapted to gtk3 and tested scheduler, notifications, itconfig plugins. solved ui bugs: - [ ] sorting in torrent view; - [x] renaming files in files_tab problem; - [ ] сonnection manager bugs; - [x] restore mainwindow vpaned, hpaned position at startup; - [x] right click on torrentview header opens two context menus. [a link] [a link]",1,0.5446630120277405
424975216,200,cas--,2018-09-27T06:35:53Z,"do you have a git branch with these changes? it would make collaboration easier also code cannot be removed without providing a replacement, e.g. caching is there for a reason",0,0.9931893348693848
425096247,200,cas--,2018-09-27T13:39:30Z,"caching is enabled on all cells so this can't be isolated to the speed cell. the point of the caching is when dealing with thousands of torrents. could you provide more information, e.g. video, on the bug as i don't see the issue you are reporting. it would be more useful as git commits contain this important information. also i cannot simply merge all your changes as there are parts that i don't think are corrent. many self-contained commits each with a related fix is much better.",0,0.9702445268630981
425157223,200,cas--,2018-09-27T16:27:29Z,"thanks for the video, i can replicate now. so the issue is that with both torrentview and peerstabview values are appearing in blank cells because they are sharing the same cell renderer func. would this not be solved by not reusing the `cell_data_speed_down` func in peers tab so create a `cell_data_peer_speed_down` func? however the cache is only useful for relatively static content which speed usually isn't so maybe removing the cache here is fine...",1,0.9697771072387695
429535317,200,kbdserver,2018-10-13T11:44:26Z,"calum, solution for unicodewarning problem in torrentview.py. the reason is in eta int type in liststore. [a link]",0,0.9918596148490906
429994889,200,luxus,2018-10-15T20:08:24Z,"is this the blocker for the next release? ""watching"" the deluge reposity makes me really impatient",-1,0.9905810952186584
430027968,200,kbdserver,2018-10-15T21:54:07Z,"according to my observations, calum is not interested in a quick release. he makes a lot of important changes, but when the release will come is not clear.",0,0.941356360912323
430035976,200,kbdserver,2018-10-15T22:27:24Z,the problem is that there is no development team and release time-line.,0,0.6239650249481201
431380914,200,cas--,2018-10-19T14:24:44Z,it is not said that a watched branch never releases ;) for python 3 and other reasons gtk3 is important. can we avoid non-relevant discussion in a pull request though. i don't see how `long` has any effect on unicode and in python `int` and `long` were unified.,1,0.9809862971305847
431391903,200,kbdserver,2018-10-19T14:57:32Z,"i assumed that your comment # fixme: seeing unicodewarning ?? was associated with this warning: [failure instance: traceback: : 3072227291 not in range -2147483648 to 2147483647 /home/kbdserver/sources/deluge/deluge/core/torrentmanager.py:1441:on_alert_state_update /home/kbdserver/sources/deluge/deluge/core/torrentmanager.py:1499:handle_torrents_status_callback /usr/lib64/python2.7/site-packages/twisted/internet/defer.py:459:callback /usr/lib64/python2.7/site-packages/twisted/internet/defer.py:567:_startruncallbacks --- --- /usr/lib64/python2.7/site-packages/twisted/internet/defer.py:653:_runcallbacks /home/kbdserver/sources/deluge/deluge/ui/gtk3/torrentview.py:611:_on_get_torrents_status /home/kbdserver/sources/deluge/deluge/ui/gtk3/torrentview.py:589:update_view /usr/lib64/python2.7/site-packages/gi/overrides/gtk.py:1052:set /usr/lib64/python2.7/site-packages/gi/overrides/gtk.py:1046:_set_lists /usr/lib64/python2.7/site-packages/gi/overrides/gtk.py:915:_convert_value /usr/lib64/python2.7/site-packages/gi/overrides/gobject.py:218:__init__ /usr/lib64/python2.7/site-packages/gi/overrides/gobject.py:249:set_value ] if so, warning is related to the type of the variable in the liststore.",0,0.9898833632469177
431405321,200,cas--,2018-10-19T15:37:16Z,"ah well yes that is a different issue and the solution is to limit the maximum size of eta returned by torrent status. perhaps put a max value of `31557600`, which is a year.",0,0.9833742380142212
431410079,200,kbdserver,2018-10-19T15:52:14Z,"you're right, it's better: [a link]",0,0.6832670569419861
431459136,200,kbdserver,2018-10-19T18:40:38Z,"for future ui design part2: - changed the trackers tab - edit tracker in tab or remove, move in multi-selection mode directly. button bar can be activated if needed; - added flags information in peer tab to understand how this peer is connected; - others design improvements. video and source code attached. [a link] [a link]",0,0.7223241329193115
431584154,200,cas--,2018-10-20T13:57:23Z,"please provide this as a pull request, patches or link to a branch. it is too much time and effort to do this with a source code zip file. [a link]",0,0.9932199716567993
431586551,200,kbdserver,2018-10-20T14:27:55Z,"you do not understand, calum. i want to help the project survive. your problem is not in a zip file",-1,0.9509901404380798
431587968,200,kbdserver,2018-10-20T14:45:44Z,maybe you're trying to get more money from [a link] but also think about the users who like the program.,0,0.9575391411781311
431594857,200,cas--,2018-10-20T16:08:54Z,"if you want to do that, then submitting pull requests is how you help me. code needs reviewed before it can be merged and providing a zip is not how software development works these days. it is how the develop branch got into this mess in the first place. disparaging comments are not welcome here.",-1,0.9009801149368286
431601138,200,luxus,2018-10-20T17:19:39Z,can i help you to create a pull request?,0,0.9951812624931335
431611256,200,kbdserver,2018-10-20T19:28:35Z,"i will be grateful, thanks!",1,0.9908945560455322
431652105,200,kbdserver,2018-10-21T09:13:55Z,"this path is very slow, deluge lost the advantage.",-1,0.9609163999557495
431652703,200,kbdserver,2018-10-21T09:25:29Z,for me it is not right to ask for money and not to give anything in return,-1,0.9140674471855164
431654281,200,kbdserver,2018-10-21T09:48:22Z,"calum, you are a professional programmer, i do not even doubt that you have invested in the project. perhaps a reboot is necessary - deluge 3.0.0",1,0.6593725085258484
431656965,200,cas--,2018-10-21T10:27:24Z,"this is the way that all large project works and to do otherwise wastes the project development time. there are many article on the internet as to why this is the case and i should not need to explain myself. i have been working for [a link] on deluge so i have given plenty with deluge a stable 1.3 because of my efforts. patreon was never solely about next major release of deluge, it was about me running the project as a whole, including work on libtorrent. those who donate have got updates as to what is going on with myself. please do not post any further off-topic comments here.",-1,0.7156920433044434
431696516,200,bendikro,2018-10-21T19:24:31Z,"i'm not quite sure i understand what you're trying to say, or if you understand what you're saying yourself. running a project like this is a huge amount of work, and if there is one thing you can do to help, it is to contribute in a manner than helps the developers the most. dumping a zip archive with your changes has never been the way to contribute to a software project ever since patches become the standard. the fact that you even bother to quarrel about this suggest you don't know enough about software development to be in a position to suggest anything at all about how any developer should accept any help at all. if you need help with creating a pr, you should be clear about that, and maybe someone will help you. saying that cas won't accept zip archives due to wanting money is ridiculous. suggesting shit like you did is not the way to behave, and deserves am apology imo. if you tried something like this e.g. on the linux dev email list you'd be told to fuck off.",-1,0.9751004576683044
431700604,200,kbdserver,2018-10-21T20:19:04Z,good luck in the project.,1,0.8506410717964172
431704944,200,kbdserver,2018-10-21T21:19:32Z,many want to stop the project. fuck off yourself bendikro,-1,0.9917470216751099
433972184,200,kbdserver,2018-10-29T16:11:44Z,blocklist plugin gtk3 fixes [a link] ![a link] updated svg icons for scheduler and blocklist plugins: [a link],1,0.9212023615837097
435583602,200,kbdserver,2018-11-03T12:20:35Z,"dear calum, what is the release date?",0,0.9907307028770447
1019161190,343,cas--,2022-01-22T10:20:01Z,"can we try to have separate prs for distinct changes e.g. lt deprecated vs other deprecated so the easy changes can be merged, also provide some context for the change in the commit message. e.g. explain why are were replacing linux_distribution and perhaps a link to documentation also for deluge 2.1.x we can bump the lt min version to 1.2. this means just replacing the deprecated code rather than trying to support lt 1.1",0,0.9934648871421814
1019212705,343,DjLegolas,2022-01-22T11:54:49Z,"good points. new pr for the `linux_distribution` drop: [a link] i have added a commit for min version and removed version validation check in `torrent.py`. btw, -- ypu should add your gpg public key to github, as currently it cannot verify your commit.",1,0.9805147647857666
1020626145,343,DjLegolas,2022-01-24T22:46:27Z,"`resume_data` in `alertmanager` is being accessed when coping the `save_resume_data_alert` alert. it will keep warn us until we stop using a python binding with deprecation support. nevertheless, i have replaced the usage of the deprecated `alert.resume_data` in the alert handler in `torrentmanager.py`.",0,0.9935059547424316
1021460920,343,DjLegolas,2022-01-25T18:00:26Z,"ok, managed to fix the `url` and `name()` issues as well. 2 points i think i should bring up: * `resume_data` can be fixed even further by skipping it when coping the `alert`, just like all of the `__x__` methods. * when fixing the `url`, i learned that there is a function to parse magnet uris - [a link]. the return value is an `add_torrent_params` object which can be manipulated just before passing it to the `lt.add_torrent()` method. i think we should consider using it at also in [a link] lastly, i need your input, --, about upgrading to lt1.2.14 as the minimum version as suggested.",0,0.8550633192062378
1021497017,343,cas--,2022-01-25T18:44:12Z,"i'm not sure what you mean here, can you elaborate? we should not use any libtorrent method outside of core since we should not require it to be installed if using a thin client. as i said we should not put a high hard limit on the lt version so leave it as 1.2.0 unless there is a critical issue we know deluge is not compatible with. it would be up to package managers to ensure using latest stable versions of libtorrent",0,0.93563312292099
1021519885,343,cas--,2022-01-25T19:12:09Z,could you also add to the commit message a few details about the changes,0,0.9943875670433044
1021521347,343,DjLegolas,2022-01-25T19:14:10Z,"sure. in [a link], we are coping the content of each alert as it arrives as it will be deleted by the caller. when we receive an alert of type `save_resume_data_alert`, one of it's members is the deprecated `resume_data`. as part of the copy, we access `resume_data` as well, which triggers the `deprecatedwarning`. a possible solution, it treat it as `__x__` (just an example): [code block] the ""correct"" way, according to libtorrent [a link] (last line), is stop compiling lt with deprecated functions enabled, but it's not part of this pr. i agree. also, passing it from the core to the thin client is not that important and efficient. dropping the suggestion. keeping `1.2.0` it is. thinking of a splitting it into 2 commits exactly for that. give me a couple of minutes.",0,0.970536470413208
1021963226,343,DjLegolas,2022-01-26T08:16:19Z,everything is fixed.,0,0.7706303000450134
1025211734,343,doadin,2022-01-30T19:21:46Z,"i am also seeing. ` 13:59:22.436 [debug ][deluge.core.core :64 ] deprecated session status key num_peers, please use peer.num_peers_connected 13:59:22.436 [debug ][deluge.core.core :64 ] deprecated session status key dht_nodes, please use dht.dht_nodes 13:59:22.436 [debug ][deluge.core.core :64 ] deprecated session status key has_incoming_connections, please use net.has_incoming_connections 13:59:22.437 [debug ][deluge.core.core :64 ] deprecated session status key num_peers, please use peer.num_peers_connected 13:59:22.437 [debug ][deluge.core.core :64 ] deprecated session status key dht_nodes, please use dht.dht_nodes 13:59:22.437 [debug ][deluge.core.core :64 ] deprecated session status key has_incoming_connections, please use net.has_incoming_connections `",0,0.9800823330879211
1025262130,343,DjLegolas,2022-01-30T23:44:05Z,with which version of lt?,0,0.993355393409729
1025265529,343,doadin,2022-01-31T00:02:48Z,"sorry, with 2.0.5. so idk if you want to cover that here or not.",-1,0.992270827293396
1025266016,343,doadin,2022-01-31T00:04:42Z,googleing part of it like please use net.has_incoming_connections you can see people getting that with lt 1.1.5 [a link] so id imagine at least that one is old when for each version im not sure.,0,0.961093544960022
1025266204,343,doadin,2022-01-31T00:05:26Z,seems they are all as old as 1.1.11 edit: at least as far as users have reported on the deluge forums.,0,0.9406479597091675
1025269200,343,doadin,2022-01-31T00:15:15Z,i guess this list should be looked at [a link] [a link],0,0.9868007898330688
1025269469,343,DjLegolas,2022-01-31T00:16:09Z,"it's not a list, but a dict for deprecated session status keys, but seem we only use it when the key is not available at all: [code block] i'll try to fix it also, thanks. and also for lt2.0",1,0.970535933971405
1025269958,343,doadin,2022-01-31T00:18:00Z,"yea, sorry dict, but yea i just mean look over it see if theres anything that is'nt needed etc if we are going to require lt 1.2+. anyways you got this :) thanks!",1,0.9952418804168701
1025270583,343,DjLegolas,2022-01-31T00:20:11Z,the real issue is finding the caller that uses old keys... it might be even a plugin (like ltconfig),0,0.975196123123169
1025271757,343,doadin,2022-01-31T00:24:16Z,num_peers dht_nodes has_incoming_connections show up with no plugins enabled.(maybe the other too just did a quick run to check) is is still possible that its a plugin?,0,0.9948546886444092
1025272125,343,doadin,2022-01-31T00:25:30Z,my understanding is ltconfig only loads its settings if enable and doesn't modify settings else where.,0,0.9885184168815613
1026287415,343,DjLegolas,2022-01-31T22:46:18Z,so the deprecated error was being just printed by `deluge` itself in the `core`... the source was in all of the uis' status bar update code. thanks for the catch.,1,0.934926450252533
1026408243,343,doadin,2022-02-01T02:04:16Z,"cool, now we have modern ui code and up-to-date libtorrent api usage, nice work!",1,0.9963856935501099
1027320002,343,doadin,2022-02-01T21:49:17Z,unfortunatly i am not sure this is all set. currently i am seeing the status bar in gtkui say download 1 g/s but down speed in the torrent list treeview shows 3.6m/s. edit: same is true for upload speed as well. edit2: happens in webui too. i think its not converting bytes vs bites or something. as it seems to be mostly ~100x the value it should be. the status bar does include more then just the torrents transfer speed to some difference is expected but i don't have a gig connection and it went up to 2g/s at one point some definitely off some how.,-1,0.5358844995498657
1028335062,343,DjLegolas,2022-02-02T20:35:23Z,so it seem that i was using the total uploaded/downloaded bytes in the session... should be fix. - can you verify? thanks,1,0.7740364074707031
1028401107,343,doadin,2022-02-02T22:04:17Z,"looks like its fixed, thanks!",1,0.9529748558998108
1029498174,343,doadin,2022-02-03T23:30:00Z,sorry ignore my last comment. still working fine.,-1,0.9899565577507019
1030156069,343,DjLegolas,2022-02-04T16:40:16Z,"found some places that needed to be fixed also. in addition, now i have removed all new known deprecated functions that were introduced in `lt 2.0`.",0,0.9905810952186584
1038131736,343,cas--,2022-02-13T13:50:12Z,closed via 2bd095e5bfc49cbe178fc0ba9df38b88afc238aa (mix up put wrong pr number in commit!),0,0.9920136332511902
59654514,14,bendikro,2014-10-19T16:06:49Z,all issues have been addressed as far as i know.,0,0.9873459935188293
61801530,14,cas--,2014-11-05T12:44:12Z,there are still two outstanding notes,0,0.9588794112205505
65208592,14,cas--,2014-12-02T10:14:10Z,"for the docstrings: could the first line not be empty i.e. `""""""add torrent`... add fullstops after args, etc as when reviewing you can be more certain that it it's not an incomplete description :)",1,0.9018741250038147
65229534,14,bendikro,2014-12-02T13:23:02Z,comments on docs noted!,0,0.9626772403717041
65401615,14,cas--,2014-12-03T12:45:14Z,i was about to merge this but realised that the other uis need to be updated to use this new function. there were the small docstring changes i was going to add... [code block],0,0.9900099635124207
65444975,14,cas--,2014-12-03T16:52:43Z,thanks! added to develop: [08363f28dd308],1,0.977777361869812
1012608979,337,cas--,2022-01-13T23:22:34Z,hmm seems the pr label condition did not work :thinking:,1,0.7720874547958374
1012717504,337,mhertz,2022-01-14T03:28:57Z,"sorry just quickly wanted to add that i'd recommend rebuild gvsbuild before releasing installers to public, sorry if always was the plan regardless - reason can be read in my issues thread and pr at gvsbuild, both closed now and pr merged. just to add what's missing there, then i just found out nsis adds ""start in"" for it's generated shortcuts into target dir, effectively making people hit the pyinstaller and trailing semicolon bug i previously posted about(on py3.8 and up only), but i didn't knew before today that it is windows adding trailing semicolon to path(more info on gvsbuild post), so pretty much most(all) should be affected(unless maybe if having old install before change introduced), and that the generated shortcut from deluge installers uses said ""start-in"" - i tested building installer, install, and couldn't start from desktop shortcut, with error message posted about wrong parameter. if not wanna rebuild, could also just use something like this in mean time(change paths accordingly), before firing off pyinstaller: [code block]` alternatively could instead change that ""start-in"" from nsis(easilly goggled), though less good solution imho. more info if interrested: [a link] don't have to respond, and sorry for intrusion again, carry on :) thanks. edit: actually no such code should be in these py-wrapper init's on freezed imho, and i elsewhere patched it out a long time ago and added my own to deluge init for finding gtk-subdir on py38+, as otherwise point-of-failure(incompatible dll found), but not here where all dll's in main dir, though still takes useless time, though neglible. could check if frozen etc. anyway, maybe irrelevant to you and just adding in case.",-1,0.98914635181427
1012742544,337,doadin,2022-01-14T04:26:53Z,"-- i think this might conclude what i have for now, if it looks ok and you want to merge.",0,0.8432667851448059
1013071428,337,CirnoT,2022-01-14T12:19:39Z,"we're still missing `gtk_csd=0`, though we could ship without it and observe reports from users to decide if it should be added or not.",0,0.9899864792823792
1013102393,337,doadin,2022-01-14T13:08:10Z,"sorry i meant specifically _**i**_ am done. if you want take these changes as is or what ever ill leave this open let you merge as you see fit -- , but i'm not going to be adding more for a while. i would suggest someone else start a pr for further changes. thanks guys! edit: i did make a few adjustments to this from what you guys have commented.",-1,0.5363453030586243
1013112569,337,cas--,2022-01-14T13:23:21Z,"that's perfectly understandable, i can make tweaks and hopefully others will contribute once i've created a release",0,0.8669750690460205
1013125812,337,doadin,2022-01-14T13:38:52Z,"thanks, i do plan on making a few changes/helping with a few things, i'd like to see added, but just gonna take a break for a while and while i would like to see people get an official release soon, i also don't want to hold up progress by just leaving this pr open and not helping/responding.",1,0.470695823431015
1018484327,337,cas--,2022-01-21T13:01:07Z,i have refactored the dependencies: 9d4ca77ef7ebf1b3e39b837a0f31cec3da110760 i created a simplified csd runtime hook: 4f17fc41a506aeba6c595ef7ee2e53fbbd4aeeca i merged your copyright update: ad27a278fd2b246c9c8aa30ca1887c11ca5bb712 and pygame: 2cad0f46f,0,0.9842878580093384
1018509748,337,doadin,2022-01-21T13:34:07Z,that covers the commits i had for here so closing. thanks!,1,0.9842653274536133
1032989694,369,cas--,2022-02-08T19:38:12Z,"nice catch, i have been meaning to investigate that one properly",1,0.9853259325027466
1033050786,369,gazpachoking,2022-02-08T20:52:56Z,"i'm looking at all the other bits that call the live handle.status(), and having trouble deciding whether they really need a fresh status or the cached one is good now that it's guaranteed to be relatively recent. if we do want to pull guaranteed fresh status, maybe we should add something like `torrent.get_status(update=false)` that way we are guaranteed to update the cache every time `handle.status()` is called, rather than calling it sometimes and not storing it to the cache.",0,0.5756187438964844
1033101423,369,gazpachoking,2022-02-08T21:57:24Z,"i had a go at answering my own questions raised in the op, and implemented them as such. happy to reconsider if anyone has any better plans.",1,0.9855077862739563
1033819158,369,gazpachoking,2022-02-09T14:28:05Z,"another thing that could be done to fix this, potentially alongside this change, is to call get_torrents_status on all of the torrents we need to check rather than looping over them one by one. presumably the bulk call to libtorrent is more efficient that getting the status on each torrent individually. maybe leave the current cache expiry changes in as backup, but also add the get_torrents_status call to do the bulk update for the stop ratio check?",0,0.9913177490234375
1039871460,369,gazpachoking,2022-02-15T05:22:24Z,hmm. how did i mess up the docs building?,0,0.9580581784248352
1040069380,369,cas--,2022-02-15T09:51:34Z,my quick testing suggests it's related to typing added in commit [a link] i'm testing locally to see what is causing it,0,0.9873095154762268
213848098,78,cas--,2016-04-23T22:28:51Z,a few notes: - english is not an option in the drop-down. - need to hit `apply` then `ok` but this is probably a pre-existing issue - change `height: 22` to `height: 17` to gain some height in interface.js,0,0.9894784092903137
213848593,78,cas--,2016-04-23T22:32:41Z,with the extra height i would like `language` label to be a `xtype: fieldset`,0,0.9945617318153381
213924317,78,bendikro,2016-04-24T10:01:22Z,"haven't looked at the apply issue, but the language option should now be working 100%.",0,0.9824990034103394
214039210,78,cas--,2016-04-24T21:21:31Z,should we perhaps either prompt 'refresh browser' or actually refresh the page after clicking apply?,0,0.9921471476554871
214039875,78,bendikro,2016-04-24T21:25:10Z,probably a good idea. auto refresh may be a bit intrusive?,1,0.8095362186431885
214048990,78,cas--,2016-04-24T22:25:42Z,you might be right that auto-refresh could be intrusive so popup box perhaps?,0,0.9808305501937866
214051668,78,bendikro,2016-04-24T22:29:05Z,"yeah, if that's a simple fix?",0,0.9897770285606384
214053654,78,cas--,2016-04-24T22:35:29Z,it should be with: [a link] just need to catch the language change,0,0.9956472516059875
214214294,78,cas--,2016-04-25T08:54:31Z,i think adding this to onapply should suffice: [code block],0,0.9932284951210022
2310964316,454,cas--,2024-08-26T19:52:20Z,"i'm afraid there are too many changes here and not enough details in the commits about why the change is required. if possible, can you split these up into more concise prs it will help reviewing and merging",-1,0.9554972052574158
2324924199,454,Lord-Kamina,2024-09-02T14:51:51Z,"i hadn't seen this comment, sorry for not answering before. i'd rather not split it (although it is true that there are some not-strictly related things here) because then we'll never get it merged. however, i'm more than happy to amend commit messages and/or explain why i've made each change.",-1,0.9757914543151855
2329862059,454,Lord-Kamina,2024-09-04T19:57:14Z,-- using `libtorrent==2.0.8`fails because for some reason that version is missing from pip. i think that's why i had done `<2.0.9`,0,0.7917178273200989
2333314599,454,zakkarry,2024-09-06T06:09:08Z,"the publishing to pip seems to be intermittent, i've made an issue on libtorrent a little over a week ago about pip builds, but i haven't seen any update. there is a open pr that seems to address some of the builds/ci for libtorrent, but i'm not sure if this directly address this concern. you can see my issue and the linked pr [a link]",0,0.9367591738700867
2333355143,454,DjLegolas,2024-09-06T06:41:59Z,"there were several issues with the `pypi` publish process for `libtorrent`... i hope the fixes will work on the next release, as py3.13 is about to be released -kamina please revert the change to `install gtk` step as it will always fail until we have a newer release for it.",0,0.9438129663467407
2333358050,454,zakkarry,2024-09-06T06:44:13Z,"as i've found out recently heh. a user on the forums was asking about 3.13 support, and i told him to make an issue or pr, and he made [a link] for it - it's failing some tests though it seems.",1,0.539660632610321
2333849136,454,Lord-Kamina,2024-09-06T11:26:50Z,"the change to gvsbuild-release was already commited, all that's missing is for the workflow to run, which is only on a manual trigger. however, that would break the current ci. the idea would be to run it just before this pr is ready to be merged.",0,0.9926415085792542
2333857570,454,Lord-Kamina,2024-09-06T11:32:20Z,"i know and i was inquiring about it as well a while ago. thing is, even if that's fixed, i doubt we'll get retroactive releases for an old version, so the point stands in that we need to be able to 1) update libtorrent and 2) have at least some ci workflow that fails anf alerts us when newer versions break, because else we're putting ourselves in the same position the folks at twisted did, which is essentially forgetting it's an issue. of course, i'm willing to help however i can but i have essentially no experience working with libtorrent so i'm not sure that really amounts to much. what do you think ?",0,0.7538313269615173
2336497552,454,Lord-Kamina,2024-09-08T00:43:04Z,i don't think that's at all related? what was merged (and still is not really reflecting anywhere) is a change in the way gvsbuild is built for newer releases to be used in deluge.,0,0.975212037563324
2336498123,454,zakkarry,2024-09-08T00:45:48Z,"i wasn't saying it was related necessarily, but you mentioned 3.13, so i informed you of a relevant pr to the version, that's all.",0,0.9910123944282532
2358520475,454,Lord-Kamina,2024-09-18T13:46:25Z,closing this as per #466,0,0.9946367144584656
218823874,90,cas--,2016-05-12T17:13:59Z,"just revert/delete my commit removing of unicode_argv until we can test it on windows and be sure it's working without it. can be a python 3 milestone... i think a few extra details in the commit message just to quicky explain the changes would be handy. also detailing the original issue i.e. `~/delugedev/deluge -u web -a ""-h""` not displaying help. this was the original help output for ui group: [code block] currently seeing this: [code block] i know that using subparsers means we cannot add them to the ui parser group so may need to do something similar as described here: [a link] so if `positional arguments` can be renamed to something more meaningful, moved closer to ui options and include in the description that ui args can be passed as well...",0,0.921209990978241
218908142,90,bendikro,2016-05-12T22:51:38Z,rebased/squashed and removed the unicode_argv commit. current output of `deluge -h` [code block],0,0.994081437587738
219013504,90,cas--,2016-05-13T11:01:33Z,ok so i had added a few text tweaks and rebased them and was about to merge when i realised that the ui_entry tests should not be passing... i have pushed those changes back to your branch in the meantime. what should we be doing with unrecognised args? e.g. old `--ui`,0,0.9857895970344543
219326257,90,bendikro,2016-05-16T00:51:06Z,"i think i got a working solution now that correctly handles the following key cases: 1. console command with no extra argument will connect in interactive mode: `./deluge console` 2. console help: `./deluge console -h` 3. console sub command: `./deluge console info` 4. console sub command help: `./deluge console info -h` i've added tests to verify this to work, but more tests cases could probably be added. `--ui` will now give `unrecognized arguments: --ui`. is this not desirable?",0,0.7247918844223022
401407557,196,DjLegolas,2018-06-29T16:34:20Z,"i'm trying to add tests, as you suggested, with no luck. it seem as the server is up but when trying to connect to it with ssl\tls, it does not respond to the protocol, and handle the negotiation process. and this cause the test process to halt and wait to results. my initial try is in [a link] pastebin -- any ideas how to fix it?",0,0.7705845236778259
401458963,196,cas--,2018-06-29T20:00:18Z,i didn't realise the tests were so slow. perhaps leave it for now then. the issues you are facing with running a subprocess command in tests is likely related to the twisted reactor. i had success with the following instead: [code block] i did see potential python tests here: [a link],0,0.969971239566803
401489689,196,DjLegolas,2018-06-29T22:30:23Z,"i think i didn't explain the problem correctly. the script will take time to run, but it's not the problem we have. when the test run, it starts the webui with `self.deluge_web.start()`. the expected behavior is the ability to connect to the server itself by connecting to it's ip and port - `127.0.0.1:8999` and being able to use it. unfortunately, this is not the case. when connecting to it with a web browser, firefox and chrome, there is no response from the webui at all. all you get is a message that the server is down. connecting with `openssl -s_client -connect ip:port` only shows `connected(*some-code*)` and the handshake process being stuck after the 1st phase, `client hello`. a good connection will show the important info about the secured connection, like public cert, protocol version and agreed cipher. btw, this testing library looks cool.. i'll check it out. **edit**: now i understood what you meant... i'll create a test with both `testssl.sh` and `tlsfuzzer` and verify which is faster.",-1,0.7471023797988892
402473793,196,DjLegolas,2018-07-04T13:06:40Z,"ok, i've implemented the tests using `testssl.sh`. this effects the duration of `pydef` and `trial` to be completed. in addition, not all tests currently passes as a further configuration is needed for `twisted`: * `client-initiated renegotiation` needs to be canceled. * there is no `server cipher order` for the daemon. finally, some of the tests are for `http\s` servers, so whey are being skipped. i didn't use `tlsfuzzer` because it's still under development, has no documentation and doesn't compatible with an automated test-run.",0,0.9854332804679871
403974929,196,DjLegolas,2018-07-10T21:40:02Z,"yeah, i know. as a fix for `pytest`, i've added a new `toxenv` only for the security tests and set the main test run to ignore it. the problem is going to be with `trial` run, as currently it tests everything with no option to split the tests... please write if you know of any way to do it.",0,0.890197217464447
404093153,196,cas--,2018-07-11T08:46:54Z,you could set an env var and skip the tests if not set [code block],0,0.9951968789100647
408443867,196,DjLegolas,2018-07-27T14:56:00Z,"it can be done, but this will extend the running time of the test as we need to download 2 files, `testssl.sh` and `etc.tar.gz`, and extract the later (or download everything from its [a link] and then extract). to do so, i'll need to add to `commands = ` the commands to download and extract the files, right?",0,0.9940958023071289
410463247,196,cas--,2018-08-04T17:02:56Z,"actually, i just realised that the code should be downloaded by travis instead in `install` section. tox is for setting up a python test env so we should specify in the documentation that testssl.sh is a requirement. use whatever is the simplest way to install the files, using the releases seems like a good idea. to deal with the time penalty i intend to only run these security tests either manually or with commits on the `develop` or `master` branch. so not prs or other branches. another idea so you can run them in a pr is to include something like the word `security_test` in the commit message.",0,0.9567418098449707
412133089,196,cas--,2018-08-10T16:20:14Z,this is looking great and i think nearly ready for merging? did you want to squash the commits and also test out the travis keyword in commit message?,1,0.5324319005012512
419192709,196,cas--,2018-09-06T18:18:36Z,thanks! merged,1,0.985089123249054
211376089,67,bendikro,2016-04-18T13:19:24Z,are there any unresolved issue left?,0,0.9880949258804321
211434266,67,cas--,2016-04-18T15:33:55Z,merged in develop: 47f14845ca,0,0.9932934045791626
1025081351,354,gazpachoking,2022-01-30T06:34:16Z,"so, i guess i'd better ask, because this turned in to a much bigger thing than i thought. are we in to this? -- ? i think it's probably worth it in the long run if i can get things cleaned up a bit more. right now it's a mix of manually redone tests that are nice, some things that i change only just enough to work, and some in between. i have found multiple cases of tests that were broken, (passing, but not testing the thing they thought they were,) and even some where the thing they thought they were testing was broken. i think getting closer to pure pytest (with pytest-twisted) is much nicer, and converting some of the convoluted test subclasses into composable fixtures would be pretty nice.",0,0.47593459486961365
1025082447,354,aresch,2022-01-30T06:45:09Z,i don't have much of an opinion on this besides that i like pytest and moving to using it makes sense to me.,0,0.7165656685829163
1025193177,354,gazpachoking,2022-01-30T17:43:02Z,looks like many of the pytest features don't work well with unittest test classes either. some of the broken tests were because inlinecallbacks methods eat exceptions if used in a unittests.testcase class. working on ripping that out completely.,0,0.9625672698020935
1026261440,354,aresch,2022-01-31T22:09:12Z,i've skimmed through most of this (it's too large to review too deeply) and it looks fine to me. using pytest and removing some dependency on twisted seem like good things to me. i'll defer to -- if he has any issues with this. lgtm,1,0.947431206703186
1027523993,354,gazpachoking,2022-02-02T02:46:24Z,"my commits were not in meaningful chunks, and mostly had bad messages, so i squashed this down.",0,0.5063455700874329
1029063441,354,cas--,2022-02-03T14:46:47Z,"you know i recently watched a [a link] where he described a new python core developer arriving and refactoring the entire test suite, causing unintended headaches... i'm not saying this is not a good idea, it's just a notable coincidence :stuck_out_tongue_closed_eyes:",-1,0.8480886220932007
1029120409,354,gazpachoking,2022-02-03T15:41:36Z,"i'm happy to step back on any of these things if i'm stepping on toes or it's likely to break stuff. i'm exactly that guy that's exited to contribute that hettinger was talking about, and i do think i'm making improvements, but let me know when i'm trampling on your flower garden. :beaming_face_with_smiling_eyes: i have noticed several bits where the test/docstring doesn't do what it says on the tin, but that are delicate because there might be places depending on them working the way they do, even if the current way is 'wrong.' specifically on these test rewrites... there is stuff that doesn't work right when mixing unittest and twisted.trial into pytest. i think it's worth it to excise those tools in favor of pure pytest.",1,0.9832028150558472
1029466121,354,cas--,2022-02-03T22:36:53Z,"this is fantastic work, thanks. i included a modified version of your pr description in the commit message, it's really useful!",1,0.9974642992019653
1040843284,376,doadin,2022-02-15T22:05:53Z,-- this might help/be related to [a link] . either way it is an improvement since ipv6 was not supported before. if you guys could review thanks!,1,0.9910805821418762
1040893174,376,doadin,2022-02-15T23:15:59Z,"ah, ok i thought maybe it had to do with ipv6 having letters possibly or something like that. i'm not very good with naming but updated for part of the change you and suggested. thanks guys!",1,0.9942557215690613
1041403701,376,doadin,2022-02-16T11:44:29Z,-- honestly i don't follow half of what you said in reviews.,-1,0.9026448726654053
1041406329,376,cas--,2022-02-16T11:48:00Z,it was a quick review but i can clarify where you need,0,0.9537525773048401
1045329134,376,doadin,2022-02-18T23:13:00Z,-- thanks!,1,0.9845787286758423
405041974,204,DjLegolas,2018-07-14T18:37:42Z,"i have a dilemma as to whether to include the credits and/or license or not because they contain relatively a lot of information that i am not sure if it is necessary to include. of curse, it's still under develop, but mostly because of this dilemma. the main `about` window is finished and only needs a toolbar icon.",-1,0.9714847803115845
405082674,204,cas--,2018-07-15T10:48:54Z,"the about should contain a short amount of information as it is a pain to maintain otherwise. we have all the detailed information in the source code, which is sufficient for now. therefore i would credit writing the application to the deluge team and leave out the translation authors (it's pretty outdated anyway). the licence can be something like `gpl v3.0 or later`. properly including it all in documentation might be useful in future as a central resource to point to.",0,0.9430045485496521
405082695,204,cas--,2018-07-15T10:49:16Z,could you include a screenshot?,0,0.9939420819282532
405090220,204,DjLegolas,2018-07-15T12:54:33Z,"connected | not connected -|- ![a link] | ![a link] as you can see, i tried to make is as close to the one in the gtk. this is why i wanted to know about the credits and license.",0,0.9697534441947937
405722542,204,DjLegolas,2018-07-17T20:48:14Z,any ideas why the tests are failing?,0,0.9398663640022278
405733846,204,cas--,2018-07-17T21:27:48Z,"seems the new javascript has broken slimit: [a link] on 17 july 2018 at 21:48, djlegolas wrote:",0,0.9925661087036133
427274129,204,DjLegolas,2018-10-05T07:38:07Z,"ok, i want to finish this feature... --, is it fine if i'll remove the credits window, and set the license to [a link] file?",0,0.9124159216880798
427281084,204,cas--,2018-10-05T08:06:29Z,yes removing credits is fine and i don't think we need the license one either. i don't see it being of use for end-users.,0,0.9825596809387207
427375876,204,cas--,2018-10-05T14:00:22Z,"fyi: if you rebase on develop, install [a link] and use: pre-commit run --all-files that will format the python with black and js with prettier. to have it run on the git commit files everytime using git hooks, use the install command: pre-commit install i am writing some docs to better explain the setup ;)",1,0.9776212573051453
427425086,204,DjLegolas,2018-10-05T16:33:03Z,"hmm, --, looks like something is missing... when i tried running it, i got an error: [code block]",-1,0.8033337593078613
427445953,204,cas--,2018-10-05T17:46:55Z,yeah i only just added today: 0548bdb6 :stuck_out_tongue_closed_eyes:,0,0.9813913106918335
427613735,204,DjLegolas,2018-10-06T23:34:24Z,"lol, ok. :face_with_tears_of_joy: 2 things... 1. is there any quick way to get the connected server hash id? i want to get its version number, but can do so only with `deluge.client.web.get_host_status`, which requires the server id... 2. do you know who controls the bots of github and trac on irc? they are both out of the main room and, therefor, no info is shown when publishing stuff.",1,0.9934428930282593
427680511,204,cas--,2018-10-07T19:37:23Z,1. the `host_id` is not readily available other than parsing the `web.get_hosts` for `host_id` with `connected` status. if you are looking for the version then using the rather obscure rpc method `client.daemon.info` returns the version of the currently connected daemon. 2. if you mean drizzle bot that's a deluge service that i maintain... i haven't been on irc recently so didn't notice that need to be registered to join the channel now. the bot is now registered and hopefully will spam the channel once more ;) i think the github one was gazpachoking's but that's just a guess.,1,0.9226534366607666
427685901,204,DjLegolas,2018-10-07T20:51:29Z,"ok, interesting, but i didn't find a way to get this method to execute through the webui. am i missing something? is there another way to send rpc commands? currently, i'm doing something similar to what the connectionmanager is doing (get the list of all configured servers and for each on of them, check if the client is connected to it and get its version).",0,0.9616100192070007
427692017,204,cas--,2018-10-07T22:19:44Z,ah it looks like some extra methods won't be allowed by the `json_api` because they are not actually in the rpcserver registered methods list. it probably would make sense to export a version method in daemon: [code block],0,0.9903828501701355
427732498,204,DjLegolas,2018-10-08T06:30:07Z,"yep, this will do the trick. btw, do you have an idea for an icon to add to the `about` button itself?",0,0.9701626896858215
430182874,204,cas--,2018-10-16T10:16:31Z,what do you think about using the deluge icon and text on the left-hand side as the button to show about?,0,0.9851018190383911
430225581,204,DjLegolas,2018-10-16T12:53:29Z,like this? ![a link],1,0.5030695199966431
430249215,204,cas--,2018-10-16T14:01:35Z,actually mean making deluge clickable and popping up the about dialog,0,0.9717196822166443
430309003,204,DjLegolas,2018-10-16T16:40:06Z,"ok, i think all of the work is done.",0,0.9260877966880798
431675849,204,cas--,2018-10-21T14:58:35Z,"thanks, merged",1,0.800144374370575
1023694782,352,aresch,2022-01-27T22:19:37Z,this would probably break plugins?,0,0.9554340839385986
1023704726,352,aresch,2022-01-27T22:35:24Z,"by the way, here is some history when i went down a somewhat similar path in the past: [a link]",0,0.9663969874382019
1023711809,352,gazpachoking,2022-01-27T22:48:06Z,"hmm, probably right, i'll look closer at that. they can access more stuff than just the ``ed methods, right? i'll take a peek at that. i'm thinking given these issues, maybe the nicest compromise is to make a decorator that calls ensuredeferred, and wrap any converted functions in it, just like we would with inlinecallbacks. it wouldn't give us all the advantages of async/await, but it would ensure full compatibility with everything existing, while letting us use that syntax within the wrapped functions. i don't think that method has any disadvantages compared with inlinecallbacks either.",0,0.8511279225349426
1023818698,352,gazpachoking,2022-01-28T02:11:20Z,"okay, i added the ensure_deferred decorator, which will let us keep using the wrapped async functions as normal functions returning deferred. i'm investigating whether there's something clever to do that will dynamically remove the wrapping if called directly from another async function, but it might be a bit too magicy, (or not work at all,) we'll see.",0,0.9655736088752747
1023903263,352,gazpachoking,2022-01-28T05:36:42Z,"i may have just created a best of both worlds situation. i modified the `ensure_deferred` decorator to only call `ensuredeferred` in situations where the function was not being used like a coroutine function. this means in works exactly like an `inlinecallbacks` function, _unless_ it is called from within another async function, in which case it acts like a plain coroutine. this means in areas where we've converted the whole chain to async functions we'll get nice tracebacks, without breaking compatibility with places still using legacy twisted deferred syntax. i'm really quite excited with this solution, but it probably needs a bit more testing before i can tell if there are any weird idiosyncrasies that make it sub-optimal. -- how do you feel? example: [code block]",1,0.9893006682395935
1023906260,352,gazpachoking,2022-01-28T05:44:55Z,"hmm. might be some issues still. gtkui doesn't seem to be working. edit: oh, that might just be from importing reactor too early and having the default one installed instead of the gtk one. edit2: yep, that was the issue.",0,0.8581920862197876
1024323283,352,gazpachoking,2022-01-28T15:22:19Z,"i 'm pretty excited about this method, i'm hoping there are no caveats i'm failing to see at the moment. a couple questions though: - location: is decorators the right spot to put it? i guess so.. - naming: it isn't really ensuring the result is a deferred anymore, i'm not sure if there is a better name.",1,0.9897756576538086
1024437407,352,aresch,2022-01-28T17:19:29Z,"this pr kind of scares me. i feel like it's warping the definitions of both coroutines and deferreds into a bit of a mess that might not be easy to reason about. being able to call a ""coroutine"" without await seems weird to me. there is also no async loop created, so how would a regular coroutine even work? are you planning to install the asyncreactor?",-1,0.9827191829681396
1024483689,352,gazpachoking,2022-01-28T18:10:44Z,"async/await is just a language feature separate from asyncio. i'm not involving asyncio at all in this pr, this is all still pure twisted. twisted allows using the async/await syntax, which under the hood works almost exactly the same as using inlinecallbacks on a generator function. [a link] once an async function is wrapped in ensuredeferred, it can feel free to call other coroutines that aren't wrapped in ensuredeferred, as the outer most wrapping will handle the whole thing. this is desirable, because wrapping every level of coroutines in ensuredeferred mangles tracebacks, (not any more than they are now, but that is one of the nice benefits of async/await vs inlinecallbacks.) for us though, since we have a lot of places calling in to our functions, including plugins we might not control, leaving unwrapped coroutines would break any place that called it without the await keyword. the magic i've added here allows coroutines to be left unwrapped by ensuredeferred _only_ in the case where it's being called from another function that already has that wrapping. when used outside of an `await` statement, the ensuredeferrred wrapper is automatically added, making the coroutine into the excact same thing as an `inlinecallbacks` wrapped generator. i'm still not 100% sure there aren't side effects, i'm trying to trace down the ci failures now to see what's going on with them, but at the moment i suspect it's because i've subtly changed the logic of component.start, and nothing to do with the new syntax.",0,0.9712608456611633
1024492113,352,gazpachoking,2022-01-28T18:22:25Z,"in this case, it turns into the same thing as running a function that returns a deferred. ```python def a(): yield defer.succeed(1) print('doing something') a() async def b(): await defer.succeed(1) print('doing something') b() # acts exactly the same as a()",0,0.9882348775863647
1024617769,352,aresch,2022-01-28T20:37:18Z,thanks for the clarification. i guess i don't understand why the example with b() is preferable to a()?,1,0.9493208527565002
1024626240,352,gazpachoking,2022-01-28T20:51:39Z,"a couple things i was shooting for: 1. get closer to a syntax where we could one day switch from twisted to asyncio 2. await is a bit nicer than yield for a few things, for example you can't: [code block] or [code block], but you can with await 2. improve tracebacks. with inlinecallbacks, (or regular callbacks,) the traceback doesn't show you the line that called `yield a_deferred` as the caller. when chaining awaits, it does. of these, 1 and 2 can be achieved by just creating a decorator that calls twisted's ensuredeferred which we wrap any functions we convert to async in. 3 is only achievable when the chained awaits only have the outermost coroutine wrapped. for this, we either need to convert everything at once, including plugins, or use something like the corodeferred that i made.",0,0.6595166921615601
1024642018,352,gazpachoking,2022-01-28T21:17:26Z,"man, i'm really struggling to figure out what's up with the ci failures. it looks like something happens to the daemon where it doesn't write the localclient account to the auth file. it doesn't happen every time though, and i can't figure why. also can't figure how my current changes could cause this.",-1,0.9535436034202576
1024655648,352,aresch,2022-01-28T21:29:47Z,perhaps you could write some tests for corodeferred and the wrapper?,0,0.991483747959137
1024815648,352,gazpachoking,2022-01-29T02:49:20Z,"[a link] i should probably stop making new branches. :squinting_face_with_tongue: perhaps the usage in those tests makes it more clear what i'm going for, and how it works? i'm sure there is other stuff to be tested, but can't figure it right now.",-1,0.6583240628242493
1024817640,352,aresch,2022-01-29T03:01:36Z,"yeah, i was just suggesting it as a way to hunt down any edge cases that may be causing the ci failures.",0,0.9841334819793701
1024835976,352,gazpachoking,2022-01-29T05:04:10Z,"man, the converting componentregistry.start is really stumping me. i tried just regular inlinecallbacks and it has the same issue of sometimes not working.",-1,0.9264446496963501
1024844177,352,gazpachoking,2022-01-29T06:03:36Z,"i finally figured it out. the components need to be loaded in a certain order which isn't encoded fully in their 'depends'. i don't know exactly which order breaks things, but when i forced them to go in the same order as before i made any changes to the start function (by making each one depend on the next) it works every time.",0,0.813469409942627
1024926487,352,gazpachoking,2022-01-29T14:55:45Z,"and now i think i actually understand _why_ the order is important. the tests wait for the message 'finished loading' to consider the daemon started. this means only that the torrentmanager component has loaded. it doesn't guarantee that the authmanager and rpcserver has started, so if the client tries to connect before they have started there are issues. edit: upon further investigation, it's just the authmanager not being started before the tests continue that messes things up. the rpcserver actually starts on init, and never needs the component to actually be 'started' to work.",0,0.8617969155311584
1027599507,352,gazpachoking,2022-02-02T05:28:02Z,"closing this. i'll do similar refactoring, but on top of maybe_coroutine pr if/when that goes in.",0,0.9908103942871094
403991746,201,DjLegolas,2018-07-10T22:56:58Z,"the default behavior is a browser-like https handler, so this should be covered by default. but to be sure, do you know of any site that uses cloudflare so we could test?",0,0.9938296675682068
404098153,201,cas--,2018-07-11T09:03:31Z,"from that ticket, i think [a link] is still a usable test case",0,0.9773685932159424
404160727,201,DjLegolas,2018-07-11T13:02:12Z,"oh, ok. `seo.com`'s works only with browsers with sni support. so i added it to the icon tests as it will show us the code ability to use it and download a file from it. as you can see, the test passes.",0,0.8675305247306824
405085695,201,cas--,2018-07-15T11:47:14Z,thanks! merged with some minor changes applied: c7e61f8c3461d59b5,1,0.9842516183853149
1030711888,364,DjLegolas,2022-02-05T23:05:33Z,seem as there is no way to test on python3.6 because there is no libtorrent binding to 3.6 for windows or linux...,0,0.9894941449165344
1030714505,364,doadin,2022-02-05T23:36:53Z,"imo 3.10 has been working nicely, i think we could change this from 3.7-3.10.",0,0.6999777555465698
1030882530,364,DjLegolas,2022-02-06T17:59:28Z,"i'm thinking about upgrading the minimum python version, again, to 3.7 and run the ci on all the supported versions (3.7-3.10)... -- what do you guys think?",0,0.9783459305763245
1030898094,364,gazpachoking,2022-02-06T19:29:33Z,"i'm :thumbs_up: on dropping 3.7 support. not sure when we'd want to fit that in in terms of versioning and releases. in terms of this pr, i'd say testing more than one version is an improvement, regardless of whether it hits every currently supported version. i'm also :thumbs_up: on adding in other versions up to 3.10",1,0.5433883666992188
1030925363,364,doadin,2022-02-06T22:12:33Z,should also maybe add [code block],0,0.9948688745498657
1030926702,364,DjLegolas,2022-02-06T22:19:13Z,"while testing, it helps having everything fail fast. but will add that flag later, thanks",1,0.9783811569213867
1030928157,364,doadin,2022-02-06T22:27:24Z,3.10 needs pytest >= 6.2.5 i think.,0,0.9893656969070435
1030929311,364,doadin,2022-02-06T22:34:45Z,"[a link] pytest == 6.2.5 ; python_version >= '3.10' pytest != 5.2.3, < 5.4 maybe",0,0.9943696856498718
1030930034,364,DjLegolas,2022-02-06T22:39:02Z,"no, i'll just drop the limits from `pytest`... it worked on my local windows and ubuntu, both with python 3.8.",0,0.9933626651763916
1030932760,364,DjLegolas,2022-02-06T22:56:09Z,"to sum this up: * testing python versions 3.7-3.10 * switched `libtorrent`'s installation source to `pypi` * dropped `pytest` version limits, current version is `7.0.0` for python 3.10 (thanks for the heads up)",1,0.9152470231056213
1033068452,364,doadin,2022-02-08T21:14:53Z,"i am noticing a few things we use like twisted in a coming version is droping python3.6 and pyinstaller, pillow already has, could probabbly drop 3.6 our selves as well. if it was only pyinstaller then id say no but deps are starting to drop as well. at least on the windows side requiring 3.7+ only excluded windows xp i think which nobody should still be using so not really a big deal imo.",0,0.5627719163894653
216035118,83,cas--,2016-05-01T11:09:02Z,note to self: this fix should be backported to 1.3,0,0.9879128336906433
217576929,83,cas--,2016-05-06T22:15:44Z,could you please rebase with latest `develop` branch and fixup into a single commit. see [a link],0,0.9958429932594299
217677485,83,Tanz0rz,2016-05-07T23:48:19Z,"i looked at that link you sent me, but it doesn't talk about commit messages at all.",0,0.9833433628082275
217704453,83,cas--,2016-05-08T08:56:35Z,that's because i moved the text yesterday to [a link],0,0.9938092827796936
218065421,83,Tanz0rz,2016-05-10T05:52:51Z,alright. commit rebased and commit message cleaned up. let me know if anything needs to be improved.,0,0.967307984828949
218090873,83,cas--,2016-05-10T08:25:35Z,"i'm afraid the commit title is not correct, it shouldn't start with a dash `-`. it also doesn't follow the same convention of existing [a link]. i did leave a hint when i renamed the title of this pr as to the wording so something like this would be more appropriate: `[autoadd] fix watch directory accepting torrent files with uppercase extension` as mentioned in gittips, you don't need to mention the log line addition as it's self-evident.",-1,0.8281055092811584
218661538,83,Tanz0rz,2016-05-12T05:08:54Z,reworded again.,0,0.9835736751556396
218815746,83,cas--,2016-05-12T16:44:14Z,merged 50d504a38f57684e,0,0.9897454380989075
164834865,50,bendikro,2015-12-15T17:29:33Z,fixed a new issue that (for some odd reason) appeared in sessionproxy tests due to time.sleep calls. starting to look mergable i think.,0,0.7900518774986267
446122590,228,DjLegolas,2018-12-11T08:57:39Z,"can you fix the failed test (regarding coding style)? in addition, please try to add a test for this.",0,0.9954480528831482
446626530,228,hukal,2018-12-12T15:24:24Z,"thanks for the feedback . a few minor questions: 1. unit test. i didn't find anything related to console commands. based on the naming ""test_ui_console_fields.py"" should cover something, but it's almost empty. did i miss something or i just need to write it from scratch? 2. coding style. based on travis log i see that black formatter failed. is it the right one? should i run it with default config? for example, in their [a link]. i didn't find anything about this formatter at [a link] thanks",1,0.9784210324287415
446678831,228,DjLegolas,2018-12-12T17:47:39Z,"i'll start with the failed test: the current coding style is new and is being validated with a dedicated test. it is something -- added some time ago. the best way to check this, is to install `tox` and run `tox -e lint`. it will run the same test and, iirc, modify the file as needed (note: don't run only once, but after each fix). about adding new test, you are correct.. there are no tests for the console ui... so just start one from scratch, and test only what you added for now. you can ask here for help. and look at the [a link] docs. finally, you closed this pr :grinning_squinting_face:",0,0.9218774437904358
449819698,228,DjLegolas,2018-12-25T07:56:20Z,"a little update, there are tests for the console. look at the `test_ui_entry.py` file. in it there are most of the ui entry tests, including `consoleuibasetestcase` class, which tests some the console's functionality.",0,0.9730530977249146
449869359,228,hukal,2018-12-25T19:24:33Z,"thanks for the hint and sorry for the delay with this pull request. i was busy with some personal stuff. i've pushed the tests to make sure the parser works correctly. but i'm still struggled with the entire flow test. i want to write a test which ""simulates"" torrent download and checks that the file was moved in the specified folder. once i find a way to do it, i suppose it should be ""enough coverage"".",-1,0.9808597564697266
452417917,228,hukal,2019-01-08T19:15:09Z,"hi , i've fixed inheritance and naming. but it looks like i can't find a proper way to make an end to end test. things i have tried: 1. directly call `handle` method of `add` command. in this case i'm getting _""consoleui component is not registered""_ error. event if i register it (mock?) i can't do anything since `add` command requires daemon. 2. in `test_ui_entry.py` we have `test_console_command_status` which works with daemon. i was able to make a similar one to test 'add' command but this command returns only ""torrent added"" without any id/hash. due to this fact i can't validate the file in the way it validated in `test_add_torrent_file` from `test_core`. 3. in addition to point 2 i've tried to run `status` command right after `add` in one method. (i was hoping to grep hash from there). it also caused errors. (am i correct that current test structure supports 1 console call per method?) could you please advise how to test it? thanks",0,0.6693057417869568
452420910,228,hukal,2019-01-08T19:24:16Z,build failed but i didn't change plugin configurations...,0,0.9816222190856934
452908155,228,DjLegolas,2019-01-09T23:26:17Z,"i was trying to implement this myself, and as you wrote - there is some kind of problem. i'll start with your 3rd point: there is a way to concatenate commands, and it's done by using a semicolon, `;`, between the commands and wrapping the entire phrase with apostrophes. as for the 1st issue, i agree with you, as it will be best to use the daemon itself. and now for the final part, the 2nd: as i stated in the first line, i tried to solve it too. for now, i wasn't able to solve this yet. during my many tries, i tried sending only one command. the structure of this command is: `deluge-console ""add --completed /tmp /some/path/to/torrent/file.torrent ; manage torrent-hash-id move_completed move_completed_path""` this should have added the torrent and report back the values configured via `--completed` arg. but i received only the `torrent added!` message without the info i requested. i suspect the problem is that the `manage` command being processed before the torrent was added, so i tried to split the command into two parts, the add part and the testing-values part. but this gave me some other errors which i wasn't able to solve, yet. currently, when running this test, it throws a `componentalreadyregistered` exception about `consoleui` when reaching the second `yield self.exec_command()` call. --, , - do you guys have any recommendations, ideas or suggestions? this is what i have done until now: [code block]",0,0.8473783135414124
453530362,228,DjLegolas,2019-01-11T14:17:47Z,"ok, i managed to run the test by adding a call to `status` command between `add` and `manage` commands. in addition, i added a test for the `add` command itself. changes pushed it to fork. i'm sure it's not the best way to handle this, but for now it will do. i hope :rolling_on_the_floor_laughing:",1,0.9773338437080383
453855070,228,hukal,2019-01-13T18:46:07Z,thanks ! i've checked the tests locally - all green. i'm only getting a warning: `common.py:270: pendingdeprecationwarning: dist() and linux_distribution() functions are deprecated in python 3.5` my local env is on python 3.6.7,1,0.9927198886871338
453856012,228,hukal,2019-01-13T18:58:43Z,"build error, again. `internalerror> pluginvalidationerror: unknown hook 'pytest_namespace' in plugin ` is it because of my changes?",0,0.9889802932739258
454109175,228,DjLegolas,2019-01-14T18:26:29Z,"1. yeah, `platform.dist()` and `platform.linux_distribution()` were marked as depricated in version 3.5 and are will be removed on 3.8. 2. it is an issue with `pytest-twisted` version `1.8.0` with `pytest 4.1` . we will have to wait till the next release to run the tests here.",0,0.9892348647117615
454123510,228,hukal,2019-01-14T19:07:35Z,"ok, let's wait. thanks!",1,0.9929850697517395
481831520,228,DjLegolas,2019-04-10T19:33:19Z,-- what do you say? want to merge this?,0,0.9830762147903442
483328519,228,cas--,2019-04-15T16:41:44Z,"it looks good, i will get around to reviewing and merging :+1:",1,0.9965356588363647
491545712,228,cas--,2019-05-11T21:37:23Z,thanks for this and the test :+1: i have made some changes (-m instead of -c) and merged it: f885edd7fc85f,1,0.9951120018959045
219020900,93,cas--,2016-05-13T11:43:11Z,"perhaps i should simply update core attribute in tm.on_alert_external_ip: `component.get(""core"").external_ip = external_ip` rather than register event in core...?",0,0.9867851138114929
219092510,93,aresch,2016-05-13T16:27:00Z,"i think that you're currently doing it the right way. directly updating the core attribute would feel like it breaks encapsulation. on fri, may 13, 2016 at 4:43 am, calum lind notifications.com wrote:",0,0.9427580237388611
219305167,93,doadin,2016-05-15T19:23:44Z,would it not be wise to maybe add a prefference for showing this? what if someone has other plugins that use status bar and now they have to make the window bigger to see them or default ones they do want get pushed away. just a thought. you also might be thinking well then just make it bigger but what about the users on small screens like the change to the add torrent dialog was for.,0,0.9797547459602356
219307035,93,aresch,2016-05-15T19:58:11Z,"at one point i thought that including a preferences page for the statusbar would be a good idea. the user could toggle on/off the various indicators/items. maybe that is what we need? on sun, may 15, 2016 at 12:23 pm, doadin notifications.com wrote:",0,0.8938882946968079
219307893,93,cas--,2016-05-15T20:13:55Z,there is certainly an issue with the statusbar items setting the minimum width of the main window so a toggle for statusbar items or something similar would be nice. there should be an existing ticket that covers this issue.,0,0.9890223741531372
219310062,93,cas--,2016-05-15T20:56:49Z,this is the existing ticket: [a link],0,0.9959425330162048
219327489,93,doadin,2016-05-16T01:05:37Z,"ah ok. yea i think like a prefferences page for status bar to add/remove items would be nice. maybe something simple like if checks to the gtk config around the statsbar create item or something more complex like status bar items registering like plugins. idk. glade to know its being thought about, though that ticket has been open for quite some time now lol.",1,0.9824624061584473
214394493,62,cas--,2016-04-25T15:28:06Z,a different question instead... could it perhaps be confusing using `argparse` and `optionsparser` is the class in console?,0,0.9752177000045776
214450845,62,bendikro,2016-04-25T17:29:21Z,"yeah, can fix that",0,0.9787595868110657
214475652,62,cas--,2016-04-25T18:44:14Z,added markup to help strings,0,0.9949883818626404
215887139,62,cas--,2016-04-29T21:31:41Z,there are the two tickets in 1.3.13 milestone that could also be addressed in this pr. here is a query of outstanding [a link] oh and a pylint [a link] :d,1,0.9859289526939392
256928213,62,cas--,2016-10-28T14:03:48Z,still not working with my [a link] and it looks like it because `sidebar_width` is a missed key in my config. [code block] if i delete `console.conf` i get this: [code block],0,0.9714648723602295
257090182,62,cas--,2016-10-29T12:55:41Z,the is a bug when switching filters in sidebar the topmost torrent gets hidden by the column header so you need to scroll up one.,0,0.9214643836021423
257093512,62,cas--,2016-10-29T14:05:34Z,"i think it would be an improvement to change the selection and popup menu keyshortcuts. - use `enter` to activate filter in sidebar - use `spacebar` to mark selections e.g. torrents a few other notes: - the deluge version in topbar is unnecessary, creating an 'about' popup would be useful. - the 'current filter' text in topbar is not well placed currently and a bit superfluous. it would be better placed in the area aboved the sidebar. in fact even better is if the sidebar is hidden and revealed when pressing `left-arrow`. something like this: ![a link] - need an option to automatically connect to daemon. - need a way to start console in commandline mode. help dialog issues: - pressing `h` in certain areas does nothing. e.g. connection manager, sidebar - there is no mention of use `spacebar` in help. - the help guide is overly verbose. (i can rewrite it if needed) - while in `help` you cannot open other dialogs straightaway. e.g. preferences bugs: - [x] pressing `o` on a torrent resulted in this error: [code block] there are other ui layout changes needing porting over from gtkui but they can wait.",0,0.7536462545394897
257094677,62,cas--,2016-10-29T14:30:53Z,other than the bugs and anything trivial the above changes can be detailed in a new ticket for future work so this pr can be merged sooner rather than later. i simply thought i'd record my train of thought while it was fresh :),1,0.9854324460029602
257119423,62,bendikro,2016-10-29T22:20:38Z,"i don't object to any such changes, however, simply changing to enter in the if test doesn't work, so i didn't look any further at how to solve that. however, it's worth to note that my idea is that, with pr6, it will be possible to have multiple states selected in the filter, which makes sense to use the space key for? maybe enter key would select currently marked and deselect any other currently selected? no, i've fixed and reworked some the help text, but there is probably much left to be fixed. yeah, i've reduced it somewhat, but it can certainly be refined some more. the help text does say ""these daemon connect options will be used for commands, or if console ui autoconnect is enabled."" but i haven't seen any _autoconnect_ functionality implemented for this. true good idea. wouldn't call it bugs. more like non-implemented features :-) also fixed bug when switching filter",0,0.9427806735038757
257148933,62,cas--,2016-10-30T12:44:05Z,created new tickets: help dialog improvements: [a link] sidebar: [a link] startup options: [a link],0,0.972342848777771
436420308,224,aresch,2018-11-06T21:47:00Z,"i would like to do more to improve the protocol, but it would require a bit more work that i'd like to wait to do until after the conversion to asyncio. i wanted to get these minor changes in before a 2.0 release though due to compatibility concerns of doing it post-release. i think it's reasonable to expect a break between beta releases. the one major change i wanted to make was to introduce a handshake to the protocol on connection where we could exchange protocol version support between server and client, which would be used to negotiate the highest supportable version. i'll fix up the remaining comments tonight.",0,0.9018977880477905
437821591,224,cas--,2018-11-12T09:58:25Z,shall i merge this?,0,0.994688868522644
437934865,224,aresch,2018-11-12T16:02:43Z,"yea, sure.",0,0.9515849947929382
438122943,224,aresch,2018-11-13T03:46:44Z,pushed in 043344b986013212a2ad5f51bc967810c5200c0c,0,0.9931309819221497
557839558,224,gdm85,2019-11-23T22:42:18Z,i am a bit late for some feedback however please note that there is an important difference between this protocol and the one originally used ([a link] * it is not possible anymore to encode and compress in a stream-fashion because the encoded length must be transmitted first (and thus known in advance) this means clients will be less efficient with transmission of large requests as they will use more memory. it can be a sensible problem for embedded devices and similar use cases (single-board-computers etc). also i observe that specifying the size is redundant as it is already guaranteed by zlib and rencode.,0,0.9450677037239075
557899309,224,bendikro,2019-11-24T15:29:34Z,"when did deluge ever support stream-fashioned transmission of messages? and how does the current protocol increase memory usage? the entire message is required before it can be successfully decoded, isn't it? the problem observed with the old protocol was that decompression would succeed even if the couple of last bytes of the message was missing. the result was that the last bytes were assumed to be the beginning of the subsequent message, resulting in failure to decode the message for ever.",0,0.9848327040672302
557903472,224,gdm85,2019-11-24T16:17:23Z,"the old version i provided url for did support a **client** streaming the messages, regardless of what the server is doing. no, you can start decoding rencoded-objects as soon as one rencode valid ""sequence"" has been decoded, and that does not require the full zlib buffer to be decompressed nor the full rencode message to be parsed. do you have a github issue for reference of this problem? zlib has an adler32 checksum support ([a link] you could have used that.",0,0.9928532242774963
558276693,224,bendikro,2019-11-25T18:16:09Z,"yes. but the new protocol only affects a client transmitting to the server, right? when receiving, the prefixed message length doesn't prevent the client from decoding on the fly, if that is desirable? what exactly do you refer to as a valid rencode sequence? i assumed that referred to a serialized python object (`tuple(message_type, request_id, python_data)`). in that case, you can't deserialize (decode) only parts of it? and how would that be useful anyways? say you're receiving the entire list of torrents (which is the largest message transmitted by deluge server). `rencode.loads` will not succeed until you have all the data transferred for that list. or am i misunderstanding what you're saying? how does that help you to know the length of the transmitted message? you would still need to know when you have the complete message with the checksum at the end? p.s. i don't think we used github at that time. there might be some track-ticket.",0,0.9798672199249268
558279945,224,cas--,2019-11-25T18:24:46Z,reference for the protocol changes in deluge 2.0: [a link] [a link],0,0.994820237159729
558381470,224,gdm85,2019-11-25T23:07:01Z,"yes. the server has always buffered the message before sending, so nothing changed in its implementation (but now even if one would want to rewrite it, it is constrained by the protocol). please note that this was my whole point (with the new protocol client must allocate a buffer for the whole message and cannot stream it down without such buffers), i mentioned it in case it was missed during the design of the new protocol. my tone should not be intended as a report of a major flaw, but as a report of what specifically is no more possible :relaxed: i was trying to say that at [a link] (`zlib.decompress()`) a checksum verification could have already happened e.g. `rencode.loads` could only be called **after** the adler32 checksum verification happened; however it turns out that python ignores the header that signals the presence of a checksum (those checksum bytes, if enabled during compression, most likely end up in the ""unconsumed input""). but even without a checksum, look at the python code: * zlib decompression ends when a `z_stream_end` is found: [a link] a standard-compliant zlib decompressor would return an error (either when using a buffer mode or streaming), give even stronger guarantees with a checksum, and still allow stream-fashioned i/o. so from what i understood the main problem in [a link] was calling `zlib.decompress()` on a tcp received buffer which could be incomplete; the new protocol makes a **blocking** read for the whole amount so it will solve this. however an alternative solution would have been to: * use buffered i/o * use a `zlib` decompressor which is strict about truncated input and honours the adler32 checksum (the python zlib decompressor does not seem to do so, as it is not checking the header bits for it - please correct me if i am wrong) would buffered i/o bring back the problem of a ""hanging"" reader? in fact problem is always there if one does not set i/o deadlines, regardless of the approach used for reading. you can probably test for this problem by inserting a random long delay within the first few bytes of the header: without a deadline the receiving end will still hang on the header receipt (note that i have not checked the current behaviour). when using buffered i/o one would practically set a deadline on how much to wait idle for a `z_stream_end` (relatively to last byte received) before giving up. i am not saying that it is - now or back then - worth pursuing this approach but i was wondering if it had been considered, as i am generally in favour of more efficient ways of performing network i/o. -- thanks for the urls, really interesting to read about the original discussion - and thanks guys for all the hard work!",0,0.37023913860321045
1024814775,353,gazpachoking,2022-01-29T02:44:13Z,"okay, once more with feeling. starting out at the very basics, with tests, and justifications, in hopes of getting something cleaner going here.",0,0.9121277332305908
1024815923,353,gazpachoking,2022-01-29T02:51:02Z,"man, what is going on with the tests. i didn't touch any deluge code yet in this branch. maybe those need to be refactored before any other work.",0,0.9545037150382996
1024933820,353,gazpachoking,2022-01-29T15:38:52Z,"i think maybe the problem is that my understanding of how the reactor works when used in the test suite is incomplete? something my added test file does messes up subsequent tests, but i'm not really sure what i need to do differently.",0,0.8191699981689453
1026433220,353,gazpachoking,2022-02-01T03:03:44Z,rebased this on top of the new test rewrites and everything it working fine now. was some test weirdness with the mixed twisted.trial and unittests that must have been messing it up.,0,0.7512122392654419
1027598337,353,gazpachoking,2022-02-02T05:25:23Z,"i don't want to put too much in to this, because some of the refactoring i want to do with it should probably be in their own prs, so it's easier to review stuff. this one i've just added the decorator, tests and converted over a few existing inlinecallbacks. since this is on top of my test changes branch, here's the real diff for this branch: [a link]",0,0.9308225512504578
1027870623,353,cas--,2022-02-02T12:03:12Z,thanks a lot for this and the tests pr! i'll try to have a look by the weekend,1,0.9941142201423645
1030854718,353,gazpachoking,2022-02-06T15:25:53Z,"oops, found an issue. wrapping those logging functions was a bad idea, because they get called before gtkui installs the gtkreactor.",-1,0.9743050932884216
1030855213,353,gazpachoking,2022-02-06T15:28:10Z,does anyone know why these are wrapped in inlinecallbacks to start with? my inclination is to just make them synchronous. [a link],0,0.9934173822402954
1030859121,353,cas--,2022-02-06T15:48:06Z,there are some odd decisions in old code :shrug: i agree though,1,0.6650009155273438
1030861089,353,gazpachoking,2022-02-06T15:58:41Z,"i made them synchronous. doesn't seem to have any ill effects, and fixed the issue at hand.",0,0.9770399332046509
1030914980,353,cas--,2022-02-06T21:10:00Z,excellent work this should lay a good foundation for the async code!,1,0.9958016276359558
782799103,306,matiasw,2021-02-21T05:14:03Z,thanks for the feedback. i changed quotes into single quotes and changed the import order; not sure if it's still the way you'd like?,1,0.9676936268806458
927121329,306,matiasw,2021-09-25T13:29:33Z,"ok, so i changed the code to use these premade functions. it is a bit neater, now.",0,0.9798913598060608
927324895,306,matiasw,2021-09-26T15:32:52Z,i have made the requested modifications and added the preferences setting for this feature.,0,0.9940464496612549
927333881,306,cas--,2021-09-26T16:36:13Z,"excellent, thanks! just need to fix the failing linting issues ![a link] if you install [pre-commit](pre-commit.com) then your commits are linted automatically",1,0.996977686882019
927345745,306,matiasw,2021-09-26T18:01:23Z,"uh, so, i did install pre-commit, and on my machine, with `pre-commit run --all-files`, i get all passed, but the ci test on github still fails. if i knew why, i could fix it?",0,0.9312793016433716
927348900,306,cas--,2021-09-26T18:23:29Z,"that is strange, i see this: ![a link] don't worry i'll can resolve it when merging it :+1:",1,0.9871521592140198
933005844,306,cas--,2021-10-03T18:53:32Z,thanks for this useful feature!,1,0.9452301859855652
1001217476,325,cas--,2021-12-26T17:33:11Z,thanks for getting this work started. maybe look at using this: [a link] with `--py36-plus` since with can bump to >=3.6 (i know 3.6 eol),1,0.9766023755073547
1001222682,325,bwitt,2021-12-26T18:03:27Z,+1 for using [a link] with `--py36-plus` ; also suggest using [a link] with `--py36-plus` to fix up a few more things.,1,0.9538400173187256
1001358894,325,DjLegolas,2021-12-27T06:17:02Z,do you want to add it permanently to the linting process?,0,0.9909405708312988
1001633764,325,cas--,2021-12-27T16:02:05Z,"what i would suggest is that this pr is wrapped up as is and we merge it. so things to finalise for this pr: * remove urllib imports in preferencesmanager to pass the linting * any tests or reference to python 2 use `git grep -ei ""python.?2|py2[ 0-9]""` then create a second pr that uses pyupgrade since that will be another huge changeset. adding pyupgrade to pre-commit is helpful since if added as a pre-commit `[manual]` stage we can run it quickly with `pre-commit run pyupgrade -a `",0,0.9862838983535767
50262731,5,cas--,2014-07-27T12:07:43Z,"a quick glance at the diff, i notice the code has a few minor formatting issues that need cleaned up. for the translation text, check `blocklist_pref.glade` file for any strings with `:` at the end and then in the js also add that char so the strings match and set `labelseparator : '',`.",0,0.9808228611946106
50277688,5,omaralvarez,2014-07-27T16:09:10Z,done! what are the formatting issues? i can correct them and commit the changes.,1,0.9351855516433716
50279659,5,cas--,2014-07-27T17:24:36Z,"we use flake8 for the python code, i am not sure the best equivalent for js (try jslint) but these are a few obvious corrections needing made to at least keep the code consistent: indentations should be spaces not tabs and ensure the indentation is correct. there is quite a bit of commented out code, if it's not needed should just remove it. spacing between blocks should be consistent. oh and it makes it easier for yourself if you create a branch for a pull request and rebase it to clean up the commit history.",0,0.958645224571228
50279743,5,omaralvarez,2014-07-27T17:27:54Z,"ok, i'll fix everything i can and try jslint.",0,0.9799719452857971
50287152,5,omaralvarez,2014-07-27T21:55:52Z,"ok, i think i have fixed the formatting issues. i ran it through jslint and jshint. there are errors, but related to them not understanding extjs i think. edit: next time i will rebase instead of committing this way.",0,0.6669533252716064
50764443,5,cas--,2014-07-31T14:17:54Z,"i'm going to nitpick but you still have a couple of indent issues and trailing spaces. your code editor should be able to strip the latter when saving. you've done a good job matching the gtk page, are you able to get rid of the horizontal scrollbar?",0,0.8994604349136353
50772526,5,cas--,2014-07-31T15:12:09Z,"i can see there are a few issues with jslint as it's a bit over-jealous with changes possibly and jshint doesn't deal with whitespace so i did a bit of investigating and found a handy tool that i think will help you out with consistent whitespace: [a link] if you run codepaint using the style `hautelook` it should produce the results we need: `codepaint xform -p hautelook ""blocklist.js""` i will probably look to update our style guide to use `codepainter`, although a little annoying have to install nodejs.",0,0.5469622015953064
50798837,5,omaralvarez,2014-07-31T18:26:46Z,"first of all, thanks a lot for codepainter, great tool! i was going crazy because of the formatting errors. installing node.js it's pretty straightforward, no hassle. removed the horizontal scrollbar and changed a couple of things, so everything was nicer.",1,0.9961124062538147
50806108,5,cas--,2014-07-31T19:21:47Z,"i think there might be a bug, i had the plugin disabled with a url set and upon re-enabling the url entry field was empty, the info section is filled in properly though.",0,0.9753345847129822
50808478,5,omaralvarez,2014-07-31T19:42:17Z,"yeah, the same thing happens to me, let me investigate further.",0,0.9752203226089478
50859586,5,omaralvarez,2014-08-01T08:06:58Z,"the bug is fixed, i don't know why, the event `show` is not called when the plugin is deactivated and activated again. i made a little function, to update the config on start even if the `show` event is not called.",0,0.9738575220108032
50881725,5,cas--,2014-08-01T13:09:32Z,"as the preferences dialog is already open when the plugin is enabled, the show event has been and gone. i can't see any issue with just changing it to `this.on('show'...)` which would then catch the show event for displaying that plugin page. i think that makes a bit more sense and the other plugins probably could do with updating to use that.",0,0.9836263060569763
50923497,5,omaralvarez,2014-08-01T19:13:03Z,"yes, you are probably right. as soon as i can i'll try it.",0,0.7938183546066284
50976165,5,omaralvarez,2014-08-02T22:19:38Z,"you were right, got rid of the new function and changed object that is responsible for the event. i just did not think it through much since i saw that almost every plugin did it that way.",0,0.9817334413528442
51092826,5,cas--,2014-08-04T17:47:03Z,"thanks, added to develop.",1,0.7063968777656555
59012459,19,cas--,2014-10-14T09:20:52Z,"is this due to a user not running with administrator privileges? it may not apply here to this case but have you tried to change `magnet_key` to: [code block] it probably is the case we do need to use `hkcu` but we should try first with `hkcr` and then fallback to `hkcu`, using a `try..except` around `magnet_key`. also there is no need to alter the `openkey` line.",0,0.9946944117546082
59013272,19,doadin,2014-10-14T09:27:54Z,yes it is. have not but i could try this. and yes we could also do that as well. and ill change the openkey back then.,0,0.9863595366477966
59345146,19,cas--,2014-10-16T10:58:35Z,can you rebase to a single commit please.,0,0.988749623298645
59345459,19,doadin,2014-10-16T11:01:57Z,sure!,0,0.972205400466919
59347569,19,doadin,2014-10-16T11:25:00Z,"and sorry i cant get the rebase to work, not sure why.",-1,0.9899687170982361
59353427,19,cas--,2014-10-16T12:28:32Z,it should be as simple as `git rebase --interactive develop` and then `fixup` all the commits.,0,0.9933205842971802
59396345,19,doadin,2014-10-16T17:11:55Z,did that work right? still looks like a mess but the one commit is combined now.,0,0.5703315138816833
59399320,19,cas--,2014-10-16T17:33:49Z,"no that is not right, if there was one commit, there would be only one commit... i forgot you are probably using your develop branch for your own purposes. in that case you want to rebase off of `origin` (our repo) so: `git rebase --interactive origin develop`. use `fixup` to put all those commits into one: [a link]",0,0.9499751925468445
59404763,19,doadin,2014-10-16T18:11:06Z,yea i was referring to it making one commit reflecting all the changes made during this pull. and yea that is not working.,0,0.9826663732528687
60383631,19,doadin,2014-10-24T13:04:08Z,is there anything else i should do?,0,0.9832383394241333
61802052,19,cas--,2014-11-05T12:49:23Z,there is a ticket [a link] that means it might require a change to how we set not just the magnet registry entry. i may well merge this for next release but if you could at least attempt to rebase the branch properly so it is one commit.,0,0.9945313334465027
61802649,19,doadin,2014-11-05T12:55:20Z,"they say its related but they also say something about the installer and it says ""file association"". just wana make sure its clear we are all talking about the same thing. if it is it might beeasyer to just make the changes here first then make one commit. however its up to you. in order to make this one commit i think id have to remake the pull request. just let me know what you want to do.",0,0.9786142706871033
61934199,19,doadin,2014-11-06T06:50:15Z,never mind i got the branch to reset its all clean now. ready to be merged.,0,0.7353190779685974
64452544,19,cas--,2014-11-25T19:02:39Z,merged: dd8d2c85576a,0,0.9920406937599182
233988057,103,bendikro,2016-07-20T15:36:35Z,pushed working fixes,0,0.9906724095344543
254631246,103,cas--,2016-10-18T20:35:03Z,applied: c8a3fd72d411,0,0.9898707270622253
642932788,296,SergioInToronto,2020-06-11T21:18:20Z,the build failure is a lint issue. i'm confident i didn't caused it ;),1,0.9865807294845581
643653303,296,cas--,2020-06-13T17:28:44Z,did you install and run pre-commit to lint code: [a link],0,0.9963477253913879
643789245,296,SergioInToronto,2020-06-14T16:24:23Z,thanks for your feedback. let me know if there are more issues.,1,0.944561243057251
991947704,296,cas--,2021-12-12T18:30:16Z,"thanks for providing changes and sorry took so long to get around to merging, i actually wanted to make a few other changes and not hard link individual forum posts.",-1,0.9683475494384766
1028867959,355,doadin,2022-02-03T11:01:32Z,-- if it runs into an error replacing that line yes.,0,0.9849479794502258
1028870516,355,doadin,2022-02-03T11:04:38Z,"-- if it works then the output looks like ` setting key ""hosts"" to: ('da57dedsrijvgbh38475ty78303c58', '127.0.0.1', 58846, 'localclient', '**********') (of type: ) `",0,0.9935665726661682
1028871388,355,doadin,2022-02-03T11:05:42Z,i am also seeing on line 434 we also print passwords. just noticed so that should be changed too.,0,0.9915134310722351
1028917028,355,doadin,2022-02-03T11:57:00Z,-- would you like it to do something different in the case of fail to replace?,0,0.9819478988647461
1028919005,355,cas--,2022-02-03T11:59:48Z,okay i see. so the problem is that the code is not clear enough that we are working around each host being a tuple. however it also doesn't account for multiple hosts so would need to loop the hosts list.,0,0.9711390733718872
1028922019,355,doadin,2022-02-03T12:03:43Z,-- 179 in standalone or thinclient i am only seeing one host. line 434 though yes thats a whole another beast its a dict with lists of host in it i think? that one idk trying to loop and replace not sure i can do that one.,0,0.9565711617469788
1028926066,355,cas--,2022-02-03T12:09:06Z,"the config key `hosts` is a list of hosts, your current change will overwrite them with a single host",0,0.995154619216919
1028931430,355,doadin,2022-02-03T12:16:16Z,"-- um interesting, i am currently seeing: ` 07:08:49.315 [debug ][deluge.config :179 ] setting key ""hosts"" to: ('7b7ecb1276sdgkjvhn342571ee189f6cb1e533', '127.0.0.1', 58846, 'localclient', '**********') (of type: ) 07:08:49.315 [debug ][deluge.config :434 ] config c:\users\bob\appdata\roaming\deluge\hostlist.conf version: 1.3 loaded: {'hosts': [['18ebad274d29540sgjkn234758td20e8ffd0', '127.0.0.1', 58846, 'localclient', 'secret'], ['bf2c65eebb269a7sdklgjbns3473478c7a5dae8144a5', '127.0.0.1', 58845, 'localclient', 'secret'], ['b1e348c24sdjkfvgszjnkb34785387bb65c0b', '10.0.0.4', 58846, 'localclient', 'secret']]} ` with my change and without: ` 07:12:48.900 [debug ][deluge.config :174 ] setting key ""hosts"" to: [('1c09de15asjfvkasnjdk2345782345784111e6ef693e', '127.0.0.1', 58846, 'localclient', 'secret')] (of type: ) 07:12:48.901 [debug ][deluge.config :429 ] config c:\users\bob\appdata\roaming\deluge\hostlist.conf version: 1.3 loaded: {'hosts': [['18ebad274d295sjksfndvnjkl347834587940e8ffd0', '127.0.0.1', 58846, 'localclient', 'secret'], ['bf2c65eebsdjksdffjkn4784334782c7a5dae8144a5', '127.0.0.1', 58845, 'localclient', 'secret'], ['b1e348c2sdjsdjksd3453478478bb65c0b', '10.0.0.4', 58846, 'localclient', 'secret']]} ` so idk it appears to only log one host at that line, if thats intended or not idk.",0,0.9294097423553467
1028940769,355,doadin,2022-02-03T12:28:16Z,"if key == ""hosts"": print(self.__config[key]) [('c6a33585sdjhkvfdjk3478437886d4f5e1a8', '127.0.0.1', 58846, 'localclient', 'secret')] its only one host as far as i can tell. idk maybe i am just doing something wrong. sorry.",-1,0.9902706146240234
1029040044,355,cas--,2022-02-03T14:23:09Z,"it's not about what you are seeing just now, it is about what the code is capable of doing. currently deluge starts by setting only one host however there is no restriction to set multiple hosts in the config for this key and therefore the code changes are not correct since it doesn't account for a list of hosts. add to the fact that the log.debug output for the `hosts` key should be a list of tuples not a tuple. therefore this would result in a misleading debug log for the `hosts` key. likely want to do something like this: [code block]",0,0.9758862853050232
1029041672,355,cas--,2022-02-03T14:24:42Z,if this is needed in multiple places within config code then might want to consider creating a scrub password function for the hosts list.,0,0.9935290217399597
1029471550,355,doadin,2022-02-03T22:45:57Z,-- current version of this pr is the best i got.,0,0.9615328907966614
1030603351,355,DjLegolas,2022-02-05T11:19:14Z,"i would suggest the following changes. * use a scrab method to do all the work. * can handle both an item and the entire config * changed the default host list structure (from a list of tuples, to list of lists) [code block]",0,0.9945883750915527
1030612159,355,cas--,2022-02-05T12:21:48Z,"i was just working on this myself including adding tests, i'll incorporate a few of your suggestions, thanks!",1,0.9819451570510864
2320226411,462,mtasaka,2024-08-30T06:37:49Z,thank you for review. i think i've reflected your comments.,1,0.9629882574081421
2323165402,462,mtasaka,2024-09-01T04:44:52Z,"so: `test_httpdownloader.py::testdownloadfile::test_download_with_rename_sanitised` is failing.. i did some investigation on python3.12/email, and accoding to: [a link] [code block] and [a link] : [code block] so python `email.message.emailmessage()` assumes `filename=/etc/passwd` as invalid and rejects this to parameter. as rfc2045 says quoted value is valid, and actually if i change [code block] then test_download_with_rename_sanitised test passes. is this okay?",0,0.9836837649345398
2327204618,462,cas--,2024-09-03T18:54:48Z,ah good to find the test is exercising that code. yeah i agree that the quotes are optional unless using special characters so that change makes sense,1,0.9780184626579285
2329254738,462,mtasaka,2024-09-04T14:40:22Z,"okay, thank you for confirmation. i've updated the testcase.",1,0.8716062903404236
2330630015,462,mtasaka,2024-09-05T05:25:23Z,oops... i've modified the last commit a bit (quoting the filename should be in 2 places),-1,0.7609270215034485
2331387831,462,mtasaka,2024-09-05T12:23:28Z,"now ci seems good, except that ci for windows with python3.7 is failing, but looking at the log, i don't think the failure is related to this pr.",0,0.8123927712440491
65401868,16,cas--,2014-12-03T12:47:54Z,"same of #14, needs other uis updated too.",0,0.9933723211288452
65429579,16,cas--,2014-12-03T15:41:15Z,added to develop: [2aaae7c6a1bec],0,0.9945176243782043
405008582,202,cas--,2018-07-14T08:29:37Z,"i would prefer to know why console is sending float and fix it there, it's notorious for buggy code. the function accepts int so lets leave it as that.",0,0.5371356010437012
405035954,202,aresch,2018-07-14T16:56:14Z,probably should add some more cases in the test: [a link],0,0.9915886521339417
405134329,202,gazpachoking,2018-07-16T01:46:24Z,"hmm, i can't get it to crash again, not exactly sure where the problem was coming from. it was totally unusable while it was happening, with the crash traceback being uncaught, and printing out everywhere all over the screen. i agree it'd be nice to know why it was getting a float, but i'm not exactly sure why we wouldn't want the time formatter to also handle floats. (though i also agree the docstring and tests need updated if we do go that route.) btw: this works with floats in the 1.3 branch. `'%d' % a_float` is valid, so i suspect this started happening when switching to `'{:d}'.format(a_float)` style string formatting.",0,0.6107358932495117
405262950,202,gazpachoking,2018-07-16T14:18:36Z,i suspect you are right on the eta being the thing. i'll defer to you on how you want to fix.,0,0.9794725179672241
405286995,202,gazpachoking,2018-07-16T15:30:14Z,"you wanna scrap this then, in light of 1e6c02a?",0,0.9792528748512268
405288116,202,cas--,2018-07-16T15:33:27Z,i'm still not sure about the idea of supporting both int and float but let's go with your addition of float support too :),0,0.9522795677185059
408324554,202,cas--,2018-07-27T06:28:45Z,merged,0,0.9518769383430481
496286111,240,DjLegolas,2019-05-27T18:58:29Z,"ok, no problem. for now the code will look a little silly as it will check in the relevant places with which version of `libtorrent` we currently run. the only test i still didn't managed to resolve with 1.2 is `test_torrent_error_resume_data_unaltered()`. the `state` of the torrent is `downloading` while the test expects `error`.",0,0.6376226544380188
496311984,240,cas--,2019-05-27T21:59:02Z,that could be a problem where the test is leaving files behind that are being found on next run. i have a branch with a fix for that. could be a file in `~/downloads'?,0,0.9923498034477234
497720004,240,DjLegolas,2019-05-31T14:02:39Z,"-- can you add lt-1.2 binding to deluge's develop ppa? in addition, there are no files in ~/downloads no ~/downloads.",0,0.9954434633255005
499105789,240,cas--,2019-06-05T14:25:23Z,"merged with commit details in [a link] yeah it needs a bit of investigation, could be changes to the way resume_data is handled and may not produce the expected error any more. i have skipped the test for now. if you need 1.2 there is a ppa: [a link]",0,0.9908798933029175
1019542832,347,gazpachoking,2022-01-23T18:41:11Z,"doh, looks like i did! didn't intend that. i'll recreate i didn't have the tools to compile libtorrent set up, and didn't find anything precompiled for windows. i'll get it set up eventually, just got impatient at the time it was taking to test a one line change. :face_with_tongue: that callback is nested inside get_torrents_status, so i'm not sure how adding that kwarg makes any difference, it should still have access to the args passed in to get_torrents_status. (my kwarg suggestion was to add a kwarg directly to get_torrents_status, but i'm not sure how nice that is, since it could end up conflicting depending on what pas passed in 'keys' argument.) if it isn't a performance concern, i think my initial method is still valid.",-1,0.9887828230857849
1019551013,347,gazpachoking,2022-01-23T19:26:06Z,"annnd i figured it out. the answer was in the github action, i forgot to handle libcrypto and libssl dlls. i'll do some testing later tonight.",0,0.8547589778900146
1019583543,347,DjLegolas,2022-01-23T22:47:09Z,there is an official release at [a link]. so just use `pip`.,0,0.995973527431488
1019585676,347,gazpachoking,2022-01-23T23:01:21Z,"yep, that's what i ended up doing, but needed the libcrypto and libssl dlls manually copied in.",0,0.9880725145339966
1019649334,347,gazpachoking,2022-01-24T02:13:51Z,"okay, actually tested this now, and it works as expected.",0,0.9138653874397278
1019908563,347,cas--,2022-01-24T09:47:50Z,i understand there isn't a scope issue here but it better to be explicit and using `all_keys` denotes that,0,0.9883788824081421
1019911160,347,cas--,2022-01-24T09:50:55Z,"hmm that it interesting, i assume just having openssl installed wasn't enough. what steps did you take to resolve it?",0,0.8474345207214355
1019977302,347,mhertz,2022-01-24T11:05:23Z,"cas, gazpachoking - sorry for butting in, but with py3.8 and up, ""everything"" is about os.add_dll_directory(), as path not used for dll searching anymore, atleast through normal calls. the py-gtk wrappers adds the gtk-containing dirs to that call, from searching your path, without that it wouldn't even load the gtk-ui(and that is added in through gvsbuild patches, so not available in other methods obtained, manual builds and whatnot), but we still have the issue of the ""core-components""(non-gtk) like libcrypto and intl.dll etc(later tried loaded, before dir added from the py-wrappers(in gtk-dir), hence error's in log - still issue btw). either need copy it into ../site-packages dir, so next to the libtorrent pyd looking for it, or add e.g this into ""..\site-packages\deluge\\__init__.py"" or foo.pth file in site-packages(and i use direct path here, just for example): `import os; os.add_dll_directory(""c:/openssl-win64/bin"")` edit: sorry, system32 still used(as only thing from old path lookup-behavior retained) as cas pointed out underneath - so still works for finding ssl if specifically using shinning installer and specifically selecting yes to the additional prompt of if wanting dlls copied also to system32 additionally. bundled/freezed is a non-issue as pyds/dlls all placed into same folder(though my unfreezed bundling needed change from session path addition to said os.add_dll_directory addition at py3.8+).",-1,0.8686886429786682
1020001164,347,cas--,2022-01-24T11:30:38Z,thanks for details. so what i can see it that for development as long as openssl libs are in the system it should work (different when bundling the app): a quick search to gather details about dlls changes in 3.8+: [a link] [a link] [a link] the concern here is that the libtorrent wheel has a hard-requirement on openssl that is tricky to install correctly on windows. should it be bundled by libtorrent then? i would consider raising an upstream issue for this :thinking:,1,0.9637109041213989
1020162069,347,gazpachoking,2022-01-24T14:32:11Z,how do you feel about inline callbacks? feels cleaner to me to just eliminate the callback all together. i also explicitly added all_keys for the check so it's clear what's happening.,0,0.9832825064659119
1020760745,347,gazpachoking,2022-01-25T02:59:34Z,"this certainly isn't the right place to discuss, but, is irc active anymore? do we have a discord or something? (and do we perhaps [a link] if there is still activity in irc we can bridge it to discord.",0,0.6852599382400513
1021254959,347,gazpachoking,2022-01-25T14:43:42Z,"i'll squash it and fix up the commit message. not sure if i still have access to git, been a long time. i made it, we can try it out. i don't know how much action there is in irc, i can enable a bridge for now while we are testing. i did the same for flexget, and it seems like over 99% of our action moved over to discord now.",0,0.9628512859344482
1022450158,347,gazpachoking,2022-01-26T17:59:46Z,"okay, squashed and updated message. looks like i don't have access to the git repo anymore. or i lost my ssh key.",0,0.9623463749885559
1043379326,377,cas--,2022-02-17T20:12:05Z,thanks for your contribution but i think you might have missed other places where j and k need swapping since my testing didn't show it fixed on torrent view,1,0.9281845688819885
1050566167,377,KtlTheBest,2022-02-25T06:31:05Z,"-- thank you and sorry. i was hasty initially, not quite properly testing the changes. i'll make sure to test correctly next time (including this pr). the code base is quite overwhelming so i decided to read it and try to make a sense of it. it looks a bit like spaghetti code with different methods can be called from anywhere with anything, i am surprised how you make sense of it. i also am new to concept of rpc and how ncurses work, so that also took me as a surprise when i started reading about them. i'll make sure to ask relevant questions about the project.",-1,0.9793193936347961
1153196539,386,mhertz,2022-06-12T14:57:32Z,"thanks for hints, appreciated :) sorry i don't really understand much ci yet, so always run local, though same as your yaml, except newest python and few less gtk3 packages etc, but have tested py3.9.12/13 and your gtk3 build instead of mine, before making this pr. i just did again now too. i am thinking that the new gvsbuild setup(not running build.py directly anymore), broke that test-run and hence gtk3 and more specifically gi.repository not built, hence pyinstaller couldn't fail with that error. i checked a few jobs at your own repo and in one the deluge exe's was half'ish size, ""tell-tailing"" this(just scanned the log quick and when saw exe sizes, then didn't check more though, yet atleast), and in another run then it stated no log for freeze, though could be retention-rules was stated. anyway, i'll look more into it later, and if find i have messed up then will correct of-course, but just was preliminary thinking out loud :) edit: hmm, maybe i'm completely wrong, sorry, as said will investigate this later.",1,0.9963317513465881
1153276453,386,mhertz,2022-06-12T19:50:48Z,"i'm pretty sure this is correct, and i just got confused in my last post/edit as forgot gvsbuild was used from prebuilt etc - the logs showing pyinstaller 5.1 are producing too small exe artifacts and the runs producing propper size are having no logs though are from a date before pyinstaller 5.0 released, plus i can consistently reproduce here, done countless times in testing e.g. in what to do/exclude etc. let me know if need clarification on something, and please change my wording where needed thanks, or ask me to do it, whatever is easiest for you, and same with if you want readme fix splitted off, e.g. if unsure about the other part, blahblah you know what i mean :) thanks!",1,0.9680772423744202
1153312804,386,cas--,2022-06-12T22:50:03Z,"i enabled the ci run for this pr and the package size is still lower, likely due to differences between pyinstaller 4 vs 5. in meantime i would suggest we pin pyinstaller to latest 4 version until issues can be properly investigated and resolved.",0,0.9912444353103638
1153761206,386,mhertz,2022-06-13T10:44:29Z,"gotcha. i'm very surpiced by that ci run, and will post back if finding something, but i don't really know how troubleshhot ci unfortunetly, so is like doing it in ""blind"" for me, but will post back if finding something. i'll amend-commit/force-push later to trigger ci-rerun and hopefully resolve those errors currently showing - ussually helps but not this time, so will wait some more time. thanks again, appreciated you looking into this as said :) edit: doh, i can run ci-runs myself on a fork! you learn something rew everyday! :) edit2: still smaller-exes(missing gtk3 pickup) using this pr(pyinstaller 4.10). edit3: okay i believe figured it out - i locally use another line to install pygobject/pycairo(getting filename with for-loop), though when using that '--find-links' mechanism as your yaml, then gets pycairo right, but not pygobject and tries build from source, which fails here locally, so probably also on your end, so producing smaller freezes because omiting gtk3 because missing py-bindings, and hence neither hitting original issue i raised here, as gi.repository not picked up because of it. i can fix that('--find-links') here later when have time, but then do you still prefer pinning to last pyinstaller v4.x to fix original raised issue, or the ""excludes"" fix for pyinstaller 5.1 i initially suggested?",-1,0.5735114812850952
1153828389,386,cas--,2022-06-13T12:01:41Z,"for the record something external changed between [a link] and [a link] and pyinstaller 4.10 was released on 5th mar so let's trying going back to 4.9 and see if that works in the meantime. we should really have all deps pinned in ci to avoid these unexpected problems anyway, i will look to resolve that later. thanks for investigating and trying to fix it :+1: the other ci errors are due to github outage: [a link]",1,0.995154857635498
1154019245,386,mhertz,2022-06-13T14:48:40Z,"thanks alot for your post, hints and all! :) the part in edit3 i got fixed, so unless you still want pyinstaller v4.9 specifically, then this is latest v4.x and you can see the gst-missing-typelibs i talked about, which continues here in v4.x, but aborts hard in v5.x, hence previous suggested excludes ""workaround"". edit: sorry here: [a link]",1,0.9968820810317993
1154115374,386,cas--,2022-06-13T16:13:13Z,"ah gotcha, excellent :+1: we'll go with 4.10 and look to resolve for 5 in future. for reference try to detail the precise error so it easier to understand and search for [code block] [a link]",1,0.9961973428726196
1154126567,386,doadin,2022-06-13T16:23:29Z,idk if it will matter but you can see the branch i use for the builds i post to the forums which the latest got good feedback here: [a link] and you can see here: [a link] it ran with pyinstaller 5.1.,0,0.870334804058075
1154186239,386,mhertz,2022-06-13T17:23:42Z,"not cas, but thanks mate :) i was actually gonna ask cas if we shouldn't ask you how you proceded, though in end didn't need anyway - i did look at a point earlier though, but didn't found your branch :) puzzling me that you can run without --no-index for the py-bindings, as here, both locally and ci, tries to use tar.gz for pyobject and build from source and then failing. i haden't catched that before(as used other command locally, so didn't knew was issue) or else would have posted also that in your thread on forum previously, but for some reason you're not hitting it. anyway, thanks for the help, and cas can ask you further if need more info.",1,0.9951390027999878
1154199534,386,mhertz,2022-06-13T17:38:49Z,"cas, forgive me for being complete moron here, but should i just reference `gi.repository.glib.gerror: g-irepository-error-quark: typelib file for namespace 'gst', version '1.0' not found (0)` and/or `36870 error: gi repository 'girepository 2.0' not found. please make sure corresponding package is installed.` and/or `valueerror: namespace gst not available` or full message like you quoted, for one of the modules. edit: took full-message, if is okay then please disregard above.",-1,0.9793319702148438
220827648,99,cas--,2016-05-22T11:33:52Z,"just a few points on docstrings: - every line should be finished with a full-stop as they are sentences and makes it clear there is no continuation of the text. - the first line summary of a method should be on the same line as the triple-quote e.g. `""""""this is a module that...` - i was discussing this before that unfortunately sphinx complains about indented lines in the `returns` sections. i don't know if we should comply with it though... so the following is invalid according to sphinx: [code block] and sphinx wants it to be: [code block] to me it seems like a bug that needs reporting but may never be fixed ;) [a link]",0,0.8062516450881958
220828837,99,cas--,2016-05-22T12:05:14Z,"so based on that sphinx example you shared, i realised that for the `returns` section issue we can use `::` to enable the use of indents.",0,0.9930071830749512
254070668,115,cas--,2016-10-16T20:02:25Z,i think until we have made all the other changes that require 1.1 we should wait to do this,0,0.9686253070831299
254073743,115,aresch,2016-10-16T20:48:56Z,"i guess we could do it in a way that is backwards compatible, ie, check for **version** and if not available use version.",0,0.9861093163490295
254074509,115,cas--,2016-10-16T21:00:58Z,it's not worth it as it's only deprecated currently. it can be included in a wider change for develop to support 1.1 with no deprecated methods.,0,0.9684891104698181
254075400,115,aresch,2016-10-16T21:13:47Z,"are we not targeting >lt-1.1 for develop now? the reason i want this patch in, is because i run with a non-deprecated functions libtorrent build and without this the thin client will not start on my desktop.",0,0.9886621832847595
254075782,115,cas--,2016-10-16T21:19:49Z,"yes but 1.1 is still backward compatible so we don't need to do anything and this pr would force a change for no real reason, meaning everyone else requires updating libtorrent. it makes sense for this change to be part of a larger branch that fixes all the deprecated methods.",0,0.9885448813438416
254076367,115,cas--,2016-10-16T21:29:41Z,ok i think i understand now that you mean it's a client side issue?,0,0.9813655614852905
254077202,115,cas--,2016-10-16T21:42:28Z,is it an attributeerror so we can do this? [code block],0,0.9937117099761963
254078413,115,cas--,2016-10-16T22:03:56Z,this is a result of the overhaul of ui and i think better fixed in baseargparser: [a link] [code block],0,0.9889311194419861
254080689,115,aresch,2016-10-16T22:45:40Z,it needs to be fixed in 2 places. the other place being _libtorrent.py where we read the libtorrent version to ensure we meet the minimum required version.,0,0.9929919242858887
254081175,115,aresch,2016-10-16T22:53:18Z,i just installed libtorrent 1.0.10 to see if **version** exists there and it does. it looks like this change should work fine with older versions of libtorrent. [code block],0,0.9294149875640869
254173151,115,cas--,2016-10-17T10:39:49Z,ah it was added in 1.0.7 so the minimum version will need bumped to that.,0,0.990997314453125
254173577,115,cas--,2016-10-17T10:41:59Z,it will also need changing in these places: [code block],0,0.995402455329895
254184672,115,cas--,2016-10-17T11:43:18Z,i decided to tidy up _libtorrent.py so have opened a new pr #116 with all the relevant changes.,0,0.9875348806381226
356195651,175,AllSeeingEyeTolledEweSew,2018-01-09T06:49:50Z,"i thought of a bad case that happens when alertmanager is paused. see the comments. if there's a better way to handle this in twisted, please let me know.",0,0.8085730075836182
356245986,175,cas--,2018-01-09T10:36:00Z,"please use the develop or master code, 1.3-stable will not see any new features or changes only bugfixes.",0,0.9889016151428223
357148249,175,AllSeeingEyeTolledEweSew,2018-01-12T05:41:34Z,"thanks for your time. unfortunately as i mentioned before, the project driving these prs is tied to private trackers, so i won't be able to meaningfully test this code against a development branch for some time.",1,0.9381611347198486
435009457,175,cas--,2018-11-01T11:14:41Z,closing in favour of #221,0,0.9849380254745483
490640598,234,cas--,2019-05-08T20:34:05Z,"thanks, merged: 2296906",1,0.8555205464363098
1141252464,385,ibizaman,2022-05-30T14:58:44Z,-- with pleasure!,1,0.9859429597854614
1153228067,385,ibizaman,2022-06-12T16:36:04Z,thanks --,0,0.7097707986831665
1787239495,430,rcarpa,2023-10-31T13:38:56Z,sorry for taking so long. was overwhelmed by a couple of more urgent tasks.,-1,0.9935198426246643
1860737542,430,rcarpa,2023-12-18T15:02:11Z,"-- , would it be possible to create a release ? (could be an -dev or an -alpha release). it would be very useful to be able to use this new features by just installing deluge from pip.",0,0.9274656772613525
56818926,10,cas--,2014-09-25T13:35:29Z,merged in 66f2739be7cda3d610,0,0.9907311797142029
121777576,34,bendikro,2015-07-15T23:48:00Z,"have these been translated with an automated translation tool, such as google translate?",0,0.9941278696060181
121778085,34,doadin,2015-07-15T23:52:10Z,something like that. with poedit which uses a mix of machine and human translation and already tanslated words from the translation file.,0,0.9896256327629089
121778729,34,doadin,2015-07-15T23:56:20Z,i was just testing probably don't want to accept this at least not some of it. some of the translations are basically non-existent and imo should just be removed. 3% or less translated is not good.anyways probably not the best translations but idk how you guys feel about it but something is better than nothing imo if youre gonna keep the translation as an option. translatiing like 4 words is not really supporting a language. and for those we should auto translate so its at least somewhat usful or just remove support for it till we get better.,-1,0.8370150327682495
121783192,34,bendikro,2015-07-16T00:09:04Z,"there is no point is having a translation for a language that doesn't cover larger (most) parts of the text. also, i don't think it's a good idea to use automated translation without manually being able to verify that the result is correct. it's better to have a proper english fallback text on phrases that aren't translated than to have a badly translated phrases. also, you keep pissing off cas every time you create a pull requests for branches that aren't ready for merging. it's better to create a ticket ([a link] and link to your github branch if you have questions :-)",-1,0.6625763177871704
121785826,34,doadin,2015-07-16T00:15:15Z,"yea i meant to publish this one not push i instantly was like ut oh...he gonna hate me even more. the other one though i dont see any reason its not ready, other than it not being something hes wants to add.",-1,0.9804650545120239
133364106,34,cas--,2015-08-21T10:15:24Z,all translation is done through launchpad: [a link] i have just uploaded the latest template for develop here: [a link],0,0.993848979473114
513501175,34,pereorga,2019-07-20T21:39:25Z,"hi -- , sorry for hijacking this thread, there is no information in the readme and the link [0] in the documentation [1] is broken. i would like to contribute to the catalan translation. is launchpad still used for translations? the translation file is very outdated, for example, ""files"" is not translated in [a link] but the translation exists in launchpad since 2007: [a link] [0] [a link] [1] [a link]",-1,0.9886265397071838
514131825,34,cas--,2019-07-23T09:31:25Z,yes. the deluge 2.0 translation files are rather outdated and should be updated using 1.3 as a basis. i have not had the time to sort it out but you can update catalan i have updated the documentation link.,0,0.9882696866989136
514176097,34,pereorga,2019-07-23T11:47:35Z,"great! should i work in launchpad then? it's a bit confusing because current launchpad data does not match these files. i'm also not familiarized with the workflow followed in launchpad, but ideally, i would like to compile and open deluge with the current and updated translation and start improving the translation from there.",1,0.9677323698997498
514203599,34,cas--,2019-07-23T13:12:43Z,which file? the git repository is always behind launchpad as we need to wait for translations: [a link] the launchpad files can be exported: [a link],0,0.9959371089935303
514271831,34,pereorga,2019-07-23T15:54:36Z,"nevermind, i see that you just updated some translations in launchpad. i'll work there, thanks!",1,0.9887253642082214
534478171,34,pereorga,2019-09-24T09:36:38Z,"i just completed the catalan translation: [a link] -- please, let me know if anything else is needed.",0,0.8441644906997681
210412069,65,cas--,2016-04-15T10:44:46Z,would it be better to detect if the plugin has been enabled rather than use `standalone` attribute? it may help solve the issue of attempting to start both deluge-web and web plugin.,0,0.992819607257843
210557405,65,bendikro,2016-04-15T17:32:43Z,what is the problem with both webui plugin and deluge-web?,0,0.9394145011901855
211003095,65,cas--,2016-04-17T11:20:50Z,in gtk `standalone` mode the webui plugin generates the following errors: [code block],0,0.9907884001731873
211092064,65,bendikro,2016-04-17T19:29:10Z,the `couldn't listen on 0.0.0.0:8112: [errno 98] address already in use.` indicates the port is taken.,0,0.9939711093902588
211093007,65,bendikro,2016-04-17T19:34:20Z,"if running deluge-web and gtkui, and then trying to enable webui plugin i get that error, which is expected, no? [a link] includes improvements to handle this better.",0,0.9929541945457458
211120839,65,cas--,2016-04-17T21:46:53Z,i know that the error indicates that but nothing else is running and the issue doesn't occur in thinclient mode...,0,0.9913721084594727
211122183,65,bendikro,2016-04-17T22:02:31Z,"ahh, yeah, that is due to the webui plugin creating two delugeweb instances, where the second one causes this trace because the first one is already listening on that port. this is not a problem introduced in this commit, but has existed for a long time. the other pr fixes this. this commit is not supposed to fix all webui bugs, but simply restore the old behavior (before the latest json/webui changes)",0,0.9604654312133789
211329966,65,cas--,2016-04-18T11:02:34Z,merged 64c67a0,0,0.9914583563804626
214396051,79,cas--,2016-04-25T15:30:19Z,was this a planned change? is it possible that it's disk i/o blocking that's causing #2814?,0,0.9883036613464355
214504461,79,aresch,2016-04-25T20:10:06Z,"i think it's reasonable to assume it's the blocking calls on the main thread causing the issue. if disk i/o blocking in general was the problem, i think that you would be seeing more frequent pauses and much lower throughput in the normal case (non resume saving time).",0,0.9824366569519043
214554923,79,bendikro,2016-04-25T22:50:55Z,"well, i have not tested that disk i/o is the problem in [a link], so i'm simply assuming that based on the ticket reporter's description only. if it's correct that it has to do with saving fastresume data, it is either due to libtorrent workload + handling alerts in deluge, or it's the disk i/o. libtorrent workload is threaded anyways, so the only thing we can address is the disk i/o.",0,0.9893023371696472
215419098,79,bendikro,2016-04-28T13:14:52Z,now only queue the last call on shutdown,0,0.9939302206039429
231753058,105,bendikro,2016-07-11T14:35:22Z,"since libtorrent v1.1 is backwards incompatible, we should aim for support without any deprecated functions in develop. have you tried compiling without deprecated functions?",0,0.9919396042823792
231812409,105,minus7,2016-07-11T17:54:23Z,"i didn't compile lt without backwards compatibility, i just used the version provided on archlinux. doing away with deprecated apis sounds like a good idea though.",0,0.7443982362747192
233004644,105,minus7,2016-07-15T16:46:17Z,"i'd suggest to merge this, so that lt 1.1 at least works with develop since lt with disabled deprecated apis seems like a bigger change",0,0.9853390455245972
233921087,105,cas--,2016-07-20T11:15:01Z,"after a discussion on irc lt 1.1.1 release should fix these compatibility issues, if not raise a libtorrent issue.",0,0.9926291704177856
249574838,105,minus7,2016-09-26T13:50:37Z,apparently there's some more incomatibilities with lt 1.1.1: [code block] and [code block],0,0.9816933274269104
249895074,105,cas--,2016-09-27T15:13:15Z,please report to libtorrent issue tracker,0,0.9882867932319641
258037049,133,cas--,2016-11-03T00:10:14Z,"fixed docstrings and added extra tests using proper documentation ips: [a link], [a link]",0,0.9934476017951965
258090984,133,bendikro,2016-11-03T09:01:59Z,excellent!,1,0.995139479637146
258107994,133,cas--,2016-11-03T10:30:23Z,still need a decision on the return type...,0,0.9772937893867493
258372114,133,cas--,2016-11-04T08:39:46Z,i have rebased and pushed a modified is_ipv6,0,0.9948023557662964
258576525,133,cas--,2016-11-05T00:10:16Z,need to add python-interface as optional dependency to depends and perhaps add to pip install for tests,0,0.9945359230041504
279133509,139,cas--,2017-02-11T09:51:33Z,what was the reason for closing this?,0,0.9905904531478882
279133682,139,N3X15,2017-02-11T09:55:25Z,"well, since it's been tried before and the behaviour described is discouraged, i decided it wasn't worth trying to make a duplicate pr and step on established security norms. since i appear to be the only person having this difficulty, even though i plan on releasing a public firefox extension that may end up using this, a fork sounds like a better bet since it's probably a niche requirement.",0,0.9708778858184814
279133851,139,cas--,2017-02-11T09:58:31Z,"yeah fair enough, is there a way to workaround the issue though?",0,0.9738186001777649
279134019,139,N3X15,2017-02-11T10:02:32Z,"running a proxy application, as someone suggested to me a while ago. something tells me a browser extension running a script or executable just to modify http requests is a bit scary to some folk, though.",0,0.8298003673553467
279134513,139,cas--,2017-02-11T10:12:29Z,you could create a simple plugin to override the methods. i'm just not sure about adding this to the code. i know that some users want to enable `cors` which is another security issue and would only be added with the addition of a config option to enable it as required.,0,0.9849456548690796
279134810,139,N3X15,2017-02-11T10:18:40Z,"the problem is the session itself: this messes with the core authentication methods to ensure that a. we're told what our session id is (previously, we had to get it via cookies, which is hard if you don't have access to them) and b. that we can tell the webui provider what that session is via means other than cookies. sure, we could hack around the session login part, but what if i want to upload a torrent? i'd have to reimplement that to include a session setter. what if i want to upload a magnet? same thing. it'd basically involve reimplementing the entire webui. then it all comes back to, ""well, the webui is doing pretty much the same thing, why not just add in a tweak to the authentication system and call it a day?"" another suggestion was to implement the deluge rpc protocol, but i don't see a decent rencoding library for javascript, and i'm not smart enough to do it myself.",0,0.6113570332527161
279135468,139,cas--,2017-02-11T10:32:04Z,"did you try using `with_credentials`, that is the issue you are facing? [a link] [a link] for the plugin you should only need to override the methods you modified in this pr.",0,0.9957718253135681
1018898697,342,CirnoT,2022-01-21T22:06:29Z,"-- i strongly recommend either copying the file directly or merging this via git (either as merge or squash) - it seems that you prefer to take edits from pr and apply them yourself however you've missed quite a few of smaller changes that i've requested and made (such as unused `build_version` or inlining of useless `tmp_ret`). it also seems you've missed pretty important change of [code block] which brings both build speed improvements but also decreases package size, as it stops pyinstaller from bundling tests (actually, some tests might even execute during import and break build if they're designed to throw!) used by pyinstaller",0,0.9540916085243225
1018928869,342,doadin,2022-01-21T23:06:48Z,not home to test and i can't add labels for the cd to run. i can test later but looks ok to me.,0,0.9576503038406372
1019214269,342,cas--,2022-01-22T11:57:29Z,"can we avoid the use of single letters for variables, better to use something descriptive to help readability. also would be nice to lint/format the file with black since it's python code [code block]",0,0.9924301505088806
1019322588,342,CirnoT,2022-01-22T17:52:49Z,any idea what we can use instead? `e` refers to entry in `executables` while `d` refers to dictionary of that entry. we could also change it to use only `i` so the result would be `executables[i]['gtk']` done.,0,0.9943126440048218
1019339459,342,DjLegolas,2022-01-22T19:03:39Z,"hmm, you can call them `executable` and `data_dict`. in addition, maybe do everything in the `perform analysis`, `executable` and `collect` sections in one loop? just remove the last 2 for loops, and fix the indentation of the comments. [code block]",0,0.9912868142127991
1019488945,342,doadin,2022-01-23T13:45:17Z,"i could be wrong in all of this however, some thoughts. i don't think you are supposed to run collect before you are done with analysis/executable. maybe it will not matter in our case. also maybe instead of data_dict since we have variables data and execute maybe executables_dict would be more on the nose. also maybe script_name instead of executable since its not actually referring to a executable and rather the name of the script we are building for. edit: ok yes i think coll += can go in loop but not collect. maybe that just shows another point maybe instead of coll it could be exe_plus_data?",0,0.9310917854309082
1019493443,342,DjLegolas,2022-01-23T14:08:30Z,"- i have no knowledge about `pyinstaller`, so you might be correct. i only commented about the code, which can be totally wrong :sweat_smile:",1,0.9826291799545288
1019493749,342,doadin,2022-01-23T14:10:07Z,yea just small differences. other than the things cas forgot to merge i feel like most of this is just cleanup that could be put off not really import things happening.,0,0.9263205528259277
1712587372,433,doadin,2023-09-09T19:45:28Z,"the pillow change fixes pip trying to compile pillow from source but is missing zlib headers(maybe others), you could set these up on your system/ci/cd or 9.5.0 works. they also recommend using the wheel if you don't want setup the headers. the change to pyinstaller fixes a typelib error in freeze on windows saying freetype 2.0 is missing.",0,0.9717564582824707
1712588090,433,doadin,2023-09-09T19:49:37Z,"i don't know if you can do both greater and less then in requirements but also not sure that it matters in this case as i think the versions of the deps are old enough that versions older are not likely to be used with the versions of python deluge supports, but idk.",0,0.9567357301712036
1712589166,433,doadin,2023-09-09T19:55:50Z,"so i thought zope.interface change fixes python 3.7 but apparently not test still pass on 3.10, so i guess this is a python 3.7 issue? the other two deps changes i believe are valid.",0,0.9860745072364807
1712919646,433,mhertz,2023-09-10T19:38:45Z,"it's same issue also for py3.9(zope.interface), and i just reverted pyopenssl and cryptography to earlier versions(22.0.0/37.0.4) for quick fix(trial/error) when i ran into it last week. anyway, i looked little into it now, and don't have more time now, but found seemingly for some reason an older setuptools(47.1.0) is installed for python's under 3.10(tested 3.7, 3.9 and 3.10), and when upgrading setuptools afterwards to newest, then works. probably need pin setuptools to 68.0.0, as latter two versions are py3.8 and up. also, in requirements.txt, then i believe twisted should be pinned to 22.10(or below), like in ci, as else: ""nameerror fdesc is not defined"", when newest twisted installed. thanks! :) edit: setuptools version variances because included already(as dep) with pip/python. edit2(last): in quick test here(not ci though), then pyinstaller 4.10 doesn't fail(py3.9.8), though have as always displayed a bunch missing typelib errors, originating from one of the hooks being buggy, though not important for us, as a misunderstanding those messages. pyinstaller 5 broke freezing completely(hence 4.10 pin added), as respected those errors instead of just forward/log and ignore, but they gracefully fixed it for us in next version(maybe next again, can't remember, and i made pr to update pyinstaller and drop 4.10 pin, but i closed it later, and cas thought not important to update at the time). sorry if misunderstanding and 4.10 has actual error blocking on ci now and not just cosmetic, or that you already knew these things. granted might as well update pyinstaller as well, and is confusing to end-users looking at, and just elaborating. sorry for wordyness, and butting in - please let me know if i can help with something, and i'll but out again now.",0,0.976123571395874
1715775201,433,doadin,2023-09-12T13:54:59Z,seems related: [a link],0,0.9915720224380493
1715841068,433,doadin,2023-09-12T14:30:33Z,the pyinstaller issue is when running deluge after packaging not in the packaging process sorry i was not clear.,-1,0.9840302467346191
1717486003,433,mhertz,2023-09-13T11:56:43Z,"good catch, yeah must've been fixed here presumably then: [a link] for setuptools 62. just strange because first thing i tried myself was mess with that(change install name), to no avail, and see requirements.txt and setup.py has the canonical name regardless, but whatever. i guess the setuptools change should be added little up too in ci file, as still old version in log. sorry didn't ment to butt in here again, unless called, but will adhere to now promise ;) thin line to walk for guessing if beeing perceived helpful vs annoying you know :) thanks as said.",1,0.9942626357078552
1717778818,433,doadin,2023-09-13T14:46:14Z,-- i think this is all the changes i am going to put forth. the team over at twisted are looking into the issue with v23 and looking to improve their ci to prevent issues in the future. for now v22.8 is latest working.,0,0.8865028619766235
1723451871,433,cas--,2023-09-18T13:47:34Z,"thanks for the work identifying the build issues, i prefer that we identify and resolve each issue separately to properly understand the issue that is being fixed, as such i referenced your changes in new commits. just to note that the versions specified in requirements are usually there as a project minimum/maximum rather than for ci/cd and shouldn't be removed without checking the commit history. there are likely some improvements to how we handle the dependencies for project, packaging and ci/cd. also until we specifically drop support for python 3.7 i still want the runners for it. the total number of python versions to test against should also be small so we don't have to wait too long for them all to finish. there could be an improvement where we run a single python version for the pr/tests and then run against all versions once merged to develop branch.",1,0.93996661901474
1724151514,433,doadin,2023-09-18T18:26:28Z,-- thank you for making the required changes. i am sorry though i might have not been clear maybe? or i just didn't notice a reference to it in your commits. however the change for pillow is not just for compatibility with python versions but there is also missing header files for compiling from source.(and part of why move to wheel) so maybe a comment in a commit mentioning zlib source headers missing from pillow source code for compiling pillow from source? idk. again sorry either way if you did or didn't. and big thanks for making the changes!,1,0.9865737557411194
1724195163,433,cas--,2023-09-18T18:54:08Z,ah yeah i did find the other pillow issue which is isolated to windows 32-bit builds which as you say is due to missing wheels and trying build from source: 6c9b058d81639,0,0.9830447435379028
1574758007,427,DjLegolas,2023-06-03T07:43:00Z,"-- - this is going to be a dependency for some other mrs, so it will be best to merge this first. i'll link each mr that needs this one so it will be easier to manage.",0,0.9910652041435242
1575208396,427,DjLegolas,2023-06-03T21:40:35Z,don't know why i'm responding to each message when i can just write here - all changed as suggested :),-1,0.5629125833511353
1819033816,427,cas--,2023-11-20T13:08:12Z,"thanks for this! i did change my mind about the naming of the function and settled on `daemon_version_check_min`. i wanted it to be descriptive but not verbose, almost chose `is_daemon_version_at_least`! i did ponder creating a daemonconnection class but not sure it would have gained much more clarity here.",1,0.9859304428100586
251183413,109,cas--,2016-10-03T18:19:20Z,the most likely reason is magnets that have not yet retrieved metadata: [a link] so this is not the correct fix and instead the code at [a link] should be altered to accommodate for this use-case.,0,0.9885711073875427
251195467,109,elemongw,2016-10-03T19:03:16Z,it does not happen every time i download with a magnet link through. any ideas why that may be? i am gonna do some more testing tomorrow in case i have better luck reproducing it.,0,0.9583751559257507
251216767,109,elemongw,2016-10-03T20:27:15Z,nevermind you were right. how does it look now?,0,0.9652644991874695
252226466,109,elemongw,2016-10-07T11:29:11Z,"okay this should be as you asked. however, as you brought up refactoring maybe we should also look at __draw_pieces() and __draw_pieces_completed() as they could probably be merged into one function.",0,0.9919060468673706
252253330,109,cas--,2016-10-07T13:34:55Z,"cheers. if you are happy to try refactoring it, go ahead, it does look rather copy-pasted.",1,0.84503173828125
252695669,109,cas--,2016-10-10T18:04:17Z,i've merged this change to fix the issue but feel free to open a new pr with refactored code. 6b630c9,0,0.9858161211013794
307647807,158,ratoaq2,2017-06-11T18:33:36Z,done,0,0.8682363629341125
307726894,158,cas--,2017-06-12T08:44:11Z,"that's great thanks. one final thing, could you update the commit message with [core] tag and move the second sentence out of the summary. [a link]",1,0.9863362312316895
308006512,158,ratoaq2,2017-06-13T04:54:30Z,done,0,0.8682363629341125
218720233,92,cas--,2016-05-12T10:34:09Z,could the autogen apidoc be added to setup.py docs command,0,0.9952555298805237
163423339,47,cas--,2015-12-09T22:37:32Z,did you investigate using the reset timer thread option?,0,0.9947516322135925
164567474,47,cas--,2015-12-14T21:37:15Z,merged: d13fca251ed57cf8,0,0.9913621544837952
207960165,55,cas--,2016-04-10T10:51:00Z,thanks for this! merged 5d1aff157e4dac,1,0.9807077050209045
254485953,117,cas--,2016-10-18T11:57:08Z,"that is helpful, it's odd that i missed some of these from my last sweep :) i think the iteritems changes should be done with six or similar as it could have a memory performance hit on python 2. however if there are areas where is make no obvious difference then then less we rely on py2to3 shims the better. oh there are several pylint issues needing attention.",1,0.9949523210525513
254586887,117,aresch,2016-10-18T17:53:55Z,"yes, there could be some performance changes due to removing iteritems, etc.. but i don't think it's going to be that big of a deal since most of our data structures don't contain that many items. i really wanted this change to not introduce any outside dependencies, plus it will give us more incentive to get the rest of things python 3 ready :) i'll try to fix the lint errors.",1,0.9903224110603333
255284597,117,aresch,2016-10-21T03:22:29Z,i have no idea why this isort run fails. on my machine i get no diffs.. [aresch deluge]$ isort -q --diff --recursive deluge docs packaging *.py [aresch deluge]$ echo $? 0,-1,0.8698729276657104
255304705,117,bendikro,2016-10-21T06:31:17Z,what if you run `tox -e isort`?,0,0.9914952516555786
255306675,117,aresch,2016-10-21T06:45:04Z,"yea, if i run tox2 -e isort i get the same output from travis. i'll just make a change based on that diff.",0,0.9905106425285339
255326055,117,cas--,2016-10-21T08:38:37Z,"those changes to `new` and `htmlparser` imports are definitely incorrect, what version of isort is installed via pip? i have 4.2.5 and it gives the same output as tox.",0,0.9795920252799988
255326945,117,cas--,2016-10-21T08:43:01Z,just noted that the `new` import should be changed for py3 as that module has been [a link]. which funnily enough if you also take into account that [a link] is renamed in py3 explains your isort issue... :p,1,0.9797811508178711
255608212,117,aresch,2016-10-23T19:20:10Z,"i think this looks ok to merge now? there are plenty more fixes necessary for python 3, but we should get this merged now so we have a better base to work from for the future fixes.",0,0.6832572817802429
255779054,117,cas--,2016-10-24T15:44:30Z,i've a new pull request with the branch rebased and some extra changes #124 - rebasing the develop branch rather than merging it in is better as it creates quite a commit mess otherwise. - using `git commit --fixup/--squash` or modifiyng the commits that need fixed is much easier to rebase into a short set of commits. - for pylint we use the full name rather than the shortcode and place the disable comment inline with the offending code.,0,0.9864053130149841
1006862850,334,cas--,2022-01-06T19:21:54Z,"can you provide an example magnet to replicate this issue, i think there might be a deeper problem to solve here",0,0.9850366711616516
1006927666,334,mhertz,2022-01-06T20:54:14Z,"it's only issue in thinclient mode, not standalone. thanks alot djlegolas, works great, much appreciated :)",1,0.9971433281898499
1006995347,334,cas--,2022-01-06T22:56:18Z,the root of the problem is the sending of mixed str and bytes metadata dict to rencode. this can be solved by pickling the metadata dict and then encoding with base64 and reversing that process in the ui. edit: i thought this might result in a breaking change between client and daemon but if it's already broken in thinclient... :smile: thanks for tip :slightly_smiling_face:,1,0.9897747039794922
1007008746,334,DjLegolas,2022-01-06T23:23:21Z,"-- actually, seem as the metadata itself is only bytes inside the dict. the info_hash is the only one that is being sent as a str/bytes, depending on standalone/thinclient.",0,0.9898620843887329
1007550499,334,cas--,2022-01-07T16:34:58Z,"sorry what i meant is it is a mix of raw bytes and encoded strs so there is no way to determine type when receiving without trying to catch the exception. it's certainly bad practice for the api calls to randomly switch types like this and we should be decoding as early as possible in the python code when receiving data. further thought is to not bdecode the metadata in _on_uri_metadata. instead send that metadata b64encoded and the client should use deluge.bencode.bdecode after b64decode. it's up to you if you want to make that change, i can do it this weekend otherwise btw really don't worry about adding the github pr close link, it's something i do from my end, just the trac issue is required for future reference.",-1,0.9804086685180664
1008159935,334,DjLegolas,2022-01-08T21:46:24Z,"-- tested your fix, still have an issue. [code block]",0,0.9159734845161438
1008171328,334,cas--,2022-01-08T22:53:54Z,"hmm okay. did you update the daemon to latest code? i tested it here without issue so would need more information about how to replicate that edit: oh i see you fix was for client side, i really don't want to have a hacky solution here though...",-1,0.6602829098701477
1443823176,412,cas--,2023-02-24T15:09:59Z,"a quick review that this is a good start but we need to be aware of backward compatibility, both with libtorrent version and daemon version.",1,0.6116123199462891
1445288020,412,jiigen,2023-02-26T07:35:29Z,"what requires the last version of libtorrent on git (and doesn't work with other versions) is the check on i2p_socket flag which can be eventually subsituted by a check on ip (i2p peers have 0.0.0.0:0 address) the ""pid"" i've introduced is even in older versions so it is not a problem. anyway this code is just a matter of visualization everything works fine even without it but it's ""ugly"" to see an empty peer list :-) what would be nice to add as a feature is the option to disable dht and pex (these are not yet available when using i2p in libtorrent) when selecting the i2p proxy and an option to enable mixed mode (this one is actually possible only with the ltconfig plugin).",1,0.8560967445373535
1567078552,412,cas--,2023-05-29T12:28:26Z,i can see the relevant changes but the code actually needs to handle when that attribute is missing for backwards compatibility. for the same reason the ui client code needs to handle connecting to older daemons that do not have `pid` or `i2p` keys in the peer dict from get_peers. we really should have tests associated with the core changes.,0,0.9670002460479736
1573302962,412,jiigen,2023-06-02T07:46:18Z,in the latest libtorrent version (2.0.9.0) there have been some changes in managing i2p: 1 - it's no more needed (but according to devs it has never) to set a proxy for i2p but it's enough to set i2p_hostname and i2p_port parameters. 2 - there's now a function to get the i2p address (destination): peer_info::i2p_destination() (which under my request has a python binding too) so using the pid can be now dropped. 3 - there are new option to fine-tune the i2p sam connection: tunnels outbound and inbound lenght and quantity. so i think that my pull request is now outdated.,0,0.9818944334983826
2311069268,460,zakkarry,2024-08-26T20:50:09Z,rebased.,0,0.9845768809318542
216031340,84,cas--,2016-05-01T09:48:24Z,"the problem i have with reverting that change is we don't have a ""why"" it is needed and i cannot replicate on ubuntu. also is was renamed to a `private` method suggests that we should not be using it.",0,0.7180312275886536
216056877,84,doadin,2016-05-01T17:19:19Z,"well im not 100% but it seems like connect is timing out when called the first time why exactly i don't know, and why it doesn't connect after deluge is like fully loaded since it shouldn't have a reason to time out i don't know. and that brings me to the next part yes it is happening on windows(you dont test on windows?) so maybe its a windows only bug? so unless we can figure out a better fix or get twisted to fix it i believe its out of our control and at least for now have to revert it.",0,0.5785626769065857
216058968,84,doadin,2016-05-01T17:55:46Z,also did you read the log i added to the ticket?,0,0.9952232241630554
216065252,84,doadin,2016-05-01T19:14:20Z,just to like super verify this i just remade an entire system os and all and still got this issue. feel free to do the same and test windows if you like.,0,0.7444857358932495
217566900,84,cas--,2016-05-06T21:45:42Z,"none of the current devs have windows machines, i certainly would only test it closer to release in virtualbox. thanks for the pr but i need to write a slightly modified and descriptive commit: 21789e0692d36",1,0.9378308653831482
217573601,84,doadin,2016-05-06T22:07:39Z,"all good, i kinda figured since there was this and that one other commit that broke windows, dont remember which but any who. im thinking of adding a jenkins job to my build pc to keep a closer eye on commits so i dont have to revert and try 10 different commits or w.e. when a issue comes up. thanks for fixing.",1,0.989134669303894
221107550,101,cas--,2016-05-23T21:53:22Z,made some minor changes and updated docscrings,0,0.982853353023529
221108333,101,bendikro,2016-05-23T21:56:45Z,close to perfection :-),1,0.9637898206710815
257147394,128,cas--,2016-10-30T12:09:21Z,"i think `openbt.png` can be deleted, i removed the test but forgot about the icon.",0,0.9914980530738831
257147519,128,bendikro,2016-10-30T12:12:11Z,removed,0,0.9591778516769409
257152660,128,bendikro,2016-10-30T14:01:14Z,does this look better?,0,0.9809697866439819
257559301,128,cas--,2016-11-01T12:54:23Z,"merged, thanks!",1,0.9624021649360657
394121285,186,doadin,2018-06-02T22:23:32Z,"it does take ip address on windows. there is no ""eth0"" or the like on windows. this breaks windows support. like said i think the only thing that should have changed is removing it setting 0.0.0.0 by default so you dont end up with a invalid setting on linux and then we should just either remove the is_ip check all together or only make it check if its an ip on windows. [a link] not is an invalid option. on windows the only closest equivalent is a something like 40 character guid. libtorrent does not accept that. nor does is accept the associated adapter ""name"" eg. ""local area connection"".",0,0.9654477834701538
394141757,186,cas--,2018-06-03T07:00:45Z,"i wanted to fix the code quickly to what is written in the libtorrent docs as it was broken for linux. you can make another pr to add windows support. perhaps some tests to ensure that it is correct for windows and linux now that we have appveyor. also ask arvid to update docs on sat, 2 jun 2018, 23:23 doadin, wrote:",0,0.9879357814788818
397685376,189,DjLegolas,2018-06-15T17:09:57Z,"ok, so i added everything but there is something strange. it doesn't catch any errors returned.. for example look at the [code block] in the file [code block]. does the callbacks functions passed to the ajax are [code block] and [code block]? as only the [code block] callbacks are being called.",0,0.9444953203201294
397907226,189,cas--,2018-06-17T21:17:59Z,"excellent, i shall have a look. i also noticed the multiple listings of autoadd plugin, i'm sure i encountered this before with other plugins but cannot remember the fix atm.",1,0.9806678295135498
397907989,189,DjLegolas,2018-06-17T21:32:53Z,currently i set the [code block] of the plugin as a static member of the [code block] class and check it's value before adding a page.,0,0.9944922924041748
404262038,189,cas--,2018-07-11T18:11:51Z,just checked code and it should be `success` and `failure`,0,0.9940675497055054
404590187,189,DjLegolas,2018-07-12T17:33:42Z,"ok, now everything suppose to work, including showing errors.",0,0.9735406041145325
404604213,189,cas--,2018-07-12T18:19:28Z,"thanks for this, merged!",1,0.9632317423820496
439000212,226,cas--,2018-11-15T10:55:02Z,"ah okay, i was testing with x64. as i said adding `gobject.threads_init` does nothing here. the change that made the difference is the removal of the `gdk` `threads_init`, which has disabled threading. i did read the following so likely solution is to disable the use of gtk/gdk theading on windows but perhaps it should removed entirely since it is deprecated in gtk3.",0,0.9823311567306519
439185265,226,doadin,2018-11-15T20:50:34Z,so far i have tested 3 vms. working on a fourth. trying to eliminate any environment issues. all builds i have tested using appveyor gtk build. 1. win7 ult x64 with x86 and x64 python windows themes enabled = threading issue(my build ive used for over a year now) 2. fresh win7 ult x86 with python x86 windows themes enabled = threading issue 3. fresh win7 ult x86 with python x86 windows themes disabled = no threading issue 4. fresh win10 enterprise x64 with python x86 windows themes enabled or disabled = no threading issue 5. fresh win7 ult x64 with python x86 = in testing perhapse with a bit more testing we can maybe just exclude win7 in threading and leave for others. im willing to test xp and 8.1 if this is a route to be considered.,0,0.8231816291809082
439195866,226,doadin,2018-11-15T21:26:19Z,"interesting results i have actually found that there windows theme influences the results. being that im testing in a vm with default drivers windows aero doesn't load. however installing the wddm driver and enabling aero deluge runs with threading. results 100% replicable by starting/stopping the ""themes"" windows service. will update this comment and previous with results. being that aero isnt the same in 8+ im guessing it works in those and vista/7 would be the only ones requiring a change.",1,0.7806491255760193
439205343,226,cas--,2018-11-15T21:58:28Z,"those are interesting results. it's really not an issue to disable threading, just need to be aware that this has been done and that in future if there are any ui lockups when running certain code then that code will need to be run in a thread.",1,0.6584131717681885
502630313,226,cas--,2019-06-17T10:39:35Z,thanks for the suggested changes. pywin32 is the official and latest version so this is not going to be changed.,1,0.9024055004119873
429245744,215,cas--,2018-10-12T08:22:06Z,please explain how this is bad?,-1,0.9433289170265198
429457530,215,PhilHudson,2018-10-12T20:47:37Z,"on a unix-alike os -- gnu+linux, macos x, *bsd, anything that supports symbolic links -- say my deluge config file is kept under source control at $home/scm/$os/$host/$home/.config/deluge/core.conf and i have a symbolic link which points to it at the usual location $home/.config/deluge/core.conf -- currently when i save any config changes, a complete config file will replace that symlink -- *not* its target -- instead of doing the right thing, which would be to follow the symlink (using os.path.realpath) and overwrite the target file it points to. changing a file's type from symlink to text file tramples on the user's legitimate wishes and intentions, for no good reason and no benefit to anyone. the change i propose loses nobody anything and gains symlink users correct application behavior, would be my claim in support of it. (for clarity, os.path.realpath returns its argument unchanged if it is not a symlink). i hope this clarifies why the current behavior is bad.",0,0.9503222107887268
429611433,215,cas--,2018-10-14T09:55:52Z,"thanks, i just needed to know the use-case. the badness is completely subjective.",1,0.6793768405914307
429620357,215,PhilHudson,2018-10-14T11:56:47Z,"it is unacceptable for any program to change a symbolic link to a data file without confirmation, at any time, for any reason, or as in this case, for no reason at all. doing so is objectively a bug. this pr is the one-line fix you need. you lose nothing by doing the right thing; you gain nothing by doing the wrong thing. please accept the change.",-1,0.6917091012001038
429627923,215,cas--,2018-10-14T13:48:10Z,"please don't muddy pr discussion with unneeded hyperbole. this is a feature request, there has never been an expectation that deluge config files could be symlinks and a program overwriting it's own config files is perfectly acceptable, it is perhaps undesirable for a narrow use-case but that is all. i am willing to accept the pr however from my point of view i first need to consider what the change is, why it is needed and if/how it will impact the thousands of other users who have never required this feature before. also what happens if a user then requests that the state files or the entire config directory should be able to be symlinked, do we also make that change? how acceptable is it that the `.new` and `.bak` files will also be created in the symlinked location? rarely are changes to a project trivial. one change that will certainly be needed is the commit message to better describe why the change is being made, without any vague 'this is bad' comments.",-1,0.752122700214386
429635232,215,PhilHudson,2018-10-14T15:22:57Z,"i take your point about hyperbole and vagueness. i will try to keep it calm and collected. i'm with you 100% on due diligence and will be glad to help in any way i can. just to be clear though, i never advocated against the program overwriting its config files; quite the contrary! i am saying that overwriting a symlink which points to the config file is precisely *not* overwriting the config file, it's overwriting something else somewhere else. as to whether this pr is a bug or an rfe, i don't care what it's called so long as it gets in. i will simply observe that most programs exhibit the correct behavior. (deluge is definitely not the only one overwriting symlinks though.) i also wondered about the `.new` and `.bak` files. as a first pass, i would suggest the right place for `.new` is `$temp` or `%temp%`, and for `.bak` it's the target config file's enclosing directory (no change for `.bak`, in other words).",1,0.9656643271446228
429646768,215,PhilHudson,2018-10-14T17:48:42Z,"i've updated the commit message. i think it still needs work, but is it at least a bit better now?",0,0.9669433832168579
431673314,215,cas--,2018-10-21T14:25:37Z,updated the commit and merged: c01679de1f24ea11,0,0.9884065985679626
1049024176,380,cas--,2022-02-23T17:24:07Z,when adding the service file to the code i discussed that there was no need for a separate user service file since they are identical service files: [a link] i'm not seeing anything here that would change that? maybe what is missing is additional documentation for installing a user service file?,0,0.9908831715583801
1049102548,380,WhyNotHugo,2022-02-23T18:51:26Z,they have some differences identical: the user service includes a `slice` and depends on a different target (the user service manager and system service manager have different targets). copying one into the others location won't work.,0,0.9793269634246826
1049164087,380,cas--,2022-02-23T20:03:29Z,"ah i was unaware that user service doesn't include `multi-user.target`. would setting the service to use `default.target` be a solution as i see it is usually symlinked to multi-user anyway? i know that the `wantedby` can be overridden but could that be more complicated that a separate service file :thinking: why include `slice`, i not sure i see the benefit here for the single deluged service? and why only for the user service?",0,0.9467552900314331
1049176970,380,WhyNotHugo,2022-02-23T20:18:13Z,"including the slice indicates to the service manager that this is a background service. this can be used to handle oom situations, or prioritising foreground processes. there's no equivalent for system services. i'm not sure about pulling the system service for `default.target`; i don't know how that interoperates when booting into rescue mode or other special modes. it might be fine, but i can't guarantee it. ultimately though, shipping the two distinct files makes life easier for packagers of systemd-based distros since it signals that they can just copy both of them to their respective locations. i would also like to include a `sysusers` file for the system service to automatically handle that user (mostly to de-duplicate work that being repeated downstream). i'd rather tackle that last item separately though to scope the pra better.",0,0.9799730777740479
1049208084,380,cas--,2022-02-23T20:55:39Z,"okay this change makes sense, thanks for details. we would need the same for web service though",1,0.9464144706726074
1057088622,380,WhyNotHugo,2022-03-02T15:57:40Z,thanks for wrapping this one up. :+1:,1,0.996034562587738
1573980616,404,DjLegolas,2023-06-02T16:11:24Z,"i think i'll replace the torrent i use for the test with another one, with less inner files/dirs. in addition, probably it will be best to also add tests for single file and hybrid torrents before merging.",0,0.9822720289230347
1574417165,404,DjLegolas,2023-06-02T23:03:17Z,"well, added both and must note that the default `filetree` parser will be according to the btv1 spec.",0,0.9937180280685425
1037310929,372,cas--,2022-02-12T17:01:32Z,nice set of tests :+1:,1,0.9964859485626221
1037314099,372,gazpachoking,2022-02-12T17:05:30Z,agreed. lgtm!,1,0.9920828342437744
211375833,68,bendikro,2016-04-18T13:18:28Z,updated to avoid stack trace when killing deluge-web with ctrl-c,0,0.9937891364097595
211393798,68,cas--,2016-04-18T14:02:46Z,could you rebase please,0,0.9818315505981445
211407852,68,bendikro,2016-04-18T14:39:53Z,"oops, sorry",-1,0.9950805902481079
211408683,68,bendikro,2016-04-18T14:42:24Z,fixed,0,0.920660674571991
211415644,68,cas--,2016-04-18T14:57:01Z,merged: [70d8b65f0a499],0,0.9938111901283264
254491657,112,bendikro,2016-10-18T12:25:52Z,"ah, yeah, i forgot to label the last commit with the ticket #2875. but i don't see what the web test should be a separate commit? it is added to verify that the bug is fixed. i do see that it may look cleaner, but imo, tests and implementation really goes together.",0,0.9593068361282349
254515286,112,cas--,2016-10-18T13:56:54Z,to me it looks like web test refactoring that's not directly related to the bug?,0,0.9856348633766174
254527057,112,bendikro,2016-10-18T14:34:31Z,"well, `deluge/tests/test_webserver.py` contains the new test, but there were some refactoring to reduce code reuse.",0,0.9922704696655273
254573262,112,cas--,2016-10-18T17:04:59Z,"it'd be best to have an initial 'refactor web test code' then 'fix bencode' followed by 'fix filehash (with tests)'. currently the commits are not distinct with filehash tests in bencode commit... (i think this was the original gist of my comments :) keeping issue commits clean is important for historical viewing, blame and merging especially where there is a clear defined bug and fix.",1,0.8552660942077637
254750108,112,bendikro,2016-10-19T08:38:21Z,"ahh, i see the misunderstanding. the test together with `[#2900] fix error loading torrent: invalid bencoded value` was not supposed to test the filehash field, but the bencode issue, but i think i forgot that somehow, and tested the filehash twice. after creating the new torrent with the filehash field, the bencode issue cannot be reproduced on that torrent, so the test is pointless atm. i'll move the json issue into a separate pr.",0,0.8087013363838196
256924572,112,cas--,2016-10-28T13:48:43Z,thanks for effort on this! merged: 41fed16d,1,0.9894458651542664
255901424,124,aresch,2016-10-25T00:14:24Z,"the changes to the commands/config.py look correct to me. the next() function will call the correct function on the object to get the next iterable, .next() for python2 or .**next**() for python3. instead of passing the 'next function' to the atom function, we just pass it the object and let it do next(obj) instead of calling .next() or .**next**() on the object directly.",0,0.9212451577186584
255901906,124,aresch,2016-10-25T00:17:49Z,"the changes to import the zip from future_builtins will require a new dependency for deluge. this is probably ok, but we need to make sure it ends up in depends at a minimum. as an aside, have we considered creating a proper requirements.txt file instead of the depends file? this would make it easier for people to do a simple pip install -r requirements.txt to fetch (most) of what's necessary.",0,0.98982834815979
255902238,124,aresch,2016-10-25T00:20:02Z,"the fixes to division look good. i was a bit worried about doing this and was going to do it in a separate pr, but i think what you've done makes sense. the other option would have been to import in an old_division function from futurize but i wasn't terribly keen on that.",1,0.9665241241455078
256001866,124,cas--,2016-10-25T10:48:43Z,"what new dependency for [a link]? it is included in python 2. i have been looking at requirements.txt for pip but i'm not sure how much it will help on linux as all the requirements are packaged and still need gtk and libtorrent from source or package. i am careful to ensure that dependencies are widely available to ensure ease of installation for end user. we will need the dependency on python-future for the next stage of changes, it's unavoidable. but that is now available as a package for distros so not an issue.",0,0.958407998085022
256229825,124,aresch,2016-10-26T02:01:39Z,so it is. i must have tried importing it with python3. this pr looks good to me.,1,0.9244417548179626
256301593,124,cas--,2016-10-26T09:54:20Z,i have had to revert the iteritems changes as it has too many issues needing resolved. namely `exceptions.runtimeerror: dictionary changed size during iteration`. either we go through each change and decide what exact operation is needed or use `future` to apply the changes with the py2 shim.,0,0.9542996883392334
256405201,124,aresch,2016-10-26T16:34:08Z,"yup, that sound good to me. we can fix it or import something from the futurize package like you said.",0,0.8865407109260559
352585895,155,DjLegolas,2017-12-18T23:03:14Z,"i wrote a handler in ef6ca96. on [a link] message, deluge will register itself as a shutdown-blocker. next, when receiving [a link] message, deluge should have 30 seconds to save all the data - depending on whether critical shutdown or not. but the lack of a proper tool for testing this makes me feel like the is something wrong with my work.",-1,0.9080597758293152
428009075,155,DjLegolas,2018-10-08T23:17:18Z,"so, i was trying to implement what you suggested, and now the gtk crashes... the only errors i found related are `0xc0000005` (access violation) followed by `0xc000041d` (an unhandled exception was encountered during a user callback)... still not sure why.",0,0.6061103940010071
428111143,155,cas--,2018-10-09T08:44:50Z,"oh hmm, probably some issue with setting up setwindowlong. don't worry about the pywin32 deprecation, it can wait, i posted it here as a reminder until everything is working.",0,0.8514727354049683
336661750,170,cas--,2017-10-14T19:38:33Z,yeah i have no idea why it was switched to a single file either and have been mulling this change to mitigate data loss and few reads/writes. i would not want to put this change into `1.3-stable` but more than welcome for it to go into `develop` for 2.0.,0,0.9402564764022827
336674698,170,aresch,2017-10-14T23:30:13Z,"sorry, i meant to reply to this when i first saw it. this was a long time ago, but i think the reason to make it a single file was the same as you have now splitting it up -- performance. i think writing a lot of small files (especially with very large sessions) could cause some slow downs, but it could have just been the way it was done at the time. i could see a slow disk causing some issues. for what it's worth, my original implementation was single files and my intention was to allow updating individual fast resume data without having to write out a large file each time. *shrug* i'm ok with changing it back to separate files, but i think cas is right that we should probably stage that for 2.0.",-1,0.9789268374443054
354626028,170,AllSeeingEyeTolledEweSew,2017-12-31T22:19:31Z,i'm a little concerned that 2.0 is ... very far away. i found this bug of *7 years* slated to be fixed in 2.0: [a link] is there any way i could modify this change so it's more acceptable for 1.3?,-1,0.9760875701904297
354663964,170,cas--,2018-01-01T17:04:35Z,i am working on this currently so will be in a 2.0 release,0,0.9230052828788757
355792641,170,AllSeeingEyeTolledEweSew,2018-01-07T01:47:14Z,"sorry -- is that to say you're currently working on state in multiple files, in 2.0? one of the reasons i'm interested in 1.3 over 2.0 is that the (fairly large) private trackers i use allow 1.3 in their client whitelists, but not 2.0. tracker administrators do not like beta clients at all.",-1,0.9873138070106506
356362505,170,cas--,2018-01-09T17:54:25Z,there is nothing new going in to 1.3-stable only critical bugfixes. help with getting 2.0 to release status is always appreciated. the problem has been that too many features were added to develop and squashing all the resulting issues takes time and in that time many many bugs in 1.3 needed also fixing...,1,0.9634049534797668
357148297,170,AllSeeingEyeTolledEweSew,2018-01-12T05:42:01Z,"closing then. thanks for your time. unfortunately as i mentioned before, the project driving these prs is tied to private trackers, so i won't be able to meaningfully test this code against a development branch for some time.",1,0.9609071612358093
500986759,244,cas--,2019-06-11T19:23:48Z,thanks merged! a34543100c5,1,0.9931991696357727
501449196,244,thelamer,2019-06-12T20:47:22Z,-- is there a disconnect with your downstream debs or does stuff from this repo not go into those ? the latest release we pulled in does not have this change but you merged and tagged it properly here. grab deb: [code block] output: [code block],0,0.9947593808174133
501457568,244,cas--,2019-06-12T21:13:10Z,thanks!! i forgot that it needs to pull the git repo before hitting build button! i'll fix it just now,1,0.9965123534202576
501458099,244,cas--,2019-06-12T21:14:58Z,i assume the version is still showing as 2.0.2 for `deluge-web --version`?,0,0.9919896721839905
501471598,244,downtowns,2019-06-12T22:03:07Z,"the linuxserver/deluge docker container i pulled down earlier today reports: deluge-web 2.0.3-1-201906082034-ubuntu18.04.1 libtorrent: 1.1.5.0 python: 3.6.8 os: linux 4.9.125-linuxkit which aligns with ""latest"" listed at [a link]",0,0.9948167204856873
501478785,244,cas--,2019-06-12T22:32:26Z,a new version `2.0.3-2~201906121747` has been published,0,0.9925709366798401
501484364,244,thelamer,2019-06-12T22:57:45Z,![a link] all good now thanks!,1,0.9945530295372009
548322833,256,cas--,2019-10-31T11:18:00Z,expander-size for gtktreeview does not appear to have been deprecated. also deprecated in 3.20 is not a big issue as we still target 3.10. [a link],0,0.9918400049209595
548346453,256,doadin,2019-10-31T12:22:11Z,does it not work in 3.10? even though it hasn't been removed yet would it still be nice to get ahead for when we do move on/it is removed? idk i was partly going based on gtk3 docs.,0,0.9882106781005859
901875380,288,Erarshad,2021-08-19T12:31:38Z,[a link] now deluge mobile client is also available for android and ios. it is open source fork repository give star and feel free to send pr,1,0.52778160572052
997355409,288,cas--,2021-12-19T09:16:22Z,"looks good, i'll merge it next time i'm working on the code. i thought we might need to leave core method stub for deprecation but core should not be a hard dependency for a ui component. try to include your reasoning for making changes in the commit message.",1,0.7773144245147705
997356046,288,cas--,2021-12-19T09:21:37Z,i did actually find that the console ui is also depending on a core module: [a link],0,0.9946958422660828
997383042,288,DjLegolas,2021-12-19T12:21:43Z,"i'll look into it. in addition, i have a problem with adding the security only unittest to the ci. do you have an idea?",0,0.950125515460968
890389292,312,cas--,2021-07-31T18:48:26Z,fyi the failing tests are due to twisted 21.7.0 release with incorrect twisted defer import in test_torrent,0,0.9593477845191956
890425484,312,iczero,2021-08-01T00:58:42Z,"torrent_test.py `test_torrent_error_resume_data_unaltered` seems to fail with libtorrent 2.0, maybe it's the same issue as with 1.2? `test_console_command_add` in test_ui_entry.py seems to hang, currently trying to figure out why edit: ~~deluge-console seems to hang, but deluge-web and deluge-gtk work fine~~ deluge-console seems to work entirely fine outside of tests, but hangs when doing tests. edit 2: deluge-console will silently hang if connecting to localhost, username/password aren't provided, and `localclient` isn't in the auth file. (this should be unrelated to tests) edit 3: i give up, test_ui_entry refuses to work and i can't figure out why. i've got an instance running with libtorrent 2 for a day now and it's been stable",0,0.793689489364624
890446310,312,iczero,2021-08-01T04:15:22Z,"it seems the disk cache was removed from libtorrent in favor of mmap, but i'm not sure. there's still a few places in deluge that request `disk.num_blocks_cache_hits` and `disk.read_cache_blocks`, which no longer exist.",0,0.9863530397415161
896624624,312,ghost,2021-08-11T08:38:43Z,no releases in 2 years and you're adding v2 support!,1,0.5887119770050049
924389304,312,cas--,2021-09-21T21:14:52Z,i have merged the stats plugin commit: ea609cd3e0193c395 i'll have a look at what is needed for libtorrent 2.0 support,0,0.9800889492034912
933001794,312,cas--,2021-10-03T18:27:52Z,merged 89189adb24321c,0,0.9913075566291809
933002129,312,cas--,2021-10-03T18:30:22Z,thanks i added a workaround for lt 2.0 file_progress issue until fixed in 2.0.5 and the tests are very slow for some reason under lt 2.0,1,0.932640790939331
52536086,7,cas--,2014-08-18T18:41:42Z,the codepainter changes should be rebased into the original commit.,0,0.9940890073776245
52561119,7,omaralvarez,2014-08-18T21:55:19Z,"everything should be fixed, you were right in everything that you pointed out.",1,0.5627893209457397
52614462,7,cas--,2014-08-19T10:16:42Z,"ok it looks good, the only problem i can see is that the `port` entry box is not given enough space and entering a port number causes `hboxhost` to shift left. i think putting port on the line below would be better. the vertical space shouldn't be an issue as it's unlikely anyone is going to be putting more than a few entries in recipients box, although you could use `hideheaders` to match the gtk layout and save a little space.",1,0.6154671311378479
52614671,7,omaralvarez,2014-08-19T10:18:56Z,"yup, i agree, i'll make the changes as soon as i can.",0,0.9464920163154602
52643135,7,omaralvarez,2014-08-19T14:35:30Z,everything should fixed. i also made the password not visible.,0,0.9213240146636963
52652417,7,cas--,2014-08-19T15:35:40Z,"thanks, i added a commit with a few minor changes to fix alignment.",1,0.8847801089286804
59324763,20,doadin,2014-10-16T07:39:48Z,"if deluge is compiled and run from python, deluge_exe = c:\python27\deluge.exe when it should be c:\python27\scripts\deluge.exe in order to work. there for if the file path that is made by deluge_exe doesnt exist dont set a registry key to associate magnets with a non existing program. i believe this is the only case this will happen. since its just giving the path to python.exe and then adding deluge.exe we could maybe just set deluge_exe like it is but just add ""/scripts"" to it in a try block or something but thats up to you devs.",0,0.9829802513122559
59330542,20,doadin,2014-10-16T08:38:00Z,updated this to still work if run from python but still set the exe path like it was if its not. imo the check to see if the file set by deluge_exe exists should still be in place to prevent any odd cases.,0,0.9876018166542053
59330983,20,doadin,2014-10-16T08:42:26Z,fixed syntax issue should be all set now.,0,0.9923073649406433
59331179,20,doadin,2014-10-16T08:44:23Z,opps now it should be lol,1,0.46868130564689636
60383636,20,doadin,2014-10-24T13:04:12Z,is there anything else i should do?,0,0.9832383394241333
61934843,20,doadin,2014-11-06T07:00:18Z,this one is all clean too.,0,0.9843910932540894
250022422,108,cas--,2016-09-27T22:52:28Z,i'm sorry this has to be fixed in libtorrent as a deprecated method. by all means provide to package managers as interim workaround.,-1,0.9870953559875488
250068726,108,minus7,2016-09-28T04:27:24Z,"i'm not sure how this should be solved then. to my understanding, the method was removed at your request to be able to distinguish whether the feature is available or not: [a link]",0,0.9566929340362549
250085951,108,aresch,2016-09-28T06:49:43Z,this seems like a reasonable fix to allow deluge to work with newer versions of libtorrent. why don't we just include it? it's harmless if the function is re-added to future libtorrent versions.,0,0.9681100845336914
250112196,108,cas--,2016-09-28T09:04:15Z,"i forgot about that change... so the actual fix is for the try block to also catch the attributeerror, at the time i think i assumed a runtimeerror would be raised. i am trying to avoid any changes to 1.3 codebase so either 1.1 is backward compatible or it is not. i know this pr is for develop but these compatibility changes would have to be made to 1.3 as well.",0,0.9396589398384094
250114444,108,cas--,2016-09-28T09:13:51Z,looking at the [a link] it has a general exception catch so that is fine. i shall just commit the changes to develop code. thanks minus for investigating! :),1,0.9963930249214172
250120412,108,cas--,2016-09-28T09:40:46Z,fix details in [a link],0,0.9957798719406128
255475693,122,elemongw,2016-10-21T21:59:50Z,i wanted to avoid doing it this way so as to not introduce any extra potential slowness.,0,0.9399491548538208
255480985,122,cas--,2016-10-21T22:32:53Z,which bit of code would be slow?,0,0.9611921310424805
256302349,122,cas--,2016-10-26T09:57:49Z,"thanks for these changes, i made a few tweaks and is now merged: c4282f29abbd",1,0.9645209908485413
306238379,157,cas--,2017-06-05T16:41:40Z,thanks for this but how can this be scripted? all the png images under `deluge/ui/data` and `deluge/ui/web/icons` are generated from svgs. also this is failing the tests because you compressed a comparison png.,1,0.9332213401794434
306244870,157,Fish2,2017-06-05T17:05:26Z,i used advpng and pngout so you could probably use that but would have to add it to the build requirements which would then make the build bigger. i have added a fix for the comparison test,0,0.9933962821960449
306249414,157,cas--,2017-06-05T17:22:19Z,it is a dev tool not for inclusion with build. i see that `advpng` is available for ubuntu with `apt install advancecomp` so we can use that. the current scripts under `deluge/scripts` can be extended to run over the pngs and compress them.,0,0.9944408535957336
306250425,157,Fish2,2017-06-05T17:26:14Z,that sounds good to me,1,0.9252197742462158
325446289,157,diogocp,2017-08-28T18:58:48Z,advpng is not very good. pngcrush is also available in ubuntu and will probably give you much better results. see [a link] for a comparison of various tools. converting the gifs to png should also help.,0,0.8893964886665344
399114868,157,cas--,2018-06-21T14:03:53Z,pngs have been compressed with zopflipng: fe42fb2c31d87b013,0,0.9906826019287109
399701418,187,doadin,2018-06-23T19:03:06Z,this ok now?,0,0.9687545299530029
399701962,187,cas--,2018-06-23T19:13:36Z,"i need to test what is and isn't allowed, i asked for clarification but no definitive answer: arvidn/libtorrent#3087",0,0.9857819080352783
426956647,187,cas--,2018-10-04T09:53:01Z,"after discussing with arvidn, i removed the checks and made the code changes: c415b097fe thanks for helping with this.",1,0.9074809551239014
405284746,203,cas--,2018-07-16T15:23:33Z,"merged, thanks.",1,0.6970474720001221
626304275,289,cas--,2020-05-10T10:15:14Z,"in the commit message, please use [core] instead of [torrentmanager], it's too specific. can you also include a link to the github discussion, thanks",0,0.5136888027191162
789935024,289,kslr,2021-03-03T17:54:25Z,hey -- can you merge it ?,0,0.9937894940376282
818581343,289,ghost,2021-04-13T09:10:45Z,why is it not being merged? why is deluge so dead?,0,0.808517336845398
821847878,289,cas--,2021-04-17T16:16:37Z,"thanks , sorry took so long to merge: 8676a0d2a",-1,0.9897772669792175
664199440,298,petersasi,2020-07-27T08:29:00Z,"afaics both updated files are about installing as service. correct me if i am wrong but as far as i know the edit: i am wrong. deluge-web-debug version of each executable is the one to be used for installation as a service. 1. maybe the above distinction is windows only? - edit: i have just installed a focal, yes it, sorry it is confusing vs. windows deluge 2. i do find this very misleading, because in reality -l debug is the command line parameter that enables debug logging. 3. not sure if it is my place to say, but i do usually promote using -l warning by default, this will log events that point to performance bottlenecks (e.g. reaching certain buffer / list size / bandwidth limits).",-1,0.8914976716041565
664387687,298,BenQuigley,2020-07-27T13:12:36Z,"no; you can see in the [a link] that there's no `-d` option for `deluge-web` (which as you point out is a separate executable). in the `deluged` executable, `-d` is for `--do-not-daemonize`. i think (but have not checked) this option may have once existed in `deluge-web` too, but either way, it needs to be removed from these service docs because when someone tries to build a systemd service that tells the system to run `deluge-web` with `-d`, it is going to fail: [code block]",0,0.9889692068099976
664451580,298,bendikro,2020-07-27T15:04:21Z,on [a link] you find the statement `self.parser.add_process_arg_group()` which is a call on [a link] which adds the `--do-not-daemonize` option when not on windows.,0,0.9943285584449768
664456170,298,BenQuigley,2020-07-27T15:12:08Z,"hmm, thanks for the correction . i encountered that ""no such option"" error on a raspberry pi running deluge-web version 1.3.13.",1,0.9405606985092163
664466942,298,bendikro,2020-07-27T15:30:48Z,"yeah, the `-d` option in deluge-web is new in deluge v2",0,0.990323543548584
664472987,298,BenQuigley,2020-07-27T15:41:47Z,thanks!,1,0.8631755113601685
1005952827,332,DjLegolas,2022-01-05T18:03:06Z,i saw it in [a link] so i copied the behavior in case it still exists. change that too?,0,0.9939274787902832
1005972433,332,cas--,2022-01-05T18:25:32Z,yep change there too :+1:,1,0.9859246611595154
1005989667,332,cas--,2022-01-05T18:50:31Z,"that looks fine, do you mind updating the commit message to mention the reason for change and reference commit id 9b812a4",0,0.8897630572319031
1005996554,332,DjLegolas,2022-01-05T19:01:05Z,hope it is good enough :grinning_face_with_smiling_eyes:,1,0.9961657524108887
1006439474,332,cas--,2022-01-06T10:11:02Z,"that was exactly what was needed :+1: remember to add a reference to the trac ticket in commit messages too, something like this: ![a link] i automatically add the pr close line to simplify workflow so don't worry about that.",1,0.9932457804679871
